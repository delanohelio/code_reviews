{"pr_number": 1304, "pr_title": "Create OP_RETURN parser", "pr_author": "guidohernan93", "pr_createdAt": "2020-09-09T16:59:38Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1304", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5OTE4Mw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485799183", "body": "I suggest making this class extend `PeginInstructionsException`", "bodyText": "I suggest making this class extend PeginInstructionsException", "bodyHTML": "<p dir=\"auto\">I suggest making this class extend <code>PeginInstructionsException</code></p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:36:42Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package co.rsk.peg.pegininstructions;\n+\n+public class PeginInstructionsParseException extends Exception {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\nindex 86dec09d1..143206a77 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n", "chunk": "@@ -1,5 +1,5 @@\n package co.rsk.peg.pegininstructions;\n \n-public class PeginInstructionsParseException extends Exception {\n+public class PeginInstructionsParseException extends PeginInstructionsException {\n     public PeginInstructionsParseException(String message) { super(message); }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\nindex 143206a77..86dec09d1 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n", "chunk": "@@ -1,5 +1,5 @@\n package co.rsk.peg.pegininstructions;\n \n-public class PeginInstructionsParseException extends PeginInstructionsException {\n+public class PeginInstructionsParseException extends Exception {\n     public PeginInstructionsParseException(String message) { super(message); }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\nindex 86dec09d1..143206a77 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java\n", "chunk": "@@ -1,5 +1,5 @@\n package co.rsk.peg.pegininstructions;\n \n-public class PeginInstructionsParseException extends Exception {\n+public class PeginInstructionsParseException extends PeginInstructionsException {\n     public PeginInstructionsParseException(String message) { super(message); }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMDAwNg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485800006", "body": "```suggestion\r\n            logger.debug(\"[buildPeginInstructions] {}\", message);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.debug(\"[buildPeginInstructions] {}\", message);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">getOpReturnOutput</span>] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">buildPeginInstructions</span>] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "josedahlquist", "createdAt": "2020-09-09T17:38:13Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,13 +13,15 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n \n         if (opReturnOutput == null || opReturnOutput.length == 0) {\n             String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMTMzMQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485801331", "body": "```suggestion\r\n    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws PeginInstructionsException {\r\n```\r\nYou should return the interface, not the base class, and the method should throw a specific Exception, not a generic one", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n          \n          \n            \n                public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws PeginInstructionsException {\n          \n      \n    \n    \n  \n\nYou should return the interface, not the base class, and the method should throw a specific Exception, not a generic one", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">PeginInstructionsBase</span> buildPeginInstructions(<span class=\"pl-smi\">BtcTransaction</span> btcTx) throws <span class=\"pl-smi x x-first x-last\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">PeginInstructions</span> buildPeginInstructions(<span class=\"pl-smi\">BtcTransaction</span> btcTx) throws <span class=\"pl-smi x x-first x-last\">PeginInstructionsException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You should return the interface, not the base class, and the method should throw a specific Exception, not a generic one</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:40:30Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -1,7 +1,11 @@\n package co.rsk.peg.pegininstructions;\n \n import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -6,6 +6,7 @@ import co.rsk.bitcoinj.script.ScriptOpCodes;\n import co.rsk.peg.InvalidOpReturnOutputException;\n import co.rsk.peg.NoOpReturnException;\n import java.util.List;\n+import java.util.Optional;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -3,7 +3,6 @@ package co.rsk.peg.pegininstructions;\n import co.rsk.bitcoinj.core.BtcTransaction;\n import co.rsk.bitcoinj.script.ScriptChunk;\n import co.rsk.bitcoinj.script.ScriptOpCodes;\n-import co.rsk.peg.InvalidOpReturnOutputException;\n import co.rsk.peg.NoOpReturnException;\n import java.util.List;\n import java.util.Optional;\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -3,9 +3,9 @@ package co.rsk.peg.pegininstructions;\n import co.rsk.bitcoinj.core.BtcTransaction;\n import co.rsk.bitcoinj.script.ScriptChunk;\n import co.rsk.bitcoinj.script.ScriptOpCodes;\n-import co.rsk.peg.NoOpReturnException;\n import java.util.List;\n import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -1,11 +1,7 @@\n package co.rsk.peg.pegininstructions;\n \n import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.bitcoinj.script.ScriptChunk;\n-import co.rsk.bitcoinj.script.ScriptOpCodes;\n-import java.util.List;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -1,7 +1,11 @@\n package co.rsk.peg.pegininstructions;\n \n import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": null}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,80 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n-        PeginInstructions peginInstructions;\n-        byte[] opReturnOutputData;\n-\n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n-            return Optional.empty();\n-        }\n-\n-        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n-            String message = \"Invalid OP_RETURN data found\";\n-            logger.debug(\"[buildPeginInstructions] {}\", message);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructionsVersion1.parse(opReturnOutput);\n                 peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n                 logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -15,10 +14,16 @@ public class PeginInstructionsProvider {\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n     public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+        PeginInstructionsException {\n \n         PeginInstructions peginInstructions;\n-        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n \n         if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n             String message = \"Invalid OP_RETURN data found\";\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,12 +16,15 @@ public class PeginInstructionsProvider {\n     public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException {\n \n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructions peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n             return Optional.empty();\n         }\n \n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -28,12 +28,6 @@ public class PeginInstructionsProvider {\n             return Optional.empty();\n         }\n \n-        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n-            String message = \"Invalid OP_RETURN data found\";\n-            logger.debug(\"[buildPeginInstructions] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n \n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n", "next_change": {"commit": "4756a232cd05ace791ed354e1456cbc4148b4559", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..cdfbb0f63 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -23,9 +23,11 @@ public class PeginInstructionsProvider {\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+        } catch (NoOpReturnException e) {\n             return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -31,13 +34,17 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n                 peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n                 logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -47,10 +43,11 @@ public class PeginInstructionsProvider {\n                 logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n+        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n         return Optional.of(peginInstructions);\n     }\n \n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -37,17 +38,17 @@ public class PeginInstructionsProvider {\n         switch (protocolVersion) {\n             case 1:\n                 logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n-                peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n                 logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n         return Optional.of(peginInstructions);\n     }\n \n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,24 +14,24 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -26,13 +34,17 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n                 peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n                 logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -47,10 +43,11 @@ public class PeginInstructionsProvider {\n                 logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n+        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n         return Optional.of(peginInstructions);\n     }\n \n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -37,17 +38,17 @@ public class PeginInstructionsProvider {\n         switch (protocolVersion) {\n             case 1:\n                 logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n-                peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n                 logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n         return Optional.of(peginInstructions);\n     }\n \n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,13 +13,15 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n \n         if (opReturnOutput == null || opReturnOutput.length == 0) {\n             String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjE5OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485802199", "body": "```suggestion\r\n            logger.debug(\"[extractOpReturnData] {}\", message);\r\n```\r\nAnd there is another logger with the same typo", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.debug(\"[extractOpReturnData] {}\", message);\n          \n      \n    \n    \n  \n\nAnd there is another logger with the same typo", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">getOpReturnOutput</span>] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">extractOpReturnData</span>] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">And there is another logger with the same typo</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:42:00Z", "path": "rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java", "diffHunk": "@@ -57,4 +68,38 @@ public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock acti\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n                 (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 3d87860f1..0b6b47654 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -66,40 +56,7 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n-    }\n-\n-    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n-        }\n-\n-        return data;\n+            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n+                && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 0b6b47654..3d87860f1 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -56,7 +66,40 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n-                && size <= MAX_BLOCK_HEADER_SIZE);\n+                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n+    }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = \"Only one output with OP_RETURN is allowed\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new InvalidOpReturnOutputException(message);\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 3d87860f1..0b6b47654 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -66,40 +56,7 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n-    }\n-\n-    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n-        }\n-\n-        return data;\n+            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n+                && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjQ5OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485802498", "body": "Why should it fail if it doesn't find an op_return op code?", "bodyText": "Why should it fail if it doesn't find an op_return op code?", "bodyHTML": "<p dir=\"auto\">Why should it fail if it doesn't find an op_return op code?</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:42:35Z", "path": "rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java", "diffHunk": "@@ -57,4 +68,38 @@ public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock acti\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n                 (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MzUxMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487043512", "bodyText": "This no longer makes sense", "author": "josedahlquist", "createdAt": "2020-09-11T13:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 3d87860f1..0b6b47654 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -66,40 +56,7 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n-    }\n-\n-    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n-        }\n-\n-        return data;\n+            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n+                && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 0b6b47654..3d87860f1 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -56,7 +66,40 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n-                && size <= MAX_BLOCK_HEADER_SIZE);\n+                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n+    }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = \"Only one output with OP_RETURN is allowed\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new InvalidOpReturnOutputException(message);\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\nindex 3d87860f1..0b6b47654 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java\n", "chunk": "@@ -66,40 +56,7 @@ public class BtcTransactionFormatUtils {\n \n     public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock activations) {\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n-                (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n-    }\n-\n-    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n-        }\n-\n-        return data;\n+            (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE\n+                && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485803104", "body": "Add a couple more tests, null and empty data at least.", "bodyText": "Add a couple more tests, null and empty data at least.", "bodyHTML": "<p dir=\"auto\">Add a couple more tests, null and empty data at least.</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:43:42Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NjY5Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485856692", "bodyText": "Add the case when a single byte is sent in the payload", "author": "marcos-iov", "createdAt": "2020-09-09T19:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NzMxOA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485857318", "bodyText": "Maybe also a test when protocol version > 9 to check that it's parsing hex values to int correctly", "author": "marcos-iov", "createdAt": "2020-09-09T19:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMjE3OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488112178", "bodyText": "Add the case when a single byte is sent in the payload\n\nIt is not possible that this method receive only one byte of data.", "author": "guidohernan93", "createdAt": "2020-09-14T17:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3Njk3MQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488176971", "bodyText": "what about:\n\nAdd a couple more tests, null and empty data at least.", "author": "josedahlquist", "createdAt": "2020-09-14T19:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwMDA2Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488200062", "bodyText": "extractOpReturnData will never return null or empty data.", "author": "guidohernan93", "createdAt": "2020-09-14T20:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex a39947e86..7613f9233 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -13,4 +13,12 @@ public class PeginInstructionsBaseTest {\n \n         Assert.assertEquals(1, protocolVersion);\n     }\n+\n+    @Test\n+    public void extractProtocolVersion_version_bigger_than_9() {\n+        int protocolVersion =PeginInstructionsBase.extractProtocolVersion(\n+            Hex.decode(\"000a0e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(10, protocolVersion);\n+    }\n }\n", "next_change": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex 7613f9233..76bdf2c13 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -16,7 +16,7 @@ public class PeginInstructionsBaseTest {\n \n     @Test\n     public void extractProtocolVersion_version_bigger_than_9() {\n-        int protocolVersion =PeginInstructionsBase.extractProtocolVersion(\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n             Hex.decode(\"000a0e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n \n         Assert.assertEquals(10, protocolVersion);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex 76bdf2c13..44788e016 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -1,24 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsBaseTest {\n-\n-    @Test\n-    public void extractProtocolVersion() {\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n-                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Assert.assertEquals(1, protocolVersion);\n-    }\n-\n-    @Test\n-    public void extractProtocolVersion_version_bigger_than_9() {\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n-            Hex.decode(\"000a0e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Assert.assertEquals(10, protocolVersion);\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex 44788e016..a39947e86 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -1,4 +1,16 @@\n package co.rsk.peg.pegininstructions;\n \n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex a39947e86..76bdf2c13 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -13,4 +13,12 @@ public class PeginInstructionsBaseTest {\n \n         Assert.assertEquals(1, protocolVersion);\n     }\n+\n+    @Test\n+    public void extractProtocolVersion_version_bigger_than_9() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+            Hex.decode(\"000a0e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(10, protocolVersion);\n+    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\nindex 76bdf2c13..a6c4fbd33 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java\n", "chunk": "@@ -15,10 +15,20 @@ public class PeginInstructionsBaseTest {\n     }\n \n     @Test\n-    public void extractProtocolVersion_version_bigger_than_9() {\n+    public void extractProtocolVersion_version_bigger_than_9() throws PeginInstructionsParseException {\n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n             Hex.decode(\"000a0e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n \n         Assert.assertEquals(10, protocolVersion);\n     }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void extractProtocolVersion_null_data() throws PeginInstructionsParseException {\n+        PeginInstructionsBase.extractProtocolVersion(null);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void extractProtocolVersion_one_byte_data() throws PeginInstructionsParseException {\n+        PeginInstructionsBase.extractProtocolVersion(new byte[]{1});\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTgzMQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485805831", "body": "This and the following test should be a single test.", "bodyText": "This and the following test should be a single test.", "bodyHTML": "<p dir=\"auto\">This and the following test should be a single test.</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:48:56Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex d85f9d87d..f0c24a239 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -55,7 +59,8 @@ public class PeginInstructionsProviderTest {\n     }\n \n     @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n+        throws Exception {\n         BtcTransaction btcTransaction = new BtcTransaction(params,\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex f0c24a239..7b74125ce 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,13 +65,12 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        PeginInstructions peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+        Assert.assertEquals(1, peginInstructions.getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.getRskDestinationAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "79b2e23b18abd0a75fca2745198f2206c3e47afc", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 7b74125ce..5e03a6acc 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,12 +65,12 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructions peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n-        Assert.assertEquals(1, peginInstructions.getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.getRskDestinationAddress());\n+        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.get().getRskDestinationAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 5e03a6acc..f9e31754f 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,26 +64,28 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n         Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.get().getRskDestinationAddress());\n+        Assert.assertEquals(expectedRskDestinationAddress,\n+            peginInstructions.get().getRskDestinationAddress());\n     }\n \n     @Test\n     public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n         throws Exception {\n         BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_TX));\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n-            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         PeginInstructionsVersion1 peginInstructionsVersion1 =\n             (PeginInstructionsVersion1) peginInstructions.get();\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex f9e31754f..5a3d84e5b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -1,128 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.bitcoinj.core.Coin;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.bitcoinj.script.Script;\n-import co.rsk.bitcoinj.script.ScriptOpCodes;\n-import co.rsk.config.BridgeRegTestConstants;\n-import co.rsk.core.RskAddress;\n-import co.rsk.peg.NoOpReturnException;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsProviderTest {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-\n-        // Add OP_RETURN output with empty data\n-        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n-            Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n-            Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n-        throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n-\n-        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress,\n-            peginInstructions.get().getRskDestinationAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n-        throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), peginInstructionsVersion1.getBtcRefundAddress());\n-    }\n-\n-    @Test(expected = NoOpReturnException.class)\n-    public void getOpReturnOutput_no_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void getOpReturnOutput_two_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.INVALID_TX_2_OP_RETURNS));\n-        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-    }\n-\n-    @Test\n-    public void getOpReturnOutput_one_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n-\n-        byte[] data = PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-        String expectedData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\";\n-\n-        Assert.assertEquals(expectedData, Hex.toHexString(data));\n-    }\n-\n-    @Test\n-    public void getOpReturnOutput_empty_data_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-\n-        // Add OP_RETURN output with empty data\n-        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n-        Assert.assertNull(PeginInstructionsProvider.extractOpReturnData(btcTransaction));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 5a3d84e5b..2e47a41b3 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -1,4 +1,111 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_invalid_protocol_version() throws Exception {\n+        String rawTx = \"0200000001956f33bf742ae944ee92b9f7838c81b27c00d01c51eddf815583d71022f75a50000000006a473044022022\" +\n+                \"279ce3060a1595e61a6d04b89d59b6b8917542bc1fe9073ce2e2fd6c8e24c802205348bd58180fa89f995ff80e01e8cb60100d\" +\n+                \"f0affbc0312a83d291b073f0a4700121036ba47a8665e02bf265f849f41ce9985626fff1a4290dc87cc63c3ab0399f5765ffff\" +\n+                \"ffff0328cdf5050000000017a914603a20f8bdace9fd117feaccd9161f3497662c348700e1f5050000000017a91419d7e0ee9b\" +\n+                \"f6bd70d1d046b066d1c2726e1accc1870000000000000000186a1609990e537aad84447a2c2a7590d5f2665ef5cf9b667a0000\" +\n+                \"0000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_parse_data_length_smaller_than_expected_pegin_instructions_v1() throws\n+            Exception {\n+        String rawTx = \"02000000000101df517677f84ebd82a4719f532ef660f10dc6df2963fec596d47a559638f37b2f0000000017160014\" +\n+                \"5ab27e716e6277a99df7267292353b626c36bf16ffffffff03b03024180100000017a914c1a47cc7236ba6bf7081f3ec6440b3\" +\n+                \"6f5c8a41408700e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88ac0000000000000000166a14\" +\n+                \"00010e537aad84447a2c2a7590d5f2665ef5cf9b0247304402207e8e20ae25731ee1a4df4f1ee8b9a0da14f4157bbe7e116408\" +\n+                \"3492631aca3443022072312aabc1d8e95b98a48edbce7d9ce2247ba6b76194d4bc797a2ce38e2ee3330121024212698b17ae06e\" +\n+                \"5abc6520def8ab960adb7afb3f9d6000a4834bd3f5abc146e00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_parse_data_length_different_than_supported_pegin_instructions_v1() throws\n+            Exception {\n+        String rawTx = \"0200000001d891ab0f1365c7272b4a4932647208886ac42f6a8375a0af2839c89dc58084fb000000006a473044022\" +\n+                \"06dffd165bc596eebf09fb9d61faeeb433bcb4cd498fb701ebed6e5c71afc4a8f02201439e21528214876eb3e37b610dc41a\" +\n+                \"9daa116560f164d3903da762aecd1506d01210337005aa37799aeaa510ac681102c7fcbdac18aa155476332dd8a866e3caaa3\" +\n+                \"35ffffffff0300e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88acc4ccf5050000000017a9\" +\n+                \"14a0251d6d4eb50f44da49b8dce5a78fd46e9dc1a88700000000000000001b6a1900010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a98909100000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_return_pegin_instructions_v1() throws Exception {\n+        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n+                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n+                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n+                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n+                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_return_rsk_destination_address_from_pegin_instructions_v1() throws Exception {\n+        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n+                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n+                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n+                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n+                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 2e47a41b3..e0fb2e00c 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -26,86 +28,100 @@ public class PeginInstructionsProviderTest {\n     }\n \n     @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_invalid_protocol_version() throws Exception {\n-        String rawTx = \"0200000001956f33bf742ae944ee92b9f7838c81b27c00d01c51eddf815583d71022f75a50000000006a473044022022\" +\n-                \"279ce3060a1595e61a6d04b89d59b6b8917542bc1fe9073ce2e2fd6c8e24c802205348bd58180fa89f995ff80e01e8cb60100d\" +\n-                \"f0affbc0312a83d291b073f0a4700121036ba47a8665e02bf265f849f41ce9985626fff1a4290dc87cc63c3ab0399f5765ffff\" +\n-                \"ffff0328cdf5050000000017a914603a20f8bdace9fd117feaccd9161f3497662c348700e1f5050000000017a91419d7e0ee9b\" +\n-                \"f6bd70d1d046b066d1c2726e1accc1870000000000000000186a1609990e537aad84447a2c2a7590d5f2665ef5cf9b667a0000\" +\n-                \"0000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_parse_data_length_smaller_than_expected_pegin_instructions_v1() throws\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n             Exception {\n-        String rawTx = \"02000000000101df517677f84ebd82a4719f532ef660f10dc6df2963fec596d47a559638f37b2f0000000017160014\" +\n-                \"5ab27e716e6277a99df7267292353b626c36bf16ffffffff03b03024180100000017a914c1a47cc7236ba6bf7081f3ec6440b3\" +\n-                \"6f5c8a41408700e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88ac0000000000000000166a14\" +\n-                \"00010e537aad84447a2c2a7590d5f2665ef5cf9b0247304402207e8e20ae25731ee1a4df4f1ee8b9a0da14f4157bbe7e116408\" +\n-                \"3492631aca3443022072312aabc1d8e95b98a48edbce7d9ce2247ba6b76194d4bc797a2ce38e2ee3330121024212698b17ae06e\" +\n-                \"5abc6520def8ab960adb7afb3f9d6000a4834bd3f5abc146e00000000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_parse_data_length_different_than_supported_pegin_instructions_v1() throws\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n             Exception {\n-        String rawTx = \"0200000001d891ab0f1365c7272b4a4932647208886ac42f6a8375a0af2839c89dc58084fb000000006a473044022\" +\n-                \"06dffd165bc596eebf09fb9d61faeeb433bcb4cd498fb701ebed6e5c71afc4a8f02201439e21528214876eb3e37b610dc41a\" +\n-                \"9daa116560f164d3903da762aecd1506d01210337005aa37799aeaa510ac681102c7fcbdac18aa155476332dd8a866e3caaa3\" +\n-                \"35ffffffff0300e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88acc4ccf5050000000017a9\" +\n-                \"14a0251d6d4eb50f44da49b8dce5a78fd46e9dc1a88700000000000000001b6a1900010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a98909100000000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n     @Test\n-    public void peginInstructionsProvider_return_pegin_instructions_v1() throws Exception {\n-        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n-                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n-                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n-                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n-                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a00000000\";\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n+        throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n+\n+        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress,\n+            peginInstructions.get().getRskDestinationAddress());\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n+        throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        Address btcAddress = new Address(params,\n+            params.getP2SHHeader(),\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n         PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+        Assert.assertEquals(Optional.of(btcAddress), peginInstructionsVersion1.getBtcRefundAddress());\n+    }\n+\n+    @Test(expected = NoOpReturnException.class)\n+    public void getOpReturnOutput_no_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void getOpReturnOutput_two_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.INVALID_TX_2_OP_RETURNS));\n+        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n     }\n \n     @Test\n-    public void peginInstructionsProvider_return_rsk_destination_address_from_pegin_instructions_v1() throws Exception {\n-        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n-                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n-                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n-                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n-                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a00000000\";\n+    public void getOpReturnOutput_one_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        byte[] data = PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n+        String expectedData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\";\n \n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Assert.assertEquals(expectedData, Hex.toHexString(data));\n+    }\n \n-        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+    @Test(expected = PeginInstructionsException.class)\n+    public void getOpReturnOutput_empty_data_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+        Assert.assertNull(PeginInstructionsProvider.extractOpReturnData(btcTransaction));\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNzA1Nw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485807057", "body": "This method should be at most protected", "bodyText": "This method should be at most protected", "bodyHTML": "<p dir=\"auto\">This method should be at most protected</p>", "author": "josedahlquist", "createdAt": "2020-09-09T17:51:07Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..043103696 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -35,7 +35,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         this.btcRefundAddress = getBtcRefundAddressFromData(data);\n     }\n \n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+    protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n             return Optional.empty();\n         }\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 043103696..a62ff8e1f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,12 +32,13 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+        parseBtcRefundAddress(data);\n     }\n \n-    protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..8fa9a05c7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,10 +32,6 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        parseBtcRefundAddress(data);\n-    }\n-\n-    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n             this.btcRefundAddress = Optional.empty();\n             return;\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 8fa9a05c7..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,9 +32,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            this.btcRefundAddress = Optional.empty();\n-            return;\n+            return Optional.empty();\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODY1MQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485828651", "body": "Add `@Override` annotation", "bodyText": "Add @Override annotation", "bodyHTML": "<p dir=\"auto\">Add <code>@Override</code> annotation</p>", "author": "marcos-iov", "createdAt": "2020-09-09T18:30:13Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..42d16181b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,28 +8,37 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -31,10 +31,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n+    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -45,12 +45,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n             String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n+                + \"received %d\", data.length);\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,7 +44,9 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMjg3MA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485832870", "body": "Add @Override annotation", "bodyText": "Add @OverRide annotation", "bodyHTML": "<p dir=\"auto\">Add <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a> annotation</p>", "author": "marcos-iov", "createdAt": "2020-09-09T18:38:07Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..42d16181b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,28 +8,37 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -31,10 +31,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n+    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -45,12 +45,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n             String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n+                + \"received %d\", data.length);\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,7 +44,9 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzQ4Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485833482", "body": "```suggestion\r\n            throw new PeginInstructionsParseException(\"Invalid data length. Expected at least 22 bytes, received {}\", data.length);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PeginInstructionsParseException(\"Invalid data length\");\n          \n          \n            \n                        throw new PeginInstructionsParseException(\"Invalid data length. Expected at least 22 bytes, received {}\", data.length);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">PeginInstructionsParseException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid data length<span class=\"pl-pds x x-first x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">PeginInstructionsParseException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid data length<span class=\"x x-first\">. Expected at least 22 bytes, received {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, data</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">length</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T18:39:21Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"Invalid data length\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..42d16181b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,28 +8,37 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -31,10 +31,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n+    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -45,12 +45,12 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n             String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n+                + \"received %d\", data.length);\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,7 +44,9 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTAxNg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485835016", "body": "```suggestion\r\n        PeginInstructions peginInstructions;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PeginInstructionsBase peginInstructions;\n          \n          \n            \n                    PeginInstructions peginInstructions;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"21\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first x-last\">PeginInstructionsBase</span> peginInstructions;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"21\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi x x-first x-last\">PeginInstructions</span> peginInstructions;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T18:42:09Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,13 +13,15 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n \n         if (opReturnOutput == null || opReturnOutput.length == 0) {\n             String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTI5Ng==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485835296", "body": "```suggestion\r\n        byte[] opReturnOutputData = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n          \n          \n            \n                    byte[] opReturnOutputData = BtcTransactionFormatUtils.extractOpReturnData(btcTx);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">byte</span>[] <span class=\"x x-first x-last\">opReturnOutput</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BtcTransactionFormatUtils</span><span class=\"pl-k\">.</span>extractOpReturnData(btcTx);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">byte</span>[] <span class=\"x x-first x-last\">opReturnOutputData</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BtcTransactionFormatUtils</span><span class=\"pl-k\">.</span>extractOpReturnData(btcTx);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T18:42:39Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,13 +13,15 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n \n         if (opReturnOutput == null || opReturnOutput.length == 0) {\n             String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzODE1Nw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485838157", "body": "If opReturnOutput has only 1 byte this will throw OutOfBoundsException. Maybe when checking if the data is null we could also check if data length is at least 22 bytes", "bodyText": "If opReturnOutput has only 1 byte this will throw OutOfBoundsException. Maybe when checking if the data is null we could also check if data length is at least 22 bytes", "bodyHTML": "<p dir=\"auto\">If opReturnOutput has only 1 byte this will throw OutOfBoundsException. Maybe when checking if the data is null we could also check if data length is at least 22 bytes</p>", "author": "marcos-iov", "createdAt": "2020-09-09T18:48:20Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,13 +13,15 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n \n         if (opReturnOutput == null || opReturnOutput.length == 0) {\n             String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjIzMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485842232", "body": "```suggestion\r\n                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\r\n                ((PeginInstructionsVersion1) peginInstructions).parse(opReturnOutput);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n          \n          \n            \n                            peginInstructionsVersion1.parse(opReturnOutput);\n          \n          \n            \n                            peginInstructions = peginInstructionsVersion1;\n          \n          \n            \n                            peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n          \n          \n            \n                            ((PeginInstructionsVersion1) peginInstructions).parse(opReturnOutput);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">PeginInstructionsVersion1</span> peginInstructionsVersion1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">PeginInstructionsVersion1</span>(btcTx<span class=\"pl-k\">.</span>getParams());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                peginInstructionsVersion1<span class=\"pl-k\">.</span>parse(opReturnOutput);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                peginInstructions <span class=\"pl-k\">=</span> peginInstructionsVersion1;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                peginInstructions <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">PeginInstructionsVersion1</span>(btcTx<span class=\"pl-k\">.</span>getParams());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                ((<span class=\"pl-smi\">PeginInstructionsVersion1</span>) peginInstructions)<span class=\"pl-k\">.</span>parse(opReturnOutput);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T18:55:57Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMTY4OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487131688", "bodyText": "I don't see why would this be better. In fact, intellij warns about it.", "author": "guidohernan93", "createdAt": "2020-09-11T15:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,22 +13,24 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjY2OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485842669", "body": "```suggestion\r\n                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n          \n          \n            \n                            logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[buildPeginInstructions] Invalid protocol version given<span class=\"pl-pds x x-first x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[buildPeginInstructions] Invalid protocol version given<span class=\"x x-first\">: {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, protocolVersion</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T18:56:42Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,22 +13,24 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDgzMQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485844831", "body": "```suggestion\r\nlogger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"x x-first\">logger</span><span class=\"pl-k x\">.</span><span class=\"x\">trace(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">[buildPeginInstructions] PeginInstructions: {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, peginInstructions</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getClass());</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:00:36Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..0d4fad5f6 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -34,4 +40,38 @@ public class PeginInstructionsProvider {\n \n         return peginInstructions;\n     }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = \"Only one output with OP_RETURN is allowed\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new InvalidOpReturnOutputException(message);\n+        }\n+\n+        return data;\n+    }\n }\n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -67,7 +67,8 @@ public class PeginInstructionsProvider {\n         }\n \n         if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n             logger.debug(\"[getOpReturnOutput] {}\", message);\n             throw new InvalidOpReturnOutputException(message);\n         }\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -70,7 +77,7 @@ public class PeginInstructionsProvider {\n             String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n                 opReturnOccurrences);\n             logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n+            throw new PeginInstructionsException(message);\n         }\n \n         return data;\n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -69,14 +70,20 @@ public class PeginInstructionsProvider {\n \n         if (opReturnOccurrences == 0) {\n             String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new NoOpReturnException(message);\n         }\n \n         if (opReturnOccurrences > 1) {\n             String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n                 opReturnOccurrences);\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -87,6 +90,11 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n         return data;\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,88 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n-        PeginInstructionsVersion1 peginInstructions;\n-        byte[] opReturnOutputData;\n-\n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructionsVersion1.parse(opReturnOutput);\n                 peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.trace(\"[extractOpReturnData] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0Nzc5Ng==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485847796", "body": "```suggestion\r\n            logger.debug(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received {}\", data.length);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[validateDataLength] Invalid data length\");\n          \n          \n            \n                        logger.debug(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received {}\", data.length);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[validateDataLength] Invalid data length<span class=\"pl-pds x x-first x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[validateDataLength] Invalid data length<span class=\"x x-first\">. Expected 22 or 43 bytes, received {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, data</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">length</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:06:24Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..857e91319 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,17 +25,19 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n-            logger.debug(message);\n-            throw new PeginInstructionsParseException(message);\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            this.btcRefundAddress = Optional.empty();\n-            return;\n+            return Optional.empty();\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0ODM2OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485848369", "body": "Same message as above, put in a variable", "bodyText": "Same message as above, put in a variable", "bodyHTML": "<p dir=\"auto\">Same message as above, put in a variable</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:07:20Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..857e91319 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,17 +25,19 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n-            logger.debug(message);\n-            throw new PeginInstructionsParseException(message);\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            this.btcRefundAddress = Optional.empty();\n-            return;\n+            return Optional.empty();\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTk0Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485849942", "body": "```suggestion\r\n                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type: {}\", btcRefundAddressType);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n          \n          \n            \n                            logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type: {}\", btcRefundAddressType);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[getBtcRefundAddressFromData] Invalid btc address type<span class=\"pl-pds x x-first x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[getBtcRefundAddressFromData] Invalid btc address type<span class=\"x x-first\">: {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, btcRefundAddressType</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:10:06Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..a62ff8e1f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -60,6 +61,10 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,10 +60,6 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDE4Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485850182", "body": "Same message as above, put it in a variable", "bodyText": "Same message as above, put it in a variable", "bodyHTML": "<p dir=\"auto\">Same message as above, put it in a variable</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:10:32Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..043103696 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -62,4 +62,8 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n         return Optional.of(btcRefundAddress);\n     }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n }\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 043103696..a62ff8e1f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -60,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..857e91319 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -51,14 +48,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n         this.btcRefundAddress = Optional.of(btcRefundAddress);\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..076864d0a 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -56,7 +56,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n                 logger.debug(message);\n                 throw new PeginInstructionsParseException(message);\n         }\n", "next_change": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 076864d0a..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,12 +48,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,23 +50,16 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n-                logger.debug(message);\n-                throw new PeginInstructionsParseException(message);\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDY0MA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485850640", "body": "Log obtained address", "bodyText": "Log obtained address", "bodyHTML": "<p dir=\"auto\">Log obtained address</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:11:12Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+        }\n+", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..043103696 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -62,4 +62,8 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n         return Optional.of(btcRefundAddress);\n     }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n }\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 043103696..a62ff8e1f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -60,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..857e91319 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -51,14 +48,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n         this.btcRefundAddress = Optional.of(btcRefundAddress);\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..076864d0a 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -56,7 +56,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n                 logger.debug(message);\n                 throw new PeginInstructionsParseException(message);\n         }\n", "next_change": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 076864d0a..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,12 +48,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,23 +50,16 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n-                logger.debug(message);\n-                throw new PeginInstructionsParseException(message);\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTIzMw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485851233", "body": "```suggestion\r\n    protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n          \n          \n            \n                protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">validateDataLength</span>(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">validateAdditionalDataLength</span>(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:12:23Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n+        parseAdditionalData(data);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;", "originalCommit": "68d653e4b88970592cebaff89ae37dcf80f00075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjE1NA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487136154", "bodyText": "Name is clear I think, not validating only additional data length.", "author": "guidohernan93", "createdAt": "2020-09-11T15:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..42d16181b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -40,13 +49,4 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         validateDataLength(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..664bbbf13 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,7 +44,9 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 664bbbf13..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTc2Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485851762", "body": "```suggestion\r\n    protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n          \n          \n            \n                protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">validateDataLength</span>(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">validateAdditionalDataLength</span>(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:13:20Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMjUxNg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487022516", "bodyText": "I think the original name makes more sense. As indeed it should validate the whole data length and not just the additional.", "author": "josedahlquist", "createdAt": "2020-09-11T12:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 42d16181b..c32bc2a9f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -18,8 +18,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n     protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex c32bc2a9f..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MjYyMQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485852621", "body": "I would add some trace level logging, btc tx hash, protocol version, maybe op return data also", "bodyText": "I would add some trace level logging, btc tx hash, protocol version, maybe op return data also", "bodyHTML": "<p dir=\"auto\">I would add some trace level logging, btc tx hash, protocol version, maybe op return data also</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:14:55Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,21 +16,21 @@ public class PeginInstructionsProvider {\n     public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n \n-        PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData = extractOpReturnData(btcTx);\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n             logger.debug(\"[buildPeginInstructions] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n                 peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n", "next_change": {"commit": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..d248fd3bc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -38,7 +39,7 @@ public class PeginInstructionsProvider {\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        return Optional.of(peginInstructions);\n     }\n \n     protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d248fd3bc..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -42,7 +47,8 @@ public class PeginInstructionsProvider {\n         return Optional.of(peginInstructions);\n     }\n \n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTY3OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485855678", "body": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "bodyText": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "bodyHTML": "<p dir=\"auto\">This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:20:53Z", "path": "rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package co.rsk.peg;", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java b/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\ndeleted file mode 100644\nindex 7507b1a7e..000000000\n--- a/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\n+++ /dev/null\n", "chunk": "@@ -1,7 +0,0 @@\n-package co.rsk.peg;\n-\n-public class InvalidOpReturnOutputException extends Exception {\n-    public InvalidOpReturnOutputException(String message) {\n-        super(message);\n-    }\n-}\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java b/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\nnew file mode 100644\nindex 000000000..7507b1a7e\n--- /dev/null\n+++ b/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\n", "chunk": "@@ -0,0 +1,7 @@\n+package co.rsk.peg;\n+\n+public class InvalidOpReturnOutputException extends Exception {\n+    public InvalidOpReturnOutputException(String message) {\n+        super(message);\n+    }\n+}\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java b/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\ndeleted file mode 100644\nindex 7507b1a7e..000000000\n--- a/rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java\n+++ /dev/null\n", "chunk": "@@ -1,7 +0,0 @@\n-package co.rsk.peg;\n-\n-public class InvalidOpReturnOutputException extends Exception {\n-    public InvalidOpReturnOutputException(String message) {\n-        super(message);\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTc4MQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485855781", "body": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "bodyText": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "bodyHTML": "<p dir=\"auto\">This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:21:05Z", "path": "rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package co.rsk.peg;", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMTg5OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487021899", "bodyText": "@guidohernan93 please move this Exception to the pegininstructions package", "author": "josedahlquist", "createdAt": "2020-09-11T12:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java b/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java\nindex a1ccc47bd..6d889d7c9 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java\n", "chunk": "@@ -1,6 +1,8 @@\n package co.rsk.peg;\n \n-public class NoOpReturnException extends Exception {\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+\n+public class NoOpReturnException extends PeginInstructionsException {\n     public NoOpReturnException(String message) {\n         super(message);\n     }\n", "next_change": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/NoOpReturnException.java\nsimilarity index 64%\nrename from rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java\nrename to rskj-core/src/main/java/co/rsk/peg/pegininstructions/NoOpReturnException.java\nindex 6d889d7c9..f98254de1 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/NoOpReturnException.java\n", "chunk": "@@ -1,6 +1,4 @@\n-package co.rsk.peg;\n-\n-import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+package co.rsk.peg.pegininstructions;\n \n public class NoOpReturnException extends PeginInstructionsException {\n     public NoOpReturnException(String message) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTk4Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485859982", "body": "thrown `InvalidOpReturnOutputException`", "bodyText": "thrown InvalidOpReturnOutputException", "bodyHTML": "<p dir=\"auto\">thrown <code>InvalidOpReturnOutputException</code></p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:27:41Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return peginInstructions;\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNzAzMQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487137031", "bodyText": "It is throwing PeginInstructionsException", "author": "guidohernan93", "createdAt": "2020-09-11T15:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzOTYyNw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487139627", "bodyText": "I think it's simpler to throw the exception here instead of continuing the execution and then have an if asking if data == null. When this happens you already know the data received is invalid", "author": "marcos-iov", "createdAt": "2020-09-11T15:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -54,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MDgxMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485860812", "body": "```suggestion\r\n            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\", opReturnOccurrences);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String message = \"Only one output with OP_RETURN is allowed\";\n          \n          \n            \n                        String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\", opReturnOccurrences);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Only one output with OP_RETURN is allowed<span class=\"pl-pds x x-first x-last\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">format(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Only one output with OP_RETURN is allowed<span class=\"x x-first\">. Found %d</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, opReturnOccurrences)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:28:46Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return peginInstructions;\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = \"Only one output with OP_RETURN is allowed\";", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 0d4fad5f6..f87a79a4e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -67,7 +67,8 @@ public class PeginInstructionsProvider {\n         }\n \n         if (opReturnOccurrences > 1) {\n-            String message = \"Only one output with OP_RETURN is allowed\";\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n             logger.debug(\"[getOpReturnOutput] {}\", message);\n             throw new InvalidOpReturnOutputException(message);\n         }\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex f87a79a4e..e201f5d72 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -70,7 +77,7 @@ public class PeginInstructionsProvider {\n             String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n                 opReturnOccurrences);\n             logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new InvalidOpReturnOutputException(message);\n+            throw new PeginInstructionsException(message);\n         }\n \n         return data;\n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -69,14 +70,20 @@ public class PeginInstructionsProvider {\n \n         if (opReturnOccurrences == 0) {\n             String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new NoOpReturnException(message);\n         }\n \n         if (opReturnOccurrences > 1) {\n             String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n                 opReturnOccurrences);\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -87,6 +90,11 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n         return data;\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,88 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n-        PeginInstructionsVersion1 peginInstructions;\n-        byte[] opReturnOutputData;\n-\n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructionsVersion1.parse(opReturnOutput);\n                 peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.trace(\"[extractOpReturnData] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NDkwMw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485864903", "body": "```suggestion\r\n        PeginInstructions peginInstructions =\r\npeginInstructionsProvider.buildPeginInstructions(btcTransaction);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PeginInstructionsVersion1 peginInstructionsVersion1 =\n          \n          \n            \n                            (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n          \n          \n            \n                    PeginInstructions peginInstructions =\n          \n          \n            \n            peginInstructionsProvider.buildPeginInstructions(btcTransaction);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first\">PeginInstructionsVersion1</span><span class=\"x x-last\"> peginInstructionsVersion1</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">                (</span><span class=\"pl-smi x\">PeginInstructionsVersion1</span><span class=\"x x-last\">) </span>peginInstructionsProvider<span class=\"pl-k\">.</span>buildPeginInstructions(btcTransaction);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi x x-first\">PeginInstructions</span><span class=\"x x-last\"> peginInstructions</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">peginInstructionsProvider<span class=\"pl-k\">.</span>buildPeginInstructions(btcTransaction);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-09T19:34:21Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b575bbbd11cbe8848014162b77973cb185ce759", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex f447bcd78..f0c24a239 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -57,7 +59,8 @@ public class PeginInstructionsProviderTest {\n     }\n \n     @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n+        throws Exception {\n         BtcTransaction btcTransaction = new BtcTransaction(params,\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n", "next_change": {"commit": "43a640736b76964124ac737921ad88ef0473119c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex f0c24a239..7b74125ce 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,13 +65,12 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        PeginInstructions peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+        Assert.assertEquals(1, peginInstructions.getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.getRskDestinationAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "79b2e23b18abd0a75fca2745198f2206c3e47afc", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 7b74125ce..5e03a6acc 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,12 +65,12 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructions peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n-        Assert.assertEquals(1, peginInstructions.getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.getRskDestinationAddress());\n+        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.get().getRskDestinationAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 5e03a6acc..f9e31754f 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -65,26 +64,28 @@ public class PeginInstructionsProviderTest {\n                 Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n \n         Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructions.get().getRskDestinationAddress());\n+        Assert.assertEquals(expectedRskDestinationAddress,\n+            peginInstructions.get().getRskDestinationAddress());\n     }\n \n     @Test\n     public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n         throws Exception {\n         BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_TX));\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n-            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         PeginInstructionsVersion1 peginInstructionsVersion1 =\n             (PeginInstructionsVersion1) peginInstructions.get();\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex f9e31754f..5a3d84e5b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -1,128 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.bitcoinj.core.Coin;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.bitcoinj.script.Script;\n-import co.rsk.bitcoinj.script.ScriptOpCodes;\n-import co.rsk.config.BridgeRegTestConstants;\n-import co.rsk.core.RskAddress;\n-import co.rsk.peg.NoOpReturnException;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsProviderTest {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-\n-        // Add OP_RETURN output with empty data\n-        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n-            Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n-            Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-    }\n-\n-    @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n-        throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n-\n-        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n-        Assert.assertEquals(expectedRskDestinationAddress,\n-            peginInstructions.get().getRskDestinationAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n-        throws Exception {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), peginInstructionsVersion1.getBtcRefundAddress());\n-    }\n-\n-    @Test(expected = NoOpReturnException.class)\n-    public void getOpReturnOutput_no_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-    }\n-\n-    @Test(expected = PeginInstructionsException.class)\n-    public void getOpReturnOutput_two_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.INVALID_TX_2_OP_RETURNS));\n-        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-    }\n-\n-    @Test\n-    public void getOpReturnOutput_one_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n-\n-        byte[] data = PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n-        String expectedData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\";\n-\n-        Assert.assertEquals(expectedData, Hex.toHexString(data));\n-    }\n-\n-    @Test\n-    public void getOpReturnOutput_empty_data_op_return() throws PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params);\n-\n-        // Add OP_RETURN output with empty data\n-        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n-        Assert.assertNull(PeginInstructionsProvider.extractOpReturnData(btcTransaction));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 5a3d84e5b..2e47a41b3 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -1,4 +1,111 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_invalid_protocol_version() throws Exception {\n+        String rawTx = \"0200000001956f33bf742ae944ee92b9f7838c81b27c00d01c51eddf815583d71022f75a50000000006a473044022022\" +\n+                \"279ce3060a1595e61a6d04b89d59b6b8917542bc1fe9073ce2e2fd6c8e24c802205348bd58180fa89f995ff80e01e8cb60100d\" +\n+                \"f0affbc0312a83d291b073f0a4700121036ba47a8665e02bf265f849f41ce9985626fff1a4290dc87cc63c3ab0399f5765ffff\" +\n+                \"ffff0328cdf5050000000017a914603a20f8bdace9fd117feaccd9161f3497662c348700e1f5050000000017a91419d7e0ee9b\" +\n+                \"f6bd70d1d046b066d1c2726e1accc1870000000000000000186a1609990e537aad84447a2c2a7590d5f2665ef5cf9b667a0000\" +\n+                \"0000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_parse_data_length_smaller_than_expected_pegin_instructions_v1() throws\n+            Exception {\n+        String rawTx = \"02000000000101df517677f84ebd82a4719f532ef660f10dc6df2963fec596d47a559638f37b2f0000000017160014\" +\n+                \"5ab27e716e6277a99df7267292353b626c36bf16ffffffff03b03024180100000017a914c1a47cc7236ba6bf7081f3ec6440b3\" +\n+                \"6f5c8a41408700e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88ac0000000000000000166a14\" +\n+                \"00010e537aad84447a2c2a7590d5f2665ef5cf9b0247304402207e8e20ae25731ee1a4df4f1ee8b9a0da14f4157bbe7e116408\" +\n+                \"3492631aca3443022072312aabc1d8e95b98a48edbce7d9ce2247ba6b76194d4bc797a2ce38e2ee3330121024212698b17ae06e\" +\n+                \"5abc6520def8ab960adb7afb3f9d6000a4834bd3f5abc146e00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_parse_data_length_different_than_supported_pegin_instructions_v1() throws\n+            Exception {\n+        String rawTx = \"0200000001d891ab0f1365c7272b4a4932647208886ac42f6a8375a0af2839c89dc58084fb000000006a473044022\" +\n+                \"06dffd165bc596eebf09fb9d61faeeb433bcb4cd498fb701ebed6e5c71afc4a8f02201439e21528214876eb3e37b610dc41a\" +\n+                \"9daa116560f164d3903da762aecd1506d01210337005aa37799aeaa510ac681102c7fcbdac18aa155476332dd8a866e3caaa3\" +\n+                \"35ffffffff0300e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88acc4ccf5050000000017a9\" +\n+                \"14a0251d6d4eb50f44da49b8dce5a78fd46e9dc1a88700000000000000001b6a1900010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a98909100000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_return_pegin_instructions_v1() throws Exception {\n+        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n+                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n+                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n+                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n+                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_return_rsk_destination_address_from_pegin_instructions_v1() throws Exception {\n+        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n+                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n+                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n+                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n+                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n+                \"f5cf9b667a00000000\";\n+\n+        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n+        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\nindex 2e47a41b3..e0fb2e00c 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java\n", "chunk": "@@ -26,86 +28,100 @@ public class PeginInstructionsProviderTest {\n     }\n \n     @Test(expected = PeginInstructionsException.class)\n-    public void peginInstructionsProvider_invalid_protocol_version() throws Exception {\n-        String rawTx = \"0200000001956f33bf742ae944ee92b9f7838c81b27c00d01c51eddf815583d71022f75a50000000006a473044022022\" +\n-                \"279ce3060a1595e61a6d04b89d59b6b8917542bc1fe9073ce2e2fd6c8e24c802205348bd58180fa89f995ff80e01e8cb60100d\" +\n-                \"f0affbc0312a83d291b073f0a4700121036ba47a8665e02bf265f849f41ce9985626fff1a4290dc87cc63c3ab0399f5765ffff\" +\n-                \"ffff0328cdf5050000000017a914603a20f8bdace9fd117feaccd9161f3497662c348700e1f5050000000017a91419d7e0ee9b\" +\n-                \"f6bd70d1d046b066d1c2726e1accc1870000000000000000186a1609990e537aad84447a2c2a7590d5f2665ef5cf9b667a0000\" +\n-                \"0000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_parse_data_length_smaller_than_expected_pegin_instructions_v1() throws\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n             Exception {\n-        String rawTx = \"02000000000101df517677f84ebd82a4719f532ef660f10dc6df2963fec596d47a559638f37b2f0000000017160014\" +\n-                \"5ab27e716e6277a99df7267292353b626c36bf16ffffffff03b03024180100000017a914c1a47cc7236ba6bf7081f3ec6440b3\" +\n-                \"6f5c8a41408700e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88ac0000000000000000166a14\" +\n-                \"00010e537aad84447a2c2a7590d5f2665ef5cf9b0247304402207e8e20ae25731ee1a4df4f1ee8b9a0da14f4157bbe7e116408\" +\n-                \"3492631aca3443022072312aabc1d8e95b98a48edbce7d9ce2247ba6b76194d4bc797a2ce38e2ee3330121024212698b17ae06e\" +\n-                \"5abc6520def8ab960adb7afb3f9d6000a4834bd3f5abc146e00000000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsProvider_parse_data_length_different_than_supported_pegin_instructions_v1() throws\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n             Exception {\n-        String rawTx = \"0200000001d891ab0f1365c7272b4a4932647208886ac42f6a8375a0af2839c89dc58084fb000000006a473044022\" +\n-                \"06dffd165bc596eebf09fb9d61faeeb433bcb4cd498fb701ebed6e5c71afc4a8f02201439e21528214876eb3e37b610dc41a\" +\n-                \"9daa116560f164d3903da762aecd1506d01210337005aa37799aeaa510ac681102c7fcbdac18aa155476332dd8a866e3caaa3\" +\n-                \"35ffffffff0300e1f505000000001976a91429d3b0d878547000449bef07e44a387761f1578c88acc4ccf5050000000017a9\" +\n-                \"14a0251d6d4eb50f44da49b8dce5a78fd46e9dc1a88700000000000000001b6a1900010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a98909100000000\";\n-\n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n         peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n     }\n \n     @Test\n-    public void peginInstructionsProvider_return_pegin_instructions_v1() throws Exception {\n-        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n-                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n-                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n-                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n-                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a00000000\";\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1()\n+        throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n+\n+        Assert.assertEquals(1, peginInstructions.get().getProtocolVersion());\n+        Assert.assertEquals(expectedRskDestinationAddress,\n+            peginInstructions.get().getRskDestinationAddress());\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_btc_refund_address()\n+        throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n \n         PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions = peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        Address btcAddress = new Address(params,\n+            params.getP2SHHeader(),\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n         PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+        Assert.assertEquals(Optional.of(btcAddress), peginInstructionsVersion1.getBtcRefundAddress());\n+    }\n+\n+    @Test(expected = NoOpReturnException.class)\n+    public void getOpReturnOutput_no_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void getOpReturnOutput_two_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.INVALID_TX_2_OP_RETURNS));\n+        PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n     }\n \n     @Test\n-    public void peginInstructionsProvider_return_rsk_destination_address_from_pegin_instructions_v1() throws Exception {\n-        String rawTx = \"0200000001bf584649795f54f4578f5351bcb072d7f28d97894d8db9733f385edd37d2c64c000000006a47304402203\" +\n-                \"a3103a1d10d814f5cf2143c7408e491648ce5775769b1728e2b51366b641dda02207449de7736549886db203ee49bfd15d59d\" +\n-                \"079002255abda9da2410763321662c01210211f2a6a136195c327ec67df3e6e1ec06e0e5e107f7b518d12d13d2f7263e4ce3\" +\n-                \"ffffffff0380969800000000001976a9148bc874b7d6cf12e920d227e28c994daa5b5cc4ab88ac148ee400000000001976a91\" +\n-                \"44f4c767a2d308eebb3f0f1247f9163c896e0b7d288ac0000000000000000186a1600010e537aad84447a2c2a7590d5f2665e\" +\n-                \"f5cf9b667a00000000\";\n+    public void getOpReturnOutput_one_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n \n-        BtcTransaction btcTransaction = new BtcTransaction(params, Hex.decode(rawTx));\n+        byte[] data = PeginInstructionsProvider.extractOpReturnData(btcTransaction);\n+        String expectedData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\";\n \n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+        Assert.assertEquals(expectedData, Hex.toHexString(data));\n+    }\n \n-        RskAddress expectedRskDestinationAddress = new RskAddress(\"0x0e537aad84447a2c2a7590d5f2665ef5cf9b667a\");\n-        Assert.assertEquals(expectedRskDestinationAddress, peginInstructionsVersion1.getRskDestinationAddress());\n+    @Test(expected = PeginInstructionsException.class)\n+    public void getOpReturnOutput_empty_data_op_return() throws PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+        Assert.assertNull(PeginInstructionsProvider.extractOpReturnData(btcTransaction));\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MzcwMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485873702", "body": "Assert.assertFalse(obtainedBtcAddress.isP2SHAddress());", "bodyText": "Assert.assertFalse(obtainedBtcAddress.isP2SHAddress());", "bodyHTML": "<p dir=\"auto\">Assert.assertFalse(obtainedBtcAddress.isP2SHAddress());</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:44:51Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 70ea4ef8e..a339937a2 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -57,6 +57,7 @@ public class PeginInstructionsVersion1Test {\n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+        Assert.assertFalse(btcAddress.isP2SHAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a339937a2..18bb2544e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -57,7 +57,7 @@ public class PeginInstructionsVersion1Test {\n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(btcAddress.isP2SHAddress());\n+        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -38,23 +39,37 @@ public class PeginInstructionsVersion1Test {\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n-        Assert.assertEquals(Optional.empty(),\n-                peginInstructionsVersion1.getBtcRefundAddressFromData(\n-                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n+\n+        Assert.assertEquals(Optional.empty(), peginInstructionsVersion1.getBtcRefundAddress());\n     }\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2PKH_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n \n-        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n+\n+        Address btcAddress = new Address(params,\n+            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n         Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n", "next_change": {"commit": "1f11bbf405afc836d29dd02b7e49305b60332120", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..bc932dbfa 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -78,19 +67,13 @@ public class PeginInstructionsVersion1Test {\n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n         PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_P2WPKH_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parseBtcRefundAddress(\n+            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n-            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex bc932dbfa..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -82,10 +80,10 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseBtcRefundAddress(\n+        peginInstructionsVersion1.parseAdditionalData(\n             Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -62,15 +77,22 @@ public class PeginInstructionsVersion1Test {\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_P2WPKH_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n         Address btcAddress = new Address(params,\n-                params.getP2SHHeader(),\n-                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            params.getP2SHHeader(),\n+            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n \n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n         Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n", "next_change": {"commit": "1f11bbf405afc836d29dd02b7e49305b60332120", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..bc932dbfa 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -78,19 +67,13 @@ public class PeginInstructionsVersion1Test {\n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n         PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_P2WPKH_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parseBtcRefundAddress(\n+            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n-            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex bc932dbfa..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -82,10 +80,10 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseBtcRefundAddress(\n+        peginInstructionsVersion1.parseAdditionalData(\n             Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..bc932dbfa 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -101,15 +84,9 @@ public class PeginInstructionsVersion1Test {\n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parseBtcRefundAddress(\n+            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n", "next_change": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex bc932dbfa..4600bbef1 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -85,7 +85,7 @@ public class PeginInstructionsVersion1Test {\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseBtcRefundAddress(\n+        peginInstructionsVersion1.parseAdditionalData(\n             Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 4600bbef1..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -82,7 +80,7 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n         peginInstructionsVersion1.parseAdditionalData(\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDAzOA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485874038", "body": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "bodyText": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "bodyHTML": "<p dir=\"auto\">Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:45:12Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0Mjk4Ng==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485942986", "bodyText": "Check that the obtainedBtcAddress is P2SH not the one you created", "author": "marcos-iov", "createdAt": "2020-09-09T21:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NDc4Mw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485944783", "bodyText": "That's true!", "author": "guidohernan93", "createdAt": "2020-09-09T21:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 70ea4ef8e..a339937a2 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -72,6 +73,7 @@ public class PeginInstructionsVersion1Test {\n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+        Assert.assertTrue(btcAddress.isP2SHAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a339937a2..18bb2544e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -73,7 +73,7 @@ public class PeginInstructionsVersion1Test {\n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(btcAddress.isP2SHAddress());\n+        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n     }\n \n     @Test\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -62,15 +77,22 @@ public class PeginInstructionsVersion1Test {\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_P2WPKH_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n         Address btcAddress = new Address(params,\n-                params.getP2SHHeader(),\n-                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            params.getP2SHHeader(),\n+            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n \n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n         Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n", "next_change": {"commit": "1f11bbf405afc836d29dd02b7e49305b60332120", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..bc932dbfa 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -78,19 +67,13 @@ public class PeginInstructionsVersion1Test {\n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n         PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_P2WPKH_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parseBtcRefundAddress(\n+            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n-            Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n \n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex bc932dbfa..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -82,10 +80,10 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseBtcRefundAddress(\n+        peginInstructionsVersion1.parseAdditionalData(\n             Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..bc932dbfa 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -101,15 +84,9 @@ public class PeginInstructionsVersion1Test {\n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n-        BtcTransaction btcTransaction = new BtcTransaction(params,\n-            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n-\n-        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n-        Optional<PeginInstructions> peginInstructions =\n-            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n-\n-        PeginInstructionsVersion1 peginInstructionsVersion1 =\n-            (PeginInstructionsVersion1) peginInstructions.get();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parseBtcRefundAddress(\n+            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n             params.getP2SHHeader(),\n", "next_change": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex bc932dbfa..4600bbef1 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -85,7 +85,7 @@ public class PeginInstructionsVersion1Test {\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseBtcRefundAddress(\n+        peginInstructionsVersion1.parseAdditionalData(\n             Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n         Address btcAddress = new Address(params,\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 4600bbef1..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -82,7 +80,7 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n         PeginInstructionsException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n         peginInstructionsVersion1.parseAdditionalData(\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -78,16 +100,23 @@ public class PeginInstructionsVersion1Test {\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n         Address btcAddress = new Address(params,\n-                params.getP2SHHeader(),\n-                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+            params.getP2SHHeader(),\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n         Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n     }\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -122,12 +97,12 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n             PeginInstructionsParseException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n \n         String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseBtcRefundAddress(Hex.decode(rawData));\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDk5MA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485874990", "body": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "bodyText": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "bodyHTML": "<p dir=\"auto\">Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());</p>", "author": "marcos-iov", "createdAt": "2020-09-09T19:46:18Z", "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "originalCommit": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 70ea4ef8e..a339937a2 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -87,6 +89,7 @@ public class PeginInstructionsVersion1Test {\n \n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+        Assert.assertTrue(btcAddress.isP2SHAddress());\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a339937a2..18bb2544e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -89,7 +89,7 @@ public class PeginInstructionsVersion1Test {\n \n         Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(btcAddress.isP2SHAddress());\n+        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -78,16 +100,23 @@ public class PeginInstructionsVersion1Test {\n \n     @Test\n     public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        PeginInstructionsException {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+            Hex.decode(RawTransactions.VALID_DATA_WITH_REFUND_ADDRESS_V1_P2SH_MULTISIG_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        Optional<PeginInstructions> peginInstructions =\n+            peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+            (PeginInstructionsVersion1) peginInstructions.get();\n \n         Address btcAddress = new Address(params,\n-                params.getP2SHHeader(),\n-                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+            params.getP2SHHeader(),\n+            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n \n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n \n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n         Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n         Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n     }\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..a40cc078b 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -122,12 +97,12 @@ public class PeginInstructionsVersion1Test {\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n             PeginInstructionsParseException {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n \n         String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseBtcRefundAddress(Hex.decode(rawData));\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex a40cc078b..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,116 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import java.util.Optional;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_parseAdditionalData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 18bb2544e..c005265c4 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -98,7 +127,7 @@ public class PeginInstructionsVersion1Test {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n \n         String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        peginInstructionsVersion1.parseBtcRefundAddress(Hex.decode(rawData));\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex c005265c4..4600bbef1 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -127,7 +104,7 @@ public class PeginInstructionsVersion1Test {\n         PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n \n         String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseBtcRefundAddress(Hex.decode(rawData));\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n     }\n \n     @Test(expected = PeginInstructionsParseException.class)\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 4600bbef1..60e8475b6 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,118 +1,4 @@\n package co.rsk.peg.pegininstructions;\n \n-import co.rsk.bitcoinj.core.Address;\n-import co.rsk.bitcoinj.core.BtcTransaction;\n-import co.rsk.bitcoinj.core.NetworkParameters;\n-import co.rsk.config.BridgeRegTestConstants;\n-import org.bouncycastle.util.encoders.Hex;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-import java.util.Optional;\n-\n public class PeginInstructionsVersion1Test {\n-    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getProtocolVersion() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-        Assert.assertEquals(Optional.empty(), obtainedBtcAddress);\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertFalse(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a024f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n-        PeginInstructionsException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-        peginInstructionsVersion1.parseAdditionalData(\n-            Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Address btcAddress = new Address(params,\n-            params.getP2SHHeader(),\n-            Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n-\n-        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddress();\n-\n-        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n-        Assert.assertTrue(obtainedBtcAddress.get().isP2SHAddress());\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n-\n-    @Test(expected = PeginInstructionsParseException.class)\n-    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n-            PeginInstructionsParseException {\n-        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n-\n-        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n-        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n-    }\n }\n", "next_change": {"commit": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\nindex 60e8475b6..70ea4ef8e 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java\n", "chunk": "@@ -1,4 +1,109 @@\n package co.rsk.peg.pegininstructions;\n \n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_invalid_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parseAdditionalData_invalid_refund_address_type() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0019d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        peginInstructionsVersion1.parseAdditionalData(Hex.decode(rawData));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "4b575bbbd11cbe8848014162b77973cb185ce759", "url": "https://github.com/rsksmart/rskj/commit/4b575bbbd11cbe8848014162b77973cb185ce759", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected", "committedDate": "2020-09-09T19:48:51Z", "type": "forcePushed"}, {"oid": "43a640736b76964124ac737921ad88ef0473119c", "url": "https://github.com/rsksmart/rskj/commit/43a640736b76964124ac737921ad88ef0473119c", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected", "committedDate": "2020-09-09T20:30:21Z", "type": "forcePushed"}, {"oid": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "url": "https://github.com/rsksmart/rskj/commit/da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations", "committedDate": "2020-09-09T20:39:47Z", "type": "forcePushed"}, {"oid": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "url": "https://github.com/rsksmart/rskj/commit/7935fa04834559d8eef2af17e5a0e930c7d48b83", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional", "committedDate": "2020-09-09T21:02:07Z", "type": "forcePushed"}, {"oid": "79b2e23b18abd0a75fca2745198f2206c3e47afc", "url": "https://github.com/rsksmart/rskj/commit/79b2e23b18abd0a75fca2745198f2206c3e47afc", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional", "committedDate": "2020-09-09T21:27:54Z", "type": "forcePushed"}, {"oid": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "url": "https://github.com/rsksmart/rskj/commit/ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional", "committedDate": "2020-09-09T21:55:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MzU0Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485963542", "body": "```suggestion\r\n    protected void getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\r\n```\r\nJust set the value to `btcRefundAddress` inside this method instead of returning. It will save you a code smell", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n          \n          \n            \n                protected void getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n          \n      \n    \n    \n  \n\nJust set the value to btcRefundAddress inside this method instead of returning. It will save you a code smell", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\"><span class=\"x x-first\">Optional&lt;</span><span class=\"pl-smi x\">Address</span><span class=\"x x-last\">&gt;</span></span> getBtcRefundAddressFromData(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k x x-first x-last\">void</span> getBtcRefundAddressFromData(<span class=\"pl-k\">byte</span>[] data) throws <span class=\"pl-smi\">PeginInstructionsParseException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Just set the value to <code>btcRefundAddress</code> inside this method instead of returning. It will save you a code smell</p>", "author": "marcos-iov", "createdAt": "2020-09-09T22:48:37Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {", "originalCommit": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f8191fcd751e47d69e56d23729922af287838c2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 043103696..a62ff8e1f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,12 +32,13 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+        parseBtcRefundAddress(data);\n     }\n \n-    protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..8fa9a05c7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,10 +32,6 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        parseBtcRefundAddress(data);\n-    }\n-\n-    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n             this.btcRefundAddress = Optional.empty();\n             return;\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 8fa9a05c7..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,9 +32,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            this.btcRefundAddress = Optional.empty();\n-            return;\n+            return Optional.empty();\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "4f8191fcd751e47d69e56d23729922af287838c2", "url": "https://github.com/rsksmart/rskj/commit/4f8191fcd751e47d69e56d23729922af287838c2", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void", "committedDate": "2020-09-10T15:28:12Z", "type": "forcePushed"}, {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120", "url": "https://github.com/rsksmart/rskj/commit/1f11bbf405afc836d29dd02b7e49305b60332120", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void", "committedDate": "2020-09-10T16:52:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMjg2OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487022868", "body": "I would make this validation as the first step in this method. We want to validate the length before trying to parse any of the data.", "bodyText": "I would make this validation as the first step in this method. We want to validate the length before trying to parse any of the data.", "bodyHTML": "<p dir=\"auto\">I would make this validation as the first step in this method. We want to validate the length before trying to parse any of the data.</p>", "author": "josedahlquist", "createdAt": "2020-09-11T12:50:45Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex c32bc2a9f..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMzY1OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487023658", "body": "How could the data be null? and the data length validation is responsibility of PeginInstructions itself and not the provider", "bodyText": "How could the data be null? and the data length validation is responsibility of PeginInstructions itself and not the provider", "bodyHTML": "<p dir=\"auto\">How could the data be null? and the data length validation is responsibility of PeginInstructions itself and not the provider</p>", "author": "josedahlquist", "createdAt": "2020-09-11T12:52:06Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1Njg0Ng==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487056846", "bodyText": "Could be null if an empty data OP_RETURN is provided. And, when you extract that data, for some reason could be less than the expected data (user error).", "author": "guidohernan93", "createdAt": "2020-09-11T13:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMzY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,12 +16,15 @@ public class PeginInstructionsProvider {\n     public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException {\n \n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructions peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n             return Optional.empty();\n         }\n \n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -28,12 +28,6 @@ public class PeginInstructionsProvider {\n             return Optional.empty();\n         }\n \n-        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n-            String message = \"Invalid OP_RETURN data found\";\n-            logger.debug(\"[buildPeginInstructions] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n \n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n", "next_change": {"commit": "4756a232cd05ace791ed354e1456cbc4148b4559", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..cdfbb0f63 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -23,9 +23,11 @@ public class PeginInstructionsProvider {\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+        } catch (NoOpReturnException e) {\n             return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDE1OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487024159", "body": "```suggestion\r\n        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n          \n          \n            \n                    logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[extractOpReturnData] Getting OP_RETURN data for btc tx: {}<span class=\"pl-pds\">\"</span></span>, btcTx<span class=\"pl-k\">.</span>getHash());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">trace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[extractOpReturnData] Getting OP_RETURN data for btc tx: {}<span class=\"pl-pds\">\"</span></span>, btcTx<span class=\"pl-k\">.</span>getHash());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "josedahlquist", "createdAt": "2020-09-11T12:52:59Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTMyOQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487025329", "body": "Catch any Exception here as well, because if there is any unhandled exception that would make the caller fail too.\r\nIf a generic Exception is thrown, log it so we can understand what happened", "bodyText": "Catch any Exception here as well, because if there is any unhandled exception that would make the caller fail too.\nIf a generic Exception is thrown, log it so we can understand what happened", "bodyHTML": "<p dir=\"auto\">Catch any Exception here as well, because if there is any unhandled exception that would make the caller fail too.<br>\nIf a generic Exception is thrown, log it so we can understand what happened</p>", "author": "josedahlquist", "createdAt": "2020-09-11T12:55:00Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,12 +16,15 @@ public class PeginInstructionsProvider {\n     public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException {\n \n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructions peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n             return Optional.empty();\n         }\n \n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -28,12 +28,6 @@ public class PeginInstructionsProvider {\n             return Optional.empty();\n         }\n \n-        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n-            String message = \"Invalid OP_RETURN data found\";\n-            logger.debug(\"[buildPeginInstructions] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n \n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n", "next_change": {"commit": "4756a232cd05ace791ed354e1456cbc4148b4559", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..cdfbb0f63 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -23,9 +23,11 @@ public class PeginInstructionsProvider {\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+        } catch (NoOpReturnException e) {\n             return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTk4NQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487025985", "body": "I wonder if this could trigger an NPE", "bodyText": "I wonder if this could trigger an NPE", "bodyHTML": "<p dir=\"auto\">I wonder if this could trigger an NPE</p>", "author": "josedahlquist", "createdAt": "2020-09-11T12:56:06Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MTU0Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487051542", "bodyText": "No, because it is not possible for a BTC tx not tu have any outputs. At least one output will exist, if it is not OP_RETURN doesn't matter.", "author": "guidohernan93", "createdAt": "2020-09-11T13:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNjc3NA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487026774", "body": "I suggest moving the logic of this method directly to `parseAdditionalData`", "bodyText": "I suggest moving the logic of this method directly to parseAdditionalData", "bodyHTML": "<p dir=\"auto\">I suggest moving the logic of this method directly to <code>parseAdditionalData</code></p>", "author": "josedahlquist", "createdAt": "2020-09-11T12:57:34Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        parseBtcRefundAddress(data);\n+    }\n+\n+    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MTM5Mw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487051393", "bodyText": "But what if we have move validations on the future for additional data? The idea would be that parseAdditionalData call all the validation methods that could exist.", "author": "guidohernan93", "createdAt": "2020-09-11T13:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNjc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex a62ff8e1f..8fa9a05c7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,10 +32,6 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        parseBtcRefundAddress(data);\n-    }\n-\n-    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n             this.btcRefundAddress = Optional.empty();\n             return;\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 8fa9a05c7..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -32,9 +32,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            this.btcRefundAddress = Optional.empty();\n-            return;\n+            return Optional.empty();\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -25,19 +25,17 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n     @Override\n     protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n         if (data.length != 22 && data.length != 43) {\n-            logger.debug(\"[validateDataLength] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n         }\n     }\n \n     @Override\n     protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n-        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n         if (data.length == 22) {\n-            return Optional.empty();\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n         }\n \n         byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjUyOA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487032528", "body": "You could move this validation to be the first instruction to avoid parsing anything", "bodyText": "You could move this validation to be the first instruction to avoid parsing anything", "bodyHTML": "<p dir=\"auto\">You could move this validation to be the first instruction to avoid parsing anything</p>", "author": "josedahlquist", "createdAt": "2020-09-11T13:08:05Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex c32bc2a9f..d0b7927dd 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -49,8 +49,8 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n             throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjc5MA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487032790", "body": "These validations don't seem appropriate for this class", "bodyText": "These validations don't seem appropriate for this class", "bodyHTML": "<p dir=\"auto\">These validations don't seem appropriate for this class</p>", "author": "josedahlquist", "createdAt": "2020-09-11T13:08:32Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0OTEwNg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487049106", "bodyText": "It could be on method extractOpReturnData, but it is still on this class. Where should it be so?", "author": "guidohernan93", "createdAt": "2020-09-11T13:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3OTQxMw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488179413", "bodyText": "just left another comment about this. You already check the length in the base class of PeginInstructions. You shouldn't duplicate that logic.\nClosing this comment as it's repeated :)", "author": "josedahlquist", "createdAt": "2020-09-14T19:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -16,12 +16,15 @@ public class PeginInstructionsProvider {\n     public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n         PeginInstructionsException {\n \n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructions peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n             return Optional.empty();\n         }\n \n", "next_change": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -28,12 +28,6 @@ public class PeginInstructionsProvider {\n             return Optional.empty();\n         }\n \n-        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n-            String message = \"Invalid OP_RETURN data found\";\n-            logger.debug(\"[buildPeginInstructions] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n \n         int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n", "next_change": {"commit": "4756a232cd05ace791ed354e1456cbc4148b4559", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..cdfbb0f63 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -23,9 +23,11 @@ public class PeginInstructionsProvider {\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+        } catch (NoOpReturnException e) {\n             return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNDUwMA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487034500", "body": "```suggestion\r\n        logger.debug(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n          \n          \n            \n                    logger.debug(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[extractOpReturnData] Getting OP_RETURN data for btc tx: {}<span class=\"pl-pds\">\"</span></span>, btcTx<span class=\"pl-k\">.</span>getHash());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[extractOpReturnData] Getting OP_RETURN data for btc tx: {}<span class=\"pl-pds\">\"</span></span>, btcTx<span class=\"pl-k\">.</span>getHash());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "josedahlquist", "createdAt": "2020-09-11T13:11:19Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNTE4OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487035188", "body": "I wonder if this could trigger an NPE", "bodyText": "I wonder if this could trigger an NPE", "bodyHTML": "<p dir=\"auto\">I wonder if this could trigger an NPE</p>", "author": "josedahlquist", "createdAt": "2020-09-11T13:12:25Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {", "originalCommit": "1f11bbf405afc836d29dd02b7e49305b60332120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NzkyMA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487047920", "bodyText": "No, because it is not possible for a BTC tx not tu have any outputs. At least one output will exist, if it is not OP_RETURN doesn't matter.", "author": "guidohernan93", "createdAt": "2020-09-11T13:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNTE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex e201f5d72..1266524fc 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -52,7 +59,7 @@ public class PeginInstructionsProvider {\n         byte[] data = new byte[]{};\n         int opReturnOccurrences = 0;\n \n-        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n \n         for (int i=0; i<btcTx.getOutputs().size(); i++) {\n             List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -68,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "url": "https://github.com/rsksmart/rskj/commit/41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info", "committedDate": "2020-09-11T13:54:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2ODkzMw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487068933", "body": "```suggestion\r\n            logger.trace(\"[getOpReturnOutput] {}\", message);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.trace(\"[getOpReturnOutput] {}\", message);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[getOpReturnOutput] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">trace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[getOpReturnOutput] {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "josedahlquist", "createdAt": "2020-09-11T14:06:51Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "originalCommit": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 1266524fc..49f25f17c 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -76,14 +70,20 @@ public class PeginInstructionsProvider {\n \n         if (opReturnOccurrences == 0) {\n             String message = \"No OP_RETURN output found for tx\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new NoOpReturnException(message);\n         }\n \n         if (opReturnOccurrences > 1) {\n             String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n                 opReturnOccurrences);\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n             throw new PeginInstructionsException(message);\n         }\n \n", "next_change": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 49f25f17c..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -87,6 +90,11 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n         return data;\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,88 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n-        PeginInstructionsVersion1 peginInstructions;\n-        byte[] opReturnOutputData;\n-\n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructionsVersion1.parse(opReturnOutput);\n                 peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.trace(\"[extractOpReturnData] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "url": "https://github.com/rsksmart/rskj/commit/edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider", "committedDate": "2020-09-11T14:12:57Z", "type": "forcePushed"}, {"oid": "100a8aacd63644d80168ed240ae851b2ea13a5d5", "url": "https://github.com/rsksmart/rskj/commit/100a8aacd63644d80168ed240ae851b2ea13a5d5", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider", "committedDate": "2020-09-11T14:16:23Z", "type": "forcePushed"}, {"oid": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "url": "https://github.com/rsksmart/rskj/commit/87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T14:18:46Z", "type": "forcePushed"}, {"oid": "b01755e58a869de0d93b0a61488f94d6e1c87a30", "url": "https://github.com/rsksmart/rskj/commit/b01755e58a869de0d93b0a61488f94d6e1c87a30", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T14:19:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NDk0OA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487084948", "body": "Careful here. We must not treat every exception equally.\r\nIf there is no OP_RETURN we should return Optional.empty.\r\nBut if there is any other situation (more than one op_return, null data after op_return, or any unhandled exception) we should raise a new exception for the funds to be returned.", "bodyText": "Careful here. We must not treat every exception equally.\nIf there is no OP_RETURN we should return Optional.empty.\nBut if there is any other situation (more than one op_return, null data after op_return, or any unhandled exception) we should raise a new exception for the funds to be returned.", "bodyHTML": "<p dir=\"auto\">Careful here. We must not treat every exception equally.<br>\nIf there is no OP_RETURN we should return Optional.empty.<br>\nBut if there is any other situation (more than one op_return, null data after op_return, or any unhandled exception) we should raise a new exception for the funds to be returned.</p>", "author": "josedahlquist", "createdAt": "2020-09-11T14:31:51Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (Exception e) {", "originalCommit": "b01755e58a869de0d93b0a61488f94d6e1c87a30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4756a232cd05ace791ed354e1456cbc4148b4559", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex ef538e312..cdfbb0f63 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -23,9 +23,11 @@ public class PeginInstructionsProvider {\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (Exception e) {\n-            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+        } catch (NoOpReturnException e) {\n             return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559", "url": "https://github.com/rsksmart/rskj/commit/4756a232cd05ace791ed354e1456cbc4148b4559", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T15:09:20Z", "type": "forcePushed"}, {"oid": "d779ac024d7a69d11084b9fea26112defcdc30c3", "url": "https://github.com/rsksmart/rskj/commit/d779ac024d7a69d11084b9fea26112defcdc30c3", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T15:54:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDA5Mw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487134093", "body": "When logging and throwing an exception with the same message it's good to put in a variable. So it is easy to change in both places in case it's necessary", "bodyText": "When logging and throwing an exception with the same message it's good to put in a variable. So it is easy to change in both places in case it's necessary", "bodyHTML": "<p dir=\"auto\">When logging and throwing an exception with the same message it's good to put in a variable. So it is easy to change in both places in case it's necessary</p>", "author": "marcos-iov", "createdAt": "2020-09-11T15:48:48Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);", "originalCommit": "4756a232cd05ace791ed354e1456cbc4148b4559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDQ1Mg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487134452", "bodyText": "Also, remember to put the method name in brackets as a prefix in the log message", "author": "marcos-iov", "createdAt": "2020-09-11T15:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -18,12 +18,13 @@ public class PeginInstructionsProvider {\n \n         logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n \n-        PeginInstructions peginInstructions;\n+        PeginInstructionsBase peginInstructions;\n         byte[] opReturnOutputData;\n \n         try {\n             opReturnOutputData = extractOpReturnData(btcTx);\n         } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n             logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n", "next_change": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -27,8 +27,9 @@ public class PeginInstructionsProvider {\n             logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n             return Optional.empty();\n         } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n         logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,90 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n-            logger.debug(message);\n-            throw new PeginInstructionsException(message, e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNTQ3MQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487135471", "body": "```suggestion\r\n            String message = \"No OP_RETURN output found for tx {}\", tx.getHash;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String message = \"No OP_RETURN output found for tx\";\n          \n          \n            \n                        String message = \"No OP_RETURN output found for tx {}\", tx.getHash;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No OP_RETURN output found for tx<span class=\"pl-pds x x-first x-last\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No OP_RETURN output found for tx<span class=\"x x-first\"> {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, tx</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getHash</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-11T15:51:13Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";", "originalCommit": "4756a232cd05ace791ed354e1456cbc4148b4559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -64,6 +66,7 @@ public class PeginInstructionsProvider {\n                     data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n                     opReturnOccurrences++;\n                 } else {\n+                    // OP_RETURN exist but data is empty\n                     opReturnOccurrences++;\n                     data = null;\n                 }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..d8201c8d7 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -71,8 +74,7 @@ public class PeginInstructionsProvider {\n         }\n \n         if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.trace(\"[extractOpReturnData] {}\", message);\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n             throw new NoOpReturnException(message);\n         }\n \n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d8201c8d7..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,89 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n-\n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutputData;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n-                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        peginInstructions.parse(opReturnOutputData);\n-        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n-            peginInstructions.getClass());\n-\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    // OP_RETURN exist but data is empty\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjIyMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487136222", "body": "This is no longer necessary if InvalidOpReturnOutputException is thrown in line 67", "bodyText": "This is no longer necessary if InvalidOpReturnOutputException is thrown in line 67", "bodyHTML": "<p dir=\"auto\">This is no longer necessary if InvalidOpReturnOutputException is thrown in line 67</p>", "author": "marcos-iov", "createdAt": "2020-09-11T15:52:31Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.trace(\"[extractOpReturnData] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }", "originalCommit": "4756a232cd05ace791ed354e1456cbc4148b4559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex cdfbb0f63..fe9e6855f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -89,6 +90,11 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n         return data;\n     }\n }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex fe9e6855f..5221406fb 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -13,88 +9,29 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n-        PeginInstructionsException {\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n \n-        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n-\n-        PeginInstructionsVersion1 peginInstructions;\n-        byte[] opReturnOutputData;\n-\n-        try {\n-            opReturnOutputData = extractOpReturnData(btcTx);\n-        } catch (NoOpReturnException e) {\n-            return Optional.empty();\n-        } catch (Exception e) {\n-            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n-            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n         }\n \n-        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n-\n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n \n         switch (protocolVersion) {\n             case 1:\n-                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n                 PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructionsVersion1.parse(opReturnOutput);\n                 peginInstructions = peginInstructionsVersion1;\n-                logger.trace(\"Successfully created peginInstructions version 1\");\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());\n-        return Optional.of(peginInstructions);\n-    }\n-\n-    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n-        throws PeginInstructionsException {\n-        byte[] data = new byte[]{};\n-        int opReturnOccurrences = 0;\n-\n-        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n-\n-        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n-            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n-            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n-                if (chunksByOutput.size() > 1) {\n-                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n-                    opReturnOccurrences++;\n-                } else {\n-                    opReturnOccurrences++;\n-                    data = null;\n-                }\n-            }\n-        }\n-\n-        if (opReturnOccurrences == 0) {\n-            String message = \"No OP_RETURN output found for tx\";\n-            logger.trace(\"[extractOpReturnData] {}\", message);\n-            throw new NoOpReturnException(message);\n-        }\n-\n-        if (opReturnOccurrences > 1) {\n-            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n-                opReturnOccurrences);\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data == null) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[extractOpReturnData] {}\", message);\n-            throw new PeginInstructionsException(message);\n-        }\n-\n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n-        return data;\n+        return peginInstructions;\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex 5221406fb..d07c7ec15 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -9,29 +13,90 @@ public class PeginInstructionsProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n \n-    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n         PeginInstructionsBase peginInstructions;\n-        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+        byte[] opReturnOutputData;\n \n-        if (opReturnOutput == null || opReturnOutput.length == 0) {\n-            String message = \"Empty OP_RETURN data found\";\n-            logger.debug(\"[getOpReturnOutput] {}\", message);\n-            throw new PeginInstructionsException(message);\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n         }\n \n-        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n \n         switch (protocolVersion) {\n             case 1:\n-                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n-                peginInstructionsVersion1.parse(opReturnOutput);\n-                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n                 break;\n             default:\n-                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n                 throw new PeginInstructionsException(\"Invalid protocol version\");\n         }\n \n-        return peginInstructions;\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {\n+            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n+            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n+        }\n+\n+        return data;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MjgwNw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487142807", "body": "```suggestion\r\n                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n          \n          \n            \n                            String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">getBtcRefundAddressFromData</span>] Invalid btc address type: %d<span class=\"pl-pds\">\"</span></span>, btcRefundAddressType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">String</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"x x-first x-last\">parseAdditionalData</span>] Invalid btc address type: %d<span class=\"pl-pds\">\"</span></span>, btcRefundAddressType);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-11T16:04:06Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                break;\n+            default:\n+                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);", "originalCommit": "d779ac024d7a69d11084b9fea26112defcdc30c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..076864d0a 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -56,7 +56,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n                 logger.debug(message);\n                 throw new PeginInstructionsParseException(message);\n         }\n", "next_change": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 076864d0a..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,12 +48,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,23 +50,16 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n-                logger.debug(message);\n-                throw new PeginInstructionsParseException(message);\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "url": "https://github.com/rsksmart/rskj/commit/31d5636c13844de89c8ca04ca556e6ddcb22e872", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T18:03:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMDk1OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487230959", "body": "```suggestion\r\n                + \"received %d\", data.length);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \"received %s\", data.length);\n          \n          \n            \n                            + \"received %d\", data.length);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>received %<span class=\"x x-first x-last\">s</span><span class=\"pl-pds\">\"</span></span>, data<span class=\"pl-k\">.</span>length);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>received %<span class=\"x x-first x-last\">d</span><span class=\"pl-pds\">\"</span></span>, data<span class=\"pl-k\">.</span>length);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-11T18:57:09Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);", "originalCommit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex d0b7927dd..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -45,7 +45,7 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n             String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %s\", data.length);\n+                + \"received %d\", data.length);\n             throw new PeginInstructionsParseException(message);\n         }\n \n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..0dbded39f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,49 +8,45 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-\n     private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n-    private final int protocolVersion;\n+\n     protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddressBytes);\n-    }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    public static int extractProtocolVersion(byte[] data) {\n-        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n-        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n-    }\n-\n-    @Override\n     public RskAddress getRskDestinationAddress() {\n         return this.rskDestinationAddress;\n     }\n \n-    @Override\n     public int getProtocolVersion() {\n         return this.protocolVersion;\n     }\n \n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n         }\n \n-        validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n         parseAdditionalData(data);\n     }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 0dbded39f..8432cfd3e 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -8,45 +8,49 @@ import org.slf4j.LoggerFactory;\n import java.util.Arrays;\n \n public abstract class PeginInstructionsBase implements PeginInstructions {\n-    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n \n-    protected RskAddress rskDestinationAddress;\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n     private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n \n     protected PeginInstructionsBase(int protocolVersion) {\n         this.protocolVersion = protocolVersion;\n     }\n \n-    public RskAddress getRskDestinationAddress() {\n-        return this.rskDestinationAddress;\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n     }\n \n-    public int getProtocolVersion() {\n-        return this.protocolVersion;\n-    }\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n \n     public static int extractProtocolVersion(byte[] data) {\n         byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n         return ByteUtil.byteArrayToInt(protocolVersionBytes);\n     }\n \n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n     public void parse(byte[] data) throws PeginInstructionsParseException {\n         if (data.length < 22) {\n             logger.debug(\"[parse] Invalid data length\");\n-            throw new PeginInstructionsParseException(\"Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n         }\n \n-        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         validateDataLength(data);\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n     }\n-\n-    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n-\n-    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n-\n-    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n-        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n-        return new RskAddress(rskDestinationAddress);\n-    }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex 8432cfd3e..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -42,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDA5Nw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487234097", "body": "Put method name as prefix", "bodyText": "Put method name as prefix", "bodyHTML": "<p dir=\"auto\">Put method name as prefix</p>", "author": "marcos-iov", "createdAt": "2020-09-11T19:03:46Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);", "originalCommit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,15 +48,15 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n                 logger.debug(message);\n                 throw new PeginInstructionsParseException(message);\n         }\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,23 +50,16 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n-                logger.debug(message);\n-                throw new PeginInstructionsParseException(message);\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDE3NQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487234175", "body": "Put method name as prefix", "bodyText": "Put method name as prefix", "bodyHTML": "<p dir=\"auto\">Put method name as prefix</p>", "author": "marcos-iov", "createdAt": "2020-09-11T19:03:55Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);", "originalCommit": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cdb27070598b97697997491a8676a2e1d51bd26", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 857e91319..076864d0a 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -56,7 +56,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n                 logger.debug(message);\n                 throw new PeginInstructionsParseException(message);\n         }\n", "next_change": {"commit": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 076864d0a..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,12 +48,12 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": {"commit": "a3918d522dbcea4809d2c7d06cfee825674efb02", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..0b2f98039 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -48,23 +50,16 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n-                logger.debug(message);\n-                throw new PeginInstructionsParseException(message);\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n-    }\n-\n-    public Optional<Address> getBtcRefundAddress() {\n-        return this.btcRefundAddress;\n+        return Optional.of(btcRefundAddress);\n     }\n }\n", "next_change": {"commit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 0b2f98039..2a574f4c5 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -50,16 +48,23 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n                 btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n                 btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n                 break;\n             default:\n-                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n-                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+                String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n+                logger.debug(message);\n+                throw new PeginInstructionsParseException(message);\n         }\n \n-        return Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n     }\n }\n", "next_change": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -61,7 +61,7 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n                 throw new PeginInstructionsParseException(message);\n         }\n \n-        this.btcRefundAddress = Optional.of(btcRefundAddress);\n+        this.btcRefundAddress = Optional.of(parsedBtcRefundAddress);\n     }\n \n     public Optional<Address> getBtcRefundAddress() {\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "4cdb27070598b97697997491a8676a2e1d51bd26", "url": "https://github.com/rsksmart/rskj/commit/4cdb27070598b97697997491a8676a2e1d51bd26", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T19:24:50Z", "type": "forcePushed"}, {"oid": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "url": "https://github.com/rsksmart/rskj/commit/ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-11T19:54:17Z", "type": "forcePushed"}, {"oid": "a3918d522dbcea4809d2c7d06cfee825674efb02", "url": "https://github.com/rsksmart/rskj/commit/a3918d522dbcea4809d2c7d06cfee825674efb02", "message": "Create OP_RETURN parser\n\nCreate interface and implement it on PegInstructionBaseClase from where all the versions will extend.\nCreate multiple exceptions to manage errors.", "committedDate": "2020-09-14T14:40:45Z", "type": "commit"}, {"oid": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "url": "https://github.com/rsksmart/rskj/commit/66901af5dbc45c855849d7c53fdb34bb9e9b973d", "message": "Add unit test for PeginInstructions classes and update BtcTransactionFormatUtilsTest as it now contains the method extractOpReturnData", "committedDate": "2020-09-14T14:40:55Z", "type": "commit"}, {"oid": "985e7f8e1b94fbf6035adc065456b25cb10ef19e", "url": "https://github.com/rsksmart/rskj/commit/985e7f8e1b94fbf6035adc065456b25cb10ef19e", "message": "Create class to contain all the raw transactions and rename some tests", "committedDate": "2020-09-14T14:41:03Z", "type": "commit"}, {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "url": "https://github.com/rsksmart/rskj/commit/02c14eb742c29ef02bec1db906f7f4589bb0142c", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-14T14:41:11Z", "type": "commit"}, {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "url": "https://github.com/rsksmart/rskj/commit/02c14eb742c29ef02bec1db906f7f4589bb0142c", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2020-09-14T14:41:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTk1OQ==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488175959", "body": "This validation shouldn't be here, is already performed by PeginInstructionsBase", "bodyText": "This validation shouldn't be here, is already performed by PeginInstructionsBase", "bodyHTML": "<p dir=\"auto\">This validation shouldn't be here, is already performed by PeginInstructionsBase</p>", "author": "josedahlquist", "createdAt": "2020-09-14T19:40:28Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {", "originalCommit": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5OTAwNw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488199007", "bodyText": "You first call extractOpReturnData and then parse method is called (that's when parse method is called).", "author": "guidohernan93", "createdAt": "2020-09-14T20:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\nindex d07c7ec15..7dd55a92b 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java\n", "chunk": "@@ -92,11 +92,6 @@ public class PeginInstructionsProvider {\n             throw new PeginInstructionsException(message);\n         }\n \n-        if (data.length < 22) {\n-            logger.debug(\"[extractOpReturnData] Data length must be at least 22 bytes. Given is {}:\", data.length);\n-            throw new PeginInstructionsException(\"Data length is invalid. Must be at least 22 bytes\");\n-        }\n-\n         return data;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDQ4Nw==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488830487", "body": "Not sure if it makes sense to have this here, isn't the data length checked in `validateDataLength`? ", "bodyText": "Not sure if it makes sense to have this here, isn't the data length checked in validateDataLength?", "bodyHTML": "<p dir=\"auto\">Not sure if it makes sense to have this here, isn't the data length checked in <code>validateDataLength</code>?</p>", "author": "marcos-iov", "createdAt": "2020-09-15T17:16:22Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) throws PeginInstructionsParseException {\n+        if (data == null || data.length < 2) {\n+            String message;\n+\n+            if (data == null) {\n+                message = \"Provided data is null\";\n+            }\n+            else {\n+                message = String.format(\"Invalid data given. Expected at least 2 bytes, \" +\n+                    \"received %d\", data.length);\n+            }\n+\n+            logger.debug(\"[extractProtocolVersion] {}\", message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }", "originalCommit": "657ec599cee7850044645b5b44c57c677db7039a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzk4NA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488833984", "bodyText": "Length must be at least 22 bytes. Then, for v1, you check that length is 22 or 43 bytes, otherwise will fail. Maybe, for later versions, that validation will be different, but we always need at least those 22 bytes.", "author": "guidohernan93", "createdAt": "2020-09-15T17:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NzM5Ng==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488857396", "bodyText": "Remove validation finally, each version will take care of validating the data length.", "author": "guidohernan93", "createdAt": "2020-09-15T17:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex c3e331d42..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -57,13 +56,6 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n     }\n \n     public void parse(byte[] data) throws PeginInstructionsParseException {\n-        if (data.length < 22) {\n-            logger.debug(\"[parse] Invalid data length\");\n-            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n-                + \"received %d\", data.length);\n-            throw new PeginInstructionsParseException(message);\n-        }\n-\n         validateDataLength(data);\n         this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n         parseAdditionalData(data);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDgxMg==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488830812", "body": "```suggestion\r\n            } else {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcos-iov", "createdAt": "2020-09-15T17:16:56Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) throws PeginInstructionsParseException {\n+        if (data == null || data.length < 2) {\n+            String message;\n+\n+            if (data == null) {\n+                message = \"Provided data is null\";\n+            }\n+            else {", "originalCommit": "657ec599cee7850044645b5b44c57c677db7039a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\nindex c3e331d42..2e64ee44f 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java\n", "chunk": "@@ -32,8 +32,7 @@ public abstract class PeginInstructionsBase implements PeginInstructions {\n \n             if (data == null) {\n                 message = \"Provided data is null\";\n-            }\n-            else {\n+            } else {\n                 message = String.format(\"Invalid data given. Expected at least 2 bytes, \" +\n                     \"received %d\", data.length);\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzODYxMA==", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488838610", "body": "```suggestion\r\n        Address parsedBtcRefundAddress;\r\n```\r\nThis will save you a code smell", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Address btcRefundAddress;\n          \n          \n            \n                    Address parsedBtcRefundAddress;\n          \n      \n    \n    \n  \n\nThis will save you a code smell", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Address</span> <span class=\"x x-first x-last\">btcRefundAddress</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Address</span> <span class=\"x x-first x-last\">parsedBtcRefundAddress</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This will save you a code smell</p>", "author": "marcos-iov", "createdAt": "2020-09-15T17:26:22Z", "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;", "originalCommit": "657ec599cee7850044645b5b44c57c677db7039a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\nindex 2a574f4c5..7f0b9fa09 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java\n", "chunk": "@@ -42,18 +42,18 @@ public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n         int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n         byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n \n-        Address btcRefundAddress;\n+        Address parsedBtcRefundAddress;\n \n         switch (btcRefundAddressType) {\n             case P2PKH_ADDRESS_TYPE:\n                 // Uses pubKeyHash\n-                btcRefundAddress = new Address(this.params, hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2PKH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             case P2SH_ADDRESS_TYPE:\n                 // Uses scriptPubKeyHash\n-                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n-                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                parsedBtcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"[parseAdditionalData] Obtained P2SH BTC address: {}\",parsedBtcRefundAddress);\n                 break;\n             default:\n                 String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);\n", "next_change": null}]}}, {"oid": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "url": "https://github.com/rsksmart/rskj/commit/0578996bc5b4f7ba89f271425a649e96c9d5b45c", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion", "committedDate": "2020-09-15T17:49:57Z", "type": "commit"}, {"oid": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "url": "https://github.com/rsksmart/rskj/commit/0578996bc5b4f7ba89f271425a649e96c9d5b45c", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion", "committedDate": "2020-09-15T17:49:57Z", "type": "forcePushed"}]}