{"pr_number": 1159, "pr_title": "Generalize Miner Server's extra data tests", "pr_author": "M-Picco", "pr_createdAt": "2020-01-15T15:50:55Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1159", "merge_commit": "60a0daef1da33a75f692fe71bed0c834b22027a8", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3NDIyOA==", "url": "https://github.com/rsksmart/rskj/pull/1159#discussion_r366974228", "body": "Really? xD", "bodyText": "Really? xD", "bodyHTML": "<p dir=\"auto\">Really? xD</p>", "author": "pmprete", "createdAt": "2020-01-15T16:26:04Z", "path": "rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java", "diffHunk": "@@ -868,11 +868,18 @@ public void extraDataWithClientDataMoreThan32Bytes() {\n \n         byte[] secondItem = decodedExtraData.get(1).getRLPData();\n         assertNotNull(secondItem);\n-        assertEquals(\"SNAPSHOT-cb7f28e\", new String(secondItem));\n+        assertEquals(config.projectVersionModifier().concat(\"-cb7f28e\"), new String(secondItem));\n \n         byte[] thirdItem = decodedExtraData.get(2).getRLPData();\n         assertNotNull(thirdItem);\n-        assertEquals(\"tincho is th\", new String(thirdItem));\n+\n+        // The final client extra data may be truncated by the combined size of the other encoded elements\n+        int extraDataMaxLength = 32;\n+        int extraDataEncodingOverhead = 3;\n+        Integer clientExtraDataSize =\n+                extraDataMaxLength - extraDataEncodingOverhead - firstItem.length - secondItem.length;\n+\n+        assertEquals(\"tincho is the king of mining\".substring(0, clientExtraDataSize), new String(thirdItem));", "originalCommit": "8f74b2013497c37638c8ce665043970775d08502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1MDU3OQ==", "url": "https://github.com/rsksmart/rskj/pull/1159#discussion_r378650579", "bodyText": "100% sure xD", "author": "martinmedina", "createdAt": "2020-02-13T04:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3NDIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ac6656778fe45b3cf1b97035c5925e5d2680d6f6", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex 796305af8..55a5c2f9b 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -868,18 +868,11 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n \n         byte[] secondItem = decodedExtraData.get(1).getRLPData();\n         assertNotNull(secondItem);\n-        assertEquals(config.projectVersionModifier().concat(\"-cb7f28e\"), new String(secondItem));\n+        assertEquals(\"SNAPSHOT-cb7f28e\", new String(secondItem));\n \n         byte[] thirdItem = decodedExtraData.get(2).getRLPData();\n         assertNotNull(thirdItem);\n-\n-        // The final client extra data may be truncated by the combined size of the other encoded elements\n-        int extraDataMaxLength = 32;\n-        int extraDataEncodingOverhead = 3;\n-        Integer clientExtraDataSize =\n-                extraDataMaxLength - extraDataEncodingOverhead - firstItem.length - secondItem.length;\n-\n-        assertEquals(\"tincho is the king of mining\".substring(0, clientExtraDataSize), new String(thirdItem));\n+        assertEquals(\"tincho is th\", new String(thirdItem));\n     }\n \n     private BtcBlock getMergedMiningBlockWithOnlyCoinbase(MinerWork work) {\n", "next_change": {"commit": "1de621ce0a3988d5c318402e831c85d3227f0369", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex 55a5c2f9b..796305af8 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -868,11 +868,18 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n \n         byte[] secondItem = decodedExtraData.get(1).getRLPData();\n         assertNotNull(secondItem);\n-        assertEquals(\"SNAPSHOT-cb7f28e\", new String(secondItem));\n+        assertEquals(config.projectVersionModifier().concat(\"-cb7f28e\"), new String(secondItem));\n \n         byte[] thirdItem = decodedExtraData.get(2).getRLPData();\n         assertNotNull(thirdItem);\n-        assertEquals(\"tincho is th\", new String(thirdItem));\n+\n+        // The final client extra data may be truncated by the combined size of the other encoded elements\n+        int extraDataMaxLength = 32;\n+        int extraDataEncodingOverhead = 3;\n+        Integer clientExtraDataSize =\n+                extraDataMaxLength - extraDataEncodingOverhead - firstItem.length - secondItem.length;\n+\n+        assertEquals(\"tincho is the king of mining\".substring(0, clientExtraDataSize), new String(thirdItem));\n     }\n \n     private BtcBlock getMergedMiningBlockWithOnlyCoinbase(MinerWork work) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e9b37ed7cccdf350cdc9de8c4892b968f8b840ee", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex 796305af8..64c5b0d8b 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -876,8 +648,7 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n         // The final client extra data may be truncated by the combined size of the other encoded elements\n         int extraDataMaxLength = 32;\n         int extraDataEncodingOverhead = 3;\n-        Integer clientExtraDataSize =\n-                extraDataMaxLength - extraDataEncodingOverhead - firstItem.length - secondItem.length;\n+        int clientExtraDataSize = extraDataMaxLength - extraDataEncodingOverhead - firstItem.length - secondItem.length;\n \n         assertEquals(\"tincho is the king of mining\".substring(0, clientExtraDataSize), new String(thirdItem));\n     }\n", "next_change": {"commit": "9050321ba676e3019eed9442bb7d73db66f05e78", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex 64c5b0d8b..e18b1df3c 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -653,6 +708,87 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n         assertEquals(\"tincho is the king of mining\".substring(0, clientExtraDataSize), new String(thirdItem));\n     }\n \n+    @Test\n+    public void onBestBlockBuildBlockToMine() {\n+\n+        // prepare for miner server\n+        Ethereum ethereum = mock(EthereumImpl.class);\n+        when(ethereum.addNewMinedBlock(any())).thenReturn(ImportResult.IMPORTED_BEST);\n+\n+        BlockProcessor blockProcessor = mock(NodeBlockProcessor.class);\n+        when(blockProcessor.hasBetterBlockToSync()).thenReturn(false);\n+        \n+        BlockUnclesValidationRule unclesValidationRule = mock(BlockUnclesValidationRule.class);\n+        when(unclesValidationRule.isValid(any())).thenReturn(true);\n+        \n+        MinerClock clock = new MinerClock(true, Clock.systemUTC());\n+        \n+        // create miner server\n+        MinerServer minerServer = spy(makeMinerServer(ethereum, blockProcessor, unclesValidationRule, clock, transactionPool));\n+        minerServer.start();\n+   \n+        // create listener\n+        MinerServerImpl.NewBlockTxListener listener = new MinerServerImpl.NewBlockTxListener(this.miningMainchainView, minerServer, blockProcessor);\n+        \n+        Block block = mock(Block.class);\n+        when(block.getHeader()).thenReturn(this.miningMainchainView.get().get(0));\n+        \n+        // call best block\n+        listener.onBestBlock(block, null);\n+     \n+        // assert the event was received and build block was called \n+        // it need to be 2 because the minerServer.start() calls it once\n+        verify(minerServer, times(2)).buildBlockToMine(false);\n+        \n+        minerServer.stop();\n+    }\n+\n+    @Test\n+    public void onNewTxBuildBlockToMine() throws InterruptedException {\n+\n+        // prepare for miner server\n+        Ethereum ethereum = spy(new EthereumImpl(null, null, compositeEthereumListener, standardBlockchain));\n+        doReturn(ImportResult.IMPORTED_BEST).when(ethereum).addNewMinedBlock(any());\n+        \n+        BlockUnclesValidationRule unclesValidationRule = mock(BlockUnclesValidationRule.class);\n+        when(unclesValidationRule.isValid(any())).thenReturn(true);\n+        \n+        MinerClock clock = new MinerClock(true, Clock.systemUTC());\n+\n+        BlockProcessor blockProcessor = mock(NodeBlockProcessor.class);\n+        when(blockProcessor.hasBetterBlockToSync()).thenReturn(false);\n+        \n+        // create miner server\n+        MinerServer minerServer = spy(makeMinerServer(ethereum, blockProcessor, unclesValidationRule, clock, transactionPool));\n+        minerServer.start();\n+        \n+        // create the transaction\n+        World world = new World((BlockChainImpl) standardBlockchain, blockStore, rskTestContext.getReceiptStore(), rskTestContext.getTrieStore(), repository, transactionPool, (Genesis)null);\n+        \n+        Account sender = new AccountBuilder(world).name(\"sender\").balance(new Coin(BigInteger.valueOf(2000))).build();\n+        Account receiver = new AccountBuilder(world).name(\"receiver\").build();\n+\n+        Transaction tx = new TransactionBuilder()\n+                .sender(sender)\n+                .receiver(receiver)\n+                .nonce(0)\n+                .value(BigInteger.valueOf(1000))\n+                .build();\n+        \n+        List<Transaction> txs = new ArrayList<>(Collections.singletonList(tx));\n+        \n+        // fire the event on ethereum that should send it to the listener inside the miner server\n+        compositeEthereumListener.onPendingTransactionsReceived(txs);\n+        \n+        // assert the event was received and build block was called \n+        // it need to be 2 because the minerServer.start() calls it once\n+        verify(minerServer, times(2)).buildBlockToMine(false);\n+        \n+        minerServer.stop();\n+        \n+    }\n+    \n+    \n     private BtcBlock getMergedMiningBlockWithOnlyCoinbase(MinerWork work) {\n         return getMergedMiningBlock(work, Collections.emptyList());\n     }\n", "next_change": {"commit": "a2c222f26b5f1e82c985ece62e761d5fc2b30664", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex e18b1df3c..15e0cbf77 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -776,16 +772,29 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n                 .build();\n         \n         List<Transaction> txs = new ArrayList<>(Collections.singletonList(tx));\n+                \n+                \n+        // create miner server\n+        MinerServer minerServer = spy(makeMinerServer(ethereum, blockProcessor, unclesValidationRule, clock, transactionPool));\n+        minerServer.start();\n+   \n+        // create listener\n+        MinerServerImpl.NewBlockTxListener listener = new MinerServerImpl.NewBlockTxListener(this.miningMainchainView, minerServer, blockProcessor, true);\n         \n-        // fire the event on ethereum that should send it to the listener inside the miner server\n-        compositeEthereumListener.onPendingTransactionsReceived(txs);\n+        Block block = mock(Block.class);\n+        when(block.getHeader()).thenReturn(this.miningMainchainView.get().get(0));\n         \n+        // call best block\n+        listener.onPendingTransactionsReceived(txs);\n+     \n         // assert the event was received and build block was called \n         // it need to be 2 because the minerServer.start() calls it once\n         verify(minerServer, times(2)).buildBlockToMine(false);\n         \n         minerServer.stop();\n         \n+        \n+        \n     }\n     \n     \n", "next_change": {"commit": "d9e41928fd22f8e3f1f135682fc06bc8d8f41f03", "changed_code": [{"header": "diff --git a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\nindex 15e0cbf77..bb458d36c 100644\n--- a/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/mine/MinerServerTest.java\n", "chunk": "@@ -770,34 +774,34 @@ public class MinerServerTest extends ParameterizedNetworkUpgradeTest {\n                 .nonce(0)\n                 .value(BigInteger.valueOf(1000))\n                 .build();\n-        \n+\n         List<Transaction> txs = new ArrayList<>(Collections.singletonList(tx));\n-                \n-                \n+\n+\n         // create miner server\n         MinerServer minerServer = spy(makeMinerServer(ethereum, blockProcessor, unclesValidationRule, clock, transactionPool));\n         minerServer.start();\n-   \n+\n         // create listener\n-        MinerServerImpl.NewBlockTxListener listener = new MinerServerImpl.NewBlockTxListener(this.miningMainchainView, minerServer, blockProcessor, true);\n-        \n+        MinerServerImpl.NewBlockTxListener listener = new MinerServerImpl.NewBlockTxListener(this.miningMainchainView, minerServer::buildBlockToMine, blockProcessor, true);\n+\n         Block block = mock(Block.class);\n         when(block.getHeader()).thenReturn(this.miningMainchainView.get().get(0));\n-        \n+\n         // call best block\n         listener.onPendingTransactionsReceived(txs);\n-     \n-        // assert the event was received and build block was called \n+\n+        // assert the event was received and build block was called\n         // it need to be 2 because the minerServer.start() calls it once\n         verify(minerServer, times(2)).buildBlockToMine(false);\n-        \n+\n         minerServer.stop();\n-        \n-        \n-        \n+\n+\n+\n     }\n-    \n-    \n+\n+\n     private BtcBlock getMergedMiningBlockWithOnlyCoinbase(MinerWork work) {\n         return getMergedMiningBlock(work, Collections.emptyList());\n     }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "60a0daef1da33a75f692fe71bed0c834b22027a8", "message": "Merge commit", "committedDate": null}, {"oid": "25e0054241e770c8da4f1c60647b579ebf017a99", "committedDate": "2020-02-19 17:05:29 -0300", "message": "SignatureCache was added to TransactionExecutor as internal variable"}, {"oid": "e9b37ed7cccdf350cdc9de8c4892b968f8b840ee", "committedDate": "2021-11-30 17:56:49 +0200", "message": "Implemented miner rate limit"}, {"oid": "4e4a16ff900ff14b54986894c67bcd27f5a30878", "committedDate": "2021-11-30 17:56:49 +0200", "message": "Added warn when feature is enabled; Refactoring"}, {"oid": "62e5ecf1cce6d1467c3c4489b0a827414e52d332", "committedDate": "2022-03-25 11:34:42 -0300", "message": "refactor: replacing TypeConverter with HexUtils"}, {"oid": "9050321ba676e3019eed9442bb7d73db66f05e78", "committedDate": "2022-07-25 11:13:00 -0300", "message": "add tests and some refactoring"}, {"oid": "a2c222f26b5f1e82c985ece62e761d5fc2b30664", "committedDate": "2022-07-25 11:13:00 -0300", "message": "add toggle flag to update work on pending tx"}, {"oid": "af72b8cbfa6da9fe65a02ceae32b952c6b48a3b8", "committedDate": "2022-07-25 11:13:00 -0300", "message": "addresing pr comments"}, {"oid": "20b6c1d56a3336f688a1fab920c78d90e5bb970c", "committedDate": "2022-07-25 11:46:42 -0300", "message": "correct tests"}, {"oid": "d9e41928fd22f8e3f1f135682fc06bc8d8f41f03", "committedDate": "2022-10-21 16:33:41 +0200", "message": "Update to Junit5"}, {"oid": "eafa02a95c6bdc194ba5841df609c7450871ef4d", "committedDate": "2022-10-21 16:33:42 +0200", "message": "Removed public modifiers (not needed on Junit5) and fixed modified files Sonar issues"}, {"oid": "264468de9b87ac1391e1de7fcedc887ba245592c", "committedDate": "2022-12-15 10:13:31 -0300", "message": "Adding signature cache to Mining Module"}, {"oid": "555a296467504186405235473ff261559e84eb1c", "committedDate": "2022-12-15 10:13:37 -0300", "message": "Updating MinerUtils"}, {"oid": "1328fac06b9df68dedec51784826f84c329561e0", "committedDate": "2022-12-16 15:25:23 -0300", "message": "Adding signature cache to peg related files"}, {"oid": "51edb0f3ff80de7b2762ec95bf7ef8c93007c9a1", "committedDate": "2023-02-07 16:03:22 +0100", "message": "Making TestUtils deterministic"}, {"oid": "4368c0989a73cb86cab4cff6c18da3fe174bc59d", "committedDate": "2023-02-07 16:03:24 +0100", "message": "improvements from PR comments"}, {"oid": "cf7277f700800b6faa5989676b8c000b18aad41f", "committedDate": "2023-05-23 11:49:08 +0300", "message": "Using temp directories in unit tests instead of user home directory"}]}, {"oid": "909547823436b502de44566a3820e90fa188c96e", "url": "https://github.com/rsksmart/rskj/commit/909547823436b502de44566a3820e90fa188c96e", "message": "Make the MinerServer's extraData tests adaptable to each parameterized test configurations and versions instead of relying on a hardcoded SNAPSHOT", "committedDate": "2020-02-10T19:48:10Z", "type": "forcePushed"}, {"oid": "ac6656778fe45b3cf1b97035c5925e5d2680d6f6", "url": "https://github.com/rsksmart/rskj/commit/ac6656778fe45b3cf1b97035c5925e5d2680d6f6", "message": "Override projectVersionModifier for each configuration defined in ParameterizedNetworkUpgradeTest", "committedDate": "2020-02-13T04:51:43Z", "type": "commit"}, {"oid": "1de621ce0a3988d5c318402e831c85d3227f0369", "url": "https://github.com/rsksmart/rskj/commit/1de621ce0a3988d5c318402e831c85d3227f0369", "message": "Make the MinerServer's extraData tests adaptable to each parameterized test configurations and versions instead of relying on a hardcoded SNAPSHOT", "committedDate": "2020-02-13T04:51:43Z", "type": "commit"}, {"oid": "1de621ce0a3988d5c318402e831c85d3227f0369", "url": "https://github.com/rsksmart/rskj/commit/1de621ce0a3988d5c318402e831c85d3227f0369", "message": "Make the MinerServer's extraData tests adaptable to each parameterized test configurations and versions instead of relying on a hardcoded SNAPSHOT", "committedDate": "2020-02-13T04:51:43Z", "type": "forcePushed"}]}