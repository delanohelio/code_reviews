{"pr_number": 1294, "pr_title": "Log nanoseconds as seconds", "pr_author": "ajlopezrsk", "pr_createdAt": "2020-08-18T19:21:11Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1294", "merge_commit": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "timeline": [{"oid": "8586239c912498f1e48c360d5bb4e07b521a62ce", "url": "https://github.com/rsksmart/rskj/commit/8586239c912498f1e48c360d5bb4e07b521a62ce", "message": "Warn if block process takes more than one minute", "committedDate": "2020-08-19T14:54:24Z", "type": "forcePushed"}, {"oid": "f2c48d17aca9c5a090d00dbc8bfba1a9c0cd46e6", "url": "https://github.com/rsksmart/rskj/commit/f2c48d17aca9c5a090d00dbc8bfba1a9c0cd46e6", "message": "Warn if block process takes more than one minute", "committedDate": "2020-08-26T13:41:06Z", "type": "forcePushed"}, {"oid": "91a86107862921e14dec88b596b923bfa738a1e0", "url": "https://github.com/rsksmart/rskj/commit/91a86107862921e14dec88b596b923bfa738a1e0", "message": "Warn if block process takes more than one minute", "committedDate": "2020-08-27T20:12:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyOTk5NQ==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r481329995", "body": "final?", "bodyText": "final?", "bodyHTML": "<p dir=\"auto\">final?</p>", "author": "patogallaiovlabs", "createdAt": "2020-09-01T17:58:18Z", "path": "rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java", "diffHunk": "@@ -32,9 +32,14 @@\n  * Created by ajlopez on 19/08/2016.\n  */\n public class BlockUtils {\n+    private static long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;", "originalCommit": "91a86107862921e14dec88b596b923bfa738a1e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MzMzMw==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r483073333", "bodyText": "done", "author": "ajlopezrsk", "createdAt": "2020-09-03T15:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyOTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "66f3a40736615f3845ad24f66f422aace7b04cd2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\nindex b7b2bd944..afe66fd0a 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n", "chunk": "@@ -32,7 +32,7 @@ import java.util.stream.Collectors;\n  * Created by ajlopez on 19/08/2016.\n  */\n public class BlockUtils {\n-    private static long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n+    private static final long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n \n     private BlockUtils() { }\n \n", "next_change": {"commit": "4fae62f6f7ac6ee23d2a1a67888730f27608830c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\nindex afe66fd0a..104755c95 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n", "chunk": "@@ -32,14 +32,9 @@ import java.util.stream.Collectors;\n  * Created by ajlopez on 19/08/2016.\n  */\n public class BlockUtils {\n-    private static final long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n \n     private BlockUtils() { }\n \n-    public static boolean tooMuchProcessTime(long nanoseconds) {\n-        return nanoseconds > MAX_BLOCK_PROCESS_TIME_NANOSECONDS;\n-    }\n-\n     public static boolean blockInSomeBlockChain(Block block, Blockchain blockChain) {\n         return blockInSomeBlockChain(block.getHash(), block.getNumber(), blockChain);\n     }\n", "next_change": {"commit": "1509b10bc7fc20682b4d558e3e1e6ad677548c35", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\nindex 104755c95..b7b2bd944 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n", "chunk": "@@ -32,9 +32,14 @@ import java.util.stream.Collectors;\n  * Created by ajlopez on 19/08/2016.\n  */\n public class BlockUtils {\n+    private static long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n \n     private BlockUtils() { }\n \n+    public static boolean tooMuchProcessTime(long nanoseconds) {\n+        return nanoseconds > MAX_BLOCK_PROCESS_TIME_NANOSECONDS;\n+    }\n+\n     public static boolean blockInSomeBlockChain(Block block, Blockchain blockChain) {\n         return blockInSomeBlockChain(block.getHash(), block.getNumber(), blockChain);\n     }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\nindex b7b2bd944..afe66fd0a 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockUtils.java\n", "chunk": "@@ -32,7 +32,7 @@ import java.util.stream.Collectors;\n  * Created by ajlopez on 19/08/2016.\n  */\n public class BlockUtils {\n-    private static long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n+    private static final long MAX_BLOCK_PROCESS_TIME_NANOSECONDS = 60_000_000_000L;\n \n     private BlockUtils() { }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTA5NA==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r481331094", "body": "I would add some tests for this method, seems to have some complexity.", "bodyText": "I would add some tests for this method, seems to have some complexity.", "bodyHTML": "<p dir=\"auto\">I would add some tests for this method, seems to have some complexity.</p>", "author": "patogallaiovlabs", "createdAt": "2020-09-01T18:00:09Z", "path": "rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java", "diffHunk": "@@ -69,10 +71,17 @@ public boolean isInvalidBlock() {\n \n     private void logResult(String blockHash, Duration processingTime) {", "originalCommit": "91a86107862921e14dec88b596b923bfa738a1e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNDA3MA==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r483224070", "bodyText": "Done", "author": "ajlopezrsk", "createdAt": "2020-09-03T20:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "66f3a40736615f3845ad24f66f422aace7b04cd2", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\nindex d294f3407..3dd9ced36 100644\n--- a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n+++ b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n", "chunk": "@@ -70,23 +71,39 @@ public class BlockProcessResult {\n     }\n \n     private void logResult(String blockHash, Duration processingTime) {\n-        if(result == null || result.isEmpty()) {\n-            long processTime =  processingTime.toNanos();\n+        String message = buildLogMessage(blockHash, processingTime, result);\n \n-            if (BlockUtils.tooMuchProcessTime(processTime)) {\n-                logger.warn(\"[MESSAGE PROCESS] Block[{}] After[{}] seconds, process result. No block connections were made\", FormatUtils.formatNanosecondsToSeconds(processTime), blockHash);\n-            }\n-            else {\n-                logger.debug(\"[MESSAGE PROCESS] Block[{}] After[{}] seconds, process result. No block connections were made\", FormatUtils.formatNanosecondsToSeconds(processTime), blockHash);\n-            }\n+        if (BlockUtils.tooMuchProcessTime(processingTime.getNano())) {\n+            logger.warn(message);\n+        }\n+        else {\n+            logger.debug(message);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static String buildLogMessage(String blockHash, Duration processingTime, Map<Keccak256, ImportResult> result) {\n+        StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n+                .append(blockHash)\n+                .append(\"] After[\")\n+                .append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos()))\n+                .append(\"] seconds, process result.\");\n+\n+        if (result == null || result.isEmpty()) {\n+            sb.append(\" No block connections were made\");\n         } else {\n-            StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n-                    .append(blockHash).append(\"] After[\").append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos())).append(\"] nano, process result. Connections attempts: \").append(result.size()).append(\" | \");\n+            sb.append(\" Connections attempts: \")\n+                    .append(result.size())\n+                    .append(\" | \");\n \n-            for(Map.Entry<Keccak256, ImportResult> entry : this.result.entrySet()) {\n-                sb.append(entry.getKey().toString()).append(\" - \").append(entry.getValue()).append(\" | \");\n+            for (Map.Entry<Keccak256, ImportResult> entry : result.entrySet()) {\n+                sb.append(entry.getKey().toString())\n+                        .append(\" - \")\n+                        .append(entry.getValue())\n+                        .append(\" | \");\n             }\n-            logger.debug(sb.toString());\n         }\n+\n+        return sb.toString();\n     }\n }\n", "next_change": {"commit": "4fae62f6f7ac6ee23d2a1a67888730f27608830c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\nindex 3dd9ced36..e0a29424c 100644\n--- a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n+++ b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n", "chunk": "@@ -71,39 +68,16 @@ public class BlockProcessResult {\n     }\n \n     private void logResult(String blockHash, Duration processingTime) {\n-        String message = buildLogMessage(blockHash, processingTime, result);\n-\n-        if (BlockUtils.tooMuchProcessTime(processingTime.getNano())) {\n-            logger.warn(message);\n-        }\n-        else {\n-            logger.debug(message);\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static String buildLogMessage(String blockHash, Duration processingTime, Map<Keccak256, ImportResult> result) {\n-        StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n-                .append(blockHash)\n-                .append(\"] After[\")\n-                .append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos()))\n-                .append(\"] seconds, process result.\");\n-\n-        if (result == null || result.isEmpty()) {\n-            sb.append(\" No block connections were made\");\n+        if(result == null || result.isEmpty()) {\n+            logger.debug(\"[MESSAGE PROCESS] Block[{}] After[{}] nano, process result. No block connections were made\", processingTime.toNanos(), blockHash);\n         } else {\n-            sb.append(\" Connections attempts: \")\n-                    .append(result.size())\n-                    .append(\" | \");\n+            StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n+                    .append(blockHash).append(\"] After[\").append(processingTime.toNanos()).append(\"] nano, process result. Connections attempts: \").append(result.size()).append(\" | \");\n \n-            for (Map.Entry<Keccak256, ImportResult> entry : result.entrySet()) {\n-                sb.append(entry.getKey().toString())\n-                        .append(\" - \")\n-                        .append(entry.getValue())\n-                        .append(\" | \");\n+            for(Map.Entry<Keccak256, ImportResult> entry : this.result.entrySet()) {\n+                sb.append(entry.getKey().toString()).append(\" - \").append(entry.getValue()).append(\" | \");\n             }\n+            logger.debug(sb.toString());\n         }\n-\n-        return sb.toString();\n     }\n }\n", "next_change": {"commit": "89f40bedef30a82a726017725cc21b691bf7981f", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\nindex e0a29424c..3dd9ced36 100644\n--- a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n+++ b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n", "chunk": "@@ -68,16 +71,39 @@ public class BlockProcessResult {\n     }\n \n     private void logResult(String blockHash, Duration processingTime) {\n-        if(result == null || result.isEmpty()) {\n-            logger.debug(\"[MESSAGE PROCESS] Block[{}] After[{}] nano, process result. No block connections were made\", processingTime.toNanos(), blockHash);\n+        String message = buildLogMessage(blockHash, processingTime, result);\n+\n+        if (BlockUtils.tooMuchProcessTime(processingTime.getNano())) {\n+            logger.warn(message);\n+        }\n+        else {\n+            logger.debug(message);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static String buildLogMessage(String blockHash, Duration processingTime, Map<Keccak256, ImportResult> result) {\n+        StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n+                .append(blockHash)\n+                .append(\"] After[\")\n+                .append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos()))\n+                .append(\"] seconds, process result.\");\n+\n+        if (result == null || result.isEmpty()) {\n+            sb.append(\" No block connections were made\");\n         } else {\n-            StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n-                    .append(blockHash).append(\"] After[\").append(processingTime.toNanos()).append(\"] nano, process result. Connections attempts: \").append(result.size()).append(\" | \");\n+            sb.append(\" Connections attempts: \")\n+                    .append(result.size())\n+                    .append(\" | \");\n \n-            for(Map.Entry<Keccak256, ImportResult> entry : this.result.entrySet()) {\n-                sb.append(entry.getKey().toString()).append(\" - \").append(entry.getValue()).append(\" | \");\n+            for (Map.Entry<Keccak256, ImportResult> entry : result.entrySet()) {\n+                sb.append(entry.getKey().toString())\n+                        .append(\" - \")\n+                        .append(entry.getValue())\n+                        .append(\" | \");\n             }\n-            logger.debug(sb.toString());\n         }\n+\n+        return sb.toString();\n     }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\nindex d294f3407..3dd9ced36 100644\n--- a/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n+++ b/rskj-core/src/main/java/co/rsk/net/BlockProcessResult.java\n", "chunk": "@@ -70,23 +71,39 @@ public class BlockProcessResult {\n     }\n \n     private void logResult(String blockHash, Duration processingTime) {\n-        if(result == null || result.isEmpty()) {\n-            long processTime =  processingTime.toNanos();\n+        String message = buildLogMessage(blockHash, processingTime, result);\n \n-            if (BlockUtils.tooMuchProcessTime(processTime)) {\n-                logger.warn(\"[MESSAGE PROCESS] Block[{}] After[{}] seconds, process result. No block connections were made\", FormatUtils.formatNanosecondsToSeconds(processTime), blockHash);\n-            }\n-            else {\n-                logger.debug(\"[MESSAGE PROCESS] Block[{}] After[{}] seconds, process result. No block connections were made\", FormatUtils.formatNanosecondsToSeconds(processTime), blockHash);\n-            }\n+        if (BlockUtils.tooMuchProcessTime(processingTime.getNano())) {\n+            logger.warn(message);\n+        }\n+        else {\n+            logger.debug(message);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static String buildLogMessage(String blockHash, Duration processingTime, Map<Keccak256, ImportResult> result) {\n+        StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n+                .append(blockHash)\n+                .append(\"] After[\")\n+                .append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos()))\n+                .append(\"] seconds, process result.\");\n+\n+        if (result == null || result.isEmpty()) {\n+            sb.append(\" No block connections were made\");\n         } else {\n-            StringBuilder sb = new StringBuilder(\"[MESSAGE PROCESS] Block[\")\n-                    .append(blockHash).append(\"] After[\").append(FormatUtils.formatNanosecondsToSeconds(processingTime.toNanos())).append(\"] nano, process result. Connections attempts: \").append(result.size()).append(\" | \");\n+            sb.append(\" Connections attempts: \")\n+                    .append(result.size())\n+                    .append(\" | \");\n \n-            for(Map.Entry<Keccak256, ImportResult> entry : this.result.entrySet()) {\n-                sb.append(entry.getKey().toString()).append(\" - \").append(entry.getValue()).append(\" | \");\n+            for (Map.Entry<Keccak256, ImportResult> entry : result.entrySet()) {\n+                sb.append(entry.getKey().toString())\n+                        .append(\" - \")\n+                        .append(entry.getValue())\n+                        .append(\" | \");\n             }\n-            logger.debug(sb.toString());\n         }\n+\n+        return sb.toString();\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "message": "Merge commit", "committedDate": null}, {"oid": "5d816c6ec7426c25d7cb7b9674eddd3ee33d85d8", "committedDate": "2020-11-12 03:35:22 +0300", "message": "(#1346) Add static factory methods"}, {"oid": "d75325ec28b3dcc16b96625a7f8533c79a95e672", "committedDate": "2020-11-12 03:35:53 +0300", "message": "(#1346) Make ctor protected"}, {"oid": "c6dfaacb30a4cfef5098686fb9c4e866f86b5657", "committedDate": "2021-01-19 19:05:47 +0200", "message": "Implemented block propagation enhancements"}, {"oid": "2f0dca3cc67866455b317383b84ff521062021f9", "committedDate": "2021-01-19 19:05:48 +0200", "message": "Used BlockProcessResult's factory methods"}]}, {"oid": "278cca473857d83248851467d5cc2ae822d5262b", "url": "https://github.com/rsksmart/rskj/commit/278cca473857d83248851467d5cc2ae822d5262b", "message": "Warn if block process takes more than one minute", "committedDate": "2020-09-02T14:15:17Z", "type": "forcePushed"}, {"oid": "66f3a40736615f3845ad24f66f422aace7b04cd2", "url": "https://github.com/rsksmart/rskj/commit/66f3a40736615f3845ad24f66f422aace7b04cd2", "message": "BlockProcessorResult build log message", "committedDate": "2020-09-03T19:09:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNDMzMg==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r483234332", "body": "you don't need to add num and hash, MDC adds that to every logged line", "bodyText": "you don't need to add num and hash, MDC adds that to every logged line", "bodyHTML": "<p dir=\"auto\">you don't need to add num and hash, MDC adds that to every logged line</p>", "author": "nicops", "createdAt": "2020-09-03T20:24:11Z", "path": "rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java", "diffHunk": "@@ -156,7 +157,15 @@ public ImportResult tryToConnect(Block block) {\n                     long saveTime = System.nanoTime();\n                     ImportResult result = internalTryToConnect(block);\n                     long totalTime = System.nanoTime() - saveTime;\n-                    logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]nano, result {}\", block.getNumber(), block.getPrintableHash(), totalTime, result);\n+                    String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n+\n+                    if (BlockUtils.tooMuchProcessTime(totalTime)) {\n+                        logger.warn(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);", "originalCommit": "66f3a40736615f3845ad24f66f422aace7b04cd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0OTI1OA==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r483249258", "bodyText": "OK, but why such messages were not changed in the pull request that adds the MDC? The above messages are only an improve over those messages", "author": "ajlopezrsk", "createdAt": "2020-09-03T20:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNDMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "4fae62f6f7ac6ee23d2a1a67888730f27608830c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 88a0df269..273a56d65 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -157,15 +156,7 @@ public class BlockChainImpl implements Blockchain {\n                     long saveTime = System.nanoTime();\n                     ImportResult result = internalTryToConnect(block);\n                     long totalTime = System.nanoTime() - saveTime;\n-                    String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n-\n-                    if (BlockUtils.tooMuchProcessTime(totalTime)) {\n-                        logger.warn(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n-                    }\n-                    else {\n-                        logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n-                    }\n-\n+                    logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]nano, result {}\", block.getNumber(), block.getPrintableHash(), totalTime, result);\n                     return result;\n                 }\n             } catch (Throwable t) {\n", "next_change": {"commit": "3c315c8f4c3fe8f19cd309a0c3b92dae3556ba72", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 273a56d65..448bc2a59 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -156,7 +157,8 @@ public class BlockChainImpl implements Blockchain {\n                     long saveTime = System.nanoTime();\n                     ImportResult result = internalTryToConnect(block);\n                     long totalTime = System.nanoTime() - saveTime;\n-                    logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]nano, result {}\", block.getNumber(), block.getPrintableHash(), totalTime, result);\n+                    String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n+                    logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n                     return result;\n                 }\n             } catch (Throwable t) {\n", "next_change": {"commit": "1509b10bc7fc20682b4d558e3e1e6ad677548c35", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 448bc2a59..88a0df269 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -158,7 +158,14 @@ public class BlockChainImpl implements Blockchain {\n                     ImportResult result = internalTryToConnect(block);\n                     long totalTime = System.nanoTime() - saveTime;\n                     String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n-                    logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n+\n+                    if (BlockUtils.tooMuchProcessTime(totalTime)) {\n+                        logger.warn(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n+                    }\n+                    else {\n+                        logger.info(\"block: num: [{}] hash: [{}], processed after: [{}]seconds, result {}\", block.getNumber(), block.getPrintableHash(), timeInSeconds, result);\n+                    }\n+\n                     return result;\n                 }\n             } catch (Throwable t) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "message": "Merge commit", "committedDate": null}, {"oid": "6dedfb55c5edfb6f13c6025cd07cd349af42492a", "committedDate": "2021-05-06 19:09:16 +0300", "message": "Added v2 of ReceiptStore implementation"}, {"oid": "ef89b12709504bc15ecf98f0e9af5d787782ba8c", "committedDate": "2022-10-06 10:40:55 +0300", "message": "Refactored block template execution"}, {"oid": "5748fc10f0d343a0842f5fd549dfa089b44e8a4f", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Removing redundant queries for eth_getLogs"}, {"oid": "7093df3db24baf249d36a84aa33da916eda1edb9", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Removed not needed usage of Blockchain#getBlockByNumber in favor of Blockchain#getBlockByHash by reversing loop order on eth_getLogs"}, {"oid": "91fc3ebd9cc35c4dd83e5747ea4fe4faf69b1dff", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Improved backwards bloom addition implementation by making it a class attribute"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNDg2MA==", "url": "https://github.com/rsksmart/rskj/pull/1294#discussion_r483234860", "body": "same comment as above, you can dispense of the num and hash", "bodyText": "same comment as above, you can dispense of the num and hash", "bodyHTML": "<p dir=\"auto\">same comment as above, you can dispense of the num and hash</p>", "author": "nicops", "createdAt": "2020-09-03T20:25:16Z", "path": "rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java", "diffHunk": "@@ -257,7 +266,14 @@ private ImportResult internalTryToConnect(Block block) {\n             // to the parent's repository.\n \n             long totalTime = System.nanoTime() - saveTime;\n-            logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]nano\", block.getNumber(), block.getPrintableHash(), totalTime);\n+            String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n+\n+            if (BlockUtils.tooMuchProcessTime(totalTime)) {\n+                logger.warn(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);", "originalCommit": "66f3a40736615f3845ad24f66f422aace7b04cd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fae62f6f7ac6ee23d2a1a67888730f27608830c", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 88a0df269..273a56d65 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -266,14 +257,7 @@ public class BlockChainImpl implements Blockchain {\n             // to the parent's repository.\n \n             long totalTime = System.nanoTime() - saveTime;\n-            String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n-\n-            if (BlockUtils.tooMuchProcessTime(totalTime)) {\n-                logger.warn(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n-            }\n-            else {\n-                logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n-            }\n+            logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]nano\", block.getNumber(), block.getPrintableHash(), totalTime);\n \n             // the block is valid at this point\n             stateRootHandler.register(block.getHeader(), result.getFinalState());\n", "next_change": {"commit": "3c315c8f4c3fe8f19cd309a0c3b92dae3556ba72", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 273a56d65..448bc2a59 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -257,7 +259,8 @@ public class BlockChainImpl implements Blockchain {\n             // to the parent's repository.\n \n             long totalTime = System.nanoTime() - saveTime;\n-            logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]nano\", block.getNumber(), block.getPrintableHash(), totalTime);\n+            String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n+            logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n \n             // the block is valid at this point\n             stateRootHandler.register(block.getHeader(), result.getFinalState());\n", "next_change": {"commit": "1509b10bc7fc20682b4d558e3e1e6ad677548c35", "changed_code": [{"header": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\nindex 448bc2a59..88a0df269 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/BlockChainImpl.java\n", "chunk": "@@ -260,7 +267,13 @@ public class BlockChainImpl implements Blockchain {\n \n             long totalTime = System.nanoTime() - saveTime;\n             String timeInSeconds = FormatUtils.formatNanosecondsToSeconds(totalTime);\n-            logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n+\n+            if (BlockUtils.tooMuchProcessTime(totalTime)) {\n+                logger.warn(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n+            }\n+            else {\n+                logger.trace(\"block: num: [{}] hash: [{}], executed after: [{}]seconds\", block.getNumber(), block.getPrintableHash(), timeInSeconds);\n+            }\n \n             // the block is valid at this point\n             stateRootHandler.register(block.getHeader(), result.getFinalState());\n", "next_change": null}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "ed8f572b49d33c6cc69dfad2d5c9a1231aee2a2b", "message": "Merge commit", "committedDate": null}, {"oid": "6dedfb55c5edfb6f13c6025cd07cd349af42492a", "committedDate": "2021-05-06 19:09:16 +0300", "message": "Added v2 of ReceiptStore implementation"}, {"oid": "ef89b12709504bc15ecf98f0e9af5d787782ba8c", "committedDate": "2022-10-06 10:40:55 +0300", "message": "Refactored block template execution"}, {"oid": "5748fc10f0d343a0842f5fd549dfa089b44e8a4f", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Removing redundant queries for eth_getLogs"}, {"oid": "7093df3db24baf249d36a84aa33da916eda1edb9", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Removed not needed usage of Blockchain#getBlockByNumber in favor of Blockchain#getBlockByHash by reversing loop order on eth_getLogs"}, {"oid": "91fc3ebd9cc35c4dd83e5747ea4fe4faf69b1dff", "committedDate": "2023-03-21 11:15:35 +0100", "message": "Improved backwards bloom addition implementation by making it a class attribute"}]}, {"oid": "ca80546f20446187ee720cdb56851a6fabdb43cf", "url": "https://github.com/rsksmart/rskj/commit/ca80546f20446187ee720cdb56851a6fabdb43cf", "message": "Conditional in some logs", "committedDate": "2020-09-03T21:40:56Z", "type": "forcePushed"}, {"oid": "4fae62f6f7ac6ee23d2a1a67888730f27608830c", "url": "https://github.com/rsksmart/rskj/commit/4fae62f6f7ac6ee23d2a1a67888730f27608830c", "message": "Format nanoseconds to seconds", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "3c315c8f4c3fe8f19cd309a0c3b92dae3556ba72", "url": "https://github.com/rsksmart/rskj/commit/3c315c8f4c3fe8f19cd309a0c3b92dae3556ba72", "message": "Log messages in seconds", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "db8c74372eca710f51b0a94f1f49b81362f4b444", "url": "https://github.com/rsksmart/rskj/commit/db8c74372eca710f51b0a94f1f49b81362f4b444", "message": "Fixing sonar issues", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "1509b10bc7fc20682b4d558e3e1e6ad677548c35", "url": "https://github.com/rsksmart/rskj/commit/1509b10bc7fc20682b4d558e3e1e6ad677548c35", "message": "Warn if block process takes more than one minute", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "41ee2a6c64827f40b8c57a568ea2ef9a67d12efb", "url": "https://github.com/rsksmart/rskj/commit/41ee2a6c64827f40b8c57a568ea2ef9a67d12efb", "message": "Static constant as final", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "89f40bedef30a82a726017725cc21b691bf7981f", "url": "https://github.com/rsksmart/rskj/commit/89f40bedef30a82a726017725cc21b691bf7981f", "message": "BlockProcessorResult build log message", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "da3d5f2ca0e440aa112edcbf5304ddf022c2e238", "url": "https://github.com/rsksmart/rskj/commit/da3d5f2ca0e440aa112edcbf5304ddf022c2e238", "message": "Conditional in some logs", "committedDate": "2020-09-07T13:13:04Z", "type": "commit"}, {"oid": "da3d5f2ca0e440aa112edcbf5304ddf022c2e238", "url": "https://github.com/rsksmart/rskj/commit/da3d5f2ca0e440aa112edcbf5304ddf022c2e238", "message": "Conditional in some logs", "committedDate": "2020-09-07T13:13:04Z", "type": "forcePushed"}]}