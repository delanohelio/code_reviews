{"pr_number": 2751, "pr_title": "Kafka fixes", "pr_author": "viliam-durina", "pr_createdAt": "2020-12-10T14:51:34Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2751", "timeline": [{"oid": "33e936cef86015d3e53bb8d1adf97d86082c0902", "url": "https://github.com/hazelcast/hazelcast-jet/commit/33e936cef86015d3e53bb8d1adf97d86082c0902", "message": "Fix test failure", "committedDate": "2020-12-10T14:32:06Z", "type": "commit"}, {"oid": "61f5f52de950491e476b429714a80d7c90c7707d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/61f5f52de950491e476b429714a80d7c90c7707d", "message": "Fix issue with added partitions\n\nThis could happen:\n- the processor starts with 2 partitions p0 and p1\n- p0 has some item, p1 doesn't\n- the processor saves a snapshot. It will only save the offset for p0\nbecause it doesn't know it for p1\n- the job restarts\n- the processor restores offset for p0, but not for p1. Therefore it\nwill assume the partition count before the restart was 1\n- later it will detect that there are 2 partitions and will seek p1 to\nthe beginning because it will think that p1 was added while the job was\ndown\n\nThe fix is that the processor with global processor index of 0 will save\none additional key to the snapshot, the `PARTITION_COUNTS_SNAPSHOT_KEY`.\nUnder that key we the known partition count for each topic. That key is\nbroadcast, every processor will know the partition count before the\nrestart. After this, the above scenario will not consider p1 as added\nand will not seek to the beginning.", "committedDate": "2020-12-10T14:49:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MDExNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2751#discussion_r540850116", "body": "```suggestion\r\n                              .collect(Collectors.toMap(FunctionEx.identity(), topic -> offsets.get(topic).length)));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                          .collect(Collectors.toMap(topic -> topic, topic -> offsets.get(topic).length)));\n          \n          \n            \n                                          .collect(Collectors.toMap(FunctionEx.identity(), topic -> offsets.get(topic).length)));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                              .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toMap(<span class=\"x x-first\">topic </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> topic</span>, topic <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> offsets<span class=\"pl-k\">.</span>get(topic)<span class=\"pl-k\">.</span>length)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                              .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toMap(<span class=\"pl-smi x x-first\">FunctionEx</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">identity()</span>, topic <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> offsets<span class=\"pl-k\">.</span>get(topic)<span class=\"pl-k\">.</span>length)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gierlachg", "createdAt": "2020-12-11T10:34:43Z", "path": "extensions/kafka/src/main/java/com/hazelcast/jet/kafka/impl/StreamKafkaP.java", "diffHunk": "@@ -229,36 +230,57 @@ public boolean saveToSnapshot() {\n                                     \" Saved offsets: \" + offsets() + \", Saved watermarks: \" + watermarks());\n                         }\n                     });\n+\n+            if (processorIndex == 0) {\n+                Entry<BroadcastKey<?>, ?> partitionCountsItem = entry(\n+                        broadcastKey(PARTITION_COUNTS_SNAPSHOT_KEY),\n+                        topics.stream()\n+                              .collect(Collectors.toMap(topic -> topic, topic -> offsets.get(topic).length)));", "originalCommit": "61f5f52de950491e476b429714a80d7c90c7707d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}