{"pr_number": 2750, "pr_title": "Fix issue related to generalizing isolated edge", "pr_author": "ufukyilmaz", "pr_createdAt": "2020-12-10T14:32:18Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2750", "timeline": [{"oid": "539cb027d7ed67dbc2c8adb628d026ee3634bd92", "url": "https://github.com/hazelcast/hazelcast-jet/commit/539cb027d7ed67dbc2c8adb628d026ee3634bd92", "message": "Fix issue related to generalized isolated edge", "committedDate": "2020-12-10T14:20:51Z", "type": "commit"}, {"oid": "4451ea055497f722b6acaba68907a43912ac1597", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4451ea055497f722b6acaba68907a43912ac1597", "message": "Remove empty lines", "committedDate": "2020-12-10T14:35:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTE4Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750#discussion_r540869182", "body": "```suggestion\r\n                        return Stream.concat(\r\n                                Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\r\n                                Arrays.stream(createConveyorArray(\r\n                                        downstreamParallelism - remainder, Math.max(1, queueCount), queueSize\r\n                                ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (remainder == 0) {\n          \n          \n            \n                                        return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n          \n          \n            \n                                    } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n          \n          \n            \n                                        return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        return Stream.concat(\n          \n          \n            \n                                                Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n          \n          \n            \n                                                Arrays.stream(createConveyorArray(\n          \n          \n            \n                                                        downstreamParallelism - remainder, queueCount, queueSize\n          \n          \n            \n                                                ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    return Stream.concat(\n          \n          \n            \n                                            Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n          \n          \n            \n                                            Arrays.stream(createConveyorArray(\n          \n          \n            \n                                                    downstreamParallelism - remainder, Math.max(1, queueCount), queueSize\n          \n          \n            \n                                            ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">if</span> (remainder <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">return</span> createConveyorArray(downstreamParallelism, queueCount, queueSize);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (upstreamParallelism <span class=\"pl-k\">-</span> remainder <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) { <span class=\"pl-c\"><span class=\"pl-c\">//</span> downstreamParallelism &gt; upstreamParallelism</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">return</span> createConveyorArray(downstreamParallelism, queueCount <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, queueSize);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>concat(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(createConveyorArray(remainder, queueCount <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, queueSize)),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(createConveyorArray(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                            downstreamParallelism <span class=\"pl-k\">-</span> remainder, queueCount, queueSize</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    )))<span class=\"pl-k\">.</span>toArray((<span class=\"pl-k\">IntFunction&lt;<span class=\"pl-k\">ConcurrentConveyor&lt;<span class=\"pl-smi\">Object</span>&gt;</span>[]&gt;</span>) <span class=\"pl-k\">ConcurrentConveyor</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>concat(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(createConveyorArray(remainder, queueCount <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, queueSize)),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(createConveyorArray(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        downstreamParallelism <span class=\"pl-k\">-</span> remainder, <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>max(<span class=\"pl-c1\">1</span>, queueCount), queueSize</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                )))<span class=\"pl-k\">.</span>toArray((<span class=\"pl-k\">IntFunction&lt;<span class=\"pl-k\">ConcurrentConveyor&lt;<span class=\"pl-smi\">Object</span>&gt;</span>[]&gt;</span>) <span class=\"pl-k\">ConcurrentConveyor</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-12-11T11:06:45Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -472,13 +474,35 @@ private OutboundEdgeStream createOutboundEdgeStream(EdgeDef edge,\n                 throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n             }\n \n-            // there is only one producer per consumer for a one to many edge, so queueCount is always 1\n             ConcurrentConveyor<Object>[] localConveyors = localConveyorMap.computeIfAbsent(edge.edgeId(),\n-                    e -> createConveyorArray(downstreamParallelism, 1, queueSize));\n-            return IntStream.range(0, downstreamParallelism)\n-                            .filter(i -> i % upstreamParallelism == processorIndex)\n-                            .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n-                            .toArray(OutboundCollector[]::new);\n+                    e -> {\n+                        int queueCount = upstreamParallelism / downstreamParallelism;\n+                        int remainder = upstreamParallelism % downstreamParallelism;\n+                        if (remainder == 0) {\n+                            return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n+                        } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n+                            return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n+                        } else {\n+                            return Stream.concat(\n+                                    Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n+                                    Arrays.stream(createConveyorArray(\n+                                            downstreamParallelism - remainder, queueCount, queueSize\n+                                    ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n+                        }", "originalCommit": "4451ea055497f722b6acaba68907a43912ac1597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTM1NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750#discussion_r540869355", "body": "```suggestion\r\n                return IntStream.range(0, downstreamParallelism)\r\n                        .filter(i -> i % upstreamParallelism == processorIndex % downstreamParallelism)\r\n                        .mapToObj(i -> new ConveyorCollector(localConveyors[i], processorIndex / downstreamParallelism, null))\r\n                        .toArray(OutboundCollector[]::new);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (downstreamParallelism >= upstreamParallelism) {\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> i % upstreamParallelism == processorIndex)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> processorIndex % downstreamParallelism == i)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i],\n          \n          \n            \n                                            processorIndex / downstreamParallelism, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);\n          \n          \n            \n                        }\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> i % upstreamParallelism == processorIndex % downstreamParallelism)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i], processorIndex / downstreamParallelism, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (downstreamParallelism <span class=\"pl-k\">&gt;=</span> upstreamParallelism) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span> <span class=\"pl-smi\">IntStream</span><span class=\"pl-k\">.</span>range(<span class=\"pl-c1\">0</span>, downstreamParallelism)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .filter(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> i <span class=\"pl-k\">%</span> upstreamParallelism <span class=\"pl-k\">==</span> processorIndex)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .mapToObj(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ConveyorCollector</span>(localConveyors[i], <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">null</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .toArray(<span class=\"pl-k\">OutboundCollector</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span> <span class=\"pl-smi\">IntStream</span><span class=\"pl-k\">.</span>range(<span class=\"pl-c1\">0</span>, downstreamParallelism)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .filter(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> processorIndex <span class=\"pl-k\">%</span> downstreamParallelism <span class=\"pl-k\">==</span> i)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .mapToObj(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ConveyorCollector</span>(localConveyors[i],</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                processorIndex <span class=\"pl-k\">/</span> downstreamParallelism, <span class=\"pl-c1\">null</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .toArray(<span class=\"pl-k\">OutboundCollector</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">return</span> <span class=\"pl-smi\">IntStream</span><span class=\"pl-k\">.</span>range(<span class=\"pl-c1\">0</span>, downstreamParallelism)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .filter(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> i <span class=\"pl-k\">%</span> upstreamParallelism <span class=\"pl-k\">==</span> processorIndex <span class=\"pl-k\">%</span> downstreamParallelism)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .mapToObj(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ConveyorCollector</span>(localConveyors[i], processorIndex <span class=\"pl-k\">/</span> downstreamParallelism, <span class=\"pl-c1\">null</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .toArray(<span class=\"pl-k\">OutboundCollector</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-12-11T11:07:04Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -472,13 +474,35 @@ private OutboundEdgeStream createOutboundEdgeStream(EdgeDef edge,\n                 throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n             }\n \n-            // there is only one producer per consumer for a one to many edge, so queueCount is always 1\n             ConcurrentConveyor<Object>[] localConveyors = localConveyorMap.computeIfAbsent(edge.edgeId(),\n-                    e -> createConveyorArray(downstreamParallelism, 1, queueSize));\n-            return IntStream.range(0, downstreamParallelism)\n-                            .filter(i -> i % upstreamParallelism == processorIndex)\n-                            .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n-                            .toArray(OutboundCollector[]::new);\n+                    e -> {\n+                        int queueCount = upstreamParallelism / downstreamParallelism;\n+                        int remainder = upstreamParallelism % downstreamParallelism;\n+                        if (remainder == 0) {\n+                            return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n+                        } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n+                            return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n+                        } else {\n+                            return Stream.concat(\n+                                    Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n+                                    Arrays.stream(createConveyorArray(\n+                                            downstreamParallelism - remainder, queueCount, queueSize\n+                                    ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n+                        }\n+                    });\n+\n+            if (downstreamParallelism >= upstreamParallelism) {\n+                return IntStream.range(0, downstreamParallelism)\n+                        .filter(i -> i % upstreamParallelism == processorIndex)\n+                        .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n+                        .toArray(OutboundCollector[]::new);\n+            } else {\n+                return IntStream.range(0, downstreamParallelism)\n+                        .filter(i -> processorIndex % downstreamParallelism == i)\n+                        .mapToObj(i -> new ConveyorCollector(localConveyors[i],\n+                                processorIndex / downstreamParallelism, null))\n+                        .toArray(OutboundCollector[]::new);\n+            }", "originalCommit": "4451ea055497f722b6acaba68907a43912ac1597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "61be919b8f9b3609bc6822387ed8dda172537b09", "url": "https://github.com/hazelcast/hazelcast-jet/commit/61be919b8f9b3609bc6822387ed8dda172537b09", "message": "Merge remote-tracking branch 'upstream/master' into fix-2744", "committedDate": "2020-12-11T11:31:38Z", "type": "commit"}, {"oid": "2a94e7b90f314004f4f3e9f3f8ff3b89609f50cc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2a94e7b90f314004f4f3e9f3f8ff3b89609f50cc", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>", "committedDate": "2020-12-11T11:34:07Z", "type": "commit"}, {"oid": "f3965e0da009cf038ab6caa3804b0e2fab04d21a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f3965e0da009cf038ab6caa3804b0e2fab04d21a", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>", "committedDate": "2020-12-11T11:34:16Z", "type": "commit"}, {"oid": "28f5aa9a2ac79a286ce1b5106963934e307c6464", "url": "https://github.com/hazelcast/hazelcast-jet/commit/28f5aa9a2ac79a286ce1b5106963934e307c6464", "message": "Merge branch 'fix-2744' of https://github.com/ufukyilmaz/hazelcast-jet into fix-2744", "committedDate": "2020-12-11T11:37:41Z", "type": "commit"}, {"oid": "b4cf3e2786c9c506d8771410ebabd844ac1eff5f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b4cf3e2786c9c506d8771410ebabd844ac1eff5f", "message": "Fix checkstyle: line length", "committedDate": "2020-12-11T11:41:00Z", "type": "commit"}]}