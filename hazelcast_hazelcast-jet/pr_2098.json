{"pr_number": 2098, "pr_title": "[003] Elasticsearch connector", "pr_author": "frant-hartm", "pr_createdAt": "2020-03-26T08:52:50Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2098", "timeline": [{"oid": "5444732b5de7db15f747a36e30d119bcc3e9e5c0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5444732b5de7db15f747a36e30d119bcc3e9e5c0", "message": "Commit elasticsearch modules from contrib repository", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "87f33b87a25a92cc22914aad315902c8c23d12ad", "url": "https://github.com/hazelcast/hazelcast-jet/commit/87f33b87a25a92cc22914aad315902c8c23d12ad", "message": "Create poms for elasticsearch modules", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "6cd881fb9aba0558b6524b215c4471c022ea4290", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6cd881fb9aba0558b6524b215c4471c022ea4290", "message": "Improve Elasticsearch connector", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "fbf60935b7426836ee5c447eb575cda37094262f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fbf60935b7426836ee5c447eb575cda37094262f", "message": "Remove gradle configs", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "5b9f015136c31ed101358deca7a1dc4a3738a437", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5b9f015136c31ed101358deca7a1dc4a3738a437", "message": "Fix checkstyle", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "98e7c707f3e75bcc4fa58224adc273a732a9f211", "url": "https://github.com/hazelcast/hazelcast-jet/commit/98e7c707f3e75bcc4fa58224adc273a732a9f211", "message": "Reorganize test code\n\nExtract common elastic test code to separate base class for reuse\nRename to follow Clazz -> ClazzTest naming convention for easier navigation in IDE", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "e949bfd90f8a99dcf295c6c57eea6ae061c95198", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e949bfd90f8a99dcf295c6c57eea6ae061c95198", "message": "Add javadocs, more polishing, more tests", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "b5b45f653cc3975ea07a7be282ce4c9257b59430", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b5b45f653cc3975ea07a7be282ce4c9257b59430", "message": "Fix parent pom location", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "ebd653ffef0dabf3b68af79bd71560e0f8b4d8d1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ebd653ffef0dabf3b68af79bd71560e0f8b4d8d1", "message": "Temporarily disable elasticsearch 5 and 6 modules", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "51a9967d7bd02e5d5c1d4e99522f47d63725a5fe", "url": "https://github.com/hazelcast/hazelcast-jet/commit/51a9967d7bd02e5d5c1d4e99522f47d63725a5fe", "message": "Build test jar for the elasticsearch module so we can reuse some testing code", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "43801cefa29ee5e1391fb7633ab029031f776a43", "url": "https://github.com/hazelcast/hazelcast-jet/commit/43801cefa29ee5e1391fb7633ab029031f776a43", "message": "Fix checkstyle in tests", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "8c29ff81e3ef626416f92fc9f35550bce7d81ed1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8c29ff81e3ef626416f92fc9f35550bce7d81ed1", "message": "Fix spotbugs issues", "committedDate": "2020-03-24T21:50:41Z", "type": "commit"}, {"oid": "3a80782de0fe4f55d3e1346c0a7096ab367fda51", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3a80782de0fe4f55d3e1346c0a7096ab367fda51", "message": "Use ImmutableMap from declared dependency, not shaded", "committedDate": "2020-03-26T08:42:40Z", "type": "commit"}, {"oid": "3a2b7b02a80a58c6d9d5b770248f0df8fb70225e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3a2b7b02a80a58c6d9d5b770248f0df8fb70225e", "message": "Add todo", "committedDate": "2020-03-26T08:42:45Z", "type": "commit"}, {"oid": "d73a7ee9e966a4f46ac3d2385073c5ec9cf3b51e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d73a7ee9e966a4f46ac3d2385073c5ec9cf3b51e", "message": "Move test to hazelcast-qe (requires special setup)", "committedDate": "2020-03-26T08:43:10Z", "type": "commit"}, {"oid": "4767463828df683f169002c728fa47db775f21fc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4767463828df683f169002c728fa47db775f21fc", "message": "Relocate package to com.hazelcast.jet.elasticsearch", "committedDate": "2020-03-26T10:18:00Z", "type": "commit"}, {"oid": "41cb3d909093ea1f6f9ca422083fb074ce609602", "url": "https://github.com/hazelcast/hazelcast-jet/commit/41cb3d909093ea1f6f9ca422083fb074ce609602", "message": "Add javadocs, builder, more tests, checkstyle fixes", "committedDate": "2020-03-30T13:37:56Z", "type": "commit"}, {"oid": "fcf07faa3b97000f45d57a124ade9e03c5e69a0b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fcf07faa3b97000f45d57a124ade9e03c5e69a0b", "message": "Examples for Elasticsearch connector", "committedDate": "2020-03-30T13:45:37Z", "type": "commit"}, {"oid": "3123e949a1b3e2ddaa1c4a62a533a7dc73defe21", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3123e949a1b3e2ddaa1c4a62a533a7dc73defe21", "message": "Merge branch 'master' into elastic", "committedDate": "2020-03-30T18:55:26Z", "type": "commit"}, {"oid": "4b36f067cc2e1ede9121bc8f47e697b5b5598a62", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4b36f067cc2e1ede9121bc8f47e697b5b5598a62", "message": "Add documentation for Elasticsearch connector", "committedDate": "2020-03-30T21:39:29Z", "type": "commit"}, {"oid": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fb1b593a7773237a2ef4546e36f2eab6596f9911", "message": "Commit", "committedDate": "2020-03-31T07:19:57Z", "type": "commit"}, {"oid": "88c926e2497270e3c3a1d90502c26dc4d3d876b8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/88c926e2497270e3c3a1d90502c26dc4d3d876b8", "message": "Merge branch 'master' into elastic", "committedDate": "2020-04-01T10:45:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyOTg2Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402629866", "body": "we can move this as a utility method to `ElasticSupport`", "bodyText": "we can move this as a utility method to ElasticSupport", "bodyHTML": "<p dir=\"auto\">we can move this as a utility method to <code>ElasticSupport</code></p>", "author": "gurbuzali", "createdAt": "2020-04-02T22:21:43Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch;\n+\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.config.JetConfig;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.junit.After;\n+\n+/**\n+ * Test running single Jet member locally and Elastic in docker\n+ */\n+public class LocalElasticsearchSinkTest extends CommonElasticsearchSinksTest {\n+\n+    private JetTestInstanceFactory factory = new JetTestInstanceFactory();\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        factory.terminateAll();\n+    }\n+\n+    protected SupplierEx<RestHighLevelClient> elasticClientSupplier() {", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1OTk3MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404059971", "bodyText": "Moved the code to create the client. Though the method elasticClientSupplier() in BaseElasticsearchTest stays as it is used to return client for particular environment (e.g. in AuthElasticsearchSourcesTest the docker image and client are configured differently).", "author": "frant-hartm", "createdAt": "2020-04-06T12:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyOTg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java\nindex c8ee59679..f2bcc6bf1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java\n", "chunk": "@@ -37,13 +33,6 @@ public class LocalElasticsearchSinkTest extends CommonElasticsearchSinksTest {\n         factory.terminateAll();\n     }\n \n-    protected SupplierEx<RestHighLevelClient> elasticClientSupplier() {\n-        String address = ElasticSupport.elastic.get().getHttpHostAddress();\n-        return () -> new RestHighLevelClient(\n-                RestClient.builder(HttpHost.create(address))\n-        );\n-    }\n-\n     @Override\n     protected JetInstance createJetInstance() {\n         // This starts very quickly, no need to cache the instance\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java\ndeleted file mode 100644\nindex f2bcc6bf1..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elasticsearch/LocalElasticsearchSinkTest.java\n+++ /dev/null\n", "chunk": "@@ -1,42 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch;\n-\n-import com.hazelcast.jet.JetInstance;\n-import com.hazelcast.jet.JetTestInstanceFactory;\n-import com.hazelcast.jet.config.JetConfig;\n-import org.junit.After;\n-\n-/**\n- * Test running single Jet member locally and Elastic in docker\n- */\n-public class LocalElasticsearchSinkTest extends CommonElasticsearchSinksTest {\n-\n-    private JetTestInstanceFactory factory = new JetTestInstanceFactory();\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        factory.terminateAll();\n-    }\n-\n-    @Override\n-    protected JetInstance createJetInstance() {\n-        // This starts very quickly, no need to cache the instance\n-        return factory.newMember(new JetConfig());\n-    }\n-\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0MDcxOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402640718", "body": "how about changing this to `SupplierEx<? extends RestClientBuilder> clientBuilderSupport`. This will simplify the client creation for user and remove the necessity for a `destroyFn`", "bodyText": "how about changing this to SupplierEx<? extends RestClientBuilder> clientBuilderSupport. This will simplify the client creation for user and remove the necessity for a destroyFn", "bodyHTML": "<p dir=\"auto\">how about changing this to <code>SupplierEx&lt;? extends RestClientBuilder&gt; clientBuilderSupport</code>. This will simplify the client creation for user and remove the necessity for a <code>destroyFn</code></p>", "author": "gurbuzali", "createdAt": "2020-04-02T22:50:21Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticsearchSinkBuilder<T> implements Serializable {\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java\nindex 46a42b64d..6f947856c 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java\n", "chunk": "@@ -54,6 +54,7 @@ public class ElasticsearchSinkBuilder<T> implements Serializable {\n     private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n     private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n \n     /**\n      * Set the user-friendly source name for this sink\n", "next_change": {"commit": "ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nsimilarity index 90%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 6f947856c..f25514e21 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -62,7 +62,7 @@ public class ElasticsearchSinkBuilder<T> implements Serializable {\n      * @param sinkName user-friendly sink name\n      */\n     @Nonnull\n-    public ElasticsearchSinkBuilder<T> name(@Nonnull String sinkName) {\n+    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n         this.name = requireNonNull(sinkName, \"sinkName\");\n         return this;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0OTAyMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402649021", "body": "typo `resuls` -> `results`", "bodyText": "typo resuls -> results", "bodyHTML": "<p dir=\"auto\">typo <code>resuls</code> -&gt; <code>results</code></p>", "author": "gurbuzali", "createdAt": "2020-04-02T23:14:17Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elasticsearch.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticsearchSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> name(String sourceName) {\n+        this.name = sourceName;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticsearchSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all resuls from a single scroll,", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java\nindex 958117af9..4c726ecd9 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java\n", "chunk": "@@ -216,7 +218,7 @@ public class ElasticsearchSourceBuilder<T> implements Serializable {\n      * <p>\n      * See {@link SearchRequest#scroll(String)}\n      *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all resuls from a single scroll,\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n      *                        default value 1m\n      */\n     @Nonnull\n", "next_change": {"commit": "ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nsimilarity index 86%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 4c726ecd9..ae440f653 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -222,7 +222,7 @@ public class ElasticsearchSourceBuilder<T> implements Serializable {\n      *                        default value 1m\n      */\n     @Nonnull\n-    public ElasticsearchSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n         this.scrollKeepAlive = scrollKeepAlive;\n         return this;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MDc4Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402650787", "body": "+1 to use `Elastic` instead of `Elasticsearch` where applicable. even for the extension-name maybe ?", "bodyText": "+1 to use Elastic instead of Elasticsearch where applicable. even for the extension-name maybe ?", "bodyHTML": "<p dir=\"auto\">+1 to use <code>Elastic</code> instead of <code>Elasticsearch</code> where applicable. even for the extension-name maybe ?</p>", "author": "gurbuzali", "createdAt": "2020-04-02T23:19:45Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticsearchSourceBuilder}\n+ * <p>\n+ * TODO maybe rename to ElasticSources - Elastic is the company name, but is also used interchangeably for elasticsearch", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\ndeleted file mode 100644\nindex 694985a40..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\n+++ /dev/null\n", "chunk": "@@ -1,213 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import org.apache.http.HttpHost;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-\n-/**\n- * Provides factory methods for Elasticsearch sources.\n- * Alternatively you can use {@link ElasticsearchSourceBuilder}\n- * <p>\n- * TODO maybe rename to ElasticSources - Elastic is the company name, but is also used interchangeably for elasticsearch\n- * it would make the API bit nicer to use, shorter in places etc.. same for {@link #elasticsearch()} methods\n- *\n- * @since 4.1\n- */\n-public final class ElasticsearchSources {\n-\n-    private static final String DEFAULT_SCROLL_TIMEOUT = \"60s\";\n-    private static final int DEFAULT_PORT = 9200;\n-\n-    private ElasticsearchSources() {\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * <p>\n-     * Useful for quick prototyping. See other methods {@link #elasticsearch(String, SupplierEx, SupplierEx)}\n-     * and {@link #builder()}\n-     */\n-    public static BatchSource<String> elasticsearch() {\n-        return elasticsearch(() -> new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-        ));\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Queries all indexes for all documents.\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static BatchSource<String> elasticsearch(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elasticsearch(clientSupplier, SearchHit::getSourceAsString);\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static <T> BatchSource<T> elasticsearch(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elasticsearch(() -> new RestHighLevelClient(\n-                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-                ),\n-                mapHitFn\n-        );\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n-     *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elasticsearch(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elasticsearch(clientSupplier, SearchRequest::new, mapHitFn);\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elasticsearch(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n-    ) {\n-        return ElasticsearchSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Returns {@link ElasticsearchSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n-     */\n-    public static <T> ElasticsearchSourceBuilder<T> builder() {\n-        return new ElasticsearchSourceBuilder<>();\n-    }\n-\n-    /**\n-     * Creates a source which queries objects using the specified Elasticsearch\n-     * client and the specified request supplier using scrolling method.\n-     *\n-     * @param name                  name of the source\n-     * @param clientSupplier        Elasticsearch REST client supplier\n-     * @param searchRequestSupplier search request supplier\n-     * @param scrollTimeout         scroll keep alive time\n-     * @param mapHitFn              maps search hits to output items\n-     * @param optionsFn             obtains {@link RequestOptions} for each request\n-     * @param destroyFn             called upon completion to release any resource\n-     * @param <T>                   type of items emitted downstream\n-     */\n-    @Deprecated // TODO keep this for backward compatibility?\n-    // taken from original elastic source, now superseded by the builder\n-    public static <T> BatchSource<T> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull String scrollTimeout,\n-            @Nonnull FunctionEx<SearchHit, T> mapHitFn,\n-            @Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-            @Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn\n-    ) {\n-        return ElasticsearchSources.<T>builder()\n-                .name(name)\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .scrollKeepAlive(scrollTimeout)\n-                .mapHitFn(mapHitFn)\n-                .optionsFn(optionsFn)\n-                .destroyFn(destroyFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, SupplierEx,\n-     * String, FunctionEx, FunctionEx, ConsumerEx)}.\n-     * Uses {@link #DEFAULT_SCROLL_TIMEOUT} for scroll timeout and {@link\n-     * RequestOptions#DEFAULT}, emits string representation of items using\n-     * {@link SearchHit#getSourceAsString()} and closes the {@link\n-     * RestHighLevelClient} upon completion.\n-     */\n-    @Deprecated // TODO keep this for backward compatibility?\n-    // also not sure if providing custom source name is common, doestn' seem like it is unless you have more than 1\n-    public static BatchSource<String> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier\n-    ) {\n-        return elasticsearch(name, clientSupplier, searchRequestSupplier, DEFAULT_SCROLL_TIMEOUT,\n-                SearchHit::getSourceAsString, request -> RequestOptions.DEFAULT, RestHighLevelClient::close);\n-    }\n-\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, SupplierEx)}.\n-     * Rest client is configured with basic authentication.\n-     */\n-    public static BatchSource<String> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull String username,\n-            @Nullable String password,\n-            @Nonnull String hostname,\n-            int port,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier\n-    ) {\n-        return elasticsearch(name, () -> ElasticsearchSinks.buildClient(username, password, hostname, port),\n-                searchRequestSupplier);\n-    }\n-\n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(@Nonnull String username,\n-                                             @Nullable String password,\n-                                             @Nonnull String hostname,\n-                                             int port) {\n-        return ElasticsearchSinks.buildClient(username, password, hostname, port);\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MTk0OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402651948", "body": "I think these deprecated methods are not necessary, wdyt @eminn, @cangencer ?", "bodyText": "I think these deprecated methods are not necessary, wdyt @eminn, @cangencer ?", "bodyHTML": "<p dir=\"auto\">I think these deprecated methods are not necessary, wdyt <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/eminn/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eminn\">@eminn</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cangencer/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cangencer\">@cangencer</a> ?</p>", "author": "gurbuzali", "createdAt": "2020-04-02T23:23:31Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticsearchSourceBuilder}\n+ * <p>\n+ * TODO maybe rename to ElasticSources - Elastic is the company name, but is also used interchangeably for elasticsearch\n+ * it would make the API bit nicer to use, shorter in places etc.. same for {@link #elasticsearch()} methods\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticsearchSources {\n+\n+    private static final String DEFAULT_SCROLL_TIMEOUT = \"60s\";\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticsearchSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elasticsearch(String, SupplierEx, SupplierEx)}\n+     * and {@link #builder()}\n+     */\n+    public static BatchSource<String> elasticsearch() {\n+        return elasticsearch(() -> new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+        ));\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static BatchSource<String> elasticsearch(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elasticsearch(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static <T> BatchSource<T> elasticsearch(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elasticsearch(() -> new RestHighLevelClient(\n+                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+                ),\n+                mapHitFn\n+        );\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elasticsearch(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elasticsearch(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elasticsearch(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+    ) {\n+        return ElasticsearchSources.<T>builder()\n+                .clientSupplier(clientSupplier)\n+                .searchRequestSupplier(searchRequestSupplier)\n+                .mapHitFn(mapHitFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticsearchSourceBuilder}\n+     *\n+     * @param <T> result type returned by the map function\n+     */\n+    public static <T> ElasticsearchSourceBuilder<T> builder() {\n+        return new ElasticsearchSourceBuilder<>();\n+    }\n+\n+    /**\n+     * Creates a source which queries objects using the specified Elasticsearch\n+     * client and the specified request supplier using scrolling method.\n+     *\n+     * @param name                  name of the source\n+     * @param clientSupplier        Elasticsearch REST client supplier\n+     * @param searchRequestSupplier search request supplier\n+     * @param scrollTimeout         scroll keep alive time\n+     * @param mapHitFn              maps search hits to output items\n+     * @param optionsFn             obtains {@link RequestOptions} for each request\n+     * @param destroyFn             called upon completion to release any resource\n+     * @param <T>                   type of items emitted downstream\n+     */\n+    @Deprecated // TODO keep this for backward compatibility?", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5NjM3NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402796375", "bodyText": "That's not even the same module anymore. Let's delete them.", "author": "eminn", "createdAt": "2020-04-03T07:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\nindex 694985a40..9e06a86af 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\n", "chunk": "@@ -125,77 +122,6 @@ public final class ElasticsearchSources {\n         return new ElasticsearchSourceBuilder<>();\n     }\n \n-    /**\n-     * Creates a source which queries objects using the specified Elasticsearch\n-     * client and the specified request supplier using scrolling method.\n-     *\n-     * @param name                  name of the source\n-     * @param clientSupplier        Elasticsearch REST client supplier\n-     * @param searchRequestSupplier search request supplier\n-     * @param scrollTimeout         scroll keep alive time\n-     * @param mapHitFn              maps search hits to output items\n-     * @param optionsFn             obtains {@link RequestOptions} for each request\n-     * @param destroyFn             called upon completion to release any resource\n-     * @param <T>                   type of items emitted downstream\n-     */\n-    @Deprecated // TODO keep this for backward compatibility?\n-    // taken from original elastic source, now superseded by the builder\n-    public static <T> BatchSource<T> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull String scrollTimeout,\n-            @Nonnull FunctionEx<SearchHit, T> mapHitFn,\n-            @Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-            @Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn\n-    ) {\n-        return ElasticsearchSources.<T>builder()\n-                .name(name)\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .scrollKeepAlive(scrollTimeout)\n-                .mapHitFn(mapHitFn)\n-                .optionsFn(optionsFn)\n-                .destroyFn(destroyFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, SupplierEx,\n-     * String, FunctionEx, FunctionEx, ConsumerEx)}.\n-     * Uses {@link #DEFAULT_SCROLL_TIMEOUT} for scroll timeout and {@link\n-     * RequestOptions#DEFAULT}, emits string representation of items using\n-     * {@link SearchHit#getSourceAsString()} and closes the {@link\n-     * RestHighLevelClient} upon completion.\n-     */\n-    @Deprecated // TODO keep this for backward compatibility?\n-    // also not sure if providing custom source name is common, doestn' seem like it is unless you have more than 1\n-    public static BatchSource<String> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier\n-    ) {\n-        return elasticsearch(name, clientSupplier, searchRequestSupplier, DEFAULT_SCROLL_TIMEOUT,\n-                SearchHit::getSourceAsString, request -> RequestOptions.DEFAULT, RestHighLevelClient::close);\n-    }\n-\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, SupplierEx)}.\n-     * Rest client is configured with basic authentication.\n-     */\n-    public static BatchSource<String> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull String username,\n-            @Nullable String password,\n-            @Nonnull String hostname,\n-            int port,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier\n-    ) {\n-        return elasticsearch(name, () -> ElasticsearchSinks.buildClient(username, password, hostname, port),\n-                searchRequestSupplier);\n-    }\n-\n     /**\n      * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n      * <p>\n", "next_change": {"commit": "ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nsimilarity index 73%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 9e06a86af..a12164844 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/ElasticsearchSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -114,12 +110,12 @@ public final class ElasticsearchSources {\n     }\n \n     /**\n-     * Returns {@link ElasticsearchSourceBuilder}\n+     * Returns {@link ElasticSourceBuilder}\n      *\n      * @param <T> result type returned by the map function\n      */\n-    public static <T> ElasticsearchSourceBuilder<T> builder() {\n-        return new ElasticsearchSourceBuilder<>();\n+    public static <T> ElasticSourceBuilder<T> builder() {\n+        return new ElasticSourceBuilder<>();\n     }\n \n     /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MjIyNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402652225", "body": "we can remove this, same as default implementation", "bodyText": "we can remove this, same as default implementation", "bodyHTML": "<p dir=\"auto\">we can remove this, same as default implementation</p>", "author": "gurbuzali", "createdAt": "2020-04-02T23:24:24Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.internal.json.Json;\n+import com.hazelcast.internal.json.JsonArray;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.json.JsonValue;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n+import com.hazelcast.jet.elasticsearch.impl.Shard.Prirep;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.Optional.empty;\n+import static java.util.logging.Level.FINER;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private transient ILogger logger;\n+\n+    @Nonnull\n+    private final ElasticsearchSourceBuilder<T> builder;\n+\n+    private Map<String, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n+        this.builder = builder;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Map<String, String> getTags() {", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43708a39318f27d70c1e5b357cf975c1718bdb58", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex 35b0f7a89..6174232a7 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -74,16 +56,10 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n         this.builder = builder;\n     }\n \n-    @Nonnull\n-    @Override\n-    public Map<String, String> getTags() {\n-        return emptyMap();\n-    }\n-\n     @Override\n     public int preferredLocalParallelism() {\n-        if (builder.slicing() || builder.coLocatedReading()) {\n-            return Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+        if (builder.coLocatedReading() || builder.slicing()) {\n+            return builder.preferredLocalParallelism();\n         } else {\n             return 1;\n         }\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\ndeleted file mode 100644\nindex 6174232a7..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,141 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch.impl;\n-\n-import com.hazelcast.cluster.Address;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.core.ProcessorMetaSupplier;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.core.processor.Processors;\n-import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-\n-import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptyMap;\n-import static java.util.Collections.nCopies;\n-import static java.util.stream.Collectors.groupingBy;\n-import static java.util.stream.Collectors.toSet;\n-\n-public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Nonnull\n-    private final ElasticsearchSourceBuilder<T> builder;\n-\n-    private Map<String, List<Shard>> assignedShards;\n-    private transient Address ownerAddress;\n-\n-    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n-        this.builder = builder;\n-    }\n-\n-    @Override\n-    public int preferredLocalParallelism() {\n-        if (builder.coLocatedReading() || builder.slicing()) {\n-            return builder.preferredLocalParallelism();\n-        } else {\n-            return 1;\n-        }\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) throws Exception {\n-        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n-        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n-\n-        if (builder.coLocatedReading()) {\n-            Set<String> addresses = context\n-                    .jetInstance().getCluster().getMembers().stream()\n-                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toSet());\n-            assignedShards = assignShards(shards, addresses);\n-        } else {\n-            ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(context.jobId()).getOwner().getAddress();\n-            assignedShards = emptyMap();\n-        }\n-\n-    }\n-\n-    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n-        Map<String, List<Shard>> nodeCandidates = shards.stream()\n-                                                        .collect(groupingBy(Shard::getIp));\n-        Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n-\n-        if (!addresses.containsAll(nodeCandidates.keySet())) {\n-            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n-                    \"shards=\" + nodeCandidates.keySet() +\n-                    \", Jet nodes=\" + addresses);\n-        }\n-\n-        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n-        Set<String> assignedShards = new HashSet<>();\n-\n-        int iterations = (uniqueShards + addresses.size() - 1) / addresses.size(); // Same as Math.ceil for float div\n-        for (int i = 0; i < iterations; i++) {\n-            for (String address : addresses) {\n-                List<Shard> thisNodeCandidates = nodeCandidates.getOrDefault(address, emptyList());\n-                if (thisNodeCandidates.isEmpty()) {\n-                    continue;\n-                }\n-                Shard shard = thisNodeCandidates.remove(0);\n-\n-                List<Shard> nodeShards = nodeAssigned.computeIfAbsent(address, (key) -> new ArrayList<>());\n-                nodeShards.add(shard);\n-\n-                nodeCandidates.values().forEach(candidates ->\n-                        candidates.removeIf(next -> next.indexShard().equals(shard.indexShard())));\n-\n-                assignedShards.add(shard.indexShard());\n-            }\n-        }\n-        if (assignedShards.size() != uniqueShards) {\n-            throw new JetException(\"Not all shards have been assigned\");\n-        }\n-        return nodeAssigned;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n-        if (builder.slicing() || builder.coLocatedReading()) {\n-            return address -> {\n-                String ipAddress = uncheckCall(() -> address.getInetAddress().getHostAddress());\n-                List<Shard> shards = assignedShards.getOrDefault(ipAddress, emptyList());\n-                return new ElasticProcessorSupplier<>(builder, shards);\n-            };\n-        } else {\n-            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder, emptyList())\n-                    : count -> nCopies(count, Processors.noopP().get());\n-        }\n-    }\n-\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MTE2Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402661162", "body": "`StringPartitioningStrategy` is unnecessary here, we can directly use `context.jobId()` here even without converting to String", "bodyText": "StringPartitioningStrategy is unnecessary here, we can directly use context.jobId() here even without converting to String", "bodyHTML": "<p dir=\"auto\"><code>StringPartitioningStrategy</code> is unnecessary here, we can directly use <code>context.jobId()</code> here even without converting to String</p>", "author": "gurbuzali", "createdAt": "2020-04-02T23:53:55Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.internal.json.Json;\n+import com.hazelcast.internal.json.JsonArray;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.json.JsonValue;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n+import com.hazelcast.jet.elasticsearch.impl.Shard.Prirep;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.Optional.empty;\n+import static java.util.logging.Level.FINER;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private transient ILogger logger;\n+\n+    @Nonnull\n+    private final ElasticsearchSourceBuilder<T> builder;\n+\n+    private Map<String, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n+        this.builder = builder;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Map<String, String> getTags() {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public int preferredLocalParallelism() {\n+        if (builder.slicing() || builder.coLocatedReading()) {\n+            return Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) throws Exception {\n+        logger = context.logger();\n+\n+        List<Shard> shards = readShards();\n+        if (builder.coLocatedReading()) {\n+            List<String> addresses = context\n+                    .jetInstance().getCluster().getMembers().stream()\n+                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n+                    .collect(toList());\n+            this.assignedShards = assignShards(shards, addresses);\n+        } else {\n+            String key = StringPartitioningStrategy.getPartitionKey(String.valueOf(context.jobId()));", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzMzk3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404433973", "bodyText": "Done.", "author": "frant-hartm", "createdAt": "2020-04-06T22:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MTE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex 35b0f7a89..aeba85c63 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -94,7 +77,9 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n     public void init(@Nonnull Context context) throws Exception {\n         logger = context.logger();\n \n-        List<Shard> shards = readShards();\n+        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n+        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n+\n         if (builder.coLocatedReading()) {\n             List<String> addresses = context\n                     .jetInstance().getCluster().getMembers().stream()\n", "next_change": {"commit": "43708a39318f27d70c1e5b357cf975c1718bdb58", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex aeba85c63..6174232a7 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -75,26 +68,24 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n \n     @Override\n     public void init(@Nonnull Context context) throws Exception {\n-        logger = context.logger();\n-\n         ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n         List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n \n         if (builder.coLocatedReading()) {\n-            List<String> addresses = context\n+            Set<String> addresses = context\n                     .jetInstance().getCluster().getMembers().stream()\n                     .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toList());\n-            this.assignedShards = assignShards(shards, addresses);\n+                    .collect(toSet());\n+            assignedShards = assignShards(shards, addresses);\n         } else {\n-            String key = StringPartitioningStrategy.getPartitionKey(String.valueOf(context.jobId()));\n             ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(key).getOwner().getAddress();\n+                                  .getPartition(context.jobId()).getOwner().getAddress();\n+            assignedShards = emptyMap();\n         }\n \n     }\n \n-    static Map<String, List<Shard>> assignShards(List<Shard> shards, List<String> addresses) {\n+    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n         Map<String, List<Shard>> nodeCandidates = shards.stream()\n                                                         .collect(groupingBy(Shard::getIp));\n         Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\ndeleted file mode 100644\nindex 6174232a7..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,141 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch.impl;\n-\n-import com.hazelcast.cluster.Address;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.core.ProcessorMetaSupplier;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.core.processor.Processors;\n-import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-\n-import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptyMap;\n-import static java.util.Collections.nCopies;\n-import static java.util.stream.Collectors.groupingBy;\n-import static java.util.stream.Collectors.toSet;\n-\n-public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Nonnull\n-    private final ElasticsearchSourceBuilder<T> builder;\n-\n-    private Map<String, List<Shard>> assignedShards;\n-    private transient Address ownerAddress;\n-\n-    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n-        this.builder = builder;\n-    }\n-\n-    @Override\n-    public int preferredLocalParallelism() {\n-        if (builder.coLocatedReading() || builder.slicing()) {\n-            return builder.preferredLocalParallelism();\n-        } else {\n-            return 1;\n-        }\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) throws Exception {\n-        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n-        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n-\n-        if (builder.coLocatedReading()) {\n-            Set<String> addresses = context\n-                    .jetInstance().getCluster().getMembers().stream()\n-                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toSet());\n-            assignedShards = assignShards(shards, addresses);\n-        } else {\n-            ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(context.jobId()).getOwner().getAddress();\n-            assignedShards = emptyMap();\n-        }\n-\n-    }\n-\n-    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n-        Map<String, List<Shard>> nodeCandidates = shards.stream()\n-                                                        .collect(groupingBy(Shard::getIp));\n-        Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n-\n-        if (!addresses.containsAll(nodeCandidates.keySet())) {\n-            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n-                    \"shards=\" + nodeCandidates.keySet() +\n-                    \", Jet nodes=\" + addresses);\n-        }\n-\n-        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n-        Set<String> assignedShards = new HashSet<>();\n-\n-        int iterations = (uniqueShards + addresses.size() - 1) / addresses.size(); // Same as Math.ceil for float div\n-        for (int i = 0; i < iterations; i++) {\n-            for (String address : addresses) {\n-                List<Shard> thisNodeCandidates = nodeCandidates.getOrDefault(address, emptyList());\n-                if (thisNodeCandidates.isEmpty()) {\n-                    continue;\n-                }\n-                Shard shard = thisNodeCandidates.remove(0);\n-\n-                List<Shard> nodeShards = nodeAssigned.computeIfAbsent(address, (key) -> new ArrayList<>());\n-                nodeShards.add(shard);\n-\n-                nodeCandidates.values().forEach(candidates ->\n-                        candidates.removeIf(next -> next.indexShard().equals(shard.indexShard())));\n-\n-                assignedShards.add(shard.indexShard());\n-            }\n-        }\n-        if (assignedShards.size() != uniqueShards) {\n-            throw new JetException(\"Not all shards have been assigned\");\n-        }\n-        return nodeAssigned;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n-        if (builder.slicing() || builder.coLocatedReading()) {\n-            return address -> {\n-                String ipAddress = uncheckCall(() -> address.getInetAddress().getHostAddress());\n-                List<Shard> shards = assignedShards.getOrDefault(ipAddress, emptyList());\n-                return new ElasticProcessorSupplier<>(builder, shards);\n-            };\n-        } else {\n-            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder, emptyList())\n-                    : count -> nCopies(count, Processors.noopP().get());\n-        }\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MzY1NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402663654", "body": "by using `toSet()` here we can remove `new HashSet<>(addresses)` in `assignShards` method", "bodyText": "by using toSet() here we can remove new HashSet<>(addresses) in assignShards method", "bodyHTML": "<p dir=\"auto\">by using <code>toSet()</code> here we can remove <code>new HashSet&lt;&gt;(addresses)</code> in <code>assignShards</code> method</p>", "author": "gurbuzali", "createdAt": "2020-04-03T00:02:17Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.internal.json.Json;\n+import com.hazelcast.internal.json.JsonArray;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.json.JsonValue;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n+import com.hazelcast.jet.elasticsearch.impl.Shard.Prirep;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.Optional.empty;\n+import static java.util.logging.Level.FINER;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private transient ILogger logger;\n+\n+    @Nonnull\n+    private final ElasticsearchSourceBuilder<T> builder;\n+\n+    private Map<String, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n+        this.builder = builder;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Map<String, String> getTags() {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public int preferredLocalParallelism() {\n+        if (builder.slicing() || builder.coLocatedReading()) {\n+            return Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) throws Exception {\n+        logger = context.logger();\n+\n+        List<Shard> shards = readShards();\n+        if (builder.coLocatedReading()) {\n+            List<String> addresses = context\n+                    .jetInstance().getCluster().getMembers().stream()\n+                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n+                    .collect(toList());", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex 35b0f7a89..aeba85c63 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -94,7 +77,9 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n     public void init(@Nonnull Context context) throws Exception {\n         logger = context.logger();\n \n-        List<Shard> shards = readShards();\n+        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n+        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n+\n         if (builder.coLocatedReading()) {\n             List<String> addresses = context\n                     .jetInstance().getCluster().getMembers().stream()\n", "next_change": {"commit": "43708a39318f27d70c1e5b357cf975c1718bdb58", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex aeba85c63..6174232a7 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -75,26 +68,24 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n \n     @Override\n     public void init(@Nonnull Context context) throws Exception {\n-        logger = context.logger();\n-\n         ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n         List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n \n         if (builder.coLocatedReading()) {\n-            List<String> addresses = context\n+            Set<String> addresses = context\n                     .jetInstance().getCluster().getMembers().stream()\n                     .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toList());\n-            this.assignedShards = assignShards(shards, addresses);\n+                    .collect(toSet());\n+            assignedShards = assignShards(shards, addresses);\n         } else {\n-            String key = StringPartitioningStrategy.getPartitionKey(String.valueOf(context.jobId()));\n             ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(key).getOwner().getAddress();\n+                                  .getPartition(context.jobId()).getOwner().getAddress();\n+            assignedShards = emptyMap();\n         }\n \n     }\n \n-    static Map<String, List<Shard>> assignShards(List<Shard> shards, List<String> addresses) {\n+    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n         Map<String, List<Shard>> nodeCandidates = shards.stream()\n                                                         .collect(groupingBy(Shard::getIp));\n         Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\ndeleted file mode 100644\nindex 6174232a7..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,141 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch.impl;\n-\n-import com.hazelcast.cluster.Address;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.core.ProcessorMetaSupplier;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.core.processor.Processors;\n-import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-\n-import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptyMap;\n-import static java.util.Collections.nCopies;\n-import static java.util.stream.Collectors.groupingBy;\n-import static java.util.stream.Collectors.toSet;\n-\n-public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Nonnull\n-    private final ElasticsearchSourceBuilder<T> builder;\n-\n-    private Map<String, List<Shard>> assignedShards;\n-    private transient Address ownerAddress;\n-\n-    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n-        this.builder = builder;\n-    }\n-\n-    @Override\n-    public int preferredLocalParallelism() {\n-        if (builder.coLocatedReading() || builder.slicing()) {\n-            return builder.preferredLocalParallelism();\n-        } else {\n-            return 1;\n-        }\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) throws Exception {\n-        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n-        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n-\n-        if (builder.coLocatedReading()) {\n-            Set<String> addresses = context\n-                    .jetInstance().getCluster().getMembers().stream()\n-                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toSet());\n-            assignedShards = assignShards(shards, addresses);\n-        } else {\n-            ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(context.jobId()).getOwner().getAddress();\n-            assignedShards = emptyMap();\n-        }\n-\n-    }\n-\n-    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n-        Map<String, List<Shard>> nodeCandidates = shards.stream()\n-                                                        .collect(groupingBy(Shard::getIp));\n-        Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n-\n-        if (!addresses.containsAll(nodeCandidates.keySet())) {\n-            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n-                    \"shards=\" + nodeCandidates.keySet() +\n-                    \", Jet nodes=\" + addresses);\n-        }\n-\n-        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n-        Set<String> assignedShards = new HashSet<>();\n-\n-        int iterations = (uniqueShards + addresses.size() - 1) / addresses.size(); // Same as Math.ceil for float div\n-        for (int i = 0; i < iterations; i++) {\n-            for (String address : addresses) {\n-                List<Shard> thisNodeCandidates = nodeCandidates.getOrDefault(address, emptyList());\n-                if (thisNodeCandidates.isEmpty()) {\n-                    continue;\n-                }\n-                Shard shard = thisNodeCandidates.remove(0);\n-\n-                List<Shard> nodeShards = nodeAssigned.computeIfAbsent(address, (key) -> new ArrayList<>());\n-                nodeShards.add(shard);\n-\n-                nodeCandidates.values().forEach(candidates ->\n-                        candidates.removeIf(next -> next.indexShard().equals(shard.indexShard())));\n-\n-                assignedShards.add(shard.indexShard());\n-            }\n-        }\n-        if (assignedShards.size() != uniqueShards) {\n-            throw new JetException(\"Not all shards have been assigned\");\n-        }\n-        return nodeAssigned;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n-        if (builder.slicing() || builder.coLocatedReading()) {\n-            return address -> {\n-                String ipAddress = uncheckCall(() -> address.getInetAddress().getHostAddress());\n-                List<Shard> shards = assignedShards.getOrDefault(ipAddress, emptyList());\n-                return new ElasticProcessorSupplier<>(builder, shards);\n-            };\n-        } else {\n-            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder, emptyList())\n-                    : count -> nCopies(count, Processors.noopP().get());\n-        }\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDkzNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402670936", "body": "What happens if builder has `slicing=true` and `coLocatedReading=true` ? ", "bodyText": "What happens if builder has slicing=true and coLocatedReading=true ?", "bodyHTML": "<p dir=\"auto\">What happens if builder has <code>slicing=true</code> and <code>coLocatedReading=true</code> ?</p>", "author": "gurbuzali", "createdAt": "2020-04-03T00:28:09Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.internal.json.Json;\n+import com.hazelcast.internal.json.JsonArray;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.json.JsonValue;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n+import com.hazelcast.jet.elasticsearch.impl.Shard.Prirep;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.Optional.empty;\n+import static java.util.logging.Level.FINER;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private transient ILogger logger;\n+\n+    @Nonnull\n+    private final ElasticsearchSourceBuilder<T> builder;\n+\n+    private Map<String, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n+        this.builder = builder;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Map<String, String> getTags() {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public int preferredLocalParallelism() {\n+        if (builder.slicing() || builder.coLocatedReading()) {\n+            return Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) throws Exception {\n+        logger = context.logger();\n+\n+        List<Shard> shards = readShards();\n+        if (builder.coLocatedReading()) {\n+            List<String> addresses = context\n+                    .jetInstance().getCluster().getMembers().stream()\n+                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n+                    .collect(toList());\n+            this.assignedShards = assignShards(shards, addresses);\n+        } else {\n+            String key = StringPartitioningStrategy.getPartitionKey(String.valueOf(context.jobId()));\n+            ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n+                                  .getPartition(key).getOwner().getAddress();\n+        }\n+\n+    }\n+\n+    static Map<String, List<Shard>> assignShards(List<Shard> shards, List<String> addresses) {\n+        Map<String, List<Shard>> nodeCandidates = shards.stream().collect(groupingBy(Shard::getIp));\n+        Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n+\n+        if (!nodeCandidates.keySet().equals(new HashSet<>(addresses))) {\n+            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n+                    \"shards=\" + nodeCandidates.keySet() +\n+                    \", Jet nodes=\" + addresses);\n+        }\n+\n+        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n+        Set<String> assignedShards = new HashSet<>();\n+\n+        for (int i = 0; i < (uniqueShards / addresses.size()); i++) {\n+            for (String address : addresses) {\n+                List<Shard> thisNodeCandidates = nodeCandidates.getOrDefault(address, emptyList());\n+                if (thisNodeCandidates.isEmpty()) {\n+                    continue;\n+                }\n+                Shard shard = thisNodeCandidates.remove(0);\n+\n+                List<Shard> nodeShards = nodeAssigned.computeIfAbsent(address, (key) -> new ArrayList<>());\n+                nodeShards.add(shard);\n+\n+                nodeCandidates.values().forEach(candidates ->\n+                        candidates.removeIf(next -> next.indexShard().equals(shard.indexShard())));\n+\n+                assignedShards.add(shard.indexShard());\n+            }\n+        }\n+        if (assignedShards.size() != uniqueShards) {\n+            throw new JetException(\"Not all shards have been assigned assigned\");\n+        }\n+        return nodeAssigned;\n+    }\n+\n+\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    private List<Shard> readShards() throws IOException {\n+        try (RestHighLevelClient client = builder.clientSupplier().get()) {\n+            SearchRequest sr = builder.searchRequestSupplier().get();\n+            Request r = new Request(\"GET\", \"/_cat/shards/\" + String.join(\",\", sr.indices()));\n+            r.addParameter(\"format\", \"json\");\n+            Response res = client.getLowLevelClient().performRequest(r);\n+\n+            try (InputStreamReader reader = new InputStreamReader(res.getEntity().getContent(), UTF_8)) {\n+                JsonArray array = Json.parse(reader).asArray();\n+                List<Shard> shards = new ArrayList<>(array.size());\n+                for (JsonValue value : array) {\n+                    Optional<Shard> shard = convertToShard(value);\n+                    shard.ifPresent(shards::add);\n+                }\n+\n+                if (logger.isFineEnabled()) {\n+                    logger.log(FINER, \"Shards \" + shards);\n+                }\n+                return shards;\n+            }\n+        }\n+    }\n+\n+    private Optional<Shard> convertToShard(JsonValue value) {\n+        JsonObject object = value.asObject();\n+        // TODO IndexShardState.STARTED but this is deeply inside elastic, should we mirror the enum?\n+        if (\"STARTED\".equals(object.get(\"state\").asString())) {\n+            Shard shard = new Shard(\n+                    object.get(\"index\").asString(),\n+                    Integer.parseInt(object.get(\"shard\").asString()),\n+                    Prirep.valueOf(object.get(\"prirep\").asString()),\n+                    Integer.parseInt(object.get(\"docs\").asString()),\n+                    object.get(\"state\").asString(),\n+                    object.get(\"ip\").asString(),\n+                    object.get(\"node\").asString()\n+            );\n+            return Optional.of(shard);\n+        } else {\n+            return empty();\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n+        if (builder.slicing()) {", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzc0Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404423746", "bodyText": "Wanted to ignore / forbid this combination originally, but it might make sense in certain situations.\nSee the updates.", "author": "frant-hartm", "createdAt": "2020-04-06T22:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "4ca25d65001026a4f23b659bd670873ffe023276", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex 35b0f7a89..aeba85c63 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -140,55 +127,11 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n             }\n         }\n         if (assignedShards.size() != uniqueShards) {\n-            throw new JetException(\"Not all shards have been assigned assigned\");\n+            throw new JetException(\"Not all shards have been assigned\");\n         }\n         return nodeAssigned;\n     }\n \n-\n-    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n-    private List<Shard> readShards() throws IOException {\n-        try (RestHighLevelClient client = builder.clientSupplier().get()) {\n-            SearchRequest sr = builder.searchRequestSupplier().get();\n-            Request r = new Request(\"GET\", \"/_cat/shards/\" + String.join(\",\", sr.indices()));\n-            r.addParameter(\"format\", \"json\");\n-            Response res = client.getLowLevelClient().performRequest(r);\n-\n-            try (InputStreamReader reader = new InputStreamReader(res.getEntity().getContent(), UTF_8)) {\n-                JsonArray array = Json.parse(reader).asArray();\n-                List<Shard> shards = new ArrayList<>(array.size());\n-                for (JsonValue value : array) {\n-                    Optional<Shard> shard = convertToShard(value);\n-                    shard.ifPresent(shards::add);\n-                }\n-\n-                if (logger.isFineEnabled()) {\n-                    logger.log(FINER, \"Shards \" + shards);\n-                }\n-                return shards;\n-            }\n-        }\n-    }\n-\n-    private Optional<Shard> convertToShard(JsonValue value) {\n-        JsonObject object = value.asObject();\n-        // TODO IndexShardState.STARTED but this is deeply inside elastic, should we mirror the enum?\n-        if (\"STARTED\".equals(object.get(\"state\").asString())) {\n-            Shard shard = new Shard(\n-                    object.get(\"index\").asString(),\n-                    Integer.parseInt(object.get(\"shard\").asString()),\n-                    Prirep.valueOf(object.get(\"prirep\").asString()),\n-                    Integer.parseInt(object.get(\"docs\").asString()),\n-                    object.get(\"state\").asString(),\n-                    object.get(\"ip\").asString(),\n-                    object.get(\"node\").asString()\n-            );\n-            return Optional.of(shard);\n-        } else {\n-            return empty();\n-        }\n-    }\n-\n     @Nonnull\n     @Override\n     public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n", "next_change": {"commit": "43708a39318f27d70c1e5b357cf975c1718bdb58", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\nindex aeba85c63..6174232a7 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n", "chunk": "@@ -135,17 +126,14 @@ public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n     @Nonnull\n     @Override\n     public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n-        if (builder.slicing()) {\n-            return address -> new ElasticProcessorSupplier<>(builder);\n-        }\n-        if (builder.coLocatedReading()) {\n+        if (builder.slicing() || builder.coLocatedReading()) {\n             return address -> {\n                 String ipAddress = uncheckCall(() -> address.getInetAddress().getHostAddress());\n-                List<Shard> shards = assignedShards.get(ipAddress);\n+                List<Shard> shards = assignedShards.getOrDefault(ipAddress, emptyList());\n                 return new ElasticProcessorSupplier<>(builder, shards);\n             };\n         } else {\n-            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder)\n+            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder, emptyList())\n                     : count -> nCopies(count, Processors.noopP().get());\n         }\n     }\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\ndeleted file mode 100644\nindex 6174232a7..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/ElasticProcessorMetaSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,141 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch.impl;\n-\n-import com.hazelcast.cluster.Address;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.core.ProcessorMetaSupplier;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.core.processor.Processors;\n-import com.hazelcast.jet.elasticsearch.ElasticsearchSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import com.hazelcast.partition.strategy.StringPartitioningStrategy;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-\n-import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptyMap;\n-import static java.util.Collections.nCopies;\n-import static java.util.stream.Collectors.groupingBy;\n-import static java.util.stream.Collectors.toSet;\n-\n-public class ElasticProcessorMetaSupplier<T> implements ProcessorMetaSupplier {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Nonnull\n-    private final ElasticsearchSourceBuilder<T> builder;\n-\n-    private Map<String, List<Shard>> assignedShards;\n-    private transient Address ownerAddress;\n-\n-    public ElasticProcessorMetaSupplier(@Nonnull ElasticsearchSourceBuilder<T> builder) {\n-        this.builder = builder;\n-    }\n-\n-    @Override\n-    public int preferredLocalParallelism() {\n-        if (builder.coLocatedReading() || builder.slicing()) {\n-            return builder.preferredLocalParallelism();\n-        } else {\n-            return 1;\n-        }\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) throws Exception {\n-        ElasticCatClient catClient = new ElasticCatClient(builder.clientSupplier().get().getLowLevelClient());\n-        List<Shard> shards = catClient.shards(builder.searchRequestSupplier().get().indices());\n-\n-        if (builder.coLocatedReading()) {\n-            Set<String> addresses = context\n-                    .jetInstance().getCluster().getMembers().stream()\n-                    .map(m -> uncheckCall((() -> m.getAddress().getInetAddress().getHostAddress())))\n-                    .collect(toSet());\n-            assignedShards = assignShards(shards, addresses);\n-        } else {\n-            ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n-                                  .getPartition(context.jobId()).getOwner().getAddress();\n-            assignedShards = emptyMap();\n-        }\n-\n-    }\n-\n-    static Map<String, List<Shard>> assignShards(Collection<Shard> shards, Collection<String> addresses) {\n-        Map<String, List<Shard>> nodeCandidates = shards.stream()\n-                                                        .collect(groupingBy(Shard::getIp));\n-        Map<String, List<Shard>> nodeAssigned = new HashMap<>();\n-\n-        if (!addresses.containsAll(nodeCandidates.keySet())) {\n-            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n-                    \"shards=\" + nodeCandidates.keySet() +\n-                    \", Jet nodes=\" + addresses);\n-        }\n-\n-        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n-        Set<String> assignedShards = new HashSet<>();\n-\n-        int iterations = (uniqueShards + addresses.size() - 1) / addresses.size(); // Same as Math.ceil for float div\n-        for (int i = 0; i < iterations; i++) {\n-            for (String address : addresses) {\n-                List<Shard> thisNodeCandidates = nodeCandidates.getOrDefault(address, emptyList());\n-                if (thisNodeCandidates.isEmpty()) {\n-                    continue;\n-                }\n-                Shard shard = thisNodeCandidates.remove(0);\n-\n-                List<Shard> nodeShards = nodeAssigned.computeIfAbsent(address, (key) -> new ArrayList<>());\n-                nodeShards.add(shard);\n-\n-                nodeCandidates.values().forEach(candidates ->\n-                        candidates.removeIf(next -> next.indexShard().equals(shard.indexShard())));\n-\n-                assignedShards.add(shard.indexShard());\n-            }\n-        }\n-        if (assignedShards.size() != uniqueShards) {\n-            throw new JetException(\"Not all shards have been assigned\");\n-        }\n-        return nodeAssigned;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n-        if (builder.slicing() || builder.coLocatedReading()) {\n-            return address -> {\n-                String ipAddress = uncheckCall(() -> address.getInetAddress().getHostAddress());\n-                List<Shard> shards = assignedShards.getOrDefault(ipAddress, emptyList());\n-                return new ElasticProcessorSupplier<>(builder, shards);\n-            };\n-        } else {\n-            return address -> address.equals(ownerAddress) ? new ElasticProcessorSupplier<>(builder, emptyList())\n-                    : count -> nCopies(count, Processors.noopP().get());\n-        }\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MTgwOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r402671808", "body": "do we need all of these fields ? looks like some of them are not used, we keep them for debug purposes ?", "bodyText": "do we need all of these fields ? looks like some of them are not used, we keep them for debug purposes ?", "bodyHTML": "<p dir=\"auto\">do we need all of these fields ? looks like some of them are not used, we keep them for debug purposes ?</p>", "author": "gurbuzali", "createdAt": "2020-04-03T00:31:09Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/Shard.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elasticsearch.impl;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+class Shard implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String index;\n+    private final int shard;\n+    private final Prirep prirep;\n+    private final int docs;\n+    private final String state;\n+    private final String ip;\n+    private final String node;\n+\n+    Shard(@Nonnull String index, int shard, @Nonnull Prirep prirep, int docs,\n+                 @Nonnull String state, @Nonnull String ip, @Nonnull String node) {\n+        this.index = index;\n+        this.shard = shard;\n+        this.prirep = prirep;\n+        this.docs = docs;\n+        this.state = state;\n+        this.ip = ip;\n+        this.node = node;\n+    }\n+\n+    public String indexShard() {\n+        return index + \"-\" + shard;\n+    }\n+    public String getIndex() {\n+        return index;\n+    }\n+\n+    public int getShard() {\n+        return shard;\n+    }\n+\n+    public Prirep getPrirep() {\n+        return prirep;\n+    }\n+\n+    public int getDocs() {", "originalCommit": "fb1b593a7773237a2ef4546e36f2eab6596f9911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzgzOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404423839", "bodyText": "Yes, they are useful for debugging.", "author": "frant-hartm", "createdAt": "2020-04-06T22:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MTgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/Shard.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/Shard.java\ndeleted file mode 100644\nindex e2e328fa9..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elasticsearch/impl/Shard.java\n+++ /dev/null\n", "chunk": "@@ -1,92 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elasticsearch.impl;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-class Shard implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private final String index;\n-    private final int shard;\n-    private final Prirep prirep;\n-    private final int docs;\n-    private final String state;\n-    private final String ip;\n-    private final String node;\n-\n-    Shard(@Nonnull String index, int shard, @Nonnull Prirep prirep, int docs,\n-                 @Nonnull String state, @Nonnull String ip, @Nonnull String node) {\n-        this.index = index;\n-        this.shard = shard;\n-        this.prirep = prirep;\n-        this.docs = docs;\n-        this.state = state;\n-        this.ip = ip;\n-        this.node = node;\n-    }\n-\n-    public String indexShard() {\n-        return index + \"-\" + shard;\n-    }\n-    public String getIndex() {\n-        return index;\n-    }\n-\n-    public int getShard() {\n-        return shard;\n-    }\n-\n-    public Prirep getPrirep() {\n-        return prirep;\n-    }\n-\n-    public int getDocs() {\n-        return docs;\n-    }\n-\n-    public String getState() {\n-        return state;\n-    }\n-\n-    public String getIp() {\n-        return ip;\n-    }\n-\n-    public String getNode() {\n-        return node;\n-    }\n-\n-    public enum Prirep {\n-        p, r;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"Shard{\" +\n-                \"index='\" + index + '\\'' +\n-                \", shard=\" + shard +\n-                \", prirep=\" + prirep +\n-                \", docs=\" + docs +\n-                \", state='\" + state + '\\'' +\n-                \", ip='\" + ip + '\\'' +\n-                \", node='\" + node + '\\'' +\n-                '}';\n-    }\n-}\n", "next_change": null}]}}, {"oid": "727c870d642084eafe8a1367fa91d5e36ab9e40e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/727c870d642084eafe8a1367fa91d5e36ab9e40e", "message": "Merge branch 'master' into elastic", "committedDate": "2020-04-06T10:56:54Z", "type": "commit"}, {"oid": "4ca25d65001026a4f23b659bd670873ffe023276", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4ca25d65001026a4f23b659bd670873ffe023276", "message": "Include PR feedback", "committedDate": "2020-04-06T13:38:19Z", "type": "commit"}, {"oid": "43708a39318f27d70c1e5b357cf975c1718bdb58", "url": "https://github.com/hazelcast/hazelcast-jet/commit/43708a39318f27d70c1e5b357cf975c1718bdb58", "message": "Apply PR feedback", "committedDate": "2020-04-06T22:50:29Z", "type": "commit"}, {"oid": "ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ef145ea3abe9b61dcf6ce65c75add5618d8d0539", "message": "Rename Elasticsearch -> Elastic", "committedDate": "2020-04-06T23:06:30Z", "type": "commit"}, {"oid": "73d85791ee8ae305ce7012a3b84963c58de54c17", "url": "https://github.com/hazelcast/hazelcast-jet/commit/73d85791ee8ae305ce7012a3b84963c58de54c17", "message": "Temporarily ignore stuck test", "committedDate": "2020-04-07T10:01:09Z", "type": "commit"}, {"oid": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fe0bc203db238bb2a8fa1d383de923a55cc7d007", "message": "Use SerialTest for integration tests", "committedDate": "2020-04-07T12:03:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2NTM2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404765365", "body": "package name shouldn't be in contrib", "bodyText": "package name shouldn't be in contrib", "bodyHTML": "<p dir=\"auto\">package name shouldn't be in contrib</p>", "author": "cangencer", "createdAt": "2020-04-07T12:23:03Z", "path": "extensions/elasticsearch/elasticsearch-5/src/main/java/com/hazelcast/jet/contrib/elasticsearch/ElasticsearchSinks.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.contrib.elasticsearch;", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d69ab5099428186ae4adb54f5f254a98f23401f", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-5/src/main/java/com/hazelcast/jet/contrib/elasticsearch/ElasticsearchSinks.java b/extensions/elasticsearch/elasticsearch-5/src/main/java/com/hazelcast/jet/contrib/elasticsearch/ElasticsearchSinks.java\ndeleted file mode 100644\nindex b1508bfaa..000000000\n--- a/extensions/elasticsearch/elasticsearch-5/src/main/java/com/hazelcast/jet/contrib/elasticsearch/ElasticsearchSinks.java\n+++ /dev/null\n", "chunk": "@@ -1,146 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.contrib.elasticsearch;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.Sink;\n-import com.hazelcast.jet.pipeline.SinkBuilder;\n-import org.apache.http.HttpHost;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.client.CredentialsProvider;\n-import org.apache.http.impl.client.BasicCredentialsProvider;\n-import org.elasticsearch.ElasticsearchException;\n-import org.elasticsearch.action.DocWriteRequest;\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.bulk.BulkResponse;\n-import org.elasticsearch.action.delete.DeleteRequest;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.action.update.UpdateRequest;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-import java.io.IOException;\n-\n-import static org.apache.http.auth.AuthScope.ANY;\n-\n-/**\n- * Contains factory methods for Elasticsearch sinks.\n- */\n-public final class ElasticsearchSinks {\n-\n-    private ElasticsearchSinks() {\n-    }\n-\n-    /**\n-     * Creates a sink which indexes objects using the specified Elasticsearch\n-     * client and the specified bulk request.\n-     *\n-     * @param name                name of the created sink\n-     * @param clientSupplier      Elasticsearch REST client supplier\n-     * @param bulkRequestSupplier bulk request supplier, will be called to obtain a\n-     *                            new {@link BulkRequest} instance after each call.\n-     * @param requestFn           creates an {@link IndexRequest}, {@link UpdateRequest}\n-     *                            or {@link DeleteRequest} for each object\n-     * @param destroyFn           called upon completion to release any resource\n-     */\n-    public static <T> Sink<T> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestClient> clientSupplier,\n-            @Nonnull SupplierEx<BulkRequest> bulkRequestSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest> requestFn,\n-            @Nonnull ConsumerEx<? super RestClient> destroyFn\n-    ) {\n-        return SinkBuilder\n-                .sinkBuilder(name, ctx -> new BulkContext(clientSupplier.get(), bulkRequestSupplier))\n-                .<T>receiveFn((bulkContext, item) -> bulkContext.add(requestFn.apply(item)))\n-                .flushFn(BulkContext::flush)\n-                .destroyFn(b -> destroyFn.accept(b.client))\n-                .preferredLocalParallelism(2)\n-                .build();\n-    }\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, SupplierEx,\n-     * FunctionEx, ConsumerEx)}. Creates a new {@link BulkRequest} with default\n-     * options for each batch and closes the {@link RestClient} upon\n-     * completion. Assumes that the {@code clientSupplier} creates a new client\n-     * for each call.\n-     */\n-    public static <T> Sink<T> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull SupplierEx<? extends RestClient> clientSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest> requestFn\n-    ) {\n-        return elasticsearch(name, clientSupplier, BulkRequest::new, requestFn, RestClient::close);\n-    }\n-\n-    /**\n-     * Convenience for {@link #elasticsearch(String, SupplierEx, FunctionEx)}\n-     * Rest client is configured with basic authentication.\n-     */\n-    public static <T> Sink<T> elasticsearch(\n-            @Nonnull String name,\n-            @Nonnull String username,\n-            @Nullable String password,\n-            @Nonnull String hostname,\n-            int port,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest> requestFn\n-    ) {\n-        return elasticsearch(name, () -> buildClient(username, password, hostname, port), requestFn);\n-    }\n-\n-    static RestClient buildClient(String username, String password, String hostname, int port) {\n-        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n-        credentialsProvider.setCredentials(ANY, new UsernamePasswordCredentials(username, password));\n-\n-        return RestClient.builder(new HttpHost(hostname, port))\n-                         .setHttpClientConfigCallback(httpClientBuilder ->\n-                                 httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)).build();\n-    }\n-\n-    private static final class BulkContext {\n-\n-        private final RestClient client;\n-        private final RestHighLevelClient highLevelClient;\n-        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n-\n-        private BulkRequest bulkRequest;\n-\n-        private BulkContext(RestClient client, SupplierEx<BulkRequest> bulkRequestSupplier) {\n-            this.client = client;\n-            this.highLevelClient = new RestHighLevelClient(client);\n-            this.bulkRequestSupplier = bulkRequestSupplier;\n-            this.bulkRequest = bulkRequestSupplier.get();\n-        }\n-\n-        private void add(DocWriteRequest request) {\n-            bulkRequest.add(request);\n-        }\n-\n-        private void flush() throws IOException {\n-            BulkResponse response = highLevelClient.bulk(bulkRequest);\n-            if (response.hasFailures()) {\n-                throw new ElasticsearchException(response.buildFailureMessage());\n-            }\n-            bulkRequest = bulkRequestSupplier.get();\n-        }\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2ODMxOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404768318", "body": "SearchRequest is `Writable` so it could be serialized, rather than requiring a supplier.", "bodyText": "SearchRequest is Writable so it could be serialized, rather than requiring a supplier.", "bodyHTML": "<p dir=\"auto\">SearchRequest is <code>Writable</code> so it could be serialized, rather than requiring a supplier.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:28:03Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    public static BatchSource<String> elastic() {\n+        return elastic(() -> new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+        ));\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(() -> new RestHighLevelClient(\n+                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+                ),\n+                mapHitFn\n+        );\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5OTA0MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405299040", "bodyText": "We would need to create some adapter for org.elasticsearch.common.io.stream.Writeable and the user would need to register it to Jet, right?", "author": "frant-hartm", "createdAt": "2020-04-08T06:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2ODMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNTYxNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405305617", "bodyText": "Yes something like that (there's something similar done in hadoop module) but when supplying it as a parameter, I think you'll need to serialize/deserialize by hand (because parent class is only Serializable)", "author": "cangencer", "createdAt": "2020-04-08T07:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2ODMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1ODUzNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420858537", "bodyText": "So the request can be easily serialized to byte[] in following way:\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nOutputStreamStreamOutput osso = new OutputStreamStreamOutput(baos);\nsearchRequest.writeTo(osso);\nbaos.toByteArray();\n\nbut the deserialization isn't that easy:\nByteArrayInputStream bais = new ByteArrayInputStream(searchRequest);\nInputStreamStreamInput input = new InputStreamStreamInput(bais);\nreturn new SearchRequest(input);\n\nThis works for a simple SearchRequest, but if some parameters of the SearchRequest are set (e.g. SearchRequest#source) it fails to deserialize, requiring  NamedWriteableAwareStreamInput as input, which needs NamedWriteableRegistry - this is an internal elastic class, initialized e.g. here https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/node/Node.java#L397\nAlso this part of API is different between elastic 5, 6 and 7.\nWith all this I think it's better to keep the supplier.", "author": "frant-hartm", "createdAt": "2020-05-06T14:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2ODMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\ndeleted file mode 100644\nindex a12164844..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ /dev/null\n", "chunk": "@@ -1,135 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import org.apache.http.HttpHost;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-\n-/**\n- * Provides factory methods for Elasticsearch sources.\n- * Alternatively you can use {@link ElasticSourceBuilder}\n- *\n- * @since 4.1\n- */\n-public final class ElasticSources {\n-\n-    private static final int DEFAULT_PORT = 9200;\n-\n-    private ElasticSources() {\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * <p>\n-     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n-     * and {@link #builder()}\n-     */\n-    public static BatchSource<String> elastic() {\n-        return elastic(() -> new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-        ));\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Queries all indexes for all documents.\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(() -> new RestHighLevelClient(\n-                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-                ),\n-                mapHitFn\n-        );\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n-     *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n-    ) {\n-        return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n-     */\n-    public static <T> ElasticSourceBuilder<T> builder() {\n-        return new ElasticSourceBuilder<>();\n-    }\n-\n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(@Nonnull String username,\n-                                             @Nullable String password,\n-                                             @Nonnull String hostname,\n-                                             int port) {\n-        return ElasticSinks.client(username, password, hostname, port);\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nnew file mode 100644\nindex 000000000..a12164844\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    public static BatchSource<String> elastic() {\n+        return elastic(() -> new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+        ));\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(() -> new RestHighLevelClient(\n+                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+                ),\n+                mapHitFn\n+        );\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+    ) {\n+        return ElasticSources.<T>builder()\n+                .clientSupplier(clientSupplier)\n+                .searchRequestSupplier(searchRequestSupplier)\n+                .mapHitFn(mapHitFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticSourceBuilder}\n+     *\n+     * @param <T> result type returned by the map function\n+     */\n+    public static <T> ElasticSourceBuilder<T> builder() {\n+        return new ElasticSourceBuilder<>();\n+    }\n+\n+    /**\n+     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * <p>\n+     * Usage:\n+     * <pre>\n+     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * </pre>\n+     */\n+    public static RestHighLevelClient client(@Nonnull String username,\n+                                             @Nullable String password,\n+                                             @Nonnull String hostname,\n+                                             int port) {\n+        return ElasticSinks.client(username, password, hostname, port);\n+    }\n+}\n", "next_change": {"commit": "cc30adba50939a955a94c3f2617040b333448295", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex a12164844..67dc6bee3 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -114,22 +108,9 @@ public final class ElasticSources {\n      *\n      * @param <T> result type returned by the map function\n      */\n+    @Nonnull\n     public static <T> ElasticSourceBuilder<T> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(@Nonnull String username,\n-                                             @Nullable String password,\n-                                             @Nonnull String hostname,\n-                                             int port) {\n-        return ElasticSinks.client(username, password, hostname, port);\n-    }\n }\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -48,68 +54,102 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function.\n      * Queries all indexes for all documents.\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     * ));\n+     * }</pre>\n+     *\n+     * @param clientFn supplier function returning configured RestClientBuilder\n      */\n     @Nonnull\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        return elastic(clientFn, SearchHit::getSourceAsString);\n     }\n \n     /**\n      * Creates a source which queries local instance of Elasticsearch for all documents\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n+     *\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+        return ElasticSources.builder()\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTA0Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404769042", "body": "instead of client we should take the `RestClientBuilder`", "bodyText": "instead of client we should take the RestClientBuilder", "bodyHTML": "<p dir=\"auto\">instead of client we should take the <code>RestClientBuilder</code></p>", "author": "cangencer", "createdAt": "2020-04-07T12:29:10Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    public static BatchSource<String> elastic() {\n+        return elastic(() -> new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+        ));\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(() -> new RestHighLevelClient(\n+                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+                ),\n+                mapHitFn\n+        );\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMzE2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405313169", "bodyText": "In our examples and tests we just pass the RestClientBuilder to RestHighLevelClient, but the user might have own subclass of RestHighLevelClient.\nI didn't investigate whether there is a use case where it would actually make sense to use a custom client. Will check and change it if not.", "author": "frant-hartm", "createdAt": "2020-04-08T07:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNDU0OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405314549", "bodyText": "Why would they subclass the client? I think the intention is to have the user write as little code as possible.", "author": "cangencer", "createdAt": "2020-04-08T07:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5Mzc0Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405993747", "bodyText": "Yeah, it probably doesn't make sense in our case.\nGenerally when you create a plugin to Elasticsearch and want to support it in the client you just subclass the client and add methods for your plugin. But the connector wouldn't use any of this so we are fine with the regular client.\nOnly thing might be authentication, but that's done either via the optionsFn or via the low level RestClient.\nI will check if it can be replaced easily, there are some tests with the client mocked.", "author": "frant-hartm", "createdAt": "2020-04-09T06:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MjIyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422872226", "bodyText": "this should use the builder, this hasn't been resolved.", "author": "cangencer", "createdAt": "2020-05-11T08:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\ndeleted file mode 100644\nindex a12164844..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ /dev/null\n", "chunk": "@@ -1,135 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import org.apache.http.HttpHost;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-\n-/**\n- * Provides factory methods for Elasticsearch sources.\n- * Alternatively you can use {@link ElasticSourceBuilder}\n- *\n- * @since 4.1\n- */\n-public final class ElasticSources {\n-\n-    private static final int DEFAULT_PORT = 9200;\n-\n-    private ElasticSources() {\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * <p>\n-     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n-     * and {@link #builder()}\n-     */\n-    public static BatchSource<String> elastic() {\n-        return elastic(() -> new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-        ));\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Queries all indexes for all documents.\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n-    }\n-\n-    /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n-     */\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(() -> new RestHighLevelClient(\n-                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n-                ),\n-                mapHitFn\n-        );\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n-     *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n-    }\n-\n-    /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n-     */\n-    public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n-    ) {\n-        return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n-     */\n-    public static <T> ElasticSourceBuilder<T> builder() {\n-        return new ElasticSourceBuilder<>();\n-    }\n-\n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(@Nonnull String username,\n-                                             @Nullable String password,\n-                                             @Nonnull String hostname,\n-                                             int port) {\n-        return ElasticSinks.client(username, password, hostname, port);\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nnew file mode 100644\nindex 000000000..a12164844\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    public static BatchSource<String> elastic() {\n+        return elastic(() -> new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+        ));\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(() -> new RestHighLevelClient(\n+                        RestClient.builder(new HttpHost(\"localhost\", DEFAULT_PORT))\n+                ),\n+                mapHitFn\n+        );\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+    ) {\n+        return ElasticSources.<T>builder()\n+                .clientSupplier(clientSupplier)\n+                .searchRequestSupplier(searchRequestSupplier)\n+                .mapHitFn(mapHitFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticSourceBuilder}\n+     *\n+     * @param <T> result type returned by the map function\n+     */\n+    public static <T> ElasticSourceBuilder<T> builder() {\n+        return new ElasticSourceBuilder<>();\n+    }\n+\n+    /**\n+     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * <p>\n+     * Usage:\n+     * <pre>\n+     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * </pre>\n+     */\n+    public static RestHighLevelClient client(@Nonnull String username,\n+                                             @Nullable String password,\n+                                             @Nonnull String hostname,\n+                                             int port) {\n+        return ElasticSinks.client(username, password, hostname, port);\n+    }\n+}\n", "next_change": {"commit": "cc30adba50939a955a94c3f2617040b333448295", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex a12164844..67dc6bee3 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -114,22 +108,9 @@ public final class ElasticSources {\n      *\n      * @param <T> result type returned by the map function\n      */\n+    @Nonnull\n     public static <T> ElasticSourceBuilder<T> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(@Nonnull String username,\n-                                             @Nullable String password,\n-                                             @Nonnull String hostname,\n-                                             int port) {\n-        return ElasticSinks.client(username, password, hostname, port);\n-    }\n }\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -48,68 +54,102 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function.\n      * Queries all indexes for all documents.\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     * ));\n+     * }</pre>\n+     *\n+     * @param clientFn supplier function returning configured RestClientBuilder\n      */\n     @Nonnull\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        return elastic(clientFn, SearchHit::getSourceAsString);\n     }\n \n     /**\n      * Creates a source which queries local instance of Elasticsearch for all documents\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n+     *\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+        return ElasticSources.builder()\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MTAyNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404771025", "body": "what is the reason here we need a custom processor rather than using the source builder? We also use a different naming convention for processors. (look at StreamKafkaP etc)", "bodyText": "what is the reason here we need a custom processor rather than using the source builder? We also use a different naming convention for processors. (look at StreamKafkaP etc)", "bodyHTML": "<p dir=\"auto\">what is the reason here we need a custom processor rather than using the source builder? We also use a different naming convention for processors. (look at StreamKafkaP etc)</p>", "author": "cangencer", "createdAt": "2020-04-07T12:32:26Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.Traversers;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.ClearScrollRequest;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+final class ElasticProcessor<T> extends AbstractProcessor {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5OTExOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405999118", "bodyText": "In the ElasticProcessorMetaSupplier the list of shards is loaded and assigned to nodes.\nThe shards can't be loaded when the source is created, the host from which you submit may not have direct network access to elastic (the cluster).\nWe could load the shards during initialization of the context of each processor in the builder, but there is a small chance that different processors would get different view of the shards (some might start relocating, disconnect etc..).\nI also followed the structure of the hadoop connector.", "author": "frant-hartm", "createdAt": "2020-04-09T07:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\ndeleted file mode 100644\nindex 98e613659..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n+++ /dev/null\n", "chunk": "@@ -1,232 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.Traverser;\n-import com.hazelcast.jet.Traversers;\n-import com.hazelcast.jet.core.AbstractProcessor;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import org.apache.http.HttpHost;\n-import org.apache.lucene.search.TotalHits;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.ClearScrollRequest;\n-import org.elasticsearch.action.search.ClearScrollResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.action.search.SearchScrollRequest;\n-import org.elasticsearch.client.Node;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-import org.elasticsearch.search.SearchHits;\n-import org.elasticsearch.search.slice.SliceBuilder;\n-\n-import javax.annotation.Nonnull;\n-import java.io.IOException;\n-import java.util.List;\n-\n-import static java.util.Collections.singleton;\n-import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.joining;\n-import static java.util.stream.Collectors.toList;\n-\n-final class ElasticProcessor<T> extends AbstractProcessor {\n-\n-    private ElasticSourceBuilder<T> builder;\n-    private final List<Shard> shards;\n-    private Traverser<T> traverser;\n-\n-    ElasticProcessor(ElasticSourceBuilder<T> builder, List<Shard> shards) {\n-        this.builder = builder;\n-        this.shards = shards;\n-    }\n-\n-    @Override\n-    protected void init(@Nonnull Context context) throws Exception {\n-        super.init(context);\n-\n-        ILogger logger = context.logger();\n-        logger.fine(\"init\");\n-\n-        RestHighLevelClient client = builder.clientSupplier().get();\n-        SearchRequest sr = builder.searchRequestSupplier().get();\n-        sr.scroll(builder.scrollKeepAlive());\n-\n-        if (builder.slicing()) {\n-            if (builder.coLocatedReading()) {\n-                int sliceId = context.localProcessorIndex();\n-                int totalSlices = context.localParallelism();\n-                if (totalSlices > 1) {\n-                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n-                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n-                }\n-            } else {\n-                int sliceId = context.globalProcessorIndex();\n-                int totalSlices = context.totalParallelism();\n-                if (totalSlices > 1) {\n-                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n-                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n-                }\n-            }\n-        }\n-\n-        if (builder.coLocatedReading()) {\n-            logger.fine(\"Assigned shards: \" + shards);\n-            if (shards.isEmpty()) {\n-                traverser = Traversers.empty();\n-                return;\n-            }\n-\n-            Node node = createLocalElasticNode();\n-            client.getLowLevelClient().setNodes(singleton(node));\n-            String preference =\n-                    \"_shards:\" + shards.stream().map(shard -> String.valueOf(shard.getShard())).collect(joining(\",\"))\n-                            + \"|_only_local\";\n-            sr.preference(preference);\n-        }\n-\n-        traverser = new ElasticScrollTraverser<>(builder, client, sr, logger);\n-    }\n-\n-    private Node createLocalElasticNode() {\n-        List<String> ips = shards.stream().map(Shard::getHttpAddress).distinct().collect(toList());\n-        if (ips.size() != 1) {\n-            throw new JetException(\"Should receive shards from single local node, got: \" + ips);\n-        }\n-        String localIp = ips.get(0);\n-        return new Node(HttpHost.create(localIp));\n-    }\n-\n-    @Override\n-    public boolean isCooperative() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean complete() {\n-        return emitFromTraverser(traverser);\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        if (traverser instanceof ElasticProcessor.ElasticScrollTraverser) {\n-            ElasticScrollTraverser<T> scrollTraverser = (ElasticScrollTraverser<T>) traverser;\n-            scrollTraverser.close();\n-        }\n-    }\n-\n-    static class ElasticScrollTraverser<R> implements Traverser<R> {\n-\n-        private final ILogger logger;\n-\n-        private final RestHighLevelClient client;\n-        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-        private final FunctionEx<? super SearchHit, R> mapHitFn;\n-        private final String scrollKeepAlive;\n-        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-\n-        private SearchHits hits;\n-        private int nextHit;\n-        private String scrollId;\n-\n-        ElasticScrollTraverser(ElasticSourceBuilder<R> builder, RestHighLevelClient client, SearchRequest sr,\n-                               ILogger logger) {\n-            this.client = client;\n-            this.optionsFn = builder.optionsFn();\n-            this.mapHitFn = builder.mapHitFn();\n-            this.destroyFn = builder.destroyFn();\n-            this.scrollKeepAlive = builder.scrollKeepAlive();\n-            this.logger = logger;\n-\n-            try {\n-                RequestOptions options = optionsFn.apply(sr);\n-                SearchResponse response = this.client.search(sr, options);\n-\n-                // These should be always present, even when there are no results\n-                hits = requireNonNull(response.getHits(), \"null hits in the response\");\n-                scrollId = requireNonNull(response.getScrollId(), \"null scrollId in the response\");\n-\n-                TotalHits totalHits = hits.getTotalHits();\n-                logger.fine(\"Initialized scroll with scrollId \" + scrollId + \", total results \" +\n-                        totalHits.relation + \", \" + totalHits.value);\n-            } catch (IOException e) {\n-                throw new JetException(\"Could not execute SearchRequest to Elastic\", e);\n-            }\n-        }\n-\n-        @Override\n-        public R next() {\n-            if (hits.getHits().length == 0) {\n-                scrollId = null;\n-                return null;\n-            }\n-\n-            if (nextHit >= hits.getHits().length) {\n-                try {\n-                    SearchScrollRequest ssr = new SearchScrollRequest(scrollId);\n-                    ssr.scroll(scrollKeepAlive);\n-\n-                    SearchResponse searchResponse = client.scroll(ssr, optionsFn.apply(ssr));\n-                    hits = searchResponse.getHits();\n-                    if (hits.getHits().length == 0) {\n-                        return null;\n-                    }\n-                    nextHit = 0;\n-                } catch (IOException e) {\n-                    throw new JetException(\"Could not execute SearchScrollRequest to Elastic\", e);\n-                }\n-            }\n-\n-            return mapHitFn.apply(hits.getAt(nextHit++));\n-        }\n-\n-        public void close() {\n-            if (scrollId != null) {\n-                clearScroll(scrollId);\n-                scrollId = null;\n-            }\n-\n-            try {\n-                destroyFn.accept(client);\n-            } catch (Exception e) { // IOException on client.close()\n-                logger.fine(\"Could not close client\", e);\n-            }\n-        }\n-\n-        private void clearScroll(String scrollId) {\n-            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n-            clearScrollRequest.addScrollId(scrollId);\n-            try {\n-                ClearScrollResponse response = client.clearScroll(clearScrollRequest,\n-                        optionsFn.apply(clearScrollRequest));\n-\n-                if (response.isSucceeded()) {\n-                    logger.fine(\"Succeeded clearing \" + response.getNumFreed() + \" scrolls\");\n-                } else {\n-                    logger.warning(\"Clearing scroll \" + scrollId + \" failed\");\n-                }\n-            } catch (IOException e) {\n-                logger.fine(\"Could not clear scroll with scrollId=\" + scrollId, e);\n-            }\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\nnew file mode 100644\nindex 000000000..7cfc872e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n", "chunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.Traversers;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.ClearScrollRequest;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+final class ElasticProcessor<T> extends AbstractProcessor {\n+\n+    private ElasticSourceBuilder<T> builder;\n+    private final List<Shard> shards;\n+    private Traverser<T> traverser;\n+\n+    ElasticProcessor(ElasticSourceBuilder<T> builder, List<Shard> shards) {\n+        this.builder = builder;\n+        this.shards = shards;\n+    }\n+\n+    @Override\n+    protected void init(@Nonnull Context context) throws Exception {\n+        super.init(context);\n+\n+        ILogger logger = context.logger();\n+        logger.fine(\"init\");\n+\n+        RestHighLevelClient client = builder.clientSupplier().get();\n+        SearchRequest sr = builder.searchRequestSupplier().get();\n+        sr.scroll(builder.scrollKeepAlive());\n+\n+        if (builder.slicing()) {\n+            if (builder.coLocatedReading()) {\n+                int sliceId = context.localProcessorIndex();\n+                int totalSlices = context.localParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            } else {\n+                int sliceId = context.globalProcessorIndex();\n+                int totalSlices = context.totalParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            }\n+        }\n+\n+        if (builder.coLocatedReading()) {\n+            logger.fine(\"Assigned shards: \" + shards);\n+            if (shards.isEmpty()) {\n+                traverser = Traversers.empty();\n+                return;\n+            }\n+\n+            Node node = createLocalElasticNode();\n+            client.getLowLevelClient().setNodes(singleton(node));\n+            String preference =\n+                    \"_shards:\" + shards.stream().map(shard -> String.valueOf(shard.getShard())).collect(joining(\",\"))\n+                            + \"|_only_local\";\n+            sr.preference(preference);\n+        }\n+\n+        traverser = new ElasticScrollTraverser(builder, client, sr, logger).map(builder.mapHitFn());\n+    }\n+\n+    private Node createLocalElasticNode() {\n+        List<String> ips = shards.stream().map(Shard::getHttpAddress).distinct().collect(toList());\n+        if (ips.size() != 1) {\n+            throw new JetException(\"Should receive shards from single local node, got: \" + ips);\n+        }\n+        String localIp = ips.get(0);\n+        return new Node(HttpHost.create(localIp));\n+    }\n+\n+    @Override\n+    public boolean isCooperative() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean complete() {\n+        return emitFromTraverser(traverser);\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        if (traverser instanceof ElasticProcessor.ElasticScrollTraverser) {\n+            ElasticScrollTraverser scrollTraverser = (ElasticScrollTraverser) traverser;\n+            scrollTraverser.close();\n+        }\n+    }\n+\n+    static class ElasticScrollTraverser implements Traverser<SearchHit> {\n+\n+        private final ILogger logger;\n+\n+        private final RestHighLevelClient client;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final String scrollKeepAlive;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private SearchHits hits;\n+        private int nextHit;\n+        private String scrollId;\n+\n+        ElasticScrollTraverser(ElasticSourceBuilder<?> builder, RestHighLevelClient client, SearchRequest sr,\n+                               ILogger logger) {\n+            this.client = client;\n+            this.optionsFn = builder.optionsFn();\n+            this.destroyFn = builder.destroyFn();\n+            this.scrollKeepAlive = builder.scrollKeepAlive();\n+            this.logger = logger;\n+\n+            try {\n+                RequestOptions options = optionsFn.apply(sr);\n+                SearchResponse response = this.client.search(sr, options);\n+\n+                // These should be always present, even when there are no results\n+                hits = requireNonNull(response.getHits(), \"null hits in the response\");\n+                scrollId = requireNonNull(response.getScrollId(), \"null scrollId in the response\");\n+\n+                TotalHits totalHits = hits.getTotalHits();\n+                logger.fine(\"Initialized scroll with scrollId \" + scrollId + \", total results \" +\n+                        totalHits.relation + \", \" + totalHits.value);\n+            } catch (IOException e) {\n+                throw new JetException(\"Could not execute SearchRequest to Elastic\", e);\n+            }\n+        }\n+\n+        @Override\n+        public SearchHit next() {\n+            if (hits.getHits().length == 0) {\n+                scrollId = null;\n+                return null;\n+            }\n+\n+            if (nextHit >= hits.getHits().length) {\n+                try {\n+                    SearchScrollRequest ssr = new SearchScrollRequest(scrollId);\n+                    ssr.scroll(scrollKeepAlive);\n+\n+                    SearchResponse searchResponse = client.scroll(ssr, optionsFn.apply(ssr));\n+                    hits = searchResponse.getHits();\n+                    if (hits.getHits().length == 0) {\n+                        return null;\n+                    }\n+                    nextHit = 0;\n+                } catch (IOException e) {\n+                    throw new JetException(\"Could not execute SearchScrollRequest to Elastic\", e);\n+                }\n+            }\n+\n+            return hits.getAt(nextHit++);\n+        }\n+\n+        public void close() {\n+            if (scrollId != null) {\n+                clearScroll(scrollId);\n+                scrollId = null;\n+            }\n+\n+            try {\n+                destroyFn.accept(client);\n+            } catch (Exception e) { // IOException on client.close()\n+                logger.fine(\"Could not close client\", e);\n+            }\n+        }\n+\n+        private void clearScroll(String scrollId) {\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            try {\n+                ClearScrollResponse response = client.clearScroll(clearScrollRequest,\n+                        optionsFn.apply(clearScrollRequest));\n+\n+                if (response.isSucceeded()) {\n+                    logger.fine(\"Succeeded clearing \" + response.getNumFreed() + \" scrolls\");\n+                } else {\n+                    logger.warning(\"Clearing scroll \" + scrollId + \" failed\");\n+                }\n+            } catch (IOException e) {\n+                logger.fine(\"Could not clear scroll with scrollId=\" + scrollId, e);\n+            }\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MjY2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404772665", "body": "Builders shouldn't be serializable. We don't want it capturing anything extra by accident. It makes the seperation between what's part of source params and what's not (i.e. parallelism) unclear.", "bodyText": "Builders shouldn't be serializable. We don't want it capturing anything extra by accident. It makes the seperation between what's part of source params and what's not (i.e. parallelism) unclear.", "bodyHTML": "<p dir=\"auto\">Builders shouldn't be serializable. We don't want it capturing anything extra by accident. It makes the seperation between what's part of source params and what's not (i.e. parallelism) unclear.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:35:03Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMDg2Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422800863", "bodyText": "Moved the configuration to Serializable config class.", "author": "frant-hartm", "createdAt": "2020-05-11T06:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MjY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d881cadc221a471ccefb4d90c4622d53d1cb7c74", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex ae440f653..f65a1b3e9 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -48,7 +47,8 @@ public class ElasticSourceBuilder<T> implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String name = \"elastic\";\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n     private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n     private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n     private SupplierEx<SearchRequest> searchRequestSupplier;\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex f65a1b3e9..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,233 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private static final String DEFAULT_NAME = \"elastic\";\n-\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = 2;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NDkxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404774919", "body": "you can use `Traverser.map()` where this traverser is called.", "bodyText": "you can use Traverser.map() where this traverser is called.", "bodyHTML": "<p dir=\"auto\">you can use <code>Traverser.map()</code> where this traverser is called.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:38:47Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.Traversers;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.ClearScrollRequest;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+final class ElasticProcessor<T> extends AbstractProcessor {\n+\n+    private ElasticSourceBuilder<T> builder;\n+    private final List<Shard> shards;\n+    private Traverser<T> traverser;\n+\n+    ElasticProcessor(ElasticSourceBuilder<T> builder, List<Shard> shards) {\n+        this.builder = builder;\n+        this.shards = shards;\n+    }\n+\n+    @Override\n+    protected void init(@Nonnull Context context) throws Exception {\n+        super.init(context);\n+\n+        ILogger logger = context.logger();\n+        logger.fine(\"init\");\n+\n+        RestHighLevelClient client = builder.clientSupplier().get();\n+        SearchRequest sr = builder.searchRequestSupplier().get();\n+        sr.scroll(builder.scrollKeepAlive());\n+\n+        if (builder.slicing()) {\n+            if (builder.coLocatedReading()) {\n+                int sliceId = context.localProcessorIndex();\n+                int totalSlices = context.localParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            } else {\n+                int sliceId = context.globalProcessorIndex();\n+                int totalSlices = context.totalParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            }\n+        }\n+\n+        if (builder.coLocatedReading()) {\n+            logger.fine(\"Assigned shards: \" + shards);\n+            if (shards.isEmpty()) {\n+                traverser = Traversers.empty();\n+                return;\n+            }\n+\n+            Node node = createLocalElasticNode();\n+            client.getLowLevelClient().setNodes(singleton(node));\n+            String preference =\n+                    \"_shards:\" + shards.stream().map(shard -> String.valueOf(shard.getShard())).collect(joining(\",\"))\n+                            + \"|_only_local\";\n+            sr.preference(preference);\n+        }\n+\n+        traverser = new ElasticScrollTraverser<>(builder, client, sr, logger);\n+    }\n+\n+    private Node createLocalElasticNode() {\n+        List<String> ips = shards.stream().map(Shard::getHttpAddress).distinct().collect(toList());\n+        if (ips.size() != 1) {\n+            throw new JetException(\"Should receive shards from single local node, got: \" + ips);\n+        }\n+        String localIp = ips.get(0);\n+        return new Node(HttpHost.create(localIp));\n+    }\n+\n+    @Override\n+    public boolean isCooperative() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean complete() {\n+        return emitFromTraverser(traverser);\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        if (traverser instanceof ElasticProcessor.ElasticScrollTraverser) {\n+            ElasticScrollTraverser<T> scrollTraverser = (ElasticScrollTraverser<T>) traverser;\n+            scrollTraverser.close();\n+        }\n+    }\n+\n+    static class ElasticScrollTraverser<R> implements Traverser<R> {\n+\n+        private final ILogger logger;\n+\n+        private final RestHighLevelClient client;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final FunctionEx<? super SearchHit, R> mapHitFn;\n+        private final String scrollKeepAlive;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private SearchHits hits;\n+        private int nextHit;\n+        private String scrollId;\n+\n+        ElasticScrollTraverser(ElasticSourceBuilder<R> builder, RestHighLevelClient client, SearchRequest sr,\n+                               ILogger logger) {\n+            this.client = client;\n+            this.optionsFn = builder.optionsFn();\n+            this.mapHitFn = builder.mapHitFn();\n+            this.destroyFn = builder.destroyFn();\n+            this.scrollKeepAlive = builder.scrollKeepAlive();\n+            this.logger = logger;\n+\n+            try {\n+                RequestOptions options = optionsFn.apply(sr);\n+                SearchResponse response = this.client.search(sr, options);\n+\n+                // These should be always present, even when there are no results\n+                hits = requireNonNull(response.getHits(), \"null hits in the response\");\n+                scrollId = requireNonNull(response.getScrollId(), \"null scrollId in the response\");\n+\n+                TotalHits totalHits = hits.getTotalHits();\n+                logger.fine(\"Initialized scroll with scrollId \" + scrollId + \", total results \" +\n+                        totalHits.relation + \", \" + totalHits.value);\n+            } catch (IOException e) {\n+                throw new JetException(\"Could not execute SearchRequest to Elastic\", e);\n+            }\n+        }\n+\n+        @Override\n+        public R next() {\n+            if (hits.getHits().length == 0) {\n+                scrollId = null;\n+                return null;\n+            }\n+\n+            if (nextHit >= hits.getHits().length) {\n+                try {\n+                    SearchScrollRequest ssr = new SearchScrollRequest(scrollId);\n+                    ssr.scroll(scrollKeepAlive);\n+\n+                    SearchResponse searchResponse = client.scroll(ssr, optionsFn.apply(ssr));\n+                    hits = searchResponse.getHits();\n+                    if (hits.getHits().length == 0) {\n+                        return null;\n+                    }\n+                    nextHit = 0;\n+                } catch (IOException e) {\n+                    throw new JetException(\"Could not execute SearchScrollRequest to Elastic\", e);\n+                }\n+            }\n+\n+            return mapHitFn.apply(hits.getAt(nextHit++));", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMzgxOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r406003818", "bodyText": "Done.", "author": "frant-hartm", "createdAt": "2020-04-09T07:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NDkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "967a0338a7d6bc794377413a595d2cc5abea47bb", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\nindex 98e613659..7cfc872e9 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n", "chunk": "@@ -195,7 +193,7 @@ final class ElasticProcessor<T> extends AbstractProcessor {\n                 }\n             }\n \n-            return mapHitFn.apply(hits.getAt(nextHit++));\n+            return hits.getAt(nextHit++);\n         }\n \n         public void close() {\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\ndeleted file mode 100644\nindex 7cfc872e9..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n+++ /dev/null\n", "chunk": "@@ -1,230 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.jet.JetException;\n-import com.hazelcast.jet.Traverser;\n-import com.hazelcast.jet.Traversers;\n-import com.hazelcast.jet.core.AbstractProcessor;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n-import com.hazelcast.logging.ILogger;\n-import org.apache.http.HttpHost;\n-import org.apache.lucene.search.TotalHits;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.ClearScrollRequest;\n-import org.elasticsearch.action.search.ClearScrollResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.action.search.SearchScrollRequest;\n-import org.elasticsearch.client.Node;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-import org.elasticsearch.search.SearchHits;\n-import org.elasticsearch.search.slice.SliceBuilder;\n-\n-import javax.annotation.Nonnull;\n-import java.io.IOException;\n-import java.util.List;\n-\n-import static java.util.Collections.singleton;\n-import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.joining;\n-import static java.util.stream.Collectors.toList;\n-\n-final class ElasticProcessor<T> extends AbstractProcessor {\n-\n-    private ElasticSourceBuilder<T> builder;\n-    private final List<Shard> shards;\n-    private Traverser<T> traverser;\n-\n-    ElasticProcessor(ElasticSourceBuilder<T> builder, List<Shard> shards) {\n-        this.builder = builder;\n-        this.shards = shards;\n-    }\n-\n-    @Override\n-    protected void init(@Nonnull Context context) throws Exception {\n-        super.init(context);\n-\n-        ILogger logger = context.logger();\n-        logger.fine(\"init\");\n-\n-        RestHighLevelClient client = builder.clientSupplier().get();\n-        SearchRequest sr = builder.searchRequestSupplier().get();\n-        sr.scroll(builder.scrollKeepAlive());\n-\n-        if (builder.slicing()) {\n-            if (builder.coLocatedReading()) {\n-                int sliceId = context.localProcessorIndex();\n-                int totalSlices = context.localParallelism();\n-                if (totalSlices > 1) {\n-                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n-                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n-                }\n-            } else {\n-                int sliceId = context.globalProcessorIndex();\n-                int totalSlices = context.totalParallelism();\n-                if (totalSlices > 1) {\n-                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n-                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n-                }\n-            }\n-        }\n-\n-        if (builder.coLocatedReading()) {\n-            logger.fine(\"Assigned shards: \" + shards);\n-            if (shards.isEmpty()) {\n-                traverser = Traversers.empty();\n-                return;\n-            }\n-\n-            Node node = createLocalElasticNode();\n-            client.getLowLevelClient().setNodes(singleton(node));\n-            String preference =\n-                    \"_shards:\" + shards.stream().map(shard -> String.valueOf(shard.getShard())).collect(joining(\",\"))\n-                            + \"|_only_local\";\n-            sr.preference(preference);\n-        }\n-\n-        traverser = new ElasticScrollTraverser(builder, client, sr, logger).map(builder.mapHitFn());\n-    }\n-\n-    private Node createLocalElasticNode() {\n-        List<String> ips = shards.stream().map(Shard::getHttpAddress).distinct().collect(toList());\n-        if (ips.size() != 1) {\n-            throw new JetException(\"Should receive shards from single local node, got: \" + ips);\n-        }\n-        String localIp = ips.get(0);\n-        return new Node(HttpHost.create(localIp));\n-    }\n-\n-    @Override\n-    public boolean isCooperative() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean complete() {\n-        return emitFromTraverser(traverser);\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        if (traverser instanceof ElasticProcessor.ElasticScrollTraverser) {\n-            ElasticScrollTraverser scrollTraverser = (ElasticScrollTraverser) traverser;\n-            scrollTraverser.close();\n-        }\n-    }\n-\n-    static class ElasticScrollTraverser implements Traverser<SearchHit> {\n-\n-        private final ILogger logger;\n-\n-        private final RestHighLevelClient client;\n-        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-        private final String scrollKeepAlive;\n-        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-\n-        private SearchHits hits;\n-        private int nextHit;\n-        private String scrollId;\n-\n-        ElasticScrollTraverser(ElasticSourceBuilder<?> builder, RestHighLevelClient client, SearchRequest sr,\n-                               ILogger logger) {\n-            this.client = client;\n-            this.optionsFn = builder.optionsFn();\n-            this.destroyFn = builder.destroyFn();\n-            this.scrollKeepAlive = builder.scrollKeepAlive();\n-            this.logger = logger;\n-\n-            try {\n-                RequestOptions options = optionsFn.apply(sr);\n-                SearchResponse response = this.client.search(sr, options);\n-\n-                // These should be always present, even when there are no results\n-                hits = requireNonNull(response.getHits(), \"null hits in the response\");\n-                scrollId = requireNonNull(response.getScrollId(), \"null scrollId in the response\");\n-\n-                TotalHits totalHits = hits.getTotalHits();\n-                logger.fine(\"Initialized scroll with scrollId \" + scrollId + \", total results \" +\n-                        totalHits.relation + \", \" + totalHits.value);\n-            } catch (IOException e) {\n-                throw new JetException(\"Could not execute SearchRequest to Elastic\", e);\n-            }\n-        }\n-\n-        @Override\n-        public SearchHit next() {\n-            if (hits.getHits().length == 0) {\n-                scrollId = null;\n-                return null;\n-            }\n-\n-            if (nextHit >= hits.getHits().length) {\n-                try {\n-                    SearchScrollRequest ssr = new SearchScrollRequest(scrollId);\n-                    ssr.scroll(scrollKeepAlive);\n-\n-                    SearchResponse searchResponse = client.scroll(ssr, optionsFn.apply(ssr));\n-                    hits = searchResponse.getHits();\n-                    if (hits.getHits().length == 0) {\n-                        return null;\n-                    }\n-                    nextHit = 0;\n-                } catch (IOException e) {\n-                    throw new JetException(\"Could not execute SearchScrollRequest to Elastic\", e);\n-                }\n-            }\n-\n-            return hits.getAt(nextHit++);\n-        }\n-\n-        public void close() {\n-            if (scrollId != null) {\n-                clearScroll(scrollId);\n-                scrollId = null;\n-            }\n-\n-            try {\n-                destroyFn.accept(client);\n-            } catch (Exception e) { // IOException on client.close()\n-                logger.fine(\"Could not close client\", e);\n-            }\n-        }\n-\n-        private void clearScroll(String scrollId) {\n-            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n-            clearScrollRequest.addScrollId(scrollId);\n-            try {\n-                ClearScrollResponse response = client.clearScroll(clearScrollRequest,\n-                        optionsFn.apply(clearScrollRequest));\n-\n-                if (response.isSucceeded()) {\n-                    logger.fine(\"Succeeded clearing \" + response.getNumFreed() + \" scrolls\");\n-                } else {\n-                    logger.warning(\"Clearing scroll \" + scrollId + \" failed\");\n-                }\n-            } catch (IOException e) {\n-                logger.fine(\"Could not clear scroll with scrollId=\" + scrollId, e);\n-            }\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\nnew file mode 100644\nindex 000000000..7cfc872e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessor.java\n", "chunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.Traversers;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.ClearScrollRequest;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+final class ElasticProcessor<T> extends AbstractProcessor {\n+\n+    private ElasticSourceBuilder<T> builder;\n+    private final List<Shard> shards;\n+    private Traverser<T> traverser;\n+\n+    ElasticProcessor(ElasticSourceBuilder<T> builder, List<Shard> shards) {\n+        this.builder = builder;\n+        this.shards = shards;\n+    }\n+\n+    @Override\n+    protected void init(@Nonnull Context context) throws Exception {\n+        super.init(context);\n+\n+        ILogger logger = context.logger();\n+        logger.fine(\"init\");\n+\n+        RestHighLevelClient client = builder.clientSupplier().get();\n+        SearchRequest sr = builder.searchRequestSupplier().get();\n+        sr.scroll(builder.scrollKeepAlive());\n+\n+        if (builder.slicing()) {\n+            if (builder.coLocatedReading()) {\n+                int sliceId = context.localProcessorIndex();\n+                int totalSlices = context.localParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            } else {\n+                int sliceId = context.globalProcessorIndex();\n+                int totalSlices = context.totalParallelism();\n+                if (totalSlices > 1) {\n+                    logger.fine(\"Slice id=\" + sliceId + \", max=\" + totalSlices);\n+                    sr.source().slice(new SliceBuilder(sliceId, totalSlices));\n+                }\n+            }\n+        }\n+\n+        if (builder.coLocatedReading()) {\n+            logger.fine(\"Assigned shards: \" + shards);\n+            if (shards.isEmpty()) {\n+                traverser = Traversers.empty();\n+                return;\n+            }\n+\n+            Node node = createLocalElasticNode();\n+            client.getLowLevelClient().setNodes(singleton(node));\n+            String preference =\n+                    \"_shards:\" + shards.stream().map(shard -> String.valueOf(shard.getShard())).collect(joining(\",\"))\n+                            + \"|_only_local\";\n+            sr.preference(preference);\n+        }\n+\n+        traverser = new ElasticScrollTraverser(builder, client, sr, logger).map(builder.mapHitFn());\n+    }\n+\n+    private Node createLocalElasticNode() {\n+        List<String> ips = shards.stream().map(Shard::getHttpAddress).distinct().collect(toList());\n+        if (ips.size() != 1) {\n+            throw new JetException(\"Should receive shards from single local node, got: \" + ips);\n+        }\n+        String localIp = ips.get(0);\n+        return new Node(HttpHost.create(localIp));\n+    }\n+\n+    @Override\n+    public boolean isCooperative() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean complete() {\n+        return emitFromTraverser(traverser);\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        if (traverser instanceof ElasticProcessor.ElasticScrollTraverser) {\n+            ElasticScrollTraverser scrollTraverser = (ElasticScrollTraverser) traverser;\n+            scrollTraverser.close();\n+        }\n+    }\n+\n+    static class ElasticScrollTraverser implements Traverser<SearchHit> {\n+\n+        private final ILogger logger;\n+\n+        private final RestHighLevelClient client;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final String scrollKeepAlive;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private SearchHits hits;\n+        private int nextHit;\n+        private String scrollId;\n+\n+        ElasticScrollTraverser(ElasticSourceBuilder<?> builder, RestHighLevelClient client, SearchRequest sr,\n+                               ILogger logger) {\n+            this.client = client;\n+            this.optionsFn = builder.optionsFn();\n+            this.destroyFn = builder.destroyFn();\n+            this.scrollKeepAlive = builder.scrollKeepAlive();\n+            this.logger = logger;\n+\n+            try {\n+                RequestOptions options = optionsFn.apply(sr);\n+                SearchResponse response = this.client.search(sr, options);\n+\n+                // These should be always present, even when there are no results\n+                hits = requireNonNull(response.getHits(), \"null hits in the response\");\n+                scrollId = requireNonNull(response.getScrollId(), \"null scrollId in the response\");\n+\n+                TotalHits totalHits = hits.getTotalHits();\n+                logger.fine(\"Initialized scroll with scrollId \" + scrollId + \", total results \" +\n+                        totalHits.relation + \", \" + totalHits.value);\n+            } catch (IOException e) {\n+                throw new JetException(\"Could not execute SearchRequest to Elastic\", e);\n+            }\n+        }\n+\n+        @Override\n+        public SearchHit next() {\n+            if (hits.getHits().length == 0) {\n+                scrollId = null;\n+                return null;\n+            }\n+\n+            if (nextHit >= hits.getHits().length) {\n+                try {\n+                    SearchScrollRequest ssr = new SearchScrollRequest(scrollId);\n+                    ssr.scroll(scrollKeepAlive);\n+\n+                    SearchResponse searchResponse = client.scroll(ssr, optionsFn.apply(ssr));\n+                    hits = searchResponse.getHits();\n+                    if (hits.getHits().length == 0) {\n+                        return null;\n+                    }\n+                    nextHit = 0;\n+                } catch (IOException e) {\n+                    throw new JetException(\"Could not execute SearchScrollRequest to Elastic\", e);\n+                }\n+            }\n+\n+            return hits.getAt(nextHit++);\n+        }\n+\n+        public void close() {\n+            if (scrollId != null) {\n+                clearScroll(scrollId);\n+                scrollId = null;\n+            }\n+\n+            try {\n+                destroyFn.accept(client);\n+            } catch (Exception e) { // IOException on client.close()\n+                logger.fine(\"Could not close client\", e);\n+            }\n+        }\n+\n+        private void clearScroll(String scrollId) {\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            try {\n+                ClearScrollResponse response = client.clearScroll(clearScrollRequest,\n+                        optionsFn.apply(clearScrollRequest));\n+\n+                if (response.isSucceeded()) {\n+                    logger.fine(\"Succeeded clearing \" + response.getNumFreed() + \" scrolls\");\n+                } else {\n+                    logger.warning(\"Clearing scroll \" + scrollId + \" failed\");\n+                }\n+            } catch (IOException e) {\n+                logger.fine(\"Could not clear scroll with scrollId=\" + scrollId, e);\n+            }\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NTk0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404775943", "body": "this seems something very low level, we shouldn't expose it.", "bodyText": "this seems something very low level, we shouldn't expose it.", "bodyHTML": "<p dir=\"auto\">this seems something very low level, we shouldn't expose it.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:40:22Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the user-friendly source name for this sink\n+     *\n+     * @param sinkName user-friendly sink name\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n+        this.name = requireNonNull(sinkName, \"sinkName\");\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        this.bulkRequestSupplier = bulkRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n+        return bulkRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the mapItemFn\n+     *\n+     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        checkSerializable(mapItemFn, \"mapItemFn\");\n+        this.mapItemFn = mapItemFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n+        return mapItemFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzcwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405323700", "bodyText": "The org.elasticsearch.client.RequestOptions#DEFAULT may not always work. Users may need to provide custom headers etc..\nSee\nhttps://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options", "author": "frant-hartm", "createdAt": "2020-04-08T07:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\ndeleted file mode 100644\nindex f25514e21..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,234 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.Sink;\n-import com.hazelcast.jet.pipeline.SinkBuilder;\n-import com.hazelcast.logging.ILogger;\n-import org.elasticsearch.ElasticsearchException;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.DocWriteRequest;\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.bulk.BulkResponse;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-\n-import javax.annotation.Nonnull;\n-import java.io.IOException;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch Sink\n- *\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n- *\n- * @param <T>\n- *\n- * @since 4.1\n- */\n-public class ElasticSinkBuilder<T> implements Serializable {\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n-    private int preferredLocalParallelism = 2;\n-\n-    /**\n-     * Set the user-friendly source name for this sink\n-     *\n-     * @param sinkName user-friendly sink name\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n-        this.name = requireNonNull(sinkName, \"sinkName\");\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n-     *\n-     * @param bulkRequestSupplier supplier for the bulk request\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n-        this.bulkRequestSupplier = bulkRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n-        return bulkRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the mapItemFn\n-     *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        checkSerializable(mapItemFn, \"mapItemFn\");\n-        this.mapItemFn = mapItemFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n-        return mapItemFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-\n-    /**\n-     * Create a sink that writes data into Elasticsearch based on this builder configuration\n-     */\n-    public Sink<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n-        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n-\n-        return SinkBuilder\n-                .sinkBuilder(name, ctx ->\n-                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n-                                optionsFn, destroyFn, ctx.logger()))\n-                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n-                .flushFn(BulkContext::flush)\n-                .destroyFn(BulkContext::close)\n-                .preferredLocalParallelism(preferredLocalParallelism)\n-                .build();\n-    }\n-\n-    static final class BulkContext {\n-\n-        private final RestHighLevelClient client;\n-        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n-        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-\n-        private BulkRequest bulkRequest;\n-        private final ILogger logger;\n-\n-        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n-                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n-            this.client = client;\n-            this.bulkRequestSupplier = bulkRequestSupplier;\n-            this.optionsFn = optionsFn;\n-            this.destroyFn = destroyFn;\n-\n-            this.bulkRequest = bulkRequestSupplier.get();\n-            this.logger = logger;\n-        }\n-\n-        void add(DocWriteRequest<?> request) {\n-//            System.out.println(\"add\" + request.id());\n-            bulkRequest.add(request);\n-        }\n-\n-        void flush() throws IOException {\n-            if (!bulkRequest.requests().isEmpty()) {\n-                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n-                if (response.hasFailures()) {\n-                    System.out.println(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests failed\");\n-                    throw new ElasticsearchException(response.buildFailureMessage());\n-                }\n-                System.out.println(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n-//                logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n-                bulkRequest = bulkRequestSupplier.get();\n-            }\n-        }\n-\n-        void close() throws IOException {\n-            flush();\n-            destroyFn.accept(client);\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nnew file mode 100644\nindex 000000000..e90338ae0\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        this.bulkRequestSupplier = bulkRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n+        return bulkRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the mapItemFn\n+     *\n+     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        checkSerializable(mapItemFn, \"mapItemFn\");\n+        this.mapItemFn = mapItemFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n+        return mapItemFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    @Nonnull\n+    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+\n+    /**\n+     * Create a sink that writes data into Elasticsearch based on this builder configuration\n+     */\n+    public Sink<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n+        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n+\n+        return SinkBuilder\n+                .sinkBuilder(DEFAULT_NAME, ctx ->\n+                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n+                                optionsFn, destroyFn, ctx.logger()))\n+                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n+                .flushFn(BulkContext::flush)\n+                .destroyFn(BulkContext::close)\n+                .preferredLocalParallelism(preferredLocalParallelism)\n+                .build();\n+    }\n+\n+    static final class BulkContext {\n+\n+        private final RestHighLevelClient client;\n+        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private BulkRequest bulkRequest;\n+        private final ILogger logger;\n+\n+        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n+                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n+                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n+            this.client = client;\n+            this.bulkRequestSupplier = bulkRequestSupplier;\n+            this.optionsFn = optionsFn;\n+            this.destroyFn = destroyFn;\n+\n+            this.bulkRequest = bulkRequestSupplier.get();\n+            this.logger = logger;\n+        }\n+\n+        void add(DocWriteRequest<?> request) {\n+            bulkRequest.add(request);\n+        }\n+\n+        void flush() throws IOException {\n+            if (!bulkRequest.requests().isEmpty()) {\n+                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n+                if (response.hasFailures()) {\n+                    throw new ElasticsearchException(response.buildFailureMessage());\n+                }\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n+                }\n+                bulkRequest = bulkRequestSupplier.get();\n+            }\n+        }\n+\n+        void close() throws IOException {\n+            logger.fine(\"Closing BulkContext\");\n+            flush();\n+            destroyFn.accept(client);\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex e90338ae0..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -212,7 +222,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n             flush();\n-            destroyFn.accept(client);\n+            client.close();\n         }\n     }\n \n", "next_change": {"commit": "29db2d9637bd5a07242d0c34035788674fae0159", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..bd02019ab 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -221,8 +228,11 @@ public class ElasticSinkBuilder<T> implements Serializable {\n \n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n-            flush();\n-            client.close();\n+            try {\n+                flush();\n+            } finally {\n+                client.close();\n+            }\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NjM2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404776360", "body": "no need for this either, another low level concern", "bodyText": "no need for this either, another low level concern", "bodyHTML": "<p dir=\"auto\">no need for this either, another low level concern</p>", "author": "cangencer", "createdAt": "2020-04-07T12:41:01Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the user-friendly source name for this sink\n+     *\n+     * @param sinkName user-friendly sink name\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n+        this.name = requireNonNull(sinkName, \"sinkName\");\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjE5MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405322190", "bodyText": "There are quite few fields on the BulkRequest, we would need to expose those parameters somehow. We provide a default, so the user doesn't have to set it (but may if needs to).", "author": "frant-hartm", "createdAt": "2020-04-08T07:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NjM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\ndeleted file mode 100644\nindex f25514e21..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,234 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.Sink;\n-import com.hazelcast.jet.pipeline.SinkBuilder;\n-import com.hazelcast.logging.ILogger;\n-import org.elasticsearch.ElasticsearchException;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.DocWriteRequest;\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.bulk.BulkResponse;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-\n-import javax.annotation.Nonnull;\n-import java.io.IOException;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch Sink\n- *\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n- *\n- * @param <T>\n- *\n- * @since 4.1\n- */\n-public class ElasticSinkBuilder<T> implements Serializable {\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n-    private int preferredLocalParallelism = 2;\n-\n-    /**\n-     * Set the user-friendly source name for this sink\n-     *\n-     * @param sinkName user-friendly sink name\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n-        this.name = requireNonNull(sinkName, \"sinkName\");\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n-     *\n-     * @param bulkRequestSupplier supplier for the bulk request\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n-        this.bulkRequestSupplier = bulkRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n-        return bulkRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the mapItemFn\n-     *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        checkSerializable(mapItemFn, \"mapItemFn\");\n-        this.mapItemFn = mapItemFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n-        return mapItemFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-\n-    /**\n-     * Create a sink that writes data into Elasticsearch based on this builder configuration\n-     */\n-    public Sink<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n-        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n-\n-        return SinkBuilder\n-                .sinkBuilder(name, ctx ->\n-                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n-                                optionsFn, destroyFn, ctx.logger()))\n-                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n-                .flushFn(BulkContext::flush)\n-                .destroyFn(BulkContext::close)\n-                .preferredLocalParallelism(preferredLocalParallelism)\n-                .build();\n-    }\n-\n-    static final class BulkContext {\n-\n-        private final RestHighLevelClient client;\n-        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n-        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-\n-        private BulkRequest bulkRequest;\n-        private final ILogger logger;\n-\n-        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n-                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n-            this.client = client;\n-            this.bulkRequestSupplier = bulkRequestSupplier;\n-            this.optionsFn = optionsFn;\n-            this.destroyFn = destroyFn;\n-\n-            this.bulkRequest = bulkRequestSupplier.get();\n-            this.logger = logger;\n-        }\n-\n-        void add(DocWriteRequest<?> request) {\n-//            System.out.println(\"add\" + request.id());\n-            bulkRequest.add(request);\n-        }\n-\n-        void flush() throws IOException {\n-            if (!bulkRequest.requests().isEmpty()) {\n-                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n-                if (response.hasFailures()) {\n-                    System.out.println(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests failed\");\n-                    throw new ElasticsearchException(response.buildFailureMessage());\n-                }\n-                System.out.println(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n-//                logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n-                bulkRequest = bulkRequestSupplier.get();\n-            }\n-        }\n-\n-        void close() throws IOException {\n-            flush();\n-            destroyFn.accept(client);\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nnew file mode 100644\nindex 000000000..e90338ae0\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        this.bulkRequestSupplier = bulkRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n+        return bulkRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the mapItemFn\n+     *\n+     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        checkSerializable(mapItemFn, \"mapItemFn\");\n+        this.mapItemFn = mapItemFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n+        return mapItemFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    @Nonnull\n+    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+\n+    /**\n+     * Create a sink that writes data into Elasticsearch based on this builder configuration\n+     */\n+    public Sink<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n+        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n+\n+        return SinkBuilder\n+                .sinkBuilder(DEFAULT_NAME, ctx ->\n+                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n+                                optionsFn, destroyFn, ctx.logger()))\n+                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n+                .flushFn(BulkContext::flush)\n+                .destroyFn(BulkContext::close)\n+                .preferredLocalParallelism(preferredLocalParallelism)\n+                .build();\n+    }\n+\n+    static final class BulkContext {\n+\n+        private final RestHighLevelClient client;\n+        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private BulkRequest bulkRequest;\n+        private final ILogger logger;\n+\n+        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n+                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n+                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n+            this.client = client;\n+            this.bulkRequestSupplier = bulkRequestSupplier;\n+            this.optionsFn = optionsFn;\n+            this.destroyFn = destroyFn;\n+\n+            this.bulkRequest = bulkRequestSupplier.get();\n+            this.logger = logger;\n+        }\n+\n+        void add(DocWriteRequest<?> request) {\n+            bulkRequest.add(request);\n+        }\n+\n+        void flush() throws IOException {\n+            if (!bulkRequest.requests().isEmpty()) {\n+                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n+                if (response.hasFailures()) {\n+                    throw new ElasticsearchException(response.buildFailureMessage());\n+                }\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n+                }\n+                bulkRequest = bulkRequestSupplier.get();\n+            }\n+        }\n+\n+        void close() throws IOException {\n+            logger.fine(\"Closing BulkContext\");\n+            flush();\n+            destroyFn.accept(client);\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex e90338ae0..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -212,7 +222,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n             flush();\n-            destroyFn.accept(client);\n+            client.close();\n         }\n     }\n \n", "next_change": {"commit": "29db2d9637bd5a07242d0c34035788674fae0159", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..bd02019ab 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -221,8 +228,11 @@ public class ElasticSinkBuilder<T> implements Serializable {\n \n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n-            flush();\n-            client.close();\n+            try {\n+                flush();\n+            } finally {\n+                client.close();\n+            }\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NjcyOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404776729", "body": "no need for this, sink names can be configured on a per stage basis already", "bodyText": "no need for this, sink names can be configured on a per stage basis already", "bodyHTML": "<p dir=\"auto\">no need for this, sink names can be configured on a per stage basis already</p>", "author": "cangencer", "createdAt": "2020-04-07T12:41:40Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the user-friendly source name for this sink\n+     *\n+     * @param sinkName user-friendly sink name\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMDk4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r406010980", "bodyText": "Removed.", "author": "frant-hartm", "createdAt": "2020-04-09T07:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NjcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "361af1e61bf8811b4da75ff1cdcdd9fa3b774827", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex f25514e21..e90338ae0 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -56,22 +57,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n     private int preferredLocalParallelism = 2;\n \n-    /**\n-     * Set the user-friendly source name for this sink\n-     *\n-     * @param sinkName user-friendly sink name\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> name(@Nonnull String sinkName) {\n-        this.name = requireNonNull(sinkName, \"sinkName\");\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n     /**\n      * Set the client supplier\n      *\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\ndeleted file mode 100644\nindex e90338ae0..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,219 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.Sink;\n-import com.hazelcast.jet.pipeline.SinkBuilder;\n-import com.hazelcast.logging.ILogger;\n-import org.elasticsearch.ElasticsearchException;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.DocWriteRequest;\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.bulk.BulkResponse;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-\n-import javax.annotation.Nonnull;\n-import java.io.IOException;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch Sink\n- *\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n- *\n- * @param <T>\n- *\n- * @since 4.1\n- */\n-public class ElasticSinkBuilder<T> implements Serializable {\n-\n-    private static final String DEFAULT_NAME = \"elastic\";\n-\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n-    private int preferredLocalParallelism = 2;\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n-     *\n-     * @param bulkRequestSupplier supplier for the bulk request\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n-        this.bulkRequestSupplier = bulkRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n-        return bulkRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the mapItemFn\n-     *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        checkSerializable(mapItemFn, \"mapItemFn\");\n-        this.mapItemFn = mapItemFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n-        return mapItemFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-\n-    /**\n-     * Create a sink that writes data into Elasticsearch based on this builder configuration\n-     */\n-    public Sink<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n-        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n-\n-        return SinkBuilder\n-                .sinkBuilder(DEFAULT_NAME, ctx ->\n-                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n-                                optionsFn, destroyFn, ctx.logger()))\n-                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n-                .flushFn(BulkContext::flush)\n-                .destroyFn(BulkContext::close)\n-                .preferredLocalParallelism(preferredLocalParallelism)\n-                .build();\n-    }\n-\n-    static final class BulkContext {\n-\n-        private final RestHighLevelClient client;\n-        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n-        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-\n-        private BulkRequest bulkRequest;\n-        private final ILogger logger;\n-\n-        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n-                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n-            this.client = client;\n-            this.bulkRequestSupplier = bulkRequestSupplier;\n-            this.optionsFn = optionsFn;\n-            this.destroyFn = destroyFn;\n-\n-            this.bulkRequest = bulkRequestSupplier.get();\n-            this.logger = logger;\n-        }\n-\n-        void add(DocWriteRequest<?> request) {\n-            bulkRequest.add(request);\n-        }\n-\n-        void flush() throws IOException {\n-            if (!bulkRequest.requests().isEmpty()) {\n-                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n-                if (response.hasFailures()) {\n-                    throw new ElasticsearchException(response.buildFailureMessage());\n-                }\n-                if (logger.isFineEnabled()) {\n-                    logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n-                }\n-                bulkRequest = bulkRequestSupplier.get();\n-            }\n-        }\n-\n-        void close() throws IOException {\n-            logger.fine(\"Closing BulkContext\");\n-            flush();\n-            destroyFn.accept(client);\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nnew file mode 100644\nindex 000000000..e90338ae0\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ *\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ *\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        checkSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        this.bulkRequestSupplier = bulkRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<BulkRequest> bulkRequestSupplier() {\n+        return bulkRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the mapItemFn\n+     *\n+     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> mapItemFn(FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        checkSerializable(mapItemFn, \"mapItemFn\");\n+        this.mapItemFn = mapItemFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn() {\n+        return mapItemFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    @Nonnull\n+    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+\n+    /**\n+     * Create a sink that writes data into Elasticsearch based on this builder configuration\n+     */\n+    public Sink<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier is not set\");\n+        requireNonNull(mapItemFn, \"mapItemFn is not set\");\n+\n+        return SinkBuilder\n+                .sinkBuilder(DEFAULT_NAME, ctx ->\n+                        new BulkContext(clientSupplier.get(), bulkRequestSupplier,\n+                                optionsFn, destroyFn, ctx.logger()))\n+                .<T>receiveFn((bulkContext, item) -> bulkContext.add(mapItemFn.apply(item)))\n+                .flushFn(BulkContext::flush)\n+                .destroyFn(BulkContext::close)\n+                .preferredLocalParallelism(preferredLocalParallelism)\n+                .build();\n+    }\n+\n+    static final class BulkContext {\n+\n+        private final RestHighLevelClient client;\n+        private final SupplierEx<BulkRequest> bulkRequestSupplier;\n+        private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n+        private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n+\n+        private BulkRequest bulkRequest;\n+        private final ILogger logger;\n+\n+        BulkContext(RestHighLevelClient client, SupplierEx<BulkRequest> bulkRequestSupplier,\n+                    FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n+                    ConsumerEx<? super RestHighLevelClient> destroyFn, ILogger logger) {\n+            this.client = client;\n+            this.bulkRequestSupplier = bulkRequestSupplier;\n+            this.optionsFn = optionsFn;\n+            this.destroyFn = destroyFn;\n+\n+            this.bulkRequest = bulkRequestSupplier.get();\n+            this.logger = logger;\n+        }\n+\n+        void add(DocWriteRequest<?> request) {\n+            bulkRequest.add(request);\n+        }\n+\n+        void flush() throws IOException {\n+            if (!bulkRequest.requests().isEmpty()) {\n+                BulkResponse response = client.bulk(bulkRequest, optionsFn.apply(bulkRequest));\n+                if (response.hasFailures()) {\n+                    throw new ElasticsearchException(response.buildFailureMessage());\n+                }\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"BulkRequest with \" + bulkRequest.requests().size() + \" requests succeeded\");\n+                }\n+                bulkRequest = bulkRequestSupplier.get();\n+            }\n+        }\n+\n+        void close() throws IOException {\n+            logger.fine(\"Closing BulkContext\");\n+            flush();\n+            destroyFn.accept(client);\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex e90338ae0..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -212,7 +222,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n             flush();\n-            destroyFn.accept(client);\n+            client.close();\n         }\n     }\n \n", "next_change": {"commit": "29db2d9637bd5a07242d0c34035788674fae0159", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..bd02019ab 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -221,8 +228,11 @@ public class ElasticSinkBuilder<T> implements Serializable {\n \n         void close() throws IOException {\n             logger.fine(\"Closing BulkContext\");\n-            flush();\n-            client.close();\n+            try {\n+                flush();\n+            } finally {\n+                client.close();\n+            }\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NzAwOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404777009", "body": "missing annotations. Also this method doesn't provide source/sink, should be moved somewhere else.", "bodyText": "missing annotations. Also this method doesn't provide source/sink, should be moved somewhere else.", "bodyHTML": "<p dir=\"auto\">missing annotations. Also this method doesn't provide source/sink, should be moved somewhere else.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:42:02Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.http.auth.AuthScope.ANY;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sinks.\n+ * Alternatively you can use {@link ElasticSinkBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSinks {\n+\n+    private static final int PORT = 9200;\n+\n+    private ElasticSinks() {\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n+     *\n+     * @param mapItemFn function that maps items from a stream to an indexing request\n+     */\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        return elastic(() -> client(\"localhost\", PORT), mapItemFn);\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     *\n+     * @param clientSupplier client supplier\n+     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param <T>            type of incoming items\n+     */\n+    public static <T> Sink<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n+    ) {\n+        return new ElasticSinkBuilder<T>()\n+                .clientSupplier(clientSupplier)\n+                .mapItemFn(mapItemFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticSinkBuilder}\n+     *\n+     * @param <T> type of the items in the pipeline\n+     */\n+    public static <T> ElasticSinkBuilder<T> builder() {\n+        return new ElasticSinkBuilder<T>();\n+    }\n+\n+    static RestHighLevelClient client(String hostname, int port) {\n+        return new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(hostname, port))\n+        );\n+    }\n+\n+    /**\n+     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * <p>\n+     * Usage:\n+     * <pre>\n+     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * </pre>\n+     */\n+    public static RestHighLevelClient client(String username, String password, String hostname, int port) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NTE5OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r406245199", "bodyText": "fixed", "author": "frant-hartm", "createdAt": "2020-04-09T14:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NzAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\ndeleted file mode 100644\nindex a572a9de7..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ /dev/null\n", "chunk": "@@ -1,107 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.pipeline.Sink;\n-import org.apache.http.HttpHost;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.client.CredentialsProvider;\n-import org.apache.http.impl.client.BasicCredentialsProvider;\n-import org.elasticsearch.action.DocWriteRequest;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-\n-import javax.annotation.Nonnull;\n-\n-import static org.apache.http.auth.AuthScope.ANY;\n-\n-/**\n- * Provides factory methods for Elasticsearch sinks.\n- * Alternatively you can use {@link ElasticSinkBuilder}\n- *\n- * @since 4.1\n- */\n-public final class ElasticSinks {\n-\n-    private static final int PORT = 9200;\n-\n-    private ElasticSinks() {\n-    }\n-\n-    /**\n-     * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n-     *\n-     * @param mapItemFn function that maps items from a stream to an indexing request\n-     */\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        return elastic(() -> client(\"localhost\", PORT), mapItemFn);\n-    }\n-\n-    /**\n-     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n-     *\n-     * @param clientSupplier client supplier\n-     * @param mapItemFn      function that maps items from a stream to an indexing request\n-     * @param <T>            type of incoming items\n-     */\n-    public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n-    ) {\n-        return new ElasticSinkBuilder<T>()\n-                .clientSupplier(clientSupplier)\n-                .mapItemFn(mapItemFn)\n-                .build();\n-    }\n-\n-    /**\n-     * Returns {@link ElasticSinkBuilder}\n-     *\n-     * @param <T> type of the items in the pipeline\n-     */\n-    public static <T> ElasticSinkBuilder<T> builder() {\n-        return new ElasticSinkBuilder<T>();\n-    }\n-\n-    static RestHighLevelClient client(String hostname, int port) {\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-        );\n-    }\n-\n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(String username, String password, String hostname, int port) {\n-        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n-        credentialsProvider.setCredentials(ANY, new UsernamePasswordCredentials(username, password));\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-                          .setHttpClientConfigCallback(httpClientBuilder ->\n-                                  httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider))\n-        );\n-    }\n-\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nnew file mode 100644\nindex 000000000..a572a9de7\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.http.auth.AuthScope.ANY;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sinks.\n+ * Alternatively you can use {@link ElasticSinkBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSinks {\n+\n+    private static final int PORT = 9200;\n+\n+    private ElasticSinks() {\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n+     *\n+     * @param mapItemFn function that maps items from a stream to an indexing request\n+     */\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        return elastic(() -> client(\"localhost\", PORT), mapItemFn);\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     *\n+     * @param clientSupplier client supplier\n+     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param <T>            type of incoming items\n+     */\n+    public static <T> Sink<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n+    ) {\n+        return new ElasticSinkBuilder<T>()\n+                .clientSupplier(clientSupplier)\n+                .mapItemFn(mapItemFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticSinkBuilder}\n+     *\n+     * @param <T> type of the items in the pipeline\n+     */\n+    public static <T> ElasticSinkBuilder<T> builder() {\n+        return new ElasticSinkBuilder<T>();\n+    }\n+\n+    static RestHighLevelClient client(String hostname, int port) {\n+        return new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(hostname, port))\n+        );\n+    }\n+\n+    /**\n+     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * <p>\n+     * Usage:\n+     * <pre>\n+     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * </pre>\n+     */\n+    public static RestHighLevelClient client(String username, String password, String hostname, int port) {\n+        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+        credentialsProvider.setCredentials(ANY, new UsernamePasswordCredentials(username, password));\n+        return new RestHighLevelClient(\n+                RestClient.builder(new HttpHost(hostname, port))\n+                          .setHttpClientConfigCallback(httpClientBuilder ->\n+                                  httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider))\n+        );\n+    }\n+\n+\n+}\n", "next_change": {"commit": "cc30adba50939a955a94c3f2617040b333448295", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex a572a9de7..886a614bd 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -75,33 +68,9 @@ public final class ElasticSinks {\n      *\n      * @param <T> type of the items in the pipeline\n      */\n+    @Nonnull\n     public static <T> ElasticSinkBuilder<T> builder() {\n         return new ElasticSinkBuilder<T>();\n     }\n \n-    static RestHighLevelClient client(String hostname, int port) {\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-        );\n-    }\n-\n-    /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n-     * <p>\n-     * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n-     */\n-    public static RestHighLevelClient client(String username, String password, String hostname, int port) {\n-        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n-        credentialsProvider.setCredentials(ANY, new UsernamePasswordCredentials(username, password));\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-                          .setHttpClientConfigCallback(httpClientBuilder ->\n-                                  httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider))\n-        );\n-    }\n-\n-\n }\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 886a614bd..592c7ccb5 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -38,39 +38,40 @@ public final class ElasticSinks {\n     /**\n      * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n      *\n-     * @param mapItemFn function that maps items from a stream to an indexing request\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      */\n     @Nonnull\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        return elastic(ElasticClients::client, mapItemFn);\n+    public static <T> Sink<? super T> elastic(\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n+        return elastic(ElasticClients::client, mapToRequestFn);\n     }\n \n     /**\n-     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     * Creates an Elasticsearch sink, uses a client obtained from clientFn and maps items using given mapToRequestFn\n      *\n-     * @param clientSupplier client supplier\n-     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param clientFn       supplier function returning configured RestClientBuilder\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      * @param <T>            type of incoming items\n      */\n     @Nonnull\n     public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n     ) {\n-        return new ElasticSinkBuilder<T>()\n-                .clientSupplier(clientSupplier)\n-                .mapItemFn(mapItemFn)\n-                .build();\n+        // Avoid ElasticSinkBuilder<? super T> inferred from mapToRequestFn\n+        ElasticSinkBuilder<T> builder = new ElasticSinkBuilder<>()\n+                .clientFn(clientFn)\n+                .mapToRequestFn(mapToRequestFn);\n+        return builder.build();\n     }\n \n     /**\n-     * Returns {@link ElasticSinkBuilder}\n-     *\n-     * @param <T> type of the items in the pipeline\n+     * Returns new instance of {@link ElasticSinkBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSinkBuilder<T> builder() {\n-        return new ElasticSinkBuilder<T>();\n+    public static ElasticSinkBuilder<Void> builder() {\n+        return new ElasticSinkBuilder<>();\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NzUxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404777512", "body": "see with sink - not necessary.", "bodyText": "see with sink - not necessary.", "bodyHTML": "<p dir=\"auto\">see with sink - not necessary.</p>", "author": "cangencer", "createdAt": "2020-04-07T12:42:47Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> name(String sourceName) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d881cadc221a471ccefb4d90c4622d53d1cb7c74", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex ae440f653..f65a1b3e9 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -71,23 +71,7 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         requireNonNull(mapHitFn, \"mapHitFn must be set\");\n \n         ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n     }\n \n     /**\n", "next_change": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex f65a1b3e9..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,233 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private static final String DEFAULT_NAME = \"elastic\";\n-\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = 2;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NzY0OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404777649", "body": "see similar comment for Sink", "bodyText": "see similar comment for Sink", "bodyHTML": "<p dir=\"auto\">see similar comment for Sink</p>", "author": "cangencer", "createdAt": "2020-04-07T12:43:02Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> name(String sourceName) {\n+        this.name = sourceName;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex ae440f653..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,249 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.core.Vertex;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3Nzc3OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404777778", "body": "should be called `enableSlicing` without a boolean", "bodyText": "should be called enableSlicing without a boolean", "bodyHTML": "<p dir=\"auto\">should be called <code>enableSlicing</code> without a boolean</p>", "author": "cangencer", "createdAt": "2020-04-07T12:43:15Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> name(String sourceName) {\n+        this.name = sourceName;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex ae440f653..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,249 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.core.Vertex;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3ODA1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404778053", "body": "should be `enableCoLocatedReading()`", "bodyText": "should be enableCoLocatedReading()", "bodyHTML": "<p dir=\"auto\">should be <code>enableCoLocatedReading()</code></p>", "author": "cangencer", "createdAt": "2020-04-07T12:43:40Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> name(String sourceName) {\n+        this.name = sourceName;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex ae440f653..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,249 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.core.Vertex;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3ODUwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404778500", "body": "should be an example here how to use the builder", "bodyText": "should be an example here how to use the builder", "bodyHTML": "<p dir=\"auto\">should be an example here how to use the builder</p>", "author": "cangencer", "createdAt": "2020-04-07T12:44:20Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex ae440f653..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,249 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.core.Vertex;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDg4MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404780881", "body": "technically this is the same. Util.distributeObjects will assign one per processor", "bodyText": "technically this is the same. Util.distributeObjects will assign one per processor", "bodyHTML": "<p dir=\"auto\">technically this is the same. Util.distributeObjects will assign one per processor</p>", "author": "cangencer", "createdAt": "2020-04-07T12:48:10Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.impl.util.Util;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+\n+class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n+\n+    private final ElasticSourceBuilder<R> builder;\n+\n+    private final List<Shard> shards;\n+    private Map<Integer, List<Shard>> shardsByProcessor;\n+\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n+                             @Nonnull List<Shard> shards) {\n+        this.builder = requireNonNull(builder);\n+        this.shards = requireNonNull(shards);\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) {\n+        if (builder.coLocatedReading()) {\n+            if (builder.slicing()) {\n+                shardsByProcessor = new HashMap<>();", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwMDg4Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405300887", "bodyText": "It is different - shardsByProcessor.put(i, shards); all processors get all shards in the first branch.\nWhen colocated reading & slicing is enabled at the same time each processor queries all shards, but different slice of it.", "author": "frant-hartm", "createdAt": "2020-04-08T07:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNTg3OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405305878", "bodyText": "ok, right, I misunderstood I think.", "author": "cangencer", "createdAt": "2020-04-08T07:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\ndeleted file mode 100644\nindex f91a24984..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,76 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import com.hazelcast.jet.core.Processor;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n-import com.hazelcast.jet.impl.util.Util;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Objects.requireNonNull;\n-\n-class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n-\n-    private final ElasticSourceBuilder<R> builder;\n-\n-    private final List<Shard> shards;\n-    private Map<Integer, List<Shard>> shardsByProcessor;\n-\n-    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n-                             @Nonnull List<Shard> shards) {\n-        this.builder = requireNonNull(builder);\n-        this.shards = requireNonNull(shards);\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) {\n-        if (builder.coLocatedReading()) {\n-            if (builder.slicing()) {\n-                shardsByProcessor = new HashMap<>();\n-                for (int i = 0; i < context.localParallelism(); i++) {\n-                    shardsByProcessor.put(i, shards);\n-                }\n-            } else {\n-                shardsByProcessor = Util.distributeObjects(context.localParallelism(), shards);\n-            }\n-        }\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Collection<? extends Processor> get(int count) {\n-        List<Processor> processors = new ArrayList<>();\n-        for (int i = 0; i < count; i++) {\n-            if (builder.coLocatedReading()) {\n-                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n-            } else {\n-                processors.add(new ElasticProcessor<>(builder, emptyList()));\n-            }\n-        }\n-        return processors;\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nnew file mode 100644\nindex 000000000..f91a24984\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.impl.util.Util;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+\n+class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n+\n+    private final ElasticSourceBuilder<R> builder;\n+\n+    private final List<Shard> shards;\n+    private Map<Integer, List<Shard>> shardsByProcessor;\n+\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n+                             @Nonnull List<Shard> shards) {\n+        this.builder = requireNonNull(builder);\n+        this.shards = requireNonNull(shards);\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) {\n+        if (builder.coLocatedReading()) {\n+            if (builder.slicing()) {\n+                shardsByProcessor = new HashMap<>();\n+                for (int i = 0; i < context.localParallelism(); i++) {\n+                    shardsByProcessor.put(i, shards);\n+                }\n+            } else {\n+                shardsByProcessor = Util.distributeObjects(context.localParallelism(), shards);\n+            }\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Collection<? extends Processor> get(int count) {\n+        List<Processor> processors = new ArrayList<>();\n+        for (int i = 0; i < count; i++) {\n+            if (builder.coLocatedReading()) {\n+                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n+            } else {\n+                processors.add(new ElasticProcessor<>(builder, emptyList()));\n+            }\n+        }\n+        return processors;\n+    }\n+\n+}\n", "next_change": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex f91a24984..3c161c3ce 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -62,15 +63,11 @@ class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n     @Nonnull\n     @Override\n     public Collection<? extends Processor> get(int count) {\n-        List<Processor> processors = new ArrayList<>();\n-        for (int i = 0; i < count; i++) {\n-            if (builder.coLocatedReading()) {\n-                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n-            } else {\n-                processors.add(new ElasticProcessor<>(builder, emptyList()));\n-            }\n-        }\n-        return processors;\n+        return IntStream.range(0, count)\n+                        .mapToObj(i -> builder.coLocatedReading() ?\n+                                new ElasticProcessor<>(builder, shardsByProcessor.get(i)) :\n+                                new ElasticProcessor<>(builder, emptyList()))\n+                        .collect(toList());\n     }\n \n }\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex 3c161c3ce..a4a34d277 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -64,9 +64,9 @@ class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n     @Override\n     public Collection<? extends Processor> get(int count) {\n         return IntStream.range(0, count)\n-                        .mapToObj(i -> builder.coLocatedReading() ?\n-                                new ElasticProcessor<>(builder, shardsByProcessor.get(i)) :\n-                                new ElasticProcessor<>(builder, emptyList()))\n+                        .mapToObj(i -> configuration.coLocatedReading() ?\n+                                new ElasticProcessor<>(configuration, shardsByProcessor.get(i)) :\n+                                new ElasticProcessor<>(configuration, emptyList()))\n                         .collect(toList());\n     }\n \n", "next_change": {"commit": "518872d6b58007ff1510f7af836ed71b51256074", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nsimilarity index 84%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nindex a4a34d277..5a8b7e15b 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\n", "chunk": "@@ -65,8 +65,8 @@ class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n     public Collection<? extends Processor> get(int count) {\n         return IntStream.range(0, count)\n                         .mapToObj(i -> configuration.coLocatedReading() ?\n-                                new ElasticProcessor<>(configuration, shardsByProcessor.get(i)) :\n-                                new ElasticProcessor<>(configuration, emptyList()))\n+                                new ElasticSourceP<>(configuration, shardsByProcessor.get(i)) :\n+                                new ElasticSourceP<>(configuration, emptyList()))\n                         .collect(toList());\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MTkyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404781926", "body": "you can simplify the logic above:\r\n\r\n`IntStream.range(0, count).mapToObj(i -> builder.coLocatedReading() ? .. ).collect()`", "bodyText": "you can simplify the logic above:\nIntStream.range(0, count).mapToObj(i -> builder.coLocatedReading() ? .. ).collect()", "bodyHTML": "<p dir=\"auto\">you can simplify the logic above:</p>\n<p dir=\"auto\"><code>IntStream.range(0, count).mapToObj(i -&gt; builder.coLocatedReading() ? .. ).collect()</code></p>", "author": "cangencer", "createdAt": "2020-04-07T12:49:41Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.impl.util.Util;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+\n+class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n+\n+    private final ElasticSourceBuilder<R> builder;\n+\n+    private final List<Shard> shards;\n+    private Map<Integer, List<Shard>> shardsByProcessor;\n+\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n+                             @Nonnull List<Shard> shards) {\n+        this.builder = requireNonNull(builder);\n+        this.shards = requireNonNull(shards);\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) {\n+        if (builder.coLocatedReading()) {\n+            if (builder.slicing()) {\n+                shardsByProcessor = new HashMap<>();\n+                for (int i = 0; i < context.localParallelism(); i++) {\n+                    shardsByProcessor.put(i, shards);\n+                }\n+            } else {\n+                shardsByProcessor = Util.distributeObjects(context.localParallelism(), shards);\n+            }\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Collection<? extends Processor> get(int count) {\n+        List<Processor> processors = new ArrayList<>();\n+        for (int i = 0; i < count; i++) {\n+            if (builder.coLocatedReading()) {\n+                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n+            } else {\n+                processors.add(new ElasticProcessor<>(builder, emptyList()));\n+            }\n+        }\n+        return processors;", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\ndeleted file mode 100644\nindex f91a24984..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ /dev/null\n", "chunk": "@@ -1,76 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import com.hazelcast.jet.core.Processor;\n-import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n-import com.hazelcast.jet.impl.util.Util;\n-\n-import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Objects.requireNonNull;\n-\n-class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n-\n-    private final ElasticSourceBuilder<R> builder;\n-\n-    private final List<Shard> shards;\n-    private Map<Integer, List<Shard>> shardsByProcessor;\n-\n-    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n-                             @Nonnull List<Shard> shards) {\n-        this.builder = requireNonNull(builder);\n-        this.shards = requireNonNull(shards);\n-    }\n-\n-\n-    @Override\n-    public void init(@Nonnull Context context) {\n-        if (builder.coLocatedReading()) {\n-            if (builder.slicing()) {\n-                shardsByProcessor = new HashMap<>();\n-                for (int i = 0; i < context.localParallelism(); i++) {\n-                    shardsByProcessor.put(i, shards);\n-                }\n-            } else {\n-                shardsByProcessor = Util.distributeObjects(context.localParallelism(), shards);\n-            }\n-        }\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Collection<? extends Processor> get(int count) {\n-        List<Processor> processors = new ArrayList<>();\n-        for (int i = 0; i < count; i++) {\n-            if (builder.coLocatedReading()) {\n-                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n-            } else {\n-                processors.add(new ElasticProcessor<>(builder, emptyList()));\n-            }\n-        }\n-        return processors;\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nnew file mode 100644\nindex 000000000..f91a24984\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.impl.util.Util;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+\n+class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n+\n+    private final ElasticSourceBuilder<R> builder;\n+\n+    private final List<Shard> shards;\n+    private Map<Integer, List<Shard>> shardsByProcessor;\n+\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n+                             @Nonnull List<Shard> shards) {\n+        this.builder = requireNonNull(builder);\n+        this.shards = requireNonNull(shards);\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) {\n+        if (builder.coLocatedReading()) {\n+            if (builder.slicing()) {\n+                shardsByProcessor = new HashMap<>();\n+                for (int i = 0; i < context.localParallelism(); i++) {\n+                    shardsByProcessor.put(i, shards);\n+                }\n+            } else {\n+                shardsByProcessor = Util.distributeObjects(context.localParallelism(), shards);\n+            }\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Collection<? extends Processor> get(int count) {\n+        List<Processor> processors = new ArrayList<>();\n+        for (int i = 0; i < count; i++) {\n+            if (builder.coLocatedReading()) {\n+                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n+            } else {\n+                processors.add(new ElasticProcessor<>(builder, emptyList()));\n+            }\n+        }\n+        return processors;\n+    }\n+\n+}\n", "next_change": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex f91a24984..3c161c3ce 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -62,15 +63,11 @@ class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n     @Nonnull\n     @Override\n     public Collection<? extends Processor> get(int count) {\n-        List<Processor> processors = new ArrayList<>();\n-        for (int i = 0; i < count; i++) {\n-            if (builder.coLocatedReading()) {\n-                processors.add(new ElasticProcessor<>(builder, shardsByProcessor.get(i)));\n-            } else {\n-                processors.add(new ElasticProcessor<>(builder, emptyList()));\n-            }\n-        }\n-        return processors;\n+        return IntStream.range(0, count)\n+                        .mapToObj(i -> builder.coLocatedReading() ?\n+                                new ElasticProcessor<>(builder, shardsByProcessor.get(i)) :\n+                                new ElasticProcessor<>(builder, emptyList()))\n+                        .collect(toList());\n     }\n \n }\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex 3c161c3ce..a4a34d277 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -64,9 +64,9 @@ class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n     @Override\n     public Collection<? extends Processor> get(int count) {\n         return IntStream.range(0, count)\n-                        .mapToObj(i -> builder.coLocatedReading() ?\n-                                new ElasticProcessor<>(builder, shardsByProcessor.get(i)) :\n-                                new ElasticProcessor<>(builder, emptyList()))\n+                        .mapToObj(i -> configuration.coLocatedReading() ?\n+                                new ElasticProcessor<>(configuration, shardsByProcessor.get(i)) :\n+                                new ElasticProcessor<>(configuration, emptyList()))\n                         .collect(toList());\n     }\n \n", "next_change": {"commit": "518872d6b58007ff1510f7af836ed71b51256074", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nsimilarity index 84%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nindex a4a34d277..5a8b7e15b 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\n", "chunk": "@@ -65,8 +65,8 @@ class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n     public Collection<? extends Processor> get(int count) {\n         return IntStream.range(0, count)\n                         .mapToObj(i -> configuration.coLocatedReading() ?\n-                                new ElasticProcessor<>(configuration, shardsByProcessor.get(i)) :\n-                                new ElasticProcessor<>(configuration, emptyList()))\n+                                new ElasticSourceP<>(configuration, shardsByProcessor.get(i)) :\n+                                new ElasticSourceP<>(configuration, emptyList()))\n                         .collect(toList());\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MjE2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404782160", "body": "should be `isCoLocatedReadingEnabled()`", "bodyText": "should be isCoLocatedReadingEnabled()", "bodyHTML": "<p dir=\"auto\">should be <code>isCoLocatedReadingEnabled()</code></p>", "author": "cangencer", "createdAt": "2020-04-07T12:50:03Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String name = \"elastic\";\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(name, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the user-friendly source name for this source\n+     *\n+     * @param sourceName user-friendly source name\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> name(String sourceName) {\n+        this.name = sourceName;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\ndeleted file mode 100644\nindex ae440f653..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,249 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.function.ConsumerEx;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.function.SupplierEx;\n-import com.hazelcast.jet.core.Vertex;\n-import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Sources;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.search.SearchHit;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n- *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n- *           also we could accept the function in the build() method, same as the original source did it\n- * @since 4.1\n- */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private String name = \"elastic\";\n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n-    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n-    private boolean slicing;\n-    private boolean coLocatedReading;\n-    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = Vertex.LOCAL_PARALLELISM_USE_DEFAULT;\n-\n-    /**\n-     * Build Elasticsearch {@link BatchSource} with supplied parameters\n-     *\n-     * @return configured source which is to be used in the pipeline\n-     */\n-    @Nonnull\n-    public BatchSource<T> build() {\n-        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n-        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n-        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n-\n-        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n-        return Sources.batchFromProcessor(name, metaSupplier);\n-    }\n-\n-    /**\n-     * Set the user-friendly source name for this source\n-     *\n-     * @param sourceName user-friendly source name\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> name(String sourceName) {\n-        this.name = sourceName;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public String name() {\n-        return name;\n-    }\n-\n-    /**\n-     * Set the client supplier\n-     *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        checkSerializable(clientSupplier, \"clientSupplier\");\n-        this.clientSupplier = clientSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n-        return clientSupplier;\n-    }\n-\n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        checkSerializable(destroyFn, \"destroyFn\");\n-        this.destroyFn = destroyFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n-        return destroyFn;\n-    }\n-\n-    /**\n-     * Set the search request supplier\n-     *\n-     * @param searchRequestSupplier search request supplier\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n-        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n-        this.searchRequestSupplier = searchRequestSupplier;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public SupplierEx<SearchRequest> searchRequestSupplier() {\n-        return searchRequestSupplier;\n-    }\n-\n-    /**\n-     * Set the function to map SearchHit to custom result\n-     *\n-     * @param mapHitFn maps search hits to output items\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n-        checkSerializable(mapHitFn, \"mapHitFn\");\n-        this.mapHitFn = mapHitFn;\n-        return this;\n-    }\n-\n-    @Nonnull\n-    public FunctionEx<? super SearchHit, T> mapHitFn() {\n-        return mapHitFn;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n-     *\n-     * @param optionsFn function that provides {@link RequestOptions}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n-        checkSerializable(optionsFn, \"optionsFn\");\n-        this.optionsFn = optionsFn;\n-        return this;\n-    }\n-\n-    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n-        return optionsFn;\n-    }\n-\n-    /**\n-     * Set to true to enable slicing\n-     * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n-     * <p>\n-     * Use this option to read from multiple shards in parallel.\n-     *\n-     * @param enabled {@code true} to enable slicing, default value {@code false}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n-        this.slicing = enabled;\n-        return this;\n-    }\n-\n-    public boolean slicing() {\n-        return slicing;\n-    }\n-\n-    /**\n-     * Turns on co-located reading\n-     *\n-     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n-     *\n-     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n-        this.coLocatedReading = coLocatedRead;\n-        return this;\n-    }\n-\n-    public boolean coLocatedReading() {\n-        return coLocatedReading;\n-    }\n-\n-    /**\n-     * Set the keepAlive for Elastic search scroll\n-     * <p>\n-     * See {@link SearchRequest#scroll(String)}\n-     *\n-     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n-     *                        default value 1m\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n-        this.scrollKeepAlive = scrollKeepAlive;\n-        return this;\n-    }\n-\n-    public String scrollKeepAlive() {\n-        return scrollKeepAlive;\n-    }\n-\n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism\n-     * @return\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nnew file mode 100644\nindex 000000000..f65a1b3e9\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ *           TODO not sure about the type parameter name - T as the usual default, or R for Result\n+ *           also we could accept the function in the build() method, same as the original source did it\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientSupplier, \"clientSupplier must be set\");\n+        requireNonNull(searchRequestSupplier, \"searchRequestSupplier must be set\");\n+        requireNonNull(mapHitFn, \"mapHitFn must be set\");\n+\n+        ElasticProcessorMetaSupplier<T> metaSupplier = new ElasticProcessorMetaSupplier<>(this);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientSupplier(SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        checkSerializable(clientSupplier, \"clientSupplier\");\n+        this.clientSupplier = clientSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<? extends RestHighLevelClient> clientSupplier() {\n+        return clientSupplier;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> destroyFn(ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        checkSerializable(destroyFn, \"destroyFn\");\n+        this.destroyFn = destroyFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public ConsumerEx<? super RestHighLevelClient> destroyFn() {\n+        return destroyFn;\n+    }\n+\n+    /**\n+     * Set the search request supplier\n+     *\n+     * @param searchRequestSupplier search request supplier\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestSupplier(SupplierEx<SearchRequest> searchRequestSupplier) {\n+        checkSerializable(searchRequestSupplier, \"searchRequestSupplier\");\n+        this.searchRequestSupplier = searchRequestSupplier;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public SupplierEx<SearchRequest> searchRequestSupplier() {\n+        return searchRequestSupplier;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to custom result\n+     *\n+     * @param mapHitFn maps search hits to output items\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> mapHitFn(FunctionEx<? super SearchHit, T> mapHitFn) {\n+        checkSerializable(mapHitFn, \"mapHitFn\");\n+        this.mapHitFn = mapHitFn;\n+        return this;\n+    }\n+\n+    @Nonnull\n+    public FunctionEx<? super SearchHit, T> mapHitFn() {\n+        return mapHitFn;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions} based on given request\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        checkSerializable(optionsFn, \"optionsFn\");\n+        this.optionsFn = optionsFn;\n+        return this;\n+    }\n+\n+    public FunctionEx<? super ActionRequest, RequestOptions> optionsFn() {\n+        return optionsFn;\n+    }\n+\n+    /**\n+     * Set to true to enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @param enabled {@code true} to enable slicing, default value {@code false}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> slicing(boolean enabled) {\n+        this.slicing = enabled;\n+        return this;\n+    }\n+\n+    public boolean slicing() {\n+        return slicing;\n+    }\n+\n+    /**\n+     * Turns on co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     *\n+     * @param coLocatedRead {@code true} to enable co-located reading, default value {@code false}\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> coLocatedReading(boolean coLocatedRead) {\n+        this.coLocatedReading = coLocatedRead;\n+        return this;\n+    }\n+\n+    public boolean coLocatedReading() {\n+        return coLocatedReading;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(String scrollKeepAlive) {\n+        this.scrollKeepAlive = scrollKeepAlive;\n+        return this;\n+    }\n+\n+    public String scrollKeepAlive() {\n+        return scrollKeepAlive;\n+    }\n+\n+    /**\n+     * Set the preferred local parallelism\n+     *\n+     * @param preferredLocalParallelism\n+     * @return\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n+        this.preferredLocalParallelism = preferredLocalParallelism;\n+        return this;\n+    }\n+\n+    public int preferredLocalParallelism() {\n+        return preferredLocalParallelism;\n+    }\n+}\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f65a1b3e9..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -227,7 +195,4 @@ public class ElasticSourceBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    public int preferredLocalParallelism() {\n-        return preferredLocalParallelism;\n-    }\n }\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -184,15 +222,4 @@ public class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the preferred local parallelism\n-     *\n-     * @param preferredLocalParallelism preferred local parallelism\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MzExMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404783113", "body": "you should use `TestSupport` for testing the processor. Otherwise it's easy to get cooperative emission errors. This will test the processor with outbox of size \"1\"", "bodyText": "you should use TestSupport for testing the processor. Otherwise it's easy to get cooperative emission errors. This will test the processor with outbox of size \"1\"", "bodyHTML": "<p dir=\"auto\">you should use <code>TestSupport</code> for testing the processor. Otherwise it's easy to get cooperative emission errors. This will test the processor with outbox of size \"1\"</p>", "author": "cangencer", "createdAt": "2020-04-07T12:51:38Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.test.TestOutbox;\n+import com.hazelcast.jet.core.test.TestProcessorContext;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RequestOptions.Builder;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.lucene.search.TotalHits.Relation.EQUAL_TO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+public class ElasticProcessorTest {", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\ndeleted file mode 100644\nindex 2b02bfe32..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,357 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.jet.core.test.TestOutbox;\n-import com.hazelcast.jet.core.test.TestProcessorContext;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n-import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n-import org.apache.lucene.search.TotalHits;\n-import org.elasticsearch.action.ActionRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.action.search.SearchScrollRequest;\n-import org.elasticsearch.client.Node;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RequestOptions.Builder;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestClientBuilder;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.text.Text;\n-import org.elasticsearch.search.SearchHit;\n-import org.elasticsearch.search.SearchHits;\n-import org.elasticsearch.search.slice.SliceBuilder;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptyMap;\n-import static org.apache.lucene.search.TotalHits.Relation.EQUAL_TO;\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.tuple;\n-import static org.assertj.core.util.Lists.newArrayList;\n-import static org.mockito.ArgumentCaptor.forClass;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-\n-public class ElasticProcessorTest {\n-\n-    public static final String HIT_SOURCE = \"{\\\"name\\\": \\\"Frantisek\\\"}\";\n-    public static final String HIT_SOURCE2 = \"{\\\"name\\\": \\\"Vladimir\\\"}\";\n-    public static final String SCROLL_ID = \"random-scroll-id\";\n-    public static final int OUTBOX_CAPACITY = 1000;\n-\n-    private static final String KEEP_ALIVE = \"42m\";\n-\n-    private ElasticProcessor<String> processor;\n-    private SerializableRestClient mockClient;\n-    private SearchResponse response;\n-    private TestOutbox outbox;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        mockClient = SerializableRestClient.instanceHolder = mock(SerializableRestClient.class, RETURNS_DEEP_STUBS);\n-        // Mocks returning mocks is not generally recommended, but the setup of empty SearchResponse is even uglier\n-        // See org.elasticsearch.action.search.SearchResponse#empty\n-        response = mock(SearchResponse.class);\n-        when(response.getScrollId()).thenReturn(SCROLL_ID);\n-        when(mockClient.search(any(), any())).thenReturn(response);\n-    }\n-\n-    private void createProcessor() throws Exception {\n-        createProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n-    }\n-\n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n-        createProcessor(optionsFn, emptyList(), false, false);\n-    }\n-\n-    private void createProcessor(List<Shard> shards) throws Exception {\n-        createProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n-    }\n-\n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n-                                 boolean slicing, boolean coLocatedReading)\n-            throws Exception {\n-        createProcessor(optionsFn, shards, slicing, coLocatedReading, new TestProcessorContext());\n-    }\n-\n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n-                                 boolean slicing, boolean coLocatedReading, TestProcessorContext context)\n-            throws Exception {\n-\n-        RestHighLevelClient client = mockClient;\n-        ElasticSourceBuilder<String> builder = new ElasticSourceBuilder<String>()\n-                .clientSupplier(() -> client)\n-                .searchRequestSupplier(() -> new SearchRequest(\"*\"))\n-                .optionsFn(optionsFn)\n-                .mapHitFn(SearchHit::getSourceAsString)\n-                .scrollKeepAlive(KEEP_ALIVE)\n-                .slicing(slicing)\n-                .coLocatedReading(coLocatedReading);\n-\n-        // This constructor calls the client so it has to be called after specific mock setup in each test method\n-        // rather than in setUp()\n-        processor = new ElasticProcessor<>(builder, shards);\n-        outbox = new TestOutbox(OUTBOX_CAPACITY);\n-        processor.init(outbox, context);\n-\n-    }\n-\n-    @Test\n-    public void shouldUseScrollSearch() throws Exception {\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        createProcessor();\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n-        verify(mockClient).search(captor.capture(), any());\n-\n-        SearchRequest request = captor.getValue();\n-        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n-    }\n-\n-    private List<String> runProcessor() {\n-        processor.complete();\n-        List<String> out = new ArrayList<>();\n-        outbox.drainQueueAndReset(0, out, false);\n-        return out;\n-    }\n-\n-    @Test\n-    public void shouldUseOptionsFnForSearch() throws Exception {\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        // get different instance than default\n-        createProcessor(request -> {\n-            Builder builder = RequestOptions.DEFAULT.toBuilder();\n-            builder.addHeader(\"TestHeader\", \"value\");\n-            return builder.build();\n-        });\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n-        verify(mockClient).search(any(), captor.capture());\n-\n-        RequestOptions capturedOptions = captor.getValue();\n-        assertThat(capturedOptions.getHeaders())\n-                .extracting(h -> tuple(h.getName(), h.getValue()))\n-                .containsExactly(tuple(\"TestHeader\", \"value\"));\n-    }\n-\n-    @Test\n-    public void shouldProduceSingleHit() throws Exception {\n-        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n-        hit.sourceRef(new BytesArray(HIT_SOURCE));\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        SearchResponse response2 = mock(SearchResponse.class);\n-        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(3, EQUAL_TO), Float.NaN));\n-        when(mockClient.scroll(any(), any())).thenReturn(response, response2);\n-\n-        createProcessor();\n-\n-        String next = runProcessor().get(0);\n-        assertThat(next).isEqualTo(HIT_SOURCE);\n-    }\n-\n-    @Test\n-    public void shouldUseScrollIdInFollowupScrollRequest() throws Exception {\n-        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n-        hit.sourceRef(new BytesArray(HIT_SOURCE));\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(3, EQUAL_TO), Float.NaN));\n-\n-        SearchResponse response2 = mock(SearchResponse.class);\n-        SearchHit hit2 = new SearchHit(1, \"id-1\", new Text(\"ignored\"), emptyMap());\n-        hit2.sourceRef(new BytesArray(HIT_SOURCE2));\n-        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit2}, new TotalHits(3, EQUAL_TO), Float.NaN));\n-\n-        SearchResponse response3 = mock(SearchResponse.class);\n-        when(response3.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(3, EQUAL_TO), Float.NaN));\n-        when(mockClient.scroll(any(), any())).thenReturn(response2, response3);\n-\n-        createProcessor();\n-\n-        List<String> items = runProcessor();\n-        assertThat(items).containsExactly(HIT_SOURCE, HIT_SOURCE2);\n-\n-        ArgumentCaptor<SearchScrollRequest> captor = forClass(SearchScrollRequest.class);\n-\n-        verify(mockClient, times(2)).scroll(captor.capture(), any());\n-        SearchScrollRequest request = captor.getValue();\n-        assertThat(request.scrollId()).isEqualTo(SCROLL_ID);\n-        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n-    }\n-\n-    @Test\n-    public void shouldUseOptionsFnForScroll() throws Exception {\n-        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n-        hit.sourceRef(new BytesArray(HIT_SOURCE));\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(1, EQUAL_TO), Float.NaN));\n-\n-        SearchResponse response2 = mock(SearchResponse.class);\n-        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(1, EQUAL_TO), Float.NaN));\n-        when(mockClient.scroll(any(), any())).thenReturn(response2);\n-\n-        // get different instance than default\n-        createProcessor(request -> {\n-            Builder builder = RequestOptions.DEFAULT.toBuilder();\n-            builder.addHeader(\"TestHeader\", \"value\");\n-            return builder.build();\n-        });\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n-        verify(mockClient).scroll(any(), captor.capture());\n-\n-        RequestOptions capturedOptions = captor.getValue();\n-        assertThat(capturedOptions.getHeaders())\n-                .extracting(h -> tuple(h.getName(), h.getValue()))\n-                .containsExactly(tuple(\"TestHeader\", \"value\"));\n-    }\n-\n-    @Test\n-    public void shouldUseLocalNodeOnly() throws Exception {\n-        RestClient lowClient = mock(RestClient.class);\n-        when(mockClient.getLowLevelClient()).thenReturn(lowClient);\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        createProcessor(newArrayList(new Shard(\"my-index\", 0, Prirep.p, 42,\n-                \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")));\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<Collection<Node>> nodesCaptor = ArgumentCaptor.forClass(Collection.class);\n-\n-        verify(lowClient).setNodes(nodesCaptor.capture());\n-\n-        Collection<Node> nodes = nodesCaptor.getValue();\n-        assertThat(nodes).hasSize(1);\n-\n-        Node node = nodes.iterator().next();\n-        assertThat(node.getHost().toHostString()).isEqualTo(\"10.0.0.1:9200\");\n-    }\n-\n-    @Test\n-    public void shouldSearchShardsWithPreference() throws Exception {\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        createProcessor(newArrayList(\n-                new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n-                new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n-                new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n-        ));\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n-        verify(mockClient).search(captor.capture(), any());\n-\n-        SearchRequest request = captor.getValue();\n-        assertThat(request.preference()).isEqualTo(\"_shards:0,1,2|_only_local\");\n-    }\n-\n-    @Test\n-    public void shouldUseSlicing() throws Exception {\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        TestProcessorContext context = new TestProcessorContext();\n-        context.setLocalProcessorIndex(1);\n-        context.setLocalParallelism(2);\n-        context.setGlobalProcessorIndex(4);\n-        context.setTotalParallelism(6);\n-\n-        createProcessor((r) -> RequestOptions.DEFAULT, emptyList(), true, false, context);\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n-        verify(mockClient).search(captor.capture(), any());\n-\n-        SearchRequest request = captor.getValue();\n-        SliceBuilder slice = request.source().slice();\n-\n-        // Slicing across all, should use global values\n-        assertThat(slice.getId()).isEqualTo(4);\n-        assertThat(slice.getMax()).isEqualTo(6);\n-    }\n-\n-    @Test\n-    public void useSlicingAndCoLocation() throws Exception {\n-        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n-\n-        TestProcessorContext context = new TestProcessorContext();\n-        context.setLocalProcessorIndex(1);\n-        context.setLocalParallelism(2);\n-        context.setGlobalProcessorIndex(4);\n-        context.setTotalParallelism(6);\n-\n-        createProcessor((r) -> RequestOptions.DEFAULT,\n-                newArrayList(\n-                        new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n-                        new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n-                        new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n-                ),\n-                true, true, context);\n-\n-        runProcessor();\n-\n-        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n-        verify(mockClient).search(captor.capture(), any());\n-\n-        SearchRequest request = captor.getValue();\n-        SliceBuilder slice = request.source().slice();\n-\n-        // Slicing across single node, should use local values\n-        assertThat(slice.getId()).isEqualTo(1);\n-        assertThat(slice.getMax()).isEqualTo(2);\n-    }\n-\n-    /*\n-     * Need to pass a Serializable Supplier into\n-     * ElasticsearchSourceBuilder.clientSupplier(...)\n-     * which returns a mock, so the mock itself must be serializable.\n-     *\n-     * Can't use Mockito's withSettings().serializable() because some of the setup (SearchResponse) is not Serializable\n-     */\n-    static class SerializableRestClient extends RestHighLevelClient implements Serializable {\n-\n-        static SerializableRestClient instanceHolder;\n-\n-        SerializableRestClient(RestClientBuilder restClientBuilder) {\n-            super(restClientBuilder);\n-        }\n-\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\nnew file mode 100644\nindex 000000000..2b02bfe32\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n", "chunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.test.TestOutbox;\n+import com.hazelcast.jet.core.test.TestProcessorContext;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RequestOptions.Builder;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.lucene.search.TotalHits.Relation.EQUAL_TO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+public class ElasticProcessorTest {\n+\n+    public static final String HIT_SOURCE = \"{\\\"name\\\": \\\"Frantisek\\\"}\";\n+    public static final String HIT_SOURCE2 = \"{\\\"name\\\": \\\"Vladimir\\\"}\";\n+    public static final String SCROLL_ID = \"random-scroll-id\";\n+    public static final int OUTBOX_CAPACITY = 1000;\n+\n+    private static final String KEEP_ALIVE = \"42m\";\n+\n+    private ElasticProcessor<String> processor;\n+    private SerializableRestClient mockClient;\n+    private SearchResponse response;\n+    private TestOutbox outbox;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockClient = SerializableRestClient.instanceHolder = mock(SerializableRestClient.class, RETURNS_DEEP_STUBS);\n+        // Mocks returning mocks is not generally recommended, but the setup of empty SearchResponse is even uglier\n+        // See org.elasticsearch.action.search.SearchResponse#empty\n+        response = mock(SearchResponse.class);\n+        when(response.getScrollId()).thenReturn(SCROLL_ID);\n+        when(mockClient.search(any(), any())).thenReturn(response);\n+    }\n+\n+    private void createProcessor() throws Exception {\n+        createProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n+        createProcessor(optionsFn, emptyList(), false, false);\n+    }\n+\n+    private void createProcessor(List<Shard> shards) throws Exception {\n+        createProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                 boolean slicing, boolean coLocatedReading)\n+            throws Exception {\n+        createProcessor(optionsFn, shards, slicing, coLocatedReading, new TestProcessorContext());\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                 boolean slicing, boolean coLocatedReading, TestProcessorContext context)\n+            throws Exception {\n+\n+        RestHighLevelClient client = mockClient;\n+        ElasticSourceBuilder<String> builder = new ElasticSourceBuilder<String>()\n+                .clientSupplier(() -> client)\n+                .searchRequestSupplier(() -> new SearchRequest(\"*\"))\n+                .optionsFn(optionsFn)\n+                .mapHitFn(SearchHit::getSourceAsString)\n+                .scrollKeepAlive(KEEP_ALIVE)\n+                .slicing(slicing)\n+                .coLocatedReading(coLocatedReading);\n+\n+        // This constructor calls the client so it has to be called after specific mock setup in each test method\n+        // rather than in setUp()\n+        processor = new ElasticProcessor<>(builder, shards);\n+        outbox = new TestOutbox(OUTBOX_CAPACITY);\n+        processor.init(outbox, context);\n+\n+    }\n+\n+    @Test\n+    public void shouldUseScrollSearch() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        createProcessor();\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n+    }\n+\n+    private List<String> runProcessor() {\n+        processor.complete();\n+        List<String> out = new ArrayList<>();\n+        outbox.drainQueueAndReset(0, out, false);\n+        return out;\n+    }\n+\n+    @Test\n+    public void shouldUseOptionsFnForSearch() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        // get different instance than default\n+        createProcessor(request -> {\n+            Builder builder = RequestOptions.DEFAULT.toBuilder();\n+            builder.addHeader(\"TestHeader\", \"value\");\n+            return builder.build();\n+        });\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n+        verify(mockClient).search(any(), captor.capture());\n+\n+        RequestOptions capturedOptions = captor.getValue();\n+        assertThat(capturedOptions.getHeaders())\n+                .extracting(h -> tuple(h.getName(), h.getValue()))\n+                .containsExactly(tuple(\"TestHeader\", \"value\"));\n+    }\n+\n+    @Test\n+    public void shouldProduceSingleHit() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response, response2);\n+\n+        createProcessor();\n+\n+        String next = runProcessor().get(0);\n+        assertThat(next).isEqualTo(HIT_SOURCE);\n+    }\n+\n+    @Test\n+    public void shouldUseScrollIdInFollowupScrollRequest() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        SearchHit hit2 = new SearchHit(1, \"id-1\", new Text(\"ignored\"), emptyMap());\n+        hit2.sourceRef(new BytesArray(HIT_SOURCE2));\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit2}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response3 = mock(SearchResponse.class);\n+        when(response3.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response2, response3);\n+\n+        createProcessor();\n+\n+        List<String> items = runProcessor();\n+        assertThat(items).containsExactly(HIT_SOURCE, HIT_SOURCE2);\n+\n+        ArgumentCaptor<SearchScrollRequest> captor = forClass(SearchScrollRequest.class);\n+\n+        verify(mockClient, times(2)).scroll(captor.capture(), any());\n+        SearchScrollRequest request = captor.getValue();\n+        assertThat(request.scrollId()).isEqualTo(SCROLL_ID);\n+        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n+    }\n+\n+    @Test\n+    public void shouldUseOptionsFnForScroll() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response2);\n+\n+        // get different instance than default\n+        createProcessor(request -> {\n+            Builder builder = RequestOptions.DEFAULT.toBuilder();\n+            builder.addHeader(\"TestHeader\", \"value\");\n+            return builder.build();\n+        });\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n+        verify(mockClient).scroll(any(), captor.capture());\n+\n+        RequestOptions capturedOptions = captor.getValue();\n+        assertThat(capturedOptions.getHeaders())\n+                .extracting(h -> tuple(h.getName(), h.getValue()))\n+                .containsExactly(tuple(\"TestHeader\", \"value\"));\n+    }\n+\n+    @Test\n+    public void shouldUseLocalNodeOnly() throws Exception {\n+        RestClient lowClient = mock(RestClient.class);\n+        when(mockClient.getLowLevelClient()).thenReturn(lowClient);\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        createProcessor(newArrayList(new Shard(\"my-index\", 0, Prirep.p, 42,\n+                \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")));\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<Collection<Node>> nodesCaptor = ArgumentCaptor.forClass(Collection.class);\n+\n+        verify(lowClient).setNodes(nodesCaptor.capture());\n+\n+        Collection<Node> nodes = nodesCaptor.getValue();\n+        assertThat(nodes).hasSize(1);\n+\n+        Node node = nodes.iterator().next();\n+        assertThat(node.getHost().toHostString()).isEqualTo(\"10.0.0.1:9200\");\n+    }\n+\n+    @Test\n+    public void shouldSearchShardsWithPreference() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        createProcessor(newArrayList(\n+                new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n+        ));\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        assertThat(request.preference()).isEqualTo(\"_shards:0,1,2|_only_local\");\n+    }\n+\n+    @Test\n+    public void shouldUseSlicing() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestProcessorContext context = new TestProcessorContext();\n+        context.setLocalProcessorIndex(1);\n+        context.setLocalParallelism(2);\n+        context.setGlobalProcessorIndex(4);\n+        context.setTotalParallelism(6);\n+\n+        createProcessor((r) -> RequestOptions.DEFAULT, emptyList(), true, false, context);\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        SliceBuilder slice = request.source().slice();\n+\n+        // Slicing across all, should use global values\n+        assertThat(slice.getId()).isEqualTo(4);\n+        assertThat(slice.getMax()).isEqualTo(6);\n+    }\n+\n+    @Test\n+    public void useSlicingAndCoLocation() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestProcessorContext context = new TestProcessorContext();\n+        context.setLocalProcessorIndex(1);\n+        context.setLocalParallelism(2);\n+        context.setGlobalProcessorIndex(4);\n+        context.setTotalParallelism(6);\n+\n+        createProcessor((r) -> RequestOptions.DEFAULT,\n+                newArrayList(\n+                        new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                        new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                        new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n+                ),\n+                true, true, context);\n+\n+        runProcessor();\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        SliceBuilder slice = request.source().slice();\n+\n+        // Slicing across single node, should use local values\n+        assertThat(slice.getId()).isEqualTo(1);\n+        assertThat(slice.getMax()).isEqualTo(2);\n+    }\n+\n+    /*\n+     * Need to pass a Serializable Supplier into\n+     * ElasticsearchSourceBuilder.clientSupplier(...)\n+     * which returns a mock, so the mock itself must be serializable.\n+     *\n+     * Can't use Mockito's withSettings().serializable() because some of the setup (SearchResponse) is not Serializable\n+     */\n+    static class SerializableRestClient extends RestHighLevelClient implements Serializable {\n+\n+        static SerializableRestClient instanceHolder;\n+\n+        SerializableRestClient(RestClientBuilder restClientBuilder) {\n+            super(restClientBuilder);\n+        }\n+\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NzU0Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r404797542", "body": "what's Prirep? ", "bodyText": "what's Prirep?", "bodyHTML": "<p dir=\"auto\">what's Prirep?</p>", "author": "cangencer", "createdAt": "2020-04-07T13:13:26Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+class Shard implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String index;\n+    private final int shard;\n+    private final Prirep prirep;", "originalCommit": "fe0bc203db238bb2a8fa1d383de923a55cc7d007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwMTU2MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405301561", "bodyText": "Primary/replica, values are p and r", "author": "frant-hartm", "createdAt": "2020-04-08T07:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NzU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java\ndeleted file mode 100644\nindex 9ba6197ce..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java\n+++ /dev/null\n", "chunk": "@@ -1,102 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic.impl;\n-\n-import javax.annotation.Nonnull;\n-import java.io.Serializable;\n-\n-class Shard implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private final String index;\n-    private final int shard;\n-    private final Prirep prirep;\n-    private final int docs;\n-    private final String state;\n-    private final String ip;\n-    private final String httpAddress;\n-    private final String node;\n-\n-    Shard(@Nonnull String index, int shard, @Nonnull Prirep prirep, int docs,\n-          @Nonnull String state, @Nonnull String ip, @Nonnull String httpAddress,\n-          @Nonnull String node) {\n-\n-        this.index = index;\n-        this.shard = shard;\n-        this.prirep = prirep;\n-        this.docs = docs;\n-        this.state = state;\n-        this.ip = ip;\n-        this.httpAddress = httpAddress;\n-        this.node = node;\n-    }\n-\n-    public String indexShard() {\n-        return index + \"-\" + shard;\n-    }\n-\n-    public String getIndex() {\n-        return index;\n-    }\n-\n-    public int getShard() {\n-        return shard;\n-    }\n-\n-    public Prirep getPrirep() {\n-        return prirep;\n-    }\n-\n-    public int getDocs() {\n-        return docs;\n-    }\n-\n-    public String getState() {\n-        return state;\n-    }\n-\n-    public String getIp() {\n-        return ip;\n-    }\n-\n-    public String getHttpAddress() {\n-        return httpAddress;\n-    }\n-\n-    public String getNode() {\n-        return node;\n-    }\n-\n-    public enum Prirep {\n-        p, r;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"Shard{\" +\n-                \"index='\" + index + '\\'' +\n-                \", shard=\" + shard +\n-                \", prirep=\" + prirep +\n-                \", docs=\" + docs +\n-                \", state='\" + state + '\\'' +\n-                \", ip='\" + ip + '\\'' +\n-                \", httpAddress='\" + httpAddress + '\\'' +\n-                \", node='\" + node + '\\'' +\n-                '}';\n-    }\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java\nnew file mode 100644\nindex 000000000..9ba6197ce\n--- /dev/null\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/Shard.java\n", "chunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+class Shard implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String index;\n+    private final int shard;\n+    private final Prirep prirep;\n+    private final int docs;\n+    private final String state;\n+    private final String ip;\n+    private final String httpAddress;\n+    private final String node;\n+\n+    Shard(@Nonnull String index, int shard, @Nonnull Prirep prirep, int docs,\n+          @Nonnull String state, @Nonnull String ip, @Nonnull String httpAddress,\n+          @Nonnull String node) {\n+\n+        this.index = index;\n+        this.shard = shard;\n+        this.prirep = prirep;\n+        this.docs = docs;\n+        this.state = state;\n+        this.ip = ip;\n+        this.httpAddress = httpAddress;\n+        this.node = node;\n+    }\n+\n+    public String indexShard() {\n+        return index + \"-\" + shard;\n+    }\n+\n+    public String getIndex() {\n+        return index;\n+    }\n+\n+    public int getShard() {\n+        return shard;\n+    }\n+\n+    public Prirep getPrirep() {\n+        return prirep;\n+    }\n+\n+    public int getDocs() {\n+        return docs;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public String getIp() {\n+        return ip;\n+    }\n+\n+    public String getHttpAddress() {\n+        return httpAddress;\n+    }\n+\n+    public String getNode() {\n+        return node;\n+    }\n+\n+    public enum Prirep {\n+        p, r;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Shard{\" +\n+                \"index='\" + index + '\\'' +\n+                \", shard=\" + shard +\n+                \", prirep=\" + prirep +\n+                \", docs=\" + docs +\n+                \", state='\" + state + '\\'' +\n+                \", ip='\" + ip + '\\'' +\n+                \", httpAddress='\" + httpAddress + '\\'' +\n+                \", node='\" + node + '\\'' +\n+                '}';\n+    }\n+}\n", "next_change": null}]}}]}}, {"oid": "1cde6b85890dcf75198e4dc77f78a44eeea95dfc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1cde6b85890dcf75198e4dc77f78a44eeea95dfc", "message": "Set preferredLocalParallelism to 2\n\nThis avoids creating high number of processors on high core machines\n(like our jenkins slaves)", "committedDate": "2020-04-08T06:25:48Z", "type": "commit"}, {"oid": "edb53f3e0a0a97c616377f56a76966e6262bc671", "url": "https://github.com/hazelcast/hazelcast-jet/commit/edb53f3e0a0a97c616377f56a76966e6262bc671", "message": "Fix checkstyle", "committedDate": "2020-04-08T06:50:49Z", "type": "commit"}, {"oid": "5d69ab5099428186ae4adb54f5f254a98f23401f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5d69ab5099428186ae4adb54f5f254a98f23401f", "message": "Remove elastic modules for 5 and 6 for now", "committedDate": "2020-04-08T06:51:51Z", "type": "commit"}, {"oid": "967a0338a7d6bc794377413a595d2cc5abea47bb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/967a0338a7d6bc794377413a595d2cc5abea47bb", "message": "Use Traverser.map", "committedDate": "2020-04-09T07:19:16Z", "type": "commit"}, {"oid": "66758e22dd09c4fdc788bfc886db66010c3a6db5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/66758e22dd09c4fdc788bfc886db66010c3a6db5", "message": "Fix logging to use logger", "committedDate": "2020-04-09T07:24:35Z", "type": "commit"}, {"oid": "361af1e61bf8811b4da75ff1cdcdd9fa3b774827", "url": "https://github.com/hazelcast/hazelcast-jet/commit/361af1e61bf8811b4da75ff1cdcdd9fa3b774827", "message": "Remove unnecessary name setter", "committedDate": "2020-04-09T07:29:52Z", "type": "commit"}, {"oid": "d881cadc221a471ccefb4d90c4622d53d1cb7c74", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d881cadc221a471ccefb4d90c4622d53d1cb7c74", "message": "Remove name setter on builders", "committedDate": "2020-04-09T07:34:13Z", "type": "commit"}, {"oid": "52b32b2a1350521e534923c00a457f3e5b85715c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/52b32b2a1350521e534923c00a457f3e5b85715c", "message": "Add checkNonNullAndSerializable util method\n\nThis combines Objects.requireNonNull with our Util.checkSerializable\ninto single method call. Useful in source/sink builders for checking\nparameters.", "committedDate": "2020-04-09T13:22:04Z", "type": "commit"}, {"oid": "d58156d9aaed86c647184fb6a94f26d63802bbb5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d58156d9aaed86c647184fb6a94f26d63802bbb5", "message": "Add annotations, make checkSerializable return given object", "committedDate": "2020-04-09T13:48:52Z", "type": "commit"}, {"oid": "ac3010591dd4f3e0798334e40f354524b2ece847", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ac3010591dd4f3e0798334e40f354524b2ece847", "message": "Fix double space", "committedDate": "2020-04-09T13:50:38Z", "type": "commit"}, {"oid": "55b6a7803dbca59e1d15306dc564aa54ad1f2cb5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/55b6a7803dbca59e1d15306dc564aa54ad1f2cb5", "message": "Remove annotations, not clear what to use on object", "committedDate": "2020-04-09T14:16:57Z", "type": "commit"}, {"oid": "ff5f32950ebed031d4dacdc078c227e0f3936825", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ff5f32950ebed031d4dacdc078c227e0f3936825", "message": "Merge branch 'util-non-null-serializable' into elastic", "committedDate": "2020-04-09T14:20:02Z", "type": "commit"}, {"oid": "cc30adba50939a955a94c3f2617040b333448295", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cc30adba50939a955a94c3f2617040b333448295", "message": "Move client helpers to own class, add @Nonnull/@Nullable annotations", "committedDate": "2020-04-09T14:27:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2NjU5Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r405366596", "body": "is ObjectMapper thread-safe? wouldn't it be better to use mapUsingService?", "bodyText": "is ObjectMapper thread-safe? wouldn't it be better to use mapUsingService?", "bodyHTML": "<p dir=\"auto\">is ObjectMapper thread-safe? wouldn't it be better to use mapUsingService?</p>", "author": "cangencer", "createdAt": "2020-04-08T08:58:01Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {\n+\n+    public static void main(String[] args) {\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();", "originalCommit": "5d69ab5099428186ae4adb54f5f254a98f23401f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MzIwMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420063203", "bodyText": "Yes, it is thread-safe (with the exception that all ObjectMapper's configuration must be done before first use, but there the defaults are used).\nI am not sure. ObjectMapper is serializable, so it can be used with map:\nObjectMapper mapper = new ObjectMapper();\n...\n .map(json -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {})\n\nvs\nServiceFactory<?, ObjectMapper> service = ServiceFactories.sharedService((context) -> new ObjectMapper());\n...\n.mapUsingService(service, (mapper, json) -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {}))\n\nThe one bit I don't like here is the new TypeReference<Map<String, Object>>() {}), which we could cache inside a service. But then the service wouldn't be just the ObjectMapper, which would complicate the example", "author": "frant-hartm", "createdAt": "2020-05-05T12:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2NjU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "52b32b2a1350521e534923c00a457f3e5b85715c", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\ndeleted file mode 100644\nindex cab5c0e57..000000000\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ /dev/null\n", "chunk": "@@ -1,64 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.examples.elastic;\n-\n-import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.hazelcast.jet.Jet;\n-import com.hazelcast.jet.JetInstance;\n-import com.hazelcast.jet.core.processor.SourceProcessors;\n-import com.hazelcast.jet.elastic.ElasticSinks;\n-import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.pipeline.Pipeline;\n-import org.elasticsearch.action.index.IndexRequest;\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.util.Map;\n-import java.util.stream.Stream;\n-\n-import static com.hazelcast.jet.pipeline.Pipeline.create;\n-import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-public class ElasticSinkExample {\n-\n-    public static void main(String[] args) {\n-        try {\n-            ObjectMapper mapper = new ObjectMapper();\n-            Pipeline p = create();\n-            p.readFrom(files(\"src/main/resources/documents\"))\n-             .map(json -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n-             }))\n-             .writeTo(ElasticSinks.elastic(map ->\n-                     new IndexRequest(\"my-index\").source(map)\n-             ));\n-\n-            JetInstance jet = Jet.newJetInstance();\n-            jet.newJob(p).join();\n-        } catch (Exception e) {\n-            Jet.shutdownAll();\n-        }\n-    }\n-\n-    public static BatchSource<String> files(String directory) {\n-        return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n-                SourceProcessors.readFilesP(directory, \"*\", false,\n-                        path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));\n-    }\n-\n-}\n", "next_change": {"commit": "ff5f32950ebed031d4dacdc078c227e0f3936825", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nnew file mode 100644\nindex 000000000..cab5c0e57\n--- /dev/null\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {\n+\n+    public static void main(String[] args) {\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+            Pipeline p = create();\n+            p.readFrom(files(\"src/main/resources/documents\"))\n+             .map(json -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n+             }))\n+             .writeTo(ElasticSinks.elastic(map ->\n+                     new IndexRequest(\"my-index\").source(map)\n+             ));\n+\n+            JetInstance jet = Jet.newJetInstance();\n+            jet.newJob(p).join();\n+        } catch (Exception e) {\n+            Jet.shutdownAll();\n+        }\n+    }\n+\n+    public static BatchSource<String> files(String directory) {\n+        return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n+                SourceProcessors.readFilesP(directory, \"*\", false,\n+                        path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));\n+    }\n+\n+}\n", "next_change": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex cab5c0e57..905b03732 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -56,9 +58,8 @@ public class ElasticSinkExample {\n     }\n \n     public static BatchSource<String> files(String directory) {\n-        return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n-                SourceProcessors.readFilesP(directory, \"*\", false,\n-                        path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));\n+        return Sources.filesBuilder(directory)\n+                      .build(path -> Stream.of(new String(Files.readAllBytes(path), UTF_8)));\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NTkyNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407885924", "body": "could we add `@nullable` annotations here?", "bodyText": "could we add @nullable annotations here?", "bodyHTML": "<p dir=\"auto\">could we add <code>@nullable</code> annotations here?</p>", "author": "cangencer", "createdAt": "2020-04-14T06:01:57Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/util/Util.java", "diffHunk": "@@ -163,11 +163,12 @@ private static boolean diffHadOverflow(long a, long b, long diff) {\n      *\n      * @param object     object to check\n      * @param objectName object description for the exception\n+     * @return given object\n      * @throws IllegalArgumentException if {@code object} is not serializable\n      */\n-    public static void checkSerializable(Object object, String objectName) {\n+    public static <T> T checkSerializable(T object, String objectName) {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "731c7e6d7ff8afe1314b1307991990ba11e5f3aa", "changed_code": [{"header": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/util/Util.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/util/Util.java\nindex 97d76ca17..4b06dd27d 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/util/Util.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/util/Util.java\n", "chunk": "@@ -166,7 +167,8 @@ public final class Util {\n      * @return given object\n      * @throws IllegalArgumentException if {@code object} is not serializable\n      */\n-    public static <T> T checkSerializable(T object, String objectName) {\n+    @Nullable\n+    public static <T> T checkSerializable(@Nullable T object, @Nonnull String objectName) {\n         if (object == null) {\n             return null;\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzQwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407887405", "body": "can you use the naming convention we use? `when_NN_then_MM`", "bodyText": "can you use the naming convention we use? when_NN_then_MM", "bodyHTML": "<p dir=\"auto\">can you use the naming convention we use? <code>when_NN_then_MM</code></p>", "author": "cangencer", "createdAt": "2020-04-14T06:06:08Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.test.TestOutbox;\n+import com.hazelcast.jet.core.test.TestProcessorContext;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RequestOptions.Builder;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.lucene.search.TotalHits.Relation.EQUAL_TO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+public class ElasticProcessorTest {\n+\n+    public static final String HIT_SOURCE = \"{\\\"name\\\": \\\"Frantisek\\\"}\";\n+    public static final String HIT_SOURCE2 = \"{\\\"name\\\": \\\"Vladimir\\\"}\";\n+    public static final String SCROLL_ID = \"random-scroll-id\";\n+    public static final int OUTBOX_CAPACITY = 1000;\n+\n+    private static final String KEEP_ALIVE = \"42m\";\n+\n+    private ElasticProcessor<String> processor;\n+    private SerializableRestClient mockClient;\n+    private SearchResponse response;\n+    private TestOutbox outbox;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockClient = SerializableRestClient.instanceHolder = mock(SerializableRestClient.class, RETURNS_DEEP_STUBS);\n+        // Mocks returning mocks is not generally recommended, but the setup of empty SearchResponse is even uglier\n+        // See org.elasticsearch.action.search.SearchResponse#empty\n+        response = mock(SearchResponse.class);\n+        when(response.getScrollId()).thenReturn(SCROLL_ID);\n+        when(mockClient.search(any(), any())).thenReturn(response);\n+    }\n+\n+    private void createProcessor() throws Exception {\n+        createProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n+        createProcessor(optionsFn, emptyList(), false, false);\n+    }\n+\n+    private void createProcessor(List<Shard> shards) throws Exception {\n+        createProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                 boolean slicing, boolean coLocatedReading)\n+            throws Exception {\n+        createProcessor(optionsFn, shards, slicing, coLocatedReading, new TestProcessorContext());\n+    }\n+\n+    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                 boolean slicing, boolean coLocatedReading, TestProcessorContext context)\n+            throws Exception {\n+\n+        RestHighLevelClient client = mockClient;\n+        ElasticSourceBuilder<String> builder = new ElasticSourceBuilder<String>()\n+                .clientSupplier(() -> client)\n+                .searchRequestSupplier(() -> new SearchRequest(\"*\"))\n+                .optionsFn(optionsFn)\n+                .mapHitFn(SearchHit::getSourceAsString)\n+                .scrollKeepAlive(KEEP_ALIVE)\n+                .slicing(slicing)\n+                .coLocatedReading(coLocatedReading);\n+\n+        // This constructor calls the client so it has to be called after specific mock setup in each test method\n+        // rather than in setUp()\n+        processor = new ElasticProcessor<>(builder, shards);\n+        outbox = new TestOutbox(OUTBOX_CAPACITY);\n+        processor.init(outbox, context);\n+\n+    }\n+\n+    @Test\n+    public void shouldUseScrollSearch() throws Exception {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7be179019d94c3e0f4867a715bfadb5ab73c0cf5", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\nindex 2b02bfe32..fb2f54c7b 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n", "chunk": "@@ -85,53 +83,50 @@ public class ElasticProcessorTest {\n         when(mockClient.search(any(), any())).thenReturn(response);\n     }\n \n-    private void createProcessor() throws Exception {\n-        createProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n+    private TestSupport createProcessor() throws Exception {\n+        return createProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n     }\n \n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n-        createProcessor(optionsFn, emptyList(), false, false);\n+    private TestSupport createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n+        return createProcessor(optionsFn, emptyList(), false, false);\n     }\n \n-    private void createProcessor(List<Shard> shards) throws Exception {\n-        createProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n+    private TestSupport createProcessor(List<Shard> shards) throws Exception {\n+        return createProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n     }\n \n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n-                                 boolean slicing, boolean coLocatedReading)\n-            throws Exception {\n-        createProcessor(optionsFn, shards, slicing, coLocatedReading, new TestProcessorContext());\n-    }\n-\n-    private void createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n-                                 boolean slicing, boolean coLocatedReading, TestProcessorContext context)\n+    private TestSupport createProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                        boolean slicing, boolean coLocatedReading)\n             throws Exception {\n \n         RestHighLevelClient client = mockClient;\n-        ElasticSourceBuilder<String> builder = new ElasticSourceBuilder<String>()\n-                .clientSupplier(() -> client)\n-                .searchRequestSupplier(() -> new SearchRequest(\"*\"))\n-                .optionsFn(optionsFn)\n-                .mapHitFn(SearchHit::getSourceAsString)\n-                .scrollKeepAlive(KEEP_ALIVE)\n-                .slicing(slicing)\n-                .coLocatedReading(coLocatedReading);\n+        ElasticSourceConfiguration<String> configuration = new ElasticSourceConfiguration<String>(\n+                () -> client,\n+                RestHighLevelClient::close,\n+                () -> new SearchRequest(\"*\"),\n+                optionsFn,\n+                SearchHit::getSourceAsString,\n+                slicing,\n+                coLocatedReading,\n+                KEEP_ALIVE,\n+                2\n+        );\n \n         // This constructor calls the client so it has to be called after specific mock setup in each test method\n         // rather than in setUp()\n-        processor = new ElasticProcessor<>(builder, shards);\n-        outbox = new TestOutbox(OUTBOX_CAPACITY);\n-        processor.init(outbox, context);\n+        processor = new ElasticProcessor<>(configuration, shards);\n \n+        return TestSupport.verifyProcessor(() -> processor)\n+                .disableSnapshots();\n     }\n \n     @Test\n     public void shouldUseScrollSearch() throws Exception {\n         when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n \n-        createProcessor();\n+        TestSupport support = createProcessor();\n \n-        runProcessor();\n+        support.expectOutput(emptyList());\n \n         ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n         verify(mockClient).search(captor.capture(), any());\n", "next_change": {"commit": "184d7069eeb354bd1724e6e811dda5be1253f252", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\nindex fb2f54c7b..5f9feebba 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticProcessorTest.java\n", "chunk": "@@ -121,10 +121,10 @@ public class ElasticProcessorTest {\n     }\n \n     @Test\n-    public void shouldUseScrollSearch() throws Exception {\n+    public void when_runProcessor_then_executeSearchRequestWithScroll() throws Exception {\n         when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n \n-        TestSupport support = createProcessor();\n+        TestSupport support = runProcessor();\n \n         support.expectOutput(emptyList());\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4Nzc0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407887743", "body": "if you want it serial you should use `HazelcastSerialClassRunner`, but I don't see anything in the test that needs to be serialized. It's typically used when you can have multiple tests interfere with each other.", "bodyText": "if you want it serial you should use HazelcastSerialClassRunner, but I don't see anything in the test that needs to be serialized. It's typically used when you can have multiple tests interfere with each other.", "bodyHTML": "<p dir=\"auto\">if you want it serial you should use <code>HazelcastSerialClassRunner</code>, but I don't see anything in the test that needs to be serialized. It's typically used when you can have multiple tests interfere with each other.</p>", "author": "cangencer", "createdAt": "2020-04-14T06:07:20Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.test.SerialTest;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Category(SerialTest.class)", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\nindex 50ded09e3..1eb94b4d0 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n", "chunk": "@@ -18,19 +18,16 @@ package com.hazelcast.jet.elastic;\n \n import com.hazelcast.function.FunctionEx;\n import com.hazelcast.jet.pipeline.BatchSource;\n-import com.hazelcast.jet.test.SerialTest;\n import org.apache.http.HttpHost;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.client.RestClient;\n import org.elasticsearch.client.RestHighLevelClient;\n import org.jetbrains.annotations.NotNull;\n import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n-@Category(SerialTest.class)\n public class ElasticSourceBuilderTest {\n \n     @Test\n", "next_change": {"commit": "184d7069eeb354bd1724e6e811dda5be1253f252", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\nindex 1eb94b4d0..5061e9547 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n", "chunk": "@@ -31,7 +31,7 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;\n public class ElasticSourceBuilderTest {\n \n     @Test\n-    public void sourceHasCorrectName() {\n+    public void when_createElasticSourceUsingBuilder_then_sourceHasCorrectName() {\n         BatchSource<Object> source = builderWithRequiredParams()\n                 .build();\n         assertThat(source.name()).isEqualTo(\"elastic\");\n", "next_change": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\nindex 5061e9547..f825432c5 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n", "chunk": "@@ -40,16 +40,16 @@ public class ElasticSourceBuilderTest {\n     @NotNull\n     private ElasticSourceBuilder<Object> builderWithRequiredParams() {\n         return new ElasticSourceBuilder<>()\n-                .clientSupplier(() -> new RestHighLevelClient(RestClient.builder(new HttpHost(\"localhost\"))))\n-                .searchRequestSupplier(SearchRequest::new)\n-                .mapHitFn(FunctionEx.identity());\n+                .clientFn(() -> new RestHighLevelClient(RestClient.builder(new HttpHost(\"localhost\"))))\n+                .searchRequestFn(SearchRequest::new)\n+                .mapToItemFn(FunctionEx.identity());\n     }\n \n     @Test\n     public void when_createElasticSourceWithoutClientSupplier_then_throwException() {\n         assertThatThrownBy(() -> new ElasticSourceBuilder<>()\n-                .searchRequestSupplier(SearchRequest::new)\n-                .mapHitFn(FunctionEx.identity())\n+                .searchRequestFn(SearchRequest::new)\n+                .mapToItemFn(FunctionEx.identity())\n                 .build())\n                 .hasMessage(\"clientSupplier must be set\");\n     }\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\nindex f825432c5..ca9498412 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticSourceBuilderTest.java\n", "chunk": "@@ -51,25 +50,25 @@ public class ElasticSourceBuilderTest {\n                 .searchRequestFn(SearchRequest::new)\n                 .mapToItemFn(FunctionEx.identity())\n                 .build())\n-                .hasMessage(\"clientSupplier must be set\");\n+                .hasMessage(\"clientFn must be set\");\n     }\n \n     @Test\n     public void when_createElasticSourceWithoutSearchRequestSupplier_then_throwException() {\n         assertThatThrownBy(() -> new ElasticSourceBuilder<>()\n-                .clientFn(() -> new RestHighLevelClient(RestClient.builder(new HttpHost(\"localhost\"))))\n+                .clientFn(() -> RestClient.builder(new HttpHost(\"localhost\")))\n                 .mapToItemFn(FunctionEx.identity())\n                 .build())\n-                .hasMessage(\"searchRequestSupplier must be set\");\n+                .hasMessage(\"searchRequestFn must be set\");\n     }\n \n     @Test\n     public void when_createElasticSourceWithoutMapHitFnSupplier_then_throwException() {\n         assertThatThrownBy(() -> new ElasticSourceBuilder<>()\n-                .clientFn(() -> new RestHighLevelClient(RestClient.builder(new HttpHost(\"localhost\"))))\n+                .clientFn(() -> RestClient.builder(new HttpHost(\"localhost\")))\n                 .searchRequestFn(SearchRequest::new)\n                 .build())\n-                .hasMessage(\"mapHitFn must be set\");\n+                .hasMessage(\"mapToItemFn must be set\");\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4ODUwNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407888507", "body": "should use `HazelcastSerialClassRunner`", "bodyText": "should use HazelcastSerialClassRunner", "bodyHTML": "<p dir=\"auto\">should use <code>HazelcastSerialClassRunner</code></p>", "author": "cangencer", "createdAt": "2020-04-14T06:09:09Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalElasticSinkTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.test.SerialTest;\n+import org.junit.After;\n+import org.junit.experimental.categories.Category;\n+\n+/**\n+ * Test running single Jet member locally and Elastic in docker\n+ */\n+@Category(SerialTest.class)\n+public class LocalElasticSinkTest extends CommonElasticSinksTest {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalElasticSinkTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalElasticSinkTest.java\nindex da36369c3..2dfc4b8a8 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalElasticSinkTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalElasticSinkTest.java\n", "chunk": "@@ -19,14 +19,11 @@ package com.hazelcast.jet.elastic;\n import com.hazelcast.jet.JetInstance;\n import com.hazelcast.jet.JetTestInstanceFactory;\n import com.hazelcast.jet.config.JetConfig;\n-import com.hazelcast.jet.test.SerialTest;\n import org.junit.After;\n-import org.junit.experimental.categories.Category;\n \n /**\n  * Test running single Jet member locally and Elastic in docker\n  */\n-@Category(SerialTest.class)\n public class LocalElasticSinkTest extends CommonElasticSinksTest {\n \n     private JetTestInstanceFactory factory = new JetTestInstanceFactory();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4ODcxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407888712", "body": "should extend JetTestSupport", "bodyText": "should extend JetTestSupport", "bodyHTML": "<p dir=\"auto\">should extend JetTestSupport</p>", "author": "cangencer", "createdAt": "2020-04-14T06:09:46Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.bulk.BulkItemResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.indices.CreateIndexRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.ImmutableMap.of;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.elasticsearch.client.RequestOptions.DEFAULT;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+\n+/**\n+ * Base class for running Elasticsearch connector tests\n+ *\n+ * To use implement:\n+ * - {@link #elasticClientSupplier()}\n+ * - {@link #createJetInstance()}\n+ * Subclasses are free to cache\n+ */\n+public abstract class BaseElasticTest {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzE5MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420053190", "bodyText": "Some of the subclasses use single jet instance, some use in process cluster and some use docker cluster, so can't really use that.", "author": "frant-hartm", "createdAt": "2020-05-05T11:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4ODcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\nindex f00ab4480..8ad378ade 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\n", "chunk": "@@ -55,6 +57,7 @@ import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n  * - {@link #createJetInstance()}\n  * Subclasses are free to cache\n  */\n+@RunWith(HazelcastSerialClassRunner.class)\n public abstract class BaseElasticTest {\n \n     protected static final int BATCH_SIZE = 42;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTA1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407889053", "body": "we shouldn't do our own cluster management, JetTestSupport already provides this. Also see `TestInClusterSupport`", "bodyText": "we shouldn't do our own cluster management, JetTestSupport already provides this. Also see TestInClusterSupport", "bodyHTML": "<p dir=\"auto\">we shouldn't do our own cluster management, JetTestSupport already provides this. Also see <code>TestInClusterSupport</code></p>", "author": "cangencer", "createdAt": "2020-04-14T06:10:40Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.impl.util.Util;\n+import com.hazelcast.jet.test.SerialTest;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * Test running 3 local Jet members in a cluster and Elastic in docker\n+ */\n+@Category(SerialTest.class)\n+public class LocalClusterElasticSourcesTest extends CommonElasticSourcesTest {\n+\n+    // Cluster startup takes >1s, reusing the cluster between tests\n+    private static Supplier<JetInstance> jet = Util.memoize(() -> {\n+        JetTestInstanceFactory factory = new JetTestInstanceFactory();", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzU0OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420053549", "bodyText": "Already extending CommonElasticSourcesTest, which has subclasses not using cluster.\nIdeally the functionality of TestInClusterSupport should be provided as JUnit @Class rule.", "author": "frant-hartm", "createdAt": "2020-05-05T11:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\nindex 37c946704..9951a7a2e 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\n", "chunk": "@@ -20,15 +20,12 @@ import com.hazelcast.jet.JetInstance;\n import com.hazelcast.jet.JetTestInstanceFactory;\n import com.hazelcast.jet.config.JetConfig;\n import com.hazelcast.jet.impl.util.Util;\n-import com.hazelcast.jet.test.SerialTest;\n-import org.junit.experimental.categories.Category;\n \n import java.util.function.Supplier;\n \n /**\n  * Test running 3 local Jet members in a cluster and Elastic in docker\n  */\n-@Category(SerialTest.class)\n public class LocalClusterElasticSourcesTest extends CommonElasticSourcesTest {\n \n     // Cluster startup takes >1s, reusing the cluster between tests\n", "next_change": {"commit": "2088e131ef6550e26b6a198900eae3bed8cb830a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\nindex 9951a7a2e..c407c6034 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/LocalClusterElasticSourcesTest.java\n", "chunk": "@@ -28,14 +29,26 @@ import java.util.function.Supplier;\n  */\n public class LocalClusterElasticSourcesTest extends CommonElasticSourcesTest {\n \n+    private static JetInstance[] instances;\n+\n     // Cluster startup takes >1s, reusing the cluster between tests\n     private static Supplier<JetInstance> jet = Util.memoize(() -> {\n         JetTestInstanceFactory factory = new JetTestInstanceFactory();\n-        JetInstance[] instances = factory.newMembers(new JetConfig(), 3);\n-        Runtime.getRuntime().addShutdownHook(new Thread(factory::terminateAll));\n+        instances = factory.newMembers(new JetConfig(), 3);\n         return instances[0];\n     });\n \n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (instances != null) {\n+            for (JetInstance instance : instances) {\n+                instance.shutdown();\n+            }\n+            instances = null;\n+        }\n+    }\n+\n     @Override\n     protected JetInstance createJetInstance() {\n         return jet.get();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTk1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407889951", "body": "it's not type of function, but type of the output?", "bodyText": "it's not type of function, but type of the output?", "bodyHTML": "<p dir=\"auto\">it's not type of function, but type of the output?</p>", "author": "cangencer", "createdAt": "2020-04-14T06:13:23Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticProcessorMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * @param <T> type of the mapping function from {@link SearchHit} -> T", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5df6a8a5e59e60b37286b55aaf69edd93868591", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 53ba6d999..102e3fd9a 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -39,6 +39,16 @@ import static java.util.Objects.requireNonNull;\n  * Builder for Elasticsearch source which reads data from Elasticsearch and\n  * converts SearchHits using provided {@code mapHitFn}\n  *\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientSupplier(() -> client(host, port))\n+ *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n+ *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n  * @param <T> type of the mapping function from {@link SearchHit} -> T\n  * @since 4.1\n  */\n", "next_change": {"commit": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 102e3fd9a..5f3ee915d 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -49,7 +49,7 @@ import static java.util.Objects.requireNonNull;\n  *\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n- * @param <T> type of the mapping function from {@link SearchHit} -> T\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.1\n  */\n public class ElasticSourceBuilder<T> implements Serializable {\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 5f3ee915d..f62e61afc 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -52,9 +51,7 @@ import static java.util.Objects.requireNonNull;\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.1\n  */\n-public class ElasticSourceBuilder<T> implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n+public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n", "next_change": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex f62e61afc..7221eecea 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -36,30 +37,31 @@ import static java.util.Objects.requireNonNull;\n \n /**\n  * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n  * Usage:\n  * <pre>{@code\n  * BatchSource<String> source = new ElasticSourceBuilder<String>()\n- *   .clientSupplier(() -> client(host, port))\n- *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n- *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n  *   .build();\n  *\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n+ *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private SupplierEx<? extends RestHighLevelClient> clientFn;\n     private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n     private boolean slicing;\n     private boolean coLocatedReading;\n     private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 7221eecea..890489fe8 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -57,8 +56,7 @@ public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientFn;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<RestClientBuilder> clientFn;\n     private SupplierEx<SearchRequest> searchRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n     private FunctionEx<? super SearchHit, T> mapToItemFn;\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 890489fe8..c7bb596ad 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -49,12 +50,14 @@ import static java.util.Objects.requireNonNull;\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n  *\n+ * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.2\n  */\n public class ElasticSourceBuilder<T> {\n \n-    private static final String DEFAULT_NAME = \"elastic\";\n+    private static final String DEFAULT_NAME = \"elasticSource\";\n \n     private SupplierEx<RestClientBuilder> clientFn;\n     private SupplierEx<SearchRequest> searchRequestFn;\n", "next_change": {"commit": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex c7bb596ad..55f195a6f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -50,12 +50,13 @@ import static java.util.Objects.requireNonNull;\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n  *\n- * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ * Requires {@link #clientFn(SupplierEx)},\n+ * {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n  *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.2\n  */\n-public class ElasticSourceBuilder<T> {\n+public final class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elasticSource\";\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5MDEwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r407890105", "body": "what's `<R>`? I Think `<T>` is used everywhere else?", "bodyText": "what's <R>? I Think <T> is used everywhere else?", "bodyHTML": "<p dir=\"auto\">what's <code>&lt;R&gt;</code>? I Think <code>&lt;T&gt;</code> is used everywhere else?</p>", "author": "cangencer", "createdAt": "2020-04-14T06:13:47Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.impl.util.Util;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+\n+class ElasticProcessorSupplier<R> implements ProcessorSupplier {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6e45d92d877eaa832b57964e272f65bbf37d0a1", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex f91a24984..5a2ea3fe4 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -31,14 +31,14 @@ import java.util.Map;\n import static java.util.Collections.emptyList;\n import static java.util.Objects.requireNonNull;\n \n-class ElasticProcessorSupplier<R> implements ProcessorSupplier {\n+class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n \n-    private final ElasticSourceBuilder<R> builder;\n+    private final ElasticSourceBuilder<T> builder;\n \n     private final List<Shard> shards;\n     private Map<Integer, List<Shard>> shardsByProcessor;\n \n-    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<R> builder,\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<T> builder,\n                              @Nonnull List<Shard> shards) {\n         this.builder = requireNonNull(builder);\n         this.shards = requireNonNull(shards);\n", "next_change": {"commit": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nindex 5a2ea3fe4..a4a34d277 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n", "chunk": "@@ -18,37 +18,38 @@ package com.hazelcast.jet.elastic.impl;\n \n import com.hazelcast.jet.core.Processor;\n import com.hazelcast.jet.core.ProcessorSupplier;\n-import com.hazelcast.jet.elastic.ElasticSourceBuilder;\n+import com.hazelcast.jet.elastic.ElasticSourceConfiguration;\n import com.hazelcast.jet.impl.util.Util;\n \n import javax.annotation.Nonnull;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.IntStream;\n \n import static java.util.Collections.emptyList;\n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n \n class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n \n-    private final ElasticSourceBuilder<T> builder;\n+    private final ElasticSourceConfiguration<T> configuration;\n \n     private final List<Shard> shards;\n     private Map<Integer, List<Shard>> shardsByProcessor;\n \n-    ElasticProcessorSupplier(@Nonnull ElasticSourceBuilder<T> builder,\n+    ElasticProcessorSupplier(@Nonnull ElasticSourceConfiguration<T> configuration,\n                              @Nonnull List<Shard> shards) {\n-        this.builder = requireNonNull(builder);\n+        this.configuration = requireNonNull(configuration);\n         this.shards = requireNonNull(shards);\n     }\n \n \n     @Override\n     public void init(@Nonnull Context context) {\n-        if (builder.coLocatedReading()) {\n-            if (builder.slicing()) {\n+        if (configuration.coLocatedReading()) {\n+            if (configuration.slicing()) {\n                 shardsByProcessor = new HashMap<>();\n                 for (int i = 0; i < context.localParallelism(); i++) {\n                     shardsByProcessor.put(i, shards);\n", "next_change": {"commit": "0cbdf82d211e0d4c6e4058870360c02971521771", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nsimilarity index 77%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\nindex a4a34d277..4d53b303d 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticProcessorSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePSupplier.java\n", "chunk": "@@ -48,8 +48,8 @@ class ElasticProcessorSupplier<T> implements ProcessorSupplier {\n \n     @Override\n     public void init(@Nonnull Context context) {\n-        if (configuration.coLocatedReading()) {\n-            if (configuration.slicing()) {\n+        if (configuration.isCoLocatedReadingEnabled()) {\n+            if (configuration.isSlicingEnabled()) {\n                 shardsByProcessor = new HashMap<>();\n                 for (int i = 0; i < context.localParallelism(); i++) {\n                     shardsByProcessor.put(i, shards);\n", "next_change": null}]}}]}}]}}, {"oid": "e5df6a8a5e59e60b37286b55aaf69edd93868591", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e5df6a8a5e59e60b37286b55aaf69edd93868591", "message": "Add example usage for builders", "committedDate": "2020-04-14T07:05:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzMTU2Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420031567", "body": "There is `ElasticBaseTest` and `BaseElasticTest`. This naming is really confusing.", "bodyText": "There is ElasticBaseTest and BaseElasticTest. This naming is really confusing.", "bodyHTML": "<p dir=\"auto\">There is <code>ElasticBaseTest</code> and <code>BaseElasticTest</code>. This naming is really confusing.</p>", "author": "olukas", "createdAt": "2020-05-05T11:13:02Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticBaseTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.JetTestSupport;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.get.MultiGetItemResponse;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.elasticsearch.ElasticsearchContainer;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class ElasticBaseTest extends JetTestSupport {", "originalCommit": "cc30adba50939a955a94c3f2617040b333448295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDE2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r420050168", "bodyText": "Removed ElasticBaseTest and associated ElasticSinkTest. The same is covered in CommonElasticSinksTest", "author": "frant-hartm", "createdAt": "2020-05-05T11:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzMTU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "09fb9c080d792207cdf807de6eb3c47373c8c051", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticBaseTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticBaseTest.java\ndeleted file mode 100644\nindex a444438f9..000000000\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/ElasticBaseTest.java\n+++ /dev/null\n", "chunk": "@@ -1,123 +0,0 @@\n-/*\n- * Copyright 2020 Hazelcast Inc.\n- *\n- * Licensed under the Hazelcast Community License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://hazelcast.com/hazelcast-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.elastic;\n-\n-import com.hazelcast.collection.IList;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.jet.JetInstance;\n-import com.hazelcast.jet.core.JetTestSupport;\n-import org.apache.http.HttpHost;\n-import org.elasticsearch.action.get.MultiGetItemResponse;\n-import org.elasticsearch.action.get.MultiGetRequest;\n-import org.elasticsearch.action.get.MultiGetResponse;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.testcontainers.containers.Network;\n-import org.testcontainers.elasticsearch.ElasticsearchContainer;\n-\n-import java.io.IOException;\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class ElasticBaseTest extends JetTestSupport {\n-\n-    public static final String ELASTICSEARCH_IMAGE = \"elasticsearch:7.6.1\";\n-\n-    private static final int OBJECT_COUNT = 20;\n-\n-    @Rule\n-    public ElasticsearchContainer container =\n-            new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n-            .withNetwork(Network.newNetwork());\n-    JetInstance jet;\n-    IList<User> userList;\n-    String indexName = \"users\";\n-    private RestHighLevelClient client;\n-\n-    @Before\n-    public void setupBase() {\n-        container.start();\n-        client = createClient(container.getHttpHostAddress());\n-\n-        jet = createJetMember();\n-\n-        userList = jet.getList(\"userList\");\n-        for (int i = 0; i < OBJECT_COUNT; i++) {\n-            userList.add(new User(\"user-\" + i, i));\n-        }\n-    }\n-\n-    @After\n-    public void cleanupBase() throws IOException {\n-        container.stop();\n-        client.close();\n-        jet.shutdown();\n-    }\n-\n-    void assertIndexes() throws IOException {\n-        MultiGetRequest multiGetRequest = new MultiGetRequest();\n-        for (int i = 0; i < OBJECT_COUNT; i++) {\n-            multiGetRequest.add(new MultiGetRequest.Item(indexName, String.valueOf(i)));\n-        }\n-        MultiGetResponse multiGetResponse = client.mget(multiGetRequest, RequestOptions.DEFAULT);\n-        MultiGetItemResponse[] responses = multiGetResponse.getResponses();\n-        assertEquals(OBJECT_COUNT, responses.length);\n-        for (int i = 0; i < OBJECT_COUNT; i++) {\n-            MultiGetItemResponse itemResponse = responses[i];\n-            assertNull(itemResponse.getFailure());\n-            assertTrue(itemResponse.getResponse().isExists());\n-        }\n-    }\n-\n-    static RestHighLevelClient createClient(String containerAddress) {\n-        return new RestHighLevelClient(RestClient.builder(HttpHost.create(containerAddress)));\n-    }\n-\n-    static FunctionEx<User, IndexRequest> indexFn(String indexName) {\n-        return user -> {\n-            IndexRequest request = new IndexRequest(indexName);\n-            request.id(String.valueOf(user.age));\n-            Map<String, Object> jsonMap = new HashMap<>();\n-            jsonMap.put(\"name\", user.name);\n-            jsonMap.put(\"age\", user.age);\n-            request.source(jsonMap);\n-            return request;\n-        };\n-    }\n-\n-    static final class User implements Serializable {\n-\n-        final String name;\n-        final int age;\n-\n-        User(String name, int age) {\n-            this.name = name;\n-            this.age = age;\n-        }\n-\n-    }\n-}\n", "next_change": null}]}}, {"oid": "09fb9c080d792207cdf807de6eb3c47373c8c051", "url": "https://github.com/hazelcast/hazelcast-jet/commit/09fb9c080d792207cdf807de6eb3c47373c8c051", "message": "Remove old sink test (covered in CommonElasticSinksTest)", "committedDate": "2020-05-05T11:50:21Z", "type": "commit"}, {"oid": "d6e45d92d877eaa832b57964e272f65bbf37d0a1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d6e45d92d877eaa832b57964e272f65bbf37d0a1", "message": "Rename type parameter", "committedDate": "2020-05-05T11:51:57Z", "type": "commit"}, {"oid": "ca1733e769f919d20ee6af72387d4c86fe1a5581", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ca1733e769f919d20ee6af72387d4c86fe1a5581", "message": "Apply feedback", "committedDate": "2020-05-05T13:48:38Z", "type": "commit"}, {"oid": "731c7e6d7ff8afe1314b1307991990ba11e5f3aa", "url": "https://github.com/hazelcast/hazelcast-jet/commit/731c7e6d7ff8afe1314b1307991990ba11e5f3aa", "message": "Merge branch 'master' into elastic", "committedDate": "2020-05-05T13:49:56Z", "type": "commit"}, {"oid": "2088e131ef6550e26b6a198900eae3bed8cb830a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2088e131ef6550e26b6a198900eae3bed8cb830a", "message": "Shutdown local cluster in @AfterClass", "committedDate": "2020-05-05T14:01:24Z", "type": "commit"}, {"oid": "6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6a491c8a0ed98668fcaa202055e1e4bf72ffe032", "message": "Make source builder not Serializable, use ElasticSourceConfiguration instead", "committedDate": "2020-05-05T14:34:26Z", "type": "commit"}, {"oid": "248566bfbac0e8e512f74aebf0bb0ad15f0c069b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/248566bfbac0e8e512f74aebf0bb0ad15f0c069b", "message": "Remove getters in ElasticSinkBuilder", "committedDate": "2020-05-06T07:00:08Z", "type": "commit"}, {"oid": "33840661a56a70eda8ea3bf44cd688b69d0a9fac", "url": "https://github.com/hazelcast/hazelcast-jet/commit/33840661a56a70eda8ea3bf44cd688b69d0a9fac", "message": "Remove readme files (leftover from contrib repo migration)", "committedDate": "2020-05-06T12:18:46Z", "type": "commit"}, {"oid": "7be179019d94c3e0f4867a715bfadb5ab73c0cf5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7be179019d94c3e0f4867a715bfadb5ab73c0cf5", "message": "Use TestSupport to test elastic processor", "committedDate": "2020-05-06T14:54:33Z", "type": "commit"}, {"oid": "4c76cc945015f7f290283d80b99b8ddd6934a008", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4c76cc945015f7f290283d80b99b8ddd6934a008", "message": "Add TDD document back", "committedDate": "2020-05-07T06:30:54Z", "type": "commit"}, {"oid": "1d2f47befb4c7dd30bb500dfbaf8c48830d1db98", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1d2f47befb4c7dd30bb500dfbaf8c48830d1db98", "message": "Fix markdown", "committedDate": "2020-05-07T07:43:25Z", "type": "commit"}, {"oid": "db7c0e9c01a733bcd4e2478c7d34a85e08d7817b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/db7c0e9c01a733bcd4e2478c7d34a85e08d7817b", "message": "Remove unecessary log4j file", "committedDate": "2020-05-07T07:44:10Z", "type": "commit"}, {"oid": "184d7069eeb354bd1724e6e811dda5be1253f252", "url": "https://github.com/hazelcast/hazelcast-jet/commit/184d7069eeb354bd1724e6e811dda5be1253f252", "message": "Rename tests to follow given_*when_*then_* pattern", "committedDate": "2020-05-07T12:34:42Z", "type": "commit"}, {"oid": "518872d6b58007ff1510f7af836ed71b51256074", "url": "https://github.com/hazelcast/hazelcast-jet/commit/518872d6b58007ff1510f7af836ed71b51256074", "message": "Rename elastic source classes to follow convention", "committedDate": "2020-05-11T06:07:01Z", "type": "commit"}, {"oid": "0cbdf82d211e0d4c6e4058870360c02971521771", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0cbdf82d211e0d4c6e4058870360c02971521771", "message": "Rename methods to enable slicing and co-located reading", "committedDate": "2020-05-11T06:11:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2ODIyMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422868223", "body": "you can make the javadoc a bit nicer here, for example you can have the main description in the top and then the param can be short, maybe showing an example. We should avoid javadoc like `set X`, and you can show some example code as well.", "bodyText": "you can make the javadoc a bit nicer here, for example you can have the main description in the top and then the param can be short, maybe showing an example. We should avoid javadoc like set X, and you can show some example code as well.", "bodyHTML": "<p dir=\"auto\">you can make the javadoc a bit nicer here, for example you can have the main description in the top and then the param can be short, maybe showing an example. We should avoid javadoc like <code>set X</code>, and you can show some example code as well.</p>", "author": "cangencer", "createdAt": "2020-05-11T08:24:10Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the mapItemFn", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..9fac832bb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -94,33 +102,62 @@ public class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 9fac832bb..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -155,8 +145,8 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n      * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2ODM3NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422868375", "body": "a more descriptive name would `mapToRequestFn`", "bodyText": "a more descriptive name would mapToRequestFn", "bodyHTML": "<p dir=\"auto\">a more descriptive name would <code>mapToRequestFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:24:24Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n+        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the mapItemFn\n+     *\n+     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..9fac832bb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -94,33 +102,62 @@ public class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 9fac832bb..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -155,8 +145,8 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n      * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2ODYxMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422868610", "body": "javadoc is lacking, what does it do?", "bodyText": "javadoc is lacking, what does it do?", "bodyHTML": "<p dir=\"auto\">javadoc is lacking, what does it do?</p>", "author": "cangencer", "createdAt": "2020-05-11T08:24:48Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..9fac832bb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -94,33 +102,62 @@ public class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 9fac832bb..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -155,8 +145,8 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n      * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2OTEwMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422869103", "body": "we use the convention `bulkRequestFn` typically for all functional interfaces", "bodyText": "we use the convention bulkRequestFn typically for all functional interfaces", "bodyHTML": "<p dir=\"auto\">we use the convention <code>bulkRequestFn</code> typically for all functional interfaces</p>", "author": "cangencer", "createdAt": "2020-05-11T08:25:34Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n+        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     *\n+     * @param destroyFn destroy function\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n+        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     *\n+     * @param bulkRequestSupplier supplier for the bulk request\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..9fac832bb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -94,33 +102,62 @@ public class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 9fac832bb..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -155,8 +145,8 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html#java-rest-low-usage-request-options\">\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n      * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2OTI2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422869265", "body": "`clientFn`. See other comments regarding javadoc", "bodyText": "clientFn. See other comments regarding javadoc", "bodyHTML": "<p dir=\"auto\"><code>clientFn</code>. See other comments regarding javadoc</p>", "author": "cangencer", "createdAt": "2020-05-11T08:25:50Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";\n+\n+    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier\n+     *\n+     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..9fac832bb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -41,44 +41,52 @@ import static java.util.Objects.requireNonNull;\n  * Builder for Elasticsearch Sink\n  * <p>\n  * The Sink first maps items from the pipeline using the provided\n- * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * {@link #mapToRequestFn(FunctionEx)} and then using {@link BulkRequest}.\n  * <p>\n  * {@link BulkRequest#BulkRequest()} is used by default, it can be\n- * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ * modified by providing custom {@link #bulkRequestFn(SupplierEx)}\n  *\n  * <p>\n  * Usage:\n  * <pre>{@code\n  * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n- *   .clientSupplier(() -> ElasticClients.client(host, port))\n- *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .clientFn(() -> ElasticClients.client(host, port))\n+ *   .mapToRequestFn(item -> new IndexRequest(\"my-index\").source(item))\n  *   .build();\n  * }</pre>\n  * <p>\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ * Requires {@link #clientFn(SupplierEx)} and {@link #mapToRequestFn(FunctionEx)}.\n  *\n  * @param <T>\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSinkBuilder<T> implements Serializable {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private SupplierEx<? extends RestHighLevelClient> clientFn;\n     private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private SupplierEx<BulkRequest> bulkRequestFn = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n     private int preferredLocalParallelism = 2;\n \n     /**\n-     * Set the client supplier\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n      *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<? extends RestHighLevelClient> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n         return this;\n     }\n \n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 9fac832bb..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -85,22 +84,11 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param clientFn supplier function returning configured Elasticsearch REST client\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<? extends RestHighLevelClient> clientFn) {\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n         this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n         return this;\n     }\n \n-    /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n-     *\n-     * @param destroyFn destroy function\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n-        return this;\n-    }\n-\n     /**\n      * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n      * <p>\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2OTY2Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422869663", "body": "missing javadoc", "bodyText": "missing javadoc", "bodyHTML": "<p dir=\"auto\">missing javadoc</p>", "author": "cangencer", "createdAt": "2020-05-11T08:26:29Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.http.auth.AuthScope.ANY;\n+\n+public final class ElasticClients {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 129338f31..7b0507bdb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -27,6 +27,9 @@ import javax.annotation.Nonnull;\n \n import static org.apache.http.auth.AuthScope.ANY;\n \n+/**\n+ * Collection of convenience factory methods for Elastic's {@link RestHighLevelClient}\n+ */\n public final class ElasticClients {\n \n     private static final int DEFAULT_PORT = 9200;\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 7b0507bdb..81202a52f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -16,19 +16,26 @@\n \n package com.hazelcast.jet.elastic;\n \n+import com.hazelcast.function.SupplierEx;\n import org.apache.http.HttpHost;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.CredentialsProvider;\n import org.apache.http.impl.client.BasicCredentialsProvider;\n import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.RestClientBuilder;\n \n import javax.annotation.Nonnull;\n \n import static org.apache.http.auth.AuthScope.ANY;\n \n /**\n- * Collection of convenience factory methods for Elastic's {@link RestHighLevelClient}\n+ * Collection of convenience factory methods for Elastic's {@link RestClientBuilder}\n+ * <p>\n+ * Supposed to be used as a parameter to {@link ElasticSourceBuilder#clientFn(SupplierEx)} and\n+ * {@link ElasticSinkBuilder#clientFn(SupplierEx)}, for example:\n+ * <pre>{@code\n+ * builder.clientFn(() -> client());\n+ * }</pre>\n  */\n public final class ElasticClients {\n \n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 81202a52f..def6b9450 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -31,8 +31,8 @@ import static org.apache.http.auth.AuthScope.ANY;\n /**\n  * Collection of convenience factory methods for Elastic's {@link RestClientBuilder}\n  * <p>\n- * Supposed to be used as a parameter to {@link ElasticSourceBuilder#clientFn(SupplierEx)} and\n- * {@link ElasticSinkBuilder#clientFn(SupplierEx)}, for example:\n+ * Supposed to be used as a parameter to {@link ElasticSourceBuilder#clientFn(SupplierEx)}\n+ * and {@link ElasticSinkBuilder#clientFn(SupplierEx)}, for example:\n  * <pre>{@code\n  * builder.clientFn(() -> client());\n  * }</pre>\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2OTc1MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422869750", "body": "missing javadoc", "bodyText": "missing javadoc", "bodyHTML": "<p dir=\"auto\">missing javadoc</p>", "author": "cangencer", "createdAt": "2020-05-11T08:26:39Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.http.auth.AuthScope.ANY;\n+\n+public final class ElasticClients {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticClients() {\n+    }\n+\n+    @Nonnull\n+    public static RestHighLevelClient client() {\n+        return client(\"localhost\", DEFAULT_PORT);\n+    }\n+\n+    @Nonnull\n+    public static RestHighLevelClient client(@Nonnull String hostname, int port) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 129338f31..7b0507bdb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -34,11 +37,17 @@ public final class ElasticClients {\n     private ElasticClients() {\n     }\n \n+    /**\n+     * Create Elastic client for an instance running on localhost on default port (9200)\n+     */\n     @Nonnull\n     public static RestHighLevelClient client() {\n         return client(\"localhost\", DEFAULT_PORT);\n     }\n \n+    /**\n+     * Create Elastic client for an instance running on given host and port\n+     */\n     @Nonnull\n     public static RestHighLevelClient client(@Nonnull String hostname, int port) {\n         return new RestHighLevelClient(\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 7b0507bdb..fb912f75c 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -49,10 +50,8 @@ public final class ElasticClients {\n      * Create Elastic client for an instance running on given host and port\n      */\n     @Nonnull\n-    public static RestHighLevelClient client(@Nonnull String hostname, int port) {\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-        );\n+    public static RestClientBuilder client(@Nonnull String hostname, int port) {\n+        return RestClient.builder(new HttpHost(hostname, port));\n     }\n \n     /**\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex fb912f75c..81202a52f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -47,7 +53,7 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Create Elastic client for an instance running on given host and port\n+     * Convenience method to create {@link RestClientBuilder} with given hostname and port\n      */\n     @Nonnull\n     public static RestClientBuilder client(@Nonnull String hostname, int port) {\n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 81202a52f..def6b9450 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -53,7 +54,8 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestClientBuilder} with given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with given\n+     * hostname and port\n      */\n     @Nonnull\n     public static RestClientBuilder client(@Nonnull String hostname, int port) {\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 81202a52f..def6b9450 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -61,7 +63,8 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestClientBuilder} with basic authentication and given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with basic authentication\n+     * and given hostname and port\n      * <p>\n      * Usage:\n      * <pre>{@code\n", "next_change": null}]}}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex fb912f75c..81202a52f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -55,12 +61,12 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with basic authentication and given hostname and port\n      * <p>\n      * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n+     * <pre>{@code\n+     * BatchSource<SearchHit> source = elastic(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * }</pre>\n      */\n     @Nonnull\n     public static RestClientBuilder client(\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2OTc5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422869792", "body": "missing javadoc", "bodyText": "missing javadoc", "bodyHTML": "<p dir=\"auto\">missing javadoc</p>", "author": "cangencer", "createdAt": "2020-05-11T08:26:44Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.http.auth.AuthScope.ANY;\n+\n+public final class ElasticClients {\n+\n+    private static final int DEFAULT_PORT = 9200;\n+\n+    private ElasticClients() {\n+    }\n+\n+    @Nonnull\n+    public static RestHighLevelClient client() {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 129338f31..7b0507bdb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -34,11 +37,17 @@ public final class ElasticClients {\n     private ElasticClients() {\n     }\n \n+    /**\n+     * Create Elastic client for an instance running on localhost on default port (9200)\n+     */\n     @Nonnull\n     public static RestHighLevelClient client() {\n         return client(\"localhost\", DEFAULT_PORT);\n     }\n \n+    /**\n+     * Create Elastic client for an instance running on given host and port\n+     */\n     @Nonnull\n     public static RestHighLevelClient client(@Nonnull String hostname, int port) {\n         return new RestHighLevelClient(\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 7b0507bdb..fb912f75c 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -49,10 +50,8 @@ public final class ElasticClients {\n      * Create Elastic client for an instance running on given host and port\n      */\n     @Nonnull\n-    public static RestHighLevelClient client(@Nonnull String hostname, int port) {\n-        return new RestHighLevelClient(\n-                RestClient.builder(new HttpHost(hostname, port))\n-        );\n+    public static RestClientBuilder client(@Nonnull String hostname, int port) {\n+        return RestClient.builder(new HttpHost(hostname, port));\n     }\n \n     /**\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex fb912f75c..81202a52f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -47,7 +53,7 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Create Elastic client for an instance running on given host and port\n+     * Convenience method to create {@link RestClientBuilder} with given hostname and port\n      */\n     @Nonnull\n     public static RestClientBuilder client(@Nonnull String hostname, int port) {\n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 81202a52f..def6b9450 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -53,7 +54,8 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestClientBuilder} with given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with given\n+     * hostname and port\n      */\n     @Nonnull\n     public static RestClientBuilder client(@Nonnull String hostname, int port) {\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex 81202a52f..def6b9450 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -61,7 +63,8 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestClientBuilder} with basic authentication and given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with basic authentication\n+     * and given hostname and port\n      * <p>\n      * Usage:\n      * <pre>{@code\n", "next_change": null}]}}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\nindex fb912f75c..81202a52f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticClients.java\n", "chunk": "@@ -55,12 +61,12 @@ public final class ElasticClients {\n     }\n \n     /**\n-     * Convenience method to create {@link RestHighLevelClient} with basic authentication and given hostname and port\n+     * Convenience method to create {@link RestClientBuilder} with basic authentication and given hostname and port\n      * <p>\n      * Usage:\n-     * <pre>\n-     *   BatchSource<SearchHit> source = elasticsearch(() -> client(\"user\", \"password\", \"host\", 9200));\n-     * </pre>\n+     * <pre>{@code\n+     * BatchSource<SearchHit> source = elastic(() -> client(\"user\", \"password\", \"host\", 9200));\n+     * }</pre>\n      */\n     @Nonnull\n     public static RestClientBuilder client(\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MDAxNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422870016", "body": "elasticsearch 7", "bodyText": "elasticsearch 7", "bodyHTML": "<p dir=\"auto\">elasticsearch 7</p>", "author": "cangencer", "createdAt": "2020-05-11T08:27:04Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Contains sources and sinks for Elasticsearch", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\nindex 0f813f41c..f8e5de575 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\n", "chunk": "@@ -15,6 +15,6 @@\n  */\n \n /**\n- * Contains sources and sinks for Elasticsearch\n+ * Contains sources and sinks for Elasticsearch 7\n  */\n package com.hazelcast.jet.elastic;\n", "next_change": {"commit": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\nindex f8e5de575..7c2355f4c 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/package-info.java\n", "chunk": "@@ -16,5 +16,7 @@\n \n /**\n  * Contains sources and sinks for Elasticsearch 7\n+ *\n+ * @since 4.2\n  */\n package com.hazelcast.jet.elastic;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MDYwMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422870602", "body": "4.2", "bodyText": "4.2", "bodyHTML": "<p dir=\"auto\">4.2</p>", "author": "cangencer", "createdAt": "2020-05-11T08:28:00Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..44944dcd1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -29,7 +29,7 @@ import javax.annotation.Nonnull;\n  * Provides factory methods for Elasticsearch sources.\n  * Alternatively you can use {@link ElasticSourceBuilder}\n  *\n- * @since 4.1\n+ * @since 4.2\n  */\n public final class ElasticSources {\n \n", "next_change": {"commit": "b468d088bc37f58643c774eb3e2d60626b949ff4", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..018dba5f6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -37,10 +38,17 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Creates a source which queries local instance of Elasticsearch for all\n+     * documents\n      * <p>\n-     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n-     * and {@link #builder()}\n+     * Useful for quick prototyping. See other methods\n+     * {@link #elastic(SupplierEx, SupplierEx, FunctionEx)} and\n+     * {@link #builder()}\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic());\n+     * }</pre>\n      */\n     @Nonnull\n     public static BatchSource<String> elastic() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MTI4Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422871286", "body": "this requires you declare `T` upfront. normally we start with `Void` and then map it when map function is defined", "bodyText": "this requires you declare T upfront. normally we start with Void and then map it when map function is defined", "bodyHTML": "<p dir=\"auto\">this requires you declare <code>T</code> upfront. normally we start with <code>Void</code> and then map it when map function is defined</p>", "author": "cangencer", "createdAt": "2020-05-11T08:29:14Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic() {\n+        return elastic(ElasticClients::client);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(ElasticClients::client, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     *\n+     * @param clientSupplier        RestHighLevelClient supplier\n+     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n+     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>                   result type returned by the map function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+    ) {\n+        return ElasticSources.<T>builder()\n+                .clientSupplier(clientSupplier)\n+                .searchRequestSupplier(searchRequestSupplier)\n+                .mapHitFn(mapHitFn)\n+                .build();\n+    }\n+\n+    /**\n+     * Returns {@link ElasticSourceBuilder}\n+     *\n+     * @param <T> result type returned by the map function\n+     */\n+    @Nonnull\n+    public static <T> ElasticSourceBuilder<T> builder() {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MzA2Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r424053066", "bodyText": "I tried to mimic what's in SourceBuilder, could you please check this is what you had in mind? (I did the same for ElasticSinkBuilder as well).", "author": "frant-hartm", "createdAt": "2020-05-12T21:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -48,68 +54,102 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function.\n      * Queries all indexes for all documents.\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     * ));\n+     * }</pre>\n+     *\n+     * @param clientFn supplier function returning configured RestClientBuilder\n      */\n     @Nonnull\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        return elastic(clientFn, SearchHit::getSourceAsString);\n     }\n \n     /**\n      * Creates a source which queries local instance of Elasticsearch for all documents\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n+     *\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+        return ElasticSources.builder()\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MjM3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422872373", "body": "should use builder. and naming should be consistent with other sources, `clientFn` ", "bodyText": "should use builder. and naming should be consistent with other sources, clientFn", "bodyHTML": "<p dir=\"auto\">should use builder. and naming should be consistent with other sources, <code>clientFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:30:49Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic() {\n+        return elastic(ElasticClients::client);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(ElasticClients::client, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..44944dcd1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -62,44 +62,44 @@ public final class ElasticSources {\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n+     * Uses provided mapToItemFn to map results.\n      * Queries all indexes for all documents.\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    RestHighLevelClient supplier\n+     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        RestHighLevelClient supplier\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n         return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -67,36 +93,52 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapToItemFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn    RestHighLevelClient supplier\n-     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n      * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n         return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn        RestHighLevelClient supplier\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n      * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n-     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n      * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n+        return ElasticSources.builder()\n                 .clientFn(clientFn)\n                 .searchRequestFn(searchRequestFn)\n                 .mapToItemFn(mapToItemFn)\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -104,12 +146,10 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MjY2Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422872667", "body": "`mapToItemFn`", "bodyText": "mapToItemFn", "bodyHTML": "<p dir=\"auto\"><code>mapToItemFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:31:15Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic() {\n+        return elastic(ElasticClients::client);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..44944dcd1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -53,8 +53,8 @@ public final class ElasticSources {\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n      */\n     @Nonnull\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n-        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientFn) {\n+        return elastic(clientFn, SearchHit::getSourceAsString);\n     }\n \n     /**\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2aee5247b 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -53,7 +54,7 @@ public final class ElasticSources {\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n      */\n     @Nonnull\n-    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientFn) {\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n         return elastic(clientFn, SearchHit::getSourceAsString);\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 2aee5247b..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -49,9 +54,19 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function.\n      * Queries all indexes for all documents.\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     * ));\n+     * }</pre>\n+     *\n+     * @param clientFn supplier function returning configured RestClientBuilder\n      */\n     @Nonnull\n     public static BatchSource<String> elastic(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 2b762c635..ea72906fb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -74,8 +75,9 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries local instance of Elasticsearch for all documents\n-     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * Creates a source which queries local instance of Elasticsearch\n+     * for all documents. Uses {@link SearchHit#getSourceAsString()}\n+     * as mapping function\n      * <p>\n      * For example:\n      * <pre>{@code\n", "next_change": {"commit": "b468d088bc37f58643c774eb3e2d60626b949ff4", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex ea72906fb..018dba5f6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -75,9 +76,9 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries local instance of Elasticsearch\n-     * for all documents. Uses {@link SearchHit#getSourceAsString()}\n-     * as mapping function\n+     * Creates a source which queries local instance of Elasticsearch for all\n+     * documents. Uses {@link SearchHit#getSourceAsString()} as mapping\n+     * function\n      * <p>\n      * For example:\n      * <pre>{@code\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex ea72906fb..018dba5f6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -86,7 +87,8 @@ public final class ElasticSources {\n      * ));\n      * }</pre>\n      *\n-     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param mapToItemFn function mapping the result from a SearchHit to a\n+     *                    result type\n      * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 2aee5247b..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -61,6 +76,16 @@ public final class ElasticSources {\n     /**\n      * Creates a source which queries local instance of Elasticsearch for all documents\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n+     *\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 2b762c635..ea72906fb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -93,8 +95,9 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n-     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained\n+     * from {@link RestClientBuilder} supplier function. Uses provided\n+     * {@code mapToItemFn} to map results. Queries all indexes for all documents.\n      * <p>\n      * For example:\n      * <pre>{@code\n", "next_change": {"commit": "b468d088bc37f58643c774eb3e2d60626b949ff4", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex ea72906fb..018dba5f6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -95,9 +97,10 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained\n-     * from {@link RestClientBuilder} supplier function. Uses provided\n-     * {@code mapToItemFn} to map results. Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from\n+     * {@link RestClientBuilder} supplier function. Uses provided\n+     * {@code mapToItemFn} to map results. Queries all indexes for all\n+     * documents.\n      * <p>\n      * For example:\n      * <pre>{@code\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..44944dcd1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -62,44 +62,44 @@ public final class ElasticSources {\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n+     * Uses provided mapToItemFn to map results.\n      * Queries all indexes for all documents.\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    RestHighLevelClient supplier\n+     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        RestHighLevelClient supplier\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n         return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -67,36 +93,52 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapToItemFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn    RestHighLevelClient supplier\n-     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n      * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n         return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn        RestHighLevelClient supplier\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n      * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n-     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n      * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n+        return ElasticSources.builder()\n                 .clientFn(clientFn)\n                 .searchRequestFn(searchRequestFn)\n                 .mapToItemFn(mapToItemFn)\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -104,12 +146,10 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MjgyNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422872827", "body": "`mapToItemFn`", "bodyText": "mapToItemFn", "bodyHTML": "<p dir=\"auto\"><code>mapToItemFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:31:31Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sources.\n+ * Alternatively you can use {@link ElasticSourceBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSources {\n+\n+    private ElasticSources() {\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * <p>\n+     * Useful for quick prototyping. See other methods {@link #elastic(SupplierEx, SupplierEx, FunctionEx)}\n+     * and {@link #builder()}\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic() {\n+        return elastic(ElasticClients::client);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Queries all indexes for all documents.\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static BatchSource<String> elastic(@Nonnull SupplierEx<RestHighLevelClient> clientSupplier) {\n+        return elastic(clientSupplier, SearchHit::getSourceAsString);\n+    }\n+\n+    /**\n+     * Creates a source which queries local instance of Elasticsearch for all documents\n+     * Uses {@link SearchHit#getSourceAsString()} as mapping function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n+        return elastic(ElasticClients::client, mapHitFn);\n+    }\n+\n+    /**\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * Uses provided mapHitFn to map results.\n+     * Queries all indexes for all documents.\n+     *\n+     * @param clientSupplier RestHighLevelClient supplier\n+     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>            result type returned by the map function\n+     */\n+    @Nonnull\n+    public static <T> BatchSource<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 67dc6bee3..44944dcd1 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -62,44 +62,44 @@ public final class ElasticSources {\n      * Uses {@link SearchHit#getSourceAsString()} as mapping function\n      */\n     @Nonnull\n-    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(ElasticClients::client, mapHitFn);\n+    public static <T> BatchSource<T> elastic(@Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(ElasticClients::client, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapHitFn to map results.\n+     * Uses provided mapToItemFn to map results.\n      * Queries all indexes for all documents.\n      *\n-     * @param clientSupplier RestHighLevelClient supplier\n-     * @param mapHitFn       supplier of a function mapping the result from SearchHit to a result type\n-     * @param <T>            result type returned by the map function\n+     * @param clientFn    RestHighLevelClient supplier\n+     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn) {\n-        return elastic(clientSupplier, SearchRequest::new, mapHitFn);\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n+        return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n      *\n-     * @param clientSupplier        RestHighLevelClient supplier\n-     * @param searchRequestSupplier supplier of a SearchRequest used to query for documents\n-     * @param mapHitFn              supplier of a function mapping the result from SearchHit to a target type\n-     * @param <T>                   result type returned by the map function\n+     * @param clientFn        RestHighLevelClient supplier\n+     * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n+     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull SupplierEx<SearchRequest> searchRequestSupplier,\n-            @Nonnull FunctionEx<? super SearchHit, T> mapHitFn\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n+            @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n         return ElasticSources.<T>builder()\n-                .clientSupplier(clientSupplier)\n-                .searchRequestSupplier(searchRequestSupplier)\n-                .mapHitFn(mapHitFn)\n+                .clientFn(clientFn)\n+                .searchRequestFn(searchRequestFn)\n+                .mapToItemFn(mapToItemFn)\n                 .build();\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -67,36 +93,52 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n-     * Uses provided mapToItemFn to map results.\n-     * Queries all indexes for all documents.\n+     * Creates a source which queries Elasticsearch using client obtained from {@link RestClientBuilder} supplier\n+     * function. Uses provided mapToItemFn to map results. Queries all indexes for all documents.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn    RestHighLevelClient supplier\n-     * @param mapToItemFn supplier of a function mapping the result from SearchHit to a result type\n+     * @param clientFn    supplier function returning configured RestClientBuilder\n+     * @param mapToItemFn function mapping the result from a SearchHit to a result type\n      * @param <T>         result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn) {\n         return elastic(clientFn, SearchRequest::new, mapToItemFn);\n     }\n \n     /**\n      * Creates a source which queries Elasticsearch using client obtained from {@link RestHighLevelClient} supplier.\n+     * <p>\n+     * For example:\n+     * <pre>{@code\n+     * pipeline.readFrom(ElasticSources.elastic(\n+     *   () -> ElasticClients.client(\"localhost\", 9200),\n+     *   () -> new SearchRequest(\"my-index\"),\n+     *   SearchHit::getSourceAsMap\n+     * ));\n+     * }</pre>\n      *\n-     * @param clientFn        RestHighLevelClient supplier\n+     * @param clientFn        supplier function returning configured RestClientBuilder\n      * @param searchRequestFn supplier function of a SearchRequest used to query for documents\n-     * @param mapToItemFn     supplier of a function mapping the result from SearchHit to a target type\n+     * @param mapToItemFn     function mapping the result from a SearchHit to a result type\n      * @param <T>             result type returned by the map function\n      */\n     @Nonnull\n     public static <T> BatchSource<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull SupplierEx<SearchRequest> searchRequestFn,\n             @Nonnull FunctionEx<? super SearchHit, T> mapToItemFn\n     ) {\n-        return ElasticSources.<T>builder()\n+        return ElasticSources.builder()\n                 .clientFn(clientFn)\n                 .searchRequestFn(searchRequestFn)\n                 .mapToItemFn(mapToItemFn)\n", "next_change": null}, {"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\nindex 44944dcd1..2b762c635 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSources.java\n", "chunk": "@@ -104,12 +146,10 @@ public final class ElasticSources {\n     }\n \n     /**\n-     * Returns {@link ElasticSourceBuilder}\n-     *\n-     * @param <T> result type returned by the map function\n+     * Returns new instance of {@link ElasticSourceBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSourceBuilder<T> builder() {\n+    public static ElasticSourceBuilder<Void> builder() {\n         return new ElasticSourceBuilder<>();\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MzAyNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422873024", "body": "`mapToRequestFn`", "bodyText": "mapToRequestFn", "bodyHTML": "<p dir=\"auto\"><code>mapToRequestFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:31:54Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sinks.\n+ * Alternatively you can use {@link ElasticSinkBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSinks {\n+\n+    private ElasticSinks() {\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n+     *\n+     * @param mapItemFn function that maps items from a stream to an indexing request\n+     */\n+    @Nonnull\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n+        return elastic(ElasticClients::client, mapItemFn);\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     *\n+     * @param clientSupplier client supplier\n+     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param <T>            type of incoming items\n+     */\n+    @Nonnull\n+    public static <T> Sink<T> elastic(\n+            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 886a614bd..9b6d093ee 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -38,28 +38,28 @@ public final class ElasticSinks {\n     /**\n      * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n      *\n-     * @param mapItemFn function that maps items from a stream to an indexing request\n+     * @param mapToRequestFn function that maps items from a stream to an indexing request\n      */\n     @Nonnull\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        return elastic(ElasticClients::client, mapItemFn);\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        return elastic(ElasticClients::client, mapToRequestFn);\n     }\n \n     /**\n-     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     * Creates an Elasticsearch sink, uses provided clientFn and mapToRequestFn\n      *\n-     * @param clientSupplier client supplier\n-     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param clientFn client supplier\n+     * @param mapToRequestFn      function that maps items from a stream to an indexing request\n      * @param <T>            type of incoming items\n      */\n     @Nonnull\n     public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n     ) {\n         return new ElasticSinkBuilder<T>()\n-                .clientSupplier(clientSupplier)\n-                .mapItemFn(mapItemFn)\n+                .clientFn(clientFn)\n+                .mapToRequestFn(mapToRequestFn)\n                 .build();\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 9b6d093ee..592c7ccb5 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -38,39 +38,40 @@ public final class ElasticSinks {\n     /**\n      * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n      *\n-     * @param mapToRequestFn function that maps items from a stream to an indexing request\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      */\n     @Nonnull\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+    public static <T> Sink<? super T> elastic(\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n         return elastic(ElasticClients::client, mapToRequestFn);\n     }\n \n     /**\n-     * Creates an Elasticsearch sink, uses provided clientFn and mapToRequestFn\n+     * Creates an Elasticsearch sink, uses a client obtained from clientFn and maps items using given mapToRequestFn\n      *\n-     * @param clientFn client supplier\n-     * @param mapToRequestFn      function that maps items from a stream to an indexing request\n+     * @param clientFn       supplier function returning configured RestClientBuilder\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      * @param <T>            type of incoming items\n      */\n     @Nonnull\n     public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n     ) {\n-        return new ElasticSinkBuilder<T>()\n+        // Avoid ElasticSinkBuilder<? super T> inferred from mapToRequestFn\n+        ElasticSinkBuilder<T> builder = new ElasticSinkBuilder<>()\n                 .clientFn(clientFn)\n-                .mapToRequestFn(mapToRequestFn)\n-                .build();\n+                .mapToRequestFn(mapToRequestFn);\n+        return builder.build();\n     }\n \n     /**\n-     * Returns {@link ElasticSinkBuilder}\n-     *\n-     * @param <T> type of the items in the pipeline\n+     * Returns new instance of {@link ElasticSinkBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSinkBuilder<T> builder() {\n-        return new ElasticSinkBuilder<T>();\n+    public static ElasticSinkBuilder<Void> builder() {\n+        return new ElasticSinkBuilder<>();\n     }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MzEyNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422873124", "body": "`mapToRequestFn`", "bodyText": "mapToRequestFn", "bodyHTML": "<p dir=\"auto\"><code>mapToRequestFn</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:32:02Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sinks.\n+ * Alternatively you can use {@link ElasticSinkBuilder}\n+ *\n+ * @since 4.1\n+ */\n+public final class ElasticSinks {\n+\n+    private ElasticSinks() {\n+    }\n+\n+    /**\n+     * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n+     *\n+     * @param mapItemFn function that maps items from a stream to an indexing request\n+     */\n+    @Nonnull\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 886a614bd..9b6d093ee 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -38,28 +38,28 @@ public final class ElasticSinks {\n     /**\n      * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n      *\n-     * @param mapItemFn function that maps items from a stream to an indexing request\n+     * @param mapToRequestFn function that maps items from a stream to an indexing request\n      */\n     @Nonnull\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        return elastic(ElasticClients::client, mapItemFn);\n+    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+        return elastic(ElasticClients::client, mapToRequestFn);\n     }\n \n     /**\n-     * Creates an Elasticsearch sink, uses provided clientSupplier and mapItemFn\n+     * Creates an Elasticsearch sink, uses provided clientFn and mapToRequestFn\n      *\n-     * @param clientSupplier client supplier\n-     * @param mapItemFn      function that maps items from a stream to an indexing request\n+     * @param clientFn client supplier\n+     * @param mapToRequestFn      function that maps items from a stream to an indexing request\n      * @param <T>            type of incoming items\n      */\n     @Nonnull\n     public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientSupplier,\n-            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn\n+            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n     ) {\n         return new ElasticSinkBuilder<T>()\n-                .clientSupplier(clientSupplier)\n-                .mapItemFn(mapItemFn)\n+                .clientFn(clientFn)\n+                .mapToRequestFn(mapToRequestFn)\n                 .build();\n     }\n \n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 9b6d093ee..592c7ccb5 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -38,39 +38,40 @@ public final class ElasticSinks {\n     /**\n      * Creates an Elasticsearch sink, uses a local instance of Elasticsearch\n      *\n-     * @param mapToRequestFn function that maps items from a stream to an indexing request\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      */\n     @Nonnull\n-    public static <T> Sink<T> elastic(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn) {\n+    public static <T> Sink<? super T> elastic(\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n         return elastic(ElasticClients::client, mapToRequestFn);\n     }\n \n     /**\n-     * Creates an Elasticsearch sink, uses provided clientFn and mapToRequestFn\n+     * Creates an Elasticsearch sink, uses a client obtained from clientFn and maps items using given mapToRequestFn\n      *\n-     * @param clientFn client supplier\n-     * @param mapToRequestFn      function that maps items from a stream to an indexing request\n+     * @param clientFn       supplier function returning configured RestClientBuilder\n+     * @param mapToRequestFn function that maps an item from a pipeline to an indexing request\n      * @param <T>            type of incoming items\n      */\n     @Nonnull\n     public static <T> Sink<T> elastic(\n-            @Nonnull SupplierEx<RestHighLevelClient> clientFn,\n+            @Nonnull SupplierEx<RestClientBuilder> clientFn,\n             @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n     ) {\n-        return new ElasticSinkBuilder<T>()\n+        // Avoid ElasticSinkBuilder<? super T> inferred from mapToRequestFn\n+        ElasticSinkBuilder<T> builder = new ElasticSinkBuilder<>()\n                 .clientFn(clientFn)\n-                .mapToRequestFn(mapToRequestFn)\n-                .build();\n+                .mapToRequestFn(mapToRequestFn);\n+        return builder.build();\n     }\n \n     /**\n-     * Returns {@link ElasticSinkBuilder}\n-     *\n-     * @param <T> type of the items in the pipeline\n+     * Returns new instance of {@link ElasticSinkBuilder}\n      */\n     @Nonnull\n-    public static <T> ElasticSinkBuilder<T> builder() {\n-        return new ElasticSinkBuilder<T>();\n+    public static ElasticSinkBuilder<Void> builder() {\n+        return new ElasticSinkBuilder<>();\n     }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MzI2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422873268", "body": "`4.2`", "bodyText": "4.2", "bodyHTML": "<p dir=\"auto\"><code>4.2</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:32:18Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Provides factory methods for Elasticsearch sinks.\n+ * Alternatively you can use {@link ElasticSinkBuilder}\n+ *\n+ * @since 4.1", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\nindex 886a614bd..9b6d093ee 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinks.java\n", "chunk": "@@ -28,7 +28,7 @@ import javax.annotation.Nonnull;\n  * Provides factory methods for Elasticsearch sinks.\n  * Alternatively you can use {@link ElasticSinkBuilder}\n  *\n- * @since 4.1\n+ * @since 4.2\n  */\n public final class ElasticSinks {\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MzY4OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r422873688", "body": "`4.2`", "bodyText": "4.2", "bodyHTML": "<p dir=\"auto\"><code>4.2</code></p>", "author": "cangencer", "createdAt": "2020-05-11T08:32:55Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticSourcePMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientSupplier(() -> client(host, port))\n+ *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n+ *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n+ * @since 4.1", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 08cdcde61..7221eecea 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -36,30 +37,31 @@ import static java.util.Objects.requireNonNull;\n \n /**\n  * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n  * Usage:\n  * <pre>{@code\n  * BatchSource<String> source = new ElasticSourceBuilder<String>()\n- *   .clientSupplier(() -> client(host, port))\n- *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n- *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n  *   .build();\n  *\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n+ *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n+    private SupplierEx<? extends RestHighLevelClient> clientFn;\n     private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n     private boolean slicing;\n     private boolean coLocatedReading;\n     private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n", "next_change": {"commit": "a8279c79a8783b0e6811e161daa2ee517d69834e", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 7221eecea..890489fe8 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -57,8 +56,7 @@ public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientFn;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n+    private SupplierEx<RestClientBuilder> clientFn;\n     private SupplierEx<SearchRequest> searchRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n     private FunctionEx<? super SearchHit, T> mapToItemFn;\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 890489fe8..c7bb596ad 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -49,12 +50,14 @@ import static java.util.Objects.requireNonNull;\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n  *\n+ * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.2\n  */\n public class ElasticSourceBuilder<T> {\n \n-    private static final String DEFAULT_NAME = \"elastic\";\n+    private static final String DEFAULT_NAME = \"elasticSource\";\n \n     private SupplierEx<RestClientBuilder> clientFn;\n     private SupplierEx<SearchRequest> searchRequestFn;\n", "next_change": {"commit": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex c7bb596ad..55f195a6f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -50,12 +50,13 @@ import static java.util.Objects.requireNonNull;\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n  *\n- * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ * Requires {@link #clientFn(SupplierEx)},\n+ * {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n  *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n  * @since 4.2\n  */\n-public class ElasticSourceBuilder<T> {\n+public final class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elasticSource\";\n \n", "next_change": null}]}}]}}]}}]}}, {"oid": "a197461798fe8e705d3784b4265692b40947c2ff", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a197461798fe8e705d3784b4265692b40947c2ff", "message": "Merge branch 'master' into elastic", "committedDate": "2020-05-11T11:03:50Z", "type": "commit"}, {"oid": "dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dbc2ce9bd8c75e9579c6938a9919e31dcf1155c7", "message": "Address feedback (mostly javadocs)", "committedDate": "2020-05-11T13:17:01Z", "type": "commit"}, {"oid": "a8279c79a8783b0e6811e161daa2ee517d69834e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a8279c79a8783b0e6811e161daa2ee517d69834e", "message": "User provided clientFn returns RestClientBuilder instead of RestHighLevelClient", "committedDate": "2020-05-11T14:30:29Z", "type": "commit"}, {"oid": "2575f5e754a66ff62ad11868ab15bc1f5ccd5d02", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2575f5e754a66ff62ad11868ab15bc1f5ccd5d02", "message": "Fix issue with Elastic multiple cluster nodes running on the same address", "committedDate": "2020-05-12T09:47:59Z", "type": "commit"}, {"oid": "e2857f68d0b024b66ba4d1078c1045c9199aad08", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e2857f68d0b024b66ba4d1078c1045c9199aad08", "message": "Add tests for Elastic sink with update and delete requests", "committedDate": "2020-05-12T10:02:50Z", "type": "commit"}, {"oid": "7caa69feb6a1803ec509b65b7665953ad1ceeda8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7caa69feb6a1803ec509b65b7665953ad1ceeda8", "message": "Add more tests for Elastic sink", "committedDate": "2020-05-12T10:17:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwNzE1Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423607157", "body": "Please update current naming in documentation and javadoc. `ElasticsearchSourceBuilder` -> `ElasticSourceBuilder`, `ElasticsearchSinks` -> `ElasticSinks` etc.", "bodyText": "Please update current naming in documentation and javadoc. ElasticsearchSourceBuilder -> ElasticSourceBuilder, ElasticsearchSinks -> ElasticSinks etc.", "bodyHTML": "<p dir=\"auto\">Please update current naming in documentation and javadoc. <code>ElasticsearchSourceBuilder</code> -&gt; <code>ElasticSourceBuilder</code>, <code>ElasticsearchSinks</code> -&gt; <code>ElasticSinks</code> etc.</p>", "author": "olukas", "createdAt": "2020-05-12T09:49:25Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticSourcePTest.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.test.TestOutbox;\n+import com.hazelcast.jet.core.test.TestSupport;\n+import com.hazelcast.jet.elastic.ElasticSourceConfiguration;\n+import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.SearchScrollRequest;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RequestOptions.Builder;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.slice.SliceBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.lucene.search.TotalHits.Relation.EQUAL_TO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+public class ElasticSourcePTest {\n+\n+    public static final String HIT_SOURCE = \"{\\\"name\\\": \\\"Frantisek\\\"}\";\n+    public static final String HIT_SOURCE2 = \"{\\\"name\\\": \\\"Vladimir\\\"}\";\n+    public static final String SCROLL_ID = \"random-scroll-id\";\n+\n+    private static final String KEEP_ALIVE = \"42m\";\n+\n+    private ElasticSourceP<String> processor;\n+    private SerializableRestClient mockClient;\n+    private SearchResponse response;\n+    private TestOutbox outbox;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockClient = SerializableRestClient.instanceHolder = mock(SerializableRestClient.class, RETURNS_DEEP_STUBS);\n+        // Mocks returning mocks is not generally recommended, but the setup of empty SearchResponse is even uglier\n+        // See org.elasticsearch.action.search.SearchResponse#empty\n+        response = mock(SearchResponse.class);\n+        when(response.getScrollId()).thenReturn(SCROLL_ID);\n+        when(mockClient.search(any(), any())).thenReturn(response);\n+    }\n+\n+    private TestSupport runProcessor() throws Exception {\n+        return runProcessor(request -> RequestOptions.DEFAULT, emptyList(), false, false);\n+    }\n+\n+    private TestSupport runProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn) throws Exception {\n+        return runProcessor(optionsFn, emptyList(), false, false);\n+    }\n+\n+    private TestSupport runProcessorWithCoLocation(List<Shard> shards) throws Exception {\n+        return runProcessor(request -> RequestOptions.DEFAULT, shards, false, true);\n+    }\n+\n+    private TestSupport runProcessor(FunctionEx<ActionRequest, RequestOptions> optionsFn, List<Shard> shards,\n+                                     boolean slicing, boolean coLocatedReading)\n+            throws Exception {\n+\n+        RestHighLevelClient client = mockClient;\n+        ElasticSourceConfiguration<String> configuration = new ElasticSourceConfiguration<String>(\n+                () -> client,\n+                RestHighLevelClient::close,\n+                () -> new SearchRequest(\"*\"),\n+                optionsFn,\n+                SearchHit::getSourceAsString,\n+                slicing,\n+                coLocatedReading,\n+                KEEP_ALIVE,\n+                2\n+        );\n+\n+        // This constructor calls the client so it has to be called after specific mock setup in each test method\n+        // rather than in setUp()\n+        processor = new ElasticSourceP<>(configuration, shards);\n+\n+        return TestSupport.verifyProcessor(() -> processor)\n+                .disableSnapshots();\n+    }\n+\n+    @Test\n+    public void when_runProcessor_then_executeSearchRequestWithScroll() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestSupport support = runProcessor();\n+\n+        support.expectOutput(emptyList());\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithOptionsFn_then_shouldUseOptionsFnForSearchRequest() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        // get different instance than default\n+        TestSupport testSupport = runProcessor(request -> {\n+            Builder builder = RequestOptions.DEFAULT.toBuilder();\n+            builder.addHeader(\"TestHeader\", \"value\");\n+            return builder.build();\n+        });\n+\n+        testSupport.expectOutput(emptyList());\n+\n+        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n+        verify(mockClient).search(any(), captor.capture());\n+\n+        RequestOptions capturedOptions = captor.getValue();\n+        assertThat(capturedOptions.getHeaders())\n+                .extracting(h -> tuple(h.getName(), h.getValue()))\n+                .containsExactly(tuple(\"TestHeader\", \"value\"));\n+    }\n+\n+    @Test\n+    public void given_singleHit_when_runProcessor_then_produceSingleHit() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response2);\n+\n+        TestSupport testSupport = runProcessor();\n+\n+        testSupport.expectOutput(newArrayList(HIT_SOURCE));\n+    }\n+\n+    @Test\n+    public void givenMultipleResults_when_runProcessor_then_useScrollIdInFollowupScrollRequest() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        SearchHit hit2 = new SearchHit(1, \"id-1\", new Text(\"ignored\"), emptyMap());\n+        hit2.sourceRef(new BytesArray(HIT_SOURCE2));\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit2}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response3 = mock(SearchResponse.class);\n+        when(response3.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(3, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response2, response3);\n+\n+        TestSupport testSupport = runProcessor();\n+\n+        testSupport.expectOutput(newArrayList(HIT_SOURCE, HIT_SOURCE2));\n+\n+        ArgumentCaptor<SearchScrollRequest> captor = forClass(SearchScrollRequest.class);\n+\n+        verify(mockClient, times(2)).scroll(captor.capture(), any());\n+        SearchScrollRequest request = captor.getValue();\n+        assertThat(request.scrollId()).isEqualTo(SCROLL_ID);\n+        assertThat(request.scroll().keepAlive().getStringRep()).isEqualTo(KEEP_ALIVE);\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithOptionsFn_then_shouldUseOptionsFnForScrollRequest() throws Exception {\n+        SearchHit hit = new SearchHit(0, \"id-0\", new Text(\"ignored\"), emptyMap());\n+        hit.sourceRef(new BytesArray(HIT_SOURCE));\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{hit}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+\n+        SearchResponse response2 = mock(SearchResponse.class);\n+        when(response2.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(1, EQUAL_TO), Float.NaN));\n+        when(mockClient.scroll(any(), any())).thenReturn(response2);\n+\n+        // get different instance than default\n+        TestSupport testSupport = runProcessor(request -> {\n+            Builder builder = RequestOptions.DEFAULT.toBuilder();\n+            builder.addHeader(\"TestHeader\", \"value\");\n+            return builder.build();\n+        });\n+\n+        testSupport.expectOutput(newArrayList(HIT_SOURCE));\n+\n+        ArgumentCaptor<RequestOptions> captor = forClass(RequestOptions.class);\n+        verify(mockClient).scroll(any(), captor.capture());\n+\n+        RequestOptions capturedOptions = captor.getValue();\n+        assertThat(capturedOptions.getHeaders())\n+                .extracting(h -> tuple(h.getName(), h.getValue()))\n+                .containsExactly(tuple(\"TestHeader\", \"value\"));\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithCoLocation_then_useLocalNodeOnly() throws Exception {\n+        RestClient lowClient = mock(RestClient.class);\n+        when(mockClient.getLowLevelClient()).thenReturn(lowClient);\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestSupport testSupport = runProcessorWithCoLocation(newArrayList(\n+                new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n+        ));\n+        testSupport.expectOutput(emptyList());\n+\n+        ArgumentCaptor<Collection<Node>> nodesCaptor = ArgumentCaptor.forClass(Collection.class);\n+\n+        verify(lowClient).setNodes(nodesCaptor.capture());\n+\n+        Collection<Node> nodes = nodesCaptor.getValue();\n+        assertThat(nodes).hasSize(1);\n+\n+        Node node = nodes.iterator().next();\n+        assertThat(node.getHost().toHostString()).isEqualTo(\"10.0.0.1:9200\");\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithCoLocation_thenSearchShardsWithPreference() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestSupport processor = runProcessorWithCoLocation(newArrayList(\n+                new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n+        ));\n+        processor.expectOutput(emptyList());\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        assertThat(request.preference()).isEqualTo(\"_shards:0,1,2|_only_local\");\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithParallelism_thenUseSlicingBasedOnGlobalValues() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestSupport testSupport = runProcessor((r) -> RequestOptions.DEFAULT, emptyList(), true, false);\n+        testSupport.localProcessorIndex(1);\n+        testSupport.localParallelism(2);\n+        testSupport.globalProcessorIndex(4);\n+        testSupport.totalParallelism(6);\n+        testSupport.expectOutput(emptyList());\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        SliceBuilder slice = request.source().slice();\n+\n+        // Slicing across all, should use global index / total parallelism\n+        assertThat(slice.getId()).isEqualTo(4);\n+        assertThat(slice.getMax()).isEqualTo(6);\n+    }\n+\n+    @Test\n+    public void when_runProcessorWithCoLocationAndSlicing_thenUseSlicingBasedOnLocalValues() throws Exception {\n+        when(response.getHits()).thenReturn(new SearchHits(new SearchHit[]{}, new TotalHits(0, EQUAL_TO), Float.NaN));\n+\n+        TestSupport testSupport = runProcessor((r) -> RequestOptions.DEFAULT,\n+                newArrayList(\n+                        new Shard(\"my-index\", 0, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                        new Shard(\"my-index\", 1, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\"),\n+                        new Shard(\"my-index\", 2, Prirep.p, 42, \"STARTED\", \"10.0.0.1\", \"10.0.0.1:9200\", \"es1\")\n+                ),\n+                true, true);\n+        testSupport.localProcessorIndex(1);\n+        testSupport.localParallelism(2);\n+        testSupport.globalProcessorIndex(4);\n+        testSupport.totalParallelism(6);\n+        testSupport.expectOutput(emptyList());\n+\n+        ArgumentCaptor<SearchRequest> captor = forClass(SearchRequest.class);\n+        verify(mockClient).search(captor.capture(), any());\n+\n+        SearchRequest request = captor.getValue();\n+        SliceBuilder slice = request.source().slice();\n+\n+        // Slicing across single node, should use local values\n+        assertThat(slice.getId()).isEqualTo(1);\n+        assertThat(slice.getMax()).isEqualTo(2);\n+    }\n+\n+    /*\n+     * Need to pass a Serializable Supplier into\n+     * ElasticsearchSourceBuilder.clientSupplier(...)", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticSourcePTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticSourcePTest.java\nindex e3092946d..9bd4dc7da 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticSourcePTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/impl/ElasticSourcePTest.java\n", "chunk": "@@ -319,7 +317,7 @@ public class ElasticSourcePTest {\n \n     /*\n      * Need to pass a Serializable Supplier into\n-     * ElasticsearchSourceBuilder.clientSupplier(...)\n+     * ElasticSourceBuilder.clientFn(...)\n      * which returns a mock, so the mock itself must be serializable.\n      *\n      * Can't use Mockito's withSettings().serializable() because some of the setup (SearchResponse) is not Serializable\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwODQxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423608419", "body": "We should document which builder's methods are required", "bodyText": "We should document which builder's methods are required", "bodyHTML": "<p dir=\"auto\">We should document which builder's methods are required</p>", "author": "olukas", "createdAt": "2020-05-12T09:51:22Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticSourcePMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapHitFn}\n+ *\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientSupplier(() -> client(host, port))\n+ *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n+ *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n+ * @since 4.1\n+ */\n+public class ElasticSourceBuilder<T> {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2857f68d0b024b66ba4d1078c1045c9199aad08", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 08cdcde61..890489fe8 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -36,30 +36,30 @@ import static java.util.Objects.requireNonNull;\n \n /**\n  * Builder for Elasticsearch source which reads data from Elasticsearch and\n- * converts SearchHits using provided {@code mapHitFn}\n- *\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n  * Usage:\n  * <pre>{@code\n  * BatchSource<String> source = new ElasticSourceBuilder<String>()\n- *   .clientSupplier(() -> client(host, port))\n- *   .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n- *   .mapHitFn(SearchHit::getSourceAsString)\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n  *   .build();\n  *\n  * BatchStage<String> stage = p.readFrom(source);\n  * }</pre>\n+ *\n  * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSourceBuilder<T> {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<SearchRequest> searchRequestSupplier;\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n-    private FunctionEx<? super SearchHit, T> mapHitFn;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n     private boolean slicing;\n     private boolean coLocatedReading;\n     private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 890489fe8..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -63,7 +67,6 @@ public class ElasticSourceBuilder<T> {\n     private boolean slicing;\n     private boolean coLocatedReading;\n     private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n-    private int preferredLocalParallelism = 2;\n \n     /**\n      * Build Elasticsearch {@link BatchSource} with supplied parameters\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDI1OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423610258", "body": "leftover?", "bodyText": "leftover?", "bodyHTML": "<p dir=\"auto\">leftover?</p>", "author": "olukas", "createdAt": "2020-05-12T09:54:37Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.bulk.BulkItemResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.indices.CreateIndexRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.ImmutableMap.of;\n+import static org.assertj.core.util.Lists.newArrayList;\n+import static org.elasticsearch.client.RequestOptions.DEFAULT;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+\n+/**\n+ * Base class for running Elasticsearch connector tests\n+ *\n+ * To use implement:\n+ * - {@link #elasticClientSupplier()}\n+ * - {@link #createJetInstance()}\n+ * Subclasses are free to cache\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+public abstract class BaseElasticTest {\n+\n+    protected static final int BATCH_SIZE = 42;\n+\n+    protected RestHighLevelClient elasticClient;\n+    protected JetInstance jet;\n+    protected IList<String> results;\n+\n+    @Before\n+    public void setUpBase() {\n+        if (elasticClient == null) {\n+            elasticClient = elasticClientSupplier().get();\n+        }\n+        cleanElasticData();\n+\n+        if (jet == null) {\n+            jet = createJetInstance();\n+        }\n+        results = jet.getList(\"results\");\n+        results.clear();\n+    }\n+\n+    /**\n+     * RestHighLevelClient supplier, it is used to\n+     * - create a client before each test for use by all methods from this class interacting with elastic\n+     * - may be used as as a parameter of {@link ElasticSourceBuilder#clientSupplier(SupplierEx)}\n+     */\n+    protected SupplierEx<RestHighLevelClient> elasticClientSupplier() {\n+        return ElasticSupport.elasticClientSupplier();\n+    };\n+\n+    protected abstract JetInstance createJetInstance();\n+\n+    /**\n+     * Creates an index with given name with 3 shards\n+     */\n+    protected void initShardedIndex(String index) throws IOException {\n+        createShardedIndex(index, 3, 0);\n+        indexBatchOfDocuments(index);\n+    }\n+\n+    /**\n+     * Creates an index with given name with 3 shards\n+     */\n+    protected void createShardedIndex(String index, int shards, int replicas) throws IOException {\n+        CreateIndexRequest indexRequest = new CreateIndexRequest(index);\n+        indexRequest.settings(Settings.builder()\n+                                      .put(\"index.unassigned.node_left.delayed_timeout\", \"1s\")\n+                                      .put(\"index.number_of_shards\", shards)\n+                                      .put(\"index.number_of_replicas\", replicas)\n+        );\n+\n+        elasticClient.indices().create(indexRequest, RequestOptions.DEFAULT);\n+    }\n+\n+    /**\n+     * Deletes all documents in all indexes and drops all indexes\n+     */\n+    protected void cleanElasticData() {\n+        try {\n+//            deleteDocuments();", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\nindex 8ad378ade..b75edf260 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/BaseElasticTest.java\n", "chunk": "@@ -118,8 +124,7 @@ public abstract class BaseElasticTest {\n      */\n     protected void cleanElasticData() {\n         try {\n-//            deleteDocuments();\n-\n+            // All documents are deleted when an index is deleted\n             elasticClient.indices().delete(new DeleteIndexRequest(\"*\"), DEFAULT);\n         } catch (IOException e) {\n             throw new RuntimeException(e);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDQwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423610401", "body": "leftover?", "bodyText": "leftover?", "bodyHTML": "<p dir=\"auto\">leftover?</p>", "author": "olukas", "createdAt": "2020-05-12T09:54:51Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/CommonElasticSourcesTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.google.common.collect.ImmutableMap.of;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+\n+/**\n+ * Base class for Elasticsearch source tests\n+ * <p>\n+ * This class is to be extended for each type of environment to run on, e.g.\n+ * - simple 1 node Jet & Elastic instances\n+ * - co-located clusters of Jet and Elastic\n+ * - non co-located clusters of Jet and Elastic\n+ * <p>\n+ * Subclasses may add tests specific for particular type of environment.\n+ * <p>\n+ * RestHighLevelClient is used to create data in Elastic to isolate possible Source and Sink issues.\n+ */\n+public abstract class CommonElasticSourcesTest extends BaseElasticTest {\n+\n+    @Test\n+    public void given_emptyIndex_when_readFromElasticSource_then_finishWithNoResults() throws IOException {\n+        // elasticClient.indices().create(new CreateIndexRequest(\"my-index\"), DEFAULT);", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzcwNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423707704", "bodyText": "No, this is what should be done, but there is some weirdness, explained below - moving a comment above to be more clear.", "author": "frant-hartm", "createdAt": "2020-05-12T12:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/CommonElasticSourcesTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/CommonElasticSourcesTest.java\nindex 2b57203bd..1b1c61bcb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/CommonElasticSourcesTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/CommonElasticSourcesTest.java\n", "chunk": "@@ -47,19 +47,21 @@ public abstract class CommonElasticSourcesTest extends BaseElasticTest {\n \n     @Test\n     public void given_emptyIndex_when_readFromElasticSource_then_finishWithNoResults() throws IOException {\n-        // elasticClient.indices().create(new CreateIndexRequest(\"my-index\"), DEFAULT);\n-\n         // Ideally we would just create the index but it gives \"field _id not found\" when there are no documents\n         // in the index, not sure if it is an Elastic bug or wrong setup\n+        //\n+        // elasticClient.indices().create(new CreateIndexRequest(\"my-index\"), DEFAULT);\n+\n+        // Instead we index a document and delete it, ending up with index with correct settings applied\n         indexDocument(\"my-index\", of(\"name\", \"Frantisek\"));\n         deleteDocuments();\n \n         Pipeline p = Pipeline.create();\n \n-        BatchSource<String> source = new ElasticSourceBuilder<String>()\n-                .clientSupplier(elasticClientSupplier())\n-                .searchRequestSupplier(() -> new SearchRequest(\"my-index\"))\n-                .mapHitFn(SearchHit::getSourceAsString)\n+        BatchSource<String> source = new ElasticSourceBuilder<>()\n+                .clientFn(elasticClientSupplier())\n+                .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+                .mapToItemFn(SearchHit::getSourceAsString)\n                 .build();\n \n         p.readFrom(source)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMTM3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423611373", "body": "I suggest to use factory method with all possible parameters - i.e. also with client supplier.", "bodyText": "I suggest to use factory method with all possible parameters - i.e. also with client supplier.", "bodyHTML": "<p dir=\"auto\">I suggest to use factory method with all possible parameters - i.e. also with client supplier.</p>", "author": "olukas", "createdAt": "2020-05-12T09:56:34Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactories;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {\n+\n+    public static void main(String[] args) {\n+        try {\n+            ServiceFactory<?, ObjectMapper> service = ServiceFactories.sharedService((context) -> new ObjectMapper());\n+\n+            Pipeline p = create();\n+            p.readFrom(files(\"src/main/resources/documents\"))\n+             .mapUsingService(service, (mapper, json) -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n+             }))\n+             .writeTo(ElasticSinks.elastic(map ->", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2857f68d0b024b66ba4d1078c1045c9199aad08", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex b5ccfe1aa..064c246ca 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -41,14 +37,13 @@ public class ElasticSinkExample {\n \n     public static void main(String[] args) {\n         try {\n-            ServiceFactory<?, ObjectMapper> service = ServiceFactories.sharedService((context) -> new ObjectMapper());\n-\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .mapUsingService(service, (mapper, json) -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n-             }))\n+             .map(JSON.std::mapFrom)\n              .writeTo(ElasticSinks.elastic(map ->\n-                     new IndexRequest(\"my-index\").source(map)\n+                     new IndexRequest(\"my-index\")\n+                             .source(map)\n+                             .version((Long) map.get(\"version\"))\n              ));\n \n             JetInstance jet = Jet.newJetInstance();\n", "next_change": {"commit": "5f25d73f39be65a6476ecc9ad97f5ec5826f3412", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 064c246ca..37652ca4b 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -39,7 +39,7 @@ public class ElasticSinkExample {\n         try {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .map(JSON.std::mapFrom)\n+             .map(JsonUtil::parse)\n              .writeTo(ElasticSinks.elastic(map ->\n                      new IndexRequest(\"my-index\")\n                              .source(map)\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 37652ca4b..663066d21 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -40,10 +41,9 @@ public class ElasticSinkExample {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n              .map(JsonUtil::parse)\n-             .writeTo(ElasticSinks.elastic(map ->\n-                     new IndexRequest(\"my-index\")\n-                             .source(map)\n-                             .version((Long) map.get(\"version\"))\n+             .writeTo(ElasticSinks.elastic(\n+                     () -> ElasticClients.client(\"localhost\", 9200),\n+                     map -> new IndexRequest(\"my-index\").source(map)\n              ));\n \n             JetInstance jet = Jet.newJetInstance();\n", "next_change": {"commit": "973fbe2be92554c3904000523c35799bb0804c0c", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 663066d21..e42c902fa 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -40,7 +40,7 @@ public class ElasticSinkExample {\n         try {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .map(JsonUtil::parse)\n+             .map(JsonUtil::mapFrom)\n              .writeTo(ElasticSinks.elastic(\n                      () -> ElasticClients.client(\"localhost\", 9200),\n                      map -> new IndexRequest(\"my-index\").source(map)\n", "next_change": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex e42c902fa..905b03732 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -46,7 +50,7 @@ public class ElasticSinkExample {\n                      map -> new IndexRequest(\"my-index\").source(map)\n              ));\n \n-            JetInstance jet = Jet.newJetInstance();\n+            JetInstance jet = Jet.bootstrappedInstance();\n             jet.newJob(p).join();\n         } catch (Exception e) {\n             Jet.shutdownAll();\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzAxNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423613014", "body": "Why we do not rather use something from Jet? e.g. `Sources.files`", "bodyText": "Why we do not rather use something from Jet? e.g. Sources.files", "bodyHTML": "<p dir=\"auto\">Why we do not rather use something from Jet? e.g. <code>Sources.files</code></p>", "author": "olukas", "createdAt": "2020-05-12T09:59:23Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactories;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {\n+\n+    public static void main(String[] args) {\n+        try {\n+            ServiceFactory<?, ObjectMapper> service = ServiceFactories.sharedService((context) -> new ObjectMapper());\n+\n+            Pipeline p = create();\n+            p.readFrom(files(\"src/main/resources/documents\"))", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMTUyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423711520", "bodyText": "Sources.files reads files as lines, this reads a whole file (= json document) as one item.", "author": "frant-hartm", "createdAt": "2020-05-12T12:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5MzMxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423893319", "bodyText": "you can now read json files with Sources.json, as you've said it is treating each line as a json string. For json strings spanning multiple lines we've added an option too, you can use filesBuilder and JsonUtil.asMultilineJson to create the source. But it is trying to map the json to an object type. we can add an overload which parses json strings to Map<String, Object> maybe", "author": "gurbuzali", "createdAt": "2020-05-12T17:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e2857f68d0b024b66ba4d1078c1045c9199aad08", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex b5ccfe1aa..064c246ca 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -41,14 +37,13 @@ public class ElasticSinkExample {\n \n     public static void main(String[] args) {\n         try {\n-            ServiceFactory<?, ObjectMapper> service = ServiceFactories.sharedService((context) -> new ObjectMapper());\n-\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .mapUsingService(service, (mapper, json) -> mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n-             }))\n+             .map(JSON.std::mapFrom)\n              .writeTo(ElasticSinks.elastic(map ->\n-                     new IndexRequest(\"my-index\").source(map)\n+                     new IndexRequest(\"my-index\")\n+                             .source(map)\n+                             .version((Long) map.get(\"version\"))\n              ));\n \n             JetInstance jet = Jet.newJetInstance();\n", "next_change": {"commit": "5f25d73f39be65a6476ecc9ad97f5ec5826f3412", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 064c246ca..37652ca4b 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -39,7 +39,7 @@ public class ElasticSinkExample {\n         try {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .map(JSON.std::mapFrom)\n+             .map(JsonUtil::parse)\n              .writeTo(ElasticSinks.elastic(map ->\n                      new IndexRequest(\"my-index\")\n                              .source(map)\n", "next_change": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 37652ca4b..663066d21 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -40,10 +41,9 @@ public class ElasticSinkExample {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n              .map(JsonUtil::parse)\n-             .writeTo(ElasticSinks.elastic(map ->\n-                     new IndexRequest(\"my-index\")\n-                             .source(map)\n-                             .version((Long) map.get(\"version\"))\n+             .writeTo(ElasticSinks.elastic(\n+                     () -> ElasticClients.client(\"localhost\", 9200),\n+                     map -> new IndexRequest(\"my-index\").source(map)\n              ));\n \n             JetInstance jet = Jet.newJetInstance();\n", "next_change": {"commit": "973fbe2be92554c3904000523c35799bb0804c0c", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 663066d21..e42c902fa 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -40,7 +40,7 @@ public class ElasticSinkExample {\n         try {\n             Pipeline p = create();\n             p.readFrom(files(\"src/main/resources/documents\"))\n-             .map(JsonUtil::parse)\n+             .map(JsonUtil::mapFrom)\n              .writeTo(ElasticSinks.elastic(\n                      () -> ElasticClients.client(\"localhost\", 9200),\n                      map -> new IndexRequest(\"my-index\").source(map)\n", "next_change": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex e42c902fa..905b03732 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -46,7 +50,7 @@ public class ElasticSinkExample {\n                      map -> new IndexRequest(\"my-index\").source(map)\n              ));\n \n-            JetInstance jet = Jet.newJetInstance();\n+            JetInstance jet = Jet.bootstrappedInstance();\n             jet.newJob(p).join();\n         } catch (Exception e) {\n             Jet.shutdownAll();\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzc5Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423613797", "body": "please remove one of two empty lines", "bodyText": "please remove one of two empty lines", "bodyHTML": "<p dir=\"auto\">please remove one of two empty lines</p>", "author": "olukas", "createdAt": "2020-05-12T10:00:40Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\nindex 53681bbf8..32ab779ff 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n", "chunk": "@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package com.hazelcast.jet.examples.elastic;\n \n import com.hazelcast.jet.Jet;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNDQyNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423614424", "body": "I suggest to use factory method with all possible parameters - i.e. also with client supplier and search request supplier.", "bodyText": "I suggest to use factory method with all possible parameters - i.e. also with client supplier and search request supplier.", "bodyHTML": "<p dir=\"auto\">I suggest to use factory method with all possible parameters - i.e. also with client supplier and search request supplier.</p>", "author": "olukas", "createdAt": "2020-05-12T10:01:46Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.datamodel.Tuple2;\n+import com.hazelcast.jet.elastic.ElasticSources;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.hazelcast.jet.aggregate.AggregateOperations.mapping;\n+import static com.hazelcast.jet.aggregate.AggregateOperations.toList;\n+import static com.hazelcast.jet.datamodel.Tuple2.tuple2;\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+\n+public class ElasticSourceExample {\n+\n+    private static final String ROLES_OBSERVABLE = \"roles\";\n+\n+    public static void main(String[] args) {\n+        try {\n+            Pipeline p = create();\n+            BatchSource<Tuple2<String, String>> elasticsearch = ElasticSources.elastic(", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\nindex 53681bbf8..32ab779ff 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n", "chunk": "@@ -43,6 +44,8 @@ public class ElasticSourceExample {\n         try {\n             Pipeline p = create();\n             BatchSource<Tuple2<String, String>> elasticsearch = ElasticSources.elastic(\n+                    () -> client(\"localhost\", 9200),\n+                    SearchRequest::new,\n                     hit -> {\n                         Map<String, Object> map = hit.getSourceAsMap();\n                         return tuple2((String) map.get(\"role\"), (String) map.get(\"name\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNzQ1Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423617457", "body": "I suggest to prepare (and document) elastic code samples in form:\r\n1. run empty elasticsearch\r\n2. run ElasticSinkExample - it will store data to elastic\r\n3. run ElasticSourceExample - it will read previously provided data from elastic and show them to user (through Observable or Sinks.logger)", "bodyText": "I suggest to prepare (and document) elastic code samples in form:\n\nrun empty elasticsearch\nrun ElasticSinkExample - it will store data to elastic\nrun ElasticSourceExample - it will read previously provided data from elastic and show them to user (through Observable or Sinks.logger)", "bodyHTML": "<p dir=\"auto\">I suggest to prepare (and document) elastic code samples in form:</p>\n<ol dir=\"auto\">\n<li>run empty elasticsearch</li>\n<li>run ElasticSinkExample - it will store data to elastic</li>\n<li>run ElasticSourceExample - it will read previously provided data from elastic and show them to user (through Observable or Sinks.logger)</li>\n</ol>", "author": "olukas", "createdAt": "2020-05-12T10:07:08Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.datamodel.Tuple2;\n+import com.hazelcast.jet.elastic.ElasticSources;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.hazelcast.jet.aggregate.AggregateOperations.mapping;\n+import static com.hazelcast.jet.aggregate.AggregateOperations.toList;\n+import static com.hazelcast.jet.datamodel.Tuple2.tuple2;\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+\n+public class ElasticSourceExample {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODc3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r424038773", "bodyText": "Yeah, good idea. this is how I run the demo. Do you mean somewhere in the example module (as readme) or as how to guide on the website?", "author": "frant-hartm", "createdAt": "2020-05-12T21:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5MDEyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r424190120", "bodyText": "Originally I thought it should be in javadoc for both example classes but it can be added to readme or website as well.", "author": "olukas", "createdAt": "2020-05-13T06:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNzQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\nindex 53681bbf8..32ab779ff 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n", "chunk": "@@ -33,6 +33,7 @@ import java.util.Map.Entry;\n import static com.hazelcast.jet.aggregate.AggregateOperations.mapping;\n import static com.hazelcast.jet.aggregate.AggregateOperations.toList;\n import static com.hazelcast.jet.datamodel.Tuple2.tuple2;\n+import static com.hazelcast.jet.elastic.ElasticClients.client;\n import static com.hazelcast.jet.pipeline.Pipeline.create;\n \n public class ElasticSourceExample {\n", "next_change": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\nindex 32ab779ff..d694b8a17 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSourceExample.java\n", "chunk": "@@ -36,6 +36,17 @@ import static com.hazelcast.jet.datamodel.Tuple2.tuple2;\n import static com.hazelcast.jet.elastic.ElasticClients.client;\n import static com.hazelcast.jet.pipeline.Pipeline.create;\n \n+/**\n+ * Example for the Elastic Source\n+ *\n+ * The pipeline in the example:\n+ * - reads all documents from Elastic running on localhost:9200\n+ * - maps role and name fields\n+ * - aggregates all names by role name\n+ * - writes aggregated result to an observable\n+ *\n+ * The results are then printed to the standard output of the submitting client.\n+ */\n public class ElasticSourceExample {\n \n     private static final String ROLES_OBSERVABLE = \"roles\";\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxOTY2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423619660", "body": "4.2", "bodyText": "4.2", "bodyHTML": "<p dir=\"auto\">4.2</p>", "author": "olukas", "createdAt": "2020-05-12T10:11:01Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7caa69feb6a1803ec509b65b7665953ad1ceeda8", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -41,86 +41,113 @@ import static java.util.Objects.requireNonNull;\n  * Builder for Elasticsearch Sink\n  * <p>\n  * The Sink first maps items from the pipeline using the provided\n- * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * {@link #mapToRequestFn(FunctionEx)} and then using {@link BulkRequest}.\n  * <p>\n  * {@link BulkRequest#BulkRequest()} is used by default, it can be\n- * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ * modified by providing custom {@link #bulkRequestFn(SupplierEx)}\n  *\n  * <p>\n  * Usage:\n  * <pre>{@code\n  * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n- *   .clientSupplier(() -> ElasticClients.client(host, port))\n- *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .clientFn(() -> ElasticClients.client(host, port))\n+ *   .mapToRequestFn(item -> new IndexRequest(\"my-index\").source(item))\n  *   .build();\n  * }</pre>\n  * <p>\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ * Requires {@link #clientFn(SupplierEx)} and {@link #mapToRequestFn(FunctionEx)}.\n  *\n  * @param <T>\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSinkBuilder<T> implements Serializable {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<BulkRequest> bulkRequestFn = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n     private int preferredLocalParallelism = 2;\n \n     /**\n-     * Set the client supplier\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n      *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n         return this;\n     }\n \n     /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param destroyFn destroy function\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n-     *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n-        return this;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyMTI5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423621292", "body": "should not it be rather `elasticSink` (and then `elasticSource` for `ElasticSourceBuilder`) to have different default values for them? ", "bodyText": "should not it be rather elasticSink (and then elasticSource for ElasticSourceBuilder) to have different default values for them?", "bodyHTML": "<p dir=\"auto\">should not it be rather <code>elasticSink</code> (and then <code>elasticSource</code> for <code>ElasticSourceBuilder</code>) to have different default values for them?</p>", "author": "olukas", "createdAt": "2020-05-12T10:13:53Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientSupplier(() -> ElasticClients.client(host, port))\n+ *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.1\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elastic\";", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7caa69feb6a1803ec509b65b7665953ad1ceeda8", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex a54a5d919..7cbd09519 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -41,86 +41,113 @@ import static java.util.Objects.requireNonNull;\n  * Builder for Elasticsearch Sink\n  * <p>\n  * The Sink first maps items from the pipeline using the provided\n- * {@link #mapItemFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * {@link #mapToRequestFn(FunctionEx)} and then using {@link BulkRequest}.\n  * <p>\n  * {@link BulkRequest#BulkRequest()} is used by default, it can be\n- * modified by providing custom {@link #bulkRequestSupplier(SupplierEx)}\n+ * modified by providing custom {@link #bulkRequestFn(SupplierEx)}\n  *\n  * <p>\n  * Usage:\n  * <pre>{@code\n  * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n- *   .clientSupplier(() -> ElasticClients.client(host, port))\n- *   .mapItemFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .clientFn(() -> ElasticClients.client(host, port))\n+ *   .mapToRequestFn(item -> new IndexRequest(\"my-index\").source(item))\n  *   .build();\n  * }</pre>\n  * <p>\n- * Requires {@link #clientSupplier(SupplierEx)} and {@link #mapItemFn(FunctionEx)}.\n+ * Requires {@link #clientFn(SupplierEx)} and {@link #mapToRequestFn(FunctionEx)}.\n  *\n  * @param <T>\n- * @since 4.1\n+ * @since 4.2\n  */\n public class ElasticSinkBuilder<T> implements Serializable {\n \n     private static final String DEFAULT_NAME = \"elastic\";\n \n-    private SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private ConsumerEx<? super RestHighLevelClient> destroyFn = RestHighLevelClient::close;\n-    private SupplierEx<BulkRequest> bulkRequestSupplier = BulkRequest::new;\n-    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn;\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<BulkRequest> bulkRequestFn = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn;\n     private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n     private int preferredLocalParallelism = 2;\n \n     /**\n-     * Set the client supplier\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n      *\n-     * @param clientSupplier supplier for configure Elasticsearch REST client\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> clientSupplier(@Nonnull SupplierEx<? extends RestHighLevelClient> clientSupplier) {\n-        this.clientSupplier = checkNonNullAndSerializable(clientSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n         return this;\n     }\n \n     /**\n-     * Set the destroy function called on completion, defaults to {@link RestHighLevelClient#close()}\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n      *\n-     * @param destroyFn destroy function\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage</a> in Elastic documentation\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> destroyFn(@Nonnull ConsumerEx<? super RestHighLevelClient> destroyFn) {\n-        this.destroyFn = checkNonNullAndSerializable(destroyFn, \"destroyFn\");\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the bulkRequestSupplier, defaults to new {@link BulkRequest#BulkRequest()}\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n      *\n-     * @param bulkRequestSupplier supplier for the bulk request\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n      */\n     @Nonnull\n-    public ElasticSinkBuilder<T> bulkRequestSupplier(@Nonnull SupplierEx<BulkRequest> bulkRequestSupplier) {\n-        this.bulkRequestSupplier = checkNonNullAndSerializable(bulkRequestSupplier, \"clientSupplier\");\n+    public ElasticSinkBuilder<T> mapToRequestFn(\n+            @Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n+        this.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n         return this;\n     }\n \n     /**\n-     * Set the mapItemFn\n-     *\n-     * @param mapItemFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n-     *                  {@link org.elasticsearch.action.update.UpdateRequest} or\n-     *                  {@link org.elasticsearch.action.delete.DeleteRequest}\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> mapItemFn(@Nonnull FunctionEx<? super T, ? extends DocWriteRequest<?>> mapItemFn) {\n-        this.mapItemFn = checkNonNullAndSerializable(mapItemFn, \"mapItemFn\");\n-        return this;\n-    }\n-\n-    /**\n-     * Set the function that provides {@link RequestOptions} based on given request\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n      *\n      * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions</a> in Elastic documentation\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 7cbd09519..031412529 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -147,7 +154,7 @@ public class ElasticSinkBuilder<T> implements Serializable {\n      * @param optionsFn function that provides {@link RequestOptions}\n      * @see <a\n      * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n-     * RequestOptions</a> in Elastic documentation\n+     * RequestOptions in Elastic documentation</a>\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNjM5OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423626398", "body": "Is this part of public API? Javadoc is missing in the whole file.", "bodyText": "Is this part of public API? Javadoc is missing in the whole file.", "bodyHTML": "<p dir=\"auto\">Is this part of public API? Javadoc is missing in the whole file.</p>", "author": "olukas", "createdAt": "2020-05-12T10:23:33Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+public class ElasticSourceConfiguration<T> implements Serializable {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNDA5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423714095", "bodyText": "No it's not, moved to impl package.", "author": "frant-hartm", "createdAt": "2020-05-12T13:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNjM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5f25d73f39be65a6476ecc9ad97f5ec5826f3412", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java\nindex 64b58fbe8..488c53e0b 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java\n", "chunk": "@@ -32,26 +31,26 @@ public class ElasticSourceConfiguration<T> implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private final SupplierEx<? extends RestHighLevelClient> clientSupplier;\n-    private final ConsumerEx<? super RestHighLevelClient> destroyFn;\n-    private final SupplierEx<SearchRequest> searchRequestSupplier;\n+    private final SupplierEx<RestHighLevelClient> clientFn;\n+    private final SupplierEx<SearchRequest> searchRequestFn;\n     private final FunctionEx<? super ActionRequest, RequestOptions> optionsFn;\n-    private final FunctionEx<? super SearchHit, T> mapHitFn;\n+    private final FunctionEx<? super SearchHit, T> mapToItemFn;\n     private final boolean slicing;\n     private final boolean coLocatedReading;\n     private final String scrollKeepAlive;\n     private final int preferredLocalParallelism;\n \n-    public ElasticSourceConfiguration(SupplierEx<? extends RestHighLevelClient> clientSupplier, ConsumerEx<?\n-            super RestHighLevelClient> destroyFn, SupplierEx<SearchRequest> searchRequestSupplier, FunctionEx<?\n-            super ActionRequest, RequestOptions> optionsFn, FunctionEx<? super SearchHit, T> mapHitFn,\n-                                      boolean slicing, boolean coLocatedReading, String scrollKeepAlive,\n-                                      int preferredLocalParallelism) {\n-        this.clientSupplier = clientSupplier;\n-        this.destroyFn = destroyFn;\n-        this.searchRequestSupplier = searchRequestSupplier;\n+    public ElasticSourceConfiguration(SupplierEx<RestHighLevelClient> clientFn,\n+                                      SupplierEx<SearchRequest> searchRequestFn,\n+                                      FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n+                                      FunctionEx<? super SearchHit, T> mapToItemFn,\n+                                      boolean slicing, boolean coLocatedReading,\n+                                      String scrollKeepAlive, int preferredLocalParallelism) {\n+\n+        this.clientFn = clientFn;\n+        this.searchRequestFn = searchRequestFn;\n         this.optionsFn = optionsFn;\n-        this.mapHitFn = mapHitFn;\n+        this.mapToItemFn = mapToItemFn;\n         this.slicing = slicing;\n         this.coLocatedReading = coLocatedReading;\n         this.scrollKeepAlive = scrollKeepAlive;\n", "next_change": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java\nsimilarity index 89%\nrename from extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java\nrename to extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java\nindex 488c53e0b..0b3a75fb2 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceConfiguration.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java\n", "chunk": "@@ -54,7 +60,6 @@ public class ElasticSourceConfiguration<T> implements Serializable {\n         this.slicing = slicing;\n         this.coLocatedReading = coLocatedReading;\n         this.scrollKeepAlive = scrollKeepAlive;\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMTYzMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423631631", "body": "A lot of empty lines", "bodyText": "A lot of empty lines", "bodyHTML": "<p dir=\"auto\">A lot of empty lines</p>", "author": "olukas", "createdAt": "2020-05-12T10:33:08Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticCatClient.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.internal.json.Json;\n+import com.hazelcast.internal.json.JsonArray;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.json.JsonValue;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.elastic.impl.Shard.Prirep;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static java.util.logging.Level.FINE;\n+import static java.util.stream.Collectors.toMap;\n+\n+/**\n+ * Wrapper around {@link RestClient} access for /_cat/* endpoints\n+ */\n+public class ElasticCatClient {\n+\n+    private static final ILogger LOG = Logger.getLogger(ElasticCatClient.class);\n+\n+    private final RestClient client;\n+\n+    public ElasticCatClient(RestClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Returns current master of the ES cluster\n+     */\n+    public Master master() {\n+        try {\n+            Request r = new Request(\"GET\", \"/_cat/master\");\n+            r.addParameter(\"format\", \"json\");\n+            Response res = client.performRequest(r);\n+\n+            try (InputStreamReader reader = new InputStreamReader(res.getEntity().getContent(), UTF_8)) {\n+                JsonArray array = Json.parse(reader).asArray();\n+                JsonObject object = array.get(0).asObject();\n+                return new Master(\n+                        object.get(\"host\").asString(),\n+                        object.get(\"id\").asString(),\n+                        object.get(\"ip\").asString(),\n+                        object.get(\"node\").asString()\n+                );\n+            }\n+        } catch (IOException e) {\n+            throw new JetException(\"Could not get ES cluster master\", e);\n+        }\n+    }\n+\n+    /**\n+     * Returns list of nodes currently in ES cluster\n+     */\n+    public List<Node> nodes() {\n+        try {\n+            Request r = new Request(\"GET\", \"/_cat/nodes\");\n+            r.addParameter(\"format\", \"json\");\n+            r.addParameter(\"h\", \"ip,name,http_address,master\");\n+            Response res = client.performRequest(r);\n+\n+            try (InputStreamReader reader = new InputStreamReader(res.getEntity().getContent(), UTF_8)) {\n+                JsonArray array = Json.parse(reader).asArray();\n+                List<Node> nodes = new ArrayList<>(array.size());\n+                for (JsonValue value : array) {\n+                    Optional<Node> shard = convertToNode(value);\n+                    shard.ifPresent(nodes::add);\n+                }\n+\n+                LOG.fine(\"Nodes: \" + nodes);\n+                return nodes;\n+            }\n+        } catch (IOException e) {\n+            throw new JetException(\"Could not get ES cluster nodes\", e);\n+        }\n+    }\n+\n+    private Optional<Node> convertToNode(JsonValue value) {\n+        JsonObject object = value.asObject();\n+        return of(new Node(\n+                object.get(\"ip\").asString(),\n+                object.get(\"name\").asString(),\n+                object.get(\"http_address\").asString(),\n+                object.get(\"master\").asString()\n+        ));\n+    }\n+\n+    /**\n+     * Returns list of shards for given indexes\n+     *\n+     * Only STARTED shards are returned.\n+     *\n+     * @param indices indexes to return shards for (wildcard format accepted)\n+     */\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public List<Shard> shards(String... indices) {\n+        Map<String, String> ipToAddress = nodes().stream().collect(toMap(Node::getIp, Node::getHttpAddress));\n+\n+        try {\n+            Request r = new Request(\"GET\", \"/_cat/shards/\" + String.join(\",\", indices));\n+            r.addParameter(\"format\", \"json\");\n+            Response res = client.performRequest(r);\n+\n+            try (InputStreamReader reader = new InputStreamReader(res.getEntity().getContent(), UTF_8)) {\n+                JsonArray array = Json.parse(reader).asArray();\n+                List<Shard> shards = new ArrayList<>(array.size());\n+                for (JsonValue value : array) {\n+                    Optional<Shard> shard = convertToShard(value, ipToAddress);\n+                    shard.ifPresent(shards::add);\n+                }\n+\n+                LOG.log(FINE, \"Shards \" + shards);\n+                return shards;\n+            }\n+        } catch (IOException e) {\n+            throw new JetException(\"Could not get ES shards\", e);\n+        }\n+    }\n+\n+    private Optional<Shard> convertToShard(JsonValue value, Map<String, String> ipToAddress) {\n+        JsonObject object = value.asObject();\n+        // TODO IndexShardState.STARTED but this is deeply inside elastic, should we mirror the enum?\n+        if (\"STARTED\".equals(object.get(\"state\").asString())) {\n+            String ip = object.get(\"ip\").asString();\n+            Shard shard = new Shard(\n+                    object.get(\"index\").asString(),\n+                    Integer.parseInt(object.get(\"shard\").asString()),\n+                    Prirep.valueOf(object.get(\"prirep\").asString()),\n+                    Integer.parseInt(object.get(\"docs\").asString()),\n+                    object.get(\"state\").asString(),\n+                    ip,\n+                    ipToAddress.get(ip),\n+                    object.get(\"node\").asString()\n+            );\n+            return of(shard);\n+        } else {\n+            return empty();\n+        }\n+    }\n+\n+    public static class Master {\n+\n+        private final String host;\n+\n+        private final String id;\n+        private final String ip;\n+        private final String node;\n+\n+        public Master(String host, String id, String ip, String node) {\n+            this.host = host;\n+            this.id = id;\n+            this.ip = ip;\n+            this.node = node;\n+        }\n+\n+        public String getHost() {\n+            return host;\n+        }\n+\n+        public String getId() {\n+            return id;\n+        }\n+\n+        public String getIp() {\n+            return ip;\n+        }\n+\n+        public String getNode() {\n+            return node;\n+        }\n+\n+        @Override public String toString() {\n+            return \"Master{\" +\n+                    \"host='\" + host + '\\'' +\n+                    \", id='\" + id + '\\'' +\n+                    \", ip='\" + ip + '\\'' +\n+                    \", node='\" + node + '\\'' +\n+                    '}';\n+        }\n+\n+    }\n+\n+    public static class Node {\n+\n+        private final String ip;\n+        private final String name;\n+        private final String httpAddress;\n+        private final String master;\n+\n+        public Node(@Nonnull String ip, @Nonnull String name, @Nonnull String httpAddress, @Nonnull String master) {\n+            this.ip = ip;\n+            this.name = name;\n+            this.httpAddress = httpAddress;\n+            this.master = master;\n+        }\n+\n+        public String getIp() {\n+            return ip;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public String getHttpAddress() {\n+            return httpAddress;\n+        }\n+\n+        public String getMaster() {\n+            return master;\n+        }\n+\n+        @Override public String toString() {\n+            return \"Node{\" +\n+                    \"ip='\" + ip + '\\'' +\n+                    \", name='\" + name + '\\'' +\n+                    \", httpAddress='\" + httpAddress + '\\'' +\n+                    \", master='\" + master + '\\'' +\n+                    '}';\n+        }\n+    }\n+\n+}\n+", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticCatClient.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticCatClient.java\nindex a1ddc2507..0f93a1463 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticCatClient.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticCatClient.java\n", "chunk": "@@ -252,11 +269,3 @@ public class ElasticCatClient {\n     }\n \n }\n-\n-\n-\n-\n-\n-\n-\n-\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzM2Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r423637362", "body": "Please add also test when we try to access elastic by client without username and password (just to be sure it will fail and not get stuck)", "bodyText": "Please add also test when we try to access elastic by client without username and password (just to be sure it will fail and not get stuck)", "bodyHTML": "<p dir=\"auto\">Please add also test when we try to access elastic by client without username and password (just to be sure it will fail and not get stuck)</p>", "author": "olukas", "createdAt": "2020-05-12T10:43:48Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSourcesTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.impl.util.Util;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.testcontainers.elasticsearch.ElasticsearchContainer;\n+\n+import java.util.function.Supplier;\n+\n+import static com.hazelcast.jet.elastic.ElasticClients.client;\n+import static com.hazelcast.jet.elastic.ElasticSupport.ELASTICSEARCH_IMAGE;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class AuthElasticSourcesTest extends BaseElasticTest {\n+\n+    /**\n+     * Using elastic container configured with security enabled\n+     */\n+    public static Supplier<ElasticsearchContainer> elastic = Util.memoize(() -> {\n+        ElasticsearchContainer elastic = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n+                .withEnv(\"ELASTIC_USERNAME\", \"elastic\")\n+                .withEnv(\"ELASTIC_PASSWORD\", \"SuperSecret\")\n+                .withEnv(\"xpack.security.enabled\", \"true\");\n+\n+        elastic.start();\n+        Runtime.getRuntime().addShutdownHook(new Thread(elastic::stop));\n+        return elastic;\n+    });\n+    public static final int PORT = 9200;\n+\n+    private final JetTestInstanceFactory factory = new JetTestInstanceFactory();\n+\n+    @After\n+    public void afterClass() throws Exception {\n+        factory.terminateAll();\n+    }\n+\n+    @Override\n+    protected SupplierEx<RestHighLevelClient> elasticClientSupplier() {\n+        ElasticsearchContainer container = elastic.get();\n+        String containerIp = container.getContainerIpAddress();\n+        Integer port = container.getMappedPort(PORT);\n+\n+        return () -> client(\"elastic\", \"SuperSecret\", containerIp, port);\n+    }\n+\n+    @Override\n+    protected JetInstance createJetInstance() {\n+        return factory.newMember(new JetConfig());\n+    }\n+\n+    @Test\n+    public void given_authenticatedClient_whenReadFromElasticSource_thenFinishSuccessfully() {\n+        indexDocument(\"my-index\", ImmutableMap.of(\"name\", \"Frantisek\"));\n+\n+        Pipeline p = Pipeline.create();\n+        p.readFrom(ElasticSources.elastic(elasticClientSupplier()))\n+         .writeTo(Sinks.list(results));\n+\n+        submitJob(p);\n+    }\n+\n+    @Test\n+    public void given_clientWithWrongPassword_whenReadFromElasticSource_thenFailWithAuthenticationException() {", "originalCommit": "0cbdf82d211e0d4c6e4058870360c02971521771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a1b6a295196873f8bcf59d21b5dcd3a11ea79dd", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSourcesTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSourcesTest.java\nindex f03f2dc0e..a6707498e 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSourcesTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSourcesTest.java\n", "chunk": "@@ -87,7 +64,7 @@ public class AuthElasticSourcesTest extends BaseElasticTest {\n \n     @Test\n     public void given_clientWithWrongPassword_whenReadFromElasticSource_thenFailWithAuthenticationException() {\n-        ElasticsearchContainer container = elastic.get();\n+        ElasticsearchContainer container = ElasticSupport.secureElastic.get();\n         String containerIp = container.getContainerIpAddress();\n         Integer port = container.getMappedPort(PORT);\n \n", "next_change": null}]}}, {"oid": "5f25d73f39be65a6476ecc9ad97f5ec5826f3412", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5f25d73f39be65a6476ecc9ad97f5ec5826f3412", "message": "Fix Elastic example", "committedDate": "2020-05-12T12:19:16Z", "type": "commit"}, {"oid": "7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7ab0183d95eb5b7f5e906fd7dc04d305783c0586", "message": "Address feedback", "committedDate": "2020-05-12T21:49:17Z", "type": "commit"}, {"oid": "be6888f2cab882e754476553aeb5811a45cc690a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/be6888f2cab882e754476553aeb5811a45cc690a", "message": "Fix issues discovered in QE pipeline", "committedDate": "2020-05-13T07:33:37Z", "type": "commit"}, {"oid": "29db2d9637bd5a07242d0c34035788674fae0159", "url": "https://github.com/hazelcast/hazelcast-jet/commit/29db2d9637bd5a07242d0c34035788674fae0159", "message": "Close clients correctly, add tests", "committedDate": "2020-05-13T12:08:03Z", "type": "commit"}, {"oid": "98fc3770d0260ef664e3344c654d249cdcc14ae6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/98fc3770d0260ef664e3344c654d249cdcc14ae6", "message": "Fix failing test", "committedDate": "2020-05-13T13:30:33Z", "type": "commit"}, {"oid": "3f554a1972a34ebac647635dec006e6fe70d6f47", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3f554a1972a34ebac647635dec006e6fe70d6f47", "message": "Fix co-located reading with Jet cluster on local machine", "committedDate": "2020-05-13T13:31:12Z", "type": "commit"}, {"oid": "c839a029b4c8ee0c2b1b7702df481b54dde0d28c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c839a029b4c8ee0c2b1b7702df481b54dde0d28c", "message": "Fix issue with shard assignment", "committedDate": "2020-05-13T13:41:04Z", "type": "commit"}, {"oid": "2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2f7eab78539ed37641995fbe5a3d78c1a4572f8a", "message": "Fix javadoc warnings", "committedDate": "2020-05-13T13:51:22Z", "type": "commit"}, {"oid": "c05319d0e72fc1e6d7ae78475cdaf13b489b8118", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c05319d0e72fc1e6d7ae78475cdaf13b489b8118", "message": "Handle possible NPE", "committedDate": "2020-05-19T07:41:36Z", "type": "commit"}, {"oid": "0b33ea706d89eeb62a4c89978cfc566cdcf09746", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0b33ea706d89eeb62a4c89978cfc566cdcf09746", "message": "Merge branch 'master' into elastic", "committedDate": "2020-05-19T07:43:37Z", "type": "commit"}, {"oid": "973fbe2be92554c3904000523c35799bb0804c0c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/973fbe2be92554c3904000523c35799bb0804c0c", "message": "Fix compile error after change in Json API", "committedDate": "2020-05-19T11:44:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMTQ0MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427801441", "body": "`uncheckCall` is not necessary here", "bodyText": "uncheckCall is not necessary here", "bodyHTML": "<p dir=\"auto\"><code>uncheckCall</code> is not necessary here</p>", "author": "gurbuzali", "createdAt": "2020-05-20T07:37:43Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.processor.Processors;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toSet;\n+\n+public class ElasticSourcePMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Nonnull\n+    private final ElasticSourceConfiguration<T> configuration;\n+\n+    private transient Map<Address, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticSourcePMetaSupplier(@Nonnull ElasticSourceConfiguration<T> configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public int preferredLocalParallelism() {\n+        if (configuration.isCoLocatedReadingEnabled() || configuration.isSlicingEnabled()) {\n+            return configuration.preferredLocalParallelism();\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) throws Exception {\n+        try (ElasticCatClient catClient = new ElasticCatClient(configuration.clientFn().get().getLowLevelClient())) {\n+            List<Shard> shards = catClient.shards(configuration.searchRequestFn().get().indices());\n+\n+            if (configuration.isCoLocatedReadingEnabled()) {\n+                Set<Address> addresses = context\n+                        .jetInstance().getCluster().getMembers().stream()\n+                        .map(m -> uncheckCall((m::getAddress)))", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\nindex ccf5165ff..e18fd39e6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\n", "chunk": "@@ -71,7 +71,7 @@ public class ElasticSourcePMetaSupplier<T> implements ProcessorMetaSupplier {\n             if (configuration.isCoLocatedReadingEnabled()) {\n                 Set<Address> addresses = context\n                         .jetInstance().getCluster().getMembers().stream()\n-                        .map(m -> uncheckCall((m::getAddress)))\n+                        .map(Member::getAddress)\n                         .collect(toSet());\n                 assignedShards = assignShards(shards, addresses);\n             } else {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNDYwNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427804607", "body": "no need to create a keySet to get the size", "bodyText": "no need to create a keySet to get the size", "bodyHTML": "<p dir=\"auto\">no need to create a keySet to get the size</p>", "author": "gurbuzali", "createdAt": "2020-05-20T07:43:21Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.processor.Processors;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckCall;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.nCopies;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toSet;\n+\n+public class ElasticSourcePMetaSupplier<T> implements ProcessorMetaSupplier {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Nonnull\n+    private final ElasticSourceConfiguration<T> configuration;\n+\n+    private transient Map<Address, List<Shard>> assignedShards;\n+    private transient Address ownerAddress;\n+\n+    public ElasticSourcePMetaSupplier(@Nonnull ElasticSourceConfiguration<T> configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public int preferredLocalParallelism() {\n+        if (configuration.isCoLocatedReadingEnabled() || configuration.isSlicingEnabled()) {\n+            return configuration.preferredLocalParallelism();\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+    @Override\n+    public void init(@Nonnull Context context) throws Exception {\n+        try (ElasticCatClient catClient = new ElasticCatClient(configuration.clientFn().get().getLowLevelClient())) {\n+            List<Shard> shards = catClient.shards(configuration.searchRequestFn().get().indices());\n+\n+            if (configuration.isCoLocatedReadingEnabled()) {\n+                Set<Address> addresses = context\n+                        .jetInstance().getCluster().getMembers().stream()\n+                        .map(m -> uncheckCall((m::getAddress)))\n+                        .collect(toSet());\n+                assignedShards = assignShards(shards, addresses);\n+            } else {\n+                ownerAddress = context.jetInstance().getHazelcastInstance().getPartitionService()\n+                                      .getPartition(context.jobId()).getOwner().getAddress();\n+                assignedShards = emptyMap();\n+            }\n+        }\n+    }\n+\n+    static Map<Address, List<Shard>> assignShards(Collection<Shard> shards, Collection<Address> addresses) {\n+        Map<String, List<Shard>> nodeCandidates = shards.stream()\n+                                                        .collect(groupingBy(Shard::getIp));\n+        Map<Address, List<Shard>> nodeAssigned = new HashMap<>();\n+\n+        if (!addresses.stream().map(Address::getHost).collect(toSet())\n+                      .containsAll(nodeCandidates.keySet())) {\n+            throw new JetException(\"Shard locations are not equal to Jet nodes locations, \" +\n+                    \"shards=\" + nodeCandidates.keySet() + \", Jet nodes=\" + addresses);\n+        }\n+\n+        int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n+        Set<String> assignedShards = new HashSet<>();\n+\n+        int candidatesSize = nodeCandidates.keySet().size();", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\nindex ccf5165ff..e18fd39e6 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourcePMetaSupplier.java\n", "chunk": "@@ -96,7 +96,7 @@ public class ElasticSourcePMetaSupplier<T> implements ProcessorMetaSupplier {\n         int uniqueShards = (int) shards.stream().map(Shard::indexShard).distinct().count();\n         Set<String> assignedShards = new HashSet<>();\n \n-        int candidatesSize = nodeCandidates.keySet().size();\n+        int candidatesSize = nodeCandidates.size();\n         int iterations = (uniqueShards + candidatesSize - 1) / candidatesSize; // Same as Math.ceil for float div\n         for (int i = 0; i < iterations; i++) {\n             for (Address address : addresses) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5Nzg5OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427897899", "body": "I think we should enhance the JavaDoc here since slicing can be done on a single shard too.\r\nAdditionally, when slicing is used with co-located reading I guess the number of slices change ? ", "bodyText": "I think we should enhance the JavaDoc here since slicing can be done on a single shard too.\nAdditionally, when slicing is used with co-located reading I guess the number of slices change ?", "bodyHTML": "<p dir=\"auto\">I think we should enhance the JavaDoc here since slicing can be done on a single shard too.<br>\nAdditionally, when slicing is used with co-located reading I guess the number of slices change ?</p>", "author": "gurbuzali", "createdAt": "2020-05-20T10:15:25Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticSourceConfiguration;\n+import com.hazelcast.jet.elastic.impl.ElasticSourcePMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n+ *\n+ * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ *\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n+ * @since 4.2\n+ */\n+public class ElasticSourceBuilder<T> {\n+\n+    private static final String DEFAULT_NAME = \"elasticSource\";\n+\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientFn, \"clientFn must be set\");\n+        requireNonNull(searchRequestFn, \"searchRequestFn must be set\");\n+        requireNonNull(mapToItemFn, \"mapToItemFn must be set\");\n+\n+        ElasticSourceConfiguration<T> configuration = new ElasticSourceConfiguration<>(\n+                restHighLevelClientFn(clientFn),\n+                searchRequestFn, optionsFn, mapToItemFn, slicing, coLocatedReading,\n+                scrollKeepAlive, preferredLocalParallelism\n+        );\n+        ElasticSourcePMetaSupplier<T> metaSupplier = new ElasticSourcePMetaSupplier<>(configuration);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    // Don't inline - it would capture this.clientFn and would need to serialize whole builder instance\n+    private SupplierEx<RestHighLevelClient> restHighLevelClientFn(SupplierEx<RestClientBuilder> clientFn) {\n+        return () -> new RestHighLevelClient(clientFn.get());\n+    }\n+\n+    /**\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the search request supplier function\n+     * <p>\n+     * The connector executes this search request to retrieve documents from Elasticsearch.\n+     * <p>\n+     * For example, to create SearchRequest limited to an index `logs`:\n+     * <pre>{@code\n+     * builder.searchRequestFn(() -> new SearchRequest(\"logs\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param searchRequestFn search request supplier function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestFn(@Nonnull SupplierEx<SearchRequest> searchRequestFn) {\n+        this.searchRequestFn = checkSerializable(searchRequestFn, \"searchRequestFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to a pipeline item\n+     * <p>\n+     * For example, to map a SearchHit to a value of a field `productId`:\n+     * <pre>{@code\n+     * builder.mapToItemFn(hit -> (String) hit.getSourceAsMap().get(\"productId\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param mapToItemFn maps search hits to output items\n+     */\n+    @Nonnull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T_NEW> ElasticSourceBuilder<T_NEW> mapToItemFn(@Nonnull FunctionEx<? super SearchHit, T_NEW> mapToItemFn) {\n+        ElasticSourceBuilder<T_NEW> newThis = (ElasticSourceBuilder<T_NEW>) this;\n+        newThis.mapToItemFn = checkSerializable(mapToItemFn, \"mapToItemFn\");\n+        return newThis;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, use this to provide a custom authentication header:\n+     * <pre>{@code\n+     * sourceBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        this.optionsFn = checkSerializable(optionsFn, \"optionsFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80c7490aba7c5a63ce852e00032eb5ee46d8071d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex a0ef3aff7..8b0254caa 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -182,9 +183,12 @@ public class ElasticSourceBuilder<T> {\n     /**\n      * Enable slicing\n      * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes) when only slicing is enabled.\n+     * When co-located reading is enabled as well then number of slices for particular node is equal to\n+     * localParallelism.\n      * <p>\n-     * Use this option to read from multiple shards in parallel.\n+     * Use this option to read from multiple shards in parallel. It can also be used on single shard, but it may\n+     * increase initial latency. See Elastic documentation for sliced scroll for details.\n      *\n      * @see\n      * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n", "next_change": {"commit": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 8b0254caa..14c353658 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -183,16 +184,16 @@ public final class ElasticSourceBuilder<T> {\n     /**\n      * Enable slicing\n      * <p>\n-     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes) when only slicing is enabled.\n-     * When co-located reading is enabled as well then number of slices for particular node is equal to\n-     * localParallelism.\n+     * Number of slices is equal to {@code globalParallelism (localParallelism * numberOfNodes)}\n+     * when only slicing is enabled. When co-located reading is enabled as\n+     * well then number of slices for particular node is equal to\n+     * {@code localParallelism}.\n      * <p>\n-     * Use this option to read from multiple shards in parallel. It can also be used on single shard, but it may\n-     * increase initial latency. See Elastic documentation for sliced scroll for details.\n-     *\n-     * @see\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n-     *     Sliced Scroll</a>\n+     * Use this option to read from multiple shards in parallel. It can\n+     * also be used on single shard, but it may increase initial latency.\n+     * See Elastic documentation for\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">Sliced Scroll</a>\n+     * for details.\n      */\n     @Nonnull\n     public ElasticSourceBuilder<T> enableSlicing() {\n", "next_change": {"commit": "3ead8890ca263bee8cc9985d055f26d5ff2423de", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 14c353658..870c41671 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -192,8 +192,8 @@ public final class ElasticSourceBuilder<T> {\n      * Use this option to read from multiple shards in parallel. It can\n      * also be used on single shard, but it may increase initial latency.\n      * See Elastic documentation for\n-     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">Sliced Scroll</a>\n-     * for details.\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a> for details.\n      */\n     @Nonnull\n     public ElasticSourceBuilder<T> enableSlicing() {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTM4Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427899386", "body": "looks like this is not covered in the tests, also `preferredLocalParallelism`", "bodyText": "looks like this is not covered in the tests, also preferredLocalParallelism", "bodyHTML": "<p dir=\"auto\">looks like this is not covered in the tests, also <code>preferredLocalParallelism</code></p>", "author": "gurbuzali", "createdAt": "2020-05-20T10:18:12Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapToRequestFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestFn(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientFn(() -> ElasticClients.client(host, port))\n+ *   .mapToRequestFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientFn(SupplierEx)} and {@link #mapToRequestFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.2\n+ */\n+public class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elasticSink\";\n+\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<BulkRequest> bulkRequestFn = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n+     *\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param <T_NEW> type of the items from the pipeline\n+     */\n+    @Nonnull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T_NEW> ElasticSinkBuilder<T_NEW> mapToRequestFn(\n+            @Nonnull FunctionEx<? super T_NEW, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n+        ElasticSinkBuilder<T_NEW> newThis = (ElasticSinkBuilder<T_NEW>) this;\n+        newThis.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n+        return newThis;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4NDM2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r430884365", "bodyText": "ElasticSourcePTest tests that it is used (also for scroll keepAlive).", "author": "frant-hartm", "createdAt": "2020-05-27T06:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 031412529..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDYwOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427900608", "body": "not covered in the tests, also `preferredLocalParallelism` and `scrollKeepAlive`", "bodyText": "not covered in the tests, also preferredLocalParallelism and scrollKeepAlive", "bodyHTML": "<p dir=\"auto\">not covered in the tests, also <code>preferredLocalParallelism</code> and <code>scrollKeepAlive</code></p>", "author": "gurbuzali", "createdAt": "2020-05-20T10:20:27Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticSourceConfiguration;\n+import com.hazelcast.jet.elastic.impl.ElasticSourcePMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n+ *\n+ * Requires {@link #clientFn(SupplierEx)}, {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ *\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n+ * @since 4.2\n+ */\n+public class ElasticSourceBuilder<T> {\n+\n+    private static final String DEFAULT_NAME = \"elasticSource\";\n+\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientFn, \"clientFn must be set\");\n+        requireNonNull(searchRequestFn, \"searchRequestFn must be set\");\n+        requireNonNull(mapToItemFn, \"mapToItemFn must be set\");\n+\n+        ElasticSourceConfiguration<T> configuration = new ElasticSourceConfiguration<>(\n+                restHighLevelClientFn(clientFn),\n+                searchRequestFn, optionsFn, mapToItemFn, slicing, coLocatedReading,\n+                scrollKeepAlive, preferredLocalParallelism\n+        );\n+        ElasticSourcePMetaSupplier<T> metaSupplier = new ElasticSourcePMetaSupplier<>(configuration);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    // Don't inline - it would capture this.clientFn and would need to serialize whole builder instance\n+    private SupplierEx<RestHighLevelClient> restHighLevelClientFn(SupplierEx<RestClientBuilder> clientFn) {\n+        return () -> new RestHighLevelClient(clientFn.get());\n+    }\n+\n+    /**\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the search request supplier function\n+     * <p>\n+     * The connector executes this search request to retrieve documents from Elasticsearch.\n+     * <p>\n+     * For example, to create SearchRequest limited to an index `logs`:\n+     * <pre>{@code\n+     * builder.searchRequestFn(() -> new SearchRequest(\"logs\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param searchRequestFn search request supplier function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestFn(@Nonnull SupplierEx<SearchRequest> searchRequestFn) {\n+        this.searchRequestFn = checkSerializable(searchRequestFn, \"searchRequestFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to a pipeline item\n+     * <p>\n+     * For example, to map a SearchHit to a value of a field `productId`:\n+     * <pre>{@code\n+     * builder.mapToItemFn(hit -> (String) hit.getSourceAsMap().get(\"productId\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param mapToItemFn maps search hits to output items\n+     */\n+    @Nonnull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T_NEW> ElasticSourceBuilder<T_NEW> mapToItemFn(@Nonnull FunctionEx<? super SearchHit, T_NEW> mapToItemFn) {\n+        ElasticSourceBuilder<T_NEW> newThis = (ElasticSourceBuilder<T_NEW>) this;\n+        newThis.mapToItemFn = checkSerializable(mapToItemFn, \"mapToItemFn\");\n+        return newThis;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, use this to provide a custom authentication header:\n+     * <pre>{@code\n+     * sourceBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNDMyMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427904321", "body": "```suggestion\r\n        return Sources.filesBuilder(directory)\r\n               .build(path -> Stream.of(new String(Files.readAllBytes(path), UTF_8)));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n          \n          \n            \n                            SourceProcessors.readFilesP(directory, \"*\", false,\n          \n          \n            \n                                    path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));\n          \n          \n            \n                    return Sources.filesBuilder(directory)\n          \n          \n            \n                           .build(path -> Stream.of(new String(Files.readAllBytes(path), UTF_8)));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> batchFromProcessor(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filesSource(<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(directory) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>)<span class=\"pl-pds\">'</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">SourceProcessors</span><span class=\"pl-k\">.</span>readFilesP(directory, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>*<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">false</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        path <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>of(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>(<span class=\"pl-smi\">Files</span><span class=\"pl-k\">.</span>readAllBytes(path), <span class=\"pl-c1\">UTF_8</span>))));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Sources</span><span class=\"pl-k\">.</span>filesBuilder(directory)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">               .build(path <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>of(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>(<span class=\"pl-smi\">Files</span><span class=\"pl-k\">.</span>readAllBytes(path), <span class=\"pl-c1\">UTF_8</span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gurbuzali", "createdAt": "2020-05-20T10:27:10Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticClients;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.json.JsonUtil;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {\n+\n+    public static void main(String[] args) {\n+        try {\n+            Pipeline p = create();\n+            p.readFrom(files(\"src/main/resources/documents\"))\n+             .map(JsonUtil::mapFrom)\n+             .writeTo(ElasticSinks.elastic(\n+                     () -> ElasticClients.client(\"localhost\", 9200),\n+                     map -> new IndexRequest(\"my-index\").source(map)\n+             ));\n+\n+            JetInstance jet = Jet.newJetInstance();\n+            jet.newJob(p).join();\n+        } catch (Exception e) {\n+            Jet.shutdownAll();\n+        }\n+    }\n+\n+    public static BatchSource<String> files(String directory) {\n+        return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n+                SourceProcessors.readFilesP(directory, \"*\", false,\n+                        path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex e42c902fa..905b03732 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -54,9 +58,8 @@ public class ElasticSinkExample {\n     }\n \n     public static BatchSource<String> files(String directory) {\n-        return batchFromProcessor(\"filesSource(\" + new File(directory) + ')',\n-                SourceProcessors.readFilesP(directory, \"*\", false,\n-                        path -> Stream.of(new String(Files.readAllBytes(path), UTF_8))));\n+        return Sources.filesBuilder(directory)\n+                      .build(path -> Stream.of(new String(Files.readAllBytes(path), UTF_8)));\n     }\n \n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNTYwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r427905600", "body": "can we have a few lines of javadoc describes what the example does\r\nalso source example", "bodyText": "can we have a few lines of javadoc describes what the example does\nalso source example", "bodyHTML": "<p dir=\"auto\">can we have a few lines of javadoc describes what the example does<br>\nalso source example</p>", "author": "gurbuzali", "createdAt": "2020-05-20T10:29:17Z", "path": "examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.elastic;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.core.processor.SourceProcessors;\n+import com.hazelcast.jet.elastic.ElasticClients;\n+import com.hazelcast.jet.elastic.ElasticSinks;\n+import com.hazelcast.jet.json.JsonUtil;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import org.elasticsearch.action.index.IndexRequest;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.pipeline.Pipeline.create;\n+import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class ElasticSinkExample {", "originalCommit": "973fbe2be92554c3904000523c35799bb0804c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex e42c902fa..905b03732 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -18,22 +18,26 @@ package com.hazelcast.jet.examples.elastic;\n \n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n-import com.hazelcast.jet.core.processor.SourceProcessors;\n import com.hazelcast.jet.elastic.ElasticClients;\n import com.hazelcast.jet.elastic.ElasticSinks;\n import com.hazelcast.jet.json.JsonUtil;\n import com.hazelcast.jet.pipeline.BatchSource;\n import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sources;\n import org.elasticsearch.action.index.IndexRequest;\n \n-import java.io.File;\n import java.nio.file.Files;\n import java.util.stream.Stream;\n \n import static com.hazelcast.jet.pipeline.Pipeline.create;\n-import static com.hazelcast.jet.pipeline.Sources.batchFromProcessor;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n+/**\n+ * Example for Elastic Sink\n+ *\n+ * Reads files from `src/main/resources/documents` folder and indexes them as documents into Elastic running on\n+ * localhost:9200\n+ */\n public class ElasticSinkExample {\n \n     public static void main(String[] args) {\n", "next_change": {"commit": "b468d088bc37f58643c774eb3e2d60626b949ff4", "changed_code": [{"header": "diff --git a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\nindex 905b03732..770fe3418 100644\n--- a/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n+++ b/examples/elastic/src/main/java/com/hazelcast/jet/examples/elastic/ElasticSinkExample.java\n", "chunk": "@@ -35,8 +35,8 @@ import static java.nio.charset.StandardCharsets.UTF_8;\n /**\n  * Example for Elastic Sink\n  *\n- * Reads files from `src/main/resources/documents` folder and indexes them as documents into Elastic running on\n- * localhost:9200\n+ * Reads files from `src/main/resources/documents` folder and indexes them as\n+ * documents into Elastic running on localhost:9200\n  */\n public class ElasticSinkExample {\n \n", "next_change": null}]}}]}}, {"oid": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "message": "minor tweaks", "committedDate": "2020-05-20T13:06:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjMyOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r430182329", "body": "This should not be an option for the sink, it's not offered for any other sink. We just set a reasonable default.", "bodyText": "This should not be an option for the sink, it's not offered for any other sink. We just set a reasonable default.", "bodyHTML": "<p dir=\"auto\">This should not be an option for the sink, it's not offered for any other sink. We just set a reasonable default.</p>", "author": "cangencer", "createdAt": "2020-05-26T06:28:49Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.SinkBuilder;\n+import com.hazelcast.logging.ILogger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch Sink\n+ * <p>\n+ * The Sink first maps items from the pipeline using the provided\n+ * {@link #mapToRequestFn(FunctionEx)} and then using {@link BulkRequest}.\n+ * <p>\n+ * {@link BulkRequest#BulkRequest()} is used by default, it can be\n+ * modified by providing custom {@link #bulkRequestFn(SupplierEx)}\n+ *\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * Sink<Map<String, ?>> elasticSink = new ElasticSinkBuilder<Map<String, ?>>()\n+ *   .clientFn(() -> ElasticClients.client(host, port))\n+ *   .mapToRequestFn(item -> new IndexRequest(\"my-index\").source(item))\n+ *   .build();\n+ * }</pre>\n+ * <p>\n+ * Requires {@link #clientFn(SupplierEx)} and {@link #mapToRequestFn(FunctionEx)}.\n+ *\n+ * @param <T>\n+ * @since 4.2\n+ */\n+public final class ElasticSinkBuilder<T> implements Serializable {\n+\n+    private static final String DEFAULT_NAME = \"elasticSink\";\n+\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<BulkRequest> bulkRequestFn = BulkRequest::new;\n+    private FunctionEx<? super T, ? extends DocWriteRequest<?>> mapToRequestFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = (request) -> RequestOptions.DEFAULT;\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch. Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the supplier function for BulkRequest, defaults to new {@link BulkRequest#BulkRequest()}\n+     * <p>\n+     * For example, to modify the BulkRequest used to index documents:\n+     * <pre>{@code\n+     * builder.bulkRequestFn(() -> new BulkRequest().setRefreshPolicy(IMMEDIATE))\n+     * }</pre>\n+     *\n+     * @param bulkRequestFn supplier function for the bulk request\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html#bulk\">\n+     * Bulk indexing usage in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> bulkRequestFn(@Nonnull SupplierEx<BulkRequest> bulkRequestFn) {\n+        this.bulkRequestFn = checkNonNullAndSerializable(bulkRequestFn, \"bulkRequestFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the function mapping the item from a pipeline item to an index request\n+     * <p>\n+     * For example, to create an IndexRequest for a versioned document:\n+     * <pre>{@code\n+     * builder.mapToRequestFn((mapItem) ->\n+     *                      new IndexRequest(\"my-index\")\n+     *                              .source(map)\n+     *                              .version((Long) map.get(\"version\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param mapToRequestFn maps an item from the stream to an {@link org.elasticsearch.action.index.IndexRequest},\n+     *                       {@link org.elasticsearch.action.update.UpdateRequest} or\n+     *                       {@link org.elasticsearch.action.delete.DeleteRequest}\n+     * @param <T_NEW> type of the items from the pipeline\n+     */\n+    @Nonnull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T_NEW> ElasticSinkBuilder<T_NEW> mapToRequestFn(\n+            @Nonnull FunctionEx<? super T_NEW, ? extends DocWriteRequest<?>> mapToRequestFn\n+    ) {\n+        ElasticSinkBuilder<T_NEW> newThis = (ElasticSinkBuilder<T_NEW>) this;\n+        newThis.mapToRequestFn = checkNonNullAndSerializable(mapToRequestFn, \"mapToRequestFn\");\n+        return newThis;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, to provide a custom authentication header:\n+     * <pre>{@code\n+     * sinkBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        this.optionsFn = checkNonNullAndSerializable(optionsFn, \"optionsFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {", "originalCommit": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 809aebb7f..4fb394dfb 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n", "chunk": "@@ -162,15 +163,6 @@ public final class ElasticSinkBuilder<T> implements Serializable {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this sink. See {@link SinkBuilder#preferredLocalParallelism(int)}.\n-     */\n-    @Nonnull\n-    public ElasticSinkBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n     /**\n      * Create a sink that writes data into Elasticsearch based on this builder configuration\n      */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4Mjg2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r430182869", "body": "this should not be an option here. The user can set their own and then when slicing is enabled we should set it to reasonable default. Sinks themselves don't have a parallelism option, it's something you add when you add it to the pipeline.", "bodyText": "this should not be an option here. The user can set their own and then when slicing is enabled we should set it to reasonable default. Sinks themselves don't have a parallelism option, it's something you add when you add it to the pipeline.", "bodyHTML": "<p dir=\"auto\">this should not be an option here. The user can set their own and then when slicing is enabled we should set it to reasonable default. Sinks themselves don't have a parallelism option, it's something you add when you add it to the pipeline.</p>", "author": "cangencer", "createdAt": "2020-05-26T06:30:06Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.elastic.impl.ElasticSourceConfiguration;\n+import com.hazelcast.jet.elastic.impl.ElasticSourcePMetaSupplier;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Sources;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.search.SearchHit;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.hazelcast.jet.impl.util.Util.checkNonNullAndSerializable;\n+import static com.hazelcast.jet.impl.util.Util.checkSerializable;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Builder for Elasticsearch source which reads data from Elasticsearch and\n+ * converts SearchHits using provided {@code mapToItemFn}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ * BatchSource<String> source = new ElasticSourceBuilder<String>()\n+ *   .clientFn(() -> client(host, port))\n+ *   .searchRequestFn(() -> new SearchRequest(\"my-index\"))\n+ *   .mapToItemFn(SearchHit::getSourceAsString)\n+ *   .build();\n+ *\n+ * BatchStage<String> stage = p.readFrom(source);\n+ * }</pre>\n+ *\n+ * Requires {@link #clientFn(SupplierEx)},\n+ * {@link #searchRequestFn(SupplierEx)} and {@link #mapToItemFn(FunctionEx)}.\n+ *\n+ * @param <T> type of the output of the mapping function from {@link SearchHit} -> T\n+ * @since 4.2\n+ */\n+public final class ElasticSourceBuilder<T> {\n+\n+    private static final String DEFAULT_NAME = \"elasticSource\";\n+\n+    private SupplierEx<RestClientBuilder> clientFn;\n+    private SupplierEx<SearchRequest> searchRequestFn;\n+    private FunctionEx<? super ActionRequest, RequestOptions> optionsFn = request -> RequestOptions.DEFAULT;\n+    private FunctionEx<? super SearchHit, T> mapToItemFn;\n+    private boolean slicing;\n+    private boolean coLocatedReading;\n+    private String scrollKeepAlive = \"1m\"; // Using String because it needs to be Serializable\n+    private int preferredLocalParallelism = 2;\n+\n+    /**\n+     * Build Elasticsearch {@link BatchSource} with supplied parameters\n+     *\n+     * @return configured source which is to be used in the pipeline\n+     */\n+    @Nonnull\n+    public BatchSource<T> build() {\n+        requireNonNull(clientFn, \"clientFn must be set\");\n+        requireNonNull(searchRequestFn, \"searchRequestFn must be set\");\n+        requireNonNull(mapToItemFn, \"mapToItemFn must be set\");\n+\n+        ElasticSourceConfiguration<T> configuration = new ElasticSourceConfiguration<>(\n+                restHighLevelClientFn(clientFn),\n+                searchRequestFn, optionsFn, mapToItemFn, slicing, coLocatedReading,\n+                scrollKeepAlive, preferredLocalParallelism\n+        );\n+        ElasticSourcePMetaSupplier<T> metaSupplier = new ElasticSourcePMetaSupplier<>(configuration);\n+        return Sources.batchFromProcessor(DEFAULT_NAME, metaSupplier);\n+    }\n+\n+    // Don't inline - it would capture this.clientFn and would need to serialize whole builder instance\n+    private SupplierEx<RestHighLevelClient> restHighLevelClientFn(SupplierEx<RestClientBuilder> clientFn) {\n+        return () -> new RestHighLevelClient(clientFn.get());\n+    }\n+\n+    /**\n+     * Set the client supplier function\n+     * <p>\n+     * The connector uses the returned instance to access Elasticsearch.\n+     * Also see {@link ElasticClients} for convenience\n+     * factory methods.\n+     * <p>\n+     * For example, to provide an authenticated client:\n+     * <pre>{@code\n+     * builder.clientFn(() -> client(host, port, username, password))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param clientFn supplier function returning configured Elasticsearch REST client\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> clientFn(@Nonnull SupplierEx<RestClientBuilder> clientFn) {\n+        this.clientFn = checkNonNullAndSerializable(clientFn, \"clientFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the search request supplier function\n+     * <p>\n+     * The connector executes this search request to retrieve documents from Elasticsearch.\n+     * <p>\n+     * For example, to create SearchRequest limited to an index `logs`:\n+     * <pre>{@code\n+     * builder.searchRequestFn(() -> new SearchRequest(\"logs\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param searchRequestFn search request supplier function\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> searchRequestFn(@Nonnull SupplierEx<SearchRequest> searchRequestFn) {\n+        this.searchRequestFn = checkSerializable(searchRequestFn, \"searchRequestFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Set the function to map SearchHit to a pipeline item\n+     * <p>\n+     * For example, to map a SearchHit to a value of a field `productId`:\n+     * <pre>{@code\n+     * builder.mapToItemFn(hit -> (String) hit.getSourceAsMap().get(\"productId\"))\n+     * }</pre>\n+     *\n+     * This parameter is required.\n+     *\n+     * @param mapToItemFn maps search hits to output items\n+     */\n+    @Nonnull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T_NEW> ElasticSourceBuilder<T_NEW> mapToItemFn(@Nonnull FunctionEx<? super SearchHit, T_NEW> mapToItemFn) {\n+        ElasticSourceBuilder<T_NEW> newThis = (ElasticSourceBuilder<T_NEW>) this;\n+        newThis.mapToItemFn = checkSerializable(mapToItemFn, \"mapToItemFn\");\n+        return newThis;\n+    }\n+\n+    /**\n+     * Set the function that provides {@link RequestOptions}\n+     * <p>\n+     * It can either return a constant value or a value based on provided request.\n+     * <p>\n+     * For example, use this to provide a custom authentication header:\n+     * <pre>{@code\n+     * sourceBuilder.optionsFn((request) -> {\n+     *     RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+     *     builder.addHeader(\"Authorization\", \"Bearer \" + TOKEN);\n+     *     return builder.build();\n+     * })\n+     * }</pre>\n+     *\n+     * @param optionsFn function that provides {@link RequestOptions}\n+     * @see <a\n+     * href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-requests.html\">\n+     * RequestOptions in Elastic documentation</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> optionsFn(@Nonnull FunctionEx<? super ActionRequest, RequestOptions> optionsFn) {\n+        this.optionsFn = checkSerializable(optionsFn, \"optionsFn\");\n+        return this;\n+    }\n+\n+    /**\n+     * Enable slicing\n+     * <p>\n+     * Number of slices is equal to globalParallelism (localParallelism * numberOfNodes)\n+     * <p>\n+     * Use this option to read from multiple shards in parallel.\n+     *\n+     * @see\n+     * <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#sliced-scroll\">\n+     *     Sliced Scroll</a>\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> enableSlicing() {\n+        this.slicing = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Enable co-located reading\n+     *\n+     * Jet cluster member must run exactly on the same nodes as Elastic cluster.\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> enableCoLocatedReading() {\n+        this.coLocatedReading = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the keepAlive for Elastic search scroll\n+     * <p>\n+     * See {@link SearchRequest#scroll(String)}\n+     *\n+     * @param scrollKeepAlive keepAlive value, this must be high enough to process all results from a single scroll,\n+     *                        default value 1m\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> scrollKeepAlive(@Nonnull String scrollKeepAlive) {\n+        this.scrollKeepAlive = requireNonNull(scrollKeepAlive, scrollKeepAlive);\n+        return this;\n+    }\n+\n+    /**\n+     * Set the local parallelism of this source.\n+     *\n+     * Note this has an effect only when {@link #enableCoLocatedReading()} or {@link #enableSlicing()} is enabled,\n+     * otherwise the data is read only from 1 processor in whole Jet cluster.\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {", "originalCommit": "0f11a25723a1fef7f1d22d7450943ad6d0e0b5ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10bca546c25a7444c5b4c8fb33024a98150a586d", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 55f195a6f..55aea2007 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n", "chunk": "@@ -223,16 +222,4 @@ public final class ElasticSourceBuilder<T> {\n         return this;\n     }\n \n-    /**\n-     * Set the local parallelism of this source.\n-     *\n-     * Note this has an effect only when {@link #enableCoLocatedReading()} or {@link #enableSlicing()} is enabled,\n-     * otherwise the data is read only from 1 processor in whole Jet cluster.\n-     */\n-    @Nonnull\n-    public ElasticSourceBuilder<T> preferredLocalParallelism(int preferredLocalParallelism) {\n-        this.preferredLocalParallelism = preferredLocalParallelism;\n-        return this;\n-    }\n-\n }\n", "next_change": null}]}}, {"oid": "10bca546c25a7444c5b4c8fb33024a98150a586d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/10bca546c25a7444c5b4c8fb33024a98150a586d", "message": "Remove prefferedLocalParallelism options", "committedDate": "2020-05-26T07:47:30Z", "type": "commit"}, {"oid": "5d06893072eb69ef01323bf0b6c567288f6f386c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5d06893072eb69ef01323bf0b6c567288f6f386c", "message": "Merge branch 'master' into elastic", "committedDate": "2020-05-26T12:07:53Z", "type": "commit"}, {"oid": "2c30fcc5d55dc3bae5bccb3b7e0dedb29d818d73", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2c30fcc5d55dc3bae5bccb3b7e0dedb29d818d73", "message": "Add elasticsearch 7 connector to distribution", "committedDate": "2020-05-26T12:20:01Z", "type": "commit"}, {"oid": "5467ab552efaf17067cfca6586c9d1fb83452724", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5467ab552efaf17067cfca6586c9d1fb83452724", "message": "Update to latest elasticsearch server in tests", "committedDate": "2020-05-26T12:34:39Z", "type": "commit"}, {"oid": "0c6f8e3012bd668135d679c8a8a50258195e193a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0c6f8e3012bd668135d679c8a8a50258195e193a", "message": "Use lower localParallelism defaults (avoid OOM on high cpu count machines)", "committedDate": "2020-05-26T14:12:45Z", "type": "commit"}, {"oid": "bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bb2a2aafc4edd8f7d04d2f560c28c9ce432d30c4", "message": "Address review", "committedDate": "2020-05-26T20:33:24Z", "type": "commit"}, {"oid": "80c7490aba7c5a63ce852e00032eb5ee46d8071d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/80c7490aba7c5a63ce852e00032eb5ee46d8071d", "message": "Improve javadoc", "committedDate": "2020-05-27T06:35:21Z", "type": "commit"}, {"oid": "12034933d1cbc80292cbe9e3be816fa9bacf342c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/12034933d1cbc80292cbe9e3be816fa9bacf342c", "message": "fix javadoc lengths", "committedDate": "2020-05-28T07:22:28Z", "type": "commit"}, {"oid": "e99f2b0a765541a8c7751af42681947a8a0002cb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e99f2b0a765541a8c7751af42681947a8a0002cb", "message": "Merge branch 'master' into elastic", "committedDate": "2020-05-28T07:41:51Z", "type": "commit"}, {"oid": "3ead8890ca263bee8cc9985d055f26d5ff2423de", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3ead8890ca263bee8cc9985d055f26d5ff2423de", "message": "Improve javadoc for scrollKeepAlive, add source/sink to summary", "committedDate": "2020-05-28T08:36:22Z", "type": "commit"}, {"oid": "b468d088bc37f58643c774eb3e2d60626b949ff4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b468d088bc37f58643c774eb3e2d60626b949ff4", "message": "javadoc cleanup", "committedDate": "2020-05-28T09:12:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzQ4OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r431707489", "body": "Why don't we create the container at `@BeforeClass` phase and stop it at `@AfterClass` ? \r\nCurrently we wait for all the test suite to complete and then stop the container via shutdown hook.", "bodyText": "Why don't we create the container at @BeforeClass phase and stop it at @AfterClass ?\nCurrently we wait for all the test suite to complete and then stop the container via shutdown hook.", "bodyHTML": "<p dir=\"auto\">Why don't we create the container at <code>@BeforeClass</code> phase and stop it at <code>@AfterClass</code> ?<br>\nCurrently we wait for all the test suite to complete and then stop the container via shutdown hook.</p>", "author": "gurbuzali", "createdAt": "2020-05-28T09:36:08Z", "path": "extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSinksTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic;\n+\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.elastic.CommonElasticSinksTest.TestItem;\n+import com.hazelcast.jet.impl.util.Util;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import org.elasticsearch.ElasticsearchStatusException;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.testcontainers.elasticsearch.ElasticsearchContainer;\n+\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+import static com.hazelcast.jet.elastic.ElasticClients.client;\n+import static com.hazelcast.jet.elastic.ElasticSupport.ELASTICSEARCH_IMAGE;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class AuthElasticSinksTest extends BaseElasticTest {\n+\n+    /**\n+     * Using elastic container configured with security enabled\n+     */\n+    public static Supplier<ElasticsearchContainer> elastic = Util.memoize(() -> {\n+        ElasticsearchContainer elastic = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n+                .withEnv(\"ELASTIC_USERNAME\", \"elastic\")\n+                .withEnv(\"ELASTIC_PASSWORD\", \"SuperSecret\")\n+                .withEnv(\"xpack.security.enabled\", \"true\");\n+\n+        elastic.start();\n+        Runtime.getRuntime().addShutdownHook(new Thread(elastic::stop));", "originalCommit": "b468d088bc37f58643c774eb3e2d60626b949ff4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwMDY5Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2098#discussion_r431800696", "bodyText": "This is to avoid starting the container multiple times for different classes.\nThere were separate secured instances in AuthElasticSinksTest and AuthElasticSourcesTest, moved this to ElasticSupport.", "author": "frant-hartm", "createdAt": "2020-05-28T12:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a1b6a295196873f8bcf59d21b5dcd3a11ea79dd", "changed_code": [{"header": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSinksTest.java b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSinksTest.java\nindex 2861192a9..fd0ebd151 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSinksTest.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/test/java/com/hazelcast/jet/elastic/AuthElasticSinksTest.java\n", "chunk": "@@ -35,29 +34,13 @@ import org.junit.Test;\n import org.testcontainers.elasticsearch.ElasticsearchContainer;\n \n import java.io.IOException;\n-import java.util.function.Supplier;\n \n import static com.hazelcast.jet.elastic.ElasticClients.client;\n-import static com.hazelcast.jet.elastic.ElasticSupport.ELASTICSEARCH_IMAGE;\n+import static com.hazelcast.jet.elastic.ElasticSupport.PORT;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n public class AuthElasticSinksTest extends BaseElasticTest {\n \n-    /**\n-     * Using elastic container configured with security enabled\n-     */\n-    public static Supplier<ElasticsearchContainer> elastic = Util.memoize(() -> {\n-        ElasticsearchContainer elastic = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n-                .withEnv(\"ELASTIC_USERNAME\", \"elastic\")\n-                .withEnv(\"ELASTIC_PASSWORD\", \"SuperSecret\")\n-                .withEnv(\"xpack.security.enabled\", \"true\");\n-\n-        elastic.start();\n-        Runtime.getRuntime().addShutdownHook(new Thread(elastic::stop));\n-        return elastic;\n-    });\n-    public static final int PORT = 9200;\n-\n     private final JetTestInstanceFactory factory = new JetTestInstanceFactory();\n \n     @After\n", "next_change": null}]}}, {"oid": "2a1b6a295196873f8bcf59d21b5dcd3a11ea79dd", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2a1b6a295196873f8bcf59d21b5dcd3a11ea79dd", "message": "Use single secured instance for Elastic authenticatio tests", "committedDate": "2020-05-28T12:28:13Z", "type": "commit"}]}