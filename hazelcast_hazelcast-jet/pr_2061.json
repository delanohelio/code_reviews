{"pr_number": 2061, "pr_title": "Improve serialization exceptions", "pr_author": "gierlachg", "pr_createdAt": "2020-03-13T11:41:29Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2061", "timeline": [{"oid": "817a6a92e132b0ba1e5c3fd2b022efa142f18b0c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/817a6a92e132b0ba1e5c3fd2b022efa142f18b0c", "message": "Refactor DelegatingSerializationService", "committedDate": "2020-03-13T11:31:43Z", "type": "commit"}, {"oid": "fcf8b154f73a6c51ba7f9e92367faa1dfcfdaf99", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fcf8b154f73a6c51ba7f9e92367faa1dfcfdaf99", "message": "Fix tests", "committedDate": "2020-03-13T12:05:08Z", "type": "commit"}, {"oid": "3f2da481b8b6bfc0c54118a82ed40ef76b249c8f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3f2da481b8b6bfc0c54118a82ed40ef76b249c8f", "message": "Fix tests", "committedDate": "2020-03-13T12:13:16Z", "type": "commit"}, {"oid": "d70a9c39bba5b44476af3ad75dec618ff9170c04", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d70a9c39bba5b44476af3ad75dec618ff9170c04", "message": "Handle null object", "committedDate": "2020-03-14T15:40:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNTMyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2061#discussion_r392925320", "body": "We should not depend on the exact text from the superclass. We also lose the stack trace of the original exc.\r\n\r\nI'd rather just wrap the caught exception, use the original message and append a text to it.\r\n```suggestion\r\n                throw new HazelcastSerializationException(hse.getMessage() + \". You can register a job-specific serializer using JobConfig.registerSerializer()\", hse);\r\n```\r\n\r\nIf we also dispose the delegate (which we should), we wouldn't have to handle the inactive case: the delegate will throw `HazelcastInstanceNotActiveException` directly.", "bodyText": "We should not depend on the exact text from the superclass. We also lose the stack trace of the original exc.\nI'd rather just wrap the caught exception, use the original message and append a text to it.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw handle(typeId, hse);\n          \n          \n            \n                            throw new HazelcastSerializationException(hse.getMessage() + \". You can register a job-specific serializer using JobConfig.registerSerializer()\", hse);\n          \n      \n    \n    \n  \n\nIf we also dispose the delegate (which we should), we wouldn't have to handle the inactive case: the delegate will throw HazelcastInstanceNotActiveException directly.", "bodyHTML": "<p dir=\"auto\">We should not depend on the exact text from the superclass. We also lose the stack trace of the original exc.</p>\n<p dir=\"auto\">I'd rather just wrap the caught exception, use the original message and append a text to it.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"x x-first x-last\">handle(typeId</span>, hse);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">HazelcastSerializationException</span><span class=\"x\">(hse</span><span class=\"pl-k x\">.</span><span class=\"x\">getMessage() </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">. You can register a job-specific serializer using JobConfig.registerSerializer()</span><span class=\"pl-pds x x-last\">\"</span></span>, hse);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">If we also dispose the delegate (which we should), we wouldn't have to handle the inactive case: the delegate will throw <code>HazelcastInstanceNotActiveException</code> directly.</p>", "author": "viliam-durina", "createdAt": "2020-03-16T10:40:05Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java", "diffHunk": "@@ -108,33 +108,57 @@ public PortableContext getPortableContext() {\n \n     @Override\n     public SerializerAdapter serializerFor(Object object) {\n-        Class<?> clazz = object.getClass();\n-        SerializerAdapter serializer = serializersByClass.get(clazz);\n+        Class<?> clazz = object == null ? null : object.getClass();\n+\n+        SerializerAdapter serializer = null;\n+        if (clazz != null) {\n+            serializer = serializersByClass.get(clazz);\n+        }\n         if (serializer == null) {\n-            serializer = delegate.serializerFor(object);\n-            if (serializer == null) {\n-                throw active ?\n-                        new HazelcastSerializationException(\"There is no suitable serializer for \" + clazz) :\n-                        new HazelcastInstanceNotActiveException();\n+            try {\n+                serializer = delegate.serializerFor(object);\n+            } catch (HazelcastSerializationException hse) {\n+                throw handle(clazz, hse);\n             }\n         }\n+        if (serializer == null) {\n+            throw active ? new MissingSerializer(clazz) : new HazelcastInstanceNotActiveException();\n+        }\n         return serializer;\n     }\n \n+    private RuntimeException handle(Class<?> clazz, HazelcastSerializationException e) {\n+        String message = e.getMessage();\n+        if (message != null && message.startsWith(\"There is no suitable serializer for\")) {\n+            return new MissingSerializer(clazz);\n+        }\n+        return e;\n+    }\n+\n     @Override\n     public SerializerAdapter serializerFor(int typeId) {\n         SerializerAdapter serializer = serializersById.get(typeId);\n         if (serializer == null) {\n-            serializer = delegate.serializerFor(typeId);\n-            if (serializer == null) {\n-                throw active ?\n-                        newHazelcastSerializationException(typeId) :\n-                        new HazelcastInstanceNotActiveException();\n+            try {\n+                serializer = delegate.serializerFor(typeId);\n+            } catch (HazelcastSerializationException hse) {\n+                throw handle(typeId, hse);", "originalCommit": "d70a9c39bba5b44476af3ad75dec618ff9170c04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0ODA2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2061#discussion_r392948065", "bodyText": "We should not dispose() delegate as it's a global serializer. I have addressed the remaining comment.", "author": "gierlachg", "createdAt": "2020-03-16T11:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNTMyMA=="}], "type": "inlineReview"}, {"oid": "41c1a5b76a111db96b18e515dbf47c6e37de5aae", "url": "https://github.com/hazelcast/hazelcast-jet/commit/41c1a5b76a111db96b18e515dbf47c6e37de5aae", "message": "Simplify exception handling", "committedDate": "2020-03-16T11:22:21Z", "type": "commit"}, {"oid": "005afd15d73219e24629943b3ae50695fcfd6fa7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/005afd15d73219e24629943b3ae50695fcfd6fa7", "message": "Simplify exception handling", "committedDate": "2020-03-16T11:24:18Z", "type": "commit"}, {"oid": "69bc4e5c715455fb053d2a7506f6397314d4849a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/69bc4e5c715455fb053d2a7506f6397314d4849a", "message": "Simplify exception handling", "committedDate": "2020-03-16T12:30:44Z", "type": "commit"}]}