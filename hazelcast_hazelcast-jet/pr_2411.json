{"pr_number": 2411, "pr_title": "Suspend jobs on failure", "pr_author": "jbartok", "pr_createdAt": "2020-07-21T09:07:36Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2411", "timeline": [{"oid": "f89b1d2c689f75f901063942f3545fe71d6a78cb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f89b1d2c689f75f901063942f3545fe71d6a78cb", "message": "Write design doc draft", "committedDate": "2020-08-24T11:01:14Z", "type": "commit"}, {"oid": "f89b1d2c689f75f901063942f3545fe71d6a78cb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f89b1d2c689f75f901063942f3545fe71d6a78cb", "message": "Write design doc draft", "committedDate": "2020-08-24T11:01:14Z", "type": "forcePushed"}, {"oid": "af9ffef845994d0bb1f9ba05b3c73d9fc0879980", "url": "https://github.com/hazelcast/hazelcast-jet/commit/af9ffef845994d0bb1f9ba05b3c73d9fc0879980", "message": "Address review concerns", "committedDate": "2020-08-25T06:51:12Z", "type": "commit"}, {"oid": "d85d45a68d36320cf27eca8b4ee0868d4c5b030e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d85d45a68d36320cf27eca8b4ee0868d4c5b030e", "message": "Implement suspend-on-failure mechanics", "committedDate": "2020-09-02T11:05:36Z", "type": "commit"}, {"oid": "13c06a49cfd08a09dceed895c90dfb673737b110", "url": "https://github.com/hazelcast/hazelcast-jet/commit/13c06a49cfd08a09dceed895c90dfb673737b110", "message": "Review design document", "committedDate": "2020-09-03T10:04:52Z", "type": "commit"}, {"oid": "bfec42cd4c2c52f9657219ddcff29b013144338c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bfec42cd4c2c52f9657219ddcff29b013144338c", "message": "Fix grammar, improve wording", "committedDate": "2020-09-03T14:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4NDA2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r482984069", "body": "`writeUTF` argument must be non-null, see 4 lines above.", "bodyText": "writeUTF argument must be non-null, see 4 lines above.", "bodyHTML": "<p dir=\"auto\"><code>writeUTF</code> argument must be non-null, see 4 lines above.</p>", "author": "viliam-durina", "createdAt": "2020-09-03T13:38:13Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobExecutionRecord.java", "diffHunk": "@@ -251,7 +262,7 @@ public void writeData(ObjectDataOutput out) throws IOException {\n         out.writeObject(lastSnapshotFailure);\n         out.writeObject(snapshotStats);\n         out.writeObject(exportedSnapshotMapName);\n-        out.writeBoolean(suspended);\n+        out.writeUTF(suspensionCause);", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4NTUzMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r482985532", "body": "This will fail with current master after #2484 was merged.\r\n```suggestion\r\n                jobRecord -> { throw new IllegalStateException(\"Job not suspended\"); },\r\n```", "bodyText": "This will fail with current master after #2484 was merged.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            null,\n          \n          \n            \n                            jobRecord -> { throw new IllegalStateException(\"Job not suspended\"); },", "bodyHTML": "<p dir=\"auto\">This will fail with current master after <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"690898595\" data-permission-text=\"Title is private\" data-url=\"https://github.com/hazelcast/hazelcast-jet/issues/2484\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/hazelcast/hazelcast-jet/pull/2484/hovercard\" href=\"https://github.com/hazelcast/hazelcast-jet/pull/2484\">#2484</a> was merged.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1 x x-first x-last\">null</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"x x-first\">jobRecord </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> { </span><span class=\"pl-k x\">throw</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">IllegalStateException</span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">Job not suspended</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">); }</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-03T13:40:22Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobCoordinationService.java", "diffHunk": "@@ -421,6 +422,36 @@ public void reset() {\n         );\n     }\n \n+    /**\n+     * Returns the reason why this job has been suspended in a human readable\n+     * form.\n+     * <p>\n+     * Fails with {@link JobNotFoundException} if the requested job is not found.\n+     * <p>\n+     * Fails with {@link IllegalStateException} if the requested job is not\n+     * actually in a suspended state.\n+     */\n+    public CompletableFuture<String> getJobSuspensionCause(long jobId) {\n+        FunctionEx<JobExecutionRecord, String> jobExecutionRecordHandler = jobExecutionRecord -> {\n+            String cause = jobExecutionRecord.getSuspensionCause();\n+            if (cause == null) {\n+                throw new IllegalStateException(\"Job not suspended\");\n+            }\n+            return cause;\n+        };\n+        return callWithJob(jobId,\n+                mc -> {\n+                    JobExecutionRecord jobExecutionRecord = mc.jobExecutionRecord();\n+                    return jobExecutionRecordHandler.apply(jobExecutionRecord);\n+                },\n+                (FunctionEx<JobResult, String>) o -> {\n+                    throw new IllegalStateException(\"Job not suspended\");\n+                },\n+                null,", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5MDk2NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r482990964", "body": "```suggestion\r\n                    mc.jobExecutionRecord().setSuspended(\"Execution failure:\\n\" + ExceptionUtil.stackTraceToString(failure));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                mc.jobExecutionRecord().setSuspended(\"Due to failure:\\n\" + ExceptionUtil.stackTraceToString(failure));\n          \n          \n            \n                                mc.jobExecutionRecord().setSuspended(\"Execution failure:\\n\" + ExceptionUtil.stackTraceToString(failure));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    mc<span class=\"pl-k\">.</span>jobExecutionRecord()<span class=\"pl-k\">.</span>setSuspended(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Due to</span> failure:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">ExceptionUtil</span><span class=\"pl-k\">.</span>stackTraceToString(failure));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    mc<span class=\"pl-k\">.</span>jobExecutionRecord()<span class=\"pl-k\">.</span>setSuspended(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Execution</span> failure:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">ExceptionUtil</span><span class=\"pl-k\">.</span>stackTraceToString(failure));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-03T13:47:48Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/MasterJobContext.java", "diffHunk": "@@ -638,7 +639,11 @@ void finalizeJob(@Nullable Throwable failure) {\n                         && mc.jobConfig().getProcessingGuarantee() != NONE\n                 ) {\n                     mc.setJobStatus(SUSPENDED);\n-                    mc.jobExecutionRecord().setSuspended(true);\n+                    mc.jobExecutionRecord().setSuspended(\"Requested by user\");\n+                    nonSynchronizedAction = () -> mc.writeJobExecutionRecord(false);\n+                } else if (failure != null && !wasCancelled && mc.jobConfig().isSuspendOnFailure()) {\n+                    mc.setJobStatus(SUSPENDED);\n+                    mc.jobExecutionRecord().setSuspended(\"Due to failure:\\n\" + ExceptionUtil.stackTraceToString(failure));", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5OTM3OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r482999378", "body": "We can simply `join` the job:\r\n```suggestion\r\n        DAG dag = new DAG().vertex(new Vertex(\"test\", Processors.noopP()));\r\n        Job job = jet().newJob(dag, jobConfig);\r\n\r\n        // When\r\n        job.join();\r\n        assertEquals(job.getStatus(), COMPLETED);\r\n```", "bodyText": "We can simply join the job:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n          \n          \n            \n                    Job job = jet().newJob(dag, jobConfig);\n          \n          \n            \n                    assertJobStatusEventually(job, RUNNING);\n          \n          \n            \n            \n          \n          \n            \n                    // When\n          \n          \n            \n                    NoOutputSourceP.proceedLatch.countDown();\n          \n          \n            \n                    assertJobStatusEventually(job, COMPLETED);\n          \n          \n            \n                    DAG dag = new DAG().vertex(new Vertex(\"test\", Processors.noopP()));\n          \n          \n            \n                    Job job = jet().newJob(dag, jobConfig);\n          \n          \n            \n            \n          \n          \n            \n                    // When\n          \n          \n            \n                    job.join();\n          \n          \n            \n                    assertEquals(job.getStatus(), COMPLETED);", "bodyHTML": "<p dir=\"auto\">We can simply <code>join</code> the job:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DAG</span> dag <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DAG</span>()<span class=\"pl-k\">.</span>vertex(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Vertex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MockPS</span>(<span class=\"pl-smi\">NoOutputSourceP</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>, MEMBER_COUNT)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Job</span> job <span class=\"pl-k\">=</span> jet()<span class=\"pl-k\">.</span>newJob(dag, jobConfig);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertJobStatusEventually(job, <span class=\"pl-c1\">RUNNING</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> When</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">NoOutputSourceP</span><span class=\"pl-k\">.</span>proceedLatch<span class=\"pl-k\">.</span>countDown();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertJobStatusEventually(job, <span class=\"pl-c1\">COMPLETED</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">DAG</span> dag <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DAG</span>()<span class=\"pl-k\">.</span>vertex(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Vertex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Processors</span><span class=\"pl-k\">.</span>noopP()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Job</span> job <span class=\"pl-k\">=</span> jet()<span class=\"pl-k\">.</span>newJob(dag, jobConfig);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> When</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        job<span class=\"pl-k\">.</span>join();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertEquals(job<span class=\"pl-k\">.</span>getStatus(), <span class=\"pl-c1\">COMPLETED</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-03T13:58:54Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/SuspendExecutionOnFailureTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.TestInClusterSupport;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.core.TestProcessors.ListSource;\n+import com.hazelcast.jet.core.TestProcessors.MockP;\n+import com.hazelcast.jet.core.TestProcessors.MockPMS;\n+import com.hazelcast.jet.core.TestProcessors.MockPS;\n+import com.hazelcast.jet.core.TestProcessors.NoOutputSourceP;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.hazelcast.jet.core.Edge.between;\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static com.hazelcast.jet.core.JobStatus.SUSPENDED;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SuspendExecutionOnFailureTest extends TestInClusterSupport {\n+\n+    private static final Throwable MOCK_ERROR = new AssertionError(\"mock error\");\n+\n+    private JobConfig jobConfig;\n+\n+    @Before\n+    public void before() {\n+        jobConfig = new JobConfig().setSuspendOnFailure(true);\n+        TestProcessors.reset(0);\n+    }\n+\n+    @Test\n+    public void when_jobRunning_then_suspensionCauseThrows() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n+        Job job = jet().newJob(dag, jobConfig);\n+        assertJobStatusEventually(job, RUNNING);\n+\n+        // Then\n+        assertThatThrownBy(job::getSuspensionCause)\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessage(\"Job not suspended\");\n+\n+        cancelAndJoin(job);\n+    }\n+\n+    @Test\n+    public void when_jobCompleted_then_suspensionCauseThrows() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n+        Job job = jet().newJob(dag, jobConfig);\n+        assertJobStatusEventually(job, RUNNING);\n+\n+        // When\n+        NoOutputSourceP.proceedLatch.countDown();\n+        assertJobStatusEventually(job, COMPLETED);", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5OTk1NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r482999955", "body": "No need to wrap in MockPS:\r\n```suggestion\r\n        DAG dag = new DAG().vertex(new Vertex(\"test\", () -> new NoOutputSourceP()));\r\n```", "bodyText": "No need to wrap in MockPS:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n          \n          \n            \n                    DAG dag = new DAG().vertex(new Vertex(\"test\", () -> new NoOutputSourceP()));", "bodyHTML": "<p dir=\"auto\">No need to wrap in MockPS:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DAG</span> dag <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DAG</span>()<span class=\"pl-k\">.</span>vertex(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Vertex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">MockPS</span><span class=\"x\">(</span><span class=\"pl-smi x\">NoOutputSourceP</span><span class=\"pl-k x x-last\">::</span><span class=\"pl-k\">new</span><span class=\"x x-first x-last\">, MEMBER_COUNT</span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">DAG</span> dag <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DAG</span>()<span class=\"pl-k\">.</span>vertex(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Vertex</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"x x-first\">() </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">new</span><span class=\"x x-first\"> </span><span class=\"pl-smi x\">NoOutputSourceP</span><span class=\"x x-last\">(</span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-03T13:59:41Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/SuspendExecutionOnFailureTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.TestInClusterSupport;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.core.TestProcessors.ListSource;\n+import com.hazelcast.jet.core.TestProcessors.MockP;\n+import com.hazelcast.jet.core.TestProcessors.MockPMS;\n+import com.hazelcast.jet.core.TestProcessors.MockPS;\n+import com.hazelcast.jet.core.TestProcessors.NoOutputSourceP;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.hazelcast.jet.core.Edge.between;\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static com.hazelcast.jet.core.JobStatus.SUSPENDED;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SuspendExecutionOnFailureTest extends TestInClusterSupport {\n+\n+    private static final Throwable MOCK_ERROR = new AssertionError(\"mock error\");\n+\n+    private JobConfig jobConfig;\n+\n+    @Before\n+    public void before() {\n+        jobConfig = new JobConfig().setSuspendOnFailure(true);\n+        TestProcessors.reset(0);\n+    }\n+\n+    @Test\n+    public void when_jobRunning_then_suspensionCauseThrows() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTYzMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r483005630", "body": "We can use `setCompleteError` and avoid the `source` vertex.", "bodyText": "We can use setCompleteError and avoid the source vertex.", "bodyHTML": "<p dir=\"auto\">We can use <code>setCompleteError</code> and avoid the <code>source</code> vertex.</p>", "author": "viliam-durina", "createdAt": "2020-09-03T14:07:21Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/SuspendExecutionOnFailureTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.TestInClusterSupport;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.core.TestProcessors.ListSource;\n+import com.hazelcast.jet.core.TestProcessors.MockP;\n+import com.hazelcast.jet.core.TestProcessors.MockPMS;\n+import com.hazelcast.jet.core.TestProcessors.MockPS;\n+import com.hazelcast.jet.core.TestProcessors.NoOutputSourceP;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.hazelcast.jet.core.Edge.between;\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static com.hazelcast.jet.core.JobStatus.SUSPENDED;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SuspendExecutionOnFailureTest extends TestInClusterSupport {\n+\n+    private static final Throwable MOCK_ERROR = new AssertionError(\"mock error\");\n+\n+    private JobConfig jobConfig;\n+\n+    @Before\n+    public void before() {\n+        jobConfig = new JobConfig().setSuspendOnFailure(true);\n+        TestProcessors.reset(0);\n+    }\n+\n+    @Test\n+    public void when_jobRunning_then_suspensionCauseThrows() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n+        Job job = jet().newJob(dag, jobConfig);\n+        assertJobStatusEventually(job, RUNNING);\n+\n+        // Then\n+        assertThatThrownBy(job::getSuspensionCause)\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessage(\"Job not suspended\");\n+\n+        cancelAndJoin(job);\n+    }\n+\n+    @Test\n+    public void when_jobCompleted_then_suspensionCauseThrows() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n+        Job job = jet().newJob(dag, jobConfig);\n+        assertJobStatusEventually(job, RUNNING);\n+\n+        // When\n+        NoOutputSourceP.proceedLatch.countDown();\n+        assertJobStatusEventually(job, COMPLETED);\n+\n+        // Then\n+        assertThatThrownBy(job::getSuspensionCause)\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessage(\"Job not suspended\");\n+\n+        job.join();\n+    }\n+\n+    @Test\n+    public void when_jobSuspendedByUser_then_suspensionCauseSaysSo() {\n+        // Given\n+        DAG dag = new DAG().vertex(new Vertex(\"test\", new MockPS(NoOutputSourceP::new, MEMBER_COUNT)));\n+\n+        // When\n+        Job job = jet().newJob(dag, jobConfig);\n+        assertJobStatusEventually(job, RUNNING);\n+        job.suspend();\n+        assertJobStatusEventually(job, SUSPENDED);\n+        assertEquals(\"Requested by user\", job.getSuspensionCause());\n+\n+        cancelAndJoin(job);\n+    }\n+\n+    @Test\n+    public void when_jobSuspendedDueToFailure_then_suspensionCauseDescribeProblem() {\n+        // Given\n+        DAG dag = new DAG();\n+        Vertex source = dag.newVertex(\"source\", ListSource.supplier(singletonList(1)));\n+        Vertex process = dag.newVertex(\"faulty\",\n+                new MockPMS(() -> new MockPS(() -> new MockP().setProcessError(MOCK_ERROR), MEMBER_COUNT)));", "originalCommit": "13c06a49cfd08a09dceed895c90dfb673737b110", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f4a5d5a54c040d93eeb9bf302cb7c8bc3760f98", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1f4a5d5a54c040d93eeb9bf302cb7c8bc3760f98", "message": "Address review concerns", "committedDate": "2020-09-04T06:16:26Z", "type": "commit"}, {"oid": "0474817f484f77db40f034480d497152507f6beb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0474817f484f77db40f034480d497152507f6beb", "message": "Merge branch 'master' into suspend-job-on-failure", "committedDate": "2020-09-04T06:16:34Z", "type": "commit"}, {"oid": "25bb61b6aea164bda38eddc2634374a1f5d5c08d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/25bb61b6aea164bda38eddc2634374a1f5d5c08d", "message": "Address review concerns", "committedDate": "2020-09-04T06:52:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNjEyOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r483426128", "body": "```suggestion\r\n        dag.newVertex(\"faulty\", () -> new MockP().setCompleteError(MOCK_ERROR))\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dag.newVertex(\"faulty\",\n          \n          \n            \n                            new MockPMS(() -> new MockPS(() -> new MockP().setCompleteError(MOCK_ERROR), MEMBER_COUNT)))\n          \n          \n            \n                    dag.newVertex(\"faulty\", () -> new MockP().setCompleteError(MOCK_ERROR))", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        dag<span class=\"pl-k\">.</span>newVertex(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>faulty<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MockPMS</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MockPS</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MockP</span>()<span class=\"pl-k\">.</span>setCompleteError(<span class=\"pl-c1\">MOCK_ERROR</span>), <span class=\"pl-c1\">MEMBER_COUNT</span>)))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        dag<span class=\"pl-k\">.</span>newVertex(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>faulty<span class=\"pl-pds\">\"</span></span>, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MockP</span>()<span class=\"pl-k\">.</span>setCompleteError(<span class=\"pl-c1\">MOCK_ERROR</span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-04T07:00:00Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/SuspendExecutionOnFailureTest.java", "diffHunk": "@@ -101,17 +96,16 @@ public void when_jobSuspendedByUser_then_suspensionCauseSaysSo() {\n     public void when_jobSuspendedDueToFailure_then_suspensionCauseDescribeProblem() {\n         // Given\n         DAG dag = new DAG();\n-        Vertex source = dag.newVertex(\"source\", ListSource.supplier(singletonList(1)));\n-        Vertex process = dag.newVertex(\"faulty\",\n-                new MockPMS(() -> new MockPS(() -> new MockP().setProcessError(MOCK_ERROR), MEMBER_COUNT)));\n-        dag.edge(between(source, process));\n+        dag.newVertex(\"faulty\",\n+                new MockPMS(() -> new MockPS(() -> new MockP().setCompleteError(MOCK_ERROR), MEMBER_COUNT)))", "originalCommit": "25bb61b6aea164bda38eddc2634374a1f5d5c08d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQzMDcwMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2411#discussion_r483430703", "body": "The job can also fail in `faulty#1`. It actually fails in all processor instances, it's only a matter of chance which one is first:\r\n```suggestion\r\n        assertThat(job.getSuspensionCause()).matches(\"(?s)Execution failure:\\n\" +\r\n                \"com.hazelcast.jet.JetException: Exception in ProcessorTasklet\\\\{faulty#[0-9]}: \" +\r\n                \"java.lang.AssertionError: mock error.*\");\r\n```", "bodyText": "The job can also fail in faulty#1. It actually fails in all processor instances, it's only a matter of chance which one is first:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(job.getSuspensionCause().startsWith(\"Execution failure:\\n\" +\n          \n          \n            \n                            \"com.hazelcast.jet.JetException: Exception in ProcessorTasklet{faulty#0}: \" +\n          \n          \n            \n                            \"java.lang.AssertionError: mock error\"));\n          \n          \n            \n                    assertThat(job.getSuspensionCause()).matches(\"(?s)Execution failure:\\n\" +\n          \n          \n            \n                            \"com.hazelcast.jet.JetException: Exception in ProcessorTasklet\\\\{faulty#[0-9]}: \" +\n          \n          \n            \n                            \"java.lang.AssertionError: mock error.*\");", "bodyHTML": "<p dir=\"auto\">The job can also fail in <code>faulty#1</code>. It actually fails in all processor instances, it's only a matter of chance which one is first:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertTrue</span>(job<span class=\"pl-k\">.</span>getSuspensionCause()<span class=\"pl-k x x-first\">.</span><span class=\"x\">startsWith(</span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">\"</span>Execution failure:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.hazelcast.jet.JetException: Exception in ProcessorTasklet{faulty#<span class=\"x x-first x-last\">0</span>}: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>java.lang.AssertionError: mock error<span class=\"pl-pds x x-first\">\"</span></span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertThat</span>(job<span class=\"pl-k\">.</span>getSuspensionCause()<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x\">matches(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">(?s)</span>Execution failure:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.hazelcast.jet.JetException: Exception in ProcessorTasklet<span class=\"pl-cce x x-first x-last\">\\\\</span>{faulty#<span class=\"x x-first x-last\">[0-9]</span>}: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>java.lang.AssertionError: mock error<span class=\"x x-first\">.*</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "viliam-durina", "createdAt": "2020-09-04T07:10:43Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/SuspendExecutionOnFailureTest.java", "diffHunk": "@@ -101,17 +96,16 @@ public void when_jobSuspendedByUser_then_suspensionCauseSaysSo() {\n     public void when_jobSuspendedDueToFailure_then_suspensionCauseDescribeProblem() {\n         // Given\n         DAG dag = new DAG();\n-        Vertex source = dag.newVertex(\"source\", ListSource.supplier(singletonList(1)));\n-        Vertex process = dag.newVertex(\"faulty\",\n-                new MockPMS(() -> new MockPS(() -> new MockP().setProcessError(MOCK_ERROR), MEMBER_COUNT)));\n-        dag.edge(between(source, process));\n+        dag.newVertex(\"faulty\",\n+                new MockPMS(() -> new MockPS(() -> new MockP().setCompleteError(MOCK_ERROR), MEMBER_COUNT)))\n+                .localParallelism(1);\n \n         // When\n         Job job = jet().newJob(dag, jobConfig);\n \n         // Then\n         assertJobStatusEventually(job, JobStatus.SUSPENDED);\n-        assertTrue(job.getSuspensionCause().startsWith(\"Due to failure:\\n\" +\n+        assertTrue(job.getSuspensionCause().startsWith(\"Execution failure:\\n\" +\n                 \"com.hazelcast.jet.JetException: Exception in ProcessorTasklet{faulty#0}: \" +\n                 \"java.lang.AssertionError: mock error\"));", "originalCommit": "25bb61b6aea164bda38eddc2634374a1f5d5c08d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffdcf3b291c6aad4e5cae63810937e391e0af495", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ffdcf3b291c6aad4e5cae63810937e391e0af495", "message": "Address review concerns", "committedDate": "2020-09-04T07:37:19Z", "type": "commit"}]}