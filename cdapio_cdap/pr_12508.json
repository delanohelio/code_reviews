{"pr_number": 12508, "pr_title": "[CDAP-17128] Add provisioning time metric", "pr_author": "rmstar", "pr_createdAt": "2020-07-27T21:17:24Z", "pr_url": "https://github.com/cdapio/cdap/pull/12508", "timeline": [{"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "url": "https://github.com/cdapio/cdap/commit/56591b29c9722f2e21edd6b2b22c61bf7693cb43", "message": "[CDAP-17128] Add provisioning time metric", "committedDate": "2020-07-27T21:15:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNTU1MA==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461435550", "body": "The `recordProgramProvisioned` method call already returns the latest `RunRecordMeta` being recorded. You shouldn't need to read it again.", "bodyText": "The recordProgramProvisioned method call already returns the latest RunRecordMeta being recorded. You shouldn't need to read it again.", "bodyHTML": "<p dir=\"auto\">The <code>recordProgramProvisioned</code> method call already returns the latest <code>RunRecordMeta</code> being recorded. You shouldn't need to read it again.</p>", "author": "chtyim", "createdAt": "2020-07-28T09:10:44Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);", "originalCommit": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzIxMA==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462073210", "bodyText": "removed, as it's not needed.", "author": "rmstar", "createdAt": "2020-07-29T06:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNTU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjU0NQ==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461436545", "body": "In fact, the profileId, should already be in the `systemArgs` variable. You don't need the run record at all", "bodyText": "In fact, the profileId, should already be in the systemArgs variable. You don't need the run record at all", "bodyHTML": "<p dir=\"auto\">In fact, the profileId, should already be in the <code>systemArgs</code> variable. You don't need the run record at all</p>", "author": "chtyim", "createdAt": "2020-07-28T09:11:46Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments", "originalCommit": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3Mjc1OQ==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462072759", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-07-29T06:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjgyMg==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461436822", "body": "move this to a private function to have better separation of concern", "bodyText": "move this to a private function to have better separation of concern", "bodyHTML": "<p dir=\"auto\">move this to a private function to have better separation of concern</p>", "author": "chtyim", "createdAt": "2020-07-28T09:12:04Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments\n+            .getProfileIdFromArgs(programRunId.getNamespaceId(),\n+              runRecordMeta.getSystemArgs()).orElse(null);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to get run record\", e);\n+        }\n+\n+        if (profileId != null) {\n+          Map<String, String> args = programOptions.getArguments().asMap();", "originalCommit": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjgwNQ==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462072805", "bodyText": "done.", "author": "rmstar", "createdAt": "2020-07-29T06:42:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNzY0NA==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461437644", "body": "Misalign. Line break in argument should be aligned to the beginning of the method call:\r\n\r\n```\r\nmetricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\r\n                                                provisioningTime);\r\n```", "bodyText": "Misalign. Line break in argument should be aligned to the beginning of the method call:\nmetricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n                                                provisioningTime);", "bodyHTML": "<p dir=\"auto\">Misalign. Line break in argument should be aligned to the beginning of the method call:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n                                                provisioningTime);\"><pre><code>metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n                                                provisioningTime);\n</code></pre></div>", "author": "chtyim", "createdAt": "2020-07-28T09:13:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments\n+            .getProfileIdFromArgs(programRunId.getNamespaceId(),\n+              runRecordMeta.getSystemArgs()).orElse(null);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to get run record\", e);\n+        }\n+\n+        if (profileId != null) {\n+          Map<String, String> args = programOptions.getArguments().asMap();\n+          String provisioner = SystemArguments.getProfileProvisioner(args);\n+\n+          Map<String, String> tags = ImmutableMap.<String, String>builder()\n+            .put(Constants.Metrics.Tag.PROFILE_SCOPE, profileId.getScope().name())\n+            .put(Constants.Metrics.Tag.PROFILE, profileId.getProfile())\n+            .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n+            .put(Constants.Metrics.Tag.PROGRAM_TYPE, programRunId.getType().getPrettyName())\n+            .put(Constants.Metrics.Tag.APP, programRunId.getApplication())\n+            .put(Constants.Metrics.Tag.PROGRAM, programRunId.getProgram())\n+            .put(Constants.Metrics.Tag.PROVISIONER, provisioner)\n+            .put(Constants.Metrics.Tag.RUN_ID, programRunId.getRun())\n+            .build();\n+          metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n+            provisioningTime);", "originalCommit": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjkyOA==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462072928", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-07-29T06:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNzY0NA=="}], "type": "inlineReview"}, {"oid": "b10af495686353b1ab4a76811e37bcd5d7109f87", "url": "https://github.com/cdapio/cdap/commit/b10af495686353b1ab4a76811e37bcd5d7109f87", "message": "addressed reviewer comments", "committedDate": "2020-07-29T06:41:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MjAyNQ==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462672025", "body": "Is this only for unit test? If it is, define it in the test class", "bodyText": "Is this only for unit test? If it is, define it in the test class", "bodyHTML": "<p dir=\"auto\">Is this only for unit test? If it is, define it in the test class</p>", "author": "chtyim", "createdAt": "2020-07-30T00:56:01Z", "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -775,6 +776,7 @@\n       public static final String PROGRAM_KILLED_RUNS = \"program.killed.runs\";\n       public static final String PROGRAM_REJECTED_RUNS = \"program.rejected.runs\";\n       public static final String PROGRAM_NODE_MINUTES = \"program.node.minutes\";\n+      public static final String PROGRAM_PROVISIONING_DELAY_SECONDS = \"program.provisioning.delay.seconds\";", "originalCommit": "b10af495686353b1ab4a76811e37bcd5d7109f87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3Mjk4MA==", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462672980", "bodyText": "It's not only for tests. This metric will be read by the metrics writer extension and published to stackdriver.", "author": "rmstar", "createdAt": "2020-07-30T00:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MjAyNQ=="}], "type": "inlineReview"}]}