{"pr_number": 489, "pr_title": "Add Remote Config conditions to template", "pr_author": "lahirumaramba", "pr_createdAt": "2020-10-16T19:55:05Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/489", "timeline": [{"oid": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "url": "https://github.com/firebase/firebase-admin-java/commit/1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "message": "Add Remote Config conditions to template", "committedDate": "2020-10-20T17:16:00Z", "type": "commit"}, {"oid": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "url": "https://github.com/firebase/firebase-admin-java/commit/1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "message": "Add Remote Config conditions to template", "committedDate": "2020-10-20T17:16:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxODg2NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508718864", "body": "Unnecessary linkage. Remove from all return descriptions.", "bodyText": "Unnecessary linkage. Remove from all return descriptions.", "bodyHTML": "<p dir=\"auto\">Unnecessary linkage. Remove from all return descriptions.</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:42:45Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {\n+    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n+    checkArgument(!Strings.isNullOrEmpty(expression),\n+            \"condition expression must not be null or empty\");\n+    this.name = name;\n+    this.expression = expression;\n+    this.tagColor = TagColor.UNSPECIFIED;\n+  }\n+\n+  Condition(@NonNull ConditionResponse conditionResponse) {\n+    checkNotNull(conditionResponse);\n+    this.name = conditionResponse.getName();\n+    this.expression = conditionResponse.getExpression();\n+    if (conditionResponse.getTagColor() == null) {\n+      this.tagColor = TagColor.UNSPECIFIED;\n+    } else {\n+      this.tagColor = TagColor.valueOf(conditionResponse.getTagColor());\n+    }\n+  }\n+\n+  /**\n+   * Gets the name of the condition.\n+   *\n+   * @return The {@link String} name of the condition.", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 9063073..183cd24 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -64,7 +82,7 @@ public final class Condition {\n   /**\n    * Gets the name of the condition.\n    *\n-   * @return The {@link String} name of the condition.\n+   * @return The name of the condition.\n    */\n   @NonNull\n   public String getName() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxOTQxOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508719418", "body": "Why not just leave it as null?", "bodyText": "Why not just leave it as null?", "bodyHTML": "<p dir=\"auto\">Why not just leave it as null?</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:43:39Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {\n+    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n+    checkArgument(!Strings.isNullOrEmpty(expression),\n+            \"condition expression must not be null or empty\");\n+    this.name = name;\n+    this.expression = expression;\n+    this.tagColor = TagColor.UNSPECIFIED;", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNDE4OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508834188", "bodyText": "Left it null here and added a null check in toConditionResponse()", "author": "lahirumaramba", "createdAt": "2020-10-20T20:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxOTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 9063073..183cd24 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -47,7 +49,23 @@ public final class Condition {\n             \"condition expression must not be null or empty\");\n     this.name = name;\n     this.expression = expression;\n-    this.tagColor = TagColor.UNSPECIFIED;\n+  }\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   * @param tagColor   A non-null tag color of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n+    checkArgument(!Strings.isNullOrEmpty(expression),\n+            \"condition expression must not be null or empty\");\n+    checkNotNull(tagColor, \"condition tag color must not be null\");\n+    this.name = name;\n+    this.expression = expression;\n+    this.tagColor = tagColor;\n   }\n \n   Condition(@NonNull ConditionResponse conditionResponse) {\n", "next_change": {"commit": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 183cd24..1a8c751 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -40,29 +40,24 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n-    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n-    checkArgument(!Strings.isNullOrEmpty(expression),\n-            \"condition expression must not be null or empty\");\n-    this.name = name;\n-    this.expression = expression;\n+    this(name, expression, null);\n   }\n \n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor   A non-null tag color of this condition.\n+   * @param tagColor A tag color of this condition.\n    */\n-  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+  public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n     checkArgument(!Strings.isNullOrEmpty(expression),\n             \"condition expression must not be null or empty\");\n-    checkNotNull(tagColor, \"condition tag color must not be null\");\n     this.name = name;\n     this.expression = expression;\n     this.tagColor = tagColor;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMDA2Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508720062", "body": "I think we need a constructor that accepts the color as well.", "bodyText": "I think we need a constructor that accepts the color as well.", "bodyHTML": "<p dir=\"auto\">I think we need a constructor that accepts the color as well.</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:44:43Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMzc0Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508833742", "bodyText": "Added a constructor with color. Should we amend the API proposal as well?", "author": "lahirumaramba", "createdAt": "2020-10-20T20:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMDA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1ODIxMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508858213", "bodyText": "Feel free to include a note. Looks like an oversight if it's not already there.", "author": "hiranya911", "createdAt": "2020-10-20T21:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMDA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 9063073..183cd24 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -38,7 +40,7 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param name       A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n", "next_change": {"commit": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 183cd24..1a8c751 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -40,29 +40,24 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n-    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n-    checkArgument(!Strings.isNullOrEmpty(expression),\n-            \"condition expression must not be null or empty\");\n-    this.name = name;\n-    this.expression = expression;\n+    this(name, expression, null);\n   }\n \n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor   A non-null tag color of this condition.\n+   * @param tagColor A tag color of this condition.\n    */\n-  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+  public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n     checkArgument(!Strings.isNullOrEmpty(expression),\n             \"condition expression must not be null or empty\");\n-    checkNotNull(tagColor, \"condition tag color must not be null\");\n     this.name = name;\n     this.expression = expression;\n     this.tagColor = tagColor;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMDM5Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508720393", "body": "Add copyright header", "bodyText": "Add copyright header", "bodyHTML": "<p dir=\"auto\">Add copyright header</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:45:12Z", "path": "src/main/java/com/google/firebase/remoteconfig/TagColor.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.google.firebase.remoteconfig;", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/TagColor.java b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\nindex 8fe8da1..c1d2a1a 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n", "chunk": "@@ -1,5 +1,24 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.google.firebase.remoteconfig;\n \n+/**\n+ * Colors that are associated with conditions for display purposes.\n+ */\n public enum TagColor {\n   BLUE(\"BLUE\"),\n   BROWN(\"BROWN\"),\n", "next_change": {"commit": "133163cf052718607776a595c9b5e6fa53e11bc5", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/TagColor.java b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\nindex c1d2a1a..ed7b8cd 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n", "chunk": "@@ -17,7 +17,7 @@\n package com.google.firebase.remoteconfig;\n \n /**\n- * Colors that are associated with conditions for display purposes.\n+ * Colors that are associated with conditions for display purposes in the Firebase Console.\n  */\n public enum TagColor {\n   BLUE(\"BLUE\"),\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMTQ0Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508721442", "body": "Just `UNSPECIFIED`?", "bodyText": "Just UNSPECIFIED?", "bodyHTML": "<p dir=\"auto\">Just <code>UNSPECIFIED</code>?</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:46:56Z", "path": "src/main/java/com/google/firebase/remoteconfig/TagColor.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.google.firebase.remoteconfig;\n+\n+public enum TagColor {\n+  BLUE(\"BLUE\"),\n+  BROWN(\"BROWN\"),\n+  CYAN(\"CYAN\"),\n+  DEEP_ORANGE(\"DEEP_ORANGE\"),\n+  GREEN(\"GREEN\"),\n+  INDIGO(\"INDIGO\"),\n+  LIME(\"LIME\"),\n+  ORANGE(\"ORANGE\"),\n+  PINK(\"PINK\"),\n+  PURPLE(\"PURPLE\"),\n+  TEAL(\"TEAL\"),\n+  UNSPECIFIED(\"CONDITION_DISPLAY_COLOR_UNSPECIFIED\");", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNDkwNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508834904", "bodyText": "The rest API is looking for the string CONDITION_DISPLAY_COLOR_UNSPECIFIED or null\nhttps://firebase.google.com/docs/reference/remote-config/rest/v1/RemoteConfig#conditiondisplaycolor", "author": "lahirumaramba", "createdAt": "2020-10-20T20:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMTQ0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMTc4MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508721780", "body": "Can this be private?", "bodyText": "Can this be private?", "bodyHTML": "<p dir=\"auto\">Can this be private?</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:47:27Z", "path": "src/main/java/com/google/firebase/remoteconfig/TagColor.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.google.firebase.remoteconfig;\n+\n+public enum TagColor {\n+  BLUE(\"BLUE\"),\n+  BROWN(\"BROWN\"),\n+  CYAN(\"CYAN\"),\n+  DEEP_ORANGE(\"DEEP_ORANGE\"),\n+  GREEN(\"GREEN\"),\n+  INDIGO(\"INDIGO\"),\n+  LIME(\"LIME\"),\n+  ORANGE(\"ORANGE\"),\n+  PINK(\"PINK\"),\n+  PURPLE(\"PURPLE\"),\n+  TEAL(\"TEAL\"),\n+  UNSPECIFIED(\"CONDITION_DISPLAY_COLOR_UNSPECIFIED\");\n+\n+  private final String color;\n+\n+  TagColor(String color) {", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNjY1NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508836654", "bodyText": "It looks like that the Enum constructors are implicitly private. So we should be good here.", "author": "lahirumaramba", "createdAt": "2020-10-20T21:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMTc4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNDM5Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508724393", "body": "```\r\nImmutableList.of(\r\n  new Condition(...),\r\n  new Condition(...)\r\n);\r\n```", "bodyText": "ImmutableList.of(\n  new Condition(...),\n  new Condition(...)\n);", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ImmutableList.of(\n  new Condition(...),\n  new Condition(...)\n);\n\"><pre><code>ImmutableList.of(\n  new Condition(...),\n  new Condition(...)\n);\n</code></pre></div>", "author": "hiranya911", "createdAt": "2020-10-20T17:51:29Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -107,6 +109,24 @@ public void testGetTemplate() throws Exception {\n     assertTrue(\n             headerParameter.getDefaultValue() instanceof ParameterValue.InAppDefault);\n     checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // Check Conditions\n+    List<Condition> actualConditions = template.getConditions();\n+    List<Condition> expectedConditions = new ArrayList<>();", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 2c838b9..aabc98a 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n", "chunk": "@@ -112,20 +111,16 @@ public class FirebaseRemoteConfigClientImplTest {\n \n     // Check Conditions\n     List<Condition> actualConditions = template.getConditions();\n-    List<Condition> expectedConditions = new ArrayList<>();\n-    expectedConditions\n-            .add(new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.INDIGO));\n-    expectedConditions\n-            .add(new Condition(\"android_en\",\n+    List<Condition> expectedConditions = ImmutableList.of(\n+            new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.INDIGO),\n+            new Condition(\"android_en\",\n                     \"device.os == 'android' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.UNSPECIFIED));\n+                    .setTagColor(TagColor.UNSPECIFIED)\n+    );\n     assertEquals(expectedConditions.size(), actualConditions.size());\n     for (int i = 0; i < expectedConditions.size(); i++) {\n-      assertEquals(expectedConditions.get(i).getName(), actualConditions.get(i).getName());\n-      assertEquals(expectedConditions.get(i).getExpression(),\n-              actualConditions.get(i).getExpression());\n-      assertEquals(expectedConditions.get(i).getTagColor(), actualConditions.get(i).getTagColor());\n+      assertEquals(expectedConditions.get(i), actualConditions.get(i));\n     }\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNDkzOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508724939", "body": "Might be meaningful to override `equals()` in `Condition` class, and use that here.", "bodyText": "Might be meaningful to override equals() in Condition class, and use that here.", "bodyHTML": "<p dir=\"auto\">Might be meaningful to override <code>equals()</code> in <code>Condition</code> class, and use that here.</p>", "author": "hiranya911", "createdAt": "2020-10-20T17:52:26Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -107,6 +109,24 @@ public void testGetTemplate() throws Exception {\n     assertTrue(\n             headerParameter.getDefaultValue() instanceof ParameterValue.InAppDefault);\n     checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // Check Conditions\n+    List<Condition> actualConditions = template.getConditions();\n+    List<Condition> expectedConditions = new ArrayList<>();\n+    expectedConditions\n+            .add(new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.INDIGO));\n+    expectedConditions\n+            .add(new Condition(\"android_en\",\n+                    \"device.os == 'android' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.UNSPECIFIED));\n+    assertEquals(expectedConditions.size(), actualConditions.size());\n+    for (int i = 0; i < expectedConditions.size(); i++) {\n+      assertEquals(expectedConditions.get(i).getName(), actualConditions.get(i).getName());", "originalCommit": "1a878a1fbaf5002ddcc287042db2b83bff5c74d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMzIxMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508833210", "bodyText": "Good call! Thanks!", "author": "lahirumaramba", "createdAt": "2020-10-20T20:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNDkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d7c142405a775124b8b11202d277782c176eaa0", "changed_code": [{"header": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 2c838b9..aabc98a 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n", "chunk": "@@ -112,20 +111,16 @@ public class FirebaseRemoteConfigClientImplTest {\n \n     // Check Conditions\n     List<Condition> actualConditions = template.getConditions();\n-    List<Condition> expectedConditions = new ArrayList<>();\n-    expectedConditions\n-            .add(new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.INDIGO));\n-    expectedConditions\n-            .add(new Condition(\"android_en\",\n+    List<Condition> expectedConditions = ImmutableList.of(\n+            new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.INDIGO),\n+            new Condition(\"android_en\",\n                     \"device.os == 'android' && device.country in ['us', 'uk']\")\n-                    .setTagColor(TagColor.UNSPECIFIED));\n+                    .setTagColor(TagColor.UNSPECIFIED)\n+    );\n     assertEquals(expectedConditions.size(), actualConditions.size());\n     for (int i = 0; i < expectedConditions.size(); i++) {\n-      assertEquals(expectedConditions.get(i).getName(), actualConditions.get(i).getName());\n-      assertEquals(expectedConditions.get(i).getExpression(),\n-              actualConditions.get(i).getExpression());\n-      assertEquals(expectedConditions.get(i).getTagColor(), actualConditions.get(i).getTagColor());\n+      assertEquals(expectedConditions.get(i), actualConditions.get(i));\n     }\n   }\n \n", "next_change": null}]}}, {"oid": "9d7c142405a775124b8b11202d277782c176eaa0", "url": "https://github.com/firebase/firebase-admin-java/commit/9d7c142405a775124b8b11202d277782c176eaa0", "message": "PR Fixes", "committedDate": "2020-10-20T21:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1ODA3Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508858073", "body": "I don't think we follow this indentation pattern anywhere else. Let's be consistent with the rest of the codebase.", "bodyText": "I don't think we follow this indentation pattern anywhere else. Let's be consistent with the rest of the codebase.", "bodyHTML": "<p dir=\"auto\">I don't think we follow this indentation pattern anywhere else. Let's be consistent with the rest of the codebase.</p>", "author": "hiranya911", "createdAt": "2020-10-20T21:42:52Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name       A non-null, non-empty, and unique name of this condition.", "originalCommit": "9d7c142405a775124b8b11202d277782c176eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4MjAxMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r509682011", "bodyText": "Ah my editor did this. Fixed! Thanks!", "author": "lahirumaramba", "createdAt": "2020-10-21T20:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1ODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 183cd24..1a8c751 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -40,29 +40,24 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n-    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n-    checkArgument(!Strings.isNullOrEmpty(expression),\n-            \"condition expression must not be null or empty\");\n-    this.name = name;\n-    this.expression = expression;\n+    this(name, expression, null);\n   }\n \n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor   A non-null tag color of this condition.\n+   * @param tagColor A tag color of this condition.\n    */\n-  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+  public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n     checkArgument(!Strings.isNullOrEmpty(expression),\n             \"condition expression must not be null or empty\");\n-    checkNotNull(tagColor, \"condition tag color must not be null\");\n     this.name = name;\n     this.expression = expression;\n     this.tagColor = tagColor;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1ODM0Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508858342", "body": "`this(name, expression, null)`", "bodyText": "this(name, expression, null)", "bodyHTML": "<p dir=\"auto\"><code>this(name, expression, null)</code></p>", "author": "hiranya911", "createdAt": "2020-10-20T21:43:27Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {\n+    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");", "originalCommit": "9d7c142405a775124b8b11202d277782c176eaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 183cd24..1a8c751 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -40,29 +40,24 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n-    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n-    checkArgument(!Strings.isNullOrEmpty(expression),\n-            \"condition expression must not be null or empty\");\n-    this.name = name;\n-    this.expression = expression;\n+    this(name, expression, null);\n   }\n \n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor   A non-null tag color of this condition.\n+   * @param tagColor A tag color of this condition.\n    */\n-  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+  public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n     checkArgument(!Strings.isNullOrEmpty(expression),\n             \"condition expression must not be null or empty\");\n-    checkNotNull(tagColor, \"condition tag color must not be null\");\n     this.name = name;\n     this.expression = expression;\n     this.tagColor = tagColor;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1ODQyNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508858426", "body": "TagColor should be nullable.", "bodyText": "TagColor should be nullable.", "bodyHTML": "<p dir=\"auto\">TagColor should be nullable.</p>", "author": "hiranya911", "createdAt": "2020-10-20T21:43:40Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {\n+    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n+    checkArgument(!Strings.isNullOrEmpty(expression),\n+            \"condition expression must not be null or empty\");\n+    this.name = name;\n+    this.expression = expression;\n+  }\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   * @param tagColor   A non-null tag color of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {", "originalCommit": "9d7c142405a775124b8b11202d277782c176eaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 183cd24..1a8c751 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -40,29 +40,24 @@ public final class Condition {\n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression) {\n-    checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n-    checkArgument(!Strings.isNullOrEmpty(expression),\n-            \"condition expression must not be null or empty\");\n-    this.name = name;\n-    this.expression = expression;\n+    this(name, expression, null);\n   }\n \n   /**\n    * Creates a new {@link Condition}.\n    *\n-   * @param name       A non-null, non-empty, and unique name of this condition.\n+   * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor   A non-null tag color of this condition.\n+   * @param tagColor A tag color of this condition.\n    */\n-  public Condition(@NonNull String name, @NonNull String expression, @NonNull TagColor tagColor) {\n+  public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n     checkArgument(!Strings.isNullOrEmpty(expression),\n             \"condition expression must not be null or empty\");\n-    checkNotNull(tagColor, \"condition tag color must not be null\");\n     this.name = name;\n     this.expression = expression;\n     this.tagColor = tagColor;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MDQ5NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r508860495", "body": "Add some explicit test cases for equality test between different conditions.", "bodyText": "Add some explicit test cases for equality test between different conditions.", "bodyHTML": "<p dir=\"auto\">Add some explicit test cases for equality test between different conditions.</p>", "author": "hiranya911", "createdAt": "2020-10-20T21:47:57Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -107,6 +108,20 @@ public void testGetTemplate() throws Exception {\n     assertTrue(\n             headerParameter.getDefaultValue() instanceof ParameterValue.InAppDefault);\n     checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // Check Conditions\n+    List<Condition> actualConditions = template.getConditions();\n+    List<Condition> expectedConditions = ImmutableList.of(\n+            new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.INDIGO),\n+            new Condition(\"android_en\",\n+                    \"device.os == 'android' && device.country in ['us', 'uk']\")\n+                    .setTagColor(TagColor.UNSPECIFIED)\n+    );\n+    assertEquals(expectedConditions.size(), actualConditions.size());\n+    for (int i = 0; i < expectedConditions.size(); i++) {\n+      assertEquals(expectedConditions.get(i), actualConditions.get(i));\n+    }", "originalCommit": "9d7c142405a775124b8b11202d277782c176eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwOTI1MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r509709250", "bodyText": "Good call! Added a new test class ConditionTest.java", "author": "lahirumaramba", "createdAt": "2020-10-21T21:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MDQ5NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "128838e66e2c8c4cb1af178d50540ea4fd433bb2", "url": "https://github.com/firebase/firebase-admin-java/commit/128838e66e2c8c4cb1af178d50540ea4fd433bb2", "message": "PR fixes", "committedDate": "2020-10-21T21:24:26Z", "type": "forcePushed"}, {"oid": "6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "url": "https://github.com/firebase/firebase-admin-java/commit/6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "message": "PR fixes", "committedDate": "2020-10-21T21:26:14Z", "type": "commit"}, {"oid": "6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "url": "https://github.com/firebase/firebase-admin-java/commit/6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "message": "PR fixes", "committedDate": "2020-10-21T21:26:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc2NDA2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r509764063", "body": "I think this could be a good place to add more Condition class specific tests (constructors, getter, setters etc). But feel free to add them in future PRs.", "bodyText": "I think this could be a good place to add more Condition class specific tests (constructors, getter, setters etc). But feel free to add them in future PRs.", "bodyHTML": "<p dir=\"auto\">I think this could be a good place to add more Condition class specific tests (constructors, getter, setters etc). But feel free to add them in future PRs.</p>", "author": "hiranya911", "createdAt": "2020-10-21T22:34:37Z", "path": "src/test/java/com/google/firebase/remoteconfig/ConditionTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import org.junit.Test;\n+\n+public class ConditionTest {", "originalCommit": "6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MzQxNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r509793416", "bodyText": "Good call. This makes me wonder... should we add test classes for all other types, too?", "author": "lahirumaramba", "createdAt": "2020-10-21T23:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc2NDA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjQ2NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r509806464", "bodyText": "Makes sense to me.", "author": "hiranya911", "createdAt": "2020-10-22T00:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc2NDA2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTI0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r512315243", "body": "I wonder if we might even want to clarify that this affects how the condition is displayed in the parameter list in the Firebase console.  That's true, right?  Outside the console, it is irrelevant?", "bodyText": "I wonder if we might even want to clarify that this affects how the condition is displayed in the parameter list in the Firebase console.  That's true, right?  Outside the console, it is irrelevant?", "bodyHTML": "<p dir=\"auto\">I wonder if we might even want to clarify that this affects how the condition is displayed in the parameter list in the Firebase console.  That's true, right?  Outside the console, it is irrelevant?</p>", "author": "egilmorez", "createdAt": "2020-10-26T22:49:53Z", "path": "src/main/java/com/google/firebase/remoteconfig/Condition.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ConditionResponse;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config condition that can be included in a {@link Template}.\n+ * A condition targets a specific group of users. A list of these conditions make up\n+ * part of a Remote Config template.\n+ */\n+public final class Condition {\n+\n+  private String name;\n+  private String expression;\n+  private TagColor tagColor;\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   */\n+  public Condition(@NonNull String name, @NonNull String expression) {\n+    this(name, expression, null);\n+  }\n+\n+  /**\n+   * Creates a new {@link Condition}.\n+   *\n+   * @param name A non-null, non-empty, and unique name of this condition.\n+   * @param expression A non-null and non-empty expression of this condition.\n+   * @param tagColor A tag color of this condition.", "originalCommit": "6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTgxMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r512315811", "bodyText": "Ah kind of like you did for the setter below.  Do you agree it would be good in both places?  For creating and setting; not so much for getting I think.\n\n\nThe color associated with this condition for display purposes in the Firebase Console.\n\nNot specifying this value results in the console picking an arbitrary color to associate\nwith the condition.", "author": "egilmorez", "createdAt": "2020-10-26T22:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxMDkyNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r512810925", "bodyText": "Good call! I updated the docs here. Thanks!", "author": "lahirumaramba", "createdAt": "2020-10-27T15:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "133163cf052718607776a595c9b5e6fa53e11bc5", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Condition.java b/src/main/java/com/google/firebase/remoteconfig/Condition.java\nindex 1a8c751..c10498c 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Condition.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Condition.java\n", "chunk": "@@ -52,7 +52,9 @@ public final class Condition {\n    *\n    * @param name A non-null, non-empty, and unique name of this condition.\n    * @param expression A non-null and non-empty expression of this condition.\n-   * @param tagColor A tag color of this condition.\n+   * @param tagColor A color associated with this condition for display purposes in the\n+   *                 Firebase Console. Not specifying this value results in the console picking an\n+   *                 arbitrary color to associate with the condition.\n    */\n   public Condition(@NonNull String name, @NonNull String expression, @Nullable TagColor tagColor) {\n     checkArgument(!Strings.isNullOrEmpty(name), \"condition name must not be null or empty\");\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNjE0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r512316144", "body": "Here too, we might clarify we mean display in the Firebase console.  ", "bodyText": "Here too, we might clarify we mean display in the Firebase console.", "bodyHTML": "<p dir=\"auto\">Here too, we might clarify we mean display in the Firebase console.</p>", "author": "egilmorez", "createdAt": "2020-10-26T22:52:11Z", "path": "src/main/java/com/google/firebase/remoteconfig/TagColor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+/**\n+ * Colors that are associated with conditions for display purposes.", "originalCommit": "6d2a377e49801c6fb85a8e4e0bf5c204bc571af0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxMTIyNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/489#discussion_r512811227", "bodyText": "Updated the docs. Thank you!", "author": "lahirumaramba", "createdAt": "2020-10-27T15:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNjE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "133163cf052718607776a595c9b5e6fa53e11bc5", "changed_code": [{"header": "diff --git a/src/main/java/com/google/firebase/remoteconfig/TagColor.java b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\nindex c1d2a1a..ed7b8cd 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/TagColor.java\n", "chunk": "@@ -17,7 +17,7 @@\n package com.google.firebase.remoteconfig;\n \n /**\n- * Colors that are associated with conditions for display purposes.\n+ * Colors that are associated with conditions for display purposes in the Firebase Console.\n  */\n public enum TagColor {\n   BLUE(\"BLUE\"),\n", "next_change": null}]}}, {"oid": "133163cf052718607776a595c9b5e6fa53e11bc5", "url": "https://github.com/firebase/firebase-admin-java/commit/133163cf052718607776a595c9b5e6fa53e11bc5", "message": "Fix javadocs", "committedDate": "2020-10-27T15:49:15Z", "type": "commit"}]}