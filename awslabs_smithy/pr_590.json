{"pr_number": 590, "pr_title": "Optimize reverse neighbors for memory", "pr_author": "mtdowling", "pr_createdAt": "2020-10-05T18:33:50Z", "pr_url": "https://github.com/awslabs/smithy/pull/590", "timeline": [{"oid": "7de890467e57a78a02218bb885926ed14b618870", "url": "https://github.com/awslabs/smithy/commit/7de890467e57a78a02218bb885926ed14b618870", "message": "Optimize reverse neighbors for memory\n\nThis method previously needed lots of intermediate representations\nstored in memory to create a Map<ShapeId, List<RelationShip>> that\ncontains only unique relationships. It was done using Stream,\ndistinct, and groupingBy. However, when trying to load ridiculously\nlarge models, that approach consume tons of heap. This approach\nallocates as little as possible (I think), but does require creating\nan ArrayList copy of a Set each time neighbors are returned.", "committedDate": "2020-10-05T18:31:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NTkxMA==", "url": "https://github.com/awslabs/smithy/pull/590#discussion_r499795910", "body": "nit:\r\n```suggestion\r\n        // However, when trying to load ridiculously large models, that approach consumes\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // however, when trying to load ridiculously large models, that approach consume\n          \n          \n            \n                    // However, when trying to load ridiculously large models, that approach consumes", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> <span class=\"x x-first x-last\">however</span>, when trying to load ridiculously large models, that approach <span class=\"x x-first x-last\">consume</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> <span class=\"x x-first x-last\">However</span>, when trying to load ridiculously large models, that approach <span class=\"x x-first x-last\">consumes</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "srchase", "createdAt": "2020-10-05T18:38:20Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/neighbor/NeighborProvider.java", "diffHunk": "@@ -122,13 +124,24 @@ static NeighborProvider reverse(Model model) {\n      * @return Returns the reverse neighbor provider.\n      */\n     static NeighborProvider reverse(Model model, NeighborProvider forwardProvider) {\n-        Map<ShapeId, List<Relationship>> targetedFrom = model.shapes()\n-                .map(forwardProvider::getNeighbors)\n-                .flatMap(List::stream)\n-                .distinct()\n-                .collect(Collectors.groupingBy(Relationship::getNeighborShapeId, ListUtils.toUnmodifiableList()));\n+        // Note: this method previously needed lots of intermediate representations\n+        // stored in memory to create a Map<ShapeId, List<RelationShip>> that contains\n+        // only unique relationships. It was done using Stream, distinct, and groupingBy.\n+        // however, when trying to load ridiculously large models, that approach consume", "originalCommit": "7de890467e57a78a02218bb885926ed14b618870", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f5ae002509c6ee9d9edfda3662000a829e1644e", "url": "https://github.com/awslabs/smithy/commit/9f5ae002509c6ee9d9edfda3662000a829e1644e", "message": "Fix typo\n\nCo-authored-by: Chase Coalwell <chasecoa@amazon.com>", "committedDate": "2020-10-05T18:49:14Z", "type": "commit"}]}