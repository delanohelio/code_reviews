{"pr_number": 890, "pr_title": "UndefinedParameterType message", "pr_author": "aslakhellesoy", "pr_createdAt": "2020-02-06T16:35:53Z", "pr_url": "https://github.com/cucumber/common/pull/890", "merge_commit": "250a29820166c1a8654bf525c6a0eeb468cb67a5", "timeline": [{"oid": "d2b6912d18c3d316f32633382870c55df2666efa", "url": "https://github.com/cucumber/common/commit/d2b6912d18c3d316f32633382870c55df2666efa", "message": "Add UndefinedParameterTypeExpression.ts and ExpressionFactory.ts", "committedDate": "2020-02-06T16:03:18Z", "type": "commit"}, {"oid": "7c4b93f157b4e381a2136a4b01fe9d0ee1318b78", "url": "https://github.com/cucumber/common/commit/7c4b93f157b4e381a2136a4b01fe9d0ee1318b78", "message": "Return UndefinedParameterTypeExpression when a parameter type is undefined.", "committedDate": "2020-02-06T16:25:17Z", "type": "commit"}, {"oid": "31e2a659057178e60046a6c7714f06c812e32db2", "url": "https://github.com/cucumber/common/commit/31e2a659057178e60046a6c7714f06c812e32db2", "message": "Update Changelog", "committedDate": "2020-02-06T16:38:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1MzYxNg==", "url": "https://github.com/cucumber/common/pull/890#discussion_r375953616", "body": "```suggestion\r\nfinal class UndefinedParameterTypeExpression implements Expression {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class UndefinedParameterTypeExpression implements Expression {\n          \n          \n            \n            final class UndefinedParameterTypeExpression implements Expression {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">UndefinedParameterTypeExpression</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">Expression</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first x-last\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">UndefinedParameterTypeExpression</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">Expression</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mpkorstanje", "createdAt": "2020-02-06T16:48:00Z", "path": "cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.cucumber.cucumberexpressions;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class UndefinedParameterTypeExpression implements Expression {", "originalCommit": "31e2a659057178e60046a6c7714f06c812e32db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1Mzk1NA==", "url": "https://github.com/cucumber/common/pull/890#discussion_r375953954", "bodyText": "Don't forget CucumberExpression and RegularExpression.", "author": "mpkorstanje", "createdAt": "2020-02-06T16:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1MzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a8ad34f56e4f6a0b6749802e6ca8577bf859c4f0", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\nindex 4be4056df..1bc6a120d 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n", "chunk": "@@ -4,10 +4,10 @@ import java.lang.reflect.Type;\n import java.util.List;\n import java.util.regex.Pattern;\n \n-public class UndefinedParameterTypeExpression implements Expression {\n+final class UndefinedParameterTypeExpression implements Expression {\n     private final String source;\n \n-    public UndefinedParameterTypeExpression(String source) {\n+    UndefinedParameterTypeExpression(String source) {\n         this.source = source;\n     }\n \n", "next_change": {"commit": "005615fde5c7824a5cbf7862c5ba8355507b2db0", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\nindex 1bc6a120d..9f56a6af7 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n", "chunk": "@@ -2,13 +2,18 @@ package io.cucumber.cucumberexpressions;\n \n import java.lang.reflect.Type;\n import java.util.List;\n+import java.util.Set;\n import java.util.regex.Pattern;\n \n+import static java.util.Collections.unmodifiableSet;\n+\n final class UndefinedParameterTypeExpression implements Expression {\n     private final String source;\n+    private final Set<String> undefinedParameterTypeNames;\n \n-    UndefinedParameterTypeExpression(String source) {\n+    UndefinedParameterTypeExpression(String source, Set<String> undefinedParameterTypeNames) {\n         this.source = source;\n+        this.undefinedParameterTypeNames = undefinedParameterTypeNames;\n     }\n \n     @Override\n", "next_change": {"commit": "c058193ec0548accf50b97048df061fb81ed11eb", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\ndeleted file mode 100644\nindex 9f56a6af7..000000000\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n+++ /dev/null\n", "chunk": "@@ -1,38 +0,0 @@\n-package io.cucumber.cucumberexpressions;\n-\n-import java.lang.reflect.Type;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n-\n-import static java.util.Collections.unmodifiableSet;\n-\n-final class UndefinedParameterTypeExpression implements Expression {\n-    private final String source;\n-    private final Set<String> undefinedParameterTypeNames;\n-\n-    UndefinedParameterTypeExpression(String source, Set<String> undefinedParameterTypeNames) {\n-        this.source = source;\n-        this.undefinedParameterTypeNames = undefinedParameterTypeNames;\n-    }\n-\n-    @Override\n-    public List<Argument<?>> match(String text, Type... typeHints) {\n-        return null;\n-    }\n-\n-    @Override\n-    public Pattern getRegexp() {\n-        return Pattern.compile(\".^\"); // matches nothing\n-    }\n-\n-    @Override\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    @Override\n-    public Set<String> getUndefinedParameterTypeNames() {\n-        return unmodifiableSet(undefinedParameterTypeNames);\n-    }\n-}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "250a29820166c1a8654bf525c6a0eeb468cb67a5", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\ndeleted file mode 100644\nindex 4be4056df..000000000\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeExpression.java\n+++ /dev/null\n", "chunk": "@@ -1,28 +0,0 @@\n-package io.cucumber.cucumberexpressions;\n-\n-import java.lang.reflect.Type;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-\n-public class UndefinedParameterTypeExpression implements Expression {\n-    private final String source;\n-\n-    public UndefinedParameterTypeExpression(String source) {\n-        this.source = source;\n-    }\n-\n-    @Override\n-    public List<Argument<?>> match(String text, Type... typeHints) {\n-        return null;\n-    }\n-\n-    @Override\n-    public Pattern getRegexp() {\n-        return Pattern.compile(\".^\"); // matches nothing\n-    }\n-\n-    @Override\n-    public String getSource() {\n-        return source;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "250a29820166c1a8654bf525c6a0eeb468cb67a5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NzExMA==", "url": "https://github.com/cucumber/common/pull/890#discussion_r375957110", "body": "We're using exceptions for control flow. Might be worth extracting some of the code in the `CucumberExpression` to the factory instead of throwing the exception and then catching it.", "bodyText": "We're using exceptions for control flow. Might be worth extracting some of the code in the CucumberExpression to the factory instead of throwing the exception and then catching it.", "bodyHTML": "<p dir=\"auto\">We're using exceptions for control flow. Might be worth extracting some of the code in the <code>CucumberExpression</code> to the factory instead of throwing the exception and then catching it.</p>", "author": "mpkorstanje", "createdAt": "2020-02-06T16:53:49Z", "path": "cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java", "diffHunk": "@@ -31,7 +31,15 @@ public Expression createExpression(String expressionString) {\n         if (m.find()) {\n             return new RegularExpression(Pattern.compile(m.group(1)), parameterTypeRegistry);\n         }\n-        return new CucumberExpression(expressionString, parameterTypeRegistry);\n+        return createCucumberExpression(expressionString);\n+    }\n+\n+    private Expression createCucumberExpression(String expressionString) {\n+        try {\n+            return new CucumberExpression(expressionString, parameterTypeRegistry);\n+        } catch (UndefinedParameterTypeException e) {", "originalCommit": "31e2a659057178e60046a6c7714f06c812e32db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NzY5Mw==", "url": "https://github.com/cucumber/common/pull/890#discussion_r375957693", "bodyText": "Yeah I had the same thought.", "author": "aslakhellesoy", "createdAt": "2020-02-06T16:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NzExMA=="}], "type": "inlineReview", "revised_code": {"commit": "005615fde5c7824a5cbf7862c5ba8355507b2db0", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\nindex 6423f49ed..36619d0e0 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n", "chunk": "@@ -38,7 +39,7 @@ public final class ExpressionFactory {\n         try {\n             return new CucumberExpression(expressionString, parameterTypeRegistry);\n         } catch (UndefinedParameterTypeException e) {\n-            return new UndefinedParameterTypeExpression(expressionString);\n+            return new UndefinedParameterTypeExpression(expressionString, Collections.singleton(e.getUndefinedParameterTypeName()));\n         }\n     }\n \n", "next_change": {"commit": "c058193ec0548accf50b97048df061fb81ed11eb", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\nindex 36619d0e0..cb5049500 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n", "chunk": "@@ -32,15 +31,7 @@ public final class ExpressionFactory {\n         if (m.find()) {\n             return new RegularExpression(Pattern.compile(m.group(1)), parameterTypeRegistry);\n         }\n-        return createCucumberExpression(expressionString);\n-    }\n-\n-    private Expression createCucumberExpression(String expressionString) {\n-        try {\n-            return new CucumberExpression(expressionString, parameterTypeRegistry);\n-        } catch (UndefinedParameterTypeException e) {\n-            return new UndefinedParameterTypeExpression(expressionString, Collections.singleton(e.getUndefinedParameterTypeName()));\n-        }\n+        return new CucumberExpression(expressionString, parameterTypeRegistry);\n     }\n \n     private RegularExpression createRegularExpressionWithAnchors(String expressionString) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "250a29820166c1a8654bf525c6a0eeb468cb67a5", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\nindex 6423f49ed..cb5049500 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n", "chunk": "@@ -31,15 +31,7 @@ public final class ExpressionFactory {\n         if (m.find()) {\n             return new RegularExpression(Pattern.compile(m.group(1)), parameterTypeRegistry);\n         }\n-        return createCucumberExpression(expressionString);\n-    }\n-\n-    private Expression createCucumberExpression(String expressionString) {\n-        try {\n-            return new CucumberExpression(expressionString, parameterTypeRegistry);\n-        } catch (UndefinedParameterTypeException e) {\n-            return new UndefinedParameterTypeExpression(expressionString);\n-        }\n+        return new CucumberExpression(expressionString, parameterTypeRegistry);\n     }\n \n     private RegularExpression createRegularExpressionWithAnchors(String expressionString) {\n", "next_change": {"commit": "a09de33c93b6cce8eb0b16a0075b985469f502e4", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\nindex cb5049500..5d93c4464 100644\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n+++ b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n", "chunk": "@@ -38,7 +40,7 @@ public final class ExpressionFactory {\n         try {\n             return new RegularExpression(Pattern.compile(expressionString), parameterTypeRegistry);\n         } catch (PatternSyntaxException e) {\n-            if (CucumberExpression.PARAMETER_PATTERN.matcher(expressionString).find()) {\n+            if (PARAMETER_PATTERN.matcher(expressionString).find()) {\n                 throw new CucumberExpressionException(\"You cannot use anchors (^ or $) in Cucumber Expressions. Please remove them from \" + expressionString, e);\n             }\n             throw e;\n", "next_change": {"commit": "e24d1a4829a75fb254d11cafe21569d59e8d57ad", "changed_code": [{"header": "diff --git a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java b/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\ndeleted file mode 100644\nindex 5d93c4464..000000000\n--- a/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,49 +0,0 @@\n-package io.cucumber.cucumberexpressions;\n-\n-import org.apiguardian.api.API;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.regex.PatternSyntaxException;\n-\n-/**\n- * Creates a {@link CucumberExpression} or {@link RegularExpression} from a {@link String}\n- * using heuristics. This is particularly useful for languages that don't have a\n- * literal syntax for regular expressions. In Java, a regular expression has to be represented as a String.\n- */\n-@API(status = API.Status.STABLE)\n-public final class ExpressionFactory {\n-\n-    private static final Pattern BEGIN_ANCHOR = Pattern.compile(\"^\\\\^.*\");\n-    private static final Pattern END_ANCHOR = Pattern.compile(\".*\\\\$$\");\n-    private static final Pattern SCRIPT_STYLE_REGEXP = Pattern.compile(\"^/(.*)/$\");\n-    private static final Pattern PARAMETER_PATTERN = Pattern.compile(\"((?:\\\\\\\\){0,2})\\\\{([^}]*)\\\\}\");\n-\n-    private final ParameterTypeRegistry parameterTypeRegistry;\n-\n-    public ExpressionFactory(ParameterTypeRegistry parameterTypeRegistry) {\n-        this.parameterTypeRegistry = parameterTypeRegistry;\n-    }\n-\n-    public Expression createExpression(String expressionString) {\n-        if (BEGIN_ANCHOR.matcher(expressionString).find() || END_ANCHOR.matcher(expressionString).find()) {\n-            return createRegularExpressionWithAnchors(expressionString);\n-        }\n-        Matcher m = SCRIPT_STYLE_REGEXP.matcher(expressionString);\n-        if (m.find()) {\n-            return new RegularExpression(Pattern.compile(m.group(1)), parameterTypeRegistry);\n-        }\n-        return new CucumberExpression(expressionString, parameterTypeRegistry);\n-    }\n-\n-    private RegularExpression createRegularExpressionWithAnchors(String expressionString) {\n-        try {\n-            return new RegularExpression(Pattern.compile(expressionString), parameterTypeRegistry);\n-        } catch (PatternSyntaxException e) {\n-            if (PARAMETER_PATTERN.matcher(expressionString).find()) {\n-                throw new CucumberExpressionException(\"You cannot use anchors (^ or $) in Cucumber Expressions. Please remove them from \" + expressionString, e);\n-            }\n-            throw e;\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "250a29820166c1a8654bf525c6a0eeb468cb67a5", "message": "Merge commit", "committedDate": null}, {"oid": "a09de33c93b6cce8eb0b16a0075b985469f502e4", "committedDate": "2020-07-17 16:31:46 +0200", "message": "Rewrite AST to Regex"}, {"oid": "010578070fccae36186952cc8bbaf7ad1b1593bd", "committedDate": "2020-09-17 22:56:13 +0200", "message": "Complain"}, {"oid": "e24d1a4829a75fb254d11cafe21569d59e8d57ad", "committedDate": "2021-09-21 13:55:59 +0100", "message": "Remove Cucumber Expressions (#1760)"}]}, {"oid": "391d5794b171c318119b94ec89cc5bb0b25800f9", "url": "https://github.com/cucumber/common/commit/391d5794b171c318119b94ec89cc5bb0b25800f9", "message": "Add UndefinedParameterTypeExpression.rb and ExpressionFactory.rb", "committedDate": "2020-02-06T17:00:57Z", "type": "commit"}, {"oid": "a8ad34f56e4f6a0b6749802e6ca8577bf859c4f0", "url": "https://github.com/cucumber/common/commit/a8ad34f56e4f6a0b6749802e6ca8577bf859c4f0", "message": "CucumberExpression and RegularExpression are no longer part of the public API.", "committedDate": "2020-02-06T17:05:25Z", "type": "commit"}, {"oid": "68579571ccd0bb90e6403b486b29253994200963", "url": "https://github.com/cucumber/common/commit/68579571ccd0bb90e6403b486b29253994200963", "message": "NewCucumberExpression returns an UndefinedParameterTypeExpression for undefined parameter types", "committedDate": "2020-02-06T17:34:37Z", "type": "commit"}, {"oid": "6862884b90f18b404f24ef0d3e1bc2d357a4511c", "url": "https://github.com/cucumber/common/commit/6862884b90f18b404f24ef0d3e1bc2d357a4511c", "message": "Update changelog", "committedDate": "2020-02-06T17:37:28Z", "type": "commit"}, {"oid": "80c2f22b8e36aa9e50703cb8bf0cd106cf480f4f", "url": "https://github.com/cucumber/common/commit/80c2f22b8e36aa9e50703cb8bf0cd106cf480f4f", "message": "Remove CucumberExpression and RegularExpression from public JavaScript API", "committedDate": "2020-02-06T17:47:10Z", "type": "commit"}, {"oid": "005615fde5c7824a5cbf7862c5ba8355507b2db0", "url": "https://github.com/cucumber/common/commit/005615fde5c7824a5cbf7862c5ba8355507b2db0", "message": "Add getUndefinedParameterTypeNames", "committedDate": "2020-02-06T18:17:51Z", "type": "commit"}, {"oid": "c058193ec0548accf50b97048df061fb81ed11eb", "url": "https://github.com/cucumber/common/commit/c058193ec0548accf50b97048df061fb81ed11eb", "message": "Revert adding of UndefinedParameterTypeExpression", "committedDate": "2020-02-11T14:12:46Z", "type": "commit"}, {"oid": "36f0fccd192927d8aaa2f58b2d08167180a61c67", "url": "https://github.com/cucumber/common/commit/36f0fccd192927d8aaa2f58b2d08167180a61c67", "message": "Merge remote-tracking branch 'origin/master' into undefined-parameter-type-expression", "committedDate": "2020-02-11T14:13:06Z", "type": "commit"}, {"oid": "8d7a73b4d305360d90cf7a7f459deb78a8d59720", "url": "https://github.com/cucumber/common/commit/8d7a73b4d305360d90cf7a7f459deb78a8d59720", "message": "Update changelog", "committedDate": "2020-02-11T14:27:09Z", "type": "commit"}, {"oid": "b5c0c7b763ebc1e9940cdb019a5b75a2ebd4c78d", "url": "https://github.com/cucumber/common/commit/b5c0c7b763ebc1e9940cdb019a5b75a2ebd4c78d", "message": "Update cucumber-react", "committedDate": "2020-02-11T15:44:19Z", "type": "commit"}, {"oid": "4baf62df87f5c946ebecc91f34a411f6101de1ab", "url": "https://github.com/cucumber/common/commit/4baf62df87f5c946ebecc91f34a411f6101de1ab", "message": "Rename TestResult to TestStepResult", "committedDate": "2020-02-12T17:19:09Z", "type": "commit"}]}