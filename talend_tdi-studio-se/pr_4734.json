{"pr_number": 4734, "pr_title": "Tup-27070", "pr_author": "hzhao-talendbj", "pr_createdAt": "2020-05-25T06:47:45Z", "pr_url": "https://github.com/Talend/tdi-studio-se/pull/4734", "timeline": [{"oid": "742f85e27f8ada971687463cf0f33321bafc8e0d", "url": "https://github.com/Talend/tdi-studio-se/commit/742f85e27f8ada971687463cf0f33321bafc8e0d", "message": "Tup-27070\nELT component configuration to create an UPDATE Statement", "committedDate": "2020-05-25T06:45:58Z", "type": "commit"}, {"oid": "5873f90f6358d51fdae10bb2a85dc23f4506dcd7", "url": "https://github.com/Talend/tdi-studio-se/commit/5873f90f6358d51fdae10bb2a85dc23f4506dcd7", "message": "TUP-27070 addjunit for dbgeneratio manager", "committedDate": "2020-05-26T05:49:44Z", "type": "commit"}, {"oid": "5cda743de3f8c0d927e34a1c683b850b756105ee", "url": "https://github.com/Talend/tdi-studio-se/commit/5cda743de3f8c0d927e34a1c683b850b756105ee", "message": "TUP-27070 do some fix and add junit for mssql", "committedDate": "2020-05-26T16:19:50Z", "type": "commit"}, {"oid": "3ee1efe8af81611e4144ee53ef9de3eb6211f3d4", "url": "https://github.com/Talend/tdi-studio-se/commit/3ee1efe8af81611e4144ee53ef9de3eb6211f3d4", "message": "Merge remote-tracking branch 'origin/master' into hengzhao/TUP-27070", "committedDate": "2020-05-29T07:43:27Z", "type": "commit"}, {"oid": "fec4ed80295aecfb2103087ea78a4ee558a6eb3d", "url": "https://github.com/Talend/tdi-studio-se/commit/fec4ed80295aecfb2103087ea78a4ee558a6eb3d", "message": "TUP-27070  improve some code", "committedDate": "2020-05-29T07:46:19Z", "type": "commit"}, {"oid": "263b7c7d75241ff8882a36443dc12223c083304b", "url": "https://github.com/Talend/tdi-studio-se/commit/263b7c7d75241ff8882a36443dc12223c083304b", "message": "TUP-27070 improve code", "committedDate": "2020-06-01T06:12:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4MjM3OQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4734#discussion_r431682379", "body": "not good to change the parameter like this.", "bodyText": "not good to change the parameter like this.", "bodyHTML": "<p dir=\"auto\">not good to change the parameter like this.</p>", "author": "hcyi", "createdAt": "2020-05-28T08:52:54Z", "path": "main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/generation/DbGenerationManager.java", "diffHunk": "@@ -771,7 +763,7 @@ public String buildSqlSelect(DbMapComponent dbMapComponent, String outputTableNa\n             boolean isFirstClause = true;\n             for (int i = 0; i < lstSizeInputTables; i++) {\n                 ExternalDbMapTable inputTable = inputTables.get(i);\n-                if (buildConditions(component, sbWhere, inputTable, false, isFirstClause, false)) {\n+                if (buildConditions(isFirstClause, component, sbWhere, inputTable, false)) {", "originalCommit": "5cda743de3f8c0d927e34a1c683b850b756105ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fec4ed80295aecfb2103087ea78a4ee558a6eb3d", "changed_code": [{"header": "diff --git a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/generation/DbGenerationManager.java b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/generation/DbGenerationManager.java\nindex 3631a9c74c..3241e52a9f 100644\n--- a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/generation/DbGenerationManager.java\n+++ b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/generation/DbGenerationManager.java\n", "chunk": "@@ -763,7 +763,7 @@ public abstract class DbGenerationManager {\n             boolean isFirstClause = true;\n             for (int i = 0; i < lstSizeInputTables; i++) {\n                 ExternalDbMapTable inputTable = inputTables.get(i);\n-                if (buildConditions(isFirstClause, component, sbWhere, inputTable, false)) {\n+                if (buildConditions4Update(isFirstClause, component, sbWhere, inputTable, false)) {\n                     isFirstClause = false;\n                 }\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4OTQzOA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4734#discussion_r431689438", "body": "no need this function in this class", "bodyText": "no need this function in this class", "bodyHTML": "<p dir=\"auto\">no need this function in this class</p>", "author": "hcyi", "createdAt": "2020-05-28T09:04:44Z", "path": "main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java", "diffHunk": "@@ -0,0 +1,649 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.designer.dbmap.language.mssql;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.talend.core.model.metadata.IMetadataColumn;\n+import org.talend.core.model.metadata.IMetadataTable;\n+import org.talend.core.model.process.IConnection;\n+import org.talend.core.model.process.IElementParameter;\n+import org.talend.core.utils.TalendQuoteUtils;\n+import org.talend.designer.dbmap.DbMapComponent;\n+import org.talend.designer.dbmap.external.data.ExternalDbMapData;\n+import org.talend.designer.dbmap.external.data.ExternalDbMapEntry;\n+import org.talend.designer.dbmap.external.data.ExternalDbMapTable;\n+import org.talend.designer.dbmap.i18n.Messages;\n+import org.talend.designer.dbmap.language.AbstractDbLanguage;\n+import org.talend.designer.dbmap.language.GenericDbLanguage;\n+import org.talend.designer.dbmap.language.IJoinType;\n+import org.talend.designer.dbmap.language.generation.DbGenerationManager;\n+import org.talend.designer.dbmap.language.generation.DbMapSqlConstants;\n+\n+public class MssqlGenerationManager extends DbGenerationManager {\n+\n+    public MssqlGenerationManager() {\n+        super(new GenericDbLanguage());\n+    }\n+\n+    @Override\n+    public String buildSqlSelect(DbMapComponent component, String outputTableName) {", "originalCommit": "5cda743de3f8c0d927e34a1c683b850b756105ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fec4ed80295aecfb2103087ea78a4ee558a6eb3d", "changed_code": [{"header": "diff --git a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\nindex be9bd8f35e..af58e0fc63 100644\n--- a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\n+++ b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\n", "chunk": "@@ -46,7 +44,7 @@ public class MssqlGenerationManager extends DbGenerationManager {\n         if (checkUseUpdateStatement) {\n             return buildSqlSelect(component, outputTableName, DEFAULT_TAB_SPACE_STRING, checkUseUpdateStatement);\n         } else {\n-            return buildSqlSelect(component, outputTableName, DEFAULT_TAB_SPACE_STRING);\n+            return super.buildSqlSelect(component, outputTableName, DEFAULT_TAB_SPACE_STRING);\n         }\n     }\n \n", "next_change": {"commit": "263b7c7d75241ff8882a36443dc12223c083304b", "changed_code": [{"header": "diff --git a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\nindex af58e0fc63..7c6effb34d 100644\n--- a/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\n+++ b/main/plugins/org.talend.designer.dbmap/src/main/java/org/talend/designer/dbmap/language/mssql/MssqlGenerationManager.java\n", "chunk": "@@ -42,311 +26,9 @@ public class MssqlGenerationManager extends DbGenerationManager {\n     public String buildSqlSelect(DbMapComponent component, String outputTableName) {\n         boolean checkUseUpdateStatement = checkUseUpdateStatement(component, outputTableName);\n         if (checkUseUpdateStatement) {\n-            return buildSqlSelect(component, outputTableName, DEFAULT_TAB_SPACE_STRING, checkUseUpdateStatement);\n+            return buildSqlUpdate(component, outputTableName, DEFAULT_TAB_SPACE_STRING);\n         } else {\n             return super.buildSqlSelect(component, outputTableName, DEFAULT_TAB_SPACE_STRING);\n         }\n     }\n-\n-    public String buildSqlSelect(DbMapComponent dbMapComponent, String outputTableName, String tabString,\n-            boolean checkUseUpdateStatement) {\n-        queryColumnsName = \"\\\"\"; //$NON-NLS-1$\n-        aliasAlreadyDeclared.clear();\n-        queryColumnsSegments.clear();\n-        querySegments.clear();\n-        subQueryTable.clear();\n-        inputSchemaContextSet.clear();\n-\n-        this.tabSpaceString = tabString;\n-        DbMapComponent component = getDbMapComponent(dbMapComponent);\n-\n-        List<IConnection> outputConnections = (List<IConnection>) component.getOutgoingConnections();\n-\n-        Map<String, IConnection> nameToOutputConnection = new HashMap<String, IConnection>();\n-        for (IConnection connection : outputConnections) {\n-            nameToOutputConnection.put(connection.getUniqueName(), connection);\n-        }\n-\n-        ExternalDbMapData data = component.getExternalData();\n-        StringBuilder sb = new StringBuilder();\n-\n-        List<ExternalDbMapTable> outputTables = data.getOutputTables();\n-        int lstOutputTablesSize = outputTables.size();\n-        ExternalDbMapTable outputTable = null;\n-        for (int i = 0; i < lstOutputTablesSize; i++) {\n-            ExternalDbMapTable temp = outputTables.get(i);\n-            if (outputTableName.equals(temp.getName())) {\n-                outputTable = temp;\n-                break;\n-            }\n-        }\n-\n-        if (outputTable != null) {\n-            String outTableName = outputTable.getTableName();\n-            IConnection connection = nameToOutputConnection.get(outputTable.getName());\n-            List<IMetadataColumn> columns = new ArrayList<IMetadataColumn>();\n-            if (connection != null) {\n-                IMetadataTable metadataTable = connection.getMetadataTable();\n-                if (metadataTable != null) {\n-                    columns.addAll(metadataTable.getListColumns());\n-                }\n-            }\n-            // Update\n-            String targetSchemaTable = outTableName;\n-            IElementParameter eltSchemaNameParam = source.getElementParameter(\"ELT_SCHEMA_NAME\"); //$NON-NLS-1$\n-            if (eltSchemaNameParam != null && eltSchemaNameParam.getValue() != null) {\n-                String schema = TalendQuoteUtils.removeQuotesIfExist(String.valueOf(eltSchemaNameParam.getValue()));\n-                if (org.apache.commons.lang.StringUtils.isNotEmpty(schema)) {\n-                    targetSchemaTable = addQuotes(schema) + DbMapSqlConstants.DOT + addQuotes(outTableName);\n-                }\n-            }\n-\n-            appendSqlQuery(sb, \"\\\"\", false); //$NON-NLS-1$\n-            appendSqlQuery(sb, DbMapSqlConstants.UPDATE);\n-            appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-            appendSqlQuery(sb, targetSchemaTable);\n-            appendSqlQuery(sb, tabSpaceString);\n-            appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-\n-            // Set\n-            String keyColumn = DbMapSqlConstants.EMPTY;\n-            List<ExternalDbMapEntry> metadataTableEntries = outputTable.getMetadataTableEntries();\n-            if (metadataTableEntries != null) {\n-                appendSqlQuery(sb, \"SET\"); //$NON-NLS-1$\n-                appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                boolean isKey = false;\n-                int lstSizeOutTableEntries = metadataTableEntries.size();\n-                List<Boolean> setColumns = getSetColumnsForUpdateQuery();\n-                final boolean hasDeactivatedColumns = !setColumns.isEmpty();\n-                boolean isFirstColumn = true;\n-                for (int i = 0; i < lstSizeOutTableEntries; i++) {\n-                    if (hasDeactivatedColumns && setColumns.get(i)) {\n-                        continue;\n-                    }\n-                    ExternalDbMapEntry dbMapEntry = metadataTableEntries.get(i);\n-                    String columnEntry = dbMapEntry.getName();\n-                    String expression = dbMapEntry.getExpression();\n-                    expression = initExpression(component, dbMapEntry);\n-                    expression = addQuoteForSpecialChar(expression, component);\n-                    //\n-                    if (!DEFAULT_TAB_SPACE_STRING.equals(this.tabSpaceString)) {\n-                        expression += DbMapSqlConstants.SPACE + DbMapSqlConstants.AS + DbMapSqlConstants.SPACE\n-                                + getAliasOf(dbMapEntry.getName());\n-                    }\n-                    String exp = replaceVariablesForExpression(component, expression);\n-                    String columnSegment = exp;\n-                    // Added isFirstColumn to conform old behaior if first column is skipped\n-                    if (i > 0 && !isFirstColumn) {\n-                        queryColumnsName += DbMapSqlConstants.COMMA + DbMapSqlConstants.SPACE;\n-                        columnSegment = DbMapSqlConstants.COMMA + DbMapSqlConstants.SPACE + columnSegment;\n-                    }\n-                    if (expression != null && expression.trim().length() > 0) {\n-                        queryColumnsName += exp;\n-                        queryColumnsSegments.add(columnSegment);\n-                    }\n-                    //\n-                    if (!isKey) {\n-                        for (IMetadataColumn column : columns) {\n-                            String columnName = column.getLabel();\n-                            if (columnName.equals(dbMapEntry.getName()) && column.isKey()) {\n-                                isKey = column.isKey();\n-                                keyColumn = addQuotes(columnEntry) + \" = \" + expression;//$NON-NLS-1$\n-                                break;\n-                            }\n-                        }\n-                        if (isKey) {\n-                            continue;\n-                        }\n-                    }\n-                    if (expression != null && expression.trim().length() > 0) {\n-                        // Append COMMA and NEW_LINE for all columns except FIRST.\n-                        if (!isFirstColumn) {\n-                            appendSqlQuery(sb, DbMapSqlConstants.COMMA);\n-                            appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                        } else {\n-                            isFirstColumn = false;\n-                        }\n-                        appendSqlQuery(sb, addQuotes(columnEntry) + \" = \" + expression); //$NON-NLS-1$\n-                    }\n-                }\n-            }\n-            if (\"\\\"\".equals(queryColumnsName)) {\n-                throw new IllegalArgumentException(\"Specify at least 1 column for UPDATE QUERY in SET section\");\n-            }\n-            appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-\n-            // From\n-            appendSqlQuery(sb, tabSpaceString);\n-            appendSqlQuery(sb, DbMapSqlConstants.FROM);\n-            // load input table in hash\n-            List<ExternalDbMapTable> inputTables = data.getInputTables();\n-            // load input table in hash\n-            boolean explicitJoin = false;\n-            int lstSizeInputTables = inputTables.size();\n-\n-            appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-            appendSqlQuery(sb, tabSpaceString);\n-            IJoinType previousJoinType = null;\n-\n-            for (int i = 0; i < lstSizeInputTables; i++) {\n-                ExternalDbMapTable inputTable = inputTables.get(i);\n-                IJoinType joinType = language.getJoin(inputTable.getJoinType());\n-                if (!language.unuseWithExplicitJoin().contains(joinType) && i > 0) {\n-                    explicitJoin = true;\n-                } else {\n-                    explicitJoin = false;\n-                }\n-                if (i == 0) {\n-                    joinType = AbstractDbLanguage.JOIN.NO_JOIN;\n-                    previousJoinType = joinType;\n-                } else {\n-                    joinType = language.getJoin(inputTable.getJoinType());\n-                }\n-                boolean commaCouldBeAdded = !explicitJoin && i > 0;\n-                boolean crCouldBeAdded = false;\n-                if (language.unuseWithExplicitJoin().contains(joinType) && !explicitJoin) {\n-                    buildTableDeclaration(component, sb, inputTable, commaCouldBeAdded, crCouldBeAdded, false);\n-\n-                } else if (!language.unuseWithExplicitJoin().contains(joinType) && explicitJoin) {\n-                    if (i > 0) {\n-                        if (previousJoinType == null) {\n-                            buildTableDeclaration(component, sb, inputTables.get(i - 1), commaCouldBeAdded, crCouldBeAdded, true);\n-                            previousJoinType = joinType;\n-                        } else {\n-                            // appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                            appendSqlQuery(sb, tabSpaceString);\n-                        }\n-                        appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                    }\n-                    String labelJoinType = joinType.getLabel();\n-                    if (joinType == AbstractDbLanguage.JOIN.CROSS_JOIN) {\n-                        ExternalDbMapTable nextTable = null;\n-                        if (i < lstSizeInputTables) {\n-                            nextTable = inputTables.get(i);\n-                            buildTableDeclaration(component, sb, nextTable, false, false, true);\n-                        }\n-\n-                    } else {\n-                        if (isConditionChecked(component, inputTable)) {\n-                            appendSqlQuery(sb, labelJoinType);\n-                            appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                            buildTableDeclaration(component, sb, inputTable, false, false, true);\n-                            appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                            appendSqlQuery(sb, DbMapSqlConstants.ON);\n-                            appendSqlQuery(sb, DbMapSqlConstants.LEFT_BRACKET);\n-                            appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                            buildConditions(component, sb, inputTable, true, true, true);\n-                            appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                            appendSqlQuery(sb, DbMapSqlConstants.RIGHT_BRACKET);\n-                        } else {\n-                            commaCouldBeAdded = true;\n-                            buildTableDeclaration(component, sb, inputTable, commaCouldBeAdded, crCouldBeAdded, false);\n-                        }\n-\n-                    }\n-\n-                }\n-            }\n-\n-            // where\n-            StringBuilder sbWhere = new StringBuilder();\n-            this.tabSpaceString = DEFAULT_TAB_SPACE_STRING;\n-            boolean isFirstClause = true;\n-            for (int i = 0; i < lstSizeInputTables; i++) {\n-                ExternalDbMapTable inputTable = inputTables.get(i);\n-                if (buildConditions(component, sbWhere, inputTable, false, isFirstClause, false)) {\n-                    isFirstClause = false;\n-                }\n-            }\n-            /*\n-             * for addition conditions\n-             */\n-            // like as input.newcolumn1>100\n-            List<String> whereAddition = new ArrayList<String>();\n-            // olny pure start with group or order, like as order/group by input.newcolumn1\n-            // List<String> byAddition = new ArrayList<String>();\n-            // like as input.newcolumn1>100 group/oder by input.newcolumn1\n-            // List<String> containWhereAddition = new ArrayList<String>();\n-            // like as \"OR/AND input.newcolumn1\", will keep original\n-            List<String> originalWhereAddition = new ArrayList<String>();\n-            List<String> otherAddition = new ArrayList<String>();\n-\n-            if (outputTable != null) {\n-                List<ExternalDbMapEntry> customWhereConditionsEntries = outputTable.getCustomWhereConditionsEntries();\n-                if (customWhereConditionsEntries != null) {\n-                    for (ExternalDbMapEntry entry : customWhereConditionsEntries) {\n-                        String exp = initExpression(component, entry);\n-                        if (exp != null && !DbMapSqlConstants.EMPTY.equals(exp.trim())) {\n-                            if (containWith(exp, DbMapSqlConstants.OR, true) || containWith(exp, DbMapSqlConstants.AND, true)) {\n-                                exp = replaceVariablesForExpression(component, exp);\n-                                originalWhereAddition.add(exp);\n-                            } else {\n-                                exp = replaceVariablesForExpression(component, exp);\n-                                whereAddition.add(exp);\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                List<ExternalDbMapEntry> customOtherConditionsEntries = outputTable.getCustomOtherConditionsEntries();\n-                if (customOtherConditionsEntries != null) {\n-                    for (ExternalDbMapEntry entry : customOtherConditionsEntries) {\n-                        String exp = initExpression(component, entry);\n-                        if (exp != null && !DbMapSqlConstants.EMPTY.equals(exp.trim())) {\n-                            exp = replaceVariablesForExpression(component, exp);\n-                            otherAddition.add(exp);\n-                        }\n-                    }\n-                }\n-            }\n-            this.tabSpaceString = tabString;\n-\n-            String whereClauses = sbWhere.toString();\n-            boolean whereFlag = whereClauses.trim().length() > 0;\n-            boolean whereAddFlag = !whereAddition.isEmpty();\n-            boolean whereOriginalFlag = !originalWhereAddition.isEmpty();\n-            if (whereFlag || whereAddFlag || whereOriginalFlag) {\n-                appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                appendSqlQuery(sb, tabSpaceString);\n-                appendSqlQuery(sb, DbMapSqlConstants.WHERE);\n-            }\n-            if (whereFlag) {\n-                appendSqlQuery(sb, whereClauses);\n-            }\n-            if (whereAddFlag) {\n-                for (int i = 0; i < whereAddition.size(); i++) {\n-                    if (i == 0 && whereFlag || i > 0) {\n-                        appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                        appendSqlQuery(sb, tabSpaceString);\n-                        appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                        appendSqlQuery(sb, DbMapSqlConstants.AND);\n-                    }\n-                    appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                    appendSqlQuery(sb, whereAddition.get(i));\n-                }\n-            }\n-            if (whereOriginalFlag) {\n-                for (String s : originalWhereAddition) {\n-                    appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                    appendSqlQuery(sb, DbMapSqlConstants.SPACE);\n-                    appendSqlQuery(sb, s);\n-                }\n-            }\n-            if (!otherAddition.isEmpty()) {\n-                appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                appendSqlQuery(sb, tabSpaceString);\n-                for (String s : otherAddition) {\n-                    appendSqlQuery(sb, s);\n-                    appendSqlQuery(sb, DbMapSqlConstants.NEW_LINE);\n-                    appendSqlQuery(sb, tabSpaceString);\n-                }\n-            }\n-        }\n-\n-        String sqlQuery = sb.toString();\n-        sqlQuery = handleQuery(sqlQuery);\n-        queryColumnsName = handleQuery(queryColumnsName);\n-        return sqlQuery;\n-    }\n-\n }\n", "next_change": null}]}}]}}]}