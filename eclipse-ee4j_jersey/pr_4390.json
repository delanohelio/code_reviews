{"pr_number": 4390, "pr_title": "Fix #3433 - Multiple cookies with same name are not supported", "pr_author": "tvallin", "pr_createdAt": "2020-02-07T14:23:34Z", "pr_url": "https://github.com/eclipse-ee4j/jersey/pull/4390", "timeline": [{"oid": "743c3fa2c510c87caf26493669606c3266f081ce", "url": "https://github.com/eclipse-ee4j/jersey/commit/743c3fa2c510c87caf26493669606c3266f081ce", "message": "Fix 3433 - Multiple cookies with same name are not supported\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-07T14:12:56Z", "type": "commit"}, {"oid": "392a1c0ecc84f9f619b1f18211b0e45f5353a073", "url": "https://github.com/eclipse-ee4j/jersey/commit/392a1c0ecc84f9f619b1f18211b0e45f5353a073", "message": "Fix 3433 - Check style fix\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-07T14:49:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjYwNQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4390#discussion_r378352605", "body": "Please use Calendar or LocalDateTime to set the dates you want, to prevent parsing exception with foreign locales", "bodyText": "Please use Calendar or LocalDateTime to set the dates you want, to prevent parsing exception with foreign locales", "bodyHTML": "<p dir=\"auto\">Please use Calendar or LocalDateTime to set the dates you want, to prevent parsing exception with foreign locales</p>", "author": "jansupol", "createdAt": "2020-02-12T16:09:57Z", "path": "tests/e2e-core-common/src/test/java/org/glassfish/jersey/tests/e2e/common/message/internal/HeaderUtilsTest.java", "diffHunk": "@@ -180,4 +184,97 @@ public void testAsHeaderString() throws Exception {\n         final String result = HeaderUtils.asHeaderString(values, null);\n         assertEquals(\"value,[null],\" + uri.toASCIIString(), result);\n     }\n+\n+    @Test\n+    public void testgetPreferedNewCookie(){\n+\n+        Date earliestDate;\n+        Date latestDate;\n+\n+        try {\n+            earliestDate = HttpDateFormat.readDate(\"Fri, 1 Jan 2020 00:00:00 GMT\");", "originalCommit": "392a1c0ecc84f9f619b1f18211b0e45f5353a073", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f54fe96853ac168a12c5ca005da25b8bfb96aa98", "changed_code": [{"header": "diff --git a/tests/e2e-core-common/src/test/java/org/glassfish/jersey/tests/e2e/common/message/internal/HeaderUtilsTest.java b/tests/e2e-core-common/src/test/java/org/glassfish/jersey/tests/e2e/common/message/internal/HeaderUtilsTest.java\nindex 3d46e32c1..f31c31aca 100644\n--- a/tests/e2e-core-common/src/test/java/org/glassfish/jersey/tests/e2e/common/message/internal/HeaderUtilsTest.java\n+++ b/tests/e2e-core-common/src/test/java/org/glassfish/jersey/tests/e2e/common/message/internal/HeaderUtilsTest.java\n", "chunk": "@@ -186,94 +183,32 @@ public class HeaderUtilsTest {\n     }\n \n     @Test\n-    public void testgetPreferedNewCookie(){\n+    public void testgetPreferredCookie(){\n \n-        Date earliestDate;\n-        Date latestDate;\n+        NewCookie one = new NewCookie(\"fred\", \"valuestring\", \"pathstring\", \"domainstring\",\n+                0, \"commentstring\", 100, null, false, false);\n+        NewCookie second = new NewCookie(\"fred\", \"valuestring\", \"pathstring\", \"domainstring\",\n+                0, \"commentstring\", 10, null, false, false);\n \n-        try {\n-            earliestDate = HttpDateFormat.readDate(\"Fri, 1 Jan 2020 00:00:00 GMT\");\n-            latestDate =  HttpDateFormat.readDate(\"Fri, 1 Jan 2020 01:00:00 GMT\");\n-        } catch (ParseException e) {\n-            e.printStackTrace();\n-            earliestDate = new Date(10);\n-            latestDate =  new Date(100);\n-        }\n+        assertEquals(one, HeaderUtils.getPreferredCookie(one, second));\n+\n+        NewCookie longPathNewCookie = new NewCookie(\"fred\", \"valuestring\", \"longestpathstring\",\n+                \"domainstring\", 0, \"commentstring\", 0, null,\n+                false, false);\n+        NewCookie shortPathNewCookie = new NewCookie(\"fred\", \"valuestring\", \"shortestpath\",\n+                \"domainstring\", 0, \"commentstring\", 0, null,\n+                false, false);\n+\n+        assertEquals(longPathNewCookie, HeaderUtils.getPreferredCookie(longPathNewCookie, shortPathNewCookie));\n+\n+        NewCookie identicalNewCookie = new NewCookie(\"fred\", \"valuestring\", \"pathstring\",\n+                \"domainstring\", 0, \"commentstring\", 0, null,\n+                false, false);\n+        NewCookie identicalNewCookie1 = new NewCookie(\"fred\", \"valuestring\", \"pathstring\",\n+                \"domainstring\", 0, \"commentstring\", 0, null,\n+                false, false);\n \n-        NewCookie one = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"pathstring\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                latestDate,\n-                false,\n-                false);\n-        NewCookie second = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"pathstring\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                earliestDate,\n-                false,\n-                false);\n-\n-        assertEquals(one, HeaderUtils.getPreferedNewCookie(one, second));\n-\n-        NewCookie longPathNewCookie = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"longestpathstring\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                latestDate,\n-                false,\n-                false);\n-        NewCookie shortPathNewCookie = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"shortestpath\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                latestDate,\n-                false,\n-                false);\n-\n-        assertEquals(longPathNewCookie, HeaderUtils.getPreferedNewCookie(longPathNewCookie, shortPathNewCookie));\n-\n-        NewCookie identicalNewCookie = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"pathstring\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                latestDate,\n-                false,\n-                false);\n-        NewCookie identicalNewCookie1 = new NewCookie(\n-                \"fred\",\n-                \"valuestring\",\n-                \"pathstring\",\n-                \"domainstring\",\n-                0,\n-                \"commentstring\",\n-                0,\n-                latestDate,\n-                false,\n-                false);\n-\n-        assertEquals(identicalNewCookie, HeaderUtils.getPreferedNewCookie(identicalNewCookie, identicalNewCookie1));\n+        assertEquals(identicalNewCookie, HeaderUtils.getPreferredCookie(identicalNewCookie, identicalNewCookie1));\n \n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NDg5Ng==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4390#discussion_r378694896", "body": "expiry date can be NULL. Isn't it better to use maxAge value?", "bodyText": "expiry date can be NULL. Isn't it better to use maxAge value?", "bodyHTML": "<p dir=\"auto\">expiry date can be NULL. Isn't it better to use maxAge value?</p>", "author": "senivam", "createdAt": "2020-02-13T07:43:35Z", "path": "core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java", "diffHunk": "@@ -298,6 +299,24 @@ public static void checkHeaderChanges(final Map<String, String> headersSnapshot,\n         }\n     }\n \n+    /**\n+     * Compare two NewCookies having the same name. See documentation RFC.\n+     *\n+     * @param one    NewCookie to be compared.\n+     * @param second NewCookie to be compared.\n+     * @return the prefered NewCookie according to rules :\n+     *              - the latest expiration date.\n+     *              - if same expiration date, the longest path.\n+     */\n+    public static NewCookie getPreferedNewCookie(NewCookie one, NewCookie second) {\n+\n+        if (!one.getExpiry().equals(second.getExpiry())){", "originalCommit": "392a1c0ecc84f9f619b1f18211b0e45f5353a073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3NDUwNA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4390#discussion_r378774504", "bodyText": "There is a difference between expiry and maxAge.\nIE does not support maxAge, so most of the servers set expiry rather than maxAge. It is possible to set one or the other.\nNewCookie is what comes from the server, and even though maxAge is recommended, expires seems to be more often. But it seems to be one or the other, so we should compare the later from both.\nBut yes, we should check for NULL, too.", "author": "jansupol", "createdAt": "2020-02-13T10:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MTcwMw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4390#discussion_r378791703", "bodyText": "Well ,regarding check of expiry VS max-age it's good to check them both :)\nRegarding setting one or another attribute in request - actually server shall put both. For now I've found that the only browser which does not support max-age attribute is IE.\nPer RFC 6265 max-age attribute has precedence over expiry attribute if both are present in request. In my opinion this shall be respected while choosing preferred cookie.", "author": "senivam", "createdAt": "2020-02-13T11:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NDg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f54fe96853ac168a12c5ca005da25b8bfb96aa98", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 2405ac5da..80fc44333 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -304,14 +304,14 @@ public final class HeaderUtils {\n      *\n      * @param one    NewCookie to be compared.\n      * @param second NewCookie to be compared.\n-     * @return the prefered NewCookie according to rules :\n-     *              - the latest expiration date.\n-     *              - if same expiration date, the longest path.\n+     * @return the preferred NewCookie according to rules :\n+     *              - the latest maxAge.\n+     *              - if same maxAge, the longest path.\n      */\n-    public static NewCookie getPreferedNewCookie(NewCookie one, NewCookie second) {\n+    public static NewCookie getPreferredCookie(NewCookie one, NewCookie second) {\n \n-        if (!one.getExpiry().equals(second.getExpiry())){\n-            return one.getExpiry().after(second.getExpiry()) ?  one : second;\n+        if (one.getMaxAge() != second.getMaxAge()){\n+            return one.getMaxAge() > second.getMaxAge() ?  one : second;\n         } else {\n             return one.getPath().length() > second.getPath().length() ?  one : second;\n         }\n", "next_change": {"commit": "a64354a1fa5fce19e3aaf612a7f5c7cb5744098a", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 80fc44333..77f269ff5 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -299,21 +300,41 @@ public final class HeaderUtils {\n         }\n     }\n \n+    /**\n+     * Compare two objects according to comparator\n+     *\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @param comparator criteria\n+     * @return the preferred object according to comparator\n+     */\n+    public static <T> T compareNullable(T first, T second, Comparator<T> comparator) {\n+        if (first == null) {\n+            return second;\n+        } else if (second == null) {\n+            return first;\n+        }\n+        return comparator.compare(first, second) <= 0 ? first : second;\n+    }\n+\n     /**\n      * Compare two NewCookies having the same name. See documentation RFC.\n      *\n-     * @param one    NewCookie to be compared.\n+     * @param first    NewCookie to be compared.\n      * @param second NewCookie to be compared.\n      * @return the preferred NewCookie according to rules :\n      *              - the latest maxAge.\n-     *              - if same maxAge, the longest path.\n+     *              - if equal, compare the expiry date\n+     *              - if equal, compare name length\n      */\n-    public static NewCookie getPreferredCookie(NewCookie one, NewCookie second) {\n+    public static NewCookie getPreferredCookie(NewCookie first, NewCookie second) {\n \n-        if (one.getMaxAge() != second.getMaxAge()){\n-            return one.getMaxAge() > second.getMaxAge() ?  one : second;\n+        if (first.getMaxAge() != second.getMaxAge()){\n+            return compareNullable(first, second, Comparator.comparing(NewCookie::getMaxAge));\n+        } else if (first.getExpiry() != null && second.getExpiry() != null && !first.getExpiry().equals(second.getExpiry())) {\n+            return compareNullable(first, second, Comparator.comparing(NewCookie::getExpiry));\n         } else {\n-            return one.getPath().length() > second.getPath().length() ?  one : second;\n+            return first.getPath().length() > second.getPath().length() ? first : second;\n         }\n     }\n \n", "next_change": {"commit": "a72ab1f637ad7a51866c7bd6dbe4108ba4db4571", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 77f269ff5..c8636ce45 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -329,10 +312,16 @@ public final class HeaderUtils {\n      */\n     public static NewCookie getPreferredCookie(NewCookie first, NewCookie second) {\n \n+        if (first == null) {\n+            return second;\n+        } else if (second == null) {\n+            return first;\n+        }\n+\n         if (first.getMaxAge() != second.getMaxAge()){\n-            return compareNullable(first, second, Comparator.comparing(NewCookie::getMaxAge));\n+            return Comparator.comparing(NewCookie::getMaxAge).compare(first, second) > 0 ? first : second;\n         } else if (first.getExpiry() != null && second.getExpiry() != null && !first.getExpiry().equals(second.getExpiry())) {\n-            return compareNullable(first, second, Comparator.comparing(NewCookie::getExpiry));\n+            return Comparator.comparing(NewCookie::getExpiry).compare(first, second) > 0 ? first : second;\n         } else {\n             return first.getPath().length() > second.getPath().length() ? first : second;\n         }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NTMxNA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4390#discussion_r378695314", "body": "Preferred ? may be rename the whole method to getPreferredCookie? ", "bodyText": "Preferred ? may be rename the whole method to getPreferredCookie?", "bodyHTML": "<p dir=\"auto\">Preferred ? may be rename the whole method to getPreferredCookie?</p>", "author": "senivam", "createdAt": "2020-02-13T07:44:50Z", "path": "core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java", "diffHunk": "@@ -298,6 +299,24 @@ public static void checkHeaderChanges(final Map<String, String> headersSnapshot,\n         }\n     }\n \n+    /**\n+     * Compare two NewCookies having the same name. See documentation RFC.\n+     *\n+     * @param one    NewCookie to be compared.\n+     * @param second NewCookie to be compared.\n+     * @return the prefered NewCookie according to rules :\n+     *              - the latest expiration date.\n+     *              - if same expiration date, the longest path.\n+     */\n+    public static NewCookie getPreferedNewCookie(NewCookie one, NewCookie second) {", "originalCommit": "392a1c0ecc84f9f619b1f18211b0e45f5353a073", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f54fe96853ac168a12c5ca005da25b8bfb96aa98", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 2405ac5da..80fc44333 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -304,14 +304,14 @@ public final class HeaderUtils {\n      *\n      * @param one    NewCookie to be compared.\n      * @param second NewCookie to be compared.\n-     * @return the prefered NewCookie according to rules :\n-     *              - the latest expiration date.\n-     *              - if same expiration date, the longest path.\n+     * @return the preferred NewCookie according to rules :\n+     *              - the latest maxAge.\n+     *              - if same maxAge, the longest path.\n      */\n-    public static NewCookie getPreferedNewCookie(NewCookie one, NewCookie second) {\n+    public static NewCookie getPreferredCookie(NewCookie one, NewCookie second) {\n \n-        if (!one.getExpiry().equals(second.getExpiry())){\n-            return one.getExpiry().after(second.getExpiry()) ?  one : second;\n+        if (one.getMaxAge() != second.getMaxAge()){\n+            return one.getMaxAge() > second.getMaxAge() ?  one : second;\n         } else {\n             return one.getPath().length() > second.getPath().length() ?  one : second;\n         }\n", "next_change": {"commit": "a64354a1fa5fce19e3aaf612a7f5c7cb5744098a", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 80fc44333..77f269ff5 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -299,21 +300,41 @@ public final class HeaderUtils {\n         }\n     }\n \n+    /**\n+     * Compare two objects according to comparator\n+     *\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @param comparator criteria\n+     * @return the preferred object according to comparator\n+     */\n+    public static <T> T compareNullable(T first, T second, Comparator<T> comparator) {\n+        if (first == null) {\n+            return second;\n+        } else if (second == null) {\n+            return first;\n+        }\n+        return comparator.compare(first, second) <= 0 ? first : second;\n+    }\n+\n     /**\n      * Compare two NewCookies having the same name. See documentation RFC.\n      *\n-     * @param one    NewCookie to be compared.\n+     * @param first    NewCookie to be compared.\n      * @param second NewCookie to be compared.\n      * @return the preferred NewCookie according to rules :\n      *              - the latest maxAge.\n-     *              - if same maxAge, the longest path.\n+     *              - if equal, compare the expiry date\n+     *              - if equal, compare name length\n      */\n-    public static NewCookie getPreferredCookie(NewCookie one, NewCookie second) {\n+    public static NewCookie getPreferredCookie(NewCookie first, NewCookie second) {\n \n-        if (one.getMaxAge() != second.getMaxAge()){\n-            return one.getMaxAge() > second.getMaxAge() ?  one : second;\n+        if (first.getMaxAge() != second.getMaxAge()){\n+            return compareNullable(first, second, Comparator.comparing(NewCookie::getMaxAge));\n+        } else if (first.getExpiry() != null && second.getExpiry() != null && !first.getExpiry().equals(second.getExpiry())) {\n+            return compareNullable(first, second, Comparator.comparing(NewCookie::getExpiry));\n         } else {\n-            return one.getPath().length() > second.getPath().length() ?  one : second;\n+            return first.getPath().length() > second.getPath().length() ? first : second;\n         }\n     }\n \n", "next_change": {"commit": "a72ab1f637ad7a51866c7bd6dbe4108ba4db4571", "changed_code": [{"header": "diff --git a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\nindex 77f269ff5..c8636ce45 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/message/internal/HeaderUtils.java\n", "chunk": "@@ -329,10 +312,16 @@ public final class HeaderUtils {\n      */\n     public static NewCookie getPreferredCookie(NewCookie first, NewCookie second) {\n \n+        if (first == null) {\n+            return second;\n+        } else if (second == null) {\n+            return first;\n+        }\n+\n         if (first.getMaxAge() != second.getMaxAge()){\n-            return compareNullable(first, second, Comparator.comparing(NewCookie::getMaxAge));\n+            return Comparator.comparing(NewCookie::getMaxAge).compare(first, second) > 0 ? first : second;\n         } else if (first.getExpiry() != null && second.getExpiry() != null && !first.getExpiry().equals(second.getExpiry())) {\n-            return compareNullable(first, second, Comparator.comparing(NewCookie::getExpiry));\n+            return Comparator.comparing(NewCookie::getExpiry).compare(first, second) > 0 ? first : second;\n         } else {\n             return first.getPath().length() > second.getPath().length() ? first : second;\n         }\n", "next_change": null}]}}]}}]}}, {"oid": "f54fe96853ac168a12c5ca005da25b8bfb96aa98", "url": "https://github.com/eclipse-ee4j/jersey/commit/f54fe96853ac168a12c5ca005da25b8bfb96aa98", "message": "Fix #3433 - Use maxAge instead of Date + method renaming\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-13T09:58:46Z", "type": "commit"}, {"oid": "a64354a1fa5fce19e3aaf612a7f5c7cb5744098a", "url": "https://github.com/eclipse-ee4j/jersey/commit/a64354a1fa5fce19e3aaf612a7f5c7cb5744098a", "message": "Fix #3433 - Use calendar for test + comparator for cookie\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-14T08:44:35Z", "type": "commit"}, {"oid": "7693649863afee8a1e6824f9e8a45493d2e97cc1", "url": "https://github.com/eclipse-ee4j/jersey/commit/7693649863afee8a1e6824f9e8a45493d2e97cc1", "message": "Fix #3433 - fix compareNullable return value\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-14T10:06:23Z", "type": "commit"}, {"oid": "a72ab1f637ad7a51866c7bd6dbe4108ba4db4571", "url": "https://github.com/eclipse-ee4j/jersey/commit/a72ab1f637ad7a51866c7bd6dbe4108ba4db4571", "message": "Fix #3433 - remove compareNullable method + fix calendar test\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-02-17T15:07:20Z", "type": "commit"}]}