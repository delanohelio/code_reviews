{"pr_number": 3021, "pr_title": "Add image compatibility checks", "pr_author": "rnorth", "pr_createdAt": "2020-07-26T11:06:56Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/3021", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r460513127", "body": "Might reinstate, but Lombok seemed to be choking and was getting in the way.", "bodyText": "Might reinstate, but Lombok seemed to be choking and was getting in the way.", "bodyHTML": "<p dir=\"auto\">Might reinstate, but Lombok seemed to be choking and was getting in the way.</p>", "author": "rnorth", "createdAt": "2020-07-26T11:08:51Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "originalCommit": "eec4ace8cc5965986ed705fc032288eef6243c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNzQ2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473727462", "bodyText": "Just curious: what was(is ?) the problem?", "author": "bsideup", "createdAt": "2020-08-20T07:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNjUzMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477126532", "bodyText": "Not sure I remember the specifics, but I think it was the IDE not seeing the generated constructor (doubtless plugin related)", "author": "rnorth", "createdAt": "2020-08-26T08:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNzIzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477127236", "bodyText": "ah, okay, seems to be https://youtrack.jetbrains.com/issue/IDEA-248146 then (fixed in the latest IDEA (rc?))", "author": "bsideup", "createdAt": "2020-08-26T08:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5ODEzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r478198136", "bodyText": "Yep, it's working now, and I've restored @AllArgsConstructor.", "author": "rnorth", "createdAt": "2020-08-27T06:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 94b42eea..cd4c7a36 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -2,7 +2,6 @@ package org.testcontainers.utility;\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n", "next_change": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex cd4c7a36..bb9cdf2e 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -2,12 +2,11 @@ package org.testcontainers.utility;\n \n \n import com.google.common.net.HostAndPort;\n+import java.util.regex.Pattern;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n-import java.util.regex.Pattern;\n-\n @EqualsAndHashCode(exclude = \"rawName\")\n public final class DockerImageName {\n \n", "next_change": {"commit": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex bb9cdf2e..0ac00dee 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -3,11 +3,15 @@ package org.testcontainers.utility;\n \n import com.google.common.net.HostAndPort;\n import java.util.regex.Pattern;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n import lombok.EqualsAndHashCode;\n+import lombok.With;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n public final class DockerImageName {\n \n     /* Regex patterns used for validation */\n", "next_change": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 0ac00dee..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -10,7 +9,9 @@ import lombok.With;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n-@EqualsAndHashCode(exclude = \"rawName\")\n+import java.util.regex.Pattern;\n+\n+@EqualsAndHashCode(exclude = { \"rawName\", \"compatibleSubstituteFor\" })\n @AllArgsConstructor(access = AccessLevel.PRIVATE)\n public final class DockerImageName {\n \n", "next_change": {"commit": "a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 75065827..af8e5300 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -8,6 +8,8 @@ import lombok.EqualsAndHashCode;\n import lombok.With;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n+import org.testcontainers.utility.Versioning.Sha256Versioning;\n+import org.testcontainers.utility.Versioning.TagVersioning;\n \n import java.util.regex.Pattern;\n \n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 94b42eea..cd4c7a36 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -14,14 +13,13 @@ public final class DockerImageName {\n \n     /* Regex patterns used for validation */\n     private static final String ALPHA_NUMERIC = \"[a-z0-9]+\";\n-    private static final String SEPARATOR = \"([.]{1}|_{1,2}|-+)\";\n+    private static final String SEPARATOR = \"([.]|_{1,2}|-+)\";\n     private static final String REPO_NAME_PART = ALPHA_NUMERIC + \"(\" + SEPARATOR + ALPHA_NUMERIC + \")*\";\n     private static final Pattern REPO_NAME = Pattern.compile(REPO_NAME_PART + \"(/\" + REPO_NAME_PART + \")*\");\n \n     private final String rawName;\n     private final String registry;\n     private final String repo;\n-    @Nullable\n     private final Versioning versioning;\n     @Nullable\n     private final DockerImageName compatibleSubstituteFor;\n", "next_change": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex cd4c7a36..bb9cdf2e 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -20,6 +19,7 @@ public final class DockerImageName {\n     private final String rawName;\n     private final String registry;\n     private final String repo;\n+    @Nullable\n     private final Versioning versioning;\n     @Nullable\n     private final DockerImageName compatibleSubstituteFor;\n", "next_change": {"commit": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex bb9cdf2e..0ac00dee 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -19,9 +23,9 @@ public final class DockerImageName {\n     private final String rawName;\n     private final String registry;\n     private final String repo;\n-    @Nullable\n+    @Nullable @With(AccessLevel.PRIVATE)\n     private final Versioning versioning;\n-    @Nullable\n+    @Nullable @With(AccessLevel.PRIVATE)\n     private final DockerImageName compatibleSubstituteFor;\n \n     /**\n", "next_change": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 0ac00dee..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -23,7 +24,7 @@ public final class DockerImageName {\n     private final String rawName;\n     private final String registry;\n     private final String repo;\n-    @Nullable @With(AccessLevel.PRIVATE)\n+    @NotNull @With(AccessLevel.PRIVATE)\n     private final Versioning versioning;\n     @Nullable @With(AccessLevel.PRIVATE)\n     private final DockerImageName compatibleSubstituteFor;\n", "next_change": null}]}}]}}]}}]}}, {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed.", "committedDate": "2020-08-14T14:37:25Z", "type": "commit"}, {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed.", "committedDate": "2020-08-14T14:37:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470676067", "body": "A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (@bsideup)", "bodyText": "A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (@bsideup)", "bodyHTML": "<p dir=\"auto\">A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bsideup/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bsideup\">@bsideup</a>)</p>", "author": "rnorth", "createdAt": "2020-08-14T14:55:24Z", "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "originalCommit": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNTA2Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470825063", "bodyText": "I think I missed the Slack discussion, but just being pragmatic and make the constants packacke-private?", "author": "kiview", "createdAt": "2020-08-14T19:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDk2MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471024960", "bodyText": "Yeah, that's probably going to be the answer. This isn't something to worry about too much for now, anyway.", "author": "rnorth", "createdAt": "2020-08-15T19:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf", "url": "https://github.com/testcontainers/testcontainers-java/commit/49c2360fd8bd145fdb5e684467b2926171a539bf", "message": "Revert default image name selection in Kafka/Pulsar containers", "committedDate": "2020-08-14T15:06:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470810148", "body": "Do we really un-deprecate the String constructors?", "bodyText": "Do we really un-deprecate the String constructors?", "bodyHTML": "<p dir=\"auto\">Do we really un-deprecate the String constructors?</p>", "author": "kiview", "createdAt": "2020-08-14T18:51:14Z", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMTI3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471001274", "bodyText": "I missed this - will look for others.", "author": "rnorth", "createdAt": "2020-08-15T15:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811376", "body": "If we would return `DockerImageName`, we could use this method in `super` constructor arguments.", "bodyText": "If we would return DockerImageName, we could use this method in super constructor arguments.", "bodyHTML": "<p dir=\"auto\">If we would return <code>DockerImageName</code>, we could use this method in <code>super</code> constructor arguments.</p>", "author": "kiview", "createdAt": "2020-08-14T18:53:50Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003767", "bodyText": "I think I'd push back against this - it feels a bit strange to have a value be passed through a method that does assertion. I think I like the assertion being a distinct line in each constructor (after the call to super), as it feels more visible.", "author": "rnorth", "createdAt": "2020-08-15T15:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1ODc0MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473858740", "bodyText": "The JDK likes to object this argument of feeling strange \ud83d\ude42\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-\nBut this is not a hill I need to die on. I like it in super constructor though, because this means it gets evaluated before the super constructor is called.", "author": "kiview", "createdAt": "2020-08-20T10:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex cd4c7a36..bb9cdf2e 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -237,25 +237,43 @@ public final class DockerImageName {\n     }\n \n     /**\n-     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n-     * returning false if a mismatch is detected.\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception\n+     * rather than returning false if a mismatch is detected.\n      *\n-     * @param other the other image that we are trying to check compatibility with\n-     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     * @param anyOthers the other image(s) that we are trying to check compatibility with. If more\n+     *                  than one is provided, this method will check compatibility with at least one\n+     *                  of them.\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)}\n+     *                               returns false\n      */\n-    public void assertCompatibleWith(DockerImageName other) {\n-        if (!this.isCompatibleWith(other)) {\n-            throw new IllegalStateException(\n-                String.format(\n-                    \"Failed to verify that image '%s' is a compatible substitute for '%s'. This generally means that \" +\n-                        \"you are trying to use an image that Testcontainers has not been designed to use. If this is \" +\n-                        \"deliberate, and if you are confident that the image is compatible, you should declare \" +\n-                        \"compatibility in code using the `asCompatibleSubstituteFor` method. For example:\\n\" +\n-                        \"   DockerImageName myImage = DockerImageName.parse(\\\"%s\\\").asCompatibleSubstituteFor(\\\"%s\\\");\\n\" +\n-                        \"and then use `myImage` instead.\",\n-                    this.rawName, other.rawName, this.rawName, other.rawName\n-                )\n-            );\n+    public void assertCompatibleWith(DockerImageName... anyOthers) {\n+        if (anyOthers.length == 0) {\n+            throw new IllegalArgumentException(\"anyOthers parameter must be non-empty\");\n         }\n+\n+        for (DockerImageName anyOther : anyOthers) {\n+            if (this.isCompatibleWith(anyOther)) {\n+                return;\n+            }\n+        }\n+\n+        final DockerImageName exampleOther = anyOthers[0];\n+\n+        throw new IllegalStateException(\n+            String.format(\n+                \"Failed to verify that image '%s' is a compatible substitute for '%s'. This generally means that \"\n+                    +\n+                    \"you are trying to use an image that Testcontainers has not been designed to use. If this is \"\n+                    +\n+                    \"deliberate, and if you are confident that the image is compatible, you should declare \"\n+                    +\n+                    \"compatibility in code using the `asCompatibleSubstituteFor` method. For example:\\n\"\n+                    +\n+                    \"   DockerImageName myImage = DockerImageName.parse(\\\"%s\\\").asCompatibleSubstituteFor(\\\"%s\\\");\\n\"\n+                    +\n+                    \"and then use `myImage` instead.\",\n+                this.rawName, exampleOther.rawName, this.rawName, exampleOther.rawName\n+            )\n+        );\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811773", "body": "If `assertCompatibleWith` would return `DockerImageName`, we coould use it as argument for the `super` constructor.", "bodyText": "If assertCompatibleWith would return DockerImageName, we coould use it as argument for the super constructor.", "bodyHTML": "<p dir=\"auto\">If <code>assertCompatibleWith</code> would return <code>DockerImageName</code>, we coould use it as argument for the <code>super</code> constructor.</p>", "author": "kiview", "createdAt": "2020-08-14T18:54:43Z", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated\n     public MongoDBContainer(@NonNull final String dockerImageName) {\n         this(DockerImageName.parse(dockerImageName));\n     }\n \n     public MongoDBContainer(final DockerImageName dockerImageName) {\n         super(dockerImageName);", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003780", "bodyText": "As above.", "author": "rnorth", "createdAt": "2020-08-15T15:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470813576", "body": "By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.", "bodyText": "By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.", "bodyHTML": "<p dir=\"auto\">By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.</p>", "author": "kiview", "createdAt": "2020-08-14T18:58:56Z", "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "diffHunk": "@@ -40,21 +43,19 @@\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n-    @Deprecated\n     public CassandraContainer() {\n-        this(\"cassandra:3.11.2\");\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzkwMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003901", "bodyText": "We were missing the deprecated annotation on CassandraContainer's no-arg constructor \ud83e\udd26\nThe logic should be:\n\nNo-arg constructors: always deprecated\nString, image name constructors: not deprecated\nString, version constructors: always deprecated", "author": "rnorth", "createdAt": "2020-08-15T15:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "changed_code": [{"header": "diff --git a/modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java b/modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java\nindex ded2a117..597b1c9b 100644\n--- a/modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java\n+++ b/modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java\n", "chunk": "@@ -43,6 +43,7 @@ public class CassandraContainer<SELF extends CassandraContainer<SELF>> extends G\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n+    @Deprecated\n     public CassandraContainer() {\n         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470819792", "body": "```suggestion\n        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n```\n\nIs this constructor missing a test therefore?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n          \n      \n    \n    \n  \n\nIs this constructor missing a test therefore?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span>(<span class=\"pl-smi\">TestcontainersConfiguration</span><span class=\"pl-k\">.</span>getInstance()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">getPulsarDockerImageName</span>()<span class=\"pl-k\">.</span>withTag(confluentPlatformVersion));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span>(<span class=\"pl-smi\">TestcontainersConfiguration</span><span class=\"pl-k\">.</span>getInstance()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">getKafkaDockerImageName</span>()<span class=\"pl-k\">.</span>withTag(confluentPlatformVersion));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Is this constructor missing a test therefore?</p>", "author": "kiview", "createdAt": "2020-08-14T19:12:58Z", "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "diffHunk": "@@ -35,20 +38,22 @@\n      */\n     @Deprecated\n     public KafkaContainer() {\n-        this(\"5.2.1\");\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link KafkaContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getKafkaImage() + \":\" + confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDAwNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004004", "bodyText": "Good spot - silly c&p error \ud83d\ude2c\nYes, this is missing test coverage. Will add.", "author": "rnorth", "createdAt": "2020-08-15T15:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c5c1e74adb89ff04c21aa66351c4c160a912b21b", "changed_code": [{"header": "diff --git a/modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java b/modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java\nindex c5d8b5b1..4086cd4e 100644\n--- a/modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java\n+++ b/modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java\n", "chunk": "@@ -46,7 +46,7 @@ public class KafkaContainer extends GenericContainer<KafkaContainer> {\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n     }\n \n     public KafkaContainer(final DockerImageName dockerImageName) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827758", "body": "I think we can't really remove this logic completely. Adding the `-enterprise` suffix to custom image is a bit weird, isn't it?", "bodyText": "I think we can't really remove this logic completely. Adding the -enterprise suffix to custom image is a bit weird, isn't it?", "bodyHTML": "<p dir=\"auto\">I think we can't really remove this logic completely. Adding the <code>-enterprise</code> suffix to custom image is a bit weird, isn't it?</p>", "author": "kiview", "createdAt": "2020-08-14T19:31:40Z", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5ODE2OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r492098168", "bodyText": "Yeah, I second the concern.\nIMO we should keep it as it was (override the image when withEnterpriseEdition() is called, and figure out the better strategy later", "author": "bsideup", "createdAt": "2020-09-21T14:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzQwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r493003408", "bodyText": "OK \ud83d\udc4d", "author": "rnorth", "createdAt": "2020-09-22T20:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMDIxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r494130212", "bodyText": "Just pushed some commits to restore the previous behaviour. I think in the future we should indeed rethink how this works - if we're asking people to specify an image in the constructor it's silly to have the image being overriden here.", "author": "rnorth", "createdAt": "2020-09-24T08:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "022c49338c13eeb3ba690264f708d8a1c681a50d", "changed_code": [{"header": "diff --git a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\nindex 133d485b..f05984c0 100644\n--- a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n+++ b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n", "chunk": "@@ -148,7 +146,7 @@ public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContaine\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-        setDockerImageName(getDockerImageName() + \"-enterprise\");\n+        setDockerImageName(DEFAULT_IMAGE_NAME.withTag(ENTERPRISE_TAG).asCanonicalNameString());\n         LicenseAcceptance.assertLicenseAccepted(getDockerImageName());\n \n         addEnv(\"NEO4J_ACCEPT_LICENSE_AGREEMENT\", \"yes\");\n", "next_change": {"commit": "6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "changed_code": [{"header": "diff --git a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\nindex f05984c0..e93a8403 100644\n--- a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n+++ b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n", "chunk": "@@ -146,6 +151,12 @@ public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContaine\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n+        if (!standardImage) {\n+            throw new IllegalStateException(\n+                String.format(\"Cannot use enterprise version with alternative image %s.\",\n+                    getDockerImageName()));\n+        }\n+\n         setDockerImageName(DEFAULT_IMAGE_NAME.withTag(ENTERPRISE_TAG).asCanonicalNameString());\n         LicenseAcceptance.assertLicenseAccepted(getDockerImageName());\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzk5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827998", "body": "In the current version of the code, `standardImage` is never read. But we should think what to do with `withEnterpriseEdition()` method.", "bodyText": "In the current version of the code, standardImage is never read. But we should think what to do with withEnterpriseEdition() method.", "bodyHTML": "<p dir=\"auto\">In the current version of the code, <code>standardImage</code> is never read. But we should think what to do with <code>withEnterpriseEdition()</code> method.</p>", "author": "kiview", "createdAt": "2020-08-14T19:32:14Z", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -59,31 +57,36 @@\n \n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n-    private boolean standardImage = false;\n+    private boolean standardImage = true;", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "022c49338c13eeb3ba690264f708d8a1c681a50d", "changed_code": [{"header": "diff --git a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\nindex 133d485b..f05984c0 100644\n--- a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n+++ b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n", "chunk": "@@ -57,8 +57,6 @@ public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContaine\n \n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n-    private boolean standardImage = true;\n-\n     /**\n      * Creates a Neo4jContainer using the official Neo4j docker image.\n      * @deprecated use {@link Neo4jContainer(DockerImageName)} instead\n", "next_change": {"commit": "6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "changed_code": [{"header": "diff --git a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\nindex f05984c0..e93a8403 100644\n--- a/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n+++ b/modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java\n", "chunk": "@@ -55,6 +55,8 @@ public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContaine\n \n     private static final String AUTH_FORMAT = \"neo4j/%s\";\n \n+    private final boolean standardImage;\n+\n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n     /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTM3OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470829378", "body": "This class was not really touched I suppose?", "bodyText": "This class was not really touched I suppose?", "bodyHTML": "<p dir=\"auto\">This class was not really touched I suppose?</p>", "author": "kiview", "createdAt": "2020-08-14T19:35:42Z", "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -41,10 +41,6 @@ public OracleContainer() {\n         this(resolveImageName());\n     }\n \n-    /**\n-     * @deprecated use {@link OracleContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjQ2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470832467", "body": "Shouldn't we move this code to after getting the `capabilities`?", "bodyText": "Shouldn't we move this code to after getting the capabilities?", "bodyHTML": "<p dir=\"auto\">Shouldn't we move this code to after getting the <code>capabilities</code>?</p>", "author": "kiview", "createdAt": "2020-08-14T19:43:07Z", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -182,8 +180,12 @@ protected void configure() {\n                     .withVncPort(VNC_PORT);\n         }\n \n-        if (!customImageNameIsSet) {\n-            super.setDockerImageName(getImageForCapabilities(capabilities, seleniumVersion));\n+        DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java b/modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java\nindex c83715e6..d60d9191 100644\n--- a/modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java\n+++ b/modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java\n", "chunk": "@@ -180,11 +185,11 @@ public class BrowserWebDriverContainer<SELF extends BrowserWebDriverContainer<SE\n                     .withVncPort(VNC_PORT);\n         }\n \n-        DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);\n         if (customImageName != null) {\n-            customImageName.assertCompatibleWith(standardImageForCapabilities.withTag(\"latest\"));\n+            customImageName.assertCompatibleWith(COMPATIBLE_IMAGES);\n             super.setDockerImageName(customImageName.asCanonicalNameString());\n         } else {\n+            DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);\n             super.setDockerImageName(standardImageForCapabilities.asCanonicalNameString());\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzOTE4NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470839185", "body": "Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.", "bodyText": "Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.", "bodyHTML": "<p dir=\"auto\">Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.</p>", "author": "kiview", "createdAt": "2020-08-14T19:59:27Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -146,11 +162,12 @@ public String toString() {\n      * @throws IllegalArgumentException if not valid\n      */\n     public void assertValid() {\n+        //noinspection UnstableApiUsage", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5be1a79cdab4912909437b5a35fc8e1abca58511", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex cd4c7a36..5a45c3f0 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -163,7 +163,7 @@ public final class DockerImageName {\n      */\n     public void assertValid() {\n         //noinspection UnstableApiUsage\n-        HostAndPort.fromString(registry);\n+        HostAndPort.fromString(registry); // return value ignored - this throws if registry is not a valid host:port string\n         if (!REPO_NAME.matcher(repo).matches()) {\n             throw new IllegalArgumentException(repo + \" is not a valid Docker image name (in \" + rawName + \")\");\n         }\n", "next_change": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -167,7 +159,7 @@ public final class DockerImageName {\n         if (!REPO_NAME.matcher(repo).matches()) {\n             throw new IllegalArgumentException(repo + \" is not a valid Docker image name (in \" + rawName + \")\");\n         }\n-        if (versioning != null && !versioning.isValid()) {\n+        if (!versioning.isValid()) {\n             throw new IllegalArgumentException(versioning + \" is not a valid image versioning identifier (in \" + rawName + \")\");\n         }\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470842267", "body": "```suggestion\n            throw new IllegalArgumentException(\n```\n\nWDYT?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\n          \n          \n            \n                        throw new IllegalArgumentException(\n          \n      \n    \n    \n  \n\nWDYT?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">IllegalStateException</span>(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">IllegalArgumentException</span>(</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">WDYT?</p>", "author": "kiview", "createdAt": "2020-08-14T20:07:16Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {\n+        if (!this.isCompatibleWith(other)) {\n+            throw new IllegalStateException(", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTczNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473779736", "bodyText": "Since it is assertCompatibleWith, I think IllegalArgumentException isn't fitting here, since the whole point is to assert the argument", "author": "bsideup", "createdAt": "2020-08-20T08:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex cd4c7a36..bb9cdf2e 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -237,25 +237,43 @@ public final class DockerImageName {\n     }\n \n     /**\n-     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n-     * returning false if a mismatch is detected.\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception\n+     * rather than returning false if a mismatch is detected.\n      *\n-     * @param other the other image that we are trying to check compatibility with\n-     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     * @param anyOthers the other image(s) that we are trying to check compatibility with. If more\n+     *                  than one is provided, this method will check compatibility with at least one\n+     *                  of them.\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)}\n+     *                               returns false\n      */\n-    public void assertCompatibleWith(DockerImageName other) {\n-        if (!this.isCompatibleWith(other)) {\n-            throw new IllegalStateException(\n-                String.format(\n-                    \"Failed to verify that image '%s' is a compatible substitute for '%s'. This generally means that \" +\n-                        \"you are trying to use an image that Testcontainers has not been designed to use. If this is \" +\n-                        \"deliberate, and if you are confident that the image is compatible, you should declare \" +\n-                        \"compatibility in code using the `asCompatibleSubstituteFor` method. For example:\\n\" +\n-                        \"   DockerImageName myImage = DockerImageName.parse(\\\"%s\\\").asCompatibleSubstituteFor(\\\"%s\\\");\\n\" +\n-                        \"and then use `myImage` instead.\",\n-                    this.rawName, other.rawName, this.rawName, other.rawName\n-                )\n-            );\n+    public void assertCompatibleWith(DockerImageName... anyOthers) {\n+        if (anyOthers.length == 0) {\n+            throw new IllegalArgumentException(\"anyOthers parameter must be non-empty\");\n         }\n+\n+        for (DockerImageName anyOther : anyOthers) {\n+            if (this.isCompatibleWith(anyOther)) {\n+                return;\n+            }\n+        }\n+\n+        final DockerImageName exampleOther = anyOthers[0];\n+\n+        throw new IllegalStateException(\n+            String.format(\n+                \"Failed to verify that image '%s' is a compatible substitute for '%s'. This generally means that \"\n+                    +\n+                    \"you are trying to use an image that Testcontainers has not been designed to use. If this is \"\n+                    +\n+                    \"deliberate, and if you are confident that the image is compatible, you should declare \"\n+                    +\n+                    \"compatibility in code using the `asCompatibleSubstituteFor` method. For example:\\n\"\n+                    +\n+                    \"   DockerImageName myImage = DockerImageName.parse(\\\"%s\\\").asCompatibleSubstituteFor(\\\"%s\\\");\\n\"\n+                    +\n+                    \"and then use `myImage` instead.\",\n+                this.rawName, exampleOther.rawName, this.rawName, exampleOther.rawName\n+            )\n+        );\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470844172", "body": "`@Value` instead of `@Data`? Or `@EqualsAndHashcode`? Or we don't use lombok in the first plance, since we already define `toString()` and the constructor.", "bodyText": "@Value instead of @Data? Or @EqualsAndHashcode? Or we don't use lombok in the first plance, since we already define toString() and the constructor.", "bodyHTML": "<p dir=\"auto\"><code>@Value</code> instead of <code>@Data</code>? Or <code>@EqualsAndHashcode</code>? Or we don't use lombok in the first plance, since we already define <code>toString()</code> and the constructor.</p>", "author": "kiview", "createdAt": "2020-08-14T20:11:53Z", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @Data", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDU4NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004584", "bodyText": "@EqualsAndHashCode would do the trick - good suggestion.", "author": "rnorth", "createdAt": "2020-08-15T15:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7d82db9611b4f590e9ec58b921e6469972656864", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/Versioning.java b/core/src/main/java/org/testcontainers/utility/Versioning.java\nindex cfa63d13..aba0bf90 100644\n--- a/core/src/main/java/org/testcontainers/utility/Versioning.java\n+++ b/core/src/main/java/org/testcontainers/utility/Versioning.java\n", "chunk": "@@ -10,7 +12,7 @@ interface Versioning {\n \n     String getSeparator();\n \n-    @Data\n+    @EqualsAndHashCode\n     class TagVersioning implements Versioning {\n         public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n         private final String tag;\n", "next_change": {"commit": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/Versioning.java b/core/src/main/java/org/testcontainers/utility/Versioning.java\nindex aba0bf90..6639f8b2 100644\n--- a/core/src/main/java/org/testcontainers/utility/Versioning.java\n+++ b/core/src/main/java/org/testcontainers/utility/Versioning.java\n", "chunk": "@@ -15,6 +13,7 @@ interface Versioning {\n     @EqualsAndHashCode\n     class TagVersioning implements Versioning {\n         public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");\n         private final String tag;\n \n         TagVersioning(String tag) {\n", "next_change": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/Versioning.java b/core/src/main/java/org/testcontainers/utility/Versioning.java\nindex 6639f8b2..8944b3f0 100644\n--- a/core/src/main/java/org/testcontainers/utility/Versioning.java\n+++ b/core/src/main/java/org/testcontainers/utility/Versioning.java\n", "chunk": "@@ -1,19 +1,51 @@\n package org.testcontainers.utility;\n \n+import lombok.AccessLevel;\n import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n \n /**\n  * Represents mechanisms for versioning docker images.\n  */\n interface Versioning {\n+    AnyVersion ANY = new AnyVersion();\n+\n     boolean isValid();\n \n     String getSeparator();\n \n+    @NoArgsConstructor(access = AccessLevel.PRIVATE)\n+    class AnyVersion implements Versioning {\n+\n+        @Override\n+        public boolean isValid() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \"\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"\";\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            return obj instanceof Versioning;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return super.hashCode();\n+        }\n+    }\n+\n     @EqualsAndHashCode\n     class TagVersioning implements Versioning {\n         public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n-        static final TagVersioning LATEST = new TagVersioning(\"latest\");\n         private final String tag;\n \n         TagVersioning(String tag) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470845326", "body": "```suggestion\n        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n```\nSince `latest` is default?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n          \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n          \n      \n    \n    \n  \n\nSince latest is default?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertTrue(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo:4.5.6 ~= foo:latest<span class=\"pl-pds\">\"</span></span>, subject<span class=\"pl-k\">.</span>isCompatibleWith(<span class=\"pl-smi\">DockerImageName</span><span class=\"pl-k\">.</span>parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"x x-first\">:1.2.3</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">)</span><span class=\"pl-k x\">.</span><span class=\"x\">withTag(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">latest</span><span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertTrue(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo:4.5.6 ~= foo:latest<span class=\"pl-pds\">\"</span></span>, subject<span class=\"pl-k\">.</span>isCompatibleWith(<span class=\"pl-smi\">DockerImageName</span><span class=\"pl-k\">.</span>parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Since <code>latest</code> is default?</p>", "author": "kiview", "createdAt": "2020-08-14T20:14:47Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDg1Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004852", "bodyText": "Ah, the intent here is to make sure that setting latest tag doesn't mess things up. I'll add a clarifying comment:\nfoo:1.2.3 != foo:4.5.6\nfoo:1.2.3 ~= foo\nfoo:1.2.3 ~= foo:latest\n\nThe test is effectively making sure that no tag and `latest` tag are equivalent", "author": "rnorth", "createdAt": "2020-08-15T15:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 3f33ae0b..12a93c72 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -23,7 +23,16 @@ public class DockerImageNameCompatibilityTest {\n     @Test\n     public void testLatestTreatedAsWildcard() {\n         final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n-\n+        /*\n+        foo:1.2.3 != foo:4.5.6\n+        foo:1.2.3 ~= foo\n+        foo:1.2.3 ~= foo:latest\n+\n+        The test is effectively making sure that no tag and `latest` tag are equivalent\n+         */\n+        assertFalse(\"foo:4.5.6 != foo:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\")));\n+        assertTrue(\"foo:4.5.6 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:latest\")));\n         assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n", "next_change": {"commit": "d87bcee21822e98cc67297540fe5a9884727ac04", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 12a93c72..ba6baef6 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -36,13 +36,6 @@ public class DockerImageNameCompatibilityTest {\n         assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n-    @Test\n-    public void testImageWithAutomaticCompatibility() {\n-        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n-\n-        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n-    }\n-\n     @Test\n     public void testImageWithAutomaticCompatibilityForFullPath() {\n         DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n", "next_change": {"commit": "3d43019550e75b379e73d0ef929b66a83c14c410", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex ba6baef6..9e7136ea 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -32,8 +32,6 @@ public class DockerImageNameCompatibilityTest {\n          */\n         assertFalse(\"foo:4.5.6 != foo:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\")));\n         assertTrue(\"foo:4.5.6 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n-        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:latest\")));\n-        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846075", "body": "after my suggestion, this would be the same test as `testLatestTreatedAsWildcard`", "bodyText": "after my suggestion, this would be the same test as testLatestTreatedAsWildcard", "bodyHTML": "<p dir=\"auto\">after my suggestion, this would be the same test as <code>testLatestTreatedAsWildcard</code></p>", "author": "kiview", "createdAt": "2020-08-14T20:16:33Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MjEwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473692108", "bodyText": "Removed", "author": "rnorth", "createdAt": "2020-08-20T07:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 3f33ae0b..12a93c72 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -23,7 +23,16 @@ public class DockerImageNameCompatibilityTest {\n     @Test\n     public void testLatestTreatedAsWildcard() {\n         final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n-\n+        /*\n+        foo:1.2.3 != foo:4.5.6\n+        foo:1.2.3 ~= foo\n+        foo:1.2.3 ~= foo:latest\n+\n+        The test is effectively making sure that no tag and `latest` tag are equivalent\n+         */\n+        assertFalse(\"foo:4.5.6 != foo:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\")));\n+        assertTrue(\"foo:4.5.6 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:latest\")));\n         assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n", "next_change": {"commit": "d87bcee21822e98cc67297540fe5a9884727ac04", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 12a93c72..ba6baef6 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -36,13 +36,6 @@ public class DockerImageNameCompatibilityTest {\n         assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n-    @Test\n-    public void testImageWithAutomaticCompatibility() {\n-        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n-\n-        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n-    }\n-\n     @Test\n     public void testImageWithAutomaticCompatibilityForFullPath() {\n         DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n", "next_change": {"commit": "3d43019550e75b379e73d0ef929b66a83c14c410", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex ba6baef6..9e7136ea 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -32,8 +32,6 @@ public class DockerImageNameCompatibilityTest {\n          */\n         assertFalse(\"foo:4.5.6 != foo:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\")));\n         assertTrue(\"foo:4.5.6 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n-        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:latest\")));\n-        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0Njg1OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846859", "body": "```suggestion\r\n    public void testAssertMethodAcceptsCompatible() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodAcceptsCompatible() {\n          \n          \n            \n                public void testAssertMethodAcceptsCompatible() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testCheckMethodAcceptsCompatible</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testAssertMethodAcceptsCompatible</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kiview", "createdAt": "2020-08-14T20:18:30Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6e5191028f2a24504f13717ef042e79888e8911", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 3f33ae0b..35460586 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -78,13 +80,13 @@ public class DockerImageNameCompatibilityTest {\n     }\n \n     @Test\n-    public void testCheckMethodAcceptsCompatible() {\n+    public void testAssertMethodAcceptsCompatible() {\n         DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n         subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n     }\n \n     @Test\n-    public void testCheckMethodRejectsIncompatible() {\n+    public void testAssertMethodRejectsIncompatible() {\n         thrown.expect(IllegalStateException.class);\n         thrown.expectMessage(containsString(\"Failed to verify that image 'foo' is a compatible substitute for 'bar'\"));\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470847012", "body": "```suggestion\n    public void testAssertMethodRejectsIncompatible() {\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodRejectsIncompatible() {\n          \n          \n            \n                public void testAssertMethodRejectsIncompatible() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testCheckMethodRejectsIncompatible</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testAssertMethodRejectsIncompatible</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kiview", "createdAt": "2020-08-14T20:18:53Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+        subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n+    }\n+\n+    @Test\n+    public void testCheckMethodRejectsIncompatible() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyMTM4Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473721383", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-20T07:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "changed_code": [{"header": "diff --git a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\nindex 3f33ae0b..661ffc8c 100644\n--- a/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n", "chunk": "@@ -84,7 +86,7 @@ public class DockerImageNameCompatibilityTest {\n     }\n \n     @Test\n-    public void testCheckMethodRejectsIncompatible() {\n+    public void testAssertMethodRejectsIncompatible() {\n         thrown.expect(IllegalStateException.class);\n         thrown.expectMessage(containsString(\"Failed to verify that image 'foo' is a compatible substitute for 'bar'\"));\n \n", "next_change": null}]}}, {"oid": "a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "url": "https://github.com/testcontainers/testcontainers-java/commit/a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "message": "Undeprecate remaining String constructors", "committedDate": "2020-08-15T15:30:01Z", "type": "commit"}, {"oid": "5be1a79cdab4912909437b5a35fc8e1abca58511", "url": "https://github.com/testcontainers/testcontainers-java/commit/5be1a79cdab4912909437b5a35fc8e1abca58511", "message": "Add comment re validation of HostAndPort", "committedDate": "2020-08-15T15:30:31Z", "type": "commit"}, {"oid": "ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "url": "https://github.com/testcontainers/testcontainers-java/commit/ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "message": "Add missing annotation", "committedDate": "2020-08-15T15:34:50Z", "type": "commit"}, {"oid": "c5c1e74adb89ff04c21aa66351c4c160a912b21b", "url": "https://github.com/testcontainers/testcontainers-java/commit/c5c1e74adb89ff04c21aa66351c4c160a912b21b", "message": "Fix Kafka version string constructor\nFix gap in testing and docs", "committedDate": "2020-08-15T15:43:33Z", "type": "commit"}, {"oid": "7d82db9611b4f590e9ec58b921e6469972656864", "url": "https://github.com/testcontainers/testcontainers-java/commit/7d82db9611b4f590e9ec58b921e6469972656864", "message": "Use @EqualsAndHashCode for Versioning", "committedDate": "2020-08-15T15:44:46Z", "type": "commit"}, {"oid": "de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "url": "https://github.com/testcontainers/testcontainers-java/commit/de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "message": "Clarify and expand test", "committedDate": "2020-08-15T15:51:36Z", "type": "commit"}, {"oid": "d87bcee21822e98cc67297540fe5a9884727ac04", "url": "https://github.com/testcontainers/testcontainers-java/commit/d87bcee21822e98cc67297540fe5a9884727ac04", "message": "Remove duplicate test", "committedDate": "2020-08-15T15:51:57Z", "type": "commit"}, {"oid": "6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "url": "https://github.com/testcontainers/testcontainers-java/commit/6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "message": "Rename test", "committedDate": "2020-08-15T15:52:22Z", "type": "commit"}, {"oid": "202a163c5c696d0abe5354190a428fd09da17073", "url": "https://github.com/testcontainers/testcontainers-java/commit/202a163c5c696d0abe5354190a428fd09da17073", "message": "Add continue-on-error for cache step, and upgrade GH cache action", "committedDate": "2020-08-15T16:33:35Z", "type": "commit"}, {"oid": "b6e5191028f2a24504f13717ef042e79888e8911", "url": "https://github.com/testcontainers/testcontainers-java/commit/b6e5191028f2a24504f13717ef042e79888e8911", "message": "Update core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n\nCo-authored-by: Kevin Wittek <kiview@users.noreply.github.com>", "committedDate": "2020-08-20T07:28:36Z", "type": "commit"}, {"oid": "33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "url": "https://github.com/testcontainers/testcontainers-java/commit/33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "message": "Merge remote-tracking branch 'origin/master' into image-overrides\nAdapt trim() usage to new code structure", "committedDate": "2020-08-20T07:41:29Z", "type": "commit"}, {"oid": "ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "url": "https://github.com/testcontainers/testcontainers-java/commit/ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "message": "Merge from origin/master and incorporate trim() to fix accidental whitespace in property files", "committedDate": "2020-08-20T07:50:11Z", "type": "commit"}, {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed", "url": "https://github.com/testcontainers/testcontainers-java/commit/502c647a91a45987aff1a09c9c558319aa5c09ed", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides", "committedDate": "2020-08-20T07:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473731008", "body": "tiny nit: if we import `Versioning.Sha256Versioning` and other `Versioning.*` classes, the changelog should be smaller :)", "bodyText": "tiny nit: if we import Versioning.Sha256Versioning and other Versioning.* classes, the changelog should be smaller :)", "bodyHTML": "<p dir=\"auto\">tiny nit: if we import <code>Versioning.Sha256Versioning</code> and other <code>Versioning.*</code> classes, the changelog should be smaller :)</p>", "author": "bsideup", "createdAt": "2020-08-20T07:59:05Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjA4OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156089", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTExMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481051112", "bodyText": "@rnorth is it? \ud83d\ude05", "author": "bsideup", "createdAt": "2020-09-01T10:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4NjkwNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086905", "bodyText": "Oops, must have reverted it during moving the interface. Done again.", "author": "rnorth", "createdAt": "2020-09-06T16:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..af8e5300 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -62,13 +69,13 @@ public final class DockerImageName {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n         } else if (remoteName.contains(\":\")) {\n             repo = remoteName.split(\":\")[0];\n-            versioning = new Versioning.TagVersioning(remoteName.split(\":\")[1]);\n+            versioning = new TagVersioning(remoteName.split(\":\")[1]);\n         } else {\n             repo = remoteName;\n-            versioning = Versioning.TagVersioning.LATEST;\n+            versioning = Versioning.ANY;\n         }\n \n         compatibleSubstituteFor = null;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473732136", "body": "marked as `@Nullable` while the field isn't", "bodyText": "marked as @Nullable while the field isn't", "bodyHTML": "<p dir=\"auto\">marked as <code>@Nullable</code> while the field isn't</p>", "author": "bsideup", "createdAt": "2020-08-20T07:59:54Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -103,11 +104,26 @@ public DockerImageName(String nameWithoutTag, @NotNull String version) {\n \n         if (version.startsWith(\"sha256:\")) {\n             repo = remoteName;\n-            versioning = new Sha256Versioning(version.replace(\"sha256:\", \"\"));\n+            versioning = new Versioning.Sha256Versioning(version.replace(\"sha256:\", \"\"));\n         } else {\n             repo = remoteName;\n-            versioning = new TagVersioning(version);\n+            versioning = new Versioning.TagVersioning(version);\n         }\n+\n+        compatibleSubstituteFor = null;\n+    }\n+\n+    private DockerImageName(String rawName,\n+                            String registry,\n+                            String repo,\n+                            @Nullable Versioning versioning,", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjAxMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156011", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..0ac00dee 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -113,19 +117,6 @@ public final class DockerImageName {\n         compatibleSubstituteFor = null;\n     }\n \n-    private DockerImageName(String rawName,\n-                            String registry,\n-                            String repo,\n-                            @Nullable Versioning versioning,\n-                            @Nullable DockerImageName compatibleSubstituteFor) {\n-\n-        this.rawName = rawName;\n-        this.registry = registry;\n-        this.repo = repo;\n-        this.versioning = versioning;\n-        this.compatibleSubstituteFor = compatibleSubstituteFor;\n-    }\n-\n     /**\n      * @return the unversioned (non 'tag') part of this name\n      */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736243", "body": "can we make `versioning` `@NonNull` and use `Versioning.TagVersioning.LATEST` if `null` is passed to `@Nullable` methods?", "bodyText": "can we make versioning @NonNull and use Versioning.TagVersioning.LATEST if null is passed to @Nullable methods?", "bodyHTML": "<p dir=\"auto\">can we make <code>versioning</code> <code>@NonNull</code> and use <code>Versioning.TagVersioning.LATEST</code> if <code>null</code> is passed to <code>@Nullable</code> methods?</p>", "author": "bsideup", "createdAt": "2020-08-20T08:03:20Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExNzkxNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477117914", "bodyText": "So, this is one that requires some discussion, and potentially a change or just clear docs!\nI'd expect most usage of this feature to be like foo.asCompatibleSubstituteFor(\"bar\") meaning bar with any tag is accepted.\nI wanted to leave the possibility open to specify an exact tag match, i.e. foo.asCompatibleSubstituteFor(\"bar:1.2.3\").\nSo that this works:\n\nan absent tag is recorded as null\nthe compatitility check code treats this null as a wildcard\nconversion to a string treats this null as an implicit latest\n\nIt doesn't have to be this way, though. I reckon we could:\n\nignore tags altogether for compatibility checks\nOR be more explicit about wildcards, e.g. foo.asCompatibleSubstituteFor(\"bar:*\") in the API, and/or have a Versioning.Wildcard type internally instead of null.\n\nWDYT?", "author": "rnorth", "createdAt": "2020-08-26T08:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjE0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481052143", "bodyText": "have a Versioning.Wildcard type internally instead of null\n\nI like this one! My main concern was the Nullable field that we can avoid and I think Versioning.Wildcard solves the problem very well \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-09-01T10:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4NjE0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481086145", "bodyText": "\ud83d\udc4d cool, I'll go with that then.", "author": "rnorth", "createdAt": "2020-09-01T12:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086843", "bodyText": "Done (called it AnyVersion)", "author": "rnorth", "createdAt": "2020-09-06T16:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -141,14 +133,14 @@ public final class DockerImageName {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning == null ? \"latest\" : versioning.toString();\n+        return versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();\n+        return getUnversionedPart() + versioning.getSeparator() + getVersionPart();\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736539", "body": "ditto re `null` vs `Versioning.TagVersioning.LATEST`", "bodyText": "ditto re null vs Versioning.TagVersioning.LATEST", "bodyHTML": "<p dir=\"auto\">ditto re <code>null</code> vs <code>Versioning.TagVersioning.LATEST</code></p>", "author": "bsideup", "createdAt": "2020-08-20T08:03:34Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + versioning.getSeparator() + versioning.toString();\n+        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086862", "bodyText": "Done.", "author": "rnorth", "createdAt": "2020-09-06T16:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -141,14 +133,14 @@ public final class DockerImageName {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning == null ? \"latest\" : versioning.toString();\n+        return versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();\n+        return getUnversionedPart() + versioning.getSeparator() + getVersionPart();\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473739998", "body": "Consider adding `@With(AccessLevel.PRIVATE)` to `otherImageName`, so that we can do:\r\n```suggestion\r\n        return withOtherImageName(otherImageName);\r\n```", "bodyText": "Consider adding @With(AccessLevel.PRIVATE) to otherImageName, so that we can do:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n          \n          \n            \n                    return withOtherImageName(otherImageName);", "bodyHTML": "<p dir=\"auto\">Consider adding <code>@With(AccessLevel.PRIVATE)</code> to <code>otherImageName</code>, so that we can do:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">DockerImageName</span><span class=\"x x-last\">(rawName, registry, repo, versioning, </span>otherImageName);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"x x-first x-last\">withOtherImageName(</span>otherImageName);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-08-20T08:06:14Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NDEwMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477284100", "bodyText": "Nice, this works well (same for withTag).\nN.B. I've upgraded the Lombok dependency so that we can use modern @With rather than deprecated @Wither", "author": "rnorth", "createdAt": "2020-08-26T13:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..0ac00dee 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -203,7 +194,7 @@ public final class DockerImageName {\n      * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n      */\n     public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n-        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n+        return withCompatibleSubstituteFor(otherImageName);\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473740918", "body": "WDYT about adding `if (equals(other)) return true`?", "bodyText": "WDYT about adding if (equals(other)) return true?", "bodyHTML": "<p dir=\"auto\">WDYT about adding <code>if (equals(other)) return true</code>?</p>", "author": "bsideup", "createdAt": "2020-08-20T08:07:23Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNDIyOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477134229", "bodyText": "It doesn't decrease the amount of code, as we still have to do some form of wildcarding on the tag, so I think I'm inclined to leave as-is right now.", "author": "rnorth", "createdAt": "2020-08-26T08:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNTE1OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477135159", "bodyText": "but if it is the same instance, we don't need to check anything, do we?", "author": "bsideup", "createdAt": "2020-08-26T08:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTcyOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477279728", "bodyText": "Sorry, what I meant was that we can't get rid of these lines:\n\t\tfinal boolean thisRegistrySame = other.registry.equals(this.registry);\n        final boolean thisRepoSame = other.repo.equals(this.repo);\n        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n            other.versioning.equals(this.versioning);\n\n        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n            return true;\n        }\n\nbecause the version comparison is looser than what equals does.\nSo if we add an equals or == check first then yes, we could return from the method more quickly when there's a narrower match.\nBut we're not optimising for performance, so I'm not sure that we need to. i.e. if there's equality, the existing code still does the right thing.", "author": "rnorth", "createdAt": "2020-08-26T12:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MzA1NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481053054", "bodyText": "Ok, we can keep it as is \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-09-01T10:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -218,14 +210,8 @@ public final class DockerImageName {\n      * @return whether this image has declared compatibility.\n      */\n     public boolean isCompatibleWith(DockerImageName other) {\n-        // is this image already the same?\n-        final boolean thisRegistrySame = other.registry.equals(this.registry);\n-        final boolean thisRepoSame = other.repo.equals(this.repo);\n-        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n-            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n-            other.versioning.equals(this.versioning);\n-\n-        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+        // is this image already the same or equivalent?\n+        if (other.equals(this)) {\n             return true;\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473778535", "body": "idea: make `compatibleSubstituteFor` `@NonNull`, use `SelfCompatible` by default", "bodyText": "idea: make compatibleSubstituteFor @NonNull, use SelfCompatible by default", "bodyHTML": "<p dir=\"auto\">idea: make <code>compatibleSubstituteFor</code> <code>@NonNull</code>, use <code>SelfCompatible</code> by default</p>", "author": "bsideup", "createdAt": "2020-08-20T08:49:50Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNDQ4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r487434480", "bodyText": "I didn't really manage to make this work, or at least elegantly.", "author": "rnorth", "createdAt": "2020-09-12T18:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfa1e635931b62088b47f67e5778490668256846", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/DockerImageName.java b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\nindex 5a45c3f0..75065827 100644\n--- a/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n+++ b/core/src/main/java/org/testcontainers/utility/DockerImageName.java\n", "chunk": "@@ -218,14 +210,8 @@ public final class DockerImageName {\n      * @return whether this image has declared compatibility.\n      */\n     public boolean isCompatibleWith(DockerImageName other) {\n-        // is this image already the same?\n-        final boolean thisRegistrySame = other.registry.equals(this.registry);\n-        final boolean thisRepoSame = other.repo.equals(this.repo);\n-        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n-            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n-            other.versioning.equals(this.versioning);\n-\n-        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+        // is this image already the same or equivalent?\n+        if (other.equals(this)) {\n             return true;\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473784298", "body": "```suggestion\r\n    private static final TestcontainersConfiguration instance = loadConfiguration();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();;\n          \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TestcontainersConfiguration</span> instance <span class=\"pl-k\">=</span> loadConfiguration();<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TestcontainersConfiguration</span> instance <span class=\"pl-k\">=</span> loadConfiguration();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-08-20T08:56:08Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();\n+    private static final TestcontainersConfiguration instance = loadConfiguration();;", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjczNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156734", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\nindex c0e54098..521a7519 100644\n--- a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n+++ b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n", "chunk": "@@ -37,7 +37,7 @@ public class TestcontainersConfiguration {\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();;\n+    private static final TestcontainersConfiguration instance = loadConfiguration();\n \n     @SuppressWarnings({\"ConstantConditions\", \"unchecked\", \"rawtypes\"})\n     @VisibleForTesting\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473787851", "body": "I just realized... when did we introduce `DockerImageName getPulsarDockerImageName()`?\r\n\r\nIf 1.15.0-rc1, maybe we should use the opportunity to remove module's images from `TestcontainersConfiguration`, and instead expose something like the current `getImage` that would allow _any_ module to use the configuration mechanism? ", "bodyText": "I just realized... when did we introduce DockerImageName getPulsarDockerImageName()?\nIf 1.15.0-rc1, maybe we should use the opportunity to remove module's images from TestcontainersConfiguration, and instead expose something like the current getImage that would allow any module to use the configuration mechanism?", "bodyHTML": "<p dir=\"auto\">I just realized... when did we introduce <code>DockerImageName getPulsarDockerImageName()</code>?</p>\n<p dir=\"auto\">If 1.15.0-rc1, maybe we should use the opportunity to remove module's images from <code>TestcontainersConfiguration</code>, and instead expose something like the current <code>getImage</code> that would allow <em>any</em> module to use the configuration mechanism?</p>", "author": "bsideup", "createdAt": "2020-08-20T09:00:05Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMDcxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477120712", "bodyText": "It was 1.15.0-rc1 so yeah, we can do that.\n\nthat would allow any module to use the configuration mechanism?\n\nI'd be keen to still decrease reliance on TestcontainersConfiguration overall. I see it as an OK default image substitutor, but in the long term I'd like module classes to not call  TestcontainersConfiguration at all, and instead rely entirely on the image substitution mechanism.", "author": "rnorth", "createdAt": "2020-08-26T08:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NDg2OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477274869", "bodyText": "Actually, I don't think we need to do this. #3102 will:\n\nRip out all references from modules to TestcontainersConfiguration for obtaining an image name\nMake RemoteDockerImage use ImageNameSubstitutor to look up a substitute name, if set\nThe default implementation of ImageNameSubstitutor just defers to TestcontainersConfiguration (so that existing uses of props-file based substitution carry on working)\n\nIf we don't do this, and essentially keep TestcontainersConfiguration near the top of the stack, then I think it becomes a lot harder to swap in an alternative substitutor implementation without making every module (and GenericContainer) use TestcontainersConfiguration.", "author": "rnorth", "createdAt": "2020-08-26T12:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\nindex c0e54098..326938bc 100644\n--- a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n+++ b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n", "chunk": "@@ -136,29 +101,14 @@ public class TestcontainersConfiguration {\n         return Integer.parseInt((String) properties.getOrDefault(\"ryuk.container.timeout\", \"30\"));\n     }\n \n-    @Deprecated\n-    public String getKafkaImage() {\n-        return getKafkaDockerImageName().asCanonicalNameString();\n-    }\n-\n     public DockerImageName getKafkaDockerImageName() {\n         return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n-    @Deprecated\n-    public String getPulsarImage() {\n-        return getPulsarDockerImageName().asCanonicalNameString();\n-    }\n-\n     public DockerImageName getPulsarDockerImageName() {\n         return getImage(\"pulsar.container.image\", \"apachepulsar/pulsar\");\n     }\n \n-    @Deprecated\n-    public String getLocalStackImage() {\n-        return getLocalstackDockerImageName().asCanonicalNameString();\n-    }\n-\n     public DockerImageName getLocalstackDockerImageName() {\n         return getImage(\"localstack.container.image\", \"localstack/localstack\");\n     }\n", "next_change": {"commit": "64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\nindex 326938bc..521a7519 100644\n--- a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n+++ b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n", "chunk": "@@ -101,14 +136,29 @@ public class TestcontainersConfiguration {\n         return Integer.parseInt((String) properties.getOrDefault(\"ryuk.container.timeout\", \"30\"));\n     }\n \n+    @Deprecated\n+    public String getKafkaImage() {\n+        return getKafkaDockerImageName().asCanonicalNameString();\n+    }\n+\n     public DockerImageName getKafkaDockerImageName() {\n         return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n+    @Deprecated\n+    public String getPulsarImage() {\n+        return getPulsarDockerImageName().asCanonicalNameString();\n+    }\n+\n     public DockerImageName getPulsarDockerImageName() {\n         return getImage(\"pulsar.container.image\", \"apachepulsar/pulsar\");\n     }\n \n+    @Deprecated\n+    public String getLocalStackImage() {\n+        return getLocalstackDockerImageName().asCanonicalNameString();\n+    }\n+\n     public DockerImageName getLocalstackDockerImageName() {\n         return getImage(\"localstack.container.image\", \"localstack/localstack\");\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473789074", "body": "nit: should we move it before the non-static class members?", "bodyText": "nit: should we move it before the non-static class members?", "bodyHTML": "<p dir=\"auto\">nit: should we move it before the non-static class members?</p>", "author": "bsideup", "createdAt": "2020-08-20T09:01:33Z", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @EqualsAndHashCode\n+    class TagVersioning implements Versioning {\n+        public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        private final String tag;\n+\n+        TagVersioning(String tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return tag.matches(TAG_REGEX);\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \":\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return tag;\n+        }\n+\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1Njg3Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156877", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "changed_code": [{"header": "diff --git a/core/src/main/java/org/testcontainers/utility/Versioning.java b/core/src/main/java/org/testcontainers/utility/Versioning.java\nindex aba0bf90..6639f8b2 100644\n--- a/core/src/main/java/org/testcontainers/utility/Versioning.java\n+++ b/core/src/main/java/org/testcontainers/utility/Versioning.java\n", "chunk": "@@ -35,8 +34,6 @@ interface Versioning {\n         public String toString() {\n             return tag;\n         }\n-\n-        static final TagVersioning LATEST = new TagVersioning(\"latest\");\n     }\n \n     @EqualsAndHashCode\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473799674", "body": "this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?", "bodyText": "this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?", "bodyHTML": "<p dir=\"auto\">this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?</p>", "author": "bsideup", "createdAt": "2020-08-20T09:14:35Z", "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMTEwNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477121107", "bodyText": "Good suggestion - will have a try.", "author": "rnorth", "createdAt": "2020-08-26T08:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjE3Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477146173", "bodyText": "I've modified assertCompatibleWith to accept a varargs array of DockerImageNames, and I think this works a lot better.", "author": "rnorth", "createdAt": "2020-08-26T08:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java b/modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java\nindex a552ae91..712daf4a 100644\n--- a/modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java\n+++ b/modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java\n", "chunk": "@@ -101,7 +100,6 @@ public class ElasticsearchContainerTest {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n-                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")\n                  )\n              // }\n         ) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473805245", "body": "heads up: making it static would create false positives since `#testKafkaFunctionality` uses the same topic name / message that it asserts.\r\nLet's change the topic name in `#testKafkaFunctionality` to something with random in it", "bodyText": "heads up: making it static would create false positives since #testKafkaFunctionality uses the same topic name / message that it asserts.\nLet's change the topic name in #testKafkaFunctionality to something with random in it", "bodyHTML": "<p dir=\"auto\">heads up: making it static would create false positives since <code>#testKafkaFunctionality</code> uses the same topic name / message that it asserts.<br>\nLet's change the topic name in <code>#testKafkaFunctionality</code> to something with random in it</p>", "author": "bsideup", "createdAt": "2020-08-20T09:21:29Z", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -29,8 +29,8 @@\n     private static final DockerImageName ZOOKEEPER_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-zookeeper:4.0.0\");\n \n     // junitRule {\n-    @Rule\n-    public KafkaContainer kafka = new KafkaContainer();\n+    @ClassRule\n+    public static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\"));", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTk4Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477161982", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad797a590d1907c98db362a8d23d9ad2e647c715", "changed_code": [{"header": "diff --git a/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java b/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\nindex 0797a730..6a669b2f 100644\n--- a/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\n+++ b/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\n", "chunk": "@@ -15,14 +22,6 @@ import org.junit.Test;\n import org.rnorth.ducttape.unreliables.Unreliables;\n import org.testcontainers.utility.DockerImageName;\n \n-import java.time.Duration;\n-import java.util.Arrays;\n-import java.util.UUID;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.tuple;\n-\n public class KafkaContainerTest {\n \n     private static final DockerImageName KAFKA_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\");\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814174", "body": "See #3128\r\n\r\n```suggestion\r\n                .withNetwork(network)\r\n```", "bodyText": "See #3128\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withNetwork(kafka.getNetwork())\n          \n          \n            \n                            .withNetwork(network)", "bodyHTML": "<p dir=\"auto\">See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"681887162\" data-permission-text=\"Title is private\" data-url=\"https://github.com/testcontainers/testcontainers-java/issues/3128\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/testcontainers/testcontainers-java/pull/3128/hovercard\" href=\"https://github.com/testcontainers/testcontainers-java/pull/3128\">#3128</a></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .withNetwork(<span class=\"x x-first\">kafka</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getNetwork()</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .withNetwork(<span class=\"x x-first x-last\">network</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-08-20T09:32:21Z", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -75,7 +86,8 @@ public void testExternalZookeeperWithExternalNetwork() throws Exception {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\").withNetwork(kafka.getNetwork())\n+            GenericContainer application = new GenericContainer(\"alpine\")\n+                .withNetwork(kafka.getNetwork())", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjA4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162080", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-26T09:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ad797a590d1907c98db362a8d23d9ad2e647c715", "changed_code": [{"header": "diff --git a/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java b/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\nindex 0797a730..6a669b2f 100644\n--- a/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\n+++ b/modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java\n", "chunk": "@@ -86,8 +85,8 @@ public class KafkaContainerTest {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\")\n-                .withNetwork(kafka.getNetwork())\n+            GenericContainer<?> application = new GenericContainer<>(DockerImageName.parse(\"alpine\"))\n+                .withNetwork(network)\n             // }\n                 .withNetworkAliases(\"dummy\")\n                 .withCommand(\"sleep 10000\")\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814863", "body": "```suggestion\r\n        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span>(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">TestcontainersConfiguration</span><span class=\"pl-k\">.</span>getInstance()<span class=\"pl-k\">.</span>getLocalstackDockerImageName()<span class=\"pl-k\">.</span>withTag(version));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span>(<span class=\"pl-smi\">TestcontainersConfiguration</span><span class=\"pl-k\">.</span>getInstance()<span class=\"pl-k\">.</span>getLocalstackDockerImageName()<span class=\"pl-k\">.</span>withTag(version));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-08-20T09:33:14Z", "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -58,15 +64,15 @@\n      */\n     @Deprecated\n     public LocalStackContainer() {\n-        this(VERSION);\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getLocalStackImage() + \":\" + version));\n+        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjE4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162180", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-26T09:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "changed_code": [{"header": "diff --git a/modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java b/modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java\nindex aa00d914..2518cc9d 100644\n--- a/modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java\n+++ b/modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java\n", "chunk": "@@ -72,7 +72,7 @@ public class LocalStackContainer extends GenericContainer<LocalStackContainer> {\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473839164", "body": "the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images", "bodyText": "the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images", "bodyHTML": "<p dir=\"auto\">the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images</p>", "author": "bsideup", "createdAt": "2020-08-20T10:01:54Z", "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "diffHunk": "@@ -8,7 +8,9 @@\n \n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n-    private static final DockerImageName FIREFOX_IMAGE = DockerImageName.parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n+    private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n+        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NDE3MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477154171", "bodyText": "Yep, have replaced this by something more elegant within BrowserWebDriverContainer", "author": "rnorth", "createdAt": "2020-08-26T09:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "changed_code": [{"header": "diff --git a/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java b/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\nindex 67b46527..6692fc3f 100644\n--- a/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\n+++ b/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\n", "chunk": "@@ -9,8 +9,7 @@ import org.testcontainers.utility.DockerImageName;\n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n     private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n-        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n-        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n \n     @Rule\n     public BrowserWebDriverContainer<?> firefox = new BrowserWebDriverContainer<>(FIREFOX_IMAGE)\n", "next_change": {"commit": "80e69718fac9719fb300fa465c0487cb1db92af3", "changed_code": [{"header": "diff --git a/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java b/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\nindex 6692fc3f..9a15c6b4 100644\n--- a/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\n+++ b/modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java\n", "chunk": "@@ -13,12 +13,8 @@ public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContai\n \n     @Rule\n     public BrowserWebDriverContainer<?> firefox = new BrowserWebDriverContainer<>(FIREFOX_IMAGE)\n-        .withCapabilities(new FirefoxOptions());\n-\n-    @Test\n-    public void simpleTest() {\n-        doSimpleWebdriverTest(firefox);\n-    }\n+        .withCapabilities(new FirefoxOptions())\n+        .withNetwork(NETWORK);\n \n     @Test\n     public void simpleExploreTest() {\n", "next_change": null}]}}]}}, {"oid": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "url": "https://github.com/testcontainers/testcontainers-java/commit/7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "message": "Resolve some review comments", "committedDate": "2020-08-26T09:00:12Z", "type": "commit"}, {"oid": "ad797a590d1907c98db362a8d23d9ad2e647c715", "url": "https://github.com/testcontainers/testcontainers-java/commit/ad797a590d1907c98db362a8d23d9ad2e647c715", "message": "Avoid dirty state in Kafka test", "committedDate": "2020-08-26T09:10:25Z", "type": "commit"}, {"oid": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "url": "https://github.com/testcontainers/testcontainers-java/commit/1ee4b78e234702d11d4eca43b89bb0a142218aaa", "message": "Tidy up some nits", "committedDate": "2020-08-26T09:13:36Z", "type": "commit"}, {"oid": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "url": "https://github.com/testcontainers/testcontainers-java/commit/0b0212d30092b5c962b4b2624b82e6eb02fb1147", "message": "Use Lombok @With and restore generated constructor", "committedDate": "2020-08-26T13:07:24Z", "type": "commit"}, {"oid": "e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "url": "https://github.com/testcontainers/testcontainers-java/commit/e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "message": "Remove now-unused `TestcontainersConfiguration` accessors", "committedDate": "2020-08-26T13:07:49Z", "type": "commit"}, {"oid": "90688338ec52a70a2919a72ce12dd4e7885e90de", "url": "https://github.com/testcontainers/testcontainers-java/commit/90688338ec52a70a2919a72ce12dd4e7885e90de", "message": "Fix test compilation issue", "committedDate": "2020-08-26T14:13:51Z", "type": "commit"}, {"oid": "64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "url": "https://github.com/testcontainers/testcontainers-java/commit/64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "message": "Revert \"Remove now-unused `TestcontainersConfiguration` accessors\"\n\ne22e639fbf740c326d1fd492a0e1c1ae124a8c53", "committedDate": "2020-08-27T07:04:07Z", "type": "commit"}, {"oid": "b068af5abd90e033aec4190fb7992db5a76eec6b", "url": "https://github.com/testcontainers/testcontainers-java/commit/b068af5abd90e033aec4190fb7992db5a76eec6b", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-08-27T07:11:27Z", "type": "commit"}, {"oid": "3624787035733ecac137ccc5f61e1fb5cc42b7e5", "url": "https://github.com/testcontainers/testcontainers-java/commit/3624787035733ecac137ccc5f61e1fb5cc42b7e5", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-01T11:21:35Z", "type": "commit"}, {"oid": "89a6b731198d2e2e40ace51854da2966a9cc7c46", "url": "https://github.com/testcontainers/testcontainers-java/commit/89a6b731198d2e2e40ace51854da2966a9cc7c46", "message": "Merge remote-tracking branch 'origin/master' into image-overrides", "committedDate": "2020-09-06T15:54:16Z", "type": "commit"}, {"oid": "dfa1e635931b62088b47f67e5778490668256846", "url": "https://github.com/testcontainers/testcontainers-java/commit/dfa1e635931b62088b47f67e5778490668256846", "message": "Add an 'AnyVersion' for images", "committedDate": "2020-09-06T16:00:16Z", "type": "commit"}, {"oid": "61c5fbc26152422a6fb64aa574f67c359671bd0a", "url": "https://github.com/testcontainers/testcontainers-java/commit/61c5fbc26152422a6fb64aa574f67c359671bd0a", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides", "committedDate": "2020-09-06T16:01:03Z", "type": "commit"}, {"oid": "a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "url": "https://github.com/testcontainers/testcontainers-java/commit/a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "message": "Add import", "committedDate": "2020-09-06T16:02:23Z", "type": "commit"}, {"oid": "3d43019550e75b379e73d0ef929b66a83c14c410", "url": "https://github.com/testcontainers/testcontainers-java/commit/3d43019550e75b379e73d0ef929b66a83c14c410", "message": "Adapt test for mocking compatibility (avoid testing latest vs any for equality)", "committedDate": "2020-09-06T19:58:37Z", "type": "commit"}, {"oid": "022c49338c13eeb3ba690264f708d8a1c681a50d", "url": "https://github.com/testcontainers/testcontainers-java/commit/022c49338c13eeb3ba690264f708d8a1c681a50d", "message": "Restore previous behaviour using a fixed version of Neo4j Enterprise image", "committedDate": "2020-09-24T08:12:21Z", "type": "commit"}, {"oid": "6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "url": "https://github.com/testcontainers/testcontainers-java/commit/6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "message": "Reinstate standard image check", "committedDate": "2020-09-24T08:22:11Z", "type": "commit"}, {"oid": "ef9633f406975b9d6d1b1b0094d46433211c3977", "url": "https://github.com/testcontainers/testcontainers-java/commit/ef9633f406975b9d6d1b1b0094d46433211c3977", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-24T08:42:01Z", "type": "commit"}, {"oid": "db4dabf7b5fd154d80d733555d7a982c598c9161", "url": "https://github.com/testcontainers/testcontainers-java/commit/db4dabf7b5fd154d80d733555d7a982c598c9161", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-25T07:46:43Z", "type": "commit"}, {"oid": "80e69718fac9719fb300fa465c0487cb1db92af3", "url": "https://github.com/testcontainers/testcontainers-java/commit/80e69718fac9719fb300fa465c0487cb1db92af3", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-28T16:14:00Z", "type": "commit"}, {"oid": "7794be675b1472f9722c61320f42b03f2545ffd4", "url": "https://github.com/testcontainers/testcontainers-java/commit/7794be675b1472f9722c61320f42b03f2545ffd4", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-28T18:12:10Z", "type": "commit"}, {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195", "url": "https://github.com/testcontainers/testcontainers-java/commit/a1b1f48347612c05f5eac54876cea4529f16d195", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-29T08:46:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTc0OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r506175748", "body": "I'm wondering if we could make this static constant public so people can simply do something like:\r\n\r\n```java\r\nnew ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(\"7.9.2\"));\r\n```\r\n\r\n", "bodyText": "I'm wondering if we could make this static constant public so people can simply do something like:\nnew ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(\"7.9.2\"));", "bodyHTML": "<p dir=\"auto\">I'm wondering if we could make this static constant public so people can simply do something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"new ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(&quot;7.9.2&quot;));\n\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-smi\">ElasticsearchContainer</span>(<span class=\"pl-smi\">ElasticsearchContainer</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DEFAULT_IMAGE_NAME</span><span class=\"pl-k\">.</span>withTag(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>7.9.2<span class=\"pl-pds\">\"</span></span>));</pre></div>", "author": "dadoonet", "createdAt": "2020-10-16T08:37:53Z", "path": "modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java", "diffHunk": "@@ -28,35 +27,41 @@\n     private static final int ELASTICSEARCH_DEFAULT_TCP_PORT = 9300;\n \n     /**\n-     * Elasticsearch Docker base URL\n+     * Elasticsearch Docker base image\n      */\n-    private static final String ELASTICSEARCH_DEFAULT_IMAGE = \"docker.elastic.co/elasticsearch/elasticsearch\";\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"docker.elastic.co/elasticsearch/elasticsearch\");", "originalCommit": "a1b1f48347612c05f5eac54876cea4529f16d195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}