{"pr_number": 2293, "pr_title": "Handling of switch expressions and rule cases in Flow and NPECheck hint.", "pr_author": "jlahoda", "pr_createdAt": "2020-08-03T21:16:25Z", "pr_url": "https://github.com/apache/netbeans/pull/2293", "timeline": [{"oid": "5d143fe57839e8ae9f4a04bfbb21f30269a26430", "url": "https://github.com/apache/netbeans/commit/5d143fe57839e8ae9f4a04bfbb21f30269a26430", "message": "Handling of switch expressions and rule cases in Flow and NPECheck hint.", "committedDate": "2020-08-01T04:34:04Z", "type": "commit"}, {"oid": "29b3fb796df9277d4949f20dad4bc4c78cc93bbd", "url": "https://github.com/apache/netbeans/commit/29b3fb796df9277d4949f20dad4bc4c78cc93bbd", "message": "Using a correct overload if TreeScanner.scan", "committedDate": "2020-08-02T06:20:25Z", "type": "commit"}, {"oid": "ad7dc29e3b859ee565db863e58ef5b6e35ff0de7", "url": "https://github.com/apache/netbeans/commit/ad7dc29e3b859ee565db863e58ef5b6e35ff0de7", "message": "Fixing FlowTest on JDK 8.", "committedDate": "2020-08-02T16:13:32Z", "type": "commit"}, {"oid": "2dbc768528dcd822d55592ee0da1567280fe522a", "url": "https://github.com/apache/netbeans/commit/2dbc768528dcd822d55592ee0da1567280fe522a", "message": "Attempting to improve stability of HideFieldByVarTest.", "committedDate": "2020-08-03T06:45:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5NTkyMQ==", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r464795921", "body": "Jackpot:\nwarning: Redundant type arguments in new expression (use diamond operator instead).", "bodyText": "Jackpot:\nwarning: Redundant type arguments in new expression (use diamond operator instead).", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Redundant type arguments in new expression (use diamond operator instead).</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-04T04:44:10Z", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -1172,37 +1207,63 @@ public Boolean visitBreak(BreakTree node, ConstructorData p) {\n \n             Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n-            resumeAfter(target, variable2State);\n+            breakTo(target);\n \n-            variable2State = new HashMap< Element, State>();\n+            return null;\n+        }\n+\n+        public Boolean visitYield(Tree node, ConstructorData p) {\n+            scan(TreeShims.getYieldValue(node), p);\n+\n+            Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n+            breakTo(target);\n+\n             return null;\n         }\n \n+        private void breakTo(Tree target) {\n+            resumeAfter(target, variable2State);\n+\n+            variable2State = new HashMap< Element, State>();", "originalCommit": "2dbc768528dcd822d55592ee0da1567280fe522a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MTQ5NQ==", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r465481495", "body": "```suggestion\r\n            variable2State = new HashMap<>();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        variable2State = new HashMap< Element, State>();\n          \n          \n            \n                        variable2State = new HashMap<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            variable2State <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;<span class=\"x x-first\"> </span><span class=\"pl-smi x\">Element</span><span class=\"x\">, </span><span class=\"pl-smi x x-last\">State</span>&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            variable2State <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jlahoda", "createdAt": "2020-08-05T05:28:34Z", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -1172,37 +1207,63 @@ public Boolean visitBreak(BreakTree node, ConstructorData p) {\n \n             Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n-            resumeAfter(target, variable2State);\n+            breakTo(target);\n \n-            variable2State = new HashMap< Element, State>();\n+            return null;\n+        }\n+\n+        public Boolean visitYield(Tree node, ConstructorData p) {\n+            scan(TreeShims.getYieldValue(node), p);\n+\n+            Tree target = info.getTreeUtilities().getBreakContinueTargetTree(getCurrentPath());\n             \n+            breakTo(target);\n+\n             return null;\n         }\n \n+        private void breakTo(Tree target) {\n+            resumeAfter(target, variable2State);\n+\n+            variable2State = new HashMap< Element, State>();", "originalCommit": "2dbc768528dcd822d55592ee0da1567280fe522a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "edd000c6b6f60a0243dd304e11859923bbaea814", "url": "https://github.com/apache/netbeans/commit/edd000c6b6f60a0243dd304e11859923bbaea814", "message": "Using a diamond instead of explicit type parameters.", "committedDate": "2020-08-05T05:29:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODY0Nw==", "url": "https://github.com/apache/netbeans/pull/2293#discussion_r486798647", "body": "Wouldn't it be beneficial to build the `visitSwitchExpression` and `visitYield` into baseclasses ?", "bodyText": "Wouldn't it be beneficial to build the visitSwitchExpression and visitYield into baseclasses ?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be beneficial to build the <code>visitSwitchExpression</code> and <code>visitYield</code> into baseclasses ?</p>", "author": "sdedic", "createdAt": "2020-09-11T06:22:02Z", "path": "java/java.hints/src/org/netbeans/modules/java/hints/introduce/Flow.java", "diffHunk": "@@ -444,11 +445,45 @@ protected boolean isCanceled() {\n             return cancel.isCanceled();\n         }\n \n+        private TreePath currentPath;\n+\n+        public TreePath getCurrentPath() {\n+            return currentPath;\n+        }\n+\n+        public Boolean scan(TreePath path, ConstructorData p) {\n+            TreePath oldPath = currentPath;\n+            try {\n+                currentPath = path;\n+                return super.scan(path.getLeaf(), p);\n+            } finally {\n+                currentPath = oldPath;\n+            }\n+        }\n+\n         @Override\n         public Boolean scan(Tree tree, ConstructorData p) {\n             resume(tree, resumeBefore);\n             \n-            Boolean result = super.scan(tree, p);\n+            Boolean result;\n+\n+            if (tree != null) {", "originalCommit": "edd000c6b6f60a0243dd304e11859923bbaea814", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}