{"pr_number": 2324, "pr_title": "Adding support for workspace/symbol to both the LSP client and Java LSP server.", "pr_author": "jlahoda", "pr_createdAt": "2020-08-22T20:00:29Z", "pr_url": "https://github.com/apache/netbeans/pull/2324", "merge_commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "timeline": [{"oid": "142b5936916b3027295ad889f232770b00870ff4", "url": "https://github.com/apache/netbeans/commit/142b5936916b3027295ad889f232770b00870ff4", "message": "Adding support for workspace/symbol to both the LSP client and Java LSP server.\nNeeds to eagerly start the servers (so that they can provide outputs).", "committedDate": "2020-08-22T06:48:20Z", "type": "commit"}, {"oid": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "url": "https://github.com/apache/netbeans/commit/38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "message": "Removing unnecessary import.", "committedDate": "2020-08-22T19:59:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDg5Nw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134897", "body": "Jackpot:\nwarning: Passing possible null to not-null argument", "bodyText": "Jackpot:\nwarning: Passing possible null to not-null argument", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Passing possible null to not-null argument</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:12Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n+                                                  TypeElement te = e.getKey().resolve(cc);\n+\n+                                                  for (String ident : e.getValue()) {\n+                                                      if (ident.equals(getSimpleName(te, null, false))) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3OTE4MA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489179180", "bodyText": "Shall be fixed.", "author": "jlahoda", "createdAt": "2020-09-16T05:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nindex dc41f44b23..8799f85c21 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +117,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nsimilarity index 82%\nrename from java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nrename to java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nindex dc41f44b23..8e6d849b87 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +152,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDg5OQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134899", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:13Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTMyOA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165328", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDg5OQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwMQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134901", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:15Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTM4MQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165381", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nindex dc41f44b23..8799f85c21 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +117,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nsimilarity index 82%\nrename from java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nrename to java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nindex dc41f44b23..8e6d849b87 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +152,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwNA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134904", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:17Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n+                                                  TypeElement te = e.getKey().resolve(cc);\n+\n+                                                  for (String ident : e.getValue()) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NjAyMQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489166021", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nindex dc41f44b23..8799f85c21 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +117,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nsimilarity index 82%\nrename from java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nrename to java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nindex dc41f44b23..8e6d849b87 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +152,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwNw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134907", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:18Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n+                                                  TypeElement te = e.getKey().resolve(cc);\n+\n+                                                  for (String ident : e.getValue()) {\n+                                                      if (ident.equals(getSimpleName(te, null, false))) {\n+                                                          TreePath path = cc.getTrees().getPath(te);\n+\n+                                                          if (path != null) {\n+                                                              final String symbolName = te.getSimpleName().toString();\n+                                                              final ElementKind kind = te.getKind();\n+                                                              SymbolInformation symbol = new SymbolInformation(symbolName, Utils.elementKind2SymbolKind(kind), tree2Location(cc, path), te.getQualifiedName().toString());\n+\n+                                                              symbol.setDeprecated(false);\n+                                                              symbols.add(symbol);\n+                                                          }\n+                                                      }\n+                                                      for (Element ne : te.getEnclosedElements()) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTQwOA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165408", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkwNw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkyMw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134923", "body": "Jackpot:\nwarning: Dereferencing possible null pointer", "bodyText": "Jackpot:\nwarning: Dereferencing possible null pointer", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Dereferencing possible null pointer</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:30Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n+                                                  TypeElement te = e.getKey().resolve(cc);\n+\n+                                                  for (String ident : e.getValue()) {\n+                                                      if (ident.equals(getSimpleName(te, null, false))) {\n+                                                          TreePath path = cc.getTrees().getPath(te);\n+\n+                                                          if (path != null) {\n+                                                              final String symbolName = te.getSimpleName().toString();", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3OTEyOQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489179129", "bodyText": "Shall be fixed.", "author": "jlahoda", "createdAt": "2020-09-16T05:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nindex dc41f44b23..8799f85c21 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +117,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nsimilarity index 82%\nrename from java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\nrename to java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\nindex dc41f44b23..8e6d849b87 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java\n", "chunk": "@@ -117,6 +152,11 @@ public class WorkspaceServiceImpl implements WorkspaceService {\n                                               for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n                                                   TypeElement te = e.getKey().resolve(cc);\n \n+                                                  if (te == null) {\n+                                                      //cannot resolve\n+                                                      continue;\n+                                                  }\n+\n                                                   for (String ident : e.getValue()) {\n                                                       if (ident.equals(getSimpleName(te, null, false))) {\n                                                           TreePath path = cc.getTrees().getPath(te);\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkyNQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134925", "body": "Jackpot:\nwarning: Dereferencing possible null pointer", "bodyText": "Jackpot:\nwarning: Dereferencing possible null pointer", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Dereferencing possible null pointer</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:31Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/workspace/WorkspaceServiceImpl.java", "diffHunk": "@@ -18,23 +18,215 @@\n  */\n package org.netbeans.modules.java.lsp.server.workspace;\n \n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.TypeElement;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.Location;\n import org.eclipse.lsp4j.SymbolInformation;\n import org.eclipse.lsp4j.WorkspaceSymbolParams;\n import org.eclipse.lsp4j.services.WorkspaceService;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.java.source.ClasspathInfo;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.java.source.ElementHandle;\n+import org.netbeans.api.java.source.JavaSource;\n+import org.netbeans.api.java.source.JavaSource.Phase;\n+import org.netbeans.api.java.source.SourceUtils;\n+import org.netbeans.modules.java.lsp.server.Utils;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider;\n+import org.netbeans.modules.java.source.ui.JavaSymbolProvider.ResultHandler;\n+import org.netbeans.modules.java.source.usages.ClassIndexImpl;\n+import org.netbeans.modules.parsing.lucene.support.Queries;\n+import org.netbeans.spi.jumpto.type.SearchType;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.Pair;\n+import org.openide.util.RequestProcessor;\n \n /**\n  *\n  * @author lahvac\n  */\n public class WorkspaceServiceImpl implements WorkspaceService {\n \n+    private static final RequestProcessor WORKER = new RequestProcessor(WorkspaceServiceImpl.class.getName(), 1, false, false);\n+\n     @Override\n-    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams arg0) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    public CompletableFuture<List<? extends SymbolInformation>> symbol(WorkspaceSymbolParams params) {\n+        String query = params.getQuery();\n+        if (query.isEmpty()) {\n+            //cannot query \"all\":\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+        System.err.println(\"query=\" + query);\n+        boolean exact = false;\n+        if (query.endsWith(\" \")) {\n+            query = query.substring(0, query.length() - 1);\n+            exact = true;\n+        }\n+        String queryFin = query;\n+        boolean exactFin = exact;\n+        AtomicBoolean cancel = new AtomicBoolean();\n+        CompletableFuture<List<? extends SymbolInformation>> result = new CompletableFuture<List<? extends SymbolInformation>>() {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning) {\n+                cancel.set(mayInterruptIfRunning);\n+                return super.cancel(mayInterruptIfRunning);\n+            }\n+        };\n+        WORKER.post(() -> {\n+            try {\n+                List<SymbolInformation> symbols = new ArrayList<>();\n+                ResultHandler handler = new ResultHandler() {\n+                    @Override\n+                    public void setHighlightText(String text) {\n+                    }\n+\n+                    private Map<ElementHandle<TypeElement>, List<String>> type2Idents;\n+\n+                    @Override\n+                    public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                        ClasspathInfo cpInfo = ClasspathInfo.create(root);\n+                        try {\n+                            type2Idents = new HashMap<>();\n+                            exec.run();\n+                            Map<FileObject, Map<ElementHandle<TypeElement>, List<String>>> sources = new HashMap<>();\n+                            for (Entry<ElementHandle<TypeElement>, List<String>> e : type2Idents.entrySet()) {\n+                                FileObject sourceFile = SourceUtils.getFile(e.getKey(), cpInfo);\n+                                sources.computeIfAbsent(sourceFile, s -> new HashMap<>())\n+                                       .put(e.getKey(), e.getValue());\n+                            }\n+                            if (!sources.isEmpty()) {\n+                                JavaSource.create(cpInfo, sources.keySet())\n+                                          .runUserActionTask(cc -> {\n+                                              if (Phase.ELEMENTS_RESOLVED.compareTo(cc.toPhase(Phase.ELEMENTS_RESOLVED))> 0) {\n+                                                  return ;\n+                                              }\n+                                              for (Entry<ElementHandle<TypeElement>, List<String>> e : sources.get(cc.getFileObject()).entrySet()) {\n+                                                  TypeElement te = e.getKey().resolve(cc);\n+\n+                                                  for (String ident : e.getValue()) {\n+                                                      if (ident.equals(getSimpleName(te, null, false))) {\n+                                                          TreePath path = cc.getTrees().getPath(te);\n+\n+                                                          if (path != null) {\n+                                                              final String symbolName = te.getSimpleName().toString();\n+                                                              final ElementKind kind = te.getKind();\n+                                                              SymbolInformation symbol = new SymbolInformation(symbolName, Utils.elementKind2SymbolKind(kind), tree2Location(cc, path), te.getQualifiedName().toString());\n+\n+                                                              symbol.setDeprecated(false);\n+                                                              symbols.add(symbol);\n+                                                          }\n+                                                      }\n+                                                      for (Element ne : te.getEnclosedElements()) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3OTEwNw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489179107", "bodyText": "Shall be fixed.", "author": "jlahoda", "createdAt": "2020-09-16T05:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkyNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkyOA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134928", "body": "Jackpot:\nwarning: Unused Import", "bodyText": "Jackpot:\nwarning: Unused Import", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Unused Import</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:34Z", "path": "java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.lsp.server;\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.LineMap;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.TreePath;", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 4befabc943..5d2e4b727e 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -21,7 +21,6 @@ package org.netbeans.modules.java.lsp.server;\n import com.sun.source.tree.CompilationUnitTree;\n import com.sun.source.tree.LineMap;\n import com.sun.source.tree.Tree;\n-import com.sun.source.util.TreePath;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 4befabc943..7ec9bb023a 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -21,7 +21,6 @@ package org.netbeans.modules.java.lsp.server;\n import com.sun.source.tree.CompilationUnitTree;\n import com.sun.source.tree.LineMap;\n import com.sun.source.tree.Tree;\n-import com.sun.source.util.TreePath;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n", "next_change": {"commit": "2fcee892e18b7a7d27805b7f875c8cc1e5d6401c", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 7ec9bb023a..f79bcb8bbc 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -27,10 +27,8 @@ import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n import java.net.MalformedURLException;\n import java.net.URI;\n-import java.nio.file.Files;\n import java.util.Properties;\n import javax.lang.model.element.ElementKind;\n import javax.swing.text.Document;\n", "next_change": {"commit": "ea47c7621a53e5e4c73b40fc84761b8344f4e091", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex f79bcb8bbc..849c26fd2c 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -29,6 +29,7 @@ import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.MalformedURLException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.Properties;\n import javax.lang.model.element.ElementKind;\n import javax.swing.text.Document;\n", "next_change": {"commit": "2ae14c0fb2e09816cb2fb9c1ef9aa18b98d3f446", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 849c26fd2c..248f642b8c 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -27,6 +28,7 @@ import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.StringWriter;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n", "next_change": {"commit": "b872ac464730ef99e050d45bf3b3cedae87d0134", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 248f642b8c..309a3de68b 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -34,7 +34,6 @@ import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.Properties;\n import javax.lang.model.element.ElementKind;\n-import javax.swing.text.Document;\n import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n", "next_change": {"commit": "0f2565c436deec16d518df47d5161426bc86cfe9", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 309a3de68b..46ec10517e 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -19,21 +19,28 @@\n package org.netbeans.modules.java.lsp.server;\n \n import com.google.gson.stream.JsonWriter;\n+import com.sun.source.tree.ClassTree;\n import com.sun.source.tree.CompilationUnitTree;\n import com.sun.source.tree.LineMap;\n+import com.sun.source.tree.MethodTree;\n import com.sun.source.tree.Tree;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n+import com.sun.source.tree.VariableTree;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n import java.io.StringWriter;\n import java.net.MalformedURLException;\n import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.Properties;\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.lang.model.element.Element;\n import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.PackageElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.TypeParameterElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.type.ArrayType;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n", "next_change": {"commit": "7bccd054eefd93be34da194d8532e75d38c7bc3d", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 46ec10517e..a3561e6564 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -45,9 +47,11 @@ import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.lsp4j.SymbolTag;\n import org.netbeans.api.editor.document.LineDocument;\n import org.netbeans.api.editor.document.LineDocumentUtils;\n import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.lsp.StructureElement;\n import org.netbeans.modules.editor.java.Utilities;\n import org.openide.cookies.EditorCookie;\n import org.openide.filesystems.FileObject;\n", "next_change": {"commit": "028c7a26de84892bb3d93e3ee30d8b9a9221f2f2", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex a3561e6564..84b39700be 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -43,16 +41,20 @@ import javax.lang.model.element.VariableElement;\n import javax.lang.model.type.ArrayType;\n import javax.lang.model.type.TypeKind;\n import javax.lang.model.type.TypeMirror;\n+import javax.swing.text.BadLocationException;\n import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.SymbolKind;\n import org.eclipse.lsp4j.SymbolTag;\n+import org.netbeans.api.annotations.common.NonNull;\n import org.netbeans.api.editor.document.LineDocument;\n import org.netbeans.api.editor.document.LineDocumentUtils;\n import org.netbeans.api.java.source.CompilationInfo;\n import org.netbeans.api.lsp.StructureElement;\n import org.netbeans.modules.editor.java.Utilities;\n+import org.netbeans.modules.parsing.spi.indexing.support.QuerySupport;\n+import org.netbeans.spi.jumpto.type.SearchType;\n import org.openide.cookies.EditorCookie;\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.URLMapper;\n", "next_change": null}]}}]}}, {"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 309a3de68b..46ec10517e 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -41,11 +48,10 @@ import org.eclipse.lsp4j.SymbolKind;\n import org.netbeans.api.editor.document.LineDocument;\n import org.netbeans.api.editor.document.LineDocumentUtils;\n import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.modules.editor.java.Utilities;\n import org.openide.cookies.EditorCookie;\n import org.openide.filesystems.FileObject;\n-import org.openide.filesystems.FileUtil;\n import org.openide.filesystems.URLMapper;\n-import org.openide.modules.Places;\n import org.openide.text.NbDocument;\n import org.openide.util.Exceptions;\n \n", "next_change": {"commit": "7bccd054eefd93be34da194d8532e75d38c7bc3d", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex 46ec10517e..a3561e6564 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -45,9 +47,11 @@ import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.lsp4j.SymbolTag;\n import org.netbeans.api.editor.document.LineDocument;\n import org.netbeans.api.editor.document.LineDocumentUtils;\n import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.lsp.StructureElement;\n import org.netbeans.modules.editor.java.Utilities;\n import org.openide.cookies.EditorCookie;\n import org.openide.filesystems.FileObject;\n", "next_change": {"commit": "028c7a26de84892bb3d93e3ee30d8b9a9221f2f2", "changed_code": [{"header": "diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\nindex a3561e6564..84b39700be 100644\n--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java\n", "chunk": "@@ -43,16 +41,20 @@ import javax.lang.model.element.VariableElement;\n import javax.lang.model.type.ArrayType;\n import javax.lang.model.type.TypeKind;\n import javax.lang.model.type.TypeMirror;\n+import javax.swing.text.BadLocationException;\n import javax.swing.text.StyledDocument;\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.SymbolKind;\n import org.eclipse.lsp4j.SymbolTag;\n+import org.netbeans.api.annotations.common.NonNull;\n import org.netbeans.api.editor.document.LineDocument;\n import org.netbeans.api.editor.document.LineDocumentUtils;\n import org.netbeans.api.java.source.CompilationInfo;\n import org.netbeans.api.lsp.StructureElement;\n import org.netbeans.modules.editor.java.Utilities;\n+import org.netbeans.modules.parsing.spi.indexing.support.QuerySupport;\n+import org.netbeans.spi.jumpto.type.SearchType;\n import org.openide.cookies.EditorCookie;\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.URLMapper;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "2fcee892e18b7a7d27805b7f875c8cc1e5d6401c", "committedDate": "2021-01-10 10:02:39 +0100", "message": "[NETBEANS-5229] Fixing mapping of jar:file URI to cache and back; disabling ErrorDescriptions in cases when they should be disabled."}, {"oid": "ea47c7621a53e5e4c73b40fc84761b8344f4e091", "committedDate": "2021-05-27 14:11:10 +0200", "message": "Open nbfs: hyperlinks in VSNetBeans as well"}, {"oid": "2ae14c0fb2e09816cb2fb9c1ef9aa18b98d3f446", "committedDate": "2021-07-02 10:44:22 +0200", "message": "Completion provider for VS Code's launch.json."}, {"oid": "b872ac464730ef99e050d45bf3b3cedae87d0134", "committedDate": "2021-10-05 10:05:11 +0200", "message": "LSP: various refactor bugfixes (#3196)"}, {"oid": "41da35720129ef4f4b7c94bd22ef230ead719153", "committedDate": "2021-10-11 20:34:48 +0200", "message": "Apply LSP URI translation to debugger as well. URI translation cache is created."}, {"oid": "0f2565c436deec16d518df47d5161426bc86cfe9", "committedDate": "2021-10-25 14:58:59 +0200", "message": "GR-33089: Enrich Java Outline view by more details. (#3263)"}, {"oid": "82a0ab7d7bc5e4211710bcf754a5c751b3c6e22c", "committedDate": "2022-01-22 17:52:56 +0100", "message": "Fixes to LSP client/server related to semantic highlighting."}, {"oid": "7bccd054eefd93be34da194d8532e75d38c7bc3d", "committedDate": "2022-02-21 12:42:26 +0100", "message": "[NETBEANS-6425] Provide outline view for Groovy file in VSCode. (#3525)"}, {"oid": "26447d1c225df8341d642b878f6bcad912a7e194", "committedDate": "2022-04-28 14:52:21 +0200", "message": "Strip HTML tags in project problems."}, {"oid": "bb9fd66fecacd71d8062527c86e77ee0ae0c7d78", "committedDate": "2022-05-20 08:47:14 +0200", "message": "LSP: Format Document and Format Selection actions implemented. (#4128)"}, {"oid": "028c7a26de84892bb3d93e3ee30d8b9a9221f2f2", "committedDate": "2022-07-12 05:25:09 +0200", "message": "Adding symbol provider to obtain symbols for GoTo Symbol in workspace (#4302)"}, {"oid": "b02e217241d1ea0030a4e4d3196ef43d551fb6de", "committedDate": "2023-01-18 22:33:19 -0300", "message": "Simplified usage String.substring() method from two arguments to one argument if applicable"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkzMQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134931", "body": "Jackpot:\nwarning: toString is never used", "bodyText": "Jackpot:\nwarning: toString is never used", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: toString is never used</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:38Z", "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java", "diffHunk": "@@ -848,6 +869,71 @@ public void logMessage(MessageParams arg0) {\n         assertEquals(2, codeActions.size());\n     }\n \n+    public void testWorkspaceSymbols() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        try (Writer w = new FileWriter(new File(src.getParentFile(), \".test-project\"))) {}\n+        String code = \"public class Test {\\n\" +\n+                      \"    public static class TestNested {}\\n\" +\n+                      \"    public static void testMethod() {}\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        CountDownLatch indexingComplete = new CountDownLatch(1);\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams params) {\n+                if (Server.INDEXING_COMPLETED.equals(params.getMessage())) {\n+                    indexingComplete.countDown();\n+                } else {\n+                    throw new UnsupportedOperationException(\"Unexpected message.\");\n+                }\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeParams initParams = new InitializeParams();\n+        initParams.setRootUri(getWorkDir().toURI().toString());\n+        InitializeResult result = server.initialize(initParams).get();\n+        indexingComplete.await();\n+        List<? extends SymbolInformation> symbols = server.getWorkspaceService().symbol(new WorkspaceSymbolParams(\"Tes\")).get();\n+        List<String> actual = symbols.stream().map(si -> si.getKind() + \":\" + si.getName() + \":\" + si.getContainerName() + \":\" + si.getDeprecated() + \":\" + toString(si.getLocation())).collect(Collectors.toList());\n+        assertEquals(Arrays.asList(\"Class:Test:Test:false:Test.java:0:0-3:1\",\n+                                   \"Constructor:():Test:false:Test.java:0:7-0:7\",\n+                                   \"Method:():Test:false:Test.java:2:4-2:38\",\n+                                   \"Class:TestNested:Test.TestNested:false:Test.java:1:4-1:37\",\n+                                   \"Constructor:():Test.TestNested:false:Test.java:1:18-1:18\"),\n+                     actual);\n+    }\n+\n+    private String toString(Location location) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NzA5MA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489167090", "bodyText": "The method is used (a few lines up) - probably a bug in the checker?", "author": "jlahoda", "createdAt": "2020-09-16T05:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDkzMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk1Ng==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134956", "body": "Jackpot:\nwarning: Variable w is never read", "bodyText": "Jackpot:\nwarning: Variable w is never read", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Variable w is never read</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:50Z", "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java", "diffHunk": "@@ -848,6 +869,71 @@ public void logMessage(MessageParams arg0) {\n         assertEquals(2, codeActions.size());\n     }\n \n+    public void testWorkspaceSymbols() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        try (Writer w = new FileWriter(new File(src.getParentFile(), \".test-project\"))) {}", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3OTAzOA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489179038", "bodyText": "Keeping as it is right now. We might think of tweaking the hint to not warn for cases like this, but unsure.", "author": "jlahoda", "createdAt": "2020-09-16T05:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nindex 5ffd694b1e..a8b3a72d0a 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n", "chunk": "@@ -859,13 +859,13 @@ public class ServerTest extends NbTestCase {\n         serverLauncher.startListening();\n         LanguageServer server = serverLauncher.getRemoteProxy();\n         InitializeParams initParams = new InitializeParams();\n-        initParams.setRootUri(getWorkDir().toURI().toString());\n+        initParams.setRootUri(toURI(getWorkDir()));\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n-        server.getTextDocumentService().didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(src.toURI().toString(), \"java\", 0, code)));\n+        server.getTextDocumentService().didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(toURI(src), \"java\", 0, code)));\n \n         Diagnostic unresolvable = assertDiags(diags, \"Error:2:8-2:12\").get(0);\n-        List<Either<Command, CodeAction>> codeActions = server.getTextDocumentService().codeAction(new CodeActionParams(new TextDocumentIdentifier(src.toURI().toString()), unresolvable.getRange(), new CodeActionContext(Arrays.asList(unresolvable)))).get();\n+        List<Either<Command, CodeAction>> codeActions = server.getTextDocumentService().codeAction(new CodeActionParams(new TextDocumentIdentifier(toURI(src)), unresolvable.getRange(), new CodeActionContext(Arrays.asList(unresolvable)))).get();\n         assertEquals(2, codeActions.size());\n     }\n \n", "next_change": {"commit": "9ce48689f69425a41589aa95b58a7d641cca16de", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nsimilarity index 88%\nrename from java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nrename to java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nindex a8b3a72d0a..2ca7339c6f 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\n", "chunk": "@@ -866,7 +869,126 @@ public class ServerTest extends NbTestCase {\n \n         Diagnostic unresolvable = assertDiags(diags, \"Error:2:8-2:12\").get(0);\n         List<Either<Command, CodeAction>> codeActions = server.getTextDocumentService().codeAction(new CodeActionParams(new TextDocumentIdentifier(toURI(src)), unresolvable.getRange(), new CodeActionContext(Arrays.asList(unresolvable)))).get();\n-        assertEquals(2, codeActions.size());\n+        if (jdk9Plus()) {\n+            assertEquals(2, codeActions.size());\n+        }\n+    }\n+\n+    public void testFindUsages() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        try (Writer w = new FileWriter(new File(src.getParentFile(), \".test-project\"))) {}\n+        String code = \"public class Test {\\n\" +\n+                      \"    int val = new Test2().get();\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        File src2 = new File(getWorkDir(), \"Test2.java\");\n+        try (Writer w = new FileWriter(src2)) {\n+            w.write(\"public class Test2 extends Test {\\n\" +\n+                    \"    Test t;\\n\" +\n+                    \"    void m(Test p) {};\\n\" +\n+                    \"    int get() { return t.val; };\\n\" +\n+                    \"}\\n\");\n+        }\n+        List<Diagnostic>[] diags = new List[1];\n+        CountDownLatch indexingComplete = new CountDownLatch(1);\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+                synchronized (diags) {\n+                    diags[0] = params.getDiagnostics();\n+                    diags.notifyAll();\n+                }\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams params) {\n+                if (Server.INDEXING_COMPLETED.equals(params.getMessage())) {\n+                    indexingComplete.countDown();\n+                } else {\n+                    throw new UnsupportedOperationException(\"Unexpected message.\");\n+                }\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeParams initParams = new InitializeParams();\n+        initParams.setRootUri(getWorkDir().toURI().toString());\n+        InitializeResult result = server.initialize(initParams).get();\n+        indexingComplete.await();\n+        server.getTextDocumentService().didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(toURI(src), \"java\", 0, code)));\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(toURI(src)),\n+                                                         new Position(0, 15),\n+                                                         new ReferenceContext(false));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(toURI(src)),\n+                                                         new Position(0, 15),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\", \"Test.java:0:13-0:17\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(0, 29),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\", \"Test.java:0:13-0:17\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(3, 10),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test.java:1:26-1:29\", \"Test2.java:3:8-3:11\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(3, 27),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test.java:1:8-1:11\", \"Test2.java:3:25-3:28\"));\n+\n+            assertEquals(expected, locations);\n+        }\n     }\n \n     public void testWorkspaceSymbols() throws Exception {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nsimilarity index 72%\nrename from java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nrename to java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nindex 5ffd694b1e..fda5f3f9cb 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\n", "chunk": "@@ -862,11 +1151,62 @@ public class ServerTest extends NbTestCase {\n         initParams.setRootUri(getWorkDir().toURI().toString());\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n-        server.getTextDocumentService().didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(src.toURI().toString(), \"java\", 0, code)));\n+        server.getTextDocumentService().didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(toURI(src), \"java\", 0, code)));\n \n-        Diagnostic unresolvable = assertDiags(diags, \"Error:2:8-2:12\").get(0);\n-        List<Either<Command, CodeAction>> codeActions = server.getTextDocumentService().codeAction(new CodeActionParams(new TextDocumentIdentifier(src.toURI().toString()), unresolvable.getRange(), new CodeActionContext(Arrays.asList(unresolvable)))).get();\n-        assertEquals(2, codeActions.size());\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(toURI(src)),\n+                                                         new Position(0, 15),\n+                                                         new ReferenceContext(false));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(toURI(src)),\n+                                                         new Position(0, 15),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\", \"Test.java:0:13-0:17\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(0, 29),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test2.java:1:4-1:8\", \"Test2.java:0:27-0:31\", \"Test2.java:2:11-2:15\", \"Test.java:0:13-0:17\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(3, 10),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test.java:1:26-1:29\", \"Test2.java:3:8-3:11\"));\n+\n+            assertEquals(expected, locations);\n+        }\n+\n+        {\n+            ReferenceParams params = new ReferenceParams(new TextDocumentIdentifier(src2.toURI().toString()),\n+                                                         new Position(3, 27),\n+                                                         new ReferenceContext(true));\n+\n+            Set<? extends String> locations = server.getTextDocumentService().references(params).get().stream().map(this::toString).collect(Collectors.toSet());\n+            Set<? extends String> expected = new HashSet<>(Arrays.asList(\"Test.java:1:8-1:11\", \"Test2.java:3:25-3:28\"));\n+\n+            assertEquals(expected, locations);\n+        }\n     }\n \n     public void testWorkspaceSymbols() throws Exception {\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk1OA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134958", "body": "Jackpot:\nwarning: Variable result is never read", "bodyText": "Jackpot:\nwarning: Variable result is never read", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Variable result is never read</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:52Z", "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java", "diffHunk": "@@ -848,6 +869,71 @@ public void logMessage(MessageParams arg0) {\n         assertEquals(2, codeActions.size());\n     }\n \n+    public void testWorkspaceSymbols() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        try (Writer w = new FileWriter(new File(src.getParentFile(), \".test-project\"))) {}\n+        String code = \"public class Test {\\n\" +\n+                      \"    public static class TestNested {}\\n\" +\n+                      \"    public static void testMethod() {}\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        CountDownLatch indexingComplete = new CountDownLatch(1);\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams params) {\n+                if (Server.INDEXING_COMPLETED.equals(params.getMessage())) {\n+                    indexingComplete.countDown();\n+                } else {\n+                    throw new UnsupportedOperationException(\"Unexpected message.\");\n+                }\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeParams initParams = new InitializeParams();\n+        initParams.setRootUri(getWorkDir().toURI().toString());\n+        InitializeResult result = server.initialize(initParams).get();", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3ODgxMQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489178811", "bodyText": "Right, not used, intentional here. Keeping as it is right now.", "author": "jlahoda", "createdAt": "2020-09-16T05:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nindex 5ffd694b1e..a8b3a72d0a 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n", "chunk": "@@ -914,7 +914,7 @@ public class ServerTest extends NbTestCase {\n         serverLauncher.startListening();\n         LanguageServer server = serverLauncher.getRemoteProxy();\n         InitializeParams initParams = new InitializeParams();\n-        initParams.setRootUri(getWorkDir().toURI().toString());\n+        initParams.setRootUri(toURI(getWorkDir()));\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n         List<? extends SymbolInformation> symbols = server.getWorkspaceService().symbol(new WorkspaceSymbolParams(\"Tes\")).get();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nsimilarity index 72%\nrename from java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nrename to java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nindex 5ffd694b1e..fda5f3f9cb 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\n", "chunk": "@@ -914,7 +1254,7 @@ public class ServerTest extends NbTestCase {\n         serverLauncher.startListening();\n         LanguageServer server = serverLauncher.getRemoteProxy();\n         InitializeParams initParams = new InitializeParams();\n-        initParams.setRootUri(getWorkDir().toURI().toString());\n+        initParams.setRootUri(toURI(getWorkDir()));\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n         List<? extends SymbolInformation> symbols = server.getWorkspaceService().symbol(new WorkspaceSymbolParams(\"Tes\")).get();\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk2MA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134960", "body": "Jackpot:\nwarning: Use Utilities API for URI/File conversion", "bodyText": "Jackpot:\nwarning: Use Utilities API for URI/File conversion", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Use Utilities API for URI/File conversion</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:53Z", "path": "java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java", "diffHunk": "@@ -848,6 +869,71 @@ public void logMessage(MessageParams arg0) {\n         assertEquals(2, codeActions.size());\n     }\n \n+    public void testWorkspaceSymbols() throws Exception {\n+        File src = new File(getWorkDir(), \"Test.java\");\n+        src.getParentFile().mkdirs();\n+        try (Writer w = new FileWriter(new File(src.getParentFile(), \".test-project\"))) {}\n+        String code = \"public class Test {\\n\" +\n+                      \"    public static class TestNested {}\\n\" +\n+                      \"    public static void testMethod() {}\\n\" +\n+                      \"}\\n\";\n+        try (Writer w = new FileWriter(src)) {\n+            w.write(code);\n+        }\n+        CountDownLatch indexingComplete = new CountDownLatch(1);\n+        Launcher<LanguageServer> serverLauncher = LSPLauncher.createClientLauncher(new LanguageClient() {\n+            @Override\n+            public void telemetryEvent(Object arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void publishDiagnostics(PublishDiagnosticsParams params) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void showMessage(MessageParams params) {\n+                if (Server.INDEXING_COMPLETED.equals(params.getMessage())) {\n+                    indexingComplete.countDown();\n+                } else {\n+                    throw new UnsupportedOperationException(\"Unexpected message.\");\n+                }\n+            }\n+\n+            @Override\n+            public CompletableFuture<MessageActionItem> showMessageRequest(ShowMessageRequestParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+\n+            @Override\n+            public void logMessage(MessageParams arg0) {\n+                throw new UnsupportedOperationException(\"Not supported yet.\");\n+            }\n+        }, client.getInputStream(), client.getOutputStream());\n+        serverLauncher.startListening();\n+        LanguageServer server = serverLauncher.getRemoteProxy();\n+        InitializeParams initParams = new InitializeParams();\n+        initParams.setRootUri(getWorkDir().toURI().toString());", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3ODYzMw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489178633", "bodyText": "Right - fixed (by also introducing a utility in the test).", "author": "jlahoda", "createdAt": "2020-09-16T05:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nindex 5ffd694b1e..a8b3a72d0a 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n", "chunk": "@@ -914,7 +914,7 @@ public class ServerTest extends NbTestCase {\n         serverLauncher.startListening();\n         LanguageServer server = serverLauncher.getRemoteProxy();\n         InitializeParams initParams = new InitializeParams();\n-        initParams.setRootUri(getWorkDir().toURI().toString());\n+        initParams.setRootUri(toURI(getWorkDir()));\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n         List<? extends SymbolInformation> symbols = server.getWorkspaceService().symbol(new WorkspaceSymbolParams(\"Tes\")).get();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nsimilarity index 72%\nrename from java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\nrename to java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\nindex 5ffd694b1e..fda5f3f9cb 100644\n--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/ServerTest.java\n+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java\n", "chunk": "@@ -914,7 +1254,7 @@ public class ServerTest extends NbTestCase {\n         serverLauncher.startListening();\n         LanguageServer server = serverLauncher.getRemoteProxy();\n         InitializeParams initParams = new InitializeParams();\n-        initParams.setRootUri(getWorkDir().toURI().toString());\n+        initParams.setRootUri(toURI(getWorkDir()));\n         InitializeResult result = server.initialize(initParams).get();\n         indexingComplete.await();\n         List<? extends SymbolInformation> symbols = server.getWorkspaceService().symbol(new WorkspaceSymbolParams(\"Tes\")).get();\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk2NQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134965", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:55Z", "path": "java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java", "diffHunk": "@@ -117,145 +119,187 @@ public void computeSymbolNames(final Context context, final Result result) {\n             final Cache cache = scanInProgress ?\n                 Cache.create(textToSearch, st) :\n                 null;\n-            String prefix = null;\n-            final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n-            if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n-                prefix = textToSearch.substring(0, dotIndex);\n-                textToSearch = textToSearch.substring(dotIndex+1);\n-            }\n-            final String textToHighLight = textToSearch;\n-            ClassIndex.NameKind _kind;\n-            boolean _caseSensitive;\n-            switch (st) {\n-                case PREFIX:\n-                    _kind = ClassIndex.NameKind.PREFIX;\n-                    _caseSensitive = true;\n-                    break;\n-                case REGEXP:\n-                    _kind = ClassIndex.NameKind.REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = true;\n-                    break;\n-                case CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n-                    _caseSensitive = false;\n-                    break;\n-                case EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.SIMPLE_NAME;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_PREFIX:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_REGEXP:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = false;\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException();\n-            }\n-            final String ident = textToSearch;\n-            final ClassIndex.NameKind kind = _kind;\n-            final boolean caseSensitive = _caseSensitive;\n-            final Pair<NameMatcher,Boolean> restriction;\n-            if (prefix != null) {\n-                restriction = compileName(prefix,caseSensitive);\n-                result.setHighlightText(textToHighLight);\n-            } else {\n-                restriction = null;\n-            }\n-            try {\n-                final ClassIndexManager manager = ClassIndexManager.getDefault();\n-\n-                Collection<FileObject> roots = QuerySupport.findRoots(\n-                        (Project)null,\n-                        Collections.singleton(ClassPath.SOURCE),\n-                        Collections.<String>emptySet(),\n-                        Collections.<String>emptySet());\n-\n-                final Set<URL> rootUrls = new HashSet<>();\n-                for(FileObject root : roots) {\n-                    if (canceled) {\n-                        return;\n+            doComputeSymbols(st, textToSearch, new ResultHandler() {\n+                private FileObject root;\n+                private ProjectInformation projectInfo;\n+                private ClassIndexImpl ci;\n+                @Override\n+                public void setHighlightText(String text) {\n+                    result.setHighlightText(text);\n+                }\n+\n+                @Override\n+                public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                    try {\n+                        Project project = FileOwnerQuery.getOwner(root);\n+\n+                        this.root = root;\n+                        this.projectInfo = project == null ?\n+                                null :\n+                                project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n+                        this.ci = ci;\n+                        exec.run();\n+                    } finally {\n+                        this.root = null;\n+                        this.projectInfo = null;\n+                        this.ci = null;\n                     }\n-                    rootUrls.add(root.toURL());\n                 }\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n-                    for (URL url : rootUrls) {\n-                        LOGGER.log(Level.FINE, \"  {0}\", url); //NOI18N\n+                @Override\n+                public void handleResult(ElementHandle<TypeElement> owner, String ident, boolean caseSensitive) {\n+                    final AsyncJavaSymbolDescriptor d = new AsyncJavaSymbolDescriptor(\n+                            projectInfo,\n+                            root,\n+                            ci,\n+                            owner,\n+                            ident,\n+                            caseSensitive);\n+                    result.addResult(d);\n+                    if (cache != null) {\n+                        cache.offer(d);\n                     }\n-                    LOGGER.log(Level.FINE, \"-------------------------\"); //NOI18N\n                 }\n-                //Perform all queries in single op\n-                IndexManager.priorityAccess(new IndexManager.Action<Void>() {\n-                    @Override\n-                    public Void run() throws IOException, InterruptedException {\n-                        for (URL url : rootUrls) {\n-                            if (canceled) {\n-                                return null;\n-                            }\n-                            final FileObject root = URLMapper.findFileObject(url);\n-                            if (root == null) {\n-                                continue;\n-                            }\n-\n-                            final Project project = FileOwnerQuery.getOwner(root);\n-                            final ProjectInformation projectInfo = project == null ?\n-                                    null :\n-                                    project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n-                            final ClassIndexImpl impl = manager.getUsagesQuery(root.toURL(), true);\n-                            if (impl != null) {\n+            }, true, canceled);\n+        } finally {\n+            clearCancel();\n+        }\n+    }\n+\n+    public static void doComputeSymbols(SearchType st, String textToSearch, ResultHandler handler, boolean async, AtomicBoolean canceled) {\n+        String prefix = null;\n+        final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n+        if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n+            prefix = textToSearch.substring(0, dotIndex);\n+            textToSearch = textToSearch.substring(dotIndex+1);\n+        }\n+        final String textToHighLight = textToSearch;\n+        ClassIndex.NameKind _kind;\n+        boolean _caseSensitive;\n+        switch (st) {\n+            case PREFIX:\n+                _kind = ClassIndex.NameKind.PREFIX;\n+                _caseSensitive = true;\n+                break;\n+            case REGEXP:\n+                _kind = ClassIndex.NameKind.REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = true;\n+                break;\n+            case CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n+                _caseSensitive = false;\n+                break;\n+            case EXACT_NAME:\n+                _kind = ClassIndex.NameKind.SIMPLE_NAME;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_PREFIX:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_EXACT_NAME:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_REGEXP:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = false;\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n+        }\n+        final String ident = textToSearch;\n+        final ClassIndex.NameKind kind = _kind;\n+        final boolean caseSensitive = _caseSensitive;\n+        final Pair<NameMatcher,Boolean> restriction;\n+        if (prefix != null) {\n+            restriction = compileName(prefix,caseSensitive);\n+            handler.setHighlightText(textToHighLight);\n+        } else {\n+            restriction = null;\n+        }\n+        try {\n+            final ClassIndexManager manager = ClassIndexManager.getDefault();\n+\n+            Collection<FileObject> roots = QuerySupport.findRoots(\n+                    (Project)null,\n+                    Collections.singleton(ClassPath.SOURCE),\n+                    Collections.<String>emptySet(),\n+                    Collections.<String>emptySet());\n+\n+            final Set<URL> rootUrls = new HashSet<>();\n+            for(FileObject root : roots) {\n+                if (canceled.get()) {\n+                    return;\n+                }\n+                rootUrls.add(root.toURL());\n+            }\n+\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n+                for (URL url : rootUrls) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTU0MQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165541", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk2NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk3Ng==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134976", "body": "Jackpot:\nwarning: Unused Import", "bodyText": "Jackpot:\nwarning: Unused Import", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Unused Import</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:57Z", "path": "java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java", "diffHunk": "@@ -29,6 +29,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\nindex 292e20c4c9..8a568566d3 100644\n--- a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n+++ b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n", "chunk": "@@ -30,7 +30,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Consumer;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.lang.model.element.Element;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\nindex 292e20c4c9..8a568566d3 100644\n--- a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n+++ b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n", "chunk": "@@ -30,7 +30,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Consumer;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.lang.model.element.Element;\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk3OA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134978", "body": "Jackpot:\nwarning: This anonymous inner class creation can be turned into a lambda expression.", "bodyText": "Jackpot:\nwarning: This anonymous inner class creation can be turned into a lambda expression.", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: This anonymous inner class creation can be turned into a lambda expression.</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:21:59Z", "path": "java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java", "diffHunk": "@@ -117,145 +119,187 @@ public void computeSymbolNames(final Context context, final Result result) {\n             final Cache cache = scanInProgress ?\n                 Cache.create(textToSearch, st) :\n                 null;\n-            String prefix = null;\n-            final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n-            if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n-                prefix = textToSearch.substring(0, dotIndex);\n-                textToSearch = textToSearch.substring(dotIndex+1);\n-            }\n-            final String textToHighLight = textToSearch;\n-            ClassIndex.NameKind _kind;\n-            boolean _caseSensitive;\n-            switch (st) {\n-                case PREFIX:\n-                    _kind = ClassIndex.NameKind.PREFIX;\n-                    _caseSensitive = true;\n-                    break;\n-                case REGEXP:\n-                    _kind = ClassIndex.NameKind.REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = true;\n-                    break;\n-                case CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n-                    _caseSensitive = false;\n-                    break;\n-                case EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.SIMPLE_NAME;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_PREFIX:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_REGEXP:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = false;\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException();\n-            }\n-            final String ident = textToSearch;\n-            final ClassIndex.NameKind kind = _kind;\n-            final boolean caseSensitive = _caseSensitive;\n-            final Pair<NameMatcher,Boolean> restriction;\n-            if (prefix != null) {\n-                restriction = compileName(prefix,caseSensitive);\n-                result.setHighlightText(textToHighLight);\n-            } else {\n-                restriction = null;\n-            }\n-            try {\n-                final ClassIndexManager manager = ClassIndexManager.getDefault();\n-\n-                Collection<FileObject> roots = QuerySupport.findRoots(\n-                        (Project)null,\n-                        Collections.singleton(ClassPath.SOURCE),\n-                        Collections.<String>emptySet(),\n-                        Collections.<String>emptySet());\n-\n-                final Set<URL> rootUrls = new HashSet<>();\n-                for(FileObject root : roots) {\n-                    if (canceled) {\n-                        return;\n+            doComputeSymbols(st, textToSearch, new ResultHandler() {\n+                private FileObject root;\n+                private ProjectInformation projectInfo;\n+                private ClassIndexImpl ci;\n+                @Override\n+                public void setHighlightText(String text) {\n+                    result.setHighlightText(text);\n+                }\n+\n+                @Override\n+                public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                    try {\n+                        Project project = FileOwnerQuery.getOwner(root);\n+\n+                        this.root = root;\n+                        this.projectInfo = project == null ?\n+                                null :\n+                                project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n+                        this.ci = ci;\n+                        exec.run();\n+                    } finally {\n+                        this.root = null;\n+                        this.projectInfo = null;\n+                        this.ci = null;\n                     }\n-                    rootUrls.add(root.toURL());\n                 }\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n-                    for (URL url : rootUrls) {\n-                        LOGGER.log(Level.FINE, \"  {0}\", url); //NOI18N\n+                @Override\n+                public void handleResult(ElementHandle<TypeElement> owner, String ident, boolean caseSensitive) {\n+                    final AsyncJavaSymbolDescriptor d = new AsyncJavaSymbolDescriptor(\n+                            projectInfo,\n+                            root,\n+                            ci,\n+                            owner,\n+                            ident,\n+                            caseSensitive);\n+                    result.addResult(d);\n+                    if (cache != null) {\n+                        cache.offer(d);\n                     }\n-                    LOGGER.log(Level.FINE, \"-------------------------\"); //NOI18N\n                 }\n-                //Perform all queries in single op\n-                IndexManager.priorityAccess(new IndexManager.Action<Void>() {\n-                    @Override\n-                    public Void run() throws IOException, InterruptedException {\n-                        for (URL url : rootUrls) {\n-                            if (canceled) {\n-                                return null;\n-                            }\n-                            final FileObject root = URLMapper.findFileObject(url);\n-                            if (root == null) {\n-                                continue;\n-                            }\n-\n-                            final Project project = FileOwnerQuery.getOwner(root);\n-                            final ProjectInformation projectInfo = project == null ?\n-                                    null :\n-                                    project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n-                            final ClassIndexImpl impl = manager.getUsagesQuery(root.toURL(), true);\n-                            if (impl != null) {\n+            }, true, canceled);\n+        } finally {\n+            clearCancel();\n+        }\n+    }\n+\n+    public static void doComputeSymbols(SearchType st, String textToSearch, ResultHandler handler, boolean async, AtomicBoolean canceled) {\n+        String prefix = null;\n+        final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n+        if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n+            prefix = textToSearch.substring(0, dotIndex);\n+            textToSearch = textToSearch.substring(dotIndex+1);\n+        }\n+        final String textToHighLight = textToSearch;\n+        ClassIndex.NameKind _kind;\n+        boolean _caseSensitive;\n+        switch (st) {\n+            case PREFIX:\n+                _kind = ClassIndex.NameKind.PREFIX;\n+                _caseSensitive = true;\n+                break;\n+            case REGEXP:\n+                _kind = ClassIndex.NameKind.REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = true;\n+                break;\n+            case CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n+                _caseSensitive = false;\n+                break;\n+            case EXACT_NAME:\n+                _kind = ClassIndex.NameKind.SIMPLE_NAME;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_PREFIX:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_EXACT_NAME:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_REGEXP:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = false;\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n+        }\n+        final String ident = textToSearch;\n+        final ClassIndex.NameKind kind = _kind;\n+        final boolean caseSensitive = _caseSensitive;\n+        final Pair<NameMatcher,Boolean> restriction;\n+        if (prefix != null) {\n+            restriction = compileName(prefix,caseSensitive);\n+            handler.setHighlightText(textToHighLight);\n+        } else {\n+            restriction = null;\n+        }\n+        try {\n+            final ClassIndexManager manager = ClassIndexManager.getDefault();\n+\n+            Collection<FileObject> roots = QuerySupport.findRoots(\n+                    (Project)null,\n+                    Collections.singleton(ClassPath.SOURCE),\n+                    Collections.<String>emptySet(),\n+                    Collections.<String>emptySet());\n+\n+            final Set<URL> rootUrls = new HashSet<>();\n+            for(FileObject root : roots) {\n+                if (canceled.get()) {\n+                    return;\n+                }\n+                rootUrls.add(root.toURL());\n+            }\n+\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n+                for (URL url : rootUrls) {\n+                    LOGGER.log(Level.FINE, \"  {0}\", url); //NOI18N\n+                }\n+                LOGGER.log(Level.FINE, \"-------------------------\"); //NOI18N\n+            }\n+            //Perform all queries in single op\n+            IndexManager.priorityAccess(new IndexManager.Action<Void>() {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3ODQxNw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489178417", "bodyText": "It could, but the body is fairly long. Seems the anonymous class is a better fit here.", "author": "jlahoda", "createdAt": "2020-09-16T05:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk3OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk5MA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134990", "body": "Jackpot:\nwarning: Use ProjectUtils API", "bodyText": "Jackpot:\nwarning: Use ProjectUtils API", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Use ProjectUtils API</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:10Z", "path": "java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java", "diffHunk": "@@ -117,145 +119,187 @@ public void computeSymbolNames(final Context context, final Result result) {\n             final Cache cache = scanInProgress ?\n                 Cache.create(textToSearch, st) :\n                 null;\n-            String prefix = null;\n-            final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n-            if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n-                prefix = textToSearch.substring(0, dotIndex);\n-                textToSearch = textToSearch.substring(dotIndex+1);\n-            }\n-            final String textToHighLight = textToSearch;\n-            ClassIndex.NameKind _kind;\n-            boolean _caseSensitive;\n-            switch (st) {\n-                case PREFIX:\n-                    _kind = ClassIndex.NameKind.PREFIX;\n-                    _caseSensitive = true;\n-                    break;\n-                case REGEXP:\n-                    _kind = ClassIndex.NameKind.REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = true;\n-                    break;\n-                case CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n-                    _caseSensitive = false;\n-                    break;\n-                case EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.SIMPLE_NAME;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_PREFIX:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_REGEXP:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = false;\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException();\n-            }\n-            final String ident = textToSearch;\n-            final ClassIndex.NameKind kind = _kind;\n-            final boolean caseSensitive = _caseSensitive;\n-            final Pair<NameMatcher,Boolean> restriction;\n-            if (prefix != null) {\n-                restriction = compileName(prefix,caseSensitive);\n-                result.setHighlightText(textToHighLight);\n-            } else {\n-                restriction = null;\n-            }\n-            try {\n-                final ClassIndexManager manager = ClassIndexManager.getDefault();\n-\n-                Collection<FileObject> roots = QuerySupport.findRoots(\n-                        (Project)null,\n-                        Collections.singleton(ClassPath.SOURCE),\n-                        Collections.<String>emptySet(),\n-                        Collections.<String>emptySet());\n-\n-                final Set<URL> rootUrls = new HashSet<>();\n-                for(FileObject root : roots) {\n-                    if (canceled) {\n-                        return;\n+            doComputeSymbols(st, textToSearch, new ResultHandler() {\n+                private FileObject root;\n+                private ProjectInformation projectInfo;\n+                private ClassIndexImpl ci;\n+                @Override\n+                public void setHighlightText(String text) {\n+                    result.setHighlightText(text);\n+                }\n+\n+                @Override\n+                public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                    try {\n+                        Project project = FileOwnerQuery.getOwner(root);\n+\n+                        this.root = root;\n+                        this.projectInfo = project == null ?\n+                                null :\n+                                project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTgxMQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165811", "bodyText": "Intentionally not using ProjectUtils at this place.", "author": "jlahoda", "createdAt": "2020-09-16T05:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk5MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNDk5OQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475134999", "body": "Jackpot:\nwarning: Unnecessary return statement", "bodyText": "Jackpot:\nwarning: Unnecessary return statement", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Unnecessary return statement</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:12Z", "path": "java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java", "diffHunk": "@@ -117,145 +119,187 @@ public void computeSymbolNames(final Context context, final Result result) {\n             final Cache cache = scanInProgress ?\n                 Cache.create(textToSearch, st) :\n                 null;\n-            String prefix = null;\n-            final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n-            if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n-                prefix = textToSearch.substring(0, dotIndex);\n-                textToSearch = textToSearch.substring(dotIndex+1);\n-            }\n-            final String textToHighLight = textToSearch;\n-            ClassIndex.NameKind _kind;\n-            boolean _caseSensitive;\n-            switch (st) {\n-                case PREFIX:\n-                    _kind = ClassIndex.NameKind.PREFIX;\n-                    _caseSensitive = true;\n-                    break;\n-                case REGEXP:\n-                    _kind = ClassIndex.NameKind.REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = true;\n-                    break;\n-                case CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_CAMEL_CASE:\n-                    _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n-                    _caseSensitive = false;\n-                    break;\n-                case EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.SIMPLE_NAME;\n-                    _caseSensitive = true;\n-                    break;\n-                case CASE_INSENSITIVE_PREFIX:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_EXACT_NAME:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    _caseSensitive = false;\n-                    break;\n-                case CASE_INSENSITIVE_REGEXP:\n-                    _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n-                    textToSearch = NameMatcherFactory.wildcardsToRegexp(\n-                            removeNonJavaChars(textToSearch),\n-                            true);\n-                    _caseSensitive = false;\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException();\n-            }\n-            final String ident = textToSearch;\n-            final ClassIndex.NameKind kind = _kind;\n-            final boolean caseSensitive = _caseSensitive;\n-            final Pair<NameMatcher,Boolean> restriction;\n-            if (prefix != null) {\n-                restriction = compileName(prefix,caseSensitive);\n-                result.setHighlightText(textToHighLight);\n-            } else {\n-                restriction = null;\n-            }\n-            try {\n-                final ClassIndexManager manager = ClassIndexManager.getDefault();\n-\n-                Collection<FileObject> roots = QuerySupport.findRoots(\n-                        (Project)null,\n-                        Collections.singleton(ClassPath.SOURCE),\n-                        Collections.<String>emptySet(),\n-                        Collections.<String>emptySet());\n-\n-                final Set<URL> rootUrls = new HashSet<>();\n-                for(FileObject root : roots) {\n-                    if (canceled) {\n-                        return;\n+            doComputeSymbols(st, textToSearch, new ResultHandler() {\n+                private FileObject root;\n+                private ProjectInformation projectInfo;\n+                private ClassIndexImpl ci;\n+                @Override\n+                public void setHighlightText(String text) {\n+                    result.setHighlightText(text);\n+                }\n+\n+                @Override\n+                public void runRoot(FileObject root, ClassIndexImpl ci, Exec exec) throws IOException, InterruptedException {\n+                    try {\n+                        Project project = FileOwnerQuery.getOwner(root);\n+\n+                        this.root = root;\n+                        this.projectInfo = project == null ?\n+                                null :\n+                                project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n+                        this.ci = ci;\n+                        exec.run();\n+                    } finally {\n+                        this.root = null;\n+                        this.projectInfo = null;\n+                        this.ci = null;\n                     }\n-                    rootUrls.add(root.toURL());\n                 }\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n-                    for (URL url : rootUrls) {\n-                        LOGGER.log(Level.FINE, \"  {0}\", url); //NOI18N\n+                @Override\n+                public void handleResult(ElementHandle<TypeElement> owner, String ident, boolean caseSensitive) {\n+                    final AsyncJavaSymbolDescriptor d = new AsyncJavaSymbolDescriptor(\n+                            projectInfo,\n+                            root,\n+                            ci,\n+                            owner,\n+                            ident,\n+                            caseSensitive);\n+                    result.addResult(d);\n+                    if (cache != null) {\n+                        cache.offer(d);\n                     }\n-                    LOGGER.log(Level.FINE, \"-------------------------\"); //NOI18N\n                 }\n-                //Perform all queries in single op\n-                IndexManager.priorityAccess(new IndexManager.Action<Void>() {\n-                    @Override\n-                    public Void run() throws IOException, InterruptedException {\n-                        for (URL url : rootUrls) {\n-                            if (canceled) {\n-                                return null;\n-                            }\n-                            final FileObject root = URLMapper.findFileObject(url);\n-                            if (root == null) {\n-                                continue;\n-                            }\n-\n-                            final Project project = FileOwnerQuery.getOwner(root);\n-                            final ProjectInformation projectInfo = project == null ?\n-                                    null :\n-                                    project.getLookup().lookup(ProjectInformation.class);   //Intentionally does not use ProjectUtils.getInformation() it does project icon annotation which is expensive\n-                            final ClassIndexImpl impl = manager.getUsagesQuery(root.toURL(), true);\n-                            if (impl != null) {\n+            }, true, canceled);\n+        } finally {\n+            clearCancel();\n+        }\n+    }\n+\n+    public static void doComputeSymbols(SearchType st, String textToSearch, ResultHandler handler, boolean async, AtomicBoolean canceled) {\n+        String prefix = null;\n+        final int dotIndex = textToSearch.lastIndexOf('.'); //NOI18N\n+        if (dotIndex > 0 && dotIndex != textToSearch.length()-1) {\n+            prefix = textToSearch.substring(0, dotIndex);\n+            textToSearch = textToSearch.substring(dotIndex+1);\n+        }\n+        final String textToHighLight = textToSearch;\n+        ClassIndex.NameKind _kind;\n+        boolean _caseSensitive;\n+        switch (st) {\n+            case PREFIX:\n+                _kind = ClassIndex.NameKind.PREFIX;\n+                _caseSensitive = true;\n+                break;\n+            case REGEXP:\n+                _kind = ClassIndex.NameKind.REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = true;\n+                break;\n+            case CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_CAMEL_CASE:\n+                _kind = ClassIndex.NameKind.CAMEL_CASE_INSENSITIVE;\n+                _caseSensitive = false;\n+                break;\n+            case EXACT_NAME:\n+                _kind = ClassIndex.NameKind.SIMPLE_NAME;\n+                _caseSensitive = true;\n+                break;\n+            case CASE_INSENSITIVE_PREFIX:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_PREFIX;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_EXACT_NAME:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                _caseSensitive = false;\n+                break;\n+            case CASE_INSENSITIVE_REGEXP:\n+                _kind = ClassIndex.NameKind.CASE_INSENSITIVE_REGEXP;\n+                textToSearch = NameMatcherFactory.wildcardsToRegexp(\n+                        removeNonJavaChars(textToSearch),\n+                        true);\n+                _caseSensitive = false;\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n+        }\n+        final String ident = textToSearch;\n+        final ClassIndex.NameKind kind = _kind;\n+        final boolean caseSensitive = _caseSensitive;\n+        final Pair<NameMatcher,Boolean> restriction;\n+        if (prefix != null) {\n+            restriction = compileName(prefix,caseSensitive);\n+            handler.setHighlightText(textToHighLight);\n+        } else {\n+            restriction = null;\n+        }\n+        try {\n+            final ClassIndexManager manager = ClassIndexManager.getDefault();\n+\n+            Collection<FileObject> roots = QuerySupport.findRoots(\n+                    (Project)null,\n+                    Collections.singleton(ClassPath.SOURCE),\n+                    Collections.<String>emptySet(),\n+                    Collections.<String>emptySet());\n+\n+            final Set<URL> rootUrls = new HashSet<>();\n+            for(FileObject root : roots) {\n+                if (canceled.get()) {\n+                    return;\n+                }\n+                rootUrls.add(root.toURL());\n+            }\n+\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.log(Level.FINE, \"Querying following roots:\"); //NOI18N\n+                for (URL url : rootUrls) {\n+                    LOGGER.log(Level.FINE, \"  {0}\", url); //NOI18N\n+                }\n+                LOGGER.log(Level.FINE, \"-------------------------\"); //NOI18N\n+            }\n+            //Perform all queries in single op\n+            IndexManager.priorityAccess(new IndexManager.Action<Void>() {\n+                @Override\n+                public Void run() throws IOException, InterruptedException {\n+                    for (URL url : rootUrls) {\n+                        if (canceled.get()) {\n+                            return null;\n+                        }\n+                        final FileObject root = URLMapper.findFileObject(url);\n+                        if (root == null) {\n+                            continue;\n+                        }\n+\n+                        final ClassIndexImpl impl = manager.getUsagesQuery(root.toURL(), true);\n+                        if (impl != null) {\n+                            handler.runRoot(root, impl, () -> {\n                                 final Map<ElementHandle<TypeElement>,Set<String>> r = new HashMap<>();\n                                 impl.getDeclaredElements(ident, kind, DocumentUtil.typeElementConvertor(),r);\n                                 if (!r.isEmpty()) {\n                                     for (final Map.Entry<ElementHandle<TypeElement>,Set<String>> p : r.entrySet()) {\n                                         final ElementHandle<TypeElement> owner = p.getKey();\n                                         for (String symbol : p.getValue()) {\n                                             if (matchesRestrictions(owner.getQualifiedName(), symbol, restriction, caseSensitive)) {\n-                                                final AsyncJavaSymbolDescriptor d = new AsyncJavaSymbolDescriptor(\n-                                                        projectInfo,\n-                                                        root,\n-                                                        impl,\n-                                                        owner,\n-                                                        symbol,\n-                                                        caseSensitive);\n-                                                result.addResult(d);\n-                                                if (cache != null) {\n-                                                    cache.offer(d);\n-                                                }\n+                                                handler.handleResult(owner, symbol, caseSensitive);\n                                             }\n                                         }\n                                     }\n                                 }\n-                            }\n+                            });\n                         }\n-                        return null;\n                     }\n-                });\n-            } catch (IOException ioe) {\n-                Exceptions.printStackTrace(ioe);\n-            }\n-            catch (InterruptedException ie) {\n-                return;\n-            }\n-        } finally {\n-            clearCancel();\n+                    return null;\n+                }\n+            });\n+        } catch (IOException ioe) {\n+            Exceptions.printStackTrace(ioe);\n+        }\n+        catch (InterruptedException ie) {\n+            return;", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\nindex 292e20c4c9..8a568566d3 100644\n--- a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n+++ b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n", "chunk": "@@ -288,9 +287,8 @@ public class JavaSymbolProvider implements SymbolProvider {\n             });\n         } catch (IOException ioe) {\n             Exceptions.printStackTrace(ioe);\n-        }\n-        catch (InterruptedException ie) {\n-            return;\n+        } catch (InterruptedException ie) {\n+            //ignore\n         }\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\nindex 292e20c4c9..8a568566d3 100644\n--- a/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n+++ b/java/java.sourceui/src/org/netbeans/modules/java/source/ui/JavaSymbolProvider.java\n", "chunk": "@@ -288,9 +287,8 @@ public class JavaSymbolProvider implements SymbolProvider {\n             });\n         } catch (IOException ioe) {\n             Exceptions.printStackTrace(ioe);\n-        }\n-        catch (InterruptedException ie) {\n-            return;\n+        } catch (InterruptedException ie) {\n+            //ignore\n         }\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAwNw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475135007", "body": "Jackpot:\nwarning: Field prj2Server can be final", "bodyText": "Jackpot:\nwarning: Field prj2Server can be final", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Field prj2Server can be final</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:14Z", "path": "cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java", "diffHunk": "@@ -64,9 +64,10 @@\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n+    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 5f139895a8..9961f044d8 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -67,7 +67,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n     private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "903433f01b1578cde184f6ea85f3c651e42b7e5f", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 9961f044d8..27a39710a8 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -64,7 +64,6 @@ import org.openide.modules.Places;\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n-    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n     private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 5f139895a8..27a39710a8 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -64,10 +64,9 @@ import org.openide.modules.Places;\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n-    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "281781d091b76bd93433c3c678090a7142f1ab10", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 27a39710a8..877c6199d2 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -66,7 +67,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "1fc3ac23142085aed16c1a89e79cd0c1efb30cae", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 877c6199d2..d303b1704c 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -67,7 +66,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n+    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "ae9bdd26609405b722390259b7109dba7da10ebe", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex d303b1704c..6e73272117 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -66,7 +67,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "281781d091b76bd93433c3c678090a7142f1ab10", "committedDate": "2021-04-05 23:33:35 +0200", "message": "When LSP Server fails to start too many times, don't try start it again."}, {"oid": "1fc3ac23142085aed16c1a89e79cd0c1efb30cae", "committedDate": "2021-04-11 19:28:59 +0200", "message": "Fixing newly created cpplite project, avoiding starting the C/C++ LSP server when the configuration is not readable."}, {"oid": "a4444904abf05c843f9eb1eb07637e326eadedc3", "committedDate": "2021-05-21 22:16:43 +0200", "message": "Implement suggestions from PR-2877"}, {"oid": "ae9bdd26609405b722390259b7109dba7da10ebe", "committedDate": "2021-05-23 08:07:17 +0200", "message": "Merge pull request #2973 from matthiasblaesing/pr-2877"}, {"oid": "48c5b0f71f117403aae27475809aa759ca82c006", "committedDate": "2021-09-25 22:34:54 +0200", "message": "Prevent NullPointerException in CPP LanguageServerImpl"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAwOQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475135009", "body": "Jackpot:\nwarning: Variable requiresCustomFiltering is never read", "bodyText": "Jackpot:\nwarning: Variable requiresCustomFiltering is never read", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Variable requiresCustomFiltering is never read</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:16Z", "path": "ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java", "diffHunk": "@@ -198,6 +198,7 @@ public void setSymbolProvider(SymbolDescriptor desc, SymbolProvider provider) {\n         private boolean dirty;\n         private boolean highlightTextAlreadySet;\n         private int retry;\n+        private boolean requiresCustomFiltering;", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3ODEyOQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489178129", "bodyText": "Oops. Should be fixed now.", "author": "jlahoda", "createdAt": "2020-09-16T05:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java b/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\nindex 97b8ec25d3..6f7dfdac4d 100644\n--- a/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\n+++ b/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\n", "chunk": "@@ -198,7 +198,6 @@ public interface SymbolProvider {\n         private boolean dirty;\n         private boolean highlightTextAlreadySet;\n         private int retry;\n-        private boolean requiresCustomFiltering;\n \n         Result(\n                 @NonNull final Collection<? super SymbolDescriptor> result,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java b/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\nindex 97b8ec25d3..6f7dfdac4d 100644\n--- a/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\n+++ b/ide/jumpto/src/org/netbeans/spi/jumpto/symbol/SymbolProvider.java\n", "chunk": "@@ -198,7 +198,6 @@ public interface SymbolProvider {\n         private boolean dirty;\n         private boolean highlightTextAlreadySet;\n         private int retry;\n-        private boolean requiresCustomFiltering;\n \n         Result(\n                 @NonNull final Collection<? super SymbolDescriptor> result,\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "7b26a0e102fe13d5df599d1b1393b430084acbcf", "committedDate": "2023-03-28 17:35:05 +0200", "message": "apidoc fixes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAxMw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475135013", "body": "Jackpot:\nwarning: Add @Override Annotation", "bodyText": "Jackpot:\nwarning: Add @OverRide Annotation", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Add <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a> Annotation</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:19Z", "path": "ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.lsp.client.bindings;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import javax.swing.Icon;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.SymbolKind;\n+import org.netbeans.spi.jumpto.type.TypeDescriptor;\n+import org.netbeans.spi.jumpto.type.TypeProvider;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ *\n+ * @author lahvac\n+ */\n+@ServiceProvider(service=TypeProvider.class)\n+public class TypeProviderImpl extends BaseSymbolProvider implements TypeProvider {\n+\n+    private static final Set<SymbolKind> TYPE_KINDS = EnumSet.of(\n+            SymbolKind.Class, SymbolKind.Enum, SymbolKind.Interface,\n+            SymbolKind.Struct\n+    );\n+\n+    @Override\n+    @Messages(\"DN_TypeProviderImpl=Language Server Type Provider\")\n+    public String getDisplayName() {\n+        return Bundle.DN_TypeProviderImpl();\n+    }\n+\n+    @Override\n+    public void computeTypeNames(Context context, Result result) {\n+        computeSymbolNames(context.getSearchType(),\n+                           context.getText(),\n+                           (info, simpleName) -> {\n+                               if (TYPE_KINDS.contains(info.getKind())) {\n+                                   result.addResult(new TypeDescriptorImpl(info, simpleName));\n+                               }\n+                           });\n+    }\n+\n+    public static class TypeDescriptorImpl extends TypeDescriptor implements BaseSymbolDescriptor {\n+\n+        private final SymbolInformation info;\n+        private final String simpleName;\n+\n+        public TypeDescriptorImpl(SymbolInformation info, String simpleName) {\n+            this.info = info;\n+            this.simpleName = simpleName;\n+        }\n+\n+        public SymbolInformation getInfo() {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\nindex 0ea01ebdba..498cdb35e9 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n", "chunk": "@@ -68,6 +68,7 @@ public class TypeProviderImpl extends BaseSymbolProvider implements TypeProvider\n             this.simpleName = simpleName;\n         }\n \n+        @Override\n         public SymbolInformation getInfo() {\n             return info;\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\nindex 0ea01ebdba..498cdb35e9 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n", "chunk": "@@ -68,6 +68,7 @@ public class TypeProviderImpl extends BaseSymbolProvider implements TypeProvider\n             this.simpleName = simpleName;\n         }\n \n+        @Override\n         public SymbolInformation getInfo() {\n             return info;\n         }\n", "next_change": {"commit": "10578e37c124a4ebd2c6d128531433f527af0a6c", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\nindex 498cdb35e9..a05a91c8b2 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/TypeProviderImpl.java\n", "chunk": "@@ -52,24 +54,25 @@ public class TypeProviderImpl extends BaseSymbolProvider implements TypeProvider\n         computeSymbolNames(context.getSearchType(),\n                            context.getText(),\n                            (info, simpleName) -> {\n-                               if (TYPE_KINDS.contains(info.getKind())) {\n-                                   result.addResult(new TypeDescriptorImpl(info, simpleName));\n-                               }\n+                                SymbolKind kind = info.isLeft() ? info.getLeft().getKind() : info.getRight().getKind();\n+                                if (TYPE_KINDS.contains(kind)) {\n+                                    result.addResult(new TypeDescriptorImpl(info, simpleName));\n+                                }\n                            });\n     }\n \n     public static class TypeDescriptorImpl extends TypeDescriptor implements BaseSymbolDescriptor {\n \n-        private final SymbolInformation info;\n+        private final Either<SymbolInformation, WorkspaceSymbol> info;\n         private final String simpleName;\n \n-        public TypeDescriptorImpl(SymbolInformation info, String simpleName) {\n+        public TypeDescriptorImpl(Either<SymbolInformation, WorkspaceSymbol> info, String simpleName) {\n             this.info = info;\n             this.simpleName = simpleName;\n         }\n \n         @Override\n-        public SymbolInformation getInfo() {\n+        public Either<SymbolInformation, WorkspaceSymbol> getInfo() {\n             return info;\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "10578e37c124a4ebd2c6d128531433f527af0a6c", "committedDate": "2022-05-23 12:33:21 +0200", "message": "LSP4J library updated to version 0.13 (#4135)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAzNQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475135035", "body": "Jackpot:\nwarning: Can use functional operations", "bodyText": "Jackpot:\nwarning: Can use functional operations", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Can use functional operations</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:33Z", "path": "ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.lsp.client.bindings;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.netbeans.api.editor.mimelookup.MimeRegistration;\n+import org.netbeans.api.project.FileOwnerQuery;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.lsp.client.LSPBindings;\n+import org.netbeans.modules.parsing.spi.indexing.Context;\n+import org.netbeans.modules.parsing.spi.indexing.CustomIndexer;\n+import org.netbeans.modules.parsing.spi.indexing.CustomIndexerFactory;\n+import org.netbeans.modules.parsing.spi.indexing.Indexable;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.util.EditableProperties;\n+import org.openide.util.Exceptions;\n+import org.openide.util.RequestProcessor;\n+\n+/**\n+ *\n+ * @author lahvac\n+ */\n+public class CustomIndexerImpl extends CustomIndexer {\n+\n+    private static final RequestProcessor WORKER = new RequestProcessor(CustomIndexerImpl.class.getName(), 1, false, false);\n+\n+    @Override\n+    protected void index(Iterable<? extends Indexable> files, Context context) {\n+        handleStoredFiles(context, props -> {\n+            FileObject root = context.getRoot();\n+            for (Indexable i : files) {\n+                FileObject file = root.getFileObject(i.getRelativePath());\n+                if (file != null) {\n+                    props.setProperty(i.getRelativePath(), FileUtil.getMIMEType(file));\n+                }\n+            }\n+\n+            Set<String> mimeTypes = new HashSet<>(props.values());\n+            System.err.println(\"mimeTypes=\" + mimeTypes);\n+            Project prj = FileOwnerQuery.getOwner(root);\n+\n+            if (prj != null) {\n+                WORKER.post(() -> {\n+                    for (String mimeType : mimeTypes) {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NTkwNQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r489165905", "bodyText": "Could, but no.", "author": "jlahoda", "createdAt": "2020-09-16T05:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTAzNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "90787ccf1d2ad1669ea001b35c4fc20bfc3f341b", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\nindex 7c5c98998e..097e64f7db 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n", "chunk": "@@ -58,7 +58,6 @@ public class CustomIndexerImpl extends CustomIndexer {\n             }\n \n             Set<String> mimeTypes = new HashSet<>(props.values());\n-            System.err.println(\"mimeTypes=\" + mimeTypes);\n             Project prj = FileOwnerQuery.getOwner(root);\n \n             if (prj != null) {\n", "next_change": {"commit": "9a5fd32800caf4fe77f548e111ed31dbd421cc7c", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\nindex 097e64f7db..7834f26b6d 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n", "chunk": "@@ -57,7 +58,8 @@ public class CustomIndexerImpl extends CustomIndexer {\n                 }\n             }\n \n-            Set<String> mimeTypes = new HashSet<>(props.values());\n+            @SuppressWarnings(\"unchecked\")\n+            Set<String> mimeTypes = new HashSet<>((Collection) props.values());\n             Project prj = FileOwnerQuery.getOwner(root);\n \n             if (prj != null) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "90787ccf1d2ad1669ea001b35c4fc20bfc3f341b", "committedDate": "2020-12-08 06:55:46 +0100", "message": "Removing debug output."}, {"oid": "9a5fd32800caf4fe77f548e111ed31dbd421cc7c", "committedDate": "2021-07-18 10:44:24 +0200", "message": "Use j.u.Properties instead of o.o.u.EditableProperties to reduce CPU usage"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNTA0Nw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r475135047", "body": "Jackpot:\nwarning: Add @Override Annotation", "bodyText": "Jackpot:\nwarning: Add @OverRide Annotation", "bodyHTML": "<p dir=\"auto\">Jackpot:<br>\nwarning: Add <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a> Annotation</p>", "author": "jlahoda-jackpot", "createdAt": "2020-08-22T20:22:36Z", "path": "ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.lsp.client.bindings;\n+\n+import javax.swing.Icon;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.netbeans.spi.jumpto.symbol.SymbolDescriptor;\n+import org.netbeans.spi.jumpto.symbol.SymbolProvider;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ *\n+ * @author lahvac\n+ */\n+@ServiceProvider(service=SymbolProvider.class)\n+public class SymbolProviderImpl extends BaseSymbolProvider implements SymbolProvider {\n+\n+    @Override\n+    @Messages(\"DN_getDisplayName=Language Server Symbol Provider\")\n+    public String getDisplayName() {\n+        return Bundle.DN_Symbols();\n+    }\n+\n+    @Override\n+    public void computeSymbolNames(Context context, Result result) {\n+        computeSymbolNames(context.getSearchType(), context.getText(), (info, simpleName) -> result.addResult(new SymbolDescriptorImpl(info, simpleName)));\n+    }\n+\n+    public static class SymbolDescriptorImpl extends SymbolDescriptor implements BaseSymbolDescriptor {\n+\n+        private final SymbolInformation info;\n+        private final String simpleName;\n+\n+        public SymbolDescriptorImpl(SymbolInformation info, String simpleName) {\n+            this.info = info;\n+            this.simpleName = simpleName;\n+        }\n+\n+        public SymbolInformation getInfo() {", "originalCommit": "38f9ea82f9c1bee769ce34c47c5efc7b8002f761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\nindex 44dc091c0b..250b783f91 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n", "chunk": "@@ -54,6 +54,7 @@ public class SymbolProviderImpl extends BaseSymbolProvider implements SymbolProv\n             this.simpleName = simpleName;\n         }\n \n+        @Override\n         public SymbolInformation getInfo() {\n             return info;\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\nindex 44dc091c0b..250b783f91 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n", "chunk": "@@ -54,6 +54,7 @@ public class SymbolProviderImpl extends BaseSymbolProvider implements SymbolProv\n             this.simpleName = simpleName;\n         }\n \n+        @Override\n         public SymbolInformation getInfo() {\n             return info;\n         }\n", "next_change": {"commit": "10578e37c124a4ebd2c6d128531433f527af0a6c", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\nindex 250b783f91..1d3723d730 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/SymbolProviderImpl.java\n", "chunk": "@@ -46,16 +48,16 @@ public class SymbolProviderImpl extends BaseSymbolProvider implements SymbolProv\n \n     public static class SymbolDescriptorImpl extends SymbolDescriptor implements BaseSymbolDescriptor {\n \n-        private final SymbolInformation info;\n+        private final Either<SymbolInformation, WorkspaceSymbol> info;\n         private final String simpleName;\n \n-        public SymbolDescriptorImpl(SymbolInformation info, String simpleName) {\n+        public SymbolDescriptorImpl(Either<SymbolInformation, WorkspaceSymbol> info, String simpleName) {\n             this.info = info;\n             this.simpleName = simpleName;\n         }\n \n         @Override\n-        public SymbolInformation getInfo() {\n+        public Either<SymbolInformation, WorkspaceSymbol> getInfo() {\n             return info;\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "10578e37c124a4ebd2c6d128531433f527af0a6c", "committedDate": "2022-05-23 12:33:21 +0200", "message": "LSP4J library updated to version 0.13 (#4135)"}]}, {"oid": "c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "url": "https://github.com/apache/netbeans/commit/c4da1314cf2b1d0fe35bfbac857436a6eadc40bc", "message": "Fixing issues found by Jackpot.", "committedDate": "2020-09-16T05:48:47Z", "type": "commit"}, {"oid": "63465789eb24005fed6b624ebbc46e413caa5df4", "url": "https://github.com/apache/netbeans/commit/63465789eb24005fed6b624ebbc46e413caa5df4", "message": "Merge branch 'master' into workspace/symbol", "committedDate": "2020-09-16T20:05:24Z", "type": "commit"}, {"oid": "25b7c3ad8238775ba19f51dbd4174c9a2e4266a8", "url": "https://github.com/apache/netbeans/commit/25b7c3ad8238775ba19f51dbd4174c9a2e4266a8", "message": "Fixing problems in merge.", "committedDate": "2020-09-17T05:34:10Z", "type": "commit"}, {"oid": "9ce48689f69425a41589aa95b58a7d641cca16de", "url": "https://github.com/apache/netbeans/commit/9ce48689f69425a41589aa95b58a7d641cca16de", "message": "Merging master into workspace/symbol.", "committedDate": "2020-10-15T05:47:09Z", "type": "commit"}, {"oid": "48f32eb7d79074465559e5a4ce016a486c98c113", "url": "https://github.com/apache/netbeans/commit/48f32eb7d79074465559e5a4ce016a486c98c113", "message": "Fixing dependencies.", "committedDate": "2020-10-16T05:20:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTM3NQ==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511329375", "body": "Using `Logger` would be more standard. See [Logging in NetBeans](http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/doc-files/logging.html) document.", "bodyText": "Using Logger would be more standard. See Logging in NetBeans document.", "bodyHTML": "<p dir=\"auto\">Using <code>Logger</code> would be more standard. See <a href=\"http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/doc-files/logging.html\" rel=\"nofollow\">Logging in NetBeans</a> document.</p>", "author": "JaroslavTulach", "createdAt": "2020-10-24T06:52:05Z", "path": "cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java", "diffHunk": "@@ -64,9 +64,10 @@\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n+    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");", "originalCommit": "48f32eb7d79074465559e5a4ce016a486c98c113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQyMjY1Nw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511422657", "bodyText": "The best we could do here is LOG.isLoggable(FINE) or alike instead of DEBUG - we need to print exactly what is in the streams (as often that shows some important piece of information), which, as far as I know, is not an ideal usecase for Loggers. (To use Loggers, we would need to send the information to the Logger in \"batches\", e.g. by lines, but that is often troublesome with this protocol.)", "author": "jlahoda", "createdAt": "2020-10-24T12:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQzMzc5Ng==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511433796", "bodyText": "LOG.isLoggable(FINE) would be more standard - at least it would be known how to configure it. If you insist on the property, document it in arch.xml as <api group=\"systemproperty\"/>.", "author": "JaroslavTulach", "createdAt": "2020-10-24T12:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNTM5Mg==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511505392", "bodyText": "Done.", "author": "jlahoda", "createdAt": "2020-10-24T19:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "903433f01b1578cde184f6ea85f3c651e42b7e5f", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex cc8dd53bba..27a39710a8 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -64,7 +64,6 @@ import org.openide.modules.Places;\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n-    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n     private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex cc8dd53bba..27a39710a8 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -64,7 +64,6 @@ import org.openide.modules.Places;\n })\n public class LanguageServerImpl implements LanguageServerProvider {\n \n-    private static final boolean DEBUG = Boolean.getBoolean(\"cpplite.lsp.debug\");\n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n     private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n", "next_change": {"commit": "281781d091b76bd93433c3c678090a7142f1ab10", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 27a39710a8..877c6199d2 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -66,7 +67,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "1fc3ac23142085aed16c1a89e79cd0c1efb30cae", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex 877c6199d2..d303b1704c 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -67,7 +66,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n+    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": {"commit": "ae9bdd26609405b722390259b7109dba7da10ebe", "changed_code": [{"header": "diff --git a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\nindex d303b1704c..6e73272117 100644\n--- a/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n+++ b/cpplite/cpplite.editor/src/org/netbeans/modules/cpplite/editor/lsp/LanguageServerImpl.java\n", "chunk": "@@ -66,7 +67,7 @@ public class LanguageServerImpl implements LanguageServerProvider {\n \n     private static final Logger LOG = Logger.getLogger(LanguageServerImpl.class.getName());\n \n-    private static final Map<Project, LanguageServerDescription> prj2Server = new HashMap<>();\n+    private static final Map<Project, Pair<Process, LanguageServerDescription>> prj2Server = new HashMap<>();\n \n     @Override\n     public LanguageServerDescription startServer(Lookup lookup) {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "281781d091b76bd93433c3c678090a7142f1ab10", "committedDate": "2021-04-05 23:33:35 +0200", "message": "When LSP Server fails to start too many times, don't try start it again."}, {"oid": "1fc3ac23142085aed16c1a89e79cd0c1efb30cae", "committedDate": "2021-04-11 19:28:59 +0200", "message": "Fixing newly created cpplite project, avoiding starting the C/C++ LSP server when the configuration is not readable."}, {"oid": "a4444904abf05c843f9eb1eb07637e326eadedc3", "committedDate": "2021-05-21 22:16:43 +0200", "message": "Implement suggestions from PR-2877"}, {"oid": "ae9bdd26609405b722390259b7109dba7da10ebe", "committedDate": "2021-05-23 08:07:17 +0200", "message": "Merge pull request #2973 from matthiasblaesing/pr-2877"}, {"oid": "48c5b0f71f117403aae27475809aa759ca82c006", "committedDate": "2021-09-25 22:34:54 +0200", "message": "Prevent NullPointerException in CPP LanguageServerImpl"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTU2NA==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511329564", "body": "I see. This is the way to specify client capabilities! CCing @sdedic.", "bodyText": "I see. This is the way to specify client capabilities! CCing @sdedic.", "bodyHTML": "<p dir=\"auto\">I see. This is the way to specify client capabilities! CCing <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sdedic/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sdedic\">@sdedic</a>.</p>", "author": "JaroslavTulach", "createdAt": "2020-10-24T06:54:32Z", "path": "ide/lsp.client/src/org/netbeans/modules/lsp/client/LSPBindings.java", "diffHunk": "@@ -232,6 +250,8 @@ private static InitializeResult initServer(Process p, LanguageServer server, Fil\n        wcc.setWorkspaceEdit(new WorkspaceEditCapabilities());\n        wcc.getWorkspaceEdit().setDocumentChanges(true);\n        wcc.getWorkspaceEdit().setResourceOperations(Arrays.asList(ResourceOperationKind.Create, ResourceOperationKind.Delete, ResourceOperationKind.Rename));\n+       SymbolCapabilities sc = new SymbolCapabilities(new SymbolKindCapabilities(Arrays.asList(SymbolKind.values())));\n+       wcc.setSymbol(sc);\n        initParams.setCapabilities(new ClientCapabilities(wcc, tdcc, null));", "originalCommit": "48f32eb7d79074465559e5a4ce016a486c98c113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwMTc3Ng==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r511901776", "bodyText": "The client capabilities should (?) be used for the standard ones - https://microsoft.github.io/language-server-protocol/specification except the experimental field, which is not well documented: could be a bag of capability objects or just the capability properties (?)\nI borrowed the implementation from here: https://github.com/eclipse/lemminx/blob/master/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/settings/capabilities/InitializationOptionsExtendedClientCapabilities.java\nbut it can be re-coded to read a bag in clientCapabiltiies.experimetnal, if it is the better way. @lahodaj  ?", "author": "sdedic", "createdAt": "2020-10-26T11:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNjQ2Mw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r512436463", "bodyText": "Not sure if that's better, but when I was experimenting with the semantic highlighting, it seemed there is a way to extend the protocol mostly transparently:\n-when sending data, just create a subclass of the class you want to send, and add annotated getters for the additional data you want to create\n-when receiving data, the main Gson instance need to create the extended subclass. One way I've found that could be used is to inject a different Gson while creating the LSPLauncher:\nLauncher<LanguageServer> launcher = LSPLauncher.createClientLauncher(lci, in, out);\n=>\n                                                       Launcher<LanguageServer> launcher = new LSPLauncher.Builder<LanguageServer>()\n                                                                                                          .setLocalService(lci)\n                                                                                                          .setRemoteInterface(LanguageServer.class)\n                                                                                                          .setInput(in)\n                                                                                                          .setOutput(out)\n                                                                                                          .configureGson(gson -> {\n                                                           gson.registerTypeAdapterFactory(new TypeAdapterFactory() {\n                                                               @Override\n                                                               public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> tt) {\n                                                                   if (tt.getRawType() == ServerCapabilities.class) {\n                                                                       return new TypeAdapter<T>() {\n                                                                           @Override\n                                                                           public void write(JsonWriter writer, T t) throws IOException {\n                                                                               throw new UnsupportedOperationException(\"Not supported.\");\n                                                                           }\n\n                                                                           @Override\n                                                                           public T read(JsonReader reader) throws IOException {\n                                                                               return gson.fromJson(reader, NBServerCapabilities.class);\n                                                                           }\n                                                                       };\n                                                                   }\n                                                                   return null;\n                                                               }\n                                                           });\n                                                       }).create();\n\n-to call additional methods/invocation points, use (I was only trying this on the client side so far):\nServiceEndpoints.toServiceObject(launcher.getRemoteEndpoint(), SemanticService.class)\n\nwhere:\n    public interface SemanticService {\n        @JsonRequest(\"textDocument/semanticTokens/full\")\n        public CompletableFuture<JsonObject> semanticTokensFull(SemanticTokensParams params);\n    }\n\nThis seemed to more or less work, but I didn't finish this work yet, so there may be a problem lurking somewhere.", "author": "jlahoda", "createdAt": "2020-10-27T06:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyOTU2NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "82a0ab7d7bc5e4211710bcf754a5c751b3c6e22c", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/LSPBindings.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/LSPBindings.java\nindex 32a846b75f..2fcb1cdc57 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/LSPBindings.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/LSPBindings.java\n", "chunk": "@@ -246,6 +370,7 @@ public class LSPBindings {\n        dsc.setHierarchicalDocumentSymbolSupport(true);\n        dsc.setSymbolKind(new SymbolKindCapabilities(Arrays.asList(SymbolKind.values())));\n        tdcc.setDocumentSymbol(dsc);\n+       tdcc.setSemanticTokens(new SemanticTokensCapabilities(new SemanticTokensClientCapabilitiesRequests(true), KNOWN_TOKEN_TYPES, KNOWN_TOKEN_MODIFIERS, Arrays.asList()));\n        WorkspaceClientCapabilities wcc = new WorkspaceClientCapabilities();\n        wcc.setWorkspaceEdit(new WorkspaceEditCapabilities());\n        wcc.getWorkspaceEdit().setDocumentChanges(true);\n", "next_change": null}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "ebde2a5904506dc10a035e8e4ef9adbc80889b02", "committedDate": "2020-12-14 21:12:57 +0100", "message": "[NETBEANS-5142] LSP Client creates excessive processes (#2589)"}, {"oid": "81bfc6dccd66726ef6ddc4cc0e931a73e0d72f24", "committedDate": "2021-01-22 18:11:38 +0100", "message": " Adding folding range via LSP support, both client and server. (#2682)"}, {"oid": "281781d091b76bd93433c3c678090a7142f1ab10", "committedDate": "2021-04-05 23:33:35 +0200", "message": "When LSP Server fails to start too many times, don't try start it again."}, {"oid": "917831205bfe0618ad6c7fceb57a70d1346d0859", "committedDate": "2021-04-10 23:55:36 +0200", "message": "[NETBEANS-5565] Disable running LSP servers for VCS diffs."}, {"oid": "3afe3903a76ce10bbbeaba802207eb2bc19fd069", "committedDate": "2021-04-11 09:18:52 +0200", "message": "Fixing test."}, {"oid": "f39feeaa5fdcd787b6b7916f95c870837943a30b", "committedDate": "2021-04-22 07:00:25 +0200", "message": "Preventing a NPE in LSPBindings, description.bindings can be null."}, {"oid": "d1e754a794e6fa93b336d1e4e60e028ce8b0f4c4", "committedDate": "2021-09-19 19:40:08 +0200", "message": "Prevent background tasks working on LSPBindings to be scheduled multiple times"}, {"oid": "d2ae8ba167c659458deca4a8cea3177af8450947", "committedDate": "2022-01-14 07:22:39 +0100", "message": "Semantic highlight support for both the LSP client and Java LSP server."}, {"oid": "a764e99a8e89d6bfa9c3d69195a71330304c89ff", "committedDate": "2022-01-17 15:11:51 +0000", "message": "Merge pull request #2876 from jlahoda/NETBEANS-5565"}, {"oid": "82a0ab7d7bc5e4211710bcf754a5c751b3c6e22c", "committedDate": "2022-01-22 17:52:56 +0100", "message": "Fixes to LSP client/server related to semantic highlighting."}, {"oid": "8e5d7cc170a056b6759952b893ca994459b3c0ae", "committedDate": "2022-02-19 21:46:33 +0100", "message": "LSPBindings synchronization fix"}, {"oid": "d781b1ca719f0a868777005aca3a6e00edbf7d58", "committedDate": "2022-03-05 12:00:07 +0100", "message": "ide/lsp.client + MultiMimeLanguageServerProvider (#3655)"}]}, {"oid": "8db982b4378a52e2eef9a1d6ded6ea30f6106feb", "url": "https://github.com/apache/netbeans/commit/8db982b4378a52e2eef9a1d6ded6ea30f6106feb", "message": "Merging master into workspace/symbol.", "committedDate": "2020-10-24T12:00:38Z", "type": "commit"}, {"oid": "bc3b774488639391dabb8eb3eccbbcba92e18ed1", "url": "https://github.com/apache/netbeans/commit/bc3b774488639391dabb8eb3eccbbcba92e18ed1", "message": "Incrementing spec versions, as suggested.", "committedDate": "2020-10-24T12:06:15Z", "type": "commit"}, {"oid": "903433f01b1578cde184f6ea85f3c651e42b7e5f", "url": "https://github.com/apache/netbeans/commit/903433f01b1578cde184f6ea85f3c651e42b7e5f", "message": "Using Loggers instead of a system property.", "committedDate": "2020-10-24T19:17:34Z", "type": "commit"}, {"oid": "46b35977d414ccc8ef00a9261c84d88f0bdcc0be", "url": "https://github.com/apache/netbeans/commit/46b35977d414ccc8ef00a9261c84d88f0bdcc0be", "message": "Merging master into workspace/symbol", "committedDate": "2020-11-17T07:04:05Z", "type": "commit"}, {"oid": "d5f6e0b2bd161ead5a40381c9db28b415eb361d6", "url": "https://github.com/apache/netbeans/commit/d5f6e0b2bd161ead5a40381c9db28b415eb361d6", "message": "Cleanup.", "committedDate": "2020-11-17T07:05:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDgzMw==", "url": "https://github.com/apache/netbeans/pull/2324#discussion_r537440833", "body": "@jlahoda We get this in an output window when we run a module.  What is this for?\r\n```\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nINFO [org.netbeans.modules.bugtracking.BugtrackingManager]: Loading stored repositories took 47 millis.\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\r\n```", "bodyText": "@jlahoda We get this in an output window when we run a module.  What is this for?\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nINFO [org.netbeans.modules.bugtracking.BugtrackingManager]: Loading stored repositories took 47 millis.\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jlahoda/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jlahoda\">@jlahoda</a> We get this in an output window when we run a module.  What is this for?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nINFO [org.netbeans.modules.bugtracking.BugtrackingManager]: Loading stored repositories took 47 millis.\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\n\"><pre><code>mimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nINFO [org.netbeans.modules.bugtracking.BugtrackingManager]: Loading stored repositories took 47 millis.\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\nmimeTypes=[text/xml, text/x-properties, text/plain, text/x-diff, content/unknown, text/x-php5]\n</code></pre></div>", "author": "junichi11", "createdAt": "2020-12-07T11:42:17Z", "path": "ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.lsp.client.bindings;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.netbeans.api.editor.mimelookup.MimeRegistration;\n+import org.netbeans.api.project.FileOwnerQuery;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.lsp.client.LSPBindings;\n+import org.netbeans.modules.parsing.spi.indexing.Context;\n+import org.netbeans.modules.parsing.spi.indexing.CustomIndexer;\n+import org.netbeans.modules.parsing.spi.indexing.CustomIndexerFactory;\n+import org.netbeans.modules.parsing.spi.indexing.Indexable;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.util.EditableProperties;\n+import org.openide.util.Exceptions;\n+import org.openide.util.RequestProcessor;\n+\n+/**\n+ *\n+ * @author lahvac\n+ */\n+public class CustomIndexerImpl extends CustomIndexer {\n+\n+    private static final RequestProcessor WORKER = new RequestProcessor(CustomIndexerImpl.class.getName(), 1, false, false);\n+\n+    @Override\n+    protected void index(Iterable<? extends Indexable> files, Context context) {\n+        handleStoredFiles(context, props -> {\n+            FileObject root = context.getRoot();\n+            for (Indexable i : files) {\n+                FileObject file = root.getFileObject(i.getRelativePath());\n+                if (file != null) {\n+                    props.setProperty(i.getRelativePath(), FileUtil.getMIMEType(file));\n+                }\n+            }\n+\n+            Set<String> mimeTypes = new HashSet<>(props.values());\n+            System.err.println(\"mimeTypes=\" + mimeTypes);", "originalCommit": "d5f6e0b2bd161ead5a40381c9db28b415eb361d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "90787ccf1d2ad1669ea001b35c4fc20bfc3f341b", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\nindex 7c5c98998e..097e64f7db 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n", "chunk": "@@ -58,7 +58,6 @@ public class CustomIndexerImpl extends CustomIndexer {\n             }\n \n             Set<String> mimeTypes = new HashSet<>(props.values());\n-            System.err.println(\"mimeTypes=\" + mimeTypes);\n             Project prj = FileOwnerQuery.getOwner(root);\n \n             if (prj != null) {\n", "next_change": {"commit": "9a5fd32800caf4fe77f548e111ed31dbd421cc7c", "changed_code": [{"header": "diff --git a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\nindex 097e64f7db..7834f26b6d 100644\n--- a/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n+++ b/ide/lsp.client/src/org/netbeans/modules/lsp/client/bindings/CustomIndexerImpl.java\n", "chunk": "@@ -57,7 +58,8 @@ public class CustomIndexerImpl extends CustomIndexer {\n                 }\n             }\n \n-            Set<String> mimeTypes = new HashSet<>(props.values());\n+            @SuppressWarnings(\"unchecked\")\n+            Set<String> mimeTypes = new HashSet<>((Collection) props.values());\n             Project prj = FileOwnerQuery.getOwner(root);\n \n             if (prj != null) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c954f48dbad0e69b162036f0ce72ae3aaa6a8002", "message": "Merge commit", "committedDate": null}, {"oid": "90787ccf1d2ad1669ea001b35c4fc20bfc3f341b", "committedDate": "2020-12-08 06:55:46 +0100", "message": "Removing debug output."}, {"oid": "9a5fd32800caf4fe77f548e111ed31dbd421cc7c", "committedDate": "2021-07-18 10:44:24 +0200", "message": "Use j.u.Properties instead of o.o.u.EditableProperties to reduce CPU usage"}]}]}