{"pr_number": 2020, "pr_title": "[NETBEANS-3986] Creating New Class On Pasting Class Text", "pr_author": "Akshay-Gupta-Oracle", "pr_createdAt": "2020-03-16T06:55:26Z", "pr_url": "https://github.com/apache/netbeans/pull/2020", "timeline": [{"oid": "760c54b8a0920415338b27a3e76ae76a98eea609", "url": "https://github.com/apache/netbeans/commit/760c54b8a0920415338b27a3e76ae76a98eea609", "message": "[NETBEANS-3986] Creating New Class On Pasting Class Text", "committedDate": "2020-03-16T06:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk5OTI5NQ==", "url": "https://github.com/apache/netbeans/pull/2020#discussion_r392999295", "body": "This will show this action on all folder nodes? People working on non-Java projects may complain about that. Have you considered merging this with the ordinary Paste action? (Might only be feasible with the standard java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/PackageView.java#createPackageView, but that might be OK.", "bodyText": "This will show this action on all folder nodes? People working on non-Java projects may complain about that. Have you considered merging this with the ordinary Paste action? (Might only be feasible with the standard java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/PackageView.java#createPackageView, but that might be OK.", "bodyHTML": "<p dir=\"auto\">This will show this action on all folder nodes? People working on non-Java projects may complain about that. Have you considered merging this with the ordinary Paste action? (Might only be feasible with the standard java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/PackageView.java#createPackageView, but that might be OK.</p>", "author": "lahodaj", "createdAt": "2020-03-16T12:48:50Z", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateClassAndCopy.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.lang.model.SourceVersion;\n+import javax.swing.JOptionPane;\n+import org.openide.actions.PasteAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.explorer.ExplorerManager;\n+import org.openide.filesystems.FileObject;\n+import org.openide.loaders.DataFolder;\n+import org.openide.nodes.Node;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+\n+@ActionID(\n+        category = \"Build\",\n+        id = \"org.netbeans.spi.java.project.support.ui.CreateClassAndCopy\"\n+)\n+@ActionRegistration(\n+        displayName = \"#CTL_CreateClassAndCopy\"\n+)\n+@ActionReference(path = \"Loaders/folder/any/Actions\", position = 750)", "originalCommit": "760c54b8a0920415338b27a3e76ae76a98eea609", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMDM1OA==", "url": "https://github.com/apache/netbeans/pull/2020#discussion_r393000358", "body": "I am unclear why finding ExplorerManager is needed - isn't \"context\" enough? I.e. shouldn't be paste simply happen \"under\" the given DataFolder?", "bodyText": "I am unclear why finding ExplorerManager is needed - isn't \"context\" enough? I.e. shouldn't be paste simply happen \"under\" the given DataFolder?", "bodyHTML": "<p dir=\"auto\">I am unclear why finding ExplorerManager is needed - isn't \"context\" enough? I.e. shouldn't be paste simply happen \"under\" the given DataFolder?</p>", "author": "lahodaj", "createdAt": "2020-03-16T12:50:52Z", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateClassAndCopy.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.lang.model.SourceVersion;\n+import javax.swing.JOptionPane;\n+import org.openide.actions.PasteAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.explorer.ExplorerManager;\n+import org.openide.filesystems.FileObject;\n+import org.openide.loaders.DataFolder;\n+import org.openide.nodes.Node;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+\n+@ActionID(\n+        category = \"Build\",\n+        id = \"org.netbeans.spi.java.project.support.ui.CreateClassAndCopy\"\n+)\n+@ActionRegistration(\n+        displayName = \"#CTL_CreateClassAndCopy\"\n+)\n+@ActionReference(path = \"Loaders/folder/any/Actions\", position = 750)\n+@Messages(\"CTL_CreateClassAndCopy=PasteClass\")\n+public final class CreateClassAndCopy implements ActionListener {\n+\n+    private final DataFolder context;\n+\n+    public CreateClassAndCopy(DataFolder context) {\n+        this.context = context;\n+    }\n+\n+    static ExplorerManager findExplorerManager() {", "originalCommit": "760c54b8a0920415338b27a3e76ae76a98eea609", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwNzUyNg==", "url": "https://github.com/apache/netbeans/pull/2020#discussion_r393007526", "body": "I wonder if it wouldn't be easier to let some (Java) parser parse the class, and analyze the output. Something as simple as:\r\n((JavacTask) javax.tools.ToolProvider.getSystemJavaCompiler().getTask(...)).parse()\r\nmight give much better outcomes, and is unlikely to be problematic w.r.t. performance (parse is typically very fast). The only parameter that really needs to be filled in for getTask is the last one, and it may be a singleton list with a very simple JavaFileObject, like this one:\r\nhttps://github.com/apache/netbeans/blob/5f675e88a3ae3fee652332f9faf2f1985508c272/java/lib.nbjavac/test/unit/src/org/netbeans/lib/nbjavac/services/NBClassWriterTest.java#L61\r\n\r\n(Passing the \"out\" Writer and passing the output to \"/dev/null\" is probably a good idea, as well, but not needed for the functionality to work.)\r\n\r\nAs far as I can tell, the code here won't work if:\r\n-there are any imports\r\n-or annotations\r\n-or the class is non-public\r\n-or if the thing that is being pasted is an interface, enum, annotation type (or record)\r\n-or if there's any other modifier for the class (not a big factor right now, as probably only \"strictfp\" could be here).\r\n\r\nThis feels unnecessarily limited.\r\n", "bodyText": "I wonder if it wouldn't be easier to let some (Java) parser parse the class, and analyze the output. Something as simple as:\n((JavacTask) javax.tools.ToolProvider.getSystemJavaCompiler().getTask(...)).parse()\nmight give much better outcomes, and is unlikely to be problematic w.r.t. performance (parse is typically very fast). The only parameter that really needs to be filled in for getTask is the last one, and it may be a singleton list with a very simple JavaFileObject, like this one:\n\n  \n    \n      netbeans/java/lib.nbjavac/test/unit/src/org/netbeans/lib/nbjavac/services/NBClassWriterTest.java\n    \n    \n         Line 61\n      in\n      5f675e8\n    \n    \n    \n    \n\n        \n          \n           private static class MyFileObject extends SimpleJavaFileObject { \n        \n    \n  \n\n\n(Passing the \"out\" Writer and passing the output to \"/dev/null\" is probably a good idea, as well, but not needed for the functionality to work.)\nAs far as I can tell, the code here won't work if:\n-there are any imports\n-or annotations\n-or the class is non-public\n-or if the thing that is being pasted is an interface, enum, annotation type (or record)\n-or if there's any other modifier for the class (not a big factor right now, as probably only \"strictfp\" could be here).\nThis feels unnecessarily limited.", "bodyHTML": "<p dir=\"auto\">I wonder if it wouldn't be easier to let some (Java) parser parse the class, and analyze the output. Something as simple as:<br>\n((JavacTask) javax.tools.ToolProvider.getSystemJavaCompiler().getTask(...)).parse()<br>\nmight give much better outcomes, and is unlikely to be problematic w.r.t. performance (parse is typically very fast). The only parameter that really needs to be filled in for getTask is the last one, and it may be a singleton list with a very simple JavaFileObject, like this one:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/netbeans/blob/5f675e88a3ae3fee652332f9faf2f1985508c272/java/lib.nbjavac/test/unit/src/org/netbeans/lib/nbjavac/services/NBClassWriterTest.java#L61\">netbeans/java/lib.nbjavac/test/unit/src/org/netbeans/lib/nbjavac/services/NBClassWriterTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 61\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/netbeans/commit/5f675e88a3ae3fee652332f9faf2f1985508c272\">5f675e8</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyFileObject</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SimpleJavaFileObject</span> { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">(Passing the \"out\" Writer and passing the output to \"/dev/null\" is probably a good idea, as well, but not needed for the functionality to work.)</p>\n<p dir=\"auto\">As far as I can tell, the code here won't work if:<br>\n-there are any imports<br>\n-or annotations<br>\n-or the class is non-public<br>\n-or if the thing that is being pasted is an interface, enum, annotation type (or record)<br>\n-or if there's any other modifier for the class (not a big factor right now, as probably only \"strictfp\" could be here).</p>\n<p dir=\"auto\">This feels unnecessarily limited.</p>", "author": "lahodaj", "createdAt": "2020-03-16T13:04:11Z", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateClassAndCopy.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.lang.model.SourceVersion;\n+import javax.swing.JOptionPane;\n+import org.openide.actions.PasteAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.explorer.ExplorerManager;\n+import org.openide.filesystems.FileObject;\n+import org.openide.loaders.DataFolder;\n+import org.openide.nodes.Node;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+\n+@ActionID(\n+        category = \"Build\",\n+        id = \"org.netbeans.spi.java.project.support.ui.CreateClassAndCopy\"\n+)\n+@ActionRegistration(\n+        displayName = \"#CTL_CreateClassAndCopy\"\n+)\n+@ActionReference(path = \"Loaders/folder/any/Actions\", position = 750)\n+@Messages(\"CTL_CreateClassAndCopy=PasteClass\")\n+public final class CreateClassAndCopy implements ActionListener {\n+\n+    private final DataFolder context;\n+\n+    public CreateClassAndCopy(DataFolder context) {\n+        this.context = context;\n+    }\n+\n+    static ExplorerManager findExplorerManager() {\n+        Throwable t = null;\n+\n+        try {\n+            Class c = Class.forName(\"org.openide.windows.TopComponent\"); // NOI18N\n+\n+            // use reflection now\n+            Method m = c.getMethod(\"getRegistry\"); // NOI18N\n+            Object o = m.invoke(null);\n+\n+            c = Class.forName(\"org.openide.windows.TopComponent$Registry\"); // NOI18N\n+\n+            // use reflection now\n+            m = c.getMethod(\"getActivated\"); // NOI18N\n+            o = m.invoke(o);\n+\n+            if (o instanceof ExplorerManager.Provider) {\n+                return ((ExplorerManager.Provider) o).getExplorerManager();\n+            }\n+        } // exceptions from forName:\n+        catch (ClassNotFoundException x) {\n+        } catch (ExceptionInInitializerError x) {\n+        } catch (LinkageError x) {\n+        } // exceptions from getMethod:\n+        catch (SecurityException x) {\n+            t = x;\n+        } catch (NoSuchMethodException x) {\n+            t = x;\n+        } // exceptions from invoke\n+        catch (IllegalAccessException x) {\n+            t = x;\n+        } catch (IllegalArgumentException x) {\n+            t = x;\n+        } catch (InvocationTargetException x) {\n+            t = x;\n+        }\n+\n+        if (t != null) {\n+            Logger.getLogger(PasteAction.class.getName()).log(Level.WARNING, null, t);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent ev) {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if(!c.isDataFlavorAvailable(DataFlavor.stringFlavor))return;\n+            boolean containsClass = false;\n+            String data = (String) c.getData(DataFlavor.stringFlavor);\n+            String className = \"\";", "originalCommit": "760c54b8a0920415338b27a3e76ae76a98eea609", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwOTY0Nw==", "url": "https://github.com/apache/netbeans/pull/2020#discussion_r393009647", "body": "Using:\r\n            File f = new File(path + \"\\\\\" + className + \".java\");// NOI18N\r\nwill clearly not work on Linux, and probably not on Mac - the file separator for these is '/'. I would suggest to simply using FileObject all the way, unless there is a really compelling reason to not to.", "bodyText": "Using:\nFile f = new File(path + \"\\\" + className + \".java\");// NOI18N\nwill clearly not work on Linux, and probably not on Mac - the file separator for these is '/'. I would suggest to simply using FileObject all the way, unless there is a really compelling reason to not to.", "bodyHTML": "<p dir=\"auto\">Using:<br>\nFile f = new File(path + \"\\\" + className + \".java\");// NOI18N<br>\nwill clearly not work on Linux, and probably not on Mac - the file separator for these is '/'. I would suggest to simply using FileObject all the way, unless there is a really compelling reason to not to.</p>", "author": "lahodaj", "createdAt": "2020-03-16T13:08:12Z", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateClassAndCopy.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.lang.model.SourceVersion;\n+import javax.swing.JOptionPane;\n+import org.openide.actions.PasteAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.explorer.ExplorerManager;\n+import org.openide.filesystems.FileObject;\n+import org.openide.loaders.DataFolder;\n+import org.openide.nodes.Node;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+\n+@ActionID(\n+        category = \"Build\",\n+        id = \"org.netbeans.spi.java.project.support.ui.CreateClassAndCopy\"\n+)\n+@ActionRegistration(\n+        displayName = \"#CTL_CreateClassAndCopy\"\n+)\n+@ActionReference(path = \"Loaders/folder/any/Actions\", position = 750)\n+@Messages(\"CTL_CreateClassAndCopy=PasteClass\")\n+public final class CreateClassAndCopy implements ActionListener {\n+\n+    private final DataFolder context;\n+\n+    public CreateClassAndCopy(DataFolder context) {\n+        this.context = context;\n+    }\n+\n+    static ExplorerManager findExplorerManager() {\n+        Throwable t = null;\n+\n+        try {\n+            Class c = Class.forName(\"org.openide.windows.TopComponent\"); // NOI18N\n+\n+            // use reflection now\n+            Method m = c.getMethod(\"getRegistry\"); // NOI18N\n+            Object o = m.invoke(null);\n+\n+            c = Class.forName(\"org.openide.windows.TopComponent$Registry\"); // NOI18N\n+\n+            // use reflection now\n+            m = c.getMethod(\"getActivated\"); // NOI18N\n+            o = m.invoke(o);\n+\n+            if (o instanceof ExplorerManager.Provider) {\n+                return ((ExplorerManager.Provider) o).getExplorerManager();\n+            }\n+        } // exceptions from forName:\n+        catch (ClassNotFoundException x) {\n+        } catch (ExceptionInInitializerError x) {\n+        } catch (LinkageError x) {\n+        } // exceptions from getMethod:\n+        catch (SecurityException x) {\n+            t = x;\n+        } catch (NoSuchMethodException x) {\n+            t = x;\n+        } // exceptions from invoke\n+        catch (IllegalAccessException x) {\n+            t = x;\n+        } catch (IllegalArgumentException x) {\n+            t = x;\n+        } catch (InvocationTargetException x) {\n+            t = x;\n+        }\n+\n+        if (t != null) {\n+            Logger.getLogger(PasteAction.class.getName()).log(Level.WARNING, null, t);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent ev) {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if(!c.isDataFlavorAvailable(DataFlavor.stringFlavor))return;\n+            boolean containsClass = false;\n+            String data = (String) c.getData(DataFlavor.stringFlavor);\n+            String className = \"\";\n+            String uncommented = data.replaceAll(\"(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)|(?://.*)\",\"\");// NOI18N\n+            uncommented = uncommented.trim();\n+            StringTokenizer st = new StringTokenizer(uncommented, \" \");// NOI18N\n+            if (st.hasMoreTokens() && st.nextToken().equals(\"public\") && st.hasMoreTokens() && st.nextToken().equals(\"class\") && st.hasMoreTokens()) {// NOI18N\n+                String cname = st.nextToken().trim();\n+                if (cname.charAt(cname.length() - 1) == '{') {\n+                    cname = cname.substring(0, cname.length() - 1);\n+                }\n+                if (SourceVersion.isIdentifier(cname)) {\n+                    containsClass = true;\n+                    className = cname;\n+                }\n+            }\n+            if (!containsClass) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\");\n+                return;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return;\n+            }\n+            String path = files.iterator().next().getPath();\n+            String packageName = \"\";\n+            File f = new File(path + \"\\\\\" + className + \".java\");// NOI18N", "originalCommit": "760c54b8a0920415338b27a3e76ae76a98eea609", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxMDg3Ng==", "url": "https://github.com/apache/netbeans/pull/2020#discussion_r393010876", "body": "This feels really weird - I don't think anyone ever said anything about the names of the Nodes. Suggest to use ClassPath.getClassPath(SOURCE, target).getResourceName(target) (handling failures along the way).", "bodyText": "This feels really weird - I don't think anyone ever said anything about the names of the Nodes. Suggest to use ClassPath.getClassPath(SOURCE, target).getResourceName(target) (handling failures along the way).", "bodyHTML": "<p dir=\"auto\">This feels really weird - I don't think anyone ever said anything about the names of the Nodes. Suggest to use ClassPath.getClassPath(SOURCE, target).getResourceName(target) (handling failures along the way).</p>", "author": "lahodaj", "createdAt": "2020-03-16T13:10:26Z", "path": "java/java.project.ui/src/org/netbeans/spi/java/project/support/ui/CreateClassAndCopy.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.spi.java.project.support.ui;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.lang.model.SourceVersion;\n+import javax.swing.JOptionPane;\n+import org.openide.actions.PasteAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.explorer.ExplorerManager;\n+import org.openide.filesystems.FileObject;\n+import org.openide.loaders.DataFolder;\n+import org.openide.nodes.Node;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+\n+@ActionID(\n+        category = \"Build\",\n+        id = \"org.netbeans.spi.java.project.support.ui.CreateClassAndCopy\"\n+)\n+@ActionRegistration(\n+        displayName = \"#CTL_CreateClassAndCopy\"\n+)\n+@ActionReference(path = \"Loaders/folder/any/Actions\", position = 750)\n+@Messages(\"CTL_CreateClassAndCopy=PasteClass\")\n+public final class CreateClassAndCopy implements ActionListener {\n+\n+    private final DataFolder context;\n+\n+    public CreateClassAndCopy(DataFolder context) {\n+        this.context = context;\n+    }\n+\n+    static ExplorerManager findExplorerManager() {\n+        Throwable t = null;\n+\n+        try {\n+            Class c = Class.forName(\"org.openide.windows.TopComponent\"); // NOI18N\n+\n+            // use reflection now\n+            Method m = c.getMethod(\"getRegistry\"); // NOI18N\n+            Object o = m.invoke(null);\n+\n+            c = Class.forName(\"org.openide.windows.TopComponent$Registry\"); // NOI18N\n+\n+            // use reflection now\n+            m = c.getMethod(\"getActivated\"); // NOI18N\n+            o = m.invoke(o);\n+\n+            if (o instanceof ExplorerManager.Provider) {\n+                return ((ExplorerManager.Provider) o).getExplorerManager();\n+            }\n+        } // exceptions from forName:\n+        catch (ClassNotFoundException x) {\n+        } catch (ExceptionInInitializerError x) {\n+        } catch (LinkageError x) {\n+        } // exceptions from getMethod:\n+        catch (SecurityException x) {\n+            t = x;\n+        } catch (NoSuchMethodException x) {\n+            t = x;\n+        } // exceptions from invoke\n+        catch (IllegalAccessException x) {\n+            t = x;\n+        } catch (IllegalArgumentException x) {\n+            t = x;\n+        } catch (InvocationTargetException x) {\n+            t = x;\n+        }\n+\n+        if (t != null) {\n+            Logger.getLogger(PasteAction.class.getName()).log(Level.WARNING, null, t);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent ev) {\n+        try {\n+            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if(!c.isDataFlavorAvailable(DataFlavor.stringFlavor))return;\n+            boolean containsClass = false;\n+            String data = (String) c.getData(DataFlavor.stringFlavor);\n+            String className = \"\";\n+            String uncommented = data.replaceAll(\"(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)|(?://.*)\",\"\");// NOI18N\n+            uncommented = uncommented.trim();\n+            StringTokenizer st = new StringTokenizer(uncommented, \" \");// NOI18N\n+            if (st.hasMoreTokens() && st.nextToken().equals(\"public\") && st.hasMoreTokens() && st.nextToken().equals(\"class\") && st.hasMoreTokens()) {// NOI18N\n+                String cname = st.nextToken().trim();\n+                if (cname.charAt(cname.length() - 1) == '{') {\n+                    cname = cname.substring(0, cname.length() - 1);\n+                }\n+                if (SourceVersion.isIdentifier(cname)) {\n+                    containsClass = true;\n+                    className = cname;\n+                }\n+            }\n+            if (!containsClass) {\n+                JOptionPane.showMessageDialog(null, \"Code not valid to create class\");\n+                return;\n+            }\n+            Set<FileObject> files = this.context.files();\n+            if (files.size() != 1) {\n+                return;\n+            }\n+            String path = files.iterator().next().getPath();\n+            String packageName = \"\";\n+            File f = new File(path + \"\\\\\" + className + \".java\");// NOI18N\n+            if (f.exists()) {\n+                JOptionPane.showMessageDialog(null, \"Can not create class already present\");\n+                return;\n+            }\n+            if (!f.createNewFile()) {\n+                JOptionPane.showMessageDialog(null, \"Can not create file\");\n+                return;\n+            }\n+            ExplorerManager explorerManager = findExplorerManager();\n+            if (explorerManager.getSelectedNodes().length != 1) {\n+                return;\n+            }\n+            Node selectedNode = explorerManager.getSelectedNodes()[0];\n+            while (!selectedNode.getName().equals(\"${src.dir}\")) {// NOI18N", "originalCommit": "760c54b8a0920415338b27a3e76ae76a98eea609", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}