{"pr_number": 887, "pr_title": "add the s3 configuration of encrypt access key and secret key", "pr_author": "tigershi", "pr_createdAt": "2020-11-27T08:11:25Z", "pr_url": "https://github.com/vmware/singleton/pull/887", "timeline": [{"oid": "40bb90fc37d91b5aaf4c88112e42b9b25ff6d085", "url": "https://github.com/vmware/singleton/commit/40bb90fc37d91b5aaf4c88112e42b9b25ff6d085", "message": "fix print client hearder bug", "committedDate": "2020-11-06T07:12:57Z", "type": "commit"}, {"oid": "ea966fb89fe368f927525e840204c45d1965d270", "url": "https://github.com/vmware/singleton/commit/ea966fb89fe368f927525e840204c45d1965d270", "message": "change the gateway pattern url", "committedDate": "2020-11-13T03:51:12Z", "type": "commit"}, {"oid": "395857fdf8d2899fe43ca0616d69943cd4c3cb43", "url": "https://github.com/vmware/singleton/commit/395857fdf8d2899fe43ca0616d69943cd4c3cb43", "message": "fixed the interceptor bug", "committedDate": "2020-11-26T06:49:13Z", "type": "commit"}, {"oid": "ba9d6cf137d70e7eadcd8c0b7058cc445c9b4b66", "url": "https://github.com/vmware/singleton/commit/ba9d6cf137d70e7eadcd8c0b7058cc445c9b4b66", "message": "add the S3 password encrypt", "committedDate": "2020-11-27T07:51:03Z", "type": "commit"}, {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e", "url": "https://github.com/vmware/singleton/commit/f2d5980b8bd5a955012b12f601fcad55448b534e", "message": "Merge branch 'master' into master", "committedDate": "2020-11-27T08:11:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTY4NQ==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515685", "body": "Remove the comment and log the error message?", "bodyText": "Remove the comment and log the error message?", "bodyHTML": "<p dir=\"auto\">Remove the comment and log the error message?</p>", "author": "Xiaochao8", "createdAt": "2020-11-27T10:32:37Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTc4NQ==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515785", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "Xiaochao8", "createdAt": "2020-11-27T10:32:47Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjU5MQ==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531516591", "body": "```suggestion\r\n\t * the s3 password is encrypted or not\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password is encryption or not\n          \n          \n            \n            \t * the s3 password is encrypted or not", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"85\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> the s3 password is <span class=\"x x-first x-last\">encryption</span> or not</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"85\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> the s3 password is <span class=\"x x-first x-last\">encrypted</span> or not</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Xiaochao8", "createdAt": "2020-11-27T10:33:59Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNzU3Ng==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531517576", "body": "```suggestion\r\n\t * the public key for decrypting data\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password public key use to decrypt data\n          \n          \n            \n            \t * the public key for decrypting data", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"92\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> the <span class=\"x x-first x-last\">s3 password </span><span class=\"pl-k\">public</span> key <span class=\"x x-first x-last\">use to decrypt</span> data</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"92\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> the <span class=\"pl-k\">public</span> key <span class=\"pl-k x x-first\">for</span><span class=\"x x-last\"> decrypting</span> data</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Xiaochao8", "createdAt": "2020-11-27T10:34:45Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate Boolean encryption;\n+\t\n+\n+\t/**\n+\t * the s3 password public key use to decrypt data", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTQ4OA==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531519488", "body": "```suggestion\r\n * This class is to decode the access key and Secret key\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * it use to decode the access key and Secret key\n          \n          \n            \n             * This class is to decode the access key and Secret key", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"22\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">it use</span> to decode the access key and <span class=\"pl-smi\">Secret</span> key</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"22\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"x x-first\">This </span><span class=\"pl-k x\">class</span><span class=\"x\"> </span><span class=\"pl-en x x-last\">is</span> to decode the access key and Secret key</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Xiaochao8", "createdAt": "2020-11-27T10:36:40Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTY2OQ==", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531531669", "body": "Please check this issue reported by SONAR:\r\nhttps://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&rule_key=java%3AS5542", "bodyText": "Please check this issue reported by SONAR:\nhttps://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&rule_key=java%3AS5542", "bodyHTML": "<p dir=\"auto\">Please check this issue reported by SONAR:<br>\n<a href=\"https://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&amp;rule_key=java%3AS5542\" rel=\"nofollow\">https://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&amp;rule_key=java%3AS5542</a></p>", "author": "Xiaochao8", "createdAt": "2020-11-27T10:59:50Z", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key\n+ *\n+ */\n+public class RsaCryptUtils {", "originalCommit": "f2d5980b8bd5a955012b12f601fcad55448b534e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}