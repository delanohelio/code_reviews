{"pr_number": 3921, "pr_title": "Refactor Workpiece.getAll\u2026() methods", "pr_author": "matthias-ronge", "pr_createdAt": "2020-08-11T07:57:40Z", "pr_url": "https://github.com/kitodo/kitodo-production/pull/3921", "timeline": [{"oid": "7bb3ea0e1515289c2bb9c1064b111ccc4020ef5f", "url": "https://github.com/kitodo/kitodo-production/commit/7bb3ea0e1515289c2bb9c1064b111ccc4020ef5f", "message": "Not collect the stream for just counting it", "committedDate": "2020-08-11T09:17:51Z", "type": "forcePushed"}, {"oid": "7d8b075cdcc9544e299acd769b22e90f9c2068bf", "url": "https://github.com/kitodo/kitodo-production/commit/7d8b075cdcc9544e299acd769b22e90f9c2068bf", "message": "Not collect the stream for just counting it", "committedDate": "2020-08-11T09:20:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzM0OQ==", "url": "https://github.com/kitodo/kitodo-production/pull/3921#discussion_r471343349", "body": "```suggestion\r\n                .sorted(Comparator.comparing(MediaUnit::getOrder)).collect(Collectors.toList());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                    mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));\n          \n          \n            \n                            .sorted(Comparator.comparing(MediaUnit::getOrder)).collect(Collectors.toList());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        mediaUnits<span class=\"pl-k\">.</span>sort(<span class=\"pl-smi\">Comparator</span><span class=\"pl-k\">.</span>comparing(<span class=\"pl-smi\">MediaUnit</span><span class=\"pl-k\">::</span>getOrder));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .sorted(<span class=\"pl-smi\">Comparator</span><span class=\"pl-k\">.</span>comparing(<span class=\"pl-smi\">MediaUnit</span><span class=\"pl-k\">::</span>getOrder))<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "solth", "createdAt": "2020-08-17T09:06:21Z", "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "diffHunk": "@@ -180,42 +178,41 @@ public boolean equals(Object o) {\n     }\n \n     /**\n-     * Recursively search for all logical elements.\n+     * Returns all included structural elements of the root element of the\n+     * workpiece as a flat list. The list isn\u2019t backed by the included\n+     * structural elements, which means that insertions and deletions in the\n+     * list would not change the included structural elements. Therefore a list\n+     * that cannot be modified is returned.\n      *\n-     * @return list of all logical elements\n+     * @return all included structural elements as an unmodifiable list\n      */\n     public List<IncludedStructuralElement> getAllIncludedStructuralElements() {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>();\n-        includedStructuralElements.add(rootElement);\n-        includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(rootElement));\n-        return includedStructuralElements;\n-    }\n-\n-    private List<IncludedStructuralElement> getAllIncludedStructuralElementsRecursive(IncludedStructuralElement parent) {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>(parent.getChildren());\n-        for (IncludedStructuralElement child : parent.getChildren()) {\n-            if (Objects.nonNull(child)) {\n-                includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(child));\n-            }\n-        }\n-        return includedStructuralElements;\n+        return Collections.unmodifiableList(treeStream(rootElement).collect(Collectors.toList()));\n     }\n \n     /**\n-     * Recursively search for all media units with type \"page\".\n+     * Returns all media units of the media unit of the workpiece with type\n+     * \"page\" sorted by their {@code order} as a flat list. The list isn\u2019t\n+     * backed by the media units, which means that insertions and deletions in\n+     * the list would not change the media units. Therefore a list that cannot\n+     * be modified is returned.\n      *\n-     * @return list of all media units with type \"page\", sorted by their \"ORDER\" attribute.\n+     * @return all media units with type \"page\", sorted by their {@code order}\n      */\n-    public List<MediaUnit> getAllMediaUnitsSorted() {\n-        List<MediaUnit> mediaUnits = getAllMediaUnits();\n+    public List<MediaUnit> getAllMediaUnitsFilteredByTypePageAndSorted() {\n+        List<MediaUnit> mediaUnits = treeStream(mediaUnit).filter(m -> Objects.equals(m.getType(), MediaUnit.TYPE_PAGE))\n+                .collect(Collectors.toList());\n         mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));", "originalCommit": "7d8b075cdcc9544e299acd769b22e90f9c2068bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d018379c6641fa507754f295472131980449598a", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex c8e5d1fa0..2d0a34ea2 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -178,41 +181,42 @@ public class Workpiece {\n     }\n \n     /**\n-     * Returns all included structural elements of the root element of the\n-     * workpiece as a flat list. The list isn\u2019t backed by the included\n-     * structural elements, which means that insertions and deletions in the\n-     * list would not change the included structural elements. Therefore a list\n-     * that cannot be modified is returned.\n+     * Recursively search for all logical elements.\n      *\n-     * @return all included structural elements as an unmodifiable list\n+     * @return list of all logical elements\n      */\n     public List<IncludedStructuralElement> getAllIncludedStructuralElements() {\n-        return Collections.unmodifiableList(treeStream(rootElement).collect(Collectors.toList()));\n+        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>();\n+        includedStructuralElements.add(rootElement);\n+        includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(rootElement));\n+        return includedStructuralElements;\n+    }\n+\n+    private List<IncludedStructuralElement> getAllIncludedStructuralElementsRecursive(IncludedStructuralElement parent) {\n+        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>(parent.getChildren());\n+        for (IncludedStructuralElement child : parent.getChildren()) {\n+            if (Objects.nonNull(child)) {\n+                includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(child));\n+            }\n+        }\n+        return includedStructuralElements;\n     }\n \n     /**\n-     * Returns all media units of the media unit of the workpiece with type\n-     * \"page\" sorted by their {@code order} as a flat list. The list isn\u2019t\n-     * backed by the media units, which means that insertions and deletions in\n-     * the list would not change the media units. Therefore a list that cannot\n-     * be modified is returned.\n+     * Recursively search for all media units with type \"page\".\n      *\n-     * @return all media units with type \"page\", sorted by their {@code order}\n+     * @return list of all media units with type \"page\", sorted by their \"ORDER\" attribute.\n      */\n-    public List<MediaUnit> getAllMediaUnitsFilteredByTypePageAndSorted() {\n-        List<MediaUnit> mediaUnits = treeStream(mediaUnit).filter(m -> Objects.equals(m.getType(), MediaUnit.TYPE_PAGE))\n-                .collect(Collectors.toList());\n+    public List<MediaUnit> getAllMediaUnitsSorted() {\n+        List<MediaUnit> mediaUnits = getAllMediaUnits();\n         mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));\n-        return Collections.unmodifiableList(mediaUnits);\n+        return mediaUnits.stream().filter(m -> m.getType().equals(PAGE)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Returns all media units of the media unit of the workpiece as a flat\n-     * list. The list isn\u2019t backed by the media units, which means that\n-     * insertions and deletions in the list would not change the media units.\n-     * Therefore a list that cannot be modified is returned.\n+     * Recursively search for all media units with type \"page\".\n      *\n-     * @return all media units as an unmodifiable list\n+     * @return list of all media units with type \"page\".\n      */\n     public List<MediaUnit> getAllMediaUnits() {\n         List<MediaUnit> mediaUnits = new LinkedList<>(mediaUnit.getChildren());\n", "next_change": {"commit": "423a1cefdf34751e706aafcc47501e1726e76284", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex 2d0a34ea2..e8e77eee8 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -207,16 +203,16 @@ public class Workpiece {\n      *\n      * @return list of all media units with type \"page\", sorted by their \"ORDER\" attribute.\n      */\n-    public List<MediaUnit> getAllMediaUnitsSorted() {\n+    public List<MediaUnit> getAllMediaUnitsFilteredByTypePageAndSorted() {\n         List<MediaUnit> mediaUnits = getAllMediaUnits();\n         mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));\n-        return mediaUnits.stream().filter(m -> m.getType().equals(PAGE)).collect(Collectors.toList());\n+        return mediaUnits.stream().filter(m -> m.getType().equals(MediaUnit.TYPE_PAGE)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Recursively search for all media units with type \"page\".\n+     * Recursively search for all media units.\n      *\n-     * @return list of all media units with type \"page\".\n+     * @return list of all media units.\n      */\n     public List<MediaUnit> getAllMediaUnits() {\n         List<MediaUnit> mediaUnits = new LinkedList<>(mediaUnit.getChildren());\n", "next_change": {"commit": "78458e5148f622f7902fd317857eed0d37b73755", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex e8e77eee8..46160dd8c 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -177,42 +178,40 @@ public class Workpiece {\n     }\n \n     /**\n-     * Recursively search for all logical elements.\n+     * Returns all included structural elements of the root element of the\n+     * workpiece as a flat list. The list isn\u2019t backed by the included\n+     * structural elements, which means that insertions and deletions in the\n+     * list would not change the included structural elements. Therefore a list\n+     * that cannot be modified is returned.\n      *\n-     * @return list of all logical elements\n+     * @return all included structural elements as an unmodifiable list\n      */\n     public List<IncludedStructuralElement> getAllIncludedStructuralElements() {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>();\n-        includedStructuralElements.add(rootElement);\n-        includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(rootElement));\n-        return includedStructuralElements;\n-    }\n-\n-    private List<IncludedStructuralElement> getAllIncludedStructuralElementsRecursive(IncludedStructuralElement parent) {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>(parent.getChildren());\n-        for (IncludedStructuralElement child : parent.getChildren()) {\n-            if (Objects.nonNull(child)) {\n-                includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(child));\n-            }\n-        }\n-        return includedStructuralElements;\n+        return Collections.unmodifiableList(treeStream(rootElement).collect(Collectors.toList()));\n     }\n \n     /**\n-     * Recursively search for all media units with type \"page\".\n+     * Returns all media units of the media unit of the workpiece with type\n+     * \"page\" sorted by their {@code order} as a flat list. The list isn\u2019t\n+     * backed by the media units, which means that insertions and deletions in\n+     * the list would not change the media units. Therefore a list that cannot\n+     * be modified is returned.\n      *\n-     * @return list of all media units with type \"page\", sorted by their \"ORDER\" attribute.\n+     * @return all media units with type \"page\", sorted by their {@code order}\n      */\n     public List<MediaUnit> getAllMediaUnitsFilteredByTypePageAndSorted() {\n-        List<MediaUnit> mediaUnits = getAllMediaUnits();\n-        mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));\n-        return mediaUnits.stream().filter(m -> m.getType().equals(MediaUnit.TYPE_PAGE)).collect(Collectors.toList());\n+        List<MediaUnit> mediaUnits = treeStream(mediaUnit).filter(m -> Objects.equals(m.getType(), MediaUnit.TYPE_PAGE))\n+                .sorted(Comparator.comparing(MediaUnit::getOrder)).collect(Collectors.toList());\n+        return Collections.unmodifiableList(mediaUnits);\n     }\n \n     /**\n-     * Recursively search for all media units.\n+     * Returns all media units of the media unit of the workpiece as a flat\n+     * list. The list isn\u2019t backed by the media units, which means that\n+     * insertions and deletions in the list would not change the media units.\n+     * Therefore a list that cannot be modified is returned.\n      *\n-     * @return list of all media units.\n+     * @return all media units as an unmodifiable list\n      */\n     public List<MediaUnit> getAllMediaUnits() {\n         List<MediaUnit> mediaUnits = new LinkedList<>(mediaUnit.getChildren());\n", "next_change": {"commit": "72ac8ab563e2b64a28dcada9dc5731f17194ff62", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex 46160dd8c..a3156915f 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -214,26 +214,7 @@ public class Workpiece {\n      * @return all media units as an unmodifiable list\n      */\n     public List<MediaUnit> getAllMediaUnits() {\n-        List<MediaUnit> mediaUnits = new LinkedList<>(mediaUnit.getChildren());\n-        for (MediaUnit mediaUnit : mediaUnit.getChildren()) {\n-            if (Objects.nonNull(mediaUnit)) {\n-                mediaUnits = getAllMediaUnitsRecursive(mediaUnit, mediaUnits);\n-            }\n-        }\n-        return mediaUnits;\n-    }\n-\n-    private List<MediaUnit> getAllMediaUnitsRecursive(MediaUnit parent, List<MediaUnit> mediaUnits) {\n-        List<MediaUnit> allMediaUnits = mediaUnits;\n-        for (MediaUnit mediaUnit : parent.getChildren()) {\n-            if (Objects.nonNull(mediaUnit)) {\n-                allMediaUnits.add(mediaUnit);\n-                if (!mediaUnit.getChildren().isEmpty()) {\n-                    allMediaUnits = getAllMediaUnitsRecursive(mediaUnit, mediaUnits);\n-                }\n-            }\n-        }\n-        return allMediaUnits;\n+        return Collections.unmodifiableList(treeStream(mediaUnit).collect(Collectors.toList()));\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzkzNA==", "url": "https://github.com/kitodo/kitodo-production/pull/3921#discussion_r471343934", "body": "```suggestion\r\n        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n          \n          \n            \n                    return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>concat(<span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>of((<span class=\"pl-smi\">T</span>) tree), tree<span class=\"pl-k\">.</span>getChildren()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>flatMap(<span class=\"x x-first\">child </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>treeStream<span class=\"x x-first x-last\">(child)</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>concat(<span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>of((<span class=\"pl-smi\">T</span>) tree), tree<span class=\"pl-k\">.</span>getChildren()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>flatMap(<span class=\"pl-smi x x-first\">Workpiece</span><span class=\"pl-k x x-last\">::</span>treeStream));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "solth", "createdAt": "2020-08-17T09:07:26Z", "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "diffHunk": "@@ -239,4 +236,16 @@ public boolean equals(Object o) {\n         }\n         return allMediaUnits;\n     }\n+\n+    /**\n+     * Generates a stream of nodes from structure tree.\n+     *\n+     * @param tree\n+     *            starting node\n+     * @return all nodes as stream\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Parent<T>> Stream<T> treeStream(Parent<T> tree) {\n+        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));", "originalCommit": "7d8b075cdcc9544e299acd769b22e90f9c2068bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d018379c6641fa507754f295472131980449598a", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex c8e5d1fa0..2d0a34ea2 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -245,7 +249,7 @@ public class Workpiece {\n      * @return all nodes as stream\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends Parent<T>> Stream<T> treeStream(Parent<T> tree) {\n+    public static <T extends Division<T>> Stream<T> treeStream(Division<T> tree) {\n         return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n     }\n }\n", "next_change": {"commit": "78458e5148f622f7902fd317857eed0d37b73755", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex 2d0a34ea2..46160dd8c 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -250,6 +245,6 @@ public class Workpiece {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends Division<T>> Stream<T> treeStream(Division<T> tree) {\n-        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n+        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));\n     }\n }\n", "next_change": {"commit": "72ac8ab563e2b64a28dcada9dc5731f17194ff62", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex 46160dd8c..a3156915f 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -245,6 +226,6 @@ public class Workpiece {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends Division<T>> Stream<T> treeStream(Division<T> tree) {\n-        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));\n+        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n     }\n }\n", "next_change": {"commit": "172901083170b8ed56000386f1043a742df524a0", "changed_code": [{"header": "diff --git a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\nindex a3156915f..422052fd8 100644\n--- a/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n+++ b/Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java\n", "chunk": "@@ -226,6 +225,6 @@ public class Workpiece {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends Division<T>> Stream<T> treeStream(Division<T> tree) {\n-        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n+        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "d018379c6641fa507754f295472131980449598a", "url": "https://github.com/kitodo/kitodo-production/commit/d018379c6641fa507754f295472131980449598a", "message": "Deduplicate method treeStream() into class Workpiece", "committedDate": "2020-08-17T12:30:13Z", "type": "commit"}, {"oid": "02592a34a6089edf16040aff99f600cfa6413d9d", "url": "https://github.com/kitodo/kitodo-production/commit/02592a34a6089edf16040aff99f600cfa6413d9d", "message": "Extract media unit type strings into constants", "committedDate": "2020-08-17T12:31:52Z", "type": "commit"}, {"oid": "423a1cefdf34751e706aafcc47501e1726e76284", "url": "https://github.com/kitodo/kitodo-production/commit/423a1cefdf34751e706aafcc47501e1726e76284", "message": "Rename method to better make explicit what it does", "committedDate": "2020-08-17T12:31:52Z", "type": "commit"}, {"oid": "78458e5148f622f7902fd317857eed0d37b73755", "url": "https://github.com/kitodo/kitodo-production/commit/78458e5148f622f7902fd317857eed0d37b73755", "message": "Commit suggested changes\n\nCo-authored-by: Arved Solth <solth@effective-webwork.de>", "committedDate": "2020-08-17T12:33:24Z", "type": "forcePushed"}, {"oid": "3912b7ca6ad9cbc6eb03c8cc4c9d928418702c11", "url": "https://github.com/kitodo/kitodo-production/commit/3912b7ca6ad9cbc6eb03c8cc4c9d928418702c11", "message": "Commit suggested changes\n\nCo-authored-by: Arved Solth <solth@effective-webwork.de>", "committedDate": "2020-08-17T12:51:18Z", "type": "forcePushed"}, {"oid": "72ac8ab563e2b64a28dcada9dc5731f17194ff62", "url": "https://github.com/kitodo/kitodo-production/commit/72ac8ab563e2b64a28dcada9dc5731f17194ff62", "message": "Rewrite suspicious recursive list building methods", "committedDate": "2020-08-17T13:34:58Z", "type": "commit"}, {"oid": "1bd1da63cb65d4cd698aaaa20ceb57b76577b1a0", "url": "https://github.com/kitodo/kitodo-production/commit/1bd1da63cb65d4cd698aaaa20ceb57b76577b1a0", "message": "Use getters for flat lists", "committedDate": "2020-08-17T13:35:00Z", "type": "commit"}, {"oid": "0ad2ac0b867b87adba251373a43dff1c262648ce", "url": "https://github.com/kitodo/kitodo-production/commit/0ad2ac0b867b87adba251373a43dff1c262648ce", "message": "Not collect the stream for just counting it", "committedDate": "2020-08-17T13:35:03Z", "type": "commit"}, {"oid": "172901083170b8ed56000386f1043a742df524a0", "url": "https://github.com/kitodo/kitodo-production/commit/172901083170b8ed56000386f1043a742df524a0", "message": "Commit suggested changes\n\nCo-authored-by: Arved Solth <solth@effective-webwork.de>", "committedDate": "2020-08-17T13:35:05Z", "type": "commit"}, {"oid": "172901083170b8ed56000386f1043a742df524a0", "url": "https://github.com/kitodo/kitodo-production/commit/172901083170b8ed56000386f1043a742df524a0", "message": "Commit suggested changes\n\nCo-authored-by: Arved Solth <solth@effective-webwork.de>", "committedDate": "2020-08-17T13:35:05Z", "type": "forcePushed"}, {"oid": "8ab4327572998696f0eff41d9b4975c56d601fc1", "url": "https://github.com/kitodo/kitodo-production/commit/8ab4327572998696f0eff41d9b4975c56d601fc1", "message": "Rename stub variable 'm' to 'mediaUnitToCheck'", "committedDate": "2020-08-17T13:51:38Z", "type": "commit"}]}