{"pr_number": 3793, "pr_title": "remove property type and save properties on process type", "pr_author": "Kathrin-Huber", "pr_createdAt": "2020-06-29T08:56:48Z", "pr_url": "https://github.com/kitodo/kitodo-production/pull/3793", "timeline": [{"oid": "9e552e07ee697e8b70bfc53e421a05a366ef205f", "url": "https://github.com/kitodo/kitodo-production/commit/9e552e07ee697e8b70bfc53e421a05a366ef205f", "message": "remove property type and save properties on process type", "committedDate": "2020-06-29T09:03:23Z", "type": "forcePushed"}, {"oid": "5a2805541a3d0cdafbb32807302409abcbca1224", "url": "https://github.com/kitodo/kitodo-production/commit/5a2805541a3d0cdafbb32807302409abcbca1224", "message": "remove property type and save properties on process type", "committedDate": "2020-06-29T09:04:22Z", "type": "forcePushed"}, {"oid": "a0ab8468bf4708c48b4e4f005acb5f78d118aa09", "url": "https://github.com/kitodo/kitodo-production/commit/a0ab8468bf4708c48b4e4f005acb5f78d118aa09", "message": "fix sql query", "committedDate": "2020-07-01T11:16:56Z", "type": "forcePushed"}, {"oid": "0d492a2157372d1828b4f218595429857fb20713", "url": "https://github.com/kitodo/kitodo-production/commit/0d492a2157372d1828b4f218595429857fb20713", "message": "fix sql query", "committedDate": "2020-07-01T11:26:41Z", "type": "forcePushed"}, {"oid": "0e8543cb7f7bf421bc6f910413920e371c5afaed", "url": "https://github.com/kitodo/kitodo-production/commit/0e8543cb7f7bf421bc6f910413920e371c5afaed", "message": "fix sql query", "committedDate": "2020-07-01T11:57:34Z", "type": "forcePushed"}, {"oid": "9b869f992d22c3dcdfc09cb79e41e07cc836412a", "url": "https://github.com/kitodo/kitodo-production/commit/9b869f992d22c3dcdfc09cb79e41e07cc836412a", "message": "fix sql query", "committedDate": "2020-07-01T12:38:06Z", "type": "forcePushed"}, {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "url": "https://github.com/kitodo/kitodo-production/commit/abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "message": "fix sql query", "committedDate": "2020-07-01T12:43:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MzMzMA==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449053330", "body": "```suggestion\r\n        for (Property property : process.getWorkpieces()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    properties = process.getWorkpieces();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    for (Property property : process.getWorkpieces()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"82\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        properties <span class=\"pl-k\">=</span> process<span class=\"pl-k\">.</span>getWorkpieces();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"83\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> properties) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"82\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> process<span class=\"pl-k\">.</span>getWorkpieces()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "solth", "createdAt": "2020-07-02T14:43:11Z", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getTemplates();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getWorkpieces();\n+        for (Property property : properties) {", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MzY0MA==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449053640", "body": "```suggestion\r\n        for (Property property : process.getTemplates()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    properties = process.getTemplates();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    for (Property property : process.getTemplates()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"76\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        properties <span class=\"pl-k\">=</span> process<span class=\"pl-k\">.</span>getTemplates();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"77\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> properties) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"76\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> process<span class=\"pl-k\">.</span>getTemplates()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "solth", "createdAt": "2020-07-02T14:43:40Z", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getTemplates();\n+        for (Property property : properties) {", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NDAzNQ==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449054035", "body": "```suggestion\r\n        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\r\n        for (Property property : process.getProperties()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Property> properties = process.getProperties();\n          \n          \n            \n                    List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n          \n          \n            \n                    for (Property property : process.getProperties()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Property</span>&gt;</span> properties <span class=\"pl-k\">=</span> process<span class=\"pl-k\">.</span>getProperties();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">List&lt;<span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span>&gt;</span> propertiesForIndex <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"71\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> properties) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">List&lt;<span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span>&gt;</span> propertiesForIndex <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Property</span> property <span class=\"pl-k\">:</span> process<span class=\"pl-k\">.</span>getProperties()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "solth", "createdAt": "2020-07-02T14:44:17Z", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NzQ3Ng==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057476", "body": "Why do we need to keep this method if it always returns `null`? \r\n\r\nAlso, I think this will provoke a `NullPointerException` in FilterService.filterProcessProperty:899, where the result of calling `findProcessProperty` is passed to FilterService.createSetQuery.", "bodyText": "Why do we need to keep this method if it always returns null?\nAlso, I think this will provoke a NullPointerException in FilterService.filterProcessProperty:899, where the result of calling findProcessProperty is passed to FilterService.createSetQuery.", "bodyHTML": "<p dir=\"auto\">Why do we need to keep this method if it always returns <code>null</code>?</p>\n<p dir=\"auto\">Also, I think this will provoke a <code>NullPointerException</code> in FilterService.filterProcessProperty:899, where the result of calling <code>findProcessProperty</code> is passed to FilterService.createSetQuery.</p>", "author": "solth", "createdAt": "2020-07-02T14:49:23Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -665,9 +602,8 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      *            true or false\n      * @return list of process JSONObjects\n      */\n-    public List<Map<String, Object>> findByProcessProperty(String title, String value, boolean contains)\n-            throws DataException {\n-        return findByProperty(title, value, \"process\", \"properties.id\", contains);\n+    public List<Map<String, Object>> findByProcessProperty(String title, String value, boolean contains) {\n+        return null;", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NzU4Mw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057583", "body": "See above.", "bodyText": "See above.", "bodyHTML": "<p dir=\"auto\">See above.</p>", "author": "solth", "createdAt": "2020-07-02T14:49:33Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -681,9 +617,8 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      *            true or false\n      * @return list of process JSONObjects\n      */\n-    public List<Map<String, Object>> findByTemplateProperty(String title, String value, boolean contains)\n-            throws DataException {\n-        return findByProperty(title, value, \"template\", \"templates.id\", contains);\n+    public List<Map<String, Object>> findByTemplateProperty(String title, String value, boolean contains) {\n+        return null;", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Nzg1Mw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057853", "body": "See above.", "bodyText": "See above.", "bodyHTML": "<p dir=\"auto\">See above.</p>", "author": "solth", "createdAt": "2020-07-02T14:49:56Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -699,7 +634,7 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      */\n     public List<Map<String, Object>> findByWorkpieceProperty(String title, String value, boolean contains)\n             throws DataException {\n-        return findByProperty(title, value, \"workpiece\", \"workpieces.id\", contains);\n+        return null;", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTAyMw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131023", "body": "Please use `getByQuery` with second parameter with list of to map values. If not this is introducing a possible SQL injection. Would look like this:\r\n```java\r\npublic List<Property> findByTitle(String title, String type, boolean contains) { \r\n   Hashmap parameters = new Hashmap<String, String>();\r\n   parameters.put(\"title\", title);\r\n   return getByQuery(\"from Property as property where property.title=:title\", parameters);\r\n}\r\n```", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection. Would look like this:\npublic List<Property> findByTitle(String title, String type, boolean contains) { \n   Hashmap parameters = new Hashmap<String, String>();\n   parameters.put(\"title\", title);\n   return getByQuery(\"from Property as property where property.title=:title\", parameters);\n}", "bodyHTML": "<p dir=\"auto\">Please use <code>getByQuery</code> with second parameter with list of to map values. If not this is introducing a possible SQL injection. Would look like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public List&lt;Property&gt; findByTitle(String title, String type, boolean contains) { \n   Hashmap parameters = new Hashmap&lt;String, String&gt;();\n   parameters.put(&quot;title&quot;, title);\n   return getByQuery(&quot;from Property as property where property.title=:title&quot;, parameters);\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Property</span>&gt;</span> findByTitle(<span class=\"pl-smi\">String</span> title, <span class=\"pl-smi\">String</span> type, <span class=\"pl-k\">boolean</span> contains) { \n   <span class=\"pl-smi\">Hashmap</span> parameters <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">Hashmap&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span>();\n   parameters<span class=\"pl-k\">.</span>put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>, title);\n   <span class=\"pl-k\">return</span> getByQuery(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>from Property as property where property.title=:title<span class=\"pl-pds\">\"</span></span>, parameters);\n}</pre></div>", "author": "henning-gerhardt", "createdAt": "2020-07-02T16:21:19Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -156,8 +115,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    public List<Map<String,Object>> findByTitle(String title, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.TITLE.getKey(), title, type, contains);\n+    public List<Property> findByTitle(String title, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.title='\" + title + \"'\");", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTEyMA==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131120", "body": "Please use `getByQuery` with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "bodyHTML": "<p dir=\"auto\">Please use <code>getByQuery</code> with second parameter with list of to map values. If not this is introducing a possible SQL injection.</p>", "author": "henning-gerhardt", "createdAt": "2020-07-02T16:21:27Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -171,17 +130,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    List<Map<String,Object>> findByValue(String value, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.VALUE.getKey(), value, type, contains);\n-    }\n-\n-    private List<Map<String,Object>> findProperty(String key, String value, String type, boolean contains) throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(key, value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n+    List<Property> findByValue(String value, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.value='\" + value + \"'\");", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTE5Mw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131193", "body": "Please use `getByQuery` with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "bodyHTML": "<p dir=\"auto\">Please use <code>getByQuery</code> with second parameter with list of to map values. If not this is introducing a possible SQL injection.</p>", "author": "henning-gerhardt", "createdAt": "2020-07-02T16:21:34Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -198,25 +148,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            true or false\n      * @return list of JSON objects with batches of exact type\n      */\n-    List<Map<String, Object>> findByTitleAndValue(String title, String value, String type, boolean contains)\n-            throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(PropertyTypeField.TITLE.getKey(), title, contains, Operator.AND));\n-        query.must(createSimpleQuery(PropertyTypeField.VALUE.getKey(), value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n-    }\n-\n-    @Override\n-    public PropertyDTO convertJSONObjectToDTO(Map<String, Object> jsonObject, boolean related) throws DataException {\n-        PropertyDTO propertyDTO = new PropertyDTO();\n-        propertyDTO.setId(getIdFromJSONObject(jsonObject));\n-        propertyDTO.setTitle(PropertyTypeField.TITLE.getStringValue(jsonObject));\n-        propertyDTO.setValue(PropertyTypeField.VALUE.getStringValue(jsonObject));\n-        propertyDTO.setCreationDate(PropertyTypeField.CREATION_DATE.getStringValue(jsonObject));\n-        return propertyDTO;\n+    List<Property> findByTitleAndValue(String title, String value, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.title='\" + title + \"' and property.value='\" + value + \"'\");", "originalCommit": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54942150a7e1742cb8234e18762349d0a24d3e21", "url": "https://github.com/kitodo/kitodo-production/commit/54942150a7e1742cb8234e18762349d0a24d3e21", "message": "change import", "committedDate": "2020-07-06T12:05:07Z", "type": "forcePushed"}, {"oid": "f67a5aa42633f1730b04643f5eb7624831cc1b09", "url": "https://github.com/kitodo/kitodo-production/commit/f67a5aa42633f1730b04643f5eb7624831cc1b09", "message": "change import", "committedDate": "2020-07-07T13:45:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4ODYzNA==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450888634", "body": "Parameter `type` is never used.", "bodyText": "Parameter type is never used.", "bodyHTML": "<p dir=\"auto\">Parameter <code>type</code> is never used.</p>", "author": "solth", "createdAt": "2020-07-07T14:02:50Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -133,16 +92,17 @@ public Long countResults(Map filters) throws DataException {\n      *\n      * @return a list of titles.\n      */\n-    public List<String> findProcessPropertiesTitlesDistinct() throws DataException, DAOException {\n+    public List<String> findProcessPropertiesTitlesDistinct() {\n         return findDistinctTitles(\"process\");\n     }\n \n-    private List<String> findDistinctTitles(String type) throws DataException, DAOException {\n-        return findDistinctValues(getQueryForType(type), \"title.keyword\", true, countDatabaseRows());\n-    }\n-\n-    private QueryBuilder getQueryForType(String type) {\n-        return createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true, Operator.AND);\n+    private List<String> findDistinctTitles(String type) {", "originalCommit": "f67a5aa42633f1730b04643f5eb7624831cc1b09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTA5NQ==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889095", "body": "Parameters `type` and `contains` are never used.", "bodyText": "Parameters type and contains are never used.", "bodyHTML": "<p dir=\"auto\">Parameters <code>type</code> and <code>contains</code> are never used.</p>", "author": "solth", "createdAt": "2020-07-07T14:03:27Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -156,8 +116,10 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    public List<Map<String,Object>> findByTitle(String title, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.TITLE.getKey(), title, type, contains);\n+    public List<Property> findByTitle(String title, String type, boolean contains) {", "originalCommit": "f67a5aa42633f1730b04643f5eb7624831cc1b09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTMzNw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889337", "body": "See above.", "bodyText": "See above.", "bodyHTML": "<p dir=\"auto\">See above.</p>", "author": "solth", "createdAt": "2020-07-07T14:03:48Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -171,17 +133,10 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    List<Map<String,Object>> findByValue(String value, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.VALUE.getKey(), value, type, contains);\n-    }\n-\n-    private List<Map<String,Object>> findProperty(String key, String value, String type, boolean contains) throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(key, value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n+    List<Property> findByValue(String value, String type, boolean contains) {", "originalCommit": "f67a5aa42633f1730b04643f5eb7624831cc1b09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTUzMw==", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889533", "body": "See above.", "bodyText": "See above.", "bodyHTML": "<p dir=\"auto\">See above.</p>", "author": "solth", "createdAt": "2020-07-07T14:04:03Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -198,25 +153,11 @@ private QueryBuilder getQueryForType(String type) {\n      *            true or false\n      * @return list of JSON objects with batches of exact type\n      */\n-    List<Map<String, Object>> findByTitleAndValue(String title, String value, String type, boolean contains)\n-            throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(PropertyTypeField.TITLE.getKey(), title, contains, Operator.AND));\n-        query.must(createSimpleQuery(PropertyTypeField.VALUE.getKey(), value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n-    }\n-\n-    @Override\n-    public PropertyDTO convertJSONObjectToDTO(Map<String, Object> jsonObject, boolean related) throws DataException {\n-        PropertyDTO propertyDTO = new PropertyDTO();\n-        propertyDTO.setId(getIdFromJSONObject(jsonObject));\n-        propertyDTO.setTitle(PropertyTypeField.TITLE.getStringValue(jsonObject));\n-        propertyDTO.setValue(PropertyTypeField.VALUE.getStringValue(jsonObject));\n-        propertyDTO.setCreationDate(PropertyTypeField.CREATION_DATE.getStringValue(jsonObject));\n-        return propertyDTO;\n+    List<Property> findByTitleAndValue(String title, String value, String type, boolean contains) {", "originalCommit": "f67a5aa42633f1730b04643f5eb7624831cc1b09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "997b237fe3ee2bfafd4145a9d4811929e45d4158", "url": "https://github.com/kitodo/kitodo-production/commit/997b237fe3ee2bfafd4145a9d4811929e45d4158", "message": "fix import", "committedDate": "2020-07-10T12:17:32Z", "type": "forcePushed"}, {"oid": "075317eb6decd9d0ed6b234d46a46f3dd10080b9", "url": "https://github.com/kitodo/kitodo-production/commit/075317eb6decd9d0ed6b234d46a46f3dd10080b9", "message": "fix import", "committedDate": "2020-07-14T12:36:09Z", "type": "forcePushed"}, {"oid": "5b7ce0e668aae62accad9b76ace568732dc4c262", "url": "https://github.com/kitodo/kitodo-production/commit/5b7ce0e668aae62accad9b76ace568732dc4c262", "message": "remove property type and save properties on process type", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "5b66854395c492051147daa60ba2a58a79764087", "url": "https://github.com/kitodo/kitodo-production/commit/5b66854395c492051147daa60ba2a58a79764087", "message": "fix test", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "d25bfadefeab623353a40062df561cfc7b100557", "url": "https://github.com/kitodo/kitodo-production/commit/d25bfadefeab623353a40062df561cfc7b100557", "message": "fix entendation", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "5562aaa987c64a59f13cbe7278002ef1ec7e4b7d", "url": "https://github.com/kitodo/kitodo-production/commit/5562aaa987c64a59f13cbe7278002ef1ec7e4b7d", "message": "change mapping to strict", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "2de70af4b530e9d813e84b35a0c49c8992ef9679", "url": "https://github.com/kitodo/kitodo-production/commit/2de70af4b530e9d813e84b35a0c49c8992ef9679", "message": "fix tests", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "5a3de04b8ae161290be54aa05fdb552bfd4de52d", "url": "https://github.com/kitodo/kitodo-production/commit/5a3de04b8ae161290be54aa05fdb552bfd4de52d", "message": "fix sql query", "committedDate": "2020-07-22T09:38:48Z", "type": "commit"}, {"oid": "0885e052a19d0075e021e2ce1d395ef9bb8da9df", "url": "https://github.com/kitodo/kitodo-production/commit/0885e052a19d0075e021e2ce1d395ef9bb8da9df", "message": "remove search by property", "committedDate": "2020-07-22T09:38:49Z", "type": "commit"}, {"oid": "19d55729d4be5828b9bda89399d97201fc72fe7d", "url": "https://github.com/kitodo/kitodo-production/commit/19d55729d4be5828b9bda89399d97201fc72fe7d", "message": "change import", "committedDate": "2020-07-22T09:38:49Z", "type": "commit"}, {"oid": "5edb810148560c1f17586697587ca6e07c5081b7", "url": "https://github.com/kitodo/kitodo-production/commit/5edb810148560c1f17586697587ca6e07c5081b7", "message": "ignore Working ST", "committedDate": "2020-07-22T09:38:49Z", "type": "commit"}, {"oid": "7d402ec2e876f7d99bfa469877e9e2352d5bc7f0", "url": "https://github.com/kitodo/kitodo-production/commit/7d402ec2e876f7d99bfa469877e9e2352d5bc7f0", "message": "fix import", "committedDate": "2020-07-22T09:38:49Z", "type": "commit"}, {"oid": "08abfb7aa3df63bdd183adbf0dd2af3aa96c0f28", "url": "https://github.com/kitodo/kitodo-production/commit/08abfb7aa3df63bdd183adbf0dd2af3aa96c0f28", "message": "fix sorting on desktop", "committedDate": "2020-07-22T09:38:49Z", "type": "commit"}, {"oid": "08abfb7aa3df63bdd183adbf0dd2af3aa96c0f28", "url": "https://github.com/kitodo/kitodo-production/commit/08abfb7aa3df63bdd183adbf0dd2af3aa96c0f28", "message": "fix sorting on desktop", "committedDate": "2020-07-22T09:38:49Z", "type": "forcePushed"}]}