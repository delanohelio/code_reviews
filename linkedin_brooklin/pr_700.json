{"pr_number": 700, "pr_title": "Implement equals and hashCode in BrooklinMetricInfo.", "pr_author": "vmaheshw", "pr_createdAt": "2020-04-14T02:35:56Z", "pr_url": "https://github.com/linkedin/brooklin/pull/700", "timeline": [{"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "message": "Merge pull request #1 from linkedin/master\n\nPull latest", "committedDate": "2019-11-18T20:06:44Z", "type": "commit"}, {"oid": "7aefab52082458e98cd76eb82884fee1db13b4af", "url": "https://github.com/linkedin/brooklin/commit/7aefab52082458e98cd76eb82884fee1db13b4af", "message": "Merge branch 'master' of github.com:linkedin/brooklin into HEAD", "committedDate": "2020-04-14T00:56:40Z", "type": "commit"}, {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "url": "https://github.com/linkedin/brooklin/commit/c7b6ddbcdce06639642c51b200812a0e85fd30c5", "message": "Add equals and hashCode in BrooklinMetricInfo", "committedDate": "2020-04-14T02:34:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTIzNg==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407835236", "body": "nit: shouldn't this be 2020 license?", "bodyText": "nit: shouldn't this be 2020 license?", "bodyHTML": "<p dir=\"auto\">nit: shouldn't this be 2020 license?</p>", "author": "somandal", "createdAt": "2020-04-14T02:52:47Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzMjM0OQ==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407832349", "body": "1. `@Test` on class\r\n2. Rename to `TestBrooklinMetricInfo`", "bodyText": "@Test on class\nRename to TestBrooklinMetricInfo", "bodyHTML": "<ol dir=\"auto\">\n<li><code>@Test</code> on class</li>\n<li>Rename to <code>TestBrooklinMetricInfo</code></li>\n</ol>", "author": "ahmedahamid", "createdAt": "2020-04-14T02:42:13Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTc4MA==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407835780", "body": "If you think it's a nicer choice, some JDK methods (e.g. `Objects.equals()`) use `a` and `b` in situations like this.", "bodyText": "If you think it's a nicer choice, some JDK methods (e.g. Objects.equals()) use a and b in situations like this.", "bodyHTML": "<p dir=\"auto\">If you think it's a nicer choice, some JDK methods (e.g. <code>Objects.equals()</code>) use <code>a</code> and <code>b</code> in situations like this.</p>", "author": "ahmedahamid", "createdAt": "2020-04-14T02:54:28Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,38 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> attributes1, Optional<List<String>> attributes2) {", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNjk2Ng==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407836966", "body": "1. Can be simplified to:\r\n    ```java\r\n    if (!attributes1.isPresent() || !attributes2.isPresent()) {\r\n       return attributes1.isPresent() == attributes2.isPresent();\r\n    }\r\n\r\n    // Both are present\r\n    return Objects.equals(new HashSet<>(attributes1.get()), new HashSet<>(attributes2.get()));\r\n    ```\r\n2. To secure the whole class against accidental null `Optional`s, please add a `Validate.notNull()` for `attributes` in the ctor on line 25.\r\n\r\n", "bodyText": "Can be simplified to:\nif (!attributes1.isPresent() || !attributes2.isPresent()) {\n   return attributes1.isPresent() == attributes2.isPresent();\n}\n\n// Both are present\nreturn Objects.equals(new HashSet<>(attributes1.get()), new HashSet<>(attributes2.get()));\n\nTo secure the whole class against accidental null Optionals, please add a Validate.notNull() for attributes in the ctor on line 25.", "bodyHTML": "<ol dir=\"auto\">\n<li>Can be simplified to:\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!attributes1.isPresent() || !attributes2.isPresent()) {\n   return attributes1.isPresent() == attributes2.isPresent();\n}\n\n// Both are present\nreturn Objects.equals(new HashSet&lt;&gt;(attributes1.get()), new HashSet&lt;&gt;(attributes2.get()));\"><pre><span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>attributes1<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>attributes2<span class=\"pl-k\">.</span>isPresent()) {\n   <span class=\"pl-k\">return</span> attributes1<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">==</span> attributes2<span class=\"pl-k\">.</span>isPresent();\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Both are present</span>\n<span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>equals(<span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>(attributes1<span class=\"pl-k\">.</span>get()), <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>(attributes2<span class=\"pl-k\">.</span>get()));</pre></div>\n</li>\n<li>To secure the whole class against accidental null <code>Optional</code>s, please add a <code>Validate.notNull()</code> for <code>attributes</code> in the ctor on line 25.</li>\n</ol>", "author": "ahmedahamid", "createdAt": "2020-04-14T02:59:02Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,38 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> attributes1, Optional<List<String>> attributes2) {\n+    if (!(attributes1.isPresent() == attributes2.isPresent())) {\n+      return false;\n+    }\n+    if (!attributes1.isPresent()) {\n+      return true;\n+    }\n+\n+    Set<String> attributeSet1 = new HashSet<>();\n+    attributes1.ifPresent(attributeSet1::addAll);\n+\n+    Set<String> attributeSet2 = new HashSet<>();\n+    attributes2.ifPresent(attributeSet2::addAll);\n+\n+    return attributeSet1.equals(attributeSet2);", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzODY4NA==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407838684", "body": "Link should be `BrooklinMetricInfo`", "bodyText": "Link should be BrooklinMetricInfo", "bodyHTML": "<p dir=\"auto\">Link should be <code>BrooklinMetricInfo</code></p>", "author": "ahmedahamid", "createdAt": "2020-04-14T03:05:13Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzM5Nw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843397", "body": "You can reduce the duplication between the identical tests in this file by using generics:\r\n```java\r\n  private static <T extends BrooklinMetricInfo> void testBrooklinMetricInfoHelper(\r\n      Function<String, T> singleArgCtor, BiFunction<String, Optional<List<String>>, T> twoArgCtor) {\r\n\r\n    T brooklinMeterInfo1 = singleArgCtor.apply (\"meter1\");\r\n    T brooklinMeterInfo2 = singleArgCtor.apply(\"meter2\");\r\n    T brooklinMeterInfo3 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"hello\", \"world\")));\r\n    T brooklinMeterInfo4 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"world\", \"hello\")));\r\n    T brooklinMeterInfo5 = singleArgCtor.apply(\"meter1\");\r\n\r\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\r\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\r\n    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\r\n    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\r\n  }\r\n```\r\nwhich can then be used as:\r\n```java\r\n  @Test\r\n  public void testBrooklinMetricInfo() {\r\n    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\r\n    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\r\n    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\r\n    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\r\n  }\r\n```", "bodyText": "You can reduce the duplication between the identical tests in this file by using generics:\n  private static <T extends BrooklinMetricInfo> void testBrooklinMetricInfoHelper(\n      Function<String, T> singleArgCtor, BiFunction<String, Optional<List<String>>, T> twoArgCtor) {\n\n    T brooklinMeterInfo1 = singleArgCtor.apply (\"meter1\");\n    T brooklinMeterInfo2 = singleArgCtor.apply(\"meter2\");\n    T brooklinMeterInfo3 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"hello\", \"world\")));\n    T brooklinMeterInfo4 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"world\", \"hello\")));\n    T brooklinMeterInfo5 = singleArgCtor.apply(\"meter1\");\n\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n  }\nwhich can then be used as:\n  @Test\n  public void testBrooklinMetricInfo() {\n    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\n  }", "bodyHTML": "<p dir=\"auto\">You can reduce the duplication between the identical tests in this file by using generics:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  private static &lt;T extends BrooklinMetricInfo&gt; void testBrooklinMetricInfoHelper(\n      Function&lt;String, T&gt; singleArgCtor, BiFunction&lt;String, Optional&lt;List&lt;String&gt;&gt;, T&gt; twoArgCtor) {\n\n    T brooklinMeterInfo1 = singleArgCtor.apply (&quot;meter1&quot;);\n    T brooklinMeterInfo2 = singleArgCtor.apply(&quot;meter2&quot;);\n    T brooklinMeterInfo3 = twoArgCtor.apply(&quot;meter1&quot;, Optional.of(Arrays.asList(&quot;hello&quot;, &quot;world&quot;)));\n    T brooklinMeterInfo4 = twoArgCtor.apply(&quot;meter1&quot;, Optional.of(Arrays.asList(&quot;world&quot;, &quot;hello&quot;)));\n    T brooklinMeterInfo5 = singleArgCtor.apply(&quot;meter1&quot;);\n\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n  }\"><pre>  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span> extends <span class=\"pl-smi\">BrooklinMetricInfo</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">void</span> testBrooklinMetricInfoHelper(\n      <span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> singleArgCtor, <span class=\"pl-k\">BiFunction&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-k\">Optional&lt;<span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span>&gt;</span>, <span class=\"pl-smi\">T</span>&gt;</span> twoArgCtor) {\n\n    <span class=\"pl-smi\">T</span> brooklinMeterInfo1 <span class=\"pl-k\">=</span> singleArgCtor<span class=\"pl-k\">.</span>apply (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter1<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-smi\">T</span> brooklinMeterInfo2 <span class=\"pl-k\">=</span> singleArgCtor<span class=\"pl-k\">.</span>apply(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter2<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-smi\">T</span> brooklinMeterInfo3 <span class=\"pl-k\">=</span> twoArgCtor<span class=\"pl-k\">.</span>apply(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>)));\n    <span class=\"pl-smi\">T</span> brooklinMeterInfo4 <span class=\"pl-k\">=</span> twoArgCtor<span class=\"pl-k\">.</span>apply(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>)));\n    <span class=\"pl-smi\">T</span> brooklinMeterInfo5 <span class=\"pl-k\">=</span> singleArgCtor<span class=\"pl-k\">.</span>apply(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter1<span class=\"pl-pds\">\"</span></span>);\n\n    <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n    <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n    <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n    <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n  }</pre></div>\n<p dir=\"auto\">which can then be used as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void testBrooklinMetricInfo() {\n    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\n  }\"><pre>  <span class=\"pl-k\">@Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testBrooklinMetricInfo() {\n    testBrooklinMetricInfoHelper(<span class=\"pl-smi\">BrooklinMeterInfo</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>, BrooklinMeterInfo::new);\n    testBrooklinMetricInfoHelper(<span class=\"pl-smi\">BrooklinCounterInfo</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>, BrooklinCounterInfo::new);\n    testBrooklinMetricInfoHelper(<span class=\"pl-smi\">BrooklinGaugeInfo</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>, BrooklinGaugeInfo::new);\n    testBrooklinMetricInfoHelper(<span class=\"pl-smi\">BrooklinHistogramInfo</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>, BrooklinHistogramInfo::new);\n  }</pre></div>", "author": "ahmedahamid", "createdAt": "2020-04-14T03:23:11Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzU5Nw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843597", "body": "nit: new line before asserts", "bodyText": "nit: new line before asserts", "bodyHTML": "<p dir=\"auto\">nit: new line before asserts</p>", "author": "ahmedahamid", "createdAt": "2020-04-14T03:23:55Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinMeterInfo brooklinMeterInfo2 = new BrooklinMeterInfo(\"meter2\");\n+    BrooklinMeterInfo brooklinMeterInfo3 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinMeterInfo brooklinMeterInfo4 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinMeterInfo brooklinMeterInfo5 = new BrooklinMeterInfo(\"meter1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinCounterInfoMetricsComparison() {\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinCounterInfo brooklinCounterInfo2 = new BrooklinCounterInfo(\"counter2\");\n+    BrooklinCounterInfo brooklinCounterInfo3 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinCounterInfo brooklinCounterInfo4 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinCounterInfo brooklinCounterInfo5 = new BrooklinCounterInfo(\"counter1\");\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo2);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo3);\n+    Assert.assertEquals(brooklinCounterInfo3, brooklinCounterInfo4);\n+    Assert.assertEquals(brooklinCounterInfo1, brooklinCounterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinGaugeInfoComparison() {\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo2 = new BrooklinGaugeInfo(\"gauge2\");\n+    BrooklinGaugeInfo brooklinGaugeInfo3 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo4 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo5 = new BrooklinGaugeInfo(\"gauge1\");\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo2);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo3);\n+    Assert.assertEquals(brooklinGaugeInfo3, brooklinGaugeInfo4);\n+    Assert.assertEquals(brooklinGaugeInfo1, brooklinGaugeInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinHistogramInfoComparison() {\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo2 = new BrooklinHistogramInfo(\"histogram2\");\n+    BrooklinHistogramInfo brooklinHistogramInfo3 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo4 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo5 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo2);\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo3);\n+    Assert.assertEquals(brooklinHistogramInfo3, brooklinHistogramInfo4);\n+    Assert.assertEquals(brooklinHistogramInfo1, brooklinHistogramInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzY4Mw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843683", "body": "extraneous empty line", "bodyText": "extraneous empty line", "bodyHTML": "<p dir=\"auto\">extraneous empty line</p>", "author": "ahmedahamid", "createdAt": "2020-04-14T03:24:12Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinMeterInfo brooklinMeterInfo2 = new BrooklinMeterInfo(\"meter2\");\n+    BrooklinMeterInfo brooklinMeterInfo3 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinMeterInfo brooklinMeterInfo4 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinMeterInfo brooklinMeterInfo5 = new BrooklinMeterInfo(\"meter1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinCounterInfoMetricsComparison() {\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinCounterInfo brooklinCounterInfo2 = new BrooklinCounterInfo(\"counter2\");\n+    BrooklinCounterInfo brooklinCounterInfo3 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinCounterInfo brooklinCounterInfo4 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinCounterInfo brooklinCounterInfo5 = new BrooklinCounterInfo(\"counter1\");\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo2);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo3);\n+    Assert.assertEquals(brooklinCounterInfo3, brooklinCounterInfo4);\n+    Assert.assertEquals(brooklinCounterInfo1, brooklinCounterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinGaugeInfoComparison() {\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo2 = new BrooklinGaugeInfo(\"gauge2\");\n+    BrooklinGaugeInfo brooklinGaugeInfo3 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo4 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo5 = new BrooklinGaugeInfo(\"gauge1\");\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo2);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo3);\n+    Assert.assertEquals(brooklinGaugeInfo3, brooklinGaugeInfo4);\n+    Assert.assertEquals(brooklinGaugeInfo1, brooklinGaugeInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinHistogramInfoComparison() {\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo2 = new BrooklinHistogramInfo(\"histogram2\");\n+    BrooklinHistogramInfo brooklinHistogramInfo3 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo4 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo5 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo2);\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo3);\n+    Assert.assertEquals(brooklinHistogramInfo3, brooklinHistogramInfo4);\n+    Assert.assertEquals(brooklinHistogramInfo1, brooklinHistogramInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinGaugeInfo1);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinHistogramInfo1);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinGaugeInfo1);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinHistogramInfo1);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinHistogramInfo1);\n+  }\n+", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTkwMw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407845903", "body": "It would be great to assert for identical `hashCode()` values whenever we `assertEquals()`; this ensures we honor this part of the `hashCode()` contract:\r\n```\r\nIf two objects are equal according to the equals(Object) method, then calling \r\nthe hashCode method on each of the two objects must produce the same integer result.\r\n```", "bodyText": "It would be great to assert for identical hashCode() values whenever we assertEquals(); this ensures we honor this part of the hashCode() contract:\nIf two objects are equal according to the equals(Object) method, then calling \nthe hashCode method on each of the two objects must produce the same integer result.", "bodyHTML": "<p dir=\"auto\">It would be great to assert for identical <code>hashCode()</code> values whenever we <code>assertEquals()</code>; this ensures we honor this part of the <code>hashCode()</code> contract:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"If two objects are equal according to the equals(Object) method, then calling \nthe hashCode method on each of the two objects must produce the same integer result.\"><pre><code>If two objects are equal according to the equals(Object) method, then calling \nthe hashCode method on each of the two objects must produce the same integer result.\n</code></pre></div>", "author": "ahmedahamid", "createdAt": "2020-04-14T03:32:54Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {", "originalCommit": "c7b6ddbcdce06639642c51b200812a0e85fd30c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3NDg2NQ==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407874865", "bodyText": "Good catch. There was a bug in hash code. Adding this helped in fixing it.", "author": "vmaheshw", "createdAt": "2020-04-14T05:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTkwMw=="}], "type": "inlineReview"}, {"oid": "29d01500033a6597dc0e1ddc8ed114a203c20533", "url": "https://github.com/linkedin/brooklin/commit/29d01500033a6597dc0e1ddc8ed114a203c20533", "message": "Address review comments", "committedDate": "2020-04-14T05:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjExMw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407936113", "body": "nit: empty line before asserts", "bodyText": "nit: empty line before asserts", "bodyHTML": "<p dir=\"auto\">nit: empty line before asserts</p>", "author": "ahmedahamid", "createdAt": "2020-04-14T07:53:30Z", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestBrooklinMetricInfo.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link BrooklinMetricInfo}.\n+ */\n+@Test\n+public class TestBrooklinMetricInfo {\n+\n+  @Test\n+  public void testBrooklinMetricInfo() {\n+    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\n+  }\n+\n+  private static <T extends BrooklinMetricInfo> void testBrooklinMetricInfoHelper(\n+      Function<String, T> singleArgCtor, BiFunction<String, Optional<List<String>>, T> twoArgCtor) {\n+\n+    T brooklinMeterInfo1 = singleArgCtor.apply(\"meter1\");\n+    T brooklinMeterInfo2 = singleArgCtor.apply(\"meter2\");\n+    T brooklinMeterInfo3 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    T brooklinMeterInfo4 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    T brooklinMeterInfo5 = singleArgCtor.apply(\"meter1\");\n+\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo3.hashCode(), brooklinMeterInfo4.hashCode());\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+    Assert.assertEquals(brooklinMeterInfo1.hashCode(), brooklinMeterInfo5.hashCode());\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);", "originalCommit": "29d01500033a6597dc0e1ddc8ed114a203c20533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjQ4Mw==", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407936483", "body": "1. Both branches can be combined and simplified to:\r\n    ```java\r\n    Objects.hash(_nameOrRegex, attributes.map(HashSet::new).orElse(null));\r\n    ```\r\n2. Since this class is immutable, I suggest we precompute and cache the value this function returns in a private final field upon construction.", "bodyText": "Both branches can be combined and simplified to:\nObjects.hash(_nameOrRegex, attributes.map(HashSet::new).orElse(null));\n\nSince this class is immutable, I suggest we precompute and cache the value this function returns in a private final field upon construction.", "bodyHTML": "<ol dir=\"auto\">\n<li>Both branches can be combined and simplified to:\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Objects.hash(_nameOrRegex, attributes.map(HashSet::new).orElse(null));\"><pre><span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>hash(_nameOrRegex, attributes<span class=\"pl-k\">.</span>map(<span class=\"pl-smi\">HashSet</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>)<span class=\"pl-k\">.</span>orElse(<span class=\"pl-c1\">null</span>));</pre></div>\n</li>\n<li>Since this class is immutable, I suggest we precompute and cache the value this function returns in a private final field upon construction.</li>\n</ol>", "author": "ahmedahamid", "createdAt": "2020-04-14T07:54:05Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,34 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> a, Optional<List<String>> b) {\n+    if (!a.isPresent() || !b.isPresent()) {\n+      return a.isPresent() == b.isPresent();\n+    }\n+\n+    // Both are present\n+    return Objects.equals(new HashSet<>(a.get()), new HashSet<>(b.get()));\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    BrooklinMetricInfo that = (BrooklinMetricInfo) o;\n+    return _nameOrRegex.equals(that._nameOrRegex) && equalAttributes(_attributes, that._attributes);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    if (_attributes.isPresent()) {\n+      return Objects.hash(_nameOrRegex, new HashSet<>(_attributes.get()));\n+    } else {\n+      return Objects.hash(_nameOrRegex);\n+    }", "originalCommit": "29d01500033a6597dc0e1ddc8ed114a203c20533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8434243e8afdac98ccf1083496a83f1730fe9430", "url": "https://github.com/linkedin/brooklin/commit/8434243e8afdac98ccf1083496a83f1730fe9430", "message": "Address review comments", "committedDate": "2020-04-14T16:37:20Z", "type": "commit"}]}