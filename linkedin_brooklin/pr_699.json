{"pr_number": 699, "pr_title": "ZK Session Expiry management (phase 1): Mark the node as follower", "pr_author": "vmaheshw", "pr_createdAt": "2020-04-10T00:40:30Z", "pr_url": "https://github.com/linkedin/brooklin/pull/699", "timeline": [{"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "message": "Merge pull request #1 from linkedin/master\n\nPull latest", "committedDate": "2019-11-18T20:06:44Z", "type": "commit"}, {"oid": "699a6326b1c6cf4525a5f9c12f8b36eeb490da01", "url": "https://github.com/linkedin/brooklin/commit/699a6326b1c6cf4525a5f9c12f8b36eeb490da01", "message": "Merge branch 'master' of github.com:linkedin/brooklin into HEAD", "committedDate": "2020-04-06T22:34:40Z", "type": "commit"}, {"oid": "0ec357e954d1e0bb436583ebb9ef6efa66cacef7", "url": "https://github.com/linkedin/brooklin/commit/0ec357e954d1e0bb436583ebb9ef6efa66cacef7", "message": "Fix arithmetic exception in StickyPartitionAssignmentStrategy", "committedDate": "2020-04-06T23:59:55Z", "type": "commit"}, {"oid": "840fa183363a81a9b1b15c71228eb2ac3ece434f", "url": "https://github.com/linkedin/brooklin/commit/840fa183363a81a9b1b15c71228eb2ac3ece434f", "message": "Address Review Comments", "committedDate": "2020-04-08T20:40:37Z", "type": "commit"}, {"oid": "ae2f7e3360234322d16f8362c39212e0e74da3fd", "url": "https://github.com/linkedin/brooklin/commit/ae2f7e3360234322d16f8362c39212e0e74da3fd", "message": "ZK Session Expiry management (phase 1): Bring down the node", "committedDate": "2020-04-10T00:32:43Z", "type": "commit"}, {"oid": "55913ad68ec40a5f25aafd5508180042a9cba033", "url": "https://github.com/linkedin/brooklin/commit/55913ad68ec40a5f25aafd5508180042a9cba033", "message": "Revert \"Address Review Comments\"\n\nThis reverts commit 840fa183363a81a9b1b15c71228eb2ac3ece434f.", "committedDate": "2020-04-10T07:10:48Z", "type": "commit"}, {"oid": "7cba5bd0c0bb209b9192c976be3f90c50a3632f7", "url": "https://github.com/linkedin/brooklin/commit/7cba5bd0c0bb209b9192c976be3f90c50a3632f7", "message": "Revert \"Fix arithmetic exception in StickyPartitionAssignmentStrategy\"\n\nThis reverts commit 0ec357e954d1e0bb436583ebb9ef6efa66cacef7.", "committedDate": "2020-04-10T07:13:31Z", "type": "commit"}, {"oid": "34ad17da1851dc612824533af0b64cd8e1a20595", "url": "https://github.com/linkedin/brooklin/commit/34ad17da1851dc612824533af0b64cd8e1a20595", "message": "Few more fixes", "committedDate": "2020-04-23T07:24:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyMzU5NQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417423595", "body": "Do we need to add a new constructor? Can't we use the existing constructor and add the exitOnSessionExpiry field there, and have the tests set it to false?\r\n\r\nnit: If you do decide to keep this, you're missing an empty line between this constructor and the comments of the next one", "bodyText": "Do we need to add a new constructor? Can't we use the existing constructor and add the exitOnSessionExpiry field there, and have the tests set it to false?\nnit: If you do decide to keep this, you're missing an empty line between this constructor and the comments of the next one", "bodyHTML": "<p dir=\"auto\">Do we need to add a new constructor? Can't we use the existing constructor and add the exitOnSessionExpiry field there, and have the tests set it to false?</p>\n<p dir=\"auto\">nit: If you do decide to keep this, you're missing an empty line between this constructor and the comments of the next one</p>", "author": "somandal", "createdAt": "2020-04-29T15:52:00Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -148,18 +157,35 @@\n    * @param operationRetryTimeoutMs Timeout to use for retrying failed retriable operations. A value lesser than 0 is\n    *                         considered as retry forever until a connection has been reestablished.\n    * @param listener ZKAdapterListener implementation to receive callbacks based on various znode changes\n+   * @param exitOnSessionExpiry boolean to decide whether to exit on session expiry or not.\n    */\n   public ZkAdapter(String zkServers, String cluster, String defaultTransportProviderName, int sessionTimeoutMs,\n-      int connectionTimeoutMs, int operationRetryTimeoutMs, ZkAdapterListener listener) {\n+      int connectionTimeoutMs, int operationRetryTimeoutMs, ZkAdapterListener listener, boolean exitOnSessionExpiry) {\n     _zkServers = zkServers;\n     _cluster = cluster;\n     _sessionTimeoutMs = sessionTimeoutMs;\n     _connectionTimeoutMs = connectionTimeoutMs;\n     _operationRetryTimeoutMs = operationRetryTimeoutMs;\n     _listener = listener;\n+    _exitOnSessionExpiry = exitOnSessionExpiry;\n     _defaultTransportProviderName = defaultTransportProviderName;\n   }\n \n+  /**\n+   * Constructor\n+   * @param zkServers ZooKeeper server address to connect to\n+   * @param cluster Brooklin cluster this instance belongs to\n+   * @param defaultTransportProviderName Default transport provider to use for a newly created task\n+   * @param sessionTimeoutMs Session timeout to use for the connection with the ZooKeeper server\n+   * @param connectionTimeoutMs Connection timeout to use for the connection with the ZooKeeper server\n+   * @param listener ZKAdapterListener implementation to receive callbacks based on various znode changes\n+   * @param exitOnSessionExpiry boolean to decide whether to exit on session expiry or not.\n+   */\n+  public ZkAdapter(String zkServers, String cluster, String defaultTransportProviderName, int sessionTimeoutMs,\n+      int connectionTimeoutMs, ZkAdapterListener listener, boolean exitOnSessionExpiry) {\n+    this(zkServers, cluster, defaultTransportProviderName, sessionTimeoutMs, connectionTimeoutMs, -1,\n+        listener, exitOnSessionExpiry);\n+  }", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MjQwMQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419242401", "bodyText": "My intention is to not touch all the existing callers of current constructors. Instead add a new one and only modify one place. This will also makes the sequence of constructors cleaner.", "author": "vmaheshw", "createdAt": "2020-05-04T06:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyMzU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDUzOA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417424538", "body": "Not part of your changes as such, but I see this constructor used in a bunch of tests. Can you add the @VisibleForTesting annotation?", "bodyText": "Not part of your changes as such, but I see this constructor used in a bunch of tests. Can you add the @VisibleForTesting annotation?", "bodyHTML": "<p dir=\"auto\">Not part of your changes as such, but I see this constructor used in a bunch of tests. Can you add the <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/VisibleForTesting/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VisibleForTesting\">@VisibleForTesting</a> annotation?</p>", "author": "somandal", "createdAt": "2020-04-29T15:53:24Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -172,7 +198,7 @@ public ZkAdapter(String zkServers, String cluster, String defaultTransportProvid\n   public ZkAdapter(String zkServers, String cluster, String defaultTransportProviderName, int sessionTimeoutMs,", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417427667", "body": "Are we doing to remove this? Since this leads to a bunch of hosts looking like leaders due to metrics, it becomes extremely difficult to debug for people not familiar with these issues and the symptoms of this change. The last oncall who had to debug this kept thinking we have multiple leaders, when we actually don't.", "bodyText": "Are we doing to remove this? Since this leads to a bunch of hosts looking like leaders due to metrics, it becomes extremely difficult to debug for people not familiar with these issues and the symptoms of this change. The last oncall who had to debug this kept thinking we have multiple leaders, when we actually don't.", "bodyHTML": "<p dir=\"auto\">Are we doing to remove this? Since this leads to a bunch of hosts looking like leaders due to metrics, it becomes extremely difficult to debug for people not familiar with these issues and the symptoms of this change. The last oncall who had to debug this kept thinking we have multiple leaders, when we actually don't.</p>", "author": "somandal", "createdAt": "2020-04-29T15:57:38Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -222,14 +248,22 @@ ZkClient createZkClient() {\n     return new ZkClient(_zkServers, _sessionTimeoutMs, _connectionTimeoutMs, _operationRetryTimeoutMs);\n   }\n \n+  @VisibleForTesting\n+  ZkStateChangeListener getOrCreateStateChangeListener() {\n+    if (_stateChangeListener == null) {\n+      _stateChangeListener = new ZkStateChangeListener();\n+    }\n+    return _stateChangeListener;\n+  }\n+\n   /**\n    * Connect the adapter so that it can connect and bridge events between ZooKeeper changes and\n    * the actions that need to be taken with them, which are implemented in the Coordinator class\n    */\n   public void connect() {\n     disconnect(); // Guard against leaking an existing zookeeper session", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MzQ5OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419243498", "bodyText": "I will do it in next pass. Removing it will make the situation worse, if this PR has any bugs.", "author": "vmaheshw", "createdAt": "2020-05-04T07:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MTUwNA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457471504", "bodyText": "Removing it will make the situation worse, if this PR has any bugs.\n\nCould you please explain why? Your previous analysis shows that, in the case of session expiry, calling disconnect() here causes the subsequent createZkClient() to throw since the current thread's interrupted flag is set during disconnect().", "author": "ahmedahamid", "createdAt": "2020-07-20T15:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzOTMyOA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458239328", "bodyText": "If you call disconnect without connect, it can lead to leaderless scenario till we fix everything. previous analysis where we had zk sessions leak when disconnect was not called before connect.", "author": "vmaheshw", "createdAt": "2020-07-21T16:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwNzg1OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458507859", "bodyText": "Got it. How about resetting the current thread's interrupted flag after calling disconnect() so the subsequent createZkClient() can proceed?", "author": "ahmedahamid", "createdAt": "2020-07-22T03:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1ODU2Mw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458558563", "bodyText": "Adding this change as part of this PR can open another set of issues. The behavior will not change much after the current PR. I will consider this when we are ready to enable reconnect and sure that there are no other loose ends.", "author": "vmaheshw", "createdAt": "2020-07-22T06:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5NDQzOQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458594439", "bodyText": "OK. So, just to confirm my understanding, this PR is not meant to handle the following scenario:\n\nZK session expires. Our code observes a Disconnected state and schedules an onSessionExpired() call\nonSessionExpired() gets invoked after the timeout elapses and onBecomeFollower() is called\nZK client reestablishes connectivity and its connection state transitions to Expired\nZK client's fireAllEvents() is invoked, calls joinLeaderElection()\nThe leader election code fails to find the current instance name among the live instances, calls connect() which calls disconnect() followed by createZkClient() \u2014\u00a0an exception is thrown and the host gets in an undefined state.", "author": "ahmedahamid", "createdAt": "2020-07-22T07:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMzE0OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458903148", "bodyText": "The sequence of the scenario is right, but we have more clarity on point 5.\n\nLeader node will not run as leader node anymore (So, we will not see multiple leaders problem)\nWe will have metrics in next PR that we will use as alert to restart the node (which is not happening today)\nThe zookeeper states will be fine.\n\nNext step will be:\n\nAdd metrics and alert.\nTask cleanup support within fixed time.\nAdd support to handle low-level kafka.\nThen enable the reconnection.", "author": "vmaheshw", "createdAt": "2020-07-22T16:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMDY4Mw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458930683", "bodyText": "@vmaheshw Personally, it'll be much easier to review any changes related to ZK session expiry once I've seen your design and implementation plan. It can avoid unnecessary confusion like this. It'd be nice if you can prioritize working on that before sending out further PRs. It will also help with prioritizing the next steps.", "author": "somandal", "createdAt": "2020-07-22T16:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNzY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMjgxOQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417432819", "body": "nit: remove the extra line?", "bodyText": "nit: remove the extra line?", "bodyHTML": "<p dir=\"auto\">nit: remove the extra line?</p>", "author": "somandal", "createdAt": "2020-04-29T16:04:57Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "diffHunk": "@@ -90,4 +97,8 @@ public boolean getZkCleanUpOrphanConnectorTask() {\n     return _zkCleanUpOrphanConnectorTask;\n   }\n \n+  public boolean getExitOnZkSessionExpiry() {\n+    return _exitOnZkSessionExpiry;\n+  }\n+", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNzQ2MQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417437461", "body": "Not part of your change, but I don't really see this being used in tests. Can you remove the @VisibleForTesting annotation if it is indeed not used anywhere?", "bodyText": "Not part of your change, but I don't really see this being used in tests. Can you remove the @VisibleForTesting annotation if it is indeed not used anywhere?", "bodyHTML": "<p dir=\"auto\">Not part of your change, but I don't really see this being used in tests. Can you remove the <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/VisibleForTesting/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VisibleForTesting\">@VisibleForTesting</a> annotation if it is indeed not used anywhere?</p>", "author": "somandal", "createdAt": "2020-04-29T16:11:39Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -259,7 +258,8 @@ public Coordinator(CachedDatastreamReader datastreamCache, CoordinatorConfig con\n   @VisibleForTesting", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0NTY5NA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419245694", "bodyText": ":) Even I don't see this getting used using intellij. But I remember adding it. This is used in TestCoordinatorWithSpyZkAdapter in TestCoordinator.java. Probably some intellij bug.", "author": "vmaheshw", "createdAt": "2020-05-04T07:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNzQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjY1OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417452659", "body": "Add a comment explaining that the node at index 0 is the leader and doesn't need to listen on a previous node anymore.", "bodyText": "Add a comment explaining that the node at index 0 is the leader and doesn't need to listen on a previous node anymore.", "bodyHTML": "<p dir=\"auto\">Add a comment explaining that the node at index 0 is the leader and doesn't need to listen on a previous node anymore.</p>", "author": "somandal", "createdAt": "2020-04-29T16:34:33Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -334,6 +368,10 @@ private void joinLeaderElection() {\n \n     // if this instance is first in line to become leader. Check if it is already a leader.\n     if (index == 0) {\n+      if (_currentSubscription != null) {", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjkxNw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417452917", "body": "Set _currentSubscription to null after unsubscribing", "bodyText": "Set _currentSubscription to null after unsubscribing", "bodyHTML": "<p dir=\"auto\">Set _currentSubscription to null after unsubscribing</p>", "author": "somandal", "createdAt": "2020-04-29T16:34:57Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -334,6 +368,10 @@ private void joinLeaderElection() {\n \n     // if this instance is first in line to become leader. Check if it is already a leader.\n     if (index == 0) {\n+      if (_currentSubscription != null) {\n+        _zkclient.unsubscribeDataChanges(_currentSubscription, _leaderElectionListener);", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1OTE1Mw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417459153", "body": "I see you added an unsubscribeDataChanges() here. Should this be added for other listeners that subscribe to both child and data changes on close()?  e.g. ZkBackedDMSDatastreamList?", "bodyText": "I see you added an unsubscribeDataChanges() here. Should this be added for other listeners that subscribe to both child and data changes on close()?  e.g. ZkBackedDMSDatastreamList?", "bodyHTML": "<p dir=\"auto\">I see you added an unsubscribeDataChanges() here. Should this be added for other listeners that subscribe to both child and data changes on close()?  e.g. ZkBackedDMSDatastreamList?</p>", "author": "somandal", "createdAt": "2020-04-29T16:44:37Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1353,13 +1391,14 @@ public ZkBackedTaskListProvider(String cluster, String instanceName) {\n     /**\n      * Unsubscribe to all changes to the task assignment for this instance.\n      */\n-    public void close() {\n+    private void close() {\n       LOG.info(\"ZkBackedTaskListProvider::Unsubscribing to the changes under the path \" + _path);\n-      _zkclient.unsubscribeChildChanges(KeyBuilder.instanceAssignments(_cluster, _instanceName), this);\n+      _zkclient.unsubscribeChildChanges(_path, this);\n+      _zkclient.unsubscribeDataChanges(_path, this);", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjAzMA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417462030", "body": "is this necessary? we're calling exit() next anyways, and this just clears up some internal state.", "bodyText": "is this necessary? we're calling exit() next anyways, and this just clears up some internal state.", "bodyHTML": "<p dir=\"auto\">is this necessary? we're calling exit() next anyways, and this just clears up some internal state.</p>", "author": "somandal", "createdAt": "2020-04-29T16:49:00Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Mzk4MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419253980", "bodyText": "Yes, Exit will call the shutdown hook, which will call coordinator.stop(). This will be a safe practice.", "author": "vmaheshw", "createdAt": "2020-05-04T07:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjQyMQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417462421", "body": "Just for consistency, can you prepend the comment with \"ZkStateChangeListener::\"?", "bodyText": "Just for consistency, can you prepend the comment with \"ZkStateChangeListener::\"?", "bodyHTML": "<p dir=\"auto\">Just for consistency, can you prepend the comment with \"ZkStateChangeListener::\"?</p>", "author": "somandal", "createdAt": "2020-04-29T16:49:36Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MzM5NA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417463394", "body": "This comment feels a bit out of place without more explanation. In general there are a multitude of problems we deal with on session expiry. It may be a good idea to call them all out (or just the major classes of issues such as leader to follower transition, ephemeral nodes, tasks still running as if nothing happened, etc). Maybe above the class or above the function?  Since it explains the actions we take for both disconnect + expiry.", "bodyText": "This comment feels a bit out of place without more explanation. In general there are a multitude of problems we deal with on session expiry. It may be a good idea to call them all out (or just the major classes of issues such as leader to follower transition, ephemeral nodes, tasks still running as if nothing happened, etc). Maybe above the class or above the function?  Since it explains the actions we take for both disconnect + expiry.", "bodyHTML": "<p dir=\"auto\">This comment feels a bit out of place without more explanation. In general there are a multitude of problems we deal with on session expiry. It may be a good idea to call them all out (or just the major classes of issues such as leader to follower transition, ephemeral nodes, tasks still running as if nothing happened, etc). Maybe above the class or above the function?  Since it explains the actions we take for both disconnect + expiry.</p>", "author": "somandal", "createdAt": "2020-04-29T16:50:57Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1NjQ2Ng==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419256466", "bodyText": "I wanted to keep this generic. I have put the explanation in the exit call. I have cleaned this particular comment to be more specific to general zookeeper behavior.", "author": "vmaheshw", "createdAt": "2020-05-04T07:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MzM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDgxOA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417464818", "body": "nit: session established -> session has been established", "bodyText": "nit: session established -> session has been established", "bodyHTML": "<p dir=\"auto\">nit: session established -&gt; session has been established</p>", "author": "somandal", "createdAt": "2020-04-29T16:53:00Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener:: A new session established.\");", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTQ3NQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417465475", "body": "nit: can we rename this to scheduleExpiryTimerOnSessionDisconnected?", "bodyText": "nit: can we rename this to scheduleExpiryTimerOnSessionDisconnected?", "bodyHTML": "<p dir=\"auto\">nit: can we rename this to scheduleExpiryTimerOnSessionDisconnected?</p>", "author": "somandal", "createdAt": "2020-04-29T16:53:56Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener:: A new session established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener:: Failed to establish session.\", error);\n+      exitOnSessionExpiryOrEstablishmentError();\n+    }\n+  }\n+\n+  private void scheduleExpiryTimerAfterSessionTimeout() {", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Nzk2Mg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419257962", "bodyText": "I wanted to highlight that the timer is set of the value session timeout after which we will call the session expired routine.", "author": "vmaheshw", "createdAt": "2020-05-04T07:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2ODMxMQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417468311", "body": "lose the election? This sentence is a bit confusing, not sure what you mean here. Can you rephrase? ", "bodyText": "lose the election? This sentence is a bit confusing, not sure what you mean here. Can you rephrase?", "bodyHTML": "<p dir=\"auto\">lose the election? This sentence is a bit confusing, not sure what you mean here. Can you rephrase?</p>", "author": "somandal", "createdAt": "2020-04-29T16:58:01Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener:: A new session established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener:: Failed to establish session.\", error);\n+      exitOnSessionExpiryOrEstablishmentError();\n+    }\n+  }\n+\n+  private void scheduleExpiryTimerAfterSessionTimeout() {\n+    TimerTask timerTask = new TimerTask() {\n+      public void run() {\n+        exitOnSessionExpiryOrEstablishmentError();\n+      }\n+    };\n+    _timer.schedule(timerTask, _sessionTimeoutMs);\n+  }\n+\n+  // This is a temporary change to bring down the node on session expiry. We expect this to happen rarely.\n+  // We are working on the transition of leader to follower on session expiry. On session expiry,\n+  // the live instance (ephemeral nodes) gets deleted by the server and node automatically lose the election.", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MDU2Ng==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417470566", "body": "Again, a bit confusing here. Not sure we need to add details about nurse bringing the node back up.  Also, not sure you really need to discuss the knob (which I assume is the config?) here. \r\nnit: shutdownhook -> shutdown hook\r\n\r\nMaybe rephrase it to: Calling exit() will invoke the shutdown hook and bring down the system via a clean shutdown.\r\n\r\nIf you do want to mention the config, you can add a sentence: This behavior to bring down the system on session expiry is controlled via a config option.\r\n\r\nIf you do want to discuss the nurse job, you can add: A health monitoring service is expected to be in place to restart  the Brooklin service.", "bodyText": "Again, a bit confusing here. Not sure we need to add details about nurse bringing the node back up.  Also, not sure you really need to discuss the knob (which I assume is the config?) here.\nnit: shutdownhook -> shutdown hook\nMaybe rephrase it to: Calling exit() will invoke the shutdown hook and bring down the system via a clean shutdown.\nIf you do want to mention the config, you can add a sentence: This behavior to bring down the system on session expiry is controlled via a config option.\nIf you do want to discuss the nurse job, you can add: A health monitoring service is expected to be in place to restart  the Brooklin service.", "bodyHTML": "<p dir=\"auto\">Again, a bit confusing here. Not sure we need to add details about nurse bringing the node back up.  Also, not sure you really need to discuss the knob (which I assume is the config?) here.<br>\nnit: shutdownhook -&gt; shutdown hook</p>\n<p dir=\"auto\">Maybe rephrase it to: Calling exit() will invoke the shutdown hook and bring down the system via a clean shutdown.</p>\n<p dir=\"auto\">If you do want to mention the config, you can add a sentence: This behavior to bring down the system on session expiry is controlled via a config option.</p>\n<p dir=\"auto\">If you do want to discuss the nurse job, you can add: A health monitoring service is expected to be in place to restart  the Brooklin service.</p>", "author": "somandal", "createdAt": "2020-04-29T17:01:33Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener:: A new session established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener:: Failed to establish session.\", error);\n+      exitOnSessionExpiryOrEstablishmentError();\n+    }\n+  }\n+\n+  private void scheduleExpiryTimerAfterSessionTimeout() {\n+    TimerTask timerTask = new TimerTask() {\n+      public void run() {\n+        exitOnSessionExpiryOrEstablishmentError();\n+      }\n+    };\n+    _timer.schedule(timerTask, _sessionTimeoutMs);\n+  }\n+\n+  // This is a temporary change to bring down the node on session expiry. We expect this to happen rarely.\n+  // We are working on the transition of leader to follower on session expiry. On session expiry,\n+  // the live instance (ephemeral nodes) gets deleted by the server and node automatically lose the election.\n+  // By bringing down the node, the health monitoring services to restart the service is expected.\n+  // This exit call will invoke the shutdownhook and will bring down the system. This is currently\n+  // supported using a knob and adding shutdownhook will ensure the clean shutdown.", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MDA3MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458240070", "bodyText": "ignoring, since not doing this now.", "author": "vmaheshw", "createdAt": "2020-07-21T16:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTIzNQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417471235", "body": "nit: for consistency prepend the comment with \"ZkStateChangeListener::\"?", "bodyText": "nit: for consistency prepend the comment with \"ZkStateChangeListener::\"?", "bodyHTML": "<p dir=\"auto\">nit: for consistency prepend the comment with \"ZkStateChangeListener::\"?</p>", "author": "somandal", "createdAt": "2020-04-29T17:02:41Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1435,8 +1474,70 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener:: handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onBecomeFollower();\n+          exitOnSessionExpiryOrEstablishmentError();\n+          return;\n+        case Disconnected:\n+          // if the session has expired it means that all the registration's ephemeral nodes are gone.\n+          LOG.warn(\"Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener:: A new session established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener:: Failed to establish session.\", error);\n+      exitOnSessionExpiryOrEstablishmentError();\n+    }\n+  }\n+\n+  private void scheduleExpiryTimerAfterSessionTimeout() {\n+    TimerTask timerTask = new TimerTask() {\n+      public void run() {\n+        exitOnSessionExpiryOrEstablishmentError();\n+      }\n+    };\n+    _timer.schedule(timerTask, _sessionTimeoutMs);\n+  }\n+\n+  // This is a temporary change to bring down the node on session expiry. We expect this to happen rarely.\n+  // We are working on the transition of leader to follower on session expiry. On session expiry,\n+  // the live instance (ephemeral nodes) gets deleted by the server and node automatically lose the election.\n+  // By bringing down the node, the health monitoring services to restart the service is expected.\n+  // This exit call will invoke the shutdownhook and will bring down the system. This is currently\n+  // supported using a knob and adding shutdownhook will ensure the clean shutdown.\n+  private void exitOnSessionExpiryOrEstablishmentError() {\n+    if (_exitOnSessionExpiry) {\n+      LOG.warn(\"Calling Exit 1\");", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTgxNA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458399814", "bodyText": "not required now", "author": "vmaheshw", "createdAt": "2020-07-21T21:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3ODA3MQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417478071", "body": "It will be helpful to validate that exitOnSessionExpiryOrEstablishmentError() is indeed called on session expiry", "bodyText": "It will be helpful to validate that exitOnSessionExpiryOrEstablishmentError() is indeed called on session expiry", "bodyHTML": "<p dir=\"auto\">It will be helpful to validate that exitOnSessionExpiryOrEstablishmentError() is indeed called on session expiry</p>", "author": "somandal", "createdAt": "2020-04-29T17:13:34Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -715,9 +725,76 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = new ZkClientMockStateChangeListener();\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test\n+  public void testZookeeperSessionExpiry() throws InterruptedException {\n+    String testCluster = \"testDeleteTaskWithPrefix\";\n+    String connectorType = \"connectorType\";\n+    Duration timeout = Duration.ofMinutes(1);\n+\n+    ZkClientInterceptingAdapter adapter = createInterceptingZkAdapter(testCluster, 5000);\n+    adapter.connect();\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl();\n+    task.setId(\"3\");\n+    task.setConnectorType(connectorType);\n+    task.setZkAdapter(adapter);\n+\n+    List<DatastreamTask> tasks = new ArrayList<>();\n+    tasks.add(task);\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), tasks);\n+\n+    LOG.info(\"Acquire from instance1 should succeed\");\n+    Assert.assertTrue(expectException(() -> task.acquire(timeout), false));\n+\n+    simulateSessionExpiration(adapter);\n+\n+    Thread.sleep(5000);\n+    Assert.assertTrue(adapter.getZkStateChangeListener().sessionExpired);", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMDY1OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458400659", "bodyText": "Not required now.", "author": "vmaheshw", "createdAt": "2020-07-21T21:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3ODA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3OTA4OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r417479089", "body": "Is is possible to simulate the \"Disconnected\" state? If so, can we add a test for that, and validate that scheduleExpiryTimerAfterSessionTimeout() is indeed called too? Then validate two cases, a) Let it expire and validate that exitOnSessionExpiryOrEstablishmentError() is called, b) Don't let it expire, and validate that exitOnSessionExpiryOrEstablishmentError()  is not called.", "bodyText": "Is is possible to simulate the \"Disconnected\" state? If so, can we add a test for that, and validate that scheduleExpiryTimerAfterSessionTimeout() is indeed called too? Then validate two cases, a) Let it expire and validate that exitOnSessionExpiryOrEstablishmentError() is called, b) Don't let it expire, and validate that exitOnSessionExpiryOrEstablishmentError()  is not called.", "bodyHTML": "<p dir=\"auto\">Is is possible to simulate the \"Disconnected\" state? If so, can we add a test for that, and validate that scheduleExpiryTimerAfterSessionTimeout() is indeed called too? Then validate two cases, a) Let it expire and validate that exitOnSessionExpiryOrEstablishmentError() is called, b) Don't let it expire, and validate that exitOnSessionExpiryOrEstablishmentError()  is not called.</p>", "author": "somandal", "createdAt": "2020-04-29T17:15:08Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -715,9 +725,76 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = new ZkClientMockStateChangeListener();\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test", "originalCommit": "34ad17da1851dc612824533af0b64cd8e1a20595", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NTA5NQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r419265095", "bodyText": "No, I tried a lot and could not find a way. I couldn't find it in samza repo as well.", "author": "vmaheshw", "createdAt": "2020-05-04T07:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3OTA4OQ=="}], "type": "inlineReview"}, {"oid": "63b60c7f4f4e03efb7914066fa4918809692a4bd", "url": "https://github.com/linkedin/brooklin/commit/63b60c7f4f4e03efb7914066fa4918809692a4bd", "message": "Address review comments", "committedDate": "2020-05-04T08:05:17Z", "type": "commit"}, {"oid": "4b1673da7f51b26c8542fdcf81937b861532dcf7", "url": "https://github.com/linkedin/brooklin/commit/4b1673da7f51b26c8542fdcf81937b861532dcf7", "message": "Remove exit code path", "committedDate": "2020-07-13T23:38:22Z", "type": "commit"}, {"oid": "792fd213294d155645a0e623f604b74ade19654f", "url": "https://github.com/linkedin/brooklin/commit/792fd213294d155645a0e623f604b74ade19654f", "message": "Merge branch 'master' of github.com:linkedin/brooklin into zkCleanup1", "committedDate": "2020-07-13T23:43:48Z", "type": "commit"}, {"oid": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "url": "https://github.com/linkedin/brooklin/commit/018e58466611f51f145b03a4a3cdf78a9690b0f2", "message": "Code cleanup", "committedDate": "2020-07-14T00:04:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjc0OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457426749", "body": "`toString()` is redundant here and on line 1554", "bodyText": "toString() is redundant here and on line 1554", "bodyHTML": "<p dir=\"auto\"><code>toString()</code> is redundant here and on line 1554</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T14:16:40Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1531,61 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state.toString());", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMzY2OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457433668", "body": "1. can be marked `final`\r\n2. I think we should use `new Timer(true)` so the timer uses a daemon thread\r\n3. `_timer` feels like an implementation detail of `ZkStateChangeListener`. It may be nicer to move it over there instead.", "bodyText": "can be marked final\nI think we should use new Timer(true) so the timer uses a daemon thread\n_timer feels like an implementation detail of ZkStateChangeListener. It may be nicer to move it over there instead.", "bodyHTML": "<ol dir=\"auto\">\n<li>can be marked <code>final</code></li>\n<li>I think we should use <code>new Timer(true)</code> so the timer uses a daemon thread</li>\n<li><code>_timer</code> feels like an implementation detail of <code>ZkStateChangeListener</code>. It may be nicer to move it over there instead.</li>\n</ol>", "author": "ahmedahamid", "createdAt": "2020-07-20T14:24:06Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -137,6 +142,7 @@\n \n   // Cache all live DatastreamTasks per instance for assignment strategy\n   private Map<String, Set<DatastreamTask>> _liveTaskMap = new HashMap<>();\n+  private Timer _timer = new Timer();", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5NTg3Nw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457495877", "body": "Not your fault but it's a thought I'd like to share with you: we have quite a few `_zkclient` subscriptions (`subscribeChildChanges()`, `subscribeDataChanges()`, and this new `subscribeStateChanges()`) that are not undone on the old ZK client when we instantiate a new one. I understand that unsubscribing isn't strictly required if we always close the old `_zkclient` first. However, this assumes that all the relevant pieces of code don't have issues that could cause the old ZK client instance to invoke listeners after `_zkclient` is reinitialized.", "bodyText": "Not your fault but it's a thought I'd like to share with you: we have quite a few _zkclient subscriptions (subscribeChildChanges(), subscribeDataChanges(), and this new subscribeStateChanges()) that are not undone on the old ZK client when we instantiate a new one. I understand that unsubscribing isn't strictly required if we always close the old _zkclient first. However, this assumes that all the relevant pieces of code don't have issues that could cause the old ZK client instance to invoke listeners after _zkclient is reinitialized.", "bodyHTML": "<p dir=\"auto\">Not your fault but it's a thought I'd like to share with you: we have quite a few <code>_zkclient</code> subscriptions (<code>subscribeChildChanges()</code>, <code>subscribeDataChanges()</code>, and this new <code>subscribeStateChanges()</code>) that are not undone on the old ZK client when we instantiate a new one. I understand that unsubscribing isn't strictly required if we always close the old <code>_zkclient</code> first. However, this assumes that all the relevant pieces of code don't have issues that could cause the old ZK client instance to invoke listeners after <code>_zkclient</code> is reinitialized.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T15:30:00Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -222,14 +229,22 @@ ZkClient createZkClient() {\n     return new ZkClient(_zkServers, _sessionTimeoutMs, _connectionTimeoutMs, _operationRetryTimeoutMs);\n   }\n \n+  @VisibleForTesting\n+  ZkStateChangeListener getOrCreateStateChangeListener() {\n+    if (_stateChangeListener == null) {\n+      _stateChangeListener = new ZkStateChangeListener();\n+    }\n+    return _stateChangeListener;\n+  }\n+\n   /**\n    * Connect the adapter so that it can connect and bridge events between ZooKeeper changes and\n    * the actions that need to be taken with them, which are implemented in the Coordinator class\n    */\n   public void connect() {\n     disconnect(); // Guard against leaking an existing zookeeper session\n     _zkclient = createZkClient();\n-\n+    _zkclient.subscribeStateChanges(getOrCreateStateChangeListener());", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MDQ2OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458240468", "bodyText": "Tried to handle as many as I can.", "author": "vmaheshw", "createdAt": "2020-07-21T16:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5NTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMzcyMA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457523720", "body": "Not your fault. This comment pertains to the two `unsubscribeDataChanges()` calls made in this method (lines 354 and 372).\r\n\r\n- `_currentSubscription` is only ever set to `null` and `prevCandidate`\r\n- `prevCandidate` is chosen from `liveInstances`, a string list of the form `[\"0000000052\", \"0000000053\", .... ]`\r\n- When subscribing to data changes for `leaderElectionListener`, we use `KeyBuilder.liveInstance(_cluster, _currentSubscription)` as `path` (e.g. `clusterName/liveinstances/0000000052`)\r\n- When unsubscribing, we use `_currentSubscription` as `path` (e.g. `\"0000000052\"`)\r\n\r\nI think this means that un-subscriptions are broken.", "bodyText": "Not your fault. This comment pertains to the two unsubscribeDataChanges() calls made in this method (lines 354 and 372).\n\n_currentSubscription is only ever set to null and prevCandidate\nprevCandidate is chosen from liveInstances, a string list of the form [\"0000000052\", \"0000000053\", .... ]\nWhen subscribing to data changes for leaderElectionListener, we use KeyBuilder.liveInstance(_cluster, _currentSubscription) as path (e.g. clusterName/liveinstances/0000000052)\nWhen unsubscribing, we use _currentSubscription as path (e.g. \"0000000052\")\n\nI think this means that un-subscriptions are broken.", "bodyHTML": "<p dir=\"auto\">Not your fault. This comment pertains to the two <code>unsubscribeDataChanges()</code> calls made in this method (lines 354 and 372).</p>\n<ul dir=\"auto\">\n<li><code>_currentSubscription</code> is only ever set to <code>null</code> and <code>prevCandidate</code></li>\n<li><code>prevCandidate</code> is chosen from <code>liveInstances</code>, a string list of the form <code>[\"0000000052\", \"0000000053\", .... ]</code></li>\n<li>When subscribing to data changes for <code>leaderElectionListener</code>, we use <code>KeyBuilder.liveInstance(_cluster, _currentSubscription)</code> as <code>path</code> (e.g. <code>clusterName/liveinstances/0000000052</code>)</li>\n<li>When unsubscribing, we use <code>_currentSubscription</code> as <code>path</code> (e.g. <code>\"0000000052\"</code>)</li>\n</ul>\n<p dir=\"auto\">I think this means that un-subscriptions are broken.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T16:03:39Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -334,6 +349,12 @@ private void joinLeaderElection() {\n \n     // if this instance is first in line to become leader. Check if it is already a leader.\n     if (index == 0) {\n+      // The node at index 0 is a leader and does not have to listen on a previous node anymore.\n+      if (_currentSubscription != null) {\n+        _zkclient.unsubscribeDataChanges(_currentSubscription, _leaderElectionListener);", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MDcwMQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458240701", "bodyText": "Fixed.", "author": "vmaheshw", "createdAt": "2020-07-21T16:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMzcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDc1OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457534758", "body": "I like marking the class `private` but not the ctor or `close()`. I'd rather leave those two `public`. \r\n\r\nMy rationale is: marking them `private` has no practical effect on accessibility for the enclosing class; it can access everything. However, marking them `public` is documentation to the reader that these methods are the ones intended for use by the enclosing class, whereas the ones marked `private` are meant to be considered implementation details of the inner class.", "bodyText": "I like marking the class private but not the ctor or close(). I'd rather leave those two public.\nMy rationale is: marking them private has no practical effect on accessibility for the enclosing class; it can access everything. However, marking them public is documentation to the reader that these methods are the ones intended for use by the enclosing class, whereas the ones marked private are meant to be considered implementation details of the inner class.", "bodyHTML": "<p dir=\"auto\">I like marking the class <code>private</code> but not the ctor or <code>close()</code>. I'd rather leave those two <code>public</code>.</p>\n<p dir=\"auto\">My rationale is: marking them <code>private</code> has no practical effect on accessibility for the enclosing class; it can access everything. However, marking them <code>public</code> is documentation to the reader that these methods are the ones intended for use by the enclosing class, whereas the ones marked <code>private</code> are meant to be considered implementation details of the inner class.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T16:21:02Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1265,13 +1286,13 @@ public static String parseHostnameFromZkInstance(String instance) {\n    * Data provider class to provide an updated list of datastreams for the cluster by watching\n    * ZooKeeper znodes under <i>/{cluster}/dms/</i>.\n    */\n-  public class ZkBackedDMSDatastreamList implements IZkChildListener, IZkDataListener {\n+  private class ZkBackedDMSDatastreamList implements IZkChildListener, IZkDataListener {\n     private final String _path;\n \n     /**\n      * Sets up a watch on the {@code /{cluster}/dms} tree, so it can be notified of future changes.\n      */\n-    public ZkBackedDMSDatastreamList() {\n+    private ZkBackedDMSDatastreamList() {", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMTE5MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458421190", "bodyText": "Done", "author": "vmaheshw", "createdAt": "2020-07-21T22:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MTc3Mw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457571773", "body": "Same comment as the one on `ZkBackedDMSDatastreamList`'s ctor", "bodyText": "Same comment as the one on ZkBackedDMSDatastreamList's ctor", "bodyHTML": "<p dir=\"auto\">Same comment as the one on <code>ZkBackedDMSDatastreamList</code>'s ctor</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T17:23:15Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1371,12 +1393,12 @@ public void close() {\n       _zkclient.unsubscribeChildChanges(_path, this);\n     }\n \n-    public List<String> getLiveInstances() {\n+    private List<String> getLiveInstances() {", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMjk5OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458422999", "bodyText": "Done", "author": "vmaheshw", "createdAt": "2020-07-21T22:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MTc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3Mzk3MQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457573971", "body": "Not your fault but since you're touching this class: I think it would be better to reverse the order of these two lines to avoid race conditions since subscribing to child changes may cause the event handler to be fired, which also writes to `_liveInstances`.\r\n\r\n```java\r\n      _zkclient.subscribeChildChanges(_path, this);\r\n      _liveInstances = getLiveInstanceNames(_zkclient.getChildren(_path));\t\r\n```", "bodyText": "Not your fault but since you're touching this class: I think it would be better to reverse the order of these two lines to avoid race conditions since subscribing to child changes may cause the event handler to be fired, which also writes to _liveInstances.\n      _zkclient.subscribeChildChanges(_path, this);\n      _liveInstances = getLiveInstanceNames(_zkclient.getChildren(_path));", "bodyHTML": "<p dir=\"auto\">Not your fault but since you're touching this class: I think it would be better to reverse the order of these two lines to avoid race conditions since subscribing to child changes may cause the event handler to be fired, which also writes to <code>_liveInstances</code>.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"      _zkclient.subscribeChildChanges(_path, this);\n      _liveInstances = getLiveInstanceNames(_zkclient.getChildren(_path));\t\"><pre>      _zkclient<span class=\"pl-k\">.</span>subscribeChildChanges(_path, <span class=\"pl-c1\">this</span>);\n      _liveInstances <span class=\"pl-k\">=</span> getLiveInstanceNames(_zkclient<span class=\"pl-k\">.</span>getChildren(_path));\t</pre></div>", "author": "ahmedahamid", "createdAt": "2020-07-20T17:27:00Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1331,8 +1353,8 @@ public void handleDataDeleted(String dataPath) throws Exception {\n    * the new leader is responsible for cleaning up the instance node for the previous leader. This is\n    * done in the constructor ZkBackedLiveInstanceListProvider().\n    */\n-  public class ZkBackedLiveInstanceListProvider implements IZkChildListener {\n-    private List<String> _liveInstances = new ArrayList<>();\n+  private class ZkBackedLiveInstanceListProvider implements IZkChildListener {\n+    private List<String> _liveInstances;\n     private final String _path;", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMjg4MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458422880", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-21T22:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3Mzk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NzAyNg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457577026", "body": "Not your fault: can be marked `private final`", "bodyText": "Not your fault: can be marked private final", "bodyHTML": "<p dir=\"auto\">Not your fault: can be marked <code>private final</code></p>", "author": "ahmedahamid", "createdAt": "2020-07-20T17:32:18Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1453,15 +1476,15 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n \n   /**\n    * ZkTargetAssignmentProvider detect if there is a partition movement being intiated from restful endpoint\n    */\n-  public class ZkTargetAssignmentProvider implements IZkDataListener {\n+  private class ZkTargetAssignmentProvider implements IZkDataListener {\n     Set<String> _listenedConnectors = new HashSet<>();", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzMyNQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458423325", "bodyText": "Done", "author": "vmaheshw", "createdAt": "2020-07-21T22:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MTQ3Ng==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457581476", "body": "Do we need to instantiate a different one every time?", "bodyText": "Do we need to instantiate a different one every time?", "bodyHTML": "<p dir=\"auto\">Do we need to instantiate a different one every time?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T17:39:55Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1531,61 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onSessionExpired();\n+          return;\n+        case Disconnected:\n+          // Wait for session timeout after disconnect to consider that the session has expired.\n+          LOG.warn(\"ZkStateChangeListener::Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener::A new session has been established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener::Failed to establish session.\", error);\n+    }\n+  }\n+\n+  private void scheduleExpiryTimerAfterSessionTimeout() {\n+    TimerTask timerTask = new TimerTask() {\n+      public void run() {\n+        onSessionExpired();\n+      }\n+    };", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NTk4Nw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457585987", "body": "Once cancelled, `_timer` will no longer be usable; any subsequent calls to `schedule()` will throw.", "bodyText": "Once cancelled, _timer will no longer be usable; any subsequent calls to schedule() will throw.", "bodyHTML": "<p dir=\"auto\">Once cancelled, <code>_timer</code> will no longer be usable; any subsequent calls to <code>schedule()</code> will throw.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T17:47:46Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1531,61 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMTg2MQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458431861", "bodyText": "Thats a good catch. Fixed it.", "author": "vmaheshw", "createdAt": "2020-07-21T22:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NTIzMg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457595232", "body": "Does this mean `onSessionExpired()` will be called twice in case of session expiry, once when `Disconnected`'s timer elapses and another when `state` becomes `Expired`?", "bodyText": "Does this mean onSessionExpired() will be called twice in case of session expiry, once when Disconnected's timer elapses and another when state becomes Expired?", "bodyHTML": "<p dir=\"auto\">Does this mean <code>onSessionExpired()</code> will be called twice in case of session expiry, once when <code>Disconnected</code>'s timer elapses and another when <code>state</code> becomes <code>Expired</code>?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T18:03:51Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1531,61 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNzA5Mw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458427093", "bodyText": "We are cancelling the timer set during disconnect in expiry path.\nIf we get to know if session expiry from disconnect  + timer expiry before notification from state change: yes\nIf we get to know if session expiry from state change before disconnect + timer expiry: no\n. But to safe guard", "author": "vmaheshw", "createdAt": "2020-07-21T22:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NTIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457597638", "body": "Should we log the rest anyways so we get to see the different states and build some familiarity with the transitions in different scenarios?", "bodyText": "Should we log the rest anyways so we get to see the different states and build some familiarity with the transitions in different scenarios?", "bodyHTML": "<p dir=\"auto\">Should we log the rest anyways so we get to see the different states and build some familiarity with the transitions in different scenarios?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T18:08:14Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1531,61 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  @VisibleForTesting\n+  class ZkStateChangeListener implements IZkStateListener {\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state.toString());\n+      switch (state) {\n+        case Expired:\n+          _timer.cancel();\n+          onSessionExpired();\n+          return;\n+        case Disconnected:\n+          // Wait for session timeout after disconnect to consider that the session has expired.\n+          LOG.warn(\"ZkStateChangeListener::Got {} event. Scheduling a system stop.\", state.toString());\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          _timer.cancel();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMTc5NQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458431795", "bodyText": "The other states are logged by ClientCxn as well. It will be duplicate log.", "author": "vmaheshw", "createdAt": "2020-07-21T22:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MjAxNA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457642014", "body": "For consistency's sake, shouldn't we have `ZkStateChangeListener`'s ctor do `_zkclient.subscribeStateChanges(...)` instead? This is what all the current listeners do (e.g. `ZkLeaderElectionListener`, `ZkBackedTaskListProvider` ... etc).", "bodyText": "For consistency's sake, shouldn't we have ZkStateChangeListener's ctor do _zkclient.subscribeStateChanges(...) instead? This is what all the current listeners do (e.g. ZkLeaderElectionListener, ZkBackedTaskListProvider ... etc).", "bodyHTML": "<p dir=\"auto\">For consistency's sake, shouldn't we have <code>ZkStateChangeListener</code>'s ctor do <code>_zkclient.subscribeStateChanges(...)</code> instead? This is what all the current listeners do (e.g. <code>ZkLeaderElectionListener</code>, <code>ZkBackedTaskListProvider</code> ... etc).</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T19:29:40Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -222,14 +229,22 @@ ZkClient createZkClient() {\n     return new ZkClient(_zkServers, _sessionTimeoutMs, _connectionTimeoutMs, _operationRetryTimeoutMs);\n   }\n \n+  @VisibleForTesting\n+  ZkStateChangeListener getOrCreateStateChangeListener() {\n+    if (_stateChangeListener == null) {\n+      _stateChangeListener = new ZkStateChangeListener();\n+    }\n+    return _stateChangeListener;\n+  }\n+\n   /**\n    * Connect the adapter so that it can connect and bridge events between ZooKeeper changes and\n    * the actions that need to be taken with them, which are implemented in the Coordinator class\n    */\n   public void connect() {\n     disconnect(); // Guard against leaking an existing zookeeper session\n     _zkclient = createZkClient();\n-\n+    _zkclient.subscribeStateChanges(getOrCreateStateChangeListener());", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxOTc0MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458419740", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-21T22:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDY3OQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457644679", "body": "I feel a little concerned that this method gets-or-creates as opposed to create-only because it implies that extenders/overriders won't be able to set `_stateChangeListener`.", "bodyText": "I feel a little concerned that this method gets-or-creates as opposed to create-only because it implies that extenders/overriders won't be able to set _stateChangeListener.", "bodyHTML": "<p dir=\"auto\">I feel a little concerned that this method gets-or-creates as opposed to create-only because it implies that extenders/overriders won't be able to set <code>_stateChangeListener</code>.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T19:34:51Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -222,14 +229,22 @@ ZkClient createZkClient() {\n     return new ZkClient(_zkServers, _sessionTimeoutMs, _connectionTimeoutMs, _operationRetryTimeoutMs);\n   }\n \n+  @VisibleForTesting\n+  ZkStateChangeListener getOrCreateStateChangeListener() {\n+    if (_stateChangeListener == null) {\n+      _stateChangeListener = new ZkStateChangeListener();\n+    }\n+    return _stateChangeListener;\n+  }", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjUyNA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457646524", "body": "`private`?", "bodyText": "private?", "bodyHTML": "<p dir=\"auto\"><code>private</code>?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T19:38:25Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjYzMg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457646632", "body": "`private`", "bodyText": "private", "bodyHTML": "<p dir=\"auto\"><code>private</code></p>", "author": "ahmedahamid", "createdAt": "2020-07-20T19:38:37Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1NzU4NQ==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457657585", "body": "`_connection` is actually `protected`. I find it better to introduce a `package private` method on `com.linkedin.datastream.common.zk.ZkClient` to retrieve the session ID.", "bodyText": "_connection is actually protected. I find it better to introduce a package private method on com.linkedin.datastream.common.zk.ZkClient to retrieve the session ID.", "bodyHTML": "<p dir=\"auto\"><code>_connection</code> is actually <code>protected</code>. I find it better to introduce a <code>package private</code> method on <code>com.linkedin.datastream.common.zk.ZkClient</code> to retrieve the session ID.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T19:59:16Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = spy(new ZkClientMockStateChangeListener());\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test\n+  public void testZookeeperSessionExpiry() throws InterruptedException {\n+    String testCluster = \"testDeleteTaskWithPrefix\";\n+    String connectorType = \"connectorType\";\n+    Duration timeout = Duration.ofMinutes(1);\n+\n+    ZkClientInterceptingAdapter adapter = createInterceptingZkAdapter(testCluster, 5000);\n+    adapter.connect();\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl();\n+    task.setId(\"3\");\n+    task.setConnectorType(connectorType);\n+    task.setZkAdapter(adapter);\n+\n+    List<DatastreamTask> tasks = new ArrayList<>();\n+    tasks.add(task);\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), tasks);\n+\n+    LOG.info(\"Acquire from instance1 should succeed\");\n+    Assert.assertTrue(expectException(() -> task.acquire(timeout), false));\n+\n+    simulateSessionExpiration(adapter);\n+\n+    Thread.sleep(5000);\n+    Assert.assertTrue(adapter.getZkStateChangeListener().sessionExpired);\n+    Mockito.verify(adapter, Mockito.times(1)).onSessionExpired();\n+  }\n+\n+  private void simulateSessionExpiration(ZkClientInterceptingAdapter adapter) {\n+    ZkConnection zkConnection = null;\n+    try {\n+      Field privateField = ZkClient.class.getSuperclass().getDeclaredField(\"_connection\");\n+      privateField.setAccessible(true);\n+      zkConnection = (ZkConnection) privateField.get(adapter.getZkClient());\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      Assert.fail(e.toString());\n+    }\n+\n+    ZooKeeper zookeeper = zkConnection.getZookeeper();\n+    long sessionId = zookeeper.getSessionId();", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MDg0OA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458240848", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-21T16:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1NzU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MDI0Ng==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457660246", "body": "`Collections.singletonList()`?", "bodyText": "Collections.singletonList()?", "bodyHTML": "<p dir=\"auto\"><code>Collections.singletonList()</code>?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T20:04:28Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = spy(new ZkClientMockStateChangeListener());\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test\n+  public void testZookeeperSessionExpiry() throws InterruptedException {\n+    String testCluster = \"testDeleteTaskWithPrefix\";\n+    String connectorType = \"connectorType\";\n+    Duration timeout = Duration.ofMinutes(1);\n+\n+    ZkClientInterceptingAdapter adapter = createInterceptingZkAdapter(testCluster, 5000);\n+    adapter.connect();\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl();\n+    task.setId(\"3\");\n+    task.setConnectorType(connectorType);\n+    task.setZkAdapter(adapter);\n+\n+    List<DatastreamTask> tasks = new ArrayList<>();\n+    tasks.add(task);", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjY5Mg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457662692", "body": "Please excuse my ignorance: why do we have to sleep for that long? Is it because this is the value we specified for `sessionTimeoutMs`? If that's the reason, should we decrease that value?", "bodyText": "Please excuse my ignorance: why do we have to sleep for that long? Is it because this is the value we specified for sessionTimeoutMs? If that's the reason, should we decrease that value?", "bodyHTML": "<p dir=\"auto\">Please excuse my ignorance: why do we have to sleep for that long? Is it because this is the value we specified for <code>sessionTimeoutMs</code>? If that's the reason, should we decrease that value?</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T20:09:28Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = spy(new ZkClientMockStateChangeListener());\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test\n+  public void testZookeeperSessionExpiry() throws InterruptedException {\n+    String testCluster = \"testDeleteTaskWithPrefix\";\n+    String connectorType = \"connectorType\";\n+    Duration timeout = Duration.ofMinutes(1);\n+\n+    ZkClientInterceptingAdapter adapter = createInterceptingZkAdapter(testCluster, 5000);\n+    adapter.connect();\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl();\n+    task.setId(\"3\");\n+    task.setConnectorType(connectorType);\n+    task.setZkAdapter(adapter);\n+\n+    List<DatastreamTask> tasks = new ArrayList<>();\n+    tasks.add(task);\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), tasks);\n+\n+    LOG.info(\"Acquire from instance1 should succeed\");\n+    Assert.assertTrue(expectException(() -> task.acquire(timeout), false));\n+\n+    simulateSessionExpiration(adapter);\n+\n+    Thread.sleep(5000);", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3MjI5Ng==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457772296", "bodyText": "I gave a decent value so that it does not fail on pcl machines which are slower and then this test will become flaky.", "author": "vmaheshw", "createdAt": "2020-07-21T00:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MjE3NA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r457672174", "body": "Unless you foresee a good reason to keep it the way it is, I'd suggest introducing a `closeSession()` on `EmbeddedZookeeper` to limit the exposed internals.", "bodyText": "Unless you foresee a good reason to keep it the way it is, I'd suggest introducing a closeSession() on EmbeddedZookeeper to limit the exposed internals.", "bodyHTML": "<p dir=\"auto\">Unless you foresee a good reason to keep it the way it is, I'd suggest introducing a <code>closeSession()</code> on <code>EmbeddedZookeeper</code> to limit the exposed internals.</p>", "author": "ahmedahamid", "createdAt": "2020-07-20T20:27:51Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -716,9 +726,77 @@ ZkClient createZkClient() {\n       return _zkClient;\n     }\n \n+    public class ZkClientMockStateChangeListener extends ZkStateChangeListener {\n+      boolean sessionExpired = false;\n+      @Override\n+      public void handleStateChanged(Watcher.Event.KeeperState state) {\n+        super.handleStateChanged(state);\n+        if (state == Watcher.Event.KeeperState.Expired) {\n+          LOG.info(\"ZkStateChangeListener::Session expired.\");\n+          sessionExpired = true;\n+        }\n+      }\n+    }\n+\n+    @Override\n+    ZkStateChangeListener getOrCreateStateChangeListener() {\n+      _zkClientMockStateChangeListener = spy(new ZkClientMockStateChangeListener());\n+      return _zkClientMockStateChangeListener;\n+    }\n+\n     public ZkClient getZkClient() {\n       return _zkClient;\n     }\n+\n+    public ZkClientMockStateChangeListener getZkStateChangeListener() {\n+      return _zkClientMockStateChangeListener;\n+    }\n+  }\n+\n+  @Test\n+  public void testZookeeperSessionExpiry() throws InterruptedException {\n+    String testCluster = \"testDeleteTaskWithPrefix\";\n+    String connectorType = \"connectorType\";\n+    Duration timeout = Duration.ofMinutes(1);\n+\n+    ZkClientInterceptingAdapter adapter = createInterceptingZkAdapter(testCluster, 5000);\n+    adapter.connect();\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl();\n+    task.setId(\"3\");\n+    task.setConnectorType(connectorType);\n+    task.setZkAdapter(adapter);\n+\n+    List<DatastreamTask> tasks = new ArrayList<>();\n+    tasks.add(task);\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), tasks);\n+\n+    LOG.info(\"Acquire from instance1 should succeed\");\n+    Assert.assertTrue(expectException(() -> task.acquire(timeout), false));\n+\n+    simulateSessionExpiration(adapter);\n+\n+    Thread.sleep(5000);\n+    Assert.assertTrue(adapter.getZkStateChangeListener().sessionExpired);\n+    Mockito.verify(adapter, Mockito.times(1)).onSessionExpired();\n+  }\n+\n+  private void simulateSessionExpiration(ZkClientInterceptingAdapter adapter) {\n+    ZkConnection zkConnection = null;\n+    try {\n+      Field privateField = ZkClient.class.getSuperclass().getDeclaredField(\"_connection\");\n+      privateField.setAccessible(true);\n+      zkConnection = (ZkConnection) privateField.get(adapter.getZkClient());\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      Assert.fail(e.toString());\n+    }\n+\n+    ZooKeeper zookeeper = zkConnection.getZookeeper();\n+    long sessionId = zookeeper.getSessionId();\n+\n+    LOG.info(\"Closing/expiring session:\" + sessionId);\n+    ZooKeeperServer zkServer = _embeddedZookeeper.getZooKeeperServer();\n+    zkServer.closeSession(sessionId);", "originalCommit": "018e58466611f51f145b03a4a3cdf78a9690b0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eb3ac236a2f7b944b32f05301fe70f2bb831af22", "url": "https://github.com/linkedin/brooklin/commit/eb3ac236a2f7b944b32f05301fe70f2bb831af22", "message": "Address review comments", "committedDate": "2020-07-21T16:37:07Z", "type": "commit"}, {"oid": "6087d8b7ea3b918e5d70320a44ccdd6df7da07aa", "url": "https://github.com/linkedin/brooklin/commit/6087d8b7ea3b918e5d70320a44ccdd6df7da07aa", "message": "Address review comments", "committedDate": "2020-07-21T17:31:17Z", "type": "commit"}, {"oid": "2ed0181aa2f533369203610bb7b1fbd68699c531", "url": "https://github.com/linkedin/brooklin/commit/2ed0181aa2f533369203610bb7b1fbd68699c531", "message": "Address review comments", "committedDate": "2020-07-21T23:12:30Z", "type": "commit"}, {"oid": "b7fad426f932942ef6921d70ad6182df15eac3e1", "url": "https://github.com/linkedin/brooklin/commit/b7fad426f932942ef6921d70ad6182df15eac3e1", "message": "Address review comments", "committedDate": "2020-07-21T23:17:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg1NA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458509854", "body": "If you decide to keep `_timer`, we can stash this variable in a private field since we don't need to create a new one every time this method is called.", "bodyText": "If you decide to keep _timer, we can stash this variable in a private field since we don't need to create a new one every time this method is called.", "bodyHTML": "<p dir=\"auto\">If you decide to keep <code>_timer</code>, we can stash this variable in a private field since we don't need to create a new one every time this method is called.</p>", "author": "ahmedahamid", "createdAt": "2020-07-22T03:19:19Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1547,89 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  private class ZkStateChangeListener implements IZkStateListener {\n+    private Timer _timer;\n+\n+    public ZkStateChangeListener() {\n+      _zkclient.subscribeStateChanges(this);\n+    }\n+\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state);\n+      switch (state) {\n+        case Expired:\n+          cancelTimer();\n+          onSessionExpired();\n+          return;\n+        case Disconnected:\n+          // Wait for session timeout after disconnect to consider that the session has expired.\n+          LOG.warn(\"ZkStateChangeListener::Got {} event. Scheduling a system stop.\", state);\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          resetSession.set(true);\n+          return;\n+        case SyncConnected:\n+          LOG.info(\"ZkStateChangeListener::Connected. Canceling timer.\");\n+          cancelTimer();\n+          return;\n+        default:\n+          // Ignoring AuthFailed for now.\n+      }\n+    }\n+\n+    @Override\n+    public void handleNewSession() {\n+      LOG.info(\"ZkStateChangeListener::A new session has been established.\");\n+    }\n+\n+    @Override\n+    public void handleSessionEstablishmentError(final Throwable error) {\n+      LOG.error(\"ZkStateChangeListener::Failed to establish session.\", error);\n+    }\n+\n+    public void close() {\n+      _zkclient.unsubscribeStateChanges(this);\n+    }\n+\n+    private void scheduleExpiryTimerAfterSessionTimeout() {\n+      if (_timer == null) {\n+        _timer = new Timer(true);\n+      }\n+      TimerTask timerTask = new TimerTask() {\n+        public void run() {\n+          if (resetSession.get()) {\n+            onSessionExpired();\n+          }\n+        }\n+      };", "originalCommit": "b7fad426f932942ef6921d70ad6182df15eac3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NjQ4Mg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458966482", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-22T17:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjEwNg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458516106", "body": "Do we really need this variable (`resetSession`)?\r\n\r\nAs far as I can tell (and please correct me if I'm wrong) it's intended to protect against double invocations of `onSessionExpired()`. Would it be simpler to do that by checking `isLeader` at the beginning of `onBecomeFollower()` instead?\r\n\r\n```java\r\n  private void onBecomeFollower() {\r\n    if (!_isLeader) {\r\n        return;\r\n    }\r\n    ...\r\n  }\r\n```", "bodyText": "Do we really need this variable (resetSession)?\nAs far as I can tell (and please correct me if I'm wrong) it's intended to protect against double invocations of onSessionExpired(). Would it be simpler to do that by checking isLeader at the beginning of onBecomeFollower() instead?\n  private void onBecomeFollower() {\n    if (!_isLeader) {\n        return;\n    }\n    ...\n  }", "bodyHTML": "<p dir=\"auto\">Do we really need this variable (<code>resetSession</code>)?</p>\n<p dir=\"auto\">As far as I can tell (and please correct me if I'm wrong) it's intended to protect against double invocations of <code>onSessionExpired()</code>. Would it be simpler to do that by checking <code>isLeader</code> at the beginning of <code>onBecomeFollower()</code> instead?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  private void onBecomeFollower() {\n    if (!_isLeader) {\n        return;\n    }\n    ...\n  }\"><pre>  <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> onBecomeFollower() {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>_isLeader) {\n        <span class=\"pl-k\">return</span>;\n    }\n    <span class=\"pl-c1\">...</span>\n  }</pre></div>", "author": "ahmedahamid", "createdAt": "2020-07-22T03:44:19Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1547,89 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  private class ZkStateChangeListener implements IZkStateListener {\n+    private Timer _timer;\n+\n+    public ZkStateChangeListener() {\n+      _zkclient.subscribeStateChanges(this);\n+    }\n+\n+    @Override\n+    public void handleStateChanged(Watcher.Event.KeeperState state) {\n+      LOG.info(\"ZkStateChangeListener::handleStateChanged {}\", state);\n+      switch (state) {\n+        case Expired:\n+          cancelTimer();\n+          onSessionExpired();\n+          return;\n+        case Disconnected:\n+          // Wait for session timeout after disconnect to consider that the session has expired.\n+          LOG.warn(\"ZkStateChangeListener::Got {} event. Scheduling a system stop.\", state);\n+          scheduleExpiryTimerAfterSessionTimeout();\n+          resetSession.set(true);", "originalCommit": "b7fad426f932942ef6921d70ad6182df15eac3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMTk0MA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458931940", "bodyText": "+1 I had the same question when going through the code. I like Ahmed's suggestion here.", "author": "somandal", "createdAt": "2020-07-22T16:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NjQwNA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458966404", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-22T17:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MzgzMg==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458553832", "body": "I think the code would be a lot simpler if we used a `ScheduledExecutorService` instead of this `Timer`. \r\n\r\nHere's what I'm thinking:\r\n- We declare two fields:\r\n    ```java\r\n        private final ScheduledExecutorService _scheduledExecutorService;\r\n        private Future<?> _zkSessionExpiryFuture = CompletableFuture.completedFuture(null);\r\n    ```\r\n- We change `cancelTimer()` to do:\r\n   ```java\r\n   _zkSessionExpiryFuture.cancel(false);\r\n   ```\r\n- We change `scheduleExpiryTimerAfterSessionTimeout()` to do:\r\n    ```java\r\n     _zkSessionExpiryFuture =\r\n          _scheduledExecutorService.schedule(ZkAdapter.this::onSessionExpired, _sessionTimeoutMs,\r\n              TimeUnit.MILLISECONDS);\r\n    ```", "bodyText": "I think the code would be a lot simpler if we used a ScheduledExecutorService instead of this Timer.\nHere's what I'm thinking:\n\nWe declare two fields:\n    private final ScheduledExecutorService _scheduledExecutorService;\n    private Future<?> _zkSessionExpiryFuture = CompletableFuture.completedFuture(null);\n\nWe change cancelTimer() to do:\n_zkSessionExpiryFuture.cancel(false);\n\nWe change scheduleExpiryTimerAfterSessionTimeout() to do:\n _zkSessionExpiryFuture =\n      _scheduledExecutorService.schedule(ZkAdapter.this::onSessionExpired, _sessionTimeoutMs,\n          TimeUnit.MILLISECONDS);", "bodyHTML": "<p dir=\"auto\">I think the code would be a lot simpler if we used a <code>ScheduledExecutorService</code> instead of this <code>Timer</code>.</p>\n<p dir=\"auto\">Here's what I'm thinking:</p>\n<ul dir=\"auto\">\n<li>We declare two fields:\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    private final ScheduledExecutorService _scheduledExecutorService;\n    private Future&lt;?&gt; _zkSessionExpiryFuture = CompletableFuture.completedFuture(null);\"><pre>    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ScheduledExecutorService</span> _scheduledExecutorService;\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Future&lt;?&gt;</span> _zkSessionExpiryFuture <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>completedFuture(<span class=\"pl-c1\">null</span>);</pre></div>\n</li>\n<li>We change <code>cancelTimer()</code> to do:\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"_zkSessionExpiryFuture.cancel(false);\"><pre>_zkSessionExpiryFuture<span class=\"pl-k\">.</span>cancel(<span class=\"pl-c1\">false</span>);</pre></div>\n</li>\n<li>We change <code>scheduleExpiryTimerAfterSessionTimeout()</code> to do:\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" _zkSessionExpiryFuture =\n      _scheduledExecutorService.schedule(ZkAdapter.this::onSessionExpired, _sessionTimeoutMs,\n          TimeUnit.MILLISECONDS);\"><pre> _zkSessionExpiryFuture <span class=\"pl-k\">=</span>\n      _scheduledExecutorService<span class=\"pl-k\">.</span>schedule(<span class=\"pl-smi\">ZkAdapter</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>onSessionExpired, _sessionTimeoutMs,\n          <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MILLISECONDS</span>);</pre></div>\n</li>\n</ul>", "author": "ahmedahamid", "createdAt": "2020-07-22T06:02:51Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1508,8 +1547,89 @@ public void handleDataChange(String dataPath, Object data) throws Exception {\n     }\n \n     @Override\n-    public void handleDataDeleted(String dataPath) throws Exception {\n+    public void handleDataDeleted(String dataPath) {\n       // do nothing\n     }\n   }\n+\n+  /**\n+   * Listener for ZooKeeper state changes.\n+   */\n+  private class ZkStateChangeListener implements IZkStateListener {\n+    private Timer _timer;", "originalCommit": "b7fad426f932942ef6921d70ad6182df15eac3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMTY1NA==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458931654", "bodyText": "+1, I like this suggestion more than using the _timer", "author": "somandal", "createdAt": "2020-07-22T16:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MzgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NjM0Nw==", "url": "https://github.com/linkedin/brooklin/pull/699#discussion_r458966347", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-07-22T17:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MzgzMg=="}], "type": "inlineReview"}, {"oid": "fb24a91ed6a20b8f95ec16f7d95c7e31fc079207", "url": "https://github.com/linkedin/brooklin/commit/fb24a91ed6a20b8f95ec16f7d95c7e31fc079207", "message": "Address review comments", "committedDate": "2020-07-22T17:27:37Z", "type": "commit"}]}