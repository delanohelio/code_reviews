{"pr_number": 720, "pr_title": "Fix metric to track task lock acquire failures in partition-managed BMM", "pr_author": "somandal", "pr_createdAt": "2020-06-09T00:10:19Z", "pr_url": "https://github.com/linkedin/brooklin/pull/720", "timeline": [{"oid": "2b922c205b5faa8c02915cb61da8985cac814715", "url": "https://github.com/linkedin/brooklin/commit/2b922c205b5faa8c02915cb61da8985cac814715", "message": "Fix metric to track task lock acquire failures in partition-managed BMM", "committedDate": "2020-06-09T00:08:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxMjMzMw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437812333", "body": "Please feel free to ignore this comment.\r\n\r\nTo avoid repeating this code, you can introduce a new overload of \r\n```java\r\nstatic Thread runKafkaMirrorMakerConnectorTask(\r\n  KafkaMirrorMakerConnectorTask connectorTask, \r\n  Thread.UncaughtExceptionHandler exceptionHandler)\r\n```\r\none that accepts a boolean that indicates whether it should `awaitStart()` or not. Then you can move all the logic into that new method and have the existing one call it setting that boolean to `true`.", "bodyText": "Please feel free to ignore this comment.\nTo avoid repeating this code, you can introduce a new overload of\nstatic Thread runKafkaMirrorMakerConnectorTask(\n  KafkaMirrorMakerConnectorTask connectorTask, \n  Thread.UncaughtExceptionHandler exceptionHandler)\none that accepts a boolean that indicates whether it should awaitStart() or not. Then you can move all the logic into that new method and have the existing one call it setting that boolean to true.", "bodyHTML": "<p dir=\"auto\">Please feel free to ignore this comment.</p>\n<p dir=\"auto\">To avoid repeating this code, you can introduce a new overload of</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"static Thread runKafkaMirrorMakerConnectorTask(\n  KafkaMirrorMakerConnectorTask connectorTask, \n  Thread.UncaughtExceptionHandler exceptionHandler)\n\"><pre><span class=\"pl-k\">static</span> <span class=\"pl-smi\">Thread</span> runKafkaMirrorMakerConnectorTask(\n  <span class=\"pl-smi\">KafkaMirrorMakerConnectorTask</span> connectorTask, \n  <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">UncaughtExceptionHandler</span> exceptionHandler)</pre></div>\n<p dir=\"auto\">one that accepts a boolean that indicates whether it should <code>awaitStart()</code> or not. Then you can move all the logic into that new method and have the existing one call it setting that boolean to <code>true</code>.</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T01:39:28Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));\n+    t.start();", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Nzg2Ng==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857866", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-10T04:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxMjMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTAzNA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437815034", "body": "This comment doesn't pertain to this PR in particular.\r\n\r\nOne thing I noticed is that failing assertions in threads other than the main test thread have no effect. So, if you were to do:\r\n```java\r\nt.setUncaughtExceptionHandler((t1, e) -> Assert.assertTrue(false));\r\n```\r\nthe test would still pass.\r\n\r\nSo, don't count on that handler for assertions. You'd need to get a reference to the exception object and assert on it after the thread is joined instead.", "bodyText": "This comment doesn't pertain to this PR in particular.\nOne thing I noticed is that failing assertions in threads other than the main test thread have no effect. So, if you were to do:\nt.setUncaughtExceptionHandler((t1, e) -> Assert.assertTrue(false));\nthe test would still pass.\nSo, don't count on that handler for assertions. You'd need to get a reference to the exception object and assert on it after the thread is joined instead.", "bodyHTML": "<p dir=\"auto\">This comment doesn't pertain to this PR in particular.</p>\n<p dir=\"auto\">One thing I noticed is that failing assertions in threads other than the main test thread have no effect. So, if you were to do:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"t.setUncaughtExceptionHandler((t1, e) -&gt; Assert.assertTrue(false));\n\"><pre>t<span class=\"pl-k\">.</span>setUncaughtExceptionHandler((t1, e) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertTrue(<span class=\"pl-c1\">false</span>));</pre></div>\n<p dir=\"auto\">the test would still pass.</p>\n<p dir=\"auto\">So, don't count on that handler for assertions. You'd need to get a reference to the exception object and assert on it after the thread is joined instead.</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T01:50:16Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Nzg1MA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857850", "bodyText": "good point, changed this in another test too, where I was passing my own exception handler and asserting the exception type.", "author": "somandal", "createdAt": "2020-06-10T04:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTgzNw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437815837", "body": "Do you need to use `PollUtils` if you're doing `t.join()`? I think it's safe to assert without it since the metric is incremented synchronously in the run loop.", "bodyText": "Do you need to use PollUtils if you're doing t.join()? I think it's safe to assert without it since the metric is incremented synchronously in the run loop.", "bodyHTML": "<p dir=\"auto\">Do you need to use <code>PollUtils</code> if you're doing <code>t.join()</code>? I think it's safe to assert without it since the metric is incremented synchronously in the run loop.</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T01:53:31Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));\n+    t.start();\n+    t.join();\n+\n+    // verify that the metric to indicate task lock acquire errors is incremented\n+    Assert.assertTrue(PollUtils.poll(() -> {", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Nzk2MA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857960", "bodyText": "removed the PollUtils", "author": "somandal", "createdAt": "2020-06-10T04:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzg3NA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437817874", "body": "I believe this is your intent but I'm just confirming: the use of a `BrooklinMeterInfo` with a regex + `_dynamicMetricsManager.createOrUpdateMeter()` means you only want this metric to be created and emitted lazily, i.e. \r\n- No InGraph will appear for it until the first time it's emitted \r\n- Its InGraph won't show any data when it's not being emitted", "bodyText": "I believe this is your intent but I'm just confirming: the use of a BrooklinMeterInfo with a regex + _dynamicMetricsManager.createOrUpdateMeter() means you only want this metric to be created and emitted lazily, i.e.\n\nNo InGraph will appear for it until the first time it's emitted\nIts InGraph won't show any data when it's not being emitted", "bodyHTML": "<p dir=\"auto\">I believe this is your intent but I'm just confirming: the use of a <code>BrooklinMeterInfo</code> with a regex + <code>_dynamicMetricsManager.createOrUpdateMeter()</code> means you only want this metric to be created and emitted lazily, i.e.</p>\n<ul dir=\"auto\">\n<li>No InGraph will appear for it until the first time it's emitted</li>\n<li>Its InGraph won't show any data when it's not being emitted</li>\n</ul>", "author": "ahmedahamid", "createdAt": "2020-06-10T02:01:25Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -423,6 +428,8 @@ protected void postShutdownHook() {\n     List<BrooklinMetricInfo> metrics = new ArrayList<>();\n     metrics.addAll(AbstractKafkaBasedConnectorTask.getMetricInfos(\n         generateMetricsPrefix(connectorName, CLASS_NAME) + MetricsAware.KEY_REGEX));\n+    metrics.add(new BrooklinMeterInfo(generateMetricsPrefix(connectorName, CLASS_NAME) + MetricsAware.KEY_REGEX", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NzQ2NA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857464", "bodyText": "Yeah, this is indeed the intent. Thanks for checking.", "author": "somandal", "createdAt": "2020-06-10T04:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzg0OQ==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437823849", "body": "Please feel free to ignore this comment (and excuse its length).\r\n\r\nOne thing I personally found unnerving about adding/fixing metrics in the past is that one needs to make sure the metrics created/registered through `DynamicMetricsManager` match the `BrooklinMetricInfo` list returned by `getMetricInfos()`. \r\n\r\nFor instance:\r\n1. I had to make sure I returned the correct sub-type of `BrooklinMetricInfo` from `getMetricInfos()` (e.g. `BrooklinMeterInfo` for `Meter`s, `BrooklinCounterInfo` for `Counter`s ... etc). Otherwise, I'd be creating the wrong InGraph (or maybe it won't work at all, who knows)\r\n\r\n2. I had to make sure every metric I created through `DynamicMetricsManager` matched one \u2014 and only one \u2014 of the `BrooklinMetricInfo` objects returned by `getMetricInfos()` by name (or regex). If a metric were to match more than one `BrooklinMetricInfo`, multiple InGraphs would be created for it. If I were to get the regex wrong, no `BrooklinMetricInfo` would match my metric and no InGraph would be created for it.\r\n\r\nTo address these concerns, I wrote `MetricsTestUtils` which exposes the API below for asserting the above:\r\n```java\r\n  public static void verifyMetrics(MetricsAware metricsAware, DynamicMetricsManager metricsManager)\r\n```\r\nIf you're interested in using this utility, you can do so by adding the following snippet to your test:\r\n```java\r\n    MetricsTestUtils.verifyMetrics(new MetricsAware() {\r\n      @Override\r\n      public List<BrooklinMetricInfo> getMetricInfos() {\r\n        return KafkaMirrorMakerConnectorTaskTest.getMetricInfos(\"\");\r\n      }\r\n    }, DynamicMetricsManager.getInstance());\r\n```\r\nI tried it myself and the test is passing but I'm just sharing some past thoughts I had about testing metrics in general.", "bodyText": "Please feel free to ignore this comment (and excuse its length).\nOne thing I personally found unnerving about adding/fixing metrics in the past is that one needs to make sure the metrics created/registered through DynamicMetricsManager match the BrooklinMetricInfo list returned by getMetricInfos().\nFor instance:\n\n\nI had to make sure I returned the correct sub-type of BrooklinMetricInfo from getMetricInfos() (e.g. BrooklinMeterInfo for Meters, BrooklinCounterInfo for Counters ... etc). Otherwise, I'd be creating the wrong InGraph (or maybe it won't work at all, who knows)\n\n\nI had to make sure every metric I created through DynamicMetricsManager matched one \u2014 and only one \u2014 of the BrooklinMetricInfo objects returned by getMetricInfos() by name (or regex). If a metric were to match more than one BrooklinMetricInfo, multiple InGraphs would be created for it. If I were to get the regex wrong, no BrooklinMetricInfo would match my metric and no InGraph would be created for it.\n\n\nTo address these concerns, I wrote MetricsTestUtils which exposes the API below for asserting the above:\n  public static void verifyMetrics(MetricsAware metricsAware, DynamicMetricsManager metricsManager)\nIf you're interested in using this utility, you can do so by adding the following snippet to your test:\n    MetricsTestUtils.verifyMetrics(new MetricsAware() {\n      @Override\n      public List<BrooklinMetricInfo> getMetricInfos() {\n        return KafkaMirrorMakerConnectorTaskTest.getMetricInfos(\"\");\n      }\n    }, DynamicMetricsManager.getInstance());\nI tried it myself and the test is passing but I'm just sharing some past thoughts I had about testing metrics in general.", "bodyHTML": "<p dir=\"auto\">Please feel free to ignore this comment (and excuse its length).</p>\n<p dir=\"auto\">One thing I personally found unnerving about adding/fixing metrics in the past is that one needs to make sure the metrics created/registered through <code>DynamicMetricsManager</code> match the <code>BrooklinMetricInfo</code> list returned by <code>getMetricInfos()</code>.</p>\n<p dir=\"auto\">For instance:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">I had to make sure I returned the correct sub-type of <code>BrooklinMetricInfo</code> from <code>getMetricInfos()</code> (e.g. <code>BrooklinMeterInfo</code> for <code>Meter</code>s, <code>BrooklinCounterInfo</code> for <code>Counter</code>s ... etc). Otherwise, I'd be creating the wrong InGraph (or maybe it won't work at all, who knows)</p>\n</li>\n<li>\n<p dir=\"auto\">I had to make sure every metric I created through <code>DynamicMetricsManager</code> matched one \u2014 and only one \u2014 of the <code>BrooklinMetricInfo</code> objects returned by <code>getMetricInfos()</code> by name (or regex). If a metric were to match more than one <code>BrooklinMetricInfo</code>, multiple InGraphs would be created for it. If I were to get the regex wrong, no <code>BrooklinMetricInfo</code> would match my metric and no InGraph would be created for it.</p>\n</li>\n</ol>\n<p dir=\"auto\">To address these concerns, I wrote <code>MetricsTestUtils</code> which exposes the API below for asserting the above:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public static void verifyMetrics(MetricsAware metricsAware, DynamicMetricsManager metricsManager)\"><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> verifyMetrics(<span class=\"pl-smi\">MetricsAware</span> metricsAware, <span class=\"pl-smi\">DynamicMetricsManager</span> metricsManager)</pre></div>\n<p dir=\"auto\">If you're interested in using this utility, you can do so by adding the following snippet to your test:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    MetricsTestUtils.verifyMetrics(new MetricsAware() {\n      @Override\n      public List&lt;BrooklinMetricInfo&gt; getMetricInfos() {\n        return KafkaMirrorMakerConnectorTaskTest.getMetricInfos(&quot;&quot;);\n      }\n    }, DynamicMetricsManager.getInstance());\"><pre>    <span class=\"pl-smi\">MetricsTestUtils</span><span class=\"pl-k\">.</span>verifyMetrics(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">MetricsAware</span>() {\n      <span class=\"pl-k\">@Override</span>\n      <span class=\"pl-k\">public</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">BrooklinMetricInfo</span>&gt;</span> <span class=\"pl-en\">getMetricInfos</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">KafkaMirrorMakerConnectorTaskTest</span><span class=\"pl-k\">.</span>getMetricInfos(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);\n      }\n    }, <span class=\"pl-smi\">DynamicMetricsManager</span><span class=\"pl-k\">.</span>getInstance());</pre></div>\n<p dir=\"auto\">I tried it myself and the test is passing but I'm just sharing some past thoughts I had about testing metrics in general.</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T02:24:34Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NzY2NA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857664", "bodyText": "Thank you so much for this suggestion! Completely forgot about this utility. I've added it, and I think this should be advertised more. Might help us catch some of those mbean bugs where we create duplicate metrics.", "author": "somandal", "createdAt": "2020-06-10T04:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2MDE4MQ==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437860181", "bodyText": "My pleasure. I'm putting together a developer's guide for working with metrics. I'll make sure to mention this utility. Thank you.", "author": "ahmedahamid", "createdAt": "2020-06-10T04:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM5Mg==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437824392", "body": "nit: would it be better to supply a non-empty connector name as a closer representation of affairs in production?", "bodyText": "nit: would it be better to supply a non-empty connector name as a closer representation of affairs in production?", "bodyHTML": "<p dir=\"auto\">nit: would it be better to supply a non-empty connector name as a closer representation of affairs in production?</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T02:26:34Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NzY4Mw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437857683", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-10T04:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyODk4MQ==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437828981", "body": "Please, disregard my earlier comment about this field.", "bodyText": "Please, disregard my earlier comment about this field.", "bodyHTML": "<p dir=\"auto\">Please, disregard my earlier comment about this field.</p>", "author": "ahmedahamid", "createdAt": "2020-06-10T02:44:10Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -103,9 +104,11 @@\n   public static final String DOMAIN_TOPIC_MANAGER = \"topicManager\";\n   public static final String TOPIC_MANAGER_METRICS_PREFIX = \"TopicManager\";\n \n+  protected final DynamicMetricsManager _dynamicMetricsManager;", "originalCommit": "2b922c205b5faa8c02915cb61da8985cac814715", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "url": "https://github.com/linkedin/brooklin/commit/1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "message": "Address review comments", "committedDate": "2020-06-10T04:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTkxOQ==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438945919", "body": "Do you need the new variables to be protected? I dont see their usage outside this class.", "bodyText": "Do you need the new variables to be protected? I dont see their usage outside this class.", "bodyHTML": "<p dir=\"auto\">Do you need the new variables to be protected? I dont see their usage outside this class.</p>", "author": "vmaheshw", "createdAt": "2020-06-11T17:19:46Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -103,9 +104,11 @@\n   public static final String DOMAIN_TOPIC_MANAGER = \"topicManager\";\n   public static final String TOPIC_MANAGER_METRICS_PREFIX = \"TopicManager\";\n \n+  protected final DynamicMetricsManager _dynamicMetricsManager;", "originalCommit": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MDE3NA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438970174", "bodyText": "Yeah, I made these protected as we are extending these to add Audit V3 support.", "author": "somandal", "createdAt": "2020-06-11T17:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0ODYyMw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438948623", "body": "Do we really need this metrics under connector level?", "bodyText": "Do we really need this metrics under connector level?", "bodyHTML": "<p dir=\"auto\">Do we really need this metrics under connector level?</p>", "author": "vmaheshw", "createdAt": "2020-06-11T17:24:35Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -321,7 +325,8 @@ public void run() {\n         _datastreamTask.acquire(LOCK_ACQUIRE_TIMEOUT);\n       } catch (DatastreamRuntimeException ex) {\n         LOG.error(String.format(\"Failed to acquire lock for datastreamTask %s\", _datastreamTask), ex);\n-        _dynamicMetricsManager.createOrUpdateMeter(CLASS_NAME, NUM_LOCK_FAILS, 1);\n+        _dynamicMetricsManager.createOrUpdateMeter(generateMetricsPrefix(_connectorName, CLASS_NAME), _datastreamName,", "originalCommit": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTYxMw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438971613", "bodyText": "Well, it would be nice to find the metric using the same regex as we use for other connector metrics (e.g. errorRate, etc). And it's a lazy create metric, so it won't exist unless we actually see task lock acquire errors. Would it be okay to leave it under the connector level?", "author": "somandal", "createdAt": "2020-06-11T17:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0ODYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Mjg3MA==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438952870", "body": "nit: Feel free to ignore it. Can you please simplify this?", "bodyText": "nit: Feel free to ignore it. Can you please simplify this?", "bodyHTML": "<p dir=\"auto\">nit: Feel free to ignore it. Can you please simplify this?</p>", "author": "vmaheshw", "createdAt": "2020-06-11T17:32:06Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +371,55 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    String connectorName = \"KafkaMirrorMaker\";\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, connectorName,\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    Thread connectorThread =\n+        KafkaMirrorMakerConnectorTestUtils.runKafkaMirrorMakerConnectorTask(connectorTask, (t1, e) -> throwable.set(e),\n+            false);\n+    connectorThread.join();\n+\n+    Assert.assertEquals(DatastreamRuntimeException.class, throwable.get().getClass());\n+\n+    // verify that the metric to indicate task lock acquire errors is incremented\n+    Meter metric = DynamicMetricsManager.getInstance()\n+        .getMetric(connectorName + \".\" + KafkaMirrorMakerConnectorTask.class.getSimpleName() + \".\" + datastreamName\n+            + \".\" + \"taskLockAcquireErrorRate\");\n+    Assert.assertNotNull(metric);\n+    Assert.assertEquals(metric.getCount(), 1);\n+\n+    // Verify that metrics created through DynamicMetricsManager match those returned by getMetricInfos() given the", "originalCommit": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTg0Mw==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438971843", "bodyText": "Simplify the comment or code?", "author": "somandal", "createdAt": "2020-06-11T17:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Mjg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NTQ2Mg==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438975462", "bodyText": "just the comment.", "author": "vmaheshw", "createdAt": "2020-06-11T18:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Mjg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NjcxNg==", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438996716", "bodyText": "I'll skip this as I can't think of a way to simplify it.", "author": "somandal", "createdAt": "2020-06-11T18:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Mjg3MA=="}], "type": "inlineReview"}]}