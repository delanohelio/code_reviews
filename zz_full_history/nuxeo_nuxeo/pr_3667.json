{"pr_number": 3667, "pr_title": "Fix nxp 27877 allow directory init to just add missing entries", "pr_author": "ThierryCasanova", "pr_createdAt": "2020-01-14T16:25:45Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3667", "timeline": [{"oid": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "url": "https://github.com/nuxeo/nuxeo/commit/6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-15T14:58:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367600519", "body": "Why? That's not a cleanup from my point of view.\r\nNote, a real cleanup would be to replace the whole `if` block with\r\n\r\n    List<Reference> fieldRefs = references.computeIfAbsent(fieldName, k -> new ArrayList<>(1));\r\n\r\nThis code predates Java 8 so that's why we didn't write it that way at the time. Cleaning this up now with `computeIfAbsent` makes sense.\r\n", "bodyText": "Why? That's not a cleanup from my point of view.\nNote, a real cleanup would be to replace the whole if block with\nList<Reference> fieldRefs = references.computeIfAbsent(fieldName, k -> new ArrayList<>(1));\n\nThis code predates Java 8 so that's why we didn't write it that way at the time. Cleaning this up now with computeIfAbsent makes sense.", "bodyHTML": "<p dir=\"auto\">Why? That's not a cleanup from my point of view.<br>\nNote, a real cleanup would be to replace the whole <code>if</code> block with</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"List&lt;Reference&gt; fieldRefs = references.computeIfAbsent(fieldName, k -&gt; new ArrayList&lt;&gt;(1));\"><pre><code>List&lt;Reference&gt; fieldRefs = references.computeIfAbsent(fieldName, k -&gt; new ArrayList&lt;&gt;(1));\n</code></pre></div>\n<p dir=\"auto\">This code predates Java 8 so that's why we didn't write it that way at the time. Cleaning this up now with <code>computeIfAbsent</code> makes sense.</p>", "author": "efge", "createdAt": "2020-01-16T19:14:44Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -221,7 +221,8 @@ public void addReference(Reference reference) {\n         if (references.containsKey(fieldName)) {\n             fieldRefs = references.get(fieldName);\n         } else {\n-            references.put(fieldName, fieldRefs = new ArrayList<>(1));\n+            fieldRefs = new ArrayList<>(1);\n+            references.put(fieldName, fieldRefs);", "originalCommit": "e3f6d798375896338d7ddb92ed792d8db4e6aec6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDk4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367600986", "body": "Adding redundant parentheses is not a cleanup. Don't do this.", "bodyText": "Adding redundant parentheses is not a cleanup. Don't do this.", "bodyHTML": "<p dir=\"auto\">Adding redundant parentheses is not a cleanup. Don't do this.</p>", "author": "efge", "createdAt": "2020-01-16T19:15:44Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLDirectory.java", "diffHunk": "@@ -151,7 +151,7 @@ public void initialize() {\n         try (Connection sqlConnection = getConnection()) {\n             dialect = Dialect.createDialect(sqlConnection, null);\n             // setup table and fields maps\n-            String tableName = descriptor.tableName == null ? descriptor.name : descriptor.tableName;\n+            String tableName = (descriptor.tableName == null) ? descriptor.name : descriptor.tableName;", "originalCommit": "e3f6d798375896338d7ddb92ed792d8db4e6aec6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTIzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367601239", "body": "One `}` too many", "bodyText": "One } too many", "bodyHTML": "<p dir=\"auto\">One <code>}</code> too many</p>", "author": "efge", "createdAt": "2020-01-16T19:16:16Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java", "diffHunk": "@@ -71,9 +72,9 @@ public SQLHelper(Connection connection, Table table, String policy) {\n      * @return {@code true} if CSV data should be loaded\n      */\n     public boolean setupTable() {\n-        log.debug(String.format(\"setting up table '%s', policy='%s'\", tableName, policy));\n+        log.debug(\"setting up table {}, policy={}}\", tableName, policy);", "originalCommit": "e3f6d798375896338d7ddb92ed792d8db4e6aec6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8042f6205787d3680393ab31821bc82f89659c37", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\nindex 782f7ef3ac2..b4fd392e721 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n", "chunk": "@@ -72,9 +71,9 @@ public class SQLHelper {\n      * @return {@code true} if CSV data should be loaded\n      */\n     public boolean setupTable() {\n-        log.debug(\"setting up table {}, policy={}}\", tableName, policy);\n+        log.debug(String.format(\"setting up table '%s', policy='%s'\", tableName, policy));\n         if (policy.equals(CREATE_TABLE_POLICY_NEVER)) {\n-            log.debug(\"policy='{}', skipping setup\", CREATE_TABLE_POLICY_NEVER);\n+            log.debug(\"policy='\" + CREATE_TABLE_POLICY_NEVER + \"', skipping setup\");\n             return false;\n         }\n         synchronized (DIRECTORY_INIT_LOCK) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMjMyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367602321", "body": "This changes the semantics of the method so is not pure cleanup; but it shouldn't be a big risk. However if you do that you should remove the check `missingColumns == null` which is now useless in one of the caller.", "bodyText": "This changes the semantics of the method so is not pure cleanup; but it shouldn't be a big risk. However if you do that you should remove the check missingColumns == null which is now useless in one of the caller.", "bodyHTML": "<p dir=\"auto\">This changes the semantics of the method so is not pure cleanup; but it shouldn't be a big risk. However if you do that you should remove the check <code>missingColumns == null</code> which is now useless in one of the caller.</p>", "author": "efge", "createdAt": "2020-01-16T19:18:30Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java", "diffHunk": "@@ -172,19 +173,19 @@ public boolean hasMatchingColumns() {\n                 // TODO: check types as well\n                 String fieldName = column.getPhysicalName();\n                 if (!columnNames.contains(fieldName)) {\n-                    log.debug(String.format(\"required field: %s is missing\", fieldName));\n+                    log.debug(\"required field: {} is missing\", fieldName);\n                     missingColumns.add(column);\n \n                     if (breakAtFirstMissing) {\n-                        return null;\n+                        return Collections.emptySet();", "originalCommit": "e3f6d798375896338d7ddb92ed792d8db4e6aec6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8042f6205787d3680393ab31821bc82f89659c37", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\nindex 782f7ef3ac2..b4fd392e721 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n", "chunk": "@@ -173,11 +172,11 @@ public class SQLHelper {\n                 // TODO: check types as well\n                 String fieldName = column.getPhysicalName();\n                 if (!columnNames.contains(fieldName)) {\n-                    log.debug(\"required field: {} is missing\", fieldName);\n+                    log.debug(String.format(\"required field: %s is missing\", fieldName));\n                     missingColumns.add(column);\n \n                     if (breakAtFirstMissing) {\n-                        return Collections.emptySet();\n+                        return null;\n                     }\n                 }\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNDc1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367604752", "body": "Not sure why you do this, and in pure terms of performance it's an extra useless method call when we're not in debug mode. I wouldn't do this change.", "bodyText": "Not sure why you do this, and in pure terms of performance it's an extra useless method call when we're not in debug mode. I wouldn't do this change.", "bodyHTML": "<p dir=\"auto\">Not sure why you do this, and in pure terms of performance it's an extra useless method call when we're not in debug mode. I wouldn't do this change.</p>", "author": "efge", "createdAt": "2020-01-16T19:23:38Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java", "diffHunk": "@@ -138,7 +139,7 @@ private void createTable(boolean drop) {\n             }\n         } catch (SQLException e) {\n             if (table.getDialect().isConcurrentUpdateException(e)) {\n-                log.debug(e, e);\n+                log.debug(e.getMessage(), e);", "originalCommit": "e3f6d798375896338d7ddb92ed792d8db4e6aec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMzYzOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367833638", "bodyText": "log.debug(e,e) doesn't suit with log4j2 I propose to add a custom message like :  log.debug(\"createTable error \", e);", "author": "ThierryCasanova", "createdAt": "2020-01-17T09:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NzAxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367867018", "bodyText": "What do you mean by \"doesn't suit\"?", "author": "ataillefer", "createdAt": "2020-01-17T10:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8042f6205787d3680393ab31821bc82f89659c37", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\nindex 782f7ef3ac2..b4fd392e721 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n", "chunk": "@@ -139,7 +138,7 @@ public class SQLHelper {\n             }\n         } catch (SQLException e) {\n             if (table.getDialect().isConcurrentUpdateException(e)) {\n-                log.debug(e.getMessage(), e);\n+                log.debug(e, e);\n                 log.warn(e.toString());\n                 throw new ConcurrentUpdateException(e);\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTUyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367605529", "body": "Remove space before final `.`", "bodyText": "Remove space before final .", "bodyHTML": "<p dir=\"auto\">Remove space before final <code>.</code></p>", "author": "efge", "createdAt": "2020-01-16T19:25:23Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTc2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367605760", "body": "launch -> trigger\r\n(also in operation description)", "bodyText": "launch -> trigger\n(also in operation description)", "bodyHTML": "<p dir=\"auto\">launch -&gt; trigger<br>\n(also in operation description)</p>", "author": "efge", "createdAt": "2020-01-16T19:25:53Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .\n+ * <p>\n+ * Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTg3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367605878", "body": "Remove extra `<p>`", "bodyText": "Remove extra <p>", "bodyHTML": "<p dir=\"auto\">Remove extra <code>&lt;p&gt;</code></p>", "author": "efge", "createdAt": "2020-01-16T19:26:09Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .\n+ * <p>\n+ * Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\n+ * <p>", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjIyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367606227", "body": "We don't put `@author` tags in Javadoc anymore, as it's not useful to readers of the Javadoc. The contributor line in the toplevel copyright comment is enough.", "bodyText": "We don't put @author tags in Javadoc anymore, as it's not useful to readers of the Javadoc. The contributor line in the toplevel copyright comment is enough.", "bodyHTML": "<p dir=\"auto\">We don't put <code>@author</code> tags in Javadoc anymore, as it's not useful to readers of the Javadoc. The contributor line in the toplevel copyright comment is enough.</p>", "author": "efge", "createdAt": "2020-01-16T19:26:56Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .\n+ * <p>\n+ * Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\n+ * <p>\n+ *\n+ * @author Thierry Casanova", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjg0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367606844", "body": "`@since` is not useful in tests", "bodyText": "@since is not useful in tests", "bodyHTML": "<p dir=\"auto\"><code>@since</code> is not useful in tests</p>", "author": "efge", "createdAt": "2020-01-16T19:28:17Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java", "diffHunk": "@@ -432,4 +435,27 @@ protected void assertJSON(String expectedJSONFile, Blob actual) throws IOExcepti\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n+    /**\n+     * @since 11.1", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d9089813f3bb47b902faac386c539e11e586b2d", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\nindex 3008b0a9e24..05430c7b58a 100644\n--- a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n+++ b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n", "chunk": "@@ -435,27 +442,4 @@ public class DirectoryOperationsTest {\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n-    /**\n-     * @since 11.1\n-     */\n-    @Test\n-    public void shouldLoadCsvToDirectory() throws Exception {\n-        try (Session directorySession = directoryService.open(\"continent\")) {\n-            assertNull(directorySession.getEntry(\"atlantis\"));\n-\n-            Map<String, Object> params = new HashMap<>();\n-            params.put(\"directoryName\", \"continent\");\n-            params.put(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.UPDATE_DUPLICATE.toString());\n-            OperationParameters oparams = new OperationParameters(LoadDirectoryWithCSV.ID, params);\n-            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n-                    \"text/csv\", UTF_8.name(), (\"testdirectorydata/continent_local.csv\"));\n-            ctx.setInput(blob);\n-\n-            OperationChain chain = new OperationChain(\"fakeChain\");\n-            chain.add(oparams);\n-            service.run(ctx, chain);\n-\n-            assertNotNull(directorySession.getEntry(\"atlantis\"));\n-        }\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNzIzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367607233", "body": "`UTF_8.name()` -> `null`, it's the default.\r\nRemove redundant parentheses around filename.", "bodyText": "UTF_8.name() -> null, it's the default.\nRemove redundant parentheses around filename.", "bodyHTML": "<p dir=\"auto\"><code>UTF_8.name()</code> -&gt; <code>null</code>, it's the default.<br>\nRemove redundant parentheses around filename.</p>", "author": "efge", "createdAt": "2020-01-16T19:29:09Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java", "diffHunk": "@@ -432,4 +435,27 @@ protected void assertJSON(String expectedJSONFile, Blob actual) throws IOExcepti\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    @Test\n+    public void shouldLoadCsvToDirectory() throws Exception {\n+        try (Session directorySession = directoryService.open(\"continent\")) {\n+            assertNull(directorySession.getEntry(\"atlantis\"));\n+\n+            Map<String, Object> params = new HashMap<>();\n+            params.put(\"directoryName\", \"continent\");\n+            params.put(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.UPDATE_DUPLICATE.toString());\n+            OperationParameters oparams = new OperationParameters(LoadDirectoryWithCSV.ID, params);\n+            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n+                    \"text/csv\", UTF_8.name(), (\"testdirectorydata/continent_local.csv\"));", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d9089813f3bb47b902faac386c539e11e586b2d", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\nindex 3008b0a9e24..05430c7b58a 100644\n--- a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n+++ b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n", "chunk": "@@ -435,27 +442,4 @@ public class DirectoryOperationsTest {\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n-    /**\n-     * @since 11.1\n-     */\n-    @Test\n-    public void shouldLoadCsvToDirectory() throws Exception {\n-        try (Session directorySession = directoryService.open(\"continent\")) {\n-            assertNull(directorySession.getEntry(\"atlantis\"));\n-\n-            Map<String, Object> params = new HashMap<>();\n-            params.put(\"directoryName\", \"continent\");\n-            params.put(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.UPDATE_DUPLICATE.toString());\n-            OperationParameters oparams = new OperationParameters(LoadDirectoryWithCSV.ID, params);\n-            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n-                    \"text/csv\", UTF_8.name(), (\"testdirectorydata/continent_local.csv\"));\n-            ctx.setInput(blob);\n-\n-            OperationChain chain = new OperationChain(\"fakeChain\");\n-            chain.add(oparams);\n-            service.run(ctx, chain);\n-\n-            assertNotNull(directorySession.getEntry(\"atlantis\"));\n-        }\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNzg5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367607896", "body": "launch -> trigger\r\nBut it's not that useful to have such long error messages here, if the test fails then the line number will be enough to find out what's occurring.", "bodyText": "launch -> trigger\nBut it's not that useful to have such long error messages here, if the test fails then the line number will be enough to find out what's occurring.", "bodyHTML": "<p dir=\"auto\">launch -&gt; trigger<br>\nBut it's not that useful to have such long error messages here, if the test fails then the line number will be enough to find out what's occurring.</p>", "author": "efge", "createdAt": "2020-01-16T19:30:42Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java", "diffHunk": "@@ -435,4 +445,19 @@ private String getDirectoryEntryAsJson(String dirName, DocumentModel dirEntry) t\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n+    @Test\n+    public void testLoadDirectoryFromCsv() throws Exception {\n+        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n+        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadWithCSV\")\n+                .set(\"directoryName\", \"country\")\n+                .set(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.ERROR_ON_DUPLICATE.toString().toLowerCase())\n+                .setInput(blob);\n+        try {\n+            loadCsv.execute();\n+            fail(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\");", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d42cd5b5cbfe7e09d0d7c9e87afd72d0bb1c341", "changed_code": [{"header": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\nindex 1666dc8c917..323b48812e5 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n", "chunk": "@@ -445,19 +437,4 @@ public class DirectoryTest extends BaseTest {\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n-    @Test\n-    public void testLoadDirectoryFromCsv() throws Exception {\n-        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n-        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadWithCSV\")\n-                .set(\"directoryName\", \"country\")\n-                .set(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.ERROR_ON_DUPLICATE.toString().toLowerCase())\n-                .setInput(blob);\n-        try {\n-            loadCsv.execute();\n-            fail(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\");\n-        } catch (RemoteException e) {\n-            assertTrue(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\", e.getMessage().contains(\"already exists in directory\"));\n-        }\n-\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwODY0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367608640", "body": "Prefer\r\n\r\n    assertTrue(e.getMessage(), e.getMessage().contains(\"already exists in directory\"));\r\n\r\nas it gives the actual exception message occurring if the assertion fails.", "bodyText": "Prefer\nassertTrue(e.getMessage(), e.getMessage().contains(\"already exists in directory\"));\n\nas it gives the actual exception message occurring if the assertion fails.", "bodyHTML": "<p dir=\"auto\">Prefer</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertTrue(e.getMessage(), e.getMessage().contains(&quot;already exists in directory&quot;));\"><pre><code>assertTrue(e.getMessage(), e.getMessage().contains(\"already exists in directory\"));\n</code></pre></div>\n<p dir=\"auto\">as it gives the actual exception message occurring if the assertion fails.</p>", "author": "efge", "createdAt": "2020-01-16T19:32:19Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java", "diffHunk": "@@ -435,4 +445,19 @@ private String getDirectoryEntryAsJson(String dirName, DocumentModel dirEntry) t\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n+    @Test\n+    public void testLoadDirectoryFromCsv() throws Exception {\n+        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n+        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadWithCSV\")\n+                .set(\"directoryName\", \"country\")\n+                .set(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.ERROR_ON_DUPLICATE.toString().toLowerCase())\n+                .setInput(blob);\n+        try {\n+            loadCsv.execute();\n+            fail(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\");\n+        } catch (RemoteException e) {\n+            assertTrue(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\", e.getMessage().contains(\"already exists in directory\"));", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d42cd5b5cbfe7e09d0d7c9e87afd72d0bb1c341", "changed_code": [{"header": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\nindex 1666dc8c917..323b48812e5 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n", "chunk": "@@ -445,19 +437,4 @@ public class DirectoryTest extends BaseTest {\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n-    @Test\n-    public void testLoadDirectoryFromCsv() throws Exception {\n-        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n-        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadWithCSV\")\n-                .set(\"directoryName\", \"country\")\n-                .set(\"duplicateManagement\", BaseDirectoryDescriptor.DataLoadingPolicy.ERROR_ON_DUPLICATE.toString().toLowerCase())\n-                .setInput(blob);\n-        try {\n-            loadCsv.execute();\n-            fail(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\");\n-        } catch (RemoteException e) {\n-            assertTrue(\"testLoadDirectoryFromCsv with ERROR_ON_DUPLICATE should launch en exception\", e.getMessage().contains(\"already exists in directory\"));\n-        }\n-\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwOTUwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367609504", "body": "Use a better Javadoc, like:\r\n\r\n    Policy used to deal with duplicates when loading data to a directory.", "bodyText": "Use a better Javadoc, like:\nPolicy used to deal with duplicates when loading data to a directory.", "bodyHTML": "<p dir=\"auto\">Use a better Javadoc, like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Policy used to deal with duplicates when loading data to a directory.\"><pre><code>Policy used to deal with duplicates when loading data to a directory.\n</code></pre></div>", "author": "efge", "createdAt": "2020-01-16T19:34:11Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -90,6 +90,19 @@\n     public static final List<String> CREATE_TABLE_POLICIES = Arrays.asList(CREATE_TABLE_POLICY_NEVER,\n             CREATE_TABLE_POLICY_ALWAYS, CREATE_TABLE_POLICY_ON_MISSING_COLUMNS);\n \n+    /**\n+     * append CSV file policy.", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwOTY0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367609640", "body": "Add a Javadoc to each enum constant describing what it does.", "bodyText": "Add a Javadoc to each enum constant describing what it does.", "bodyHTML": "<p dir=\"auto\">Add a Javadoc to each enum constant describing what it does.</p>", "author": "efge", "createdAt": "2020-01-16T19:34:29Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -90,6 +90,19 @@\n     public static final List<String> CREATE_TABLE_POLICIES = Arrays.asList(CREATE_TABLE_POLICY_NEVER,\n             CREATE_TABLE_POLICY_ALWAYS, CREATE_TABLE_POLICY_ON_MISSING_COLUMNS);\n \n+    /**\n+     * append CSV file policy.\n+     * \n+     * @since 11.1\n+     */\n+    public enum DataLoadingPolicy {\n+        NEVER_LOAD, IGNORE_DUPLICATE, ERROR_ON_DUPLICATE, UPDATE_DUPLICATE;", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNDEzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368604131", "bodyText": "outdated", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwOTY0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwOTk0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367609940", "body": "`Load` -> `Loads`", "bodyText": "Load -> Loads", "bodyHTML": "<p dir=\"auto\"><code>Load</code> -&gt; <code>Loads</code></p>", "author": "efge", "createdAt": "2020-01-16T19:35:07Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/Directory.java", "diffHunk": "@@ -59,6 +59,18 @@\n      */\n     void initializeInverseReferences();\n \n+    /**\n+     * Load a CSV into a Directory.", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMDE1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367610156", "body": "`Load` -> `Loads`", "bodyText": "Load -> Loads", "bodyHTML": "<p dir=\"auto\"><code>Load</code> -&gt; <code>Loads</code></p>", "author": "efge", "createdAt": "2020-01-16T19:35:33Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/api/DirectoryService.java", "diffHunk": "@@ -142,4 +143,12 @@\n      */\n     void unregisterDirectoryDescriptor(BaseDirectoryDescriptor descriptor);\n \n+    /**\n+     * Load or update a Nuxeo directory from a CSV File.", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMTY3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367611672", "body": "All the `duplicateManagement` fields/parameters/variables should be called `dataLoadingPolicy` to be consistent everywhere.", "bodyText": "All the duplicateManagement fields/parameters/variables should be called dataLoadingPolicy to be consistent everywhere.", "bodyHTML": "<p dir=\"auto\">All the <code>duplicateManagement</code> fields/parameters/variables should be called <code>dataLoadingPolicy</code> to be consistent everywhere.</p>", "author": "efge", "createdAt": "2020-01-16T19:38:39Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .\n+ * <p>\n+ * Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\n+ * <p>\n+ *\n+ * @author Thierry Casanova\n+ * @since 11.1\n+ */\n+@Operation(id = LoadDirectoryWithCSV.ID, category = Constants.CAT_SERVICES, label = \"Load directory entries from CSV file\", description = \"Load directory entries from a CSV file. Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\")\n+public class LoadDirectoryWithCSV extends AbstractDirectoryOperation {\n+\n+    public static final String ID = \"Directory.LoadWithCSV\";\n+\n+    @Context\n+    protected OperationContext ctx;\n+\n+    @Context\n+    protected DirectoryService directoryService;\n+\n+    @Param(name = \"directoryName\")\n+    protected String directoryName;\n+\n+    @Param(name = \"duplicateManagement\")\n+    protected String duplicateManagement;", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNTkwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368605908", "bodyText": "Outdated", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMTY3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMjQ3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367612479", "body": "If we do only `toUpperCase` it means we don't have a canonical value in the XML, which is bad as a general principle. Also note that you should always use a `Locale` when doing `toUpperCase`/`toLowerCase` (see their Javadoc).\r\n\r\nIf we want the canonical values in XML to be in lowercase, I suggest:\r\n\r\n    if (!enumName.equals(enumName.toLowerCase(Locale.ENGLISH))) {\r\n        // our canonical external format is lowercase\r\n        throw new IllegalArgumentException(enumName);\r\n    }\r\n    return DataLoadingPolicy.valueOf(enumName.toUpperCase(Locale.ENGLISH));\r\n\r\nAnother option is to have lowercase enum values and just use standard `valueOf` but some people and tools like to have the convention that enums are always uppercase...\r\n\r\nAnd you should rename the `valueOfUpperCase` as the uppercase part is a detail. You can call it just `of`.\r\n", "bodyText": "If we do only toUpperCase it means we don't have a canonical value in the XML, which is bad as a general principle. Also note that you should always use a Locale when doing toUpperCase/toLowerCase (see their Javadoc).\nIf we want the canonical values in XML to be in lowercase, I suggest:\nif (!enumName.equals(enumName.toLowerCase(Locale.ENGLISH))) {\n    // our canonical external format is lowercase\n    throw new IllegalArgumentException(enumName);\n}\nreturn DataLoadingPolicy.valueOf(enumName.toUpperCase(Locale.ENGLISH));\n\nAnother option is to have lowercase enum values and just use standard valueOf but some people and tools like to have the convention that enums are always uppercase...\nAnd you should rename the valueOfUpperCase as the uppercase part is a detail. You can call it just of.", "bodyHTML": "<p dir=\"auto\">If we do only <code>toUpperCase</code> it means we don't have a canonical value in the XML, which is bad as a general principle. Also note that you should always use a <code>Locale</code> when doing <code>toUpperCase</code>/<code>toLowerCase</code> (see their Javadoc).</p>\n<p dir=\"auto\">If we want the canonical values in XML to be in lowercase, I suggest:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!enumName.equals(enumName.toLowerCase(Locale.ENGLISH))) {\n    // our canonical external format is lowercase\n    throw new IllegalArgumentException(enumName);\n}\nreturn DataLoadingPolicy.valueOf(enumName.toUpperCase(Locale.ENGLISH));\"><pre><code>if (!enumName.equals(enumName.toLowerCase(Locale.ENGLISH))) {\n    // our canonical external format is lowercase\n    throw new IllegalArgumentException(enumName);\n}\nreturn DataLoadingPolicy.valueOf(enumName.toUpperCase(Locale.ENGLISH));\n</code></pre></div>\n<p dir=\"auto\">Another option is to have lowercase enum values and just use standard <code>valueOf</code> but some people and tools like to have the convention that enums are always uppercase...</p>\n<p dir=\"auto\">And you should rename the <code>valueOfUpperCase</code> as the uppercase part is a detail. You can call it just <code>of</code>.</p>", "author": "efge", "createdAt": "2020-01-16T19:40:21Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -90,6 +90,19 @@\n     public static final List<String> CREATE_TABLE_POLICIES = Arrays.asList(CREATE_TABLE_POLICY_NEVER,\n             CREATE_TABLE_POLICY_ALWAYS, CREATE_TABLE_POLICY_ON_MISSING_COLUMNS);\n \n+    /**\n+     * append CSV file policy.\n+     * \n+     * @since 11.1\n+     */\n+    public enum DataLoadingPolicy {\n+        NEVER_LOAD, IGNORE_DUPLICATE, ERROR_ON_DUPLICATE, UPDATE_DUPLICATE;\n+\n+        public static DataLoadingPolicy valueOfUpperCase(String enumName) {\n+            return DataLoadingPolicy.valueOf(enumName.toUpperCase());", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MTgxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368591812", "bodyText": "After discussion with Thomas and Kevin, I finally replaced the enum by a list of Strings (more flexible to override contribution)", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMjQ3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzA3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367613071", "body": "You should use `==` instead of `equals` for enums.", "bodyText": "You should use == instead of equals for enums.", "bodyHTML": "<p dir=\"auto\">You should use <code>==</code> instead of <code>equals</code> for enums.</p>", "author": "efge", "createdAt": "2020-01-16T19:41:35Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,19 +119,98 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isEmptyDir <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadData(boolean isEmptyDir) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            DataLoadingPolicy dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+            if (descriptor.getCreateTablePolicy().equals(CREATE_TABLE_POLICY_NEVER)\n+                    && dataLoadingPolicy.equals(NEVER_LOAD)) {", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxODMzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368618334", "bodyText": "Outdated", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzA3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzY0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367613646", "body": "This should take a `DataLoadingPolicy` enum value instead of a `String`.", "bodyText": "This should take a DataLoadingPolicy enum value instead of a String.", "bodyHTML": "<p dir=\"auto\">This should take a <code>DataLoadingPolicy</code> enum value instead of a <code>String</code>.</p>", "author": "efge", "createdAt": "2020-01-16T19:42:49Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/Directory.java", "diffHunk": "@@ -59,6 +59,18 @@\n      */\n     void initializeInverseReferences();\n \n+    /**\n+     * Load a CSV into a Directory.\n+     *\n+     * @param csvDataFile the CSV Blob file to load (should be accessible in Resources\n+     * @param isEmptyDir <code>true</code> if the Directory (table or Collection) has been re-created (and is empty),\n+     *            <code>false</code> if the Directory contains already some data\n+     * @param duplicateManagement the duplicate management policy to load CSV data if Directory is already loaded; (Cf.\n+     *            {@link BaseDirectoryDescriptor.DataLoadingPolicy}\n+     * @since 11.1\n+     */\n+    void loadFromCsv(Blob csvDataFile, boolean isEmptyDir, String duplicateManagement);", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxODY3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368618675", "bodyText": "OUtdated (Use of String everywhere instead of enum)", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzY0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzg5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367613893", "body": "`! equals` -> `!=`, it's an enum value.", "bodyText": "! equals -> !=, it's an enum value.", "bodyHTML": "<p dir=\"auto\"><code>! equals</code> -&gt; <code>!=</code>, it's an enum value.</p>", "author": "efge", "createdAt": "2020-01-16T19:43:19Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,19 +119,98 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isEmptyDir <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadData(boolean isEmptyDir) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            DataLoadingPolicy dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+            if (descriptor.getCreateTablePolicy().equals(CREATE_TABLE_POLICY_NEVER)\n+                    && dataLoadingPolicy.equals(NEVER_LOAD)) {\n+                return;\n+            }\n+            Blob blob = DirectoryCSVLoader.callCreateBlob(dataFileName);\n+            if (isEmptyDir) { // Directory is empty on first creation or if dropped.\n+                loadFromCsv(blob, isEmptyDir, descriptor.getDataLoadingPolicy().toString());\n+            } else {\n+                // we reload the data depending on the dataLoadingPolicy\n+                if (!DataLoadingPolicy.NEVER_LOAD.equals(dataLoadingPolicy) && !descriptor.isAutoincrementIdField()) {", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDMxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368620317", "bodyText": "Outdated", "author": "ThierryCasanova", "createdAt": "2020-01-20T15:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzg5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNDY3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367614672", "body": "We call them directory entries, not records. `record` -> `entry`. `exist` -> `exists`", "bodyText": "We call them directory entries, not records. record -> entry. exist -> exists", "bodyHTML": "<p dir=\"auto\">We call them directory entries, not records. <code>record</code> -&gt; <code>entry</code>. <code>exist</code> -&gt; <code>exists</code></p>", "author": "efge", "createdAt": "2020-01-16T19:45:06Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,19 +119,98 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isEmptyDir <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadData(boolean isEmptyDir) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            DataLoadingPolicy dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+            if (descriptor.getCreateTablePolicy().equals(CREATE_TABLE_POLICY_NEVER)\n+                    && dataLoadingPolicy.equals(NEVER_LOAD)) {\n+                return;\n+            }\n+            Blob blob = DirectoryCSVLoader.callCreateBlob(dataFileName);\n+            if (isEmptyDir) { // Directory is empty on first creation or if dropped.\n+                loadFromCsv(blob, isEmptyDir, descriptor.getDataLoadingPolicy().toString());\n+            } else {\n+                // we reload the data depending on the dataLoadingPolicy\n+                if (!DataLoadingPolicy.NEVER_LOAD.equals(dataLoadingPolicy) && !descriptor.isAutoincrementIdField()) {\n+                    loadFromCsv(blob, isEmptyDir, dataLoadingPolicy.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCsv(Blob csvDataFile, boolean isEmptyDir, String duplicateManagement) {\n+        if (csvDataFile != null && !isReadOnly()) {\n+            DataLoadingPolicy dataLoadingPolicy = DataLoadingPolicy.valueOfUpperCase(\n+                    Objects.requireNonNull(duplicateManagement, \"param duplicateManagement must NOT be null\"));\n             try (Session session = getSession()) {\n                 TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n                     Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n+                    if (isEmptyDir) {\n+                        DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema,\n+                                ((BaseSession) session)::createEntryWithoutReferences);\n+                    } else {\n+                        Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session);\n+                        DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema,\n+                                loader);\n+                        invalidateCaches();\n+                    }\n                 }));\n             }\n         }\n     }\n \n+    protected class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        private final DataLoadingPolicy dataLoadingPolicy;\n+\n+        private final Session session;\n+\n+        public CSVLoaderConsumer(DataLoadingPolicy dataLoadingPolicy, Session session) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"duplicatePolicy is null\");\n+            this.session = Objects.requireNonNull(session, \"session is null\");\n+        }\n+\n+        @Override\n+        public void accept(Map<String, Object> fieldMap) {\n+            // check if record already exist", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNDc0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367614742", "body": "`alreadyExist` -> `alreadyExists`", "bodyText": "alreadyExist -> alreadyExists", "bodyHTML": "<p dir=\"auto\"><code>alreadyExist</code> -&gt; <code>alreadyExists</code></p>", "author": "efge", "createdAt": "2020-01-16T19:45:16Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,19 +119,98 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isEmptyDir <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadData(boolean isEmptyDir) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            DataLoadingPolicy dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+            if (descriptor.getCreateTablePolicy().equals(CREATE_TABLE_POLICY_NEVER)\n+                    && dataLoadingPolicy.equals(NEVER_LOAD)) {\n+                return;\n+            }\n+            Blob blob = DirectoryCSVLoader.callCreateBlob(dataFileName);\n+            if (isEmptyDir) { // Directory is empty on first creation or if dropped.\n+                loadFromCsv(blob, isEmptyDir, descriptor.getDataLoadingPolicy().toString());\n+            } else {\n+                // we reload the data depending on the dataLoadingPolicy\n+                if (!DataLoadingPolicy.NEVER_LOAD.equals(dataLoadingPolicy) && !descriptor.isAutoincrementIdField()) {\n+                    loadFromCsv(blob, isEmptyDir, dataLoadingPolicy.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCsv(Blob csvDataFile, boolean isEmptyDir, String duplicateManagement) {\n+        if (csvDataFile != null && !isReadOnly()) {\n+            DataLoadingPolicy dataLoadingPolicy = DataLoadingPolicy.valueOfUpperCase(\n+                    Objects.requireNonNull(duplicateManagement, \"param duplicateManagement must NOT be null\"));\n             try (Session session = getSession()) {\n                 TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n                     Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n+                    if (isEmptyDir) {\n+                        DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema,\n+                                ((BaseSession) session)::createEntryWithoutReferences);\n+                    } else {\n+                        Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session);\n+                        DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema,\n+                                loader);\n+                        invalidateCaches();\n+                    }\n                 }));\n             }\n         }\n     }\n \n+    protected class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        private final DataLoadingPolicy dataLoadingPolicy;\n+\n+        private final Session session;\n+\n+        public CSVLoaderConsumer(DataLoadingPolicy dataLoadingPolicy, Session session) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"duplicatePolicy is null\");\n+            this.session = Objects.requireNonNull(session, \"session is null\");\n+        }\n+\n+        @Override\n+        public void accept(Map<String, Object> fieldMap) {\n+            // check if record already exist\n+            boolean alreadyExist = false;", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNjY3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367616675", "body": "Just call it `createBlob`", "bodyText": "Just call it createBlob", "bodyHTML": "<p dir=\"auto\">Just call it <code>createBlob</code></p>", "author": "efge", "createdAt": "2020-01-16T19:49:29Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java", "diffHunk": "@@ -75,9 +78,34 @@ private DirectoryCSVLoader() {\n      */\n     public static void loadData(String dataFileName, char delimiter, Schema schema,\n             Consumer<Map<String, Object>> loader) {\n-        try (InputStream in = getResource(dataFileName); //\n+        Blob blob = callCreateBlob(dataFileName);\n+        loadData(blob, delimiter, schema, loader);\n+    }\n+\n+    protected static Blob callCreateBlob(String dataFileName) {", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7168c4e603b83e95e36ceed35fa752d6a79218f", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\nindex 349dd353980..793e94caeb6 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n", "chunk": "@@ -78,34 +75,9 @@ public class DirectoryCSVLoader {\n      */\n     public static void loadData(String dataFileName, char delimiter, Schema schema,\n             Consumer<Map<String, Object>> loader) {\n-        Blob blob = callCreateBlob(dataFileName);\n-        loadData(blob, delimiter, schema, loader);\n-    }\n-\n-    protected static Blob callCreateBlob(String dataFileName) {\n-        try (InputStream in = getResource(dataFileName)) {\n-            return Blobs.createBlob(in, \"text/csv\", UTF_8.name());\n-        } catch (IOException e) {\n-            throw new DirectoryException(\"Read error while creating blob from data file: \" + dataFileName, e);\n-        }\n-    }\n-\n-    /**\n-     * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n-     * loader.\n-     *\n-     * @param csvDataFile the Blob file containing CSV data\n-     * @param delimiter the CSV column separator\n-     * @param schema the data schema\n-     * @param loader the actual consumer of loaded rows\n-     * @since 11.1\n-     */\n-    public static void loadData(Blob csvDataFile, char delimiter, Schema schema, Consumer<Map<String, Object>> loader) {\n-        String dataFileName = csvDataFile.getFilename();\n-        try (InputStream in = csvDataFile.getStream();\n-                CSVParser csvParser = new CSVParser(new InputStreamReader(in, UTF_8),\n+        try (InputStream in = getResource(dataFileName); //\n+                CSVParser csvParser = new CSVParser(new InputStreamReader(in, \"UTF-8\"),\n                         CSVFormat.DEFAULT.withDelimiter(delimiter).withHeader())) {\n-\n             Map<String, Integer> header = csvParser.getHeaderMap();\n \n             List<Field> fields = new ArrayList<>();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzAwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367617000", "body": "Remove the third argument, UTF-8 is the default.", "bodyText": "Remove the third argument, UTF-8 is the default.", "bodyHTML": "<p dir=\"auto\">Remove the third argument, UTF-8 is the default.</p>", "author": "efge", "createdAt": "2020-01-16T19:50:18Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java", "diffHunk": "@@ -75,9 +78,34 @@ private DirectoryCSVLoader() {\n      */\n     public static void loadData(String dataFileName, char delimiter, Schema schema,\n             Consumer<Map<String, Object>> loader) {\n-        try (InputStream in = getResource(dataFileName); //\n+        Blob blob = callCreateBlob(dataFileName);\n+        loadData(blob, delimiter, schema, loader);\n+    }\n+\n+    protected static Blob callCreateBlob(String dataFileName) {\n+        try (InputStream in = getResource(dataFileName)) {\n+            return Blobs.createBlob(in, \"text/csv\", UTF_8.name());", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7168c4e603b83e95e36ceed35fa752d6a79218f", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\nindex 349dd353980..793e94caeb6 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n", "chunk": "@@ -78,34 +75,9 @@ public class DirectoryCSVLoader {\n      */\n     public static void loadData(String dataFileName, char delimiter, Schema schema,\n             Consumer<Map<String, Object>> loader) {\n-        Blob blob = callCreateBlob(dataFileName);\n-        loadData(blob, delimiter, schema, loader);\n-    }\n-\n-    protected static Blob callCreateBlob(String dataFileName) {\n-        try (InputStream in = getResource(dataFileName)) {\n-            return Blobs.createBlob(in, \"text/csv\", UTF_8.name());\n-        } catch (IOException e) {\n-            throw new DirectoryException(\"Read error while creating blob from data file: \" + dataFileName, e);\n-        }\n-    }\n-\n-    /**\n-     * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n-     * loader.\n-     *\n-     * @param csvDataFile the Blob file containing CSV data\n-     * @param delimiter the CSV column separator\n-     * @param schema the data schema\n-     * @param loader the actual consumer of loaded rows\n-     * @since 11.1\n-     */\n-    public static void loadData(Blob csvDataFile, char delimiter, Schema schema, Consumer<Map<String, Object>> loader) {\n-        String dataFileName = csvDataFile.getFilename();\n-        try (InputStream in = csvDataFile.getStream();\n-                CSVParser csvParser = new CSVParser(new InputStreamReader(in, UTF_8),\n+        try (InputStream in = getResource(dataFileName); //\n+                CSVParser csvParser = new CSVParser(new InputStreamReader(in, \"UTF-8\"),\n                         CSVFormat.DEFAULT.withDelimiter(delimiter).withHeader())) {\n-\n             Map<String, Integer> header = csvParser.getHeaderMap();\n \n             List<Field> fields = new ArrayList<>();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzQ2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367617462", "body": "Why remove the `,`? Also in the Javadoc of the new method you keep it.", "bodyText": "Why remove the ,? Also in the Javadoc of the new method you keep it.", "bodyHTML": "<p dir=\"auto\">Why remove the <code>,</code>? Also in the Javadoc of the new method you keep it.</p>", "author": "efge", "createdAt": "2020-01-16T19:51:17Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java", "diffHunk": "@@ -64,9 +66,10 @@ private DirectoryCSVLoader() {\n     }\n \n     /**\n-     * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n-     * loader.\n-     *\n+     * Loads the CSV data file based on the provided schema and creates the corresponding entries using the provided", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7168c4e603b83e95e36ceed35fa752d6a79218f", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\nindex 349dd353980..793e94caeb6 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n", "chunk": "@@ -66,10 +64,9 @@ public class DirectoryCSVLoader {\n     }\n \n     /**\n-     * Loads the CSV data file based on the provided schema and creates the corresponding entries using the provided\n-     * Loader.\n-     * \n-     * @see #loadData(Blob, char, Schema, Consumer)\n+     * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n+     * loader.\n+     *\n      * @param dataFileName the file name containing CSV data\n      * @param delimiter the CSV column separator\n      * @param schema the data schema\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzk2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367617966", "body": "You should also call this `isEmptyDir` for consistency", "bodyText": "You should also call this isEmptyDir for consistency", "bodyHTML": "<p dir=\"auto\">You should also call this <code>isEmptyDir</code> for consistency</p>", "author": "efge", "createdAt": "2020-01-16T19:52:25Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLDirectory.java", "diffHunk": "@@ -194,15 +194,14 @@ public void initialize() {\n             }\n \n             SQLHelper helper = new SQLHelper(sqlConnection, table, descriptor.getCreateTablePolicy());\n-            boolean loadData = helper.setupTable();\n+            boolean tableEmpty = helper.setupTable();", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjYzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r368626634", "bodyText": "after refactoring finally renamed as \"isTableCreated\" for consistency", "author": "ThierryCasanova", "createdAt": "2020-01-20T16:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzk2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxODQwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367618406", "body": "You can use `Collections.singletonMap` for 1-element maps (in all tests, and in other test classes too).", "bodyText": "You can use Collections.singletonMap for 1-element maps (in all tests, and in other test classes too).", "bodyHTML": "<p dir=\"auto\">You can use <code>Collections.singletonMap</code> for 1-element maps (in all tests, and in other test classes too).</p>", "author": "efge", "createdAt": "2020-01-16T19:53:27Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitAlwaysAndNeverLoadDirectory.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitAlwaysAndNeverLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryInitialised();\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            Map<String, Serializable> filter = new HashMap<>();\n+            filter.put(\"obsolete\", false);", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxODY5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367618696", "body": "`protected`\r\n`Initialized` with a `z`, we use American spelling.", "bodyText": "protected\nInitialized with a z, we use American spelling.", "bodyHTML": "<p dir=\"auto\"><code>protected</code><br>\n<code>Initialized</code> with a <code>z</code>, we use American spelling.</p>", "author": "efge", "createdAt": "2020-01-16T19:54:10Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitAlwaysAndNeverLoadDirectory.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitAlwaysAndNeverLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryInitialised();\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            Map<String, Serializable> filter = new HashMap<>();\n+            filter.put(\"obsolete\", false);\n+            DocumentModelList entries = session.query(filter);\n+            assertEquals(3, entries.size());\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithNever() throws Exception {\n+        assertDirectoryInitialised();\n+        //Test case NEVER - NEVER_LOAD\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-neverload-directory-contrib.xml\");\n+        assertDirectoryInitialised();\n+        //Test that autoincrementId is never updated\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-and-AutoIncrementId-directory-override-contrib.xml\");\n+        assertDirectoryInitialised();\n+        //Test case NEVER - UPDATE\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            Map<String, Serializable> filter = new HashMap<>();\n+            filter.put(\"obsolete\", false);\n+            DocumentModelList entries = session.query(filter);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", session.getEntry(\"1\").getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    private void assertDirectoryInitialised() {", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMDE0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367620141", "body": "The operation name (and class name) isn't clear. I would use `LoadFromCSV` instead.", "bodyText": "The operation name (and class name) isn't clear. I would use LoadFromCSV instead.", "bodyHTML": "<p dir=\"auto\">The operation name (and class name) isn't clear. I would use <code>LoadFromCSV</code> instead.</p>", "author": "efge", "createdAt": "2020-01-16T19:57:35Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/directory/LoadDirectoryWithCSV.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services.directory;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+\n+/**\n+ * Load entries into a {@link org.nuxeo.ecm.directory.Directory} from a CSV File .\n+ * <p>\n+ * Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\n+ * <p>\n+ *\n+ * @author Thierry Casanova\n+ * @since 11.1\n+ */\n+@Operation(id = LoadDirectoryWithCSV.ID, category = Constants.CAT_SERVICES, label = \"Load directory entries from CSV file\", description = \"Load directory entries from a CSV file. Depending on duplicate management policy, duplicate entries are ignored, updated or launch an error.\")\n+public class LoadDirectoryWithCSV extends AbstractDirectoryOperation {\n+\n+    public static final String ID = \"Directory.LoadWithCSV\";", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNTI5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r367625299", "body": "`return The` -> `Returns the`", "bodyText": "return The -> Returns the", "bodyHTML": "<p dir=\"auto\"><code>return The</code> -&gt; <code>Returns the</code></p>", "author": "efge", "createdAt": "2020-01-16T20:09:23Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -220,6 +233,29 @@ public String getCreateTablePolicy() {\n         return ctp;\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    @XNode(\"dataLoadingPolicy\")\n+    public String dataLoadingPolicy;\n+\n+    /**\n+     * return The dataLoadingPolicy; default to {@link DataLoadingPolicy#NEVER_LOAD}.", "originalCommit": "6cf42ecf8e10f65f3f2ba360e78c6a448220045a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8c96e59003a23d1acbcd7766dbad7897062ebcfb", "url": "https://github.com/nuxeo/nuxeo/commit/8c96e59003a23d1acbcd7766dbad7897062ebcfb", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-17T15:04:07Z", "type": "forcePushed"}, {"oid": "7e13068665d8e45613d8813344763898e4721df2", "url": "https://github.com/nuxeo/nuxeo/commit/7e13068665d8e45613d8813344763898e4721df2", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-17T16:32:01Z", "type": "forcePushed"}, {"oid": "29f569b29b95ad5ae6a2102b86904dc0e95e50a6", "url": "https://github.com/nuxeo/nuxeo/commit/29f569b29b95ad5ae6a2102b86904dc0e95e50a6", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-20T08:50:42Z", "type": "forcePushed"}, {"oid": "a12a8b1f9348d5964051d2b50a3498336b75087f", "url": "https://github.com/nuxeo/nuxeo/commit/a12a8b1f9348d5964051d2b50a3498336b75087f", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-20T16:14:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDQ2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369610465", "body": "`toLowerCase(Locale.ENGLISH)`.\r\n\r\nBecause in the Turkish locale, the lowercase version of `I` isn't `i` but `\u0131` (dotless i) \u2014\u00a0and there is an uppercase i with dot: `\u0130`", "bodyText": "toLowerCase(Locale.ENGLISH).\nBecause in the Turkish locale, the lowercase version of I isn't i but \u0131 (dotless i) \u2014\u00a0and there is an uppercase i with dot: \u0130", "bodyHTML": "<p dir=\"auto\"><code>toLowerCase(Locale.ENGLISH)</code>.</p>\n<p dir=\"auto\">Because in the Turkish locale, the lowercase version of <code>I</code> isn't <code>i</code> but <code>\u0131</code> (dotless i) \u2014\u00a0and there is an uppercase i with dot: <code>\u0130</code></p>", "author": "efge", "createdAt": "2020-01-22T15:00:04Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -220,6 +252,29 @@ public String getCreateTablePolicy() {\n         return ctp;\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    @XNode(\"dataLoadingPolicy\")\n+    public String dataLoadingPolicy;\n+\n+    /**\n+     * Returns the dataLoadingPolicy; default is {@link #NEVER_LOAD}.\n+     *\n+     * @since 11.1\n+     */\n+    public String getDataLoadingPolicy() {\n+        if (StringUtils.isBlank(dataLoadingPolicy)) {\n+            return NEVER_LOAD;\n+        }\n+        String dlp = dataLoadingPolicy.toLowerCase();", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjgzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369626833", "bodyText": "So Should I also cleanUP the old method   getCreateTablePolicy() :  which  code : String ctp = createTablePolicy.toLowerCase(); ?", "author": "ThierryCasanova", "createdAt": "2020-01-22T15:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMjE5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369632190", "bodyText": "Yes please.", "author": "efge", "createdAt": "2020-01-22T15:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDQ2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMzcxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369613712", "body": "Could you add a log.debug here to log why we don't do the load?", "bodyText": "Could you add a log.debug here to log why we don't do the load?", "bodyHTML": "<p dir=\"auto\">Could you add a log.debug here to log why we don't do the load?</p>", "author": "efge", "createdAt": "2020-01-22T15:05:15Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +121,87 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    // We cannot check duplicate Id on AutoincrementIdField\n+                    return;", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNDcxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369614718", "body": "It's worth having a debug log mentioning the loading policy and the filename that's going to be used.", "bodyText": "It's worth having a debug log mentioning the loading policy and the filename that's going to be used.", "bodyHTML": "<p dir=\"auto\">It's worth having a debug log mentioning the loading policy and the filename that's going to be used.</p>", "author": "efge", "createdAt": "2020-01-22T15:06:51Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +121,87 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    // We cannot check duplicate Id on AutoincrementIdField\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNTAzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369615032", "body": "`duplicatePolicy` -> `dataLoadingPolicy`", "bodyText": "duplicatePolicy -> dataLoadingPolicy", "bodyHTML": "<p dir=\"auto\"><code>duplicatePolicy</code> -&gt; <code>dataLoadingPolicy</code></p>", "author": "efge", "createdAt": "2020-01-22T15:07:21Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +121,87 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    // We cannot check duplicate Id on AutoincrementIdField\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            TransactionHelper.runInTransaction(\n+                    () -> Framework.doPrivileged(() -> loadFromCSV(blob, dataLoadingPolicy)));\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCSV(Blob csvDataFile, String dataLoadingPolicy) {\n+        if (csvDataFile == null) {\n+            throw new DirectoryException(\"csvDataFile must not be null\", SC_BAD_REQUEST);\n+        }\n+        try (Session session = getSession()) {\n+            Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n+            Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session, getSchema());\n+            DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema, loader);\n+            invalidateCaches(); //TODO how to avoid caches invalidation on first creation ?\n+        }\n+    }\n+\n+    /**\n+     * Consumer to load data from CSV according to the \"DataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"duplicatePolicy must not be null\");", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNTIzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369615232", "body": "`duplicatePolicy` -> `dataLoadingPolicy`\r\n", "bodyText": "duplicatePolicy -> dataLoadingPolicy", "bodyHTML": "<p dir=\"auto\"><code>duplicatePolicy</code> -&gt; <code>dataLoadingPolicy</code></p>", "author": "efge", "createdAt": "2020-01-22T15:07:41Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +121,87 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNTQ2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r369615461", "body": "Remove blank line", "bodyText": "Remove blank line", "bodyHTML": "<p dir=\"auto\">Remove blank line</p>", "author": "efge", "createdAt": "2020-01-22T15:08:06Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +121,87 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory \"duplicatePolicy\"\n+     * config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    // We cannot check duplicate Id on AutoincrementIdField\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            TransactionHelper.runInTransaction(\n+                    () -> Framework.doPrivileged(() -> loadFromCSV(blob, dataLoadingPolicy)));\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCSV(Blob csvDataFile, String dataLoadingPolicy) {\n+        if (csvDataFile == null) {\n+            throw new DirectoryException(\"csvDataFile must not be null\", SC_BAD_REQUEST);\n+        }\n+        try (Session session = getSession()) {\n+            Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n+            Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session, getSchema());\n+            DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema, loader);\n+            invalidateCaches(); //TODO how to avoid caches invalidation on first creation ?\n+        }\n+    }\n+\n+    /**\n+     * Consumer to load data from CSV according to the \"DataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"duplicatePolicy must not be null\");\n+            if (!DATA_LOADING_POLICIES.contains(dataLoadingPolicy)) {\n+                throw new DirectoryException(\"Invalid dataLoadingPolicy: \" + dataLoadingPolicy\n+                        + \", it should be one of: \" + DATA_LOADING_POLICIES);\n+            }\n+            this.session = Objects.requireNonNull(session, \"session is null\");\n+            this.schema = Objects.requireNonNull(schema, \"schema is null\");\n+        }\n+\n+        @Override\n+        public void accept(Map<String, Object> fieldMap) {\n+", "originalCommit": "a12a8b1f9348d5964051d2b50a3498336b75087f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "247010211c4142edb6785f4e8cb992cdf0431538", "url": "https://github.com/nuxeo/nuxeo/commit/247010211c4142edb6785f4e8cb992cdf0431538", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-23T17:30:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjY5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370332691", "body": "List.of seems more appropriate to me here as it gives an immutable `List`.", "bodyText": "List.of seems more appropriate to me here as it gives an immutable List.", "bodyHTML": "<p dir=\"auto\">List.of seems more appropriate to me here as it gives an immutable <code>List</code>.</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:16:07Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -91,6 +91,38 @@\n     public static final List<String> CREATE_TABLE_POLICIES = Arrays.asList(CREATE_TABLE_POLICY_NEVER,\n             CREATE_TABLE_POLICY_ALWAYS, CREATE_TABLE_POLICY_ON_MISSING_COLUMNS);\n \n+    /**\n+     * Doesn't load the CSV data (except on table has just been created\n+     * @since 11.1\n+     */\n+    public static final String NEVER_LOAD = \"never_load\";\n+\n+    /**\n+     * Duplicate lines in data load from CSV are ignored.\n+     * @since 11.1\n+     */\n+    public static final String IGNORE_DUPLICATE = \"ignore_duplicate\";\n+\n+    /**\n+     * If the data loaded from CSV already exist launch en exception.\n+     * @since 11.1\n+     */\n+    public static final String ERROR_ON_DUPLICATE = \"error_on_duplicate\";\n+\n+    /**\n+     * load CSV data and update duplicate lines.\n+     * @since 11.1\n+     */\n+    public static final String UPDATE_DUPLICATE = \"update_duplicate\";\n+\n+    /**\n+     * Policy used to deal with duplicates when loading data to a directory.\n+     *\n+     * @since 11.1\n+     */\n+    public static final List<String> DATA_LOADING_POLICIES = Arrays.asList(NEVER_LOAD, IGNORE_DUPLICATE,", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyMTUxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370521512", "bodyText": "Should it have to be really immutable? I mean if the contribution is overridden it may have a new element.", "author": "ThierryCasanova", "createdAt": "2020-01-24T08:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NTY5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370545695", "bodyText": "If it's a constant, indeed the list has to be immutable otherwise we end up with a non-constant constant \ud83e\udd37\u200d\u2642.\nAgree with @NourNuxeo's comment.", "author": "kevinleturc", "createdAt": "2020-01-24T09:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NzM5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370547392", "bodyText": "@ThierryCasanova Now that you say it, I wonder if it's a good idea to make it public so anybody can manipulate this list ?\nIf it's about contributing which means exclusively via xml, it should be handled in the merge method.", "author": "NourNuxeo", "createdAt": "2020-01-24T09:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjY5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNDY1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370334650", "body": "Shouldn't this be part of the clean up ?", "bodyText": "Shouldn't this be part of the clean up ?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be part of the clean up ?</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:20:35Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/Directory.java", "diffHunk": "@@ -35,7 +36,6 @@\n  *\n  * @author glefter@nuxeo.com\n  */\n-// TODO: maybe separate Directory implementation and Directory Source", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyMTkwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370521906", "bodyText": "I let the TODO because it might be a TODO", "author": "ThierryCasanova", "createdAt": "2020-01-24T08:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNDY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NTYxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370545614", "bodyText": "But you are removing the line", "author": "NourNuxeo", "createdAt": "2020-01-24T09:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNDY1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNTA2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370335064", "body": "missing a \")\"\r\nif Resources is class, you can link it", "bodyText": "missing a \")\"\nif Resources is class, you can link it", "bodyHTML": "<p dir=\"auto\">missing a \")\"<br>\nif Resources is class, you can link it</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:21:33Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/Directory.java", "diffHunk": "@@ -59,6 +59,16 @@\n      */\n     void initializeInverseReferences();\n \n+    /**\n+     * Loads a CSV into a Directory.\n+     *\n+     * @param csvDataFile the CSV Blob file to load (should be accessible in Resources", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NjM2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370546365", "bodyText": "Afaik Blob is not sensible to the Resources (here I assume you're talking about where we get the File , the jar context etc...) and carry everything needed by its API.\nOr am I missing something?", "author": "kevinleturc", "createdAt": "2020-01-24T09:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNTA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNDYyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370714622", "bodyText": "yes I was talking about the initialization process where the csv can be in the jar contribution and loaded by the method DirectoryCSVLoader.getResource()", "author": "ThierryCasanova", "createdAt": "2020-01-24T16:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNTA2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjQzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370336434", "body": "This needs to be formatted.\r\nMakes it easier to notice it misses a \")\" in the end", "bodyText": "This needs to be formatted.\nMakes it easier to notice it misses a \")\" in the end", "bodyHTML": "<p dir=\"auto\">This needs to be formatted.<br>\nMakes it easier to notice it misses a \")\" in the end</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:24:48Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/Directory.java", "diffHunk": "@@ -59,6 +59,16 @@\n      */\n     void initializeInverseReferences();\n \n+    /**\n+     * Loads a CSV into a Directory.\n+     *\n+     * @param csvDataFile the CSV Blob file to load (should be accessible in Resources\n+     * @param dataLoadingPolicy the duplicate management policy to load CSV data if Directory has been already loaded; (Cf.\n+     *            {@link BaseDirectoryDescriptor#DATA_LOADING_POLICIES}", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NzE5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370547191", "bodyText": "I'm in favor to not talk about duplicate management as the constant is named dataLoadingPolicy.\nDATA_LOADING_POLICIES link could be replaced by a @see", "author": "kevinleturc", "createdAt": "2020-01-24T09:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjQzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNzI1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370337258", "body": "I would remove Nuxeo and link Directory. If not I would put a capital D to hint at the class", "bodyText": "I would remove Nuxeo and link Directory. If not I would put a capital D to hint at the class", "bodyHTML": "<p dir=\"auto\">I would remove Nuxeo and link Directory. If not I would put a capital D to hint at the class</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:26:42Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/api/DirectoryService.java", "diffHunk": "@@ -142,4 +143,12 @@\n      */\n     void unregisterDirectoryDescriptor(BaseDirectoryDescriptor descriptor);\n \n+    /**\n+     * Loads or updates a Nuxeo directory from a CSV File.", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0MTY0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370341643", "body": "This is the exact same code as\r\nhttps://github.com/nuxeo/nuxeo/pull/3667/commits/247010211c4142edb6785f4e8cb992cdf0431538#diff-a557ecb9567148d0b1abe9549efc5b18R272\r\nMaybe it can be refactored in a utility method...we did something like that in `CommentUtils`", "bodyText": "This is the exact same code as\n2470102#diff-a557ecb9567148d0b1abe9549efc5b18R272\nMaybe it can be refactored in a utility method...we did something like that in CommentUtils", "bodyHTML": "<p dir=\"auto\">This is the exact same code as<br>\n<a class=\"commit-link\" href=\"https://github.com/nuxeo/nuxeo/commit/247010211c4142edb6785f4e8cb992cdf0431538#diff-a557ecb9567148d0b1abe9549efc5b18R272\"><tt>2470102</tt>#diff-a557ecb9567148d0b1abe9549efc5b18R272</a><br>\nMaybe it can be refactored in a utility method...we did something like that in <code>CommentUtils</code></p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:37:13Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    log.debug(\n+                            \"dataLoadingPolicy is 'NEVER_LOAD' or directory has AutoincrementIdField, reload data is not allowed. dataLoadingPolicy={}, isAutoincrementIdField={}\",\n+                            dataLoadingPolicy, descriptor.isAutoincrementIdField());\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            log.debug(\"calling loadFromCSV with dataLoadingPolicy={} and file name={}\", dataLoadingPolicy,\n+                    dataFileName);\n+            TransactionHelper.runInTransaction(\n+                    () -> Framework.doPrivileged(() -> loadFromCSV(blob, dataLoadingPolicy)));\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCSV(Blob csvDataFile, String dataLoadingPolicy) {\n+        if (csvDataFile == null) {\n+            throw new DirectoryException(\"csvDataFile must not be null\", SC_BAD_REQUEST);\n+        }\n+        try (Session session = getSession()) {\n+            Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n+            Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session, getSchema());\n+            DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema, loader);\n+            invalidateCaches(); // TODO how to avoid caches invalidation on first creation ?\n+        }\n+    }\n+\n+    /**\n+     * Consumer to load data from CSV according to the \"DataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"dataLoadingPolicy must not be null\");\n+            if (!DATA_LOADING_POLICIES.contains(dataLoadingPolicy)) {\n+                throw new DirectoryException(\"Invalid dataLoadingPolicy: \" + dataLoadingPolicy\n+                        + \", it should be one of: \" + DATA_LOADING_POLICIES);\n+            }", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NjQ3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370346472", "body": "We go protected", "bodyText": "We go protected", "bodyHTML": "<p dir=\"auto\">We go protected</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:48:24Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryIsInitialized();\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(3, entries.size());\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithNever() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - NEVER_LOAD\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-neverload-directory-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test that autoincrementId is never updated\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-and-AutoIncrementId-directory-override-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - UPDATE\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithOnMissingColumns() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // First we test with dataLoadingPolicy = never_load\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-never-load-directory-override-contrib.xml\");\n+        // We verify that nothing has changed\n+        assertDirectoryIsInitialized();\n+\n+        // Then we test with dataLoadingPolicy = ignore_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-ignore-duplicate-directory-override-contrib.xml\");\n+\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged with duplicate line ignored\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            // assert unchanged existing entry:\n+            assertEquals(\"Europe\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = update_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = error_on_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-error-on-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // since Exception is nesed by hotDeployer we can only check that Directory is not changed\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    private void assertDirectoryIsInitialized() {", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NjUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370346519", "body": "protected", "bodyText": "protected", "bodyHTML": "<p dir=\"auto\">protected</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:48:30Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryIsInitialized();\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(3, entries.size());\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithNever() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - NEVER_LOAD\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-neverload-directory-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test that autoincrementId is never updated\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-and-AutoIncrementId-directory-override-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - UPDATE\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithOnMissingColumns() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // First we test with dataLoadingPolicy = never_load\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-never-load-directory-override-contrib.xml\");\n+        // We verify that nothing has changed\n+        assertDirectoryIsInitialized();\n+\n+        // Then we test with dataLoadingPolicy = ignore_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-ignore-duplicate-directory-override-contrib.xml\");\n+\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged with duplicate line ignored\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            // assert unchanged existing entry:\n+            assertEquals(\"Europe\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = update_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = error_on_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-error-on-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // since Exception is nesed by hotDeployer we can only check that Directory is not changed\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    private void assertDirectoryIsInitialized() {\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(2, entries.size());\n+            Map<String, Serializable> filter = Collections.singletonMap(\"label\", \"Europe\");\n+            entries = session.query(filter);\n+            assertEquals(1, entries.size());\n+        }\n+    }\n+\n+    private DocumentModelList queryFullDirectory(Session session) {", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NjU2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370346564", "body": "protected", "bodyText": "protected", "bodyHTML": "<p dir=\"auto\">protected</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:48:37Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryIsInitialized();\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(3, entries.size());\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithNever() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - NEVER_LOAD\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-neverload-directory-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test that autoincrementId is never updated\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-and-AutoIncrementId-directory-override-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - UPDATE\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithOnMissingColumns() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // First we test with dataLoadingPolicy = never_load\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-never-load-directory-override-contrib.xml\");\n+        // We verify that nothing has changed\n+        assertDirectoryIsInitialized();\n+\n+        // Then we test with dataLoadingPolicy = ignore_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-ignore-duplicate-directory-override-contrib.xml\");\n+\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged with duplicate line ignored\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            // assert unchanged existing entry:\n+            assertEquals(\"Europe\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = update_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = error_on_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-error-on-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // since Exception is nesed by hotDeployer we can only check that Directory is not changed\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    private void assertDirectoryIsInitialized() {\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(2, entries.size());\n+            Map<String, Serializable> filter = Collections.singletonMap(\"label\", \"Europe\");\n+            entries = session.query(filter);\n+            assertEquals(1, entries.size());\n+        }\n+    }\n+\n+    private DocumentModelList queryFullDirectory(Session session) {\n+        Map<String, Serializable> filter = Collections.singletonMap(\"obsolete\", false);\n+        return session.query(filter);\n+    }\n+\n+    private DocumentModel queryEurope(Session session){", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NzQ3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370347471", "body": "do you mean the second by 2 ?", "bodyText": "do you mean the second by 2 ?", "bodyHTML": "<p dir=\"auto\">do you mean the second by 2 ?</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:50:55Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryIsInitialized();\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MTI0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370351249", "body": "nes**T**ed", "bodyText": "nesTed", "bodyHTML": "<p dir=\"auto\">nes<strong>T</strong>ed</p>", "author": "NourNuxeo", "createdAt": "2020-01-23T20:59:49Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectory {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithAlways() throws Exception {\n+        assertDirectoryIsInitialized();\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.override.withAutoincrementId.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv file has overwritten the first one\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(3, entries.size());\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-always-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithNever() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - NEVER_LOAD\n+        hotDeployer.deploy(\"org.nuxeo.ecm.directory.tests:csv-never-neverload-directory-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test that autoincrementId is never updated\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-and-AutoIncrementId-directory-override-contrib.xml\");\n+        assertDirectoryIsInitialized();\n+        // Test case NEVER - UPDATE\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-never-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-loaded-directory-contrib.xml\")\n+    public void testInitDirectoryWithOnMissingColumns() throws Exception {\n+        assertDirectoryIsInitialized();\n+        // First we test with dataLoadingPolicy = never_load\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-never-load-directory-override-contrib.xml\");\n+        // We verify that nothing has changed\n+        assertDirectoryIsInitialized();\n+\n+        // Then we test with dataLoadingPolicy = ignore_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-ignore-duplicate-directory-override-contrib.xml\");\n+\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged with duplicate line ignored\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            // assert unchanged existing entry:\n+            assertEquals(\"Europe\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = update_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-update-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // We verify that the 2 csv files have been correctly merged\n+            DocumentModelList entries = queryFullDirectory(session);\n+            assertEquals(4, entries.size());\n+            assertNotNull(session.getEntry(\"8\"));\n+            assertEquals(\"European Union\", queryEurope(session).getPropertyValue(\"label\"));\n+        }\n+        // Then we test with dataLoadingPolicy = error_on_duplicate\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-error-on-duplicate-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // since Exception is nesed by hotDeployer we can only check that Directory is not changed", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDk1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370574957", "bodyText": "Is it really true? doen't it something else than the deployer? like the directory service, or the component manager?", "author": "kevinleturc", "createdAt": "2020-01-24T10:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxOTIyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370719220", "bodyText": "I meant hotDeployer.deploy( \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-error-on-duplicate-directory-override-contrib.xml\"); is supposed to throw en Exception (because of \"error_on_duplicate\") ; but this Exception is caught and I cannot check directly on it.", "author": "ThierryCasanova", "createdAt": "2020-01-24T16:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MTI0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODE1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370548159", "body": "Why not using `hasEntry`?", "bodyText": "Why not using hasEntry?", "bodyHTML": "<p dir=\"auto\">Why not using <code>hasEntry</code>?</p>", "author": "kevinleturc", "createdAt": "2020-01-24T09:49:14Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java", "diffHunk": "@@ -435,4 +434,23 @@ protected void assertJSON(String expectedJSONFile, Blob actual) throws IOExcepti\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n+    @Test\n+    public void shouldLoadCsvToDirectory() throws Exception {\n+        try (Session directorySession = directoryService.open(\"continent\")) {\n+\n+            assertNull(directorySession.getEntry(\"atlantis\"));", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d9089813f3bb47b902faac386c539e11e586b2d", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\nindex e98d80e2cb7..05430c7b58a 100644\n--- a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n+++ b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n", "chunk": "@@ -434,23 +442,4 @@ public class DirectoryOperationsTest {\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n-    @Test\n-    public void shouldLoadCsvToDirectory() throws Exception {\n-        try (Session directorySession = directoryService.open(\"continent\")) {\n-\n-            assertNull(directorySession.getEntry(\"atlantis\"));\n-            Map<String, Object> params = new HashMap<>();\n-            params.put(\"directoryName\", \"continent\");\n-            params.put(\"dataLoadingPolicy\", \"error_on_duplicate\");\n-            OperationParameters oparams = new OperationParameters(LoadFromCSV.ID, params);\n-            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n-                    \"text/csv\", null, \"testdirectorydata/continent_local.csv\");\n-            ctx.setInput(blob);\n-            OperationChain chain = new OperationChain(\"fakeChain\");\n-            chain.add(oparams);\n-            service.run(ctx, chain);\n-\n-            assertNotNull(directorySession.getEntry(\"atlantis\"));\n-        }\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODI2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370548266", "body": "`Map.of` could be better here.", "bodyText": "Map.of could be better here.", "bodyHTML": "<p dir=\"auto\"><code>Map.of</code> could be better here.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T09:49:27Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java", "diffHunk": "@@ -435,4 +434,23 @@ protected void assertJSON(String expectedJSONFile, Blob actual) throws IOExcepti\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n+    @Test\n+    public void shouldLoadCsvToDirectory() throws Exception {\n+        try (Session directorySession = directoryService.open(\"continent\")) {\n+\n+            assertNull(directorySession.getEntry(\"atlantis\"));\n+            Map<String, Object> params = new HashMap<>();\n+            params.put(\"directoryName\", \"continent\");\n+            params.put(\"dataLoadingPolicy\", \"error_on_duplicate\");\n+            OperationParameters oparams = new OperationParameters(LoadFromCSV.ID, params);", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d9089813f3bb47b902faac386c539e11e586b2d", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\nindex e98d80e2cb7..05430c7b58a 100644\n--- a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n+++ b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n", "chunk": "@@ -434,23 +442,4 @@ public class DirectoryOperationsTest {\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n-    @Test\n-    public void shouldLoadCsvToDirectory() throws Exception {\n-        try (Session directorySession = directoryService.open(\"continent\")) {\n-\n-            assertNull(directorySession.getEntry(\"atlantis\"));\n-            Map<String, Object> params = new HashMap<>();\n-            params.put(\"directoryName\", \"continent\");\n-            params.put(\"dataLoadingPolicy\", \"error_on_duplicate\");\n-            OperationParameters oparams = new OperationParameters(LoadFromCSV.ID, params);\n-            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n-                    \"text/csv\", null, \"testdirectorydata/continent_local.csv\");\n-            ctx.setInput(blob);\n-            OperationChain chain = new OperationChain(\"fakeChain\");\n-            chain.add(oparams);\n-            service.run(ctx, chain);\n-\n-            assertNotNull(directorySession.getEntry(\"atlantis\"));\n-        }\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODUzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370548530", "body": "Same for `hasEntry`", "bodyText": "Same for hasEntry", "bodyHTML": "<p dir=\"auto\">Same for <code>hasEntry</code></p>", "author": "kevinleturc", "createdAt": "2020-01-24T09:50:03Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java", "diffHunk": "@@ -435,4 +434,23 @@ protected void assertJSON(String expectedJSONFile, Blob actual) throws IOExcepti\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n+    @Test\n+    public void shouldLoadCsvToDirectory() throws Exception {\n+        try (Session directorySession = directoryService.open(\"continent\")) {\n+\n+            assertNull(directorySession.getEntry(\"atlantis\"));\n+            Map<String, Object> params = new HashMap<>();\n+            params.put(\"directoryName\", \"continent\");\n+            params.put(\"dataLoadingPolicy\", \"error_on_duplicate\");\n+            OperationParameters oparams = new OperationParameters(LoadFromCSV.ID, params);\n+            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n+                    \"text/csv\", null, \"testdirectorydata/continent_local.csv\");\n+            ctx.setInput(blob);\n+            OperationChain chain = new OperationChain(\"fakeChain\");\n+            chain.add(oparams);\n+            service.run(ctx, chain);\n+\n+            assertNotNull(directorySession.getEntry(\"atlantis\"));", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d9089813f3bb47b902faac386c539e11e586b2d", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\nindex e98d80e2cb7..05430c7b58a 100644\n--- a/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n+++ b/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/test/directory/DirectoryOperationsTest.java\n", "chunk": "@@ -434,23 +442,4 @@ public class DirectoryOperationsTest {\n         JSONAssert.assertEquals(expected, actual.getString(), true);\n     }\n \n-    @Test\n-    public void shouldLoadCsvToDirectory() throws Exception {\n-        try (Session directorySession = directoryService.open(\"continent\")) {\n-\n-            assertNull(directorySession.getEntry(\"atlantis\"));\n-            Map<String, Object> params = new HashMap<>();\n-            params.put(\"directoryName\", \"continent\");\n-            params.put(\"dataLoadingPolicy\", \"error_on_duplicate\");\n-            OperationParameters oparams = new OperationParameters(LoadFromCSV.ID, params);\n-            Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"testdirectorydata/continent_local.csv\"),\n-                    \"text/csv\", null, \"testdirectorydata/continent_local.csv\");\n-            ctx.setInput(blob);\n-            OperationChain chain = new OperationChain(\"fakeChain\");\n-            chain.add(oparams);\n-            service.run(ctx, chain);\n-\n-            assertNotNull(directorySession.getEntry(\"atlantis\"));\n-        }\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODc1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370548759", "body": "```suggestion\r\n    protected org.nuxeo.ecm.automation.client.Session automationSession;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                org.nuxeo.ecm.automation.client.Session clientSession;\n          \n          \n            \n                protected org.nuxeo.ecm.automation.client.Session automationSession;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">org.nuxeo.ecm.automation.client<span class=\"pl-k\">.</span>Session</span> <span class=\"x x-first x-last\">clientSession</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">protected</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">org.nuxeo.ecm.automation.client<span class=\"pl-k\">.</span>Session</span> <span class=\"x x-first x-last\">automationSession</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-01-24T09:50:37Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java", "diffHunk": "@@ -79,6 +85,9 @@\n     @Inject\n     TransactionalFeature txFeature;\n \n+    @Inject\n+    org.nuxeo.ecm.automation.client.Session clientSession;", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d42cd5b5cbfe7e09d0d7c9e87afd72d0bb1c341", "changed_code": [{"header": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\nindex 03ab4c96a2c..323b48812e5 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n", "chunk": "@@ -85,9 +79,6 @@ public class DirectoryTest extends BaseTest {\n     @Inject\n     TransactionalFeature txFeature;\n \n-    @Inject\n-    org.nuxeo.ecm.automation.client.Session clientSession;\n-\n     private static final String TESTDIRNAME = \"testdir\";\n \n     private static final String INT_ID_TEST_DIR_NAME = \"intIdTestDir\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzgwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370563804", "body": "Formatting? `.` should be aligned afaik.", "bodyText": "Formatting? . should be aligned afaik.", "bodyHTML": "<p dir=\"auto\">Formatting? <code>.</code> should be aligned afaik.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:23:49Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java", "diffHunk": "@@ -437,4 +444,19 @@ private String getDirectoryEntryAsJson(String dirName, DocumentModel dirEntry) t\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n+    @Test\n+    public void testLoadDirectoryFromCsv() throws Exception {\n+        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n+        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadFromCSV\")\n+                .set(\"directoryName\", \"country\")\n+                .set(\"dataLoadingPolicy\", \"error_on_duplicate\")\n+                .setInput(blob);", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d42cd5b5cbfe7e09d0d7c9e87afd72d0bb1c341", "changed_code": [{"header": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\nindex 03ab4c96a2c..323b48812e5 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n", "chunk": "@@ -444,19 +437,4 @@ public class DirectoryTest extends BaseTest {\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n-    @Test\n-    public void testLoadDirectoryFromCsv() throws Exception {\n-        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n-        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadFromCSV\")\n-                .set(\"directoryName\", \"country\")\n-                .set(\"dataLoadingPolicy\", \"error_on_duplicate\")\n-                .setInput(blob);\n-        try {\n-            loadCsv.execute();\n-            fail();\n-        } catch (RemoteException e) {\n-            assertTrue(e.getMessage(), e.getMessage().contains(\"already exists in directory\"));\n-        }\n-\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NDEyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370564125", "body": "Could be better to have the full `clientSession.newRequest()...execute()` to avoid having `loadCsv` variable.", "bodyText": "Could be better to have the full clientSession.newRequest()...execute() to avoid having loadCsv variable.", "bodyHTML": "<p dir=\"auto\">Could be better to have the full <code>clientSession.newRequest()...execute()</code> to avoid having <code>loadCsv</code> variable.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:24:35Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java", "diffHunk": "@@ -437,4 +444,19 @@ private String getDirectoryEntryAsJson(String dirName, DocumentModel dirEntry) t\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n+    @Test\n+    public void testLoadDirectoryFromCsv() throws Exception {\n+        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n+        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadFromCSV\")\n+                .set(\"directoryName\", \"country\")\n+                .set(\"dataLoadingPolicy\", \"error_on_duplicate\")\n+                .setInput(blob);\n+        try {\n+            loadCsv.execute();", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d42cd5b5cbfe7e09d0d7c9e87afd72d0bb1c341", "changed_code": [{"header": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\nindex 03ab4c96a2c..323b48812e5 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DirectoryTest.java\n", "chunk": "@@ -444,19 +437,4 @@ public class DirectoryTest extends BaseTest {\n         return MarshallerHelper.objectToJson(new DirectoryEntry(dirName, dirEntry), CtxBuilder.get());\n     }\n \n-    @Test\n-    public void testLoadDirectoryFromCsv() throws Exception {\n-        Blob blob = new FileBlob(FileUtils.getResourceFileFromContext(\"directories/country.csv\"));\n-        OperationRequest loadCsv = clientSession.newRequest(\"Directory.LoadFromCSV\")\n-                .set(\"directoryName\", \"country\")\n-                .set(\"dataLoadingPolicy\", \"error_on_duplicate\")\n-                .setInput(blob);\n-        try {\n-            loadCsv.execute();\n-            fail();\n-        } catch (RemoteException e) {\n-            assertTrue(e.getMessage(), e.getMessage().contains(\"already exists in directory\"));\n-        }\n-\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NDM5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370564397", "body": "I think it is done on purpose to avoid auto boxing/unboxing.", "bodyText": "I think it is done on purpose to avoid auto boxing/unboxing.", "bodyHTML": "<p dir=\"auto\">I think it is done on purpose to avoid auto boxing/unboxing.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:25:15Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-api/src/main/java/org/nuxeo/ecm/directory/BaseDirectoryDescriptor.java", "diffHunk": "@@ -115,11 +148,11 @@\n     public Boolean autoincrementIdField;\n \n     public boolean isAutoincrementIdField() {\n-        return autoincrementIdField == null ? AUTO_INCREMENT_ID_FIELD_DEFAULT : autoincrementIdField.booleanValue();\n+        return autoincrementIdField == null ? AUTO_INCREMENT_ID_FIELD_DEFAULT : autoincrementIdField;", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczMDk3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370730970", "bodyText": "sometimes Intellij give bad advise :(", "author": "ThierryCasanova", "createdAt": "2020-01-24T16:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NDM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0ODI3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370748273", "bodyText": "In particular you'll see it a lot in code that I write (also Boolean.valueOf(somebool)) because I have warnings on for autoboxing/autounboxing, due to the fact that autounboxing can lead to NPE (and Eclipse has only one setting for autoboxing/autounboxing...).", "author": "efge", "createdAt": "2020-01-24T17:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NDM5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQ1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370567456", "body": "Even if it's `NEVER_LOAD`?", "bodyText": "Even if it's NEVER_LOAD?", "bodyHTML": "<p dir=\"auto\">Even if it's <code>NEVER_LOAD</code>?</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:32:34Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2MzgyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r371163820", "bodyText": "except with config \"never\" + \"never_load\", when table is created it is loaded on first init.\nCf. loadingRules", "author": "ThierryCasanova", "createdAt": "2020-01-27T10:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2ODUzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r371168532", "bodyText": "I saw in the table: Never Create + Never Load => no load, that's not the case here for the first init or am I missing something?", "author": "kevinleturc", "createdAt": "2020-01-27T10:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzNTIwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r371235205", "bodyText": "if CREATE_TABLE_POLICY_NEVER the boolean isTableCreated is false so if dataLoadingPolicy = \"never_load\" nothing is loaded", "author": "ThierryCasanova", "createdAt": "2020-01-27T13:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQ1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2OTU2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370569565", "body": "```\r\nlog.debug(\"Don't load directory: {} on init due to its configuration, dataLoadingPolicy: {} / autoincrement: {}\", getName(), dataLoadingPolicy, descriptor.isAutoincrementIdField());\r\n```", "bodyText": "log.debug(\"Don't load directory: {} on init due to its configuration, dataLoadingPolicy: {} / autoincrement: {}\", getName(), dataLoadingPolicy, descriptor.isAutoincrementIdField());", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"log.debug(&quot;Don't load directory: {} on init due to its configuration, dataLoadingPolicy: {} / autoincrement: {}&quot;, getName(), dataLoadingPolicy, descriptor.isAutoincrementIdField());\"><pre><code>log.debug(\"Don't load directory: {} on init due to its configuration, dataLoadingPolicy: {} / autoincrement: {}\", getName(), dataLoadingPolicy, descriptor.isAutoincrementIdField());\n</code></pre></div>", "author": "kevinleturc", "createdAt": "2020-01-24T10:37:29Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    log.debug(\n+                            \"dataLoadingPolicy is 'NEVER_LOAD' or directory has AutoincrementIdField, reload data is not allowed. dataLoadingPolicy={}, isAutoincrementIdField={}\",\n+                            dataLoadingPolicy, descriptor.isAutoincrementIdField());", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MDI3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370570275", "body": "```suggestion\r\n            log.debug(\"Load directory: {} with dataLoadingPolicy: {} and file: {}\", getName(), dataLoadingPolicy, dataFileName)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"calling loadFromCSV with dataLoadingPolicy={} and file name={}\", dataLoadingPolicy,\n          \n          \n            \n                        log.debug(\"Load directory: {} with dataLoadingPolicy: {} and file: {}\", getName(), dataLoadingPolicy, dataFileName)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">calling loadFromCSV </span>with dataLoadingPolicy<span class=\"x x-first x-last\">=</span>{} and file<span class=\"x x-first x-last\"> name=</span>{}<span class=\"pl-pds\">\"</span></span>, dataLoadingPolicy,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Load directory: {} </span>with dataLoadingPolicy<span class=\"x x-first x-last\">: </span>{} and file<span class=\"x x-first x-last\">: </span>{}<span class=\"pl-pds\">\"</span></span>, <span class=\"x x-first x-last\">getName(), </span>dataLoadingPolicy,<span class=\"x x-first x-last\"> dataFileName)</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-01-24T10:39:12Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    log.debug(\n+                            \"dataLoadingPolicy is 'NEVER_LOAD' or directory has AutoincrementIdField, reload data is not allowed. dataLoadingPolicy={}, isAutoincrementIdField={}\",\n+                            dataLoadingPolicy, descriptor.isAutoincrementIdField());\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            log.debug(\"calling loadFromCSV with dataLoadingPolicy={} and file name={}\", dataLoadingPolicy,", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MTE2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370571161", "body": "These two checks should be after the `csvDataFile` check in `loadFromCSV` and should both throw `DirectoryException` with a bad request.", "bodyText": "These two checks should be after the csvDataFile check in loadFromCSV and should both throw DirectoryException with a bad request.", "bodyHTML": "<p dir=\"auto\">These two checks should be after the <code>csvDataFile</code> check in <code>loadFromCSV</code> and should both throw <code>DirectoryException</code> with a bad request.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:41:17Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    log.debug(\n+                            \"dataLoadingPolicy is 'NEVER_LOAD' or directory has AutoincrementIdField, reload data is not allowed. dataLoadingPolicy={}, isAutoincrementIdField={}\",\n+                            dataLoadingPolicy, descriptor.isAutoincrementIdField());\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            log.debug(\"calling loadFromCSV with dataLoadingPolicy={} and file name={}\", dataLoadingPolicy,\n+                    dataFileName);\n+            TransactionHelper.runInTransaction(\n+                    () -> Framework.doPrivileged(() -> loadFromCSV(blob, dataLoadingPolicy)));\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCSV(Blob csvDataFile, String dataLoadingPolicy) {\n+        if (csvDataFile == null) {\n+            throw new DirectoryException(\"csvDataFile must not be null\", SC_BAD_REQUEST);\n+        }\n+        try (Session session = getSession()) {\n+            Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n+            Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session, getSchema());\n+            DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema, loader);\n+            invalidateCaches(); // TODO how to avoid caches invalidation on first creation ?\n+        }\n+    }\n+\n+    /**\n+     * Consumer to load data from CSV according to the \"DataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"dataLoadingPolicy must not be null\");\n+            if (!DATA_LOADING_POLICIES.contains(dataLoadingPolicy)) {\n+                throw new DirectoryException(\"Invalid dataLoadingPolicy: \" + dataLoadingPolicy\n+                        + \", it should be one of: \" + DATA_LOADING_POLICIES);", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2ODAxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r371168019", "bodyText": "the public CSVLoaderConsumer() constructor shouldn't be checked ?", "author": "ThierryCasanova", "createdAt": "2020-01-27T10:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MTE2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MTQzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370571436", "body": "```suggestion\r\n            if (ERROR_ON_DUPLICATE.equals(dataLoadingPolicy)) { // Always this case if table has just been created\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (dataLoadingPolicy.equals(ERROR_ON_DUPLICATE)) { // Always this case if table has just been created\n          \n          \n            \n                        if (ERROR_ON_DUPLICATE.equals(dataLoadingPolicy)) { // Always this case if table has just been created", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">dataLoadingPolicy</span><span class=\"pl-k\">.</span>equals(<span class=\"pl-c1 x x-first x-last\">ERROR_ON_DUPLICATE</span>)) { <span class=\"pl-c\"><span class=\"pl-c\">//</span> Always this case if table has just been created</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">ERROR_ON_DUPLICATE</span><span class=\"pl-k\">.</span>equals(<span class=\"x x-first x-last\">dataLoadingPolicy</span>)) { <span class=\"pl-c\"><span class=\"pl-c\">//</span> Always this case if table has just been created</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-01-24T10:41:55Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -112,15 +125,90 @@ public void initialize() {\n         initSchemaFieldMap();\n     }\n \n-    protected void loadData() {\n-        if (descriptor.getDataFileName() != null) {\n-            try (Session session = getSession()) {\n-                TransactionHelper.runInTransaction(() -> Framework.doPrivileged(() -> {\n-                    Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n-                    DirectoryCSVLoader.loadData(descriptor.getDataFileName(),\n-                            descriptor.getDataFileCharacterSeparator(), schema,\n-                            ((BaseSession) session)::createEntryWithoutReferences);\n-                }));\n+    /**\n+     * Called on Directory initialisation, depending on \"createTablePolicy\". Will check the Directory\n+     * \"dataLoadingPolicy\" config to append or not new data.\n+     *\n+     * @param isTableCreated <code>false</code>if the Directory contains already some data, <code>true</code> if the\n+     *            Directory (table or Collection) has been re-created (and is empty).\n+     */\n+    protected void loadDataOnInit(boolean isTableCreated) {\n+        String dataFileName = descriptor.getDataFileName();\n+        if (dataFileName != null) {\n+            String dataLoadingPolicy;\n+            if (isTableCreated) { // we force create since Table has just been created and empty\n+                dataLoadingPolicy = ERROR_ON_DUPLICATE;\n+            } else {\n+                dataLoadingPolicy = descriptor.getDataLoadingPolicy();\n+                if (dataLoadingPolicy.equals(NEVER_LOAD) || descriptor.isAutoincrementIdField()) {\n+                    log.debug(\n+                            \"dataLoadingPolicy is 'NEVER_LOAD' or directory has AutoincrementIdField, reload data is not allowed. dataLoadingPolicy={}, isAutoincrementIdField={}\",\n+                            dataLoadingPolicy, descriptor.isAutoincrementIdField());\n+                    return;\n+                }\n+            }\n+            Blob blob = DirectoryCSVLoader.createBlob(dataFileName);\n+            log.debug(\"calling loadFromCSV with dataLoadingPolicy={} and file name={}\", dataLoadingPolicy,\n+                    dataFileName);\n+            TransactionHelper.runInTransaction(\n+                    () -> Framework.doPrivileged(() -> loadFromCSV(blob, dataLoadingPolicy)));\n+        }\n+    }\n+\n+    @Override\n+    public void loadFromCSV(Blob csvDataFile, String dataLoadingPolicy) {\n+        if (csvDataFile == null) {\n+            throw new DirectoryException(\"csvDataFile must not be null\", SC_BAD_REQUEST);\n+        }\n+        try (Session session = getSession()) {\n+            Schema schema = Framework.getService(SchemaManager.class).getSchema(getSchema());\n+            Consumer<Map<String, Object>> loader = new CSVLoaderConsumer(dataLoadingPolicy, session, getSchema());\n+            DirectoryCSVLoader.loadData(csvDataFile, descriptor.getDataFileCharacterSeparator(), schema, loader);\n+            invalidateCaches(); // TODO how to avoid caches invalidation on first creation ?\n+        }\n+    }\n+\n+    /**\n+     * Consumer to load data from CSV according to the \"DataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = Objects.requireNonNull(dataLoadingPolicy, \"dataLoadingPolicy must not be null\");\n+            if (!DATA_LOADING_POLICIES.contains(dataLoadingPolicy)) {\n+                throw new DirectoryException(\"Invalid dataLoadingPolicy: \" + dataLoadingPolicy\n+                        + \", it should be one of: \" + DATA_LOADING_POLICIES);\n+            }\n+            this.session = Objects.requireNonNull(session, \"session is null\");\n+            this.schema = Objects.requireNonNull(schema, \"schema is null\");\n+        }\n+\n+        @Override\n+        public void accept(Map<String, Object> fieldMap) {\n+            if (dataLoadingPolicy.equals(ERROR_ON_DUPLICATE)) { // Always this case if table has just been created", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MjA4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370572088", "body": "I prefer `@see` at the end, wdyt?", "bodyText": "I prefer @see at the end, wdyt?", "bodyHTML": "<p dir=\"auto\">I prefer <code>@see</code> at the end, wdyt?</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:43:24Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java", "diffHunk": "@@ -63,8 +67,9 @@ private DirectoryCSVLoader() {\n \n     /**\n      * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n-     * loader.\n+     * Loader.\n      *\n+     * @see #loadData(Blob, char, Schema, Consumer)", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7168c4e603b83e95e36ceed35fa752d6a79218f", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\nindex 811bd00abdd..793e94caeb6 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n", "chunk": "@@ -67,9 +65,8 @@ public class DirectoryCSVLoader {\n \n     /**\n      * Loads the CSV data file based on the provided schema, and creates the corresponding entries using the provided\n-     * Loader.\n+     * loader.\n      *\n-     * @see #loadData(Blob, char, Schema, Consumer)\n      * @param dataFileName the file name containing CSV data\n      * @param delimiter the CSV column separator\n      * @param schema the data schema\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3Mjg2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370572860", "body": "If it's possible:\r\n```suggestion\r\n            log.debug(\"Directory Local Configuration is on : {}\", configuration::getDocumentRef);\r\n```", "bodyText": "If it's possible:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Directory Local Configuration is on : {}\", configuration.getDocumentRef());\n          \n          \n            \n                        log.debug(\"Directory Local Configuration is on : {}\", configuration::getDocumentRef);", "bodyHTML": "<p dir=\"auto\">If it's possible:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Directory Local Configuration is on : {}<span class=\"pl-pds\">\"</span></span>, configuration<span class=\"pl-k x x-first x-last\">.</span>getDocumentRef<span class=\"x x-first x-last\">()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Directory Local Configuration is on : {}<span class=\"pl-pds\">\"</span></span>, configuration<span class=\"pl-k x x-first x-last\">::</span>getDocumentRef);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-01-24T10:45:21Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryServiceImpl.java", "diffHunk": "@@ -114,7 +127,7 @@ protected String getWaitingLocalDirectoryName(String directoryName, DirectoryCon\n                 return directoryName + DELIMITER_BETWEEN_DIRECTORY_NAME_AND_SUFFIX + suffix;\n             }\n             log.warn(\"The local configuration detected is an empty value, we consider it as no configuration set.\");\n-            log.debug(\"Directory Local Configuration is on : \" + configuration.getDocumentRef());\n+            log.debug(\"Directory Local Configuration is on : {}\", configuration.getDocumentRef());", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4c7d2236cc66533c314684bd2df5eac981f6514", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryServiceImpl.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryServiceImpl.java\nindex 83d72fbc6d1..1929f1372cc 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryServiceImpl.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryServiceImpl.java\n", "chunk": "@@ -127,7 +141,7 @@ public class DirectoryServiceImpl extends DefaultComponent implements DirectoryS\n                 return directoryName + DELIMITER_BETWEEN_DIRECTORY_NAME_AND_SUFFIX + suffix;\n             }\n             log.warn(\"The local configuration detected is an empty value, we consider it as no configuration set.\");\n-            log.debug(\"Directory Local Configuration is on : {}\", configuration.getDocumentRef());\n+            log.debug(\"Directory Local Configuration is on : \" + configuration.getDocumentRef());\n         }\n \n         return directoryName;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MzcxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370573719", "body": "You're changing the API, please don't or provide backward compatibility.", "bodyText": "You're changing the API, please don't or provide backward compatibility.", "bodyHTML": "<p dir=\"auto\">You're changing the API, please don't or provide backward compatibility.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:47:29Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java", "diffHunk": "@@ -147,17 +148,16 @@ private void createTable(boolean drop) {\n     }\n \n     public boolean hasMatchingColumns() {\n-        Set<Column> missingColumns = getMissingColumns(true);\n-        if (missingColumns == null || missingColumns.size() > 0) {\n+        if (!getMissingColumns(true).isEmpty()) {\n             return false;\n         } else {\n             // all fields have a matching column, this looks not that bad\n-            log.debug(String.format(\"all fields matched for table '%s'\", tableName));\n+            log.debug(\"all fields matched for table {}\", tableName);\n             return true;\n         }\n     }\n \n-    public Set<Column> getMissingColumns(Boolean breakAtFirstMissing) {\n+    public Set<Column> getMissingColumns(boolean breakAtFirstMissing) {", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8042f6205787d3680393ab31821bc82f89659c37", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\nindex 7cb70412592..b4fd392e721 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLHelper.java\n", "chunk": "@@ -148,16 +147,17 @@ public class SQLHelper {\n     }\n \n     public boolean hasMatchingColumns() {\n-        if (!getMissingColumns(true).isEmpty()) {\n+        Set<Column> missingColumns = getMissingColumns(true);\n+        if (missingColumns == null || missingColumns.size() > 0) {\n             return false;\n         } else {\n             // all fields have a matching column, this looks not that bad\n-            log.debug(\"all fields matched for table {}\", tableName);\n+            log.debug(String.format(\"all fields matched for table '%s'\", tableName));\n             return true;\n         }\n     }\n \n-    public Set<Column> getMissingColumns(boolean breakAtFirstMissing) {\n+    public Set<Column> getMissingColumns(Boolean breakAtFirstMissing) {\n         try {\n             Set<Column> missingColumns = new HashSet<>();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NTY4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r370575686", "body": "I don't see anything asserting that we did the job the first time and not the second one, which could be the case here.", "bodyText": "I don't see anything asserting that we did the job the first time and not the second one, which could be the case here.", "bodyHTML": "<p dir=\"auto\">I don't see anything asserting that we did the job the first time and not the second one, which could be the case here.</p>", "author": "kevinleturc", "createdAt": "2020-01-24T10:52:07Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-test/src/test/java/org/nuxeo/directory/test/TestInitLoadDirectoryWithAutoIncrementId.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Thierry Casanova\n+ */\n+\n+package org.nuxeo.directory.test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ DirectoryFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestInitLoadDirectoryWithAutoIncrementId {\n+\n+    protected static final String CSV_LOAD_DIRECTORY = \"csvLoadedDirectory\";\n+\n+    @Inject\n+    protected DirectoryService directoryService;\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-never-load-directory-override-contrib.xml\")\n+    public void testInitDirectoryWithOnMissingColumnsAndAutoIncrementId() throws Exception {\n+        hotDeployer.deploy(\n+                \"org.nuxeo.ecm.directory.tests:csv-on-missing-columns-and-update-duplicate-autoincrementId-directory-override-contrib.xml\");\n+        try (Session session = directoryService.open(CSV_LOAD_DIRECTORY)) {\n+            // check that csv is loaded only at first time\n+            Map<String, Serializable> filter = Collections.singletonMap(\"obsolete\", false);\n+            DocumentModelList entries = session.query(filter);\n+            assertEquals(3, entries.size());", "originalCommit": "247010211c4142edb6785f4e8cb992cdf0431538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzYzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r371177630", "bodyText": "when methode is launched thedirectory is initialized with \"test-append-directory.csv\" wich contains 3 entries.Then we hotrelaod with \"test-load-directory.csv\" wich contains 2 entries (with one duplicate\". Since AutoIncrementId cannot be merge we can see that the size is unchanged (3 entries)", "author": "ThierryCasanova", "createdAt": "2020-01-27T11:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NTY4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "83323b32d5695fc663fc2c3a40a999598f40ef0a", "url": "https://github.com/nuxeo/nuxeo/commit/83323b32d5695fc663fc2c3a40a999598f40ef0a", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-01-27T13:38:14Z", "type": "forcePushed"}, {"oid": "d310bf207f942ea97e91f89583f2ee0af9716d4e", "url": "https://github.com/nuxeo/nuxeo/commit/d310bf207f942ea97e91f89583f2ee0af9716d4e", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-13T10:35:13Z", "type": "forcePushed"}, {"oid": "9f461d94f9c60ecc5f5063fa99291396d2fb0f2f", "url": "https://github.com/nuxeo/nuxeo/commit/9f461d94f9c60ecc5f5063fa99291396d2fb0f2f", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-14T16:21:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNTUzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r379535539", "body": "Shouldn't we log the `fieldMap` to aid debugging?", "bodyText": "Shouldn't we log the fieldMap to aid debugging?", "bodyHTML": "<p dir=\"auto\">Shouldn't we log the <code>fieldMap</code> to aid debugging?</p>", "author": "efge", "createdAt": "2020-02-14T16:47:59Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/AbstractDirectory.java", "diffHunk": "@@ -360,4 +404,47 @@ protected void fallbackOnDefaultCache() {\n             }\n         }\n     }\n+\n+    /**\n+     * Consumer to load data from CSV according to the dataLoadingPolicy.\n+     */\n+    protected static class CSVLoaderConsumer implements Consumer<Map<String, Object>> {\n+\n+        protected final String dataLoadingPolicy;\n+\n+        protected final Session session;\n+\n+        protected final String schema;\n+\n+        public CSVLoaderConsumer(String dataLoadingPolicy, Session session, String schema) {\n+            this.dataLoadingPolicy = dataLoadingPolicy;\n+            this.session = session;\n+            this.schema = schema;\n+        }\n+\n+        @Override\n+        public void accept(Map<String, Object> fieldMap) {\n+            if (DATA_LOADING_POLICY_REJECT_DUPLICATE.equals(dataLoadingPolicy)) {\n+                // leverage DB constraints\n+                ((BaseSession) session).createEntryWithoutReferences(fieldMap);\n+            } else {\n+                Object rawId = fieldMap.get(session.getIdField());\n+                if (rawId == null) {\n+                    throw new DirectoryException(\"A line is missing the entry id\", SC_BAD_REQUEST);", "originalCommit": "9f461d94f9c60ecc5f5063fa99291396d2fb0f2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMjAxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r380112010", "bodyText": "I put a try/catch/addInfo/re-throw bloc in DirectoryCSV class in order to add as info the line number. We did that to avoid printing in logs sensible data.\nWhile we're doing this change, I saw in DirectoryCSV we're printing csv lines when record is non consistent, I remove this part of log.", "author": "kevinleturc", "createdAt": "2020-02-17T10:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNTUzOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "12a2a3e8821b617589ff1bea35fcb3ed4fc19487", "url": "https://github.com/nuxeo/nuxeo/commit/12a2a3e8821b617589ff1bea35fcb3ed4fc19487", "message": "NXP-27877: Cleanup / Format", "committedDate": "2020-02-17T10:36:35Z", "type": "commit"}, {"oid": "e85cc0a4c283e544d1f845376e15e3751780fb7a", "url": "https://github.com/nuxeo/nuxeo/commit/e85cc0a4c283e544d1f845376e15e3751780fb7a", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-17T10:48:54Z", "type": "forcePushed"}, {"oid": "d09695cb3833c55a1a42b9aea10c1eacc93e0b02", "url": "https://github.com/nuxeo/nuxeo/commit/d09695cb3833c55a1a42b9aea10c1eacc93e0b02", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-17T10:52:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExNTc0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3667#discussion_r380115745", "body": "I would just do `e.addInfo(\"At line: \" + lineno)` as the exception message is already in the exception itself.\r\n", "bodyText": "I would just do e.addInfo(\"At line: \" + lineno) as the exception message is already in the exception itself.", "bodyHTML": "<p dir=\"auto\">I would just do <code>e.addInfo(\"At line: \" + lineno)</code> as the exception message is already in the exception itself.</p>", "author": "efge", "createdAt": "2020-02-17T10:59:51Z", "path": "nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java", "diffHunk": "@@ -107,13 +138,25 @@ public static void loadData(String dataFileName, char delimiter, Schema schema,\n                     Object v = CSV_NULL_MARKER.equals(value) ? null : decode(field, value);\n                     map.put(field.getName().getPrefixedName(), v);\n                 }\n-                loader.accept(map);\n+                loaderWithLineno.accept(map, lineno);\n             }\n         } catch (IOException e) {\n             throw new DirectoryException(\"Read error while reading data file: \" + dataFileName, e);\n         }\n     }\n \n+    protected static BiConsumer<Map<String, Object>, Integer> toLoaderEnrichedOnError(\n+            Consumer<Map<String, Object>> loader) {\n+        return (map, lineno) -> {\n+            try {\n+                loader.accept(map);\n+            } catch (DirectoryException e) {\n+                e.addInfo(String.format(\"Exception: %s happened on line: %s\", e.getMessage(), lineno));", "originalCommit": "d09695cb3833c55a1a42b9aea10c1eacc93e0b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7168c4e603b83e95e36ceed35fa752d6a79218f", "changed_code": [{"header": "diff --git a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\nindex ce34834424f..793e94caeb6 100644\n--- a/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n+++ b/nuxeo-services/nuxeo-platform-directory/nuxeo-platform-directory-core/src/main/java/org/nuxeo/ecm/directory/DirectoryCSVLoader.java\n", "chunk": "@@ -138,25 +109,13 @@ public class DirectoryCSVLoader {\n                     Object v = CSV_NULL_MARKER.equals(value) ? null : decode(field, value);\n                     map.put(field.getName().getPrefixedName(), v);\n                 }\n-                loaderWithLineno.accept(map, lineno);\n+                loader.accept(map);\n             }\n         } catch (IOException e) {\n             throw new DirectoryException(\"Read error while reading data file: \" + dataFileName, e);\n         }\n     }\n \n-    protected static BiConsumer<Map<String, Object>, Integer> toLoaderEnrichedOnError(\n-            Consumer<Map<String, Object>> loader) {\n-        return (map, lineno) -> {\n-            try {\n-                loader.accept(map);\n-            } catch (DirectoryException e) {\n-                e.addInfo(String.format(\"Exception: %s happened on line: %s\", e.getMessage(), lineno));\n-                throw e;\n-            }\n-        };\n-    }\n-\n     protected static Object decode(Field field, String value) {\n         Type type = field.getType();\n         if (type instanceof DateType) {\n", "next_change": null}]}}, {"oid": "5f8dc4d1a40d3fba645a32438ac93175c540410f", "url": "https://github.com/nuxeo/nuxeo/commit/5f8dc4d1a40d3fba645a32438ac93175c540410f", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-17T11:02:35Z", "type": "forcePushed"}, {"oid": "4b9b3ec6627e73cd0ecc67d91003083b07aa7b20", "url": "https://github.com/nuxeo/nuxeo/commit/4b9b3ec6627e73cd0ecc67d91003083b07aa7b20", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-17T14:14:06Z", "type": "commit"}, {"oid": "4b9b3ec6627e73cd0ecc67d91003083b07aa7b20", "url": "https://github.com/nuxeo/nuxeo/commit/4b9b3ec6627e73cd0ecc67d91003083b07aa7b20", "message": "NXP-27877: load Directory from CSV with duplicate policy", "committedDate": "2020-02-17T14:14:06Z", "type": "forcePushed"}]}