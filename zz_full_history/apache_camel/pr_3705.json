{"pr_number": 3705, "pr_title": "CAMEL-14833 camel-tika: enhance TikaProducer to be easoly extensible", "pr_author": "JiriOndrusek", "pr_createdAt": "2020-04-02T11:16:26Z", "pr_url": "https://github.com/apache/camel/pull/3705", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MzYxOA==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402243618", "body": "I just realized that `setProperties` should be done on the endpoint not on the configuration in order to avoid reflection, is that correct @oscerd ?", "bodyText": "I just realized that setProperties should be done on the endpoint not on the configuration in order to avoid reflection, is that correct @oscerd ?", "bodyHTML": "<p dir=\"auto\">I just realized that <code>setProperties</code> should be done on the endpoint not on the configuration in order to avoid reflection, is that correct <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/oscerd/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/oscerd\">@oscerd</a> ?</p>", "author": "omarsmak", "createdAt": "2020-04-02T11:32:15Z", "path": "components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java", "diffHunk": "@@ -38,6 +38,10 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje\n             tikaConfiguration.setTikaConfig(config);\r\n         }\r\n         tikaConfiguration.setOperation(new URI(uri).getHost());\r", "originalCommit": "225528a48bd20af13a258c831e75848f408d16c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NDUyMA==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402244520", "bodyText": "Yes, we missed that one, I guess @davsclaus", "author": "oscerd", "createdAt": "2020-04-02T11:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NjUyNg==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402246526", "bodyText": "Yes see the other components how its done", "author": "davsclaus", "createdAt": "2020-04-02T11:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4OTM2OQ==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402289369", "bodyText": "@omarsmak I've changed call of setProperties to invoked on endpoint (other components do it that way), is it correct now?", "author": "JiriOndrusek", "createdAt": "2020-04-02T12:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "5dba43891e0bdf805c4e065d68bddb0803a83830", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\nindex 87a99413a50..d4492d6b8d2 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\n", "chunk": "@@ -32,16 +32,18 @@ public class TikaComponent extends DefaultComponent {\n     @Override\n     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n         TikaConfiguration tikaConfiguration = new TikaConfiguration();\n-        setProperties(tikaConfiguration, parameters);\n+\n         TikaConfig config = resolveAndRemoveReferenceParameter(parameters, TIKA_CONFIG, TikaConfig.class);\n         if (config != null) {\n             tikaConfiguration.setTikaConfig(config);\n         }\n         tikaConfiguration.setOperation(new URI(uri).getHost());\n-        return createEndpoint(uri, tikaConfiguration);\n+        TikaEndpoint endpoint = createEndpoint(uri, tikaConfiguration);\n+        setProperties(endpoint, parameters);\n+        return endpoint;\n     }\n \n-    protected Endpoint createEndpoint(String uri, TikaConfiguration tikaConfiguration) {\n+    protected TikaEndpoint createEndpoint(String uri, TikaConfiguration tikaConfiguration) {\n         return new TikaEndpoint(uri, this, tikaConfiguration);\n     }\n }\n", "next_change": {"commit": "4ea9e6c357371682b855d2d79655b41120331b7a", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\nindex d4492d6b8d2..480b6758273 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaComponent.java\n", "chunk": "@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.component.tika;\n-\n-import java.net.URI;\n-import java.util.Map;\n-\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.spi.annotations.Component;\n-import org.apache.camel.support.DefaultComponent;\n-import org.apache.tika.config.TikaConfig;\n-\n-@Component(\"tika\")\n-public class TikaComponent extends DefaultComponent {\n-\n-    private static final String TIKA_CONFIG = \"tikaConfig\";\n-\n-    @Override\n-    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n-        TikaConfiguration tikaConfiguration = new TikaConfiguration();\n-\n-        TikaConfig config = resolveAndRemoveReferenceParameter(parameters, TIKA_CONFIG, TikaConfig.class);\n-        if (config != null) {\n-            tikaConfiguration.setTikaConfig(config);\n-        }\n-        tikaConfiguration.setOperation(new URI(uri).getHost());\n-        TikaEndpoint endpoint = createEndpoint(uri, tikaConfiguration);\n-        setProperties(endpoint, parameters);\n-        return endpoint;\n-    }\n-\n-    protected TikaEndpoint createEndpoint(String uri, TikaConfiguration tikaConfiguration) {\n-        return new TikaEndpoint(uri, this, tikaConfiguration);\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.tika;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.tika.config.TikaConfig;\n+\n+@Component(\"tika\")\n+public class TikaComponent extends DefaultComponent {\n+\n+    private static final String TIKA_CONFIG = \"tikaConfig\";\n+\n+    @Override\n+    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n+        TikaConfiguration tikaConfiguration = new TikaConfiguration();\n+\n+        TikaConfig config = resolveAndRemoveReferenceParameter(parameters, TIKA_CONFIG, TikaConfig.class);\n+        if (config != null) {\n+            tikaConfiguration.setTikaConfig(config);\n+        }\n+        tikaConfiguration.setOperation(new URI(uri).getHost());\n+        TikaEndpoint endpoint = createEndpoint(uri, tikaConfiguration);\n+        setProperties(endpoint, parameters);\n+        return endpoint;\n+    }\n+\n+    protected TikaEndpoint createEndpoint(String uri, TikaConfiguration tikaConfiguration) {\n+        return new TikaEndpoint(uri, this, tikaConfiguration);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQ3Mw==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402269473", "body": "It seams to be a related to IDE, but looks like we don't need **this** for all fields.", "bodyText": "It seams to be a related to IDE, but looks like we don't need this for all fields.", "bodyHTML": "<p dir=\"auto\">It seams to be a related to IDE, but looks like we don't need <strong>this</strong> for all fields.</p>", "author": "dmvolod", "createdAt": "2020-04-02T12:21:20Z", "path": "components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java", "diffHunk": "@@ -59,12 +59,24 @@\n     private final String encoding;\r\n \r\n     public TikaProducer(TikaEndpoint endpoint) {\r\n+        this(endpoint, true, null);\r\n+    }\r\n+\r\n+    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\r\n+        this(endpoint, parser == null, parser);\r\n+    }\r\n+\r\n+    private TikaProducer(TikaEndpoint endpoint, boolean autodetectParser, Parser parser) {\r\n         super(endpoint);\r\n         this.tikaConfiguration = endpoint.getTikaConfiguration();\r\n         this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\r\n         TikaConfig config = this.tikaConfiguration.getTikaConfig();\r\n-        this.parser = new AutoDetectParser(config);\r\n         this.detector = config.getDetector();\r", "originalCommit": "225528a48bd20af13a258c831e75848f408d16c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MjYzOQ==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402292639", "bodyText": "@dmvolod  yes, 'this.' prefixes are not required. From my point of view it helps to orientate in the code, developer immediately know, that these fields are on 'this' instance. It also helps in future, if someone adds a new parameter with the same name, it could prevent issue with initialization of the bad property.\nBut I have no problem with removal of 'this' on all fields (I haven't changed that) should I remove it?", "author": "JiriOndrusek", "createdAt": "2020-04-02T12:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5dba43891e0bdf805c4e065d68bddb0803a83830", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex b58f80c03d9..09177dee9a5 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -59,20 +59,16 @@ public class TikaProducer extends DefaultProducer {\n     private final String encoding;\n \n     public TikaProducer(TikaEndpoint endpoint) {\n-        this(endpoint, true, null);\n+        this(endpoint,  null);\n     }\n \n     public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n-        this(endpoint, parser == null, parser);\n-    }\n-\n-    private TikaProducer(TikaEndpoint endpoint, boolean autodetectParser, Parser parser) {\n         super(endpoint);\n         this.tikaConfiguration = endpoint.getTikaConfiguration();\n         this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n         TikaConfig config = this.tikaConfiguration.getTikaConfig();\n         this.detector = config.getDetector();\n-        if (autodetectParser) {\n+        if (parser == null) {\n             this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n         } else {\n             this.parser = parser;\n", "next_change": {"commit": "4ea9e6c357371682b855d2d79655b41120331b7a", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex 09177dee9a5..a5d190637d4 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -1,171 +1,173 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.component.tika;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.UnsupportedEncodingException;\n-\n-import javax.xml.XMLConstants;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.sax.SAXTransformerFactory;\n-import javax.xml.transform.sax.TransformerHandler;\n-import javax.xml.transform.stream.StreamResult;\n-\n-import org.xml.sax.ContentHandler;\n-import org.xml.sax.SAXException;\n-\n-import org.apache.camel.Exchange;\n-import org.apache.camel.support.DefaultProducer;\n-import org.apache.tika.config.TikaConfig;\n-import org.apache.tika.detect.Detector;\n-import org.apache.tika.exception.TikaException;\n-import org.apache.tika.metadata.Metadata;\n-import org.apache.tika.mime.MediaType;\n-import org.apache.tika.parser.AutoDetectParser;\n-import org.apache.tika.parser.ParseContext;\n-import org.apache.tika.parser.Parser;\n-import org.apache.tika.parser.html.BoilerpipeContentHandler;\n-import org.apache.tika.sax.BodyContentHandler;\n-import org.apache.tika.sax.ExpandedTitleContentHandler;\n-\n-public class TikaProducer extends DefaultProducer {\n-\n-    private final TikaConfiguration tikaConfiguration;\n-\n-    private final Parser parser;\n-\n-    private final Detector detector;\n-\n-    private final String encoding;\n-\n-    public TikaProducer(TikaEndpoint endpoint) {\n-        this(endpoint,  null);\n-    }\n-\n-    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n-        super(endpoint);\n-        this.tikaConfiguration = endpoint.getTikaConfiguration();\n-        this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n-        TikaConfig config = this.tikaConfiguration.getTikaConfig();\n-        this.detector = config.getDetector();\n-        if (parser == null) {\n-            this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n-        } else {\n-            this.parser = parser;\n-        }\n-    }\n-\n-    @Override\n-    public void process(Exchange exchange) throws Exception {\n-        TikaOperation operation = this.tikaConfiguration.getOperation();\n-        Object result;\n-        switch (operation) {\n-            case detect:\n-                result = doDetect(exchange);\n-                break;\n-            case parse:\n-                result = doParse(exchange);\n-                break;\n-            default:\n-                throw new IllegalArgumentException(String.format(\"Unknown operation %s\", tikaConfiguration.getOperation()));\n-        }\n-        // propagate headers\n-        exchange.getOut().setHeaders(exchange.getIn().getHeaders());\n-        // and set result\n-        exchange.getOut().setBody(result);\n-    }\n-\n-    private Object doDetect(Exchange exchange) throws IOException {\n-        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n-        Metadata metadata = new Metadata();\n-        MediaType result = this.detector.detect(inputStream, metadata);\n-        convertMetadataToHeaders(metadata, exchange);\n-        return result.toString();\n-    }\n-\n-    private Object doParse(Exchange exchange)\n-            throws TikaException, IOException, SAXException, TransformerConfigurationException {\n-        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n-        OutputStream result = new ByteArrayOutputStream();\n-        ContentHandler contentHandler = getContentHandler(this.tikaConfiguration, result);\n-        ParseContext context = new ParseContext();\n-        context.set(Parser.class, this.parser);\n-        Metadata metadata = new Metadata();\n-        this.parser.parse(inputStream, contentHandler, metadata, context);\n-        convertMetadataToHeaders(metadata, exchange);\n-        return result;\n-    }\n-\n-    private void convertMetadataToHeaders(Metadata metadata, Exchange exchange) {\n-        if (metadata != null) {\n-            for (String metaname : metadata.names()) {\n-                String[] values = metadata.getValues(metaname);\n-                if (values.length == 1) {\n-                    exchange.getIn().setHeader(metaname, values[0]);\n-                } else {\n-                    exchange.getIn().setHeader(metaname, values);\n-                }\n-            }\n-        }\n-    }\n-\n-    private ContentHandler getContentHandler(TikaConfiguration configuration, OutputStream outputStream)\n-            throws TransformerConfigurationException, UnsupportedEncodingException {\n-\n-        ContentHandler result = null;\n-\n-        TikaParseOutputFormat outputFormat = configuration.getTikaParseOutputFormat();\n-        switch (outputFormat) {\n-            case xml:\n-                result = getTransformerHandler(outputStream, \"xml\", true);\n-                break;\n-            case text:\n-                result = new BodyContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n-                break;\n-            case textMain:\n-                result = new BoilerpipeContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n-                break;\n-            case html:\n-                result = new ExpandedTitleContentHandler(getTransformerHandler(outputStream, \"html\", true));\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\n-                        String.format(\"Unknown format %s\", tikaConfiguration.getTikaParseOutputFormat()));\n-        }\n-        return result;\n-    }\n-\n-    private TransformerHandler getTransformerHandler(OutputStream output, String method,\n-                                                     boolean prettyPrint) throws TransformerConfigurationException, UnsupportedEncodingException {\n-        SAXTransformerFactory factory = (SAXTransformerFactory) TransformerFactory.newInstance();\n-        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n-        TransformerHandler handler = factory.newTransformerHandler();\n-        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method);\n-        handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n-        if (this.encoding != null) {\n-            handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n-        }\n-        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n-        return handler;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.tika;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.UnsupportedEncodingException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.detect.Detector;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.AutoDetectParser;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+import org.apache.tika.parser.html.BoilerpipeContentHandler;\n+import org.apache.tika.sax.BodyContentHandler;\n+import org.apache.tika.sax.ExpandedTitleContentHandler;\n+\n+public class TikaProducer extends DefaultProducer {\n+\n+    private final TikaConfiguration tikaConfiguration;\n+\n+    private final Parser parser;\n+\n+    private final Detector detector;\n+\n+    private final String encoding;\n+\n+    public TikaProducer(TikaEndpoint endpoint) {\n+        this(endpoint, null);\n+    }\n+\n+    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n+        super(endpoint);\n+        this.tikaConfiguration = endpoint.getTikaConfiguration();\n+        this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n+        TikaConfig config = this.tikaConfiguration.getTikaConfig();\n+        this.detector = config.getDetector();\n+        if (parser == null) {\n+            this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n+        } else {\n+            this.parser = parser;\n+        }\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        TikaOperation operation = this.tikaConfiguration.getOperation();\n+        Object result;\n+        switch (operation) {\n+            case detect:\n+                result = doDetect(exchange);\n+                break;\n+            case parse:\n+                result = doParse(exchange);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(String.format(\"Unknown operation %s\", tikaConfiguration.getOperation()));\n+        }\n+        // propagate headers\n+        exchange.getOut().setHeaders(exchange.getIn().getHeaders());\n+        // and set result\n+        exchange.getOut().setBody(result);\n+    }\n+\n+    private Object doDetect(Exchange exchange) throws IOException {\n+        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n+        Metadata metadata = new Metadata();\n+        MediaType result = this.detector.detect(inputStream, metadata);\n+        convertMetadataToHeaders(metadata, exchange);\n+        return result.toString();\n+    }\n+\n+    private Object doParse(Exchange exchange)\n+            throws TikaException, IOException, SAXException, TransformerConfigurationException {\n+        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n+        OutputStream result = new ByteArrayOutputStream();\n+        ContentHandler contentHandler = getContentHandler(this.tikaConfiguration, result);\n+        ParseContext context = new ParseContext();\n+        context.set(Parser.class, this.parser);\n+        Metadata metadata = new Metadata();\n+        this.parser.parse(inputStream, contentHandler, metadata, context);\n+        convertMetadataToHeaders(metadata, exchange);\n+        return result;\n+    }\n+\n+    private void convertMetadataToHeaders(Metadata metadata, Exchange exchange) {\n+        if (metadata != null) {\n+            for (String metaname : metadata.names()) {\n+                String[] values = metadata.getValues(metaname);\n+                if (values.length == 1) {\n+                    exchange.getIn().setHeader(metaname, values[0]);\n+                } else {\n+                    exchange.getIn().setHeader(metaname, values);\n+                }\n+            }\n+        }\n+    }\n+\n+    private ContentHandler getContentHandler(TikaConfiguration configuration, OutputStream outputStream)\n+            throws TransformerConfigurationException, UnsupportedEncodingException {\n+\n+        ContentHandler result = null;\n+\n+        TikaParseOutputFormat outputFormat = configuration.getTikaParseOutputFormat();\n+        switch (outputFormat) {\n+            case xml:\n+                result = getTransformerHandler(outputStream, \"xml\", true);\n+                break;\n+            case text:\n+                result = new BodyContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n+                break;\n+            case textMain:\n+                result = new BoilerpipeContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n+                break;\n+            case html:\n+                result = new ExpandedTitleContentHandler(getTransformerHandler(outputStream, \"html\", true));\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\n+                        String.format(\"Unknown format %s\", tikaConfiguration.getTikaParseOutputFormat()));\n+        }\n+        return result;\n+    }\n+\n+    private TransformerHandler getTransformerHandler(\n+            OutputStream output, String method,\n+            boolean prettyPrint)\n+            throws TransformerConfigurationException, UnsupportedEncodingException {\n+        SAXTransformerFactory factory = (SAXTransformerFactory) TransformerFactory.newInstance();\n+        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n+        TransformerHandler handler = factory.newTransformerHandler();\n+        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method);\n+        handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n+        if (this.encoding != null) {\n+            handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n+        }\n+        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+        return handler;\n+    }\n+}\n", "next_change": {"commit": "abefdfd9cb3366057eb2020c6b1404016e19015f", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex a5d190637d4..91697091b8c 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -166,8 +174,12 @@ public class TikaProducer extends DefaultProducer {\n         handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n         if (this.encoding != null) {\n             handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n+            handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+        } else {\n+            LOG.error(\"encoding is null\");\n+            return null;\n         }\n-        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+\n         return handler;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "72147d76e96908c2cd3e9992c1518c294a31ee65", "url": "https://github.com/apache/camel/commit/72147d76e96908c2cd3e9992c1518c294a31ee65", "message": "CAMEL-14833 camel-tika: enhance TikaProducer to use different tika parser instead of AutodetectParse", "committedDate": "2020-04-02T12:52:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwNjQ0MQ==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402306441", "body": "I think you can replace `autodetectParser` with `parser == null` and eliminate the three-args constructor.", "bodyText": "I think you can replace autodetectParser with parser == null and eliminate the three-args constructor.", "bodyHTML": "<p dir=\"auto\">I think you can replace <code>autodetectParser</code> with <code>parser == null</code> and eliminate the three-args constructor.</p>", "author": "ppalaga", "createdAt": "2020-04-02T13:20:36Z", "path": "components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java", "diffHunk": "@@ -59,12 +59,24 @@\n     private final String encoding;\r\n \r\n     public TikaProducer(TikaEndpoint endpoint) {\r\n+        this(endpoint, true, null);\r\n+    }\r\n+\r\n+    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\r\n+        this(endpoint, parser == null, parser);\r\n+    }\r\n+\r\n+    private TikaProducer(TikaEndpoint endpoint, boolean autodetectParser, Parser parser) {\r\n         super(endpoint);\r\n         this.tikaConfiguration = endpoint.getTikaConfiguration();\r\n         this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\r\n         TikaConfig config = this.tikaConfiguration.getTikaConfig();\r\n-        this.parser = new AutoDetectParser(config);\r\n         this.detector = config.getDetector();\r\n+        if (autodetectParser) {\r", "originalCommit": "72147d76e96908c2cd3e9992c1518c294a31ee65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxMDU0Ng==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402310546", "bodyText": "@ppalaga Unfortunately I can not do that, it will cause conflict with existing public constructor (https://github.com/apache/camel/pull/3705/files#diff-1383e03de9c8ef89d7546ab133b8801cR65). The only reason of having 3 args constructor is to keep property 'this.parser' final.", "author": "JiriOndrusek", "createdAt": "2020-04-02T13:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwNjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxMTg3Mg==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402311872", "bodyText": "I'll missed a small detail, I'll fix it in that way", "author": "JiriOndrusek", "createdAt": "2020-04-02T13:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwNjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxNTM4NQ==", "url": "https://github.com/apache/camel/pull/3705#discussion_r402315385", "bodyText": "@ppalaga thanks for pointing this out. (I've over-combined so easy thing). It's changed now.", "author": "JiriOndrusek", "createdAt": "2020-04-02T13:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwNjQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5dba43891e0bdf805c4e065d68bddb0803a83830", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex b58f80c03d9..09177dee9a5 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -59,20 +59,16 @@ public class TikaProducer extends DefaultProducer {\n     private final String encoding;\n \n     public TikaProducer(TikaEndpoint endpoint) {\n-        this(endpoint, true, null);\n+        this(endpoint,  null);\n     }\n \n     public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n-        this(endpoint, parser == null, parser);\n-    }\n-\n-    private TikaProducer(TikaEndpoint endpoint, boolean autodetectParser, Parser parser) {\n         super(endpoint);\n         this.tikaConfiguration = endpoint.getTikaConfiguration();\n         this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n         TikaConfig config = this.tikaConfiguration.getTikaConfig();\n         this.detector = config.getDetector();\n-        if (autodetectParser) {\n+        if (parser == null) {\n             this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n         } else {\n             this.parser = parser;\n", "next_change": {"commit": "4ea9e6c357371682b855d2d79655b41120331b7a", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex 09177dee9a5..a5d190637d4 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -1,171 +1,173 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.component.tika;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.UnsupportedEncodingException;\n-\n-import javax.xml.XMLConstants;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.sax.SAXTransformerFactory;\n-import javax.xml.transform.sax.TransformerHandler;\n-import javax.xml.transform.stream.StreamResult;\n-\n-import org.xml.sax.ContentHandler;\n-import org.xml.sax.SAXException;\n-\n-import org.apache.camel.Exchange;\n-import org.apache.camel.support.DefaultProducer;\n-import org.apache.tika.config.TikaConfig;\n-import org.apache.tika.detect.Detector;\n-import org.apache.tika.exception.TikaException;\n-import org.apache.tika.metadata.Metadata;\n-import org.apache.tika.mime.MediaType;\n-import org.apache.tika.parser.AutoDetectParser;\n-import org.apache.tika.parser.ParseContext;\n-import org.apache.tika.parser.Parser;\n-import org.apache.tika.parser.html.BoilerpipeContentHandler;\n-import org.apache.tika.sax.BodyContentHandler;\n-import org.apache.tika.sax.ExpandedTitleContentHandler;\n-\n-public class TikaProducer extends DefaultProducer {\n-\n-    private final TikaConfiguration tikaConfiguration;\n-\n-    private final Parser parser;\n-\n-    private final Detector detector;\n-\n-    private final String encoding;\n-\n-    public TikaProducer(TikaEndpoint endpoint) {\n-        this(endpoint,  null);\n-    }\n-\n-    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n-        super(endpoint);\n-        this.tikaConfiguration = endpoint.getTikaConfiguration();\n-        this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n-        TikaConfig config = this.tikaConfiguration.getTikaConfig();\n-        this.detector = config.getDetector();\n-        if (parser == null) {\n-            this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n-        } else {\n-            this.parser = parser;\n-        }\n-    }\n-\n-    @Override\n-    public void process(Exchange exchange) throws Exception {\n-        TikaOperation operation = this.tikaConfiguration.getOperation();\n-        Object result;\n-        switch (operation) {\n-            case detect:\n-                result = doDetect(exchange);\n-                break;\n-            case parse:\n-                result = doParse(exchange);\n-                break;\n-            default:\n-                throw new IllegalArgumentException(String.format(\"Unknown operation %s\", tikaConfiguration.getOperation()));\n-        }\n-        // propagate headers\n-        exchange.getOut().setHeaders(exchange.getIn().getHeaders());\n-        // and set result\n-        exchange.getOut().setBody(result);\n-    }\n-\n-    private Object doDetect(Exchange exchange) throws IOException {\n-        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n-        Metadata metadata = new Metadata();\n-        MediaType result = this.detector.detect(inputStream, metadata);\n-        convertMetadataToHeaders(metadata, exchange);\n-        return result.toString();\n-    }\n-\n-    private Object doParse(Exchange exchange)\n-            throws TikaException, IOException, SAXException, TransformerConfigurationException {\n-        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n-        OutputStream result = new ByteArrayOutputStream();\n-        ContentHandler contentHandler = getContentHandler(this.tikaConfiguration, result);\n-        ParseContext context = new ParseContext();\n-        context.set(Parser.class, this.parser);\n-        Metadata metadata = new Metadata();\n-        this.parser.parse(inputStream, contentHandler, metadata, context);\n-        convertMetadataToHeaders(metadata, exchange);\n-        return result;\n-    }\n-\n-    private void convertMetadataToHeaders(Metadata metadata, Exchange exchange) {\n-        if (metadata != null) {\n-            for (String metaname : metadata.names()) {\n-                String[] values = metadata.getValues(metaname);\n-                if (values.length == 1) {\n-                    exchange.getIn().setHeader(metaname, values[0]);\n-                } else {\n-                    exchange.getIn().setHeader(metaname, values);\n-                }\n-            }\n-        }\n-    }\n-\n-    private ContentHandler getContentHandler(TikaConfiguration configuration, OutputStream outputStream)\n-            throws TransformerConfigurationException, UnsupportedEncodingException {\n-\n-        ContentHandler result = null;\n-\n-        TikaParseOutputFormat outputFormat = configuration.getTikaParseOutputFormat();\n-        switch (outputFormat) {\n-            case xml:\n-                result = getTransformerHandler(outputStream, \"xml\", true);\n-                break;\n-            case text:\n-                result = new BodyContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n-                break;\n-            case textMain:\n-                result = new BoilerpipeContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n-                break;\n-            case html:\n-                result = new ExpandedTitleContentHandler(getTransformerHandler(outputStream, \"html\", true));\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\n-                        String.format(\"Unknown format %s\", tikaConfiguration.getTikaParseOutputFormat()));\n-        }\n-        return result;\n-    }\n-\n-    private TransformerHandler getTransformerHandler(OutputStream output, String method,\n-                                                     boolean prettyPrint) throws TransformerConfigurationException, UnsupportedEncodingException {\n-        SAXTransformerFactory factory = (SAXTransformerFactory) TransformerFactory.newInstance();\n-        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n-        TransformerHandler handler = factory.newTransformerHandler();\n-        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method);\n-        handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n-        if (this.encoding != null) {\n-            handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n-        }\n-        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n-        return handler;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.tika;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.UnsupportedEncodingException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.detect.Detector;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.AutoDetectParser;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+import org.apache.tika.parser.html.BoilerpipeContentHandler;\n+import org.apache.tika.sax.BodyContentHandler;\n+import org.apache.tika.sax.ExpandedTitleContentHandler;\n+\n+public class TikaProducer extends DefaultProducer {\n+\n+    private final TikaConfiguration tikaConfiguration;\n+\n+    private final Parser parser;\n+\n+    private final Detector detector;\n+\n+    private final String encoding;\n+\n+    public TikaProducer(TikaEndpoint endpoint) {\n+        this(endpoint, null);\n+    }\n+\n+    public TikaProducer(TikaEndpoint endpoint, Parser parser) {\n+        super(endpoint);\n+        this.tikaConfiguration = endpoint.getTikaConfiguration();\n+        this.encoding = this.tikaConfiguration.getTikaParseOutputEncoding();\n+        TikaConfig config = this.tikaConfiguration.getTikaConfig();\n+        this.detector = config.getDetector();\n+        if (parser == null) {\n+            this.parser = new AutoDetectParser(this.tikaConfiguration.getTikaConfig());\n+        } else {\n+            this.parser = parser;\n+        }\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        TikaOperation operation = this.tikaConfiguration.getOperation();\n+        Object result;\n+        switch (operation) {\n+            case detect:\n+                result = doDetect(exchange);\n+                break;\n+            case parse:\n+                result = doParse(exchange);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(String.format(\"Unknown operation %s\", tikaConfiguration.getOperation()));\n+        }\n+        // propagate headers\n+        exchange.getOut().setHeaders(exchange.getIn().getHeaders());\n+        // and set result\n+        exchange.getOut().setBody(result);\n+    }\n+\n+    private Object doDetect(Exchange exchange) throws IOException {\n+        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n+        Metadata metadata = new Metadata();\n+        MediaType result = this.detector.detect(inputStream, metadata);\n+        convertMetadataToHeaders(metadata, exchange);\n+        return result.toString();\n+    }\n+\n+    private Object doParse(Exchange exchange)\n+            throws TikaException, IOException, SAXException, TransformerConfigurationException {\n+        InputStream inputStream = exchange.getIn().getBody(InputStream.class);\n+        OutputStream result = new ByteArrayOutputStream();\n+        ContentHandler contentHandler = getContentHandler(this.tikaConfiguration, result);\n+        ParseContext context = new ParseContext();\n+        context.set(Parser.class, this.parser);\n+        Metadata metadata = new Metadata();\n+        this.parser.parse(inputStream, contentHandler, metadata, context);\n+        convertMetadataToHeaders(metadata, exchange);\n+        return result;\n+    }\n+\n+    private void convertMetadataToHeaders(Metadata metadata, Exchange exchange) {\n+        if (metadata != null) {\n+            for (String metaname : metadata.names()) {\n+                String[] values = metadata.getValues(metaname);\n+                if (values.length == 1) {\n+                    exchange.getIn().setHeader(metaname, values[0]);\n+                } else {\n+                    exchange.getIn().setHeader(metaname, values);\n+                }\n+            }\n+        }\n+    }\n+\n+    private ContentHandler getContentHandler(TikaConfiguration configuration, OutputStream outputStream)\n+            throws TransformerConfigurationException, UnsupportedEncodingException {\n+\n+        ContentHandler result = null;\n+\n+        TikaParseOutputFormat outputFormat = configuration.getTikaParseOutputFormat();\n+        switch (outputFormat) {\n+            case xml:\n+                result = getTransformerHandler(outputStream, \"xml\", true);\n+                break;\n+            case text:\n+                result = new BodyContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n+                break;\n+            case textMain:\n+                result = new BoilerpipeContentHandler(new OutputStreamWriter(outputStream, this.encoding));\n+                break;\n+            case html:\n+                result = new ExpandedTitleContentHandler(getTransformerHandler(outputStream, \"html\", true));\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\n+                        String.format(\"Unknown format %s\", tikaConfiguration.getTikaParseOutputFormat()));\n+        }\n+        return result;\n+    }\n+\n+    private TransformerHandler getTransformerHandler(\n+            OutputStream output, String method,\n+            boolean prettyPrint)\n+            throws TransformerConfigurationException, UnsupportedEncodingException {\n+        SAXTransformerFactory factory = (SAXTransformerFactory) TransformerFactory.newInstance();\n+        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n+        TransformerHandler handler = factory.newTransformerHandler();\n+        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method);\n+        handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n+        if (this.encoding != null) {\n+            handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n+        }\n+        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+        return handler;\n+    }\n+}\n", "next_change": {"commit": "abefdfd9cb3366057eb2020c6b1404016e19015f", "changed_code": [{"header": "diff --git a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\nindex a5d190637d4..91697091b8c 100644\n--- a/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n+++ b/components/camel-tika/src/main/java/org/apache/camel/component/tika/TikaProducer.java\n", "chunk": "@@ -166,8 +174,12 @@ public class TikaProducer extends DefaultProducer {\n         handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? \"yes\" : \"no\");\n         if (this.encoding != null) {\n             handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding);\n+            handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+        } else {\n+            LOG.error(\"encoding is null\");\n+            return null;\n         }\n-        handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding)));\n+\n         return handler;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "bf52a18f9308f6a648dfa8f79831bbe1756aead4", "url": "https://github.com/apache/camel/commit/bf52a18f9308f6a648dfa8f79831bbe1756aead4", "message": "CAMEL-14833 camel-tika: enhance TikaProducer to use different tika parser instead of AutodetectParse", "committedDate": "2020-04-02T13:30:31Z", "type": "commit"}, {"oid": "bf52a18f9308f6a648dfa8f79831bbe1756aead4", "url": "https://github.com/apache/camel/commit/bf52a18f9308f6a648dfa8f79831bbe1756aead4", "message": "CAMEL-14833 camel-tika: enhance TikaProducer to use different tika parser instead of AutodetectParse", "committedDate": "2020-04-02T13:30:31Z", "type": "forcePushed"}]}