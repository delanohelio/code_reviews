{"pr_number": 4356, "pr_title": " [WFCORE-2687] Addition of getCurrentOperationName() and getCurrentOperationParameter(String name) methods", "pr_author": "lvydra", "pr_createdAt": "2020-10-08T08:47:56Z", "pr_url": "https://github.com/wildfly/wildfly-core/pull/4356", "merge_commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "timeline": [{"oid": "a08b093efef315999d6a6e91fc2970734a7fa690", "url": "https://github.com/wildfly/wildfly-core/commit/a08b093efef315999d6a6e91fc2970734a7fa690", "message": " [WFCORE-2687] Methods getCurrentOperationName() and getCurrentOperationParameter(String name) added", "committedDate": "2020-10-08T12:16:42Z", "type": "commit"}, {"oid": "a08b093efef315999d6a6e91fc2970734a7fa690", "url": "https://github.com/wildfly/wildfly-core/commit/a08b093efef315999d6a6e91fc2970734a7fa690", "message": " [WFCORE-2687] Methods getCurrentOperationName() and getCurrentOperationParameter(String name) added", "committedDate": "2020-10-08T12:16:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4NDUyNQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535784525", "body": "@lvydra Please remove 'parameterName.equals(NAME) 'from this. My apologies; I should not have listed 'name' as an invalid key in the JIRA description. I've corrected the JIRA description.", "bodyText": "@lvydra Please remove 'parameterName.equals(NAME) 'from this. My apologies; I should not have listed 'name' as an invalid key in the JIRA description. I've corrected the JIRA description.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lvydra/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lvydra\">@lvydra</a> Please remove 'parameterName.equals(NAME) 'from this. My apologies; I should not have listed 'name' as an invalid key in the JIRA description. I've corrected the JIRA description.</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:13:38Z", "path": "controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java", "diffHunk": "@@ -541,6 +541,41 @@ public final String getCurrentAddressValue() {\n         return pa.getLastElement().getValue();\n     }\n \n+    @Override\n+    public final ModelNode getCurrentOperationName() {\n+        assert activeStep != null;\n+        ModelNode operation = activeStep.operation;\n+\n+        assert operation != null;\n+        return operation.get(NAME);\n+    }\n+\n+    @Override\n+    public final ModelNode getCurrentOperationParameter(final String parameterName) {\n+        return getCurrentOperationParameter(parameterName, true);\n+    }\n+\n+    @Override\n+    public final ModelNode getCurrentOperationParameter(final String parameterName, boolean nullable) {\n+        if (isLegalParameterName(parameterName)) {\n+            assert activeStep != null;\n+            ModelNode operation = activeStep.operation;\n+\n+            assert operation != null;\n+            if (!operation.has(parameterName) && nullable) {\n+                return null;\n+            } else {\n+                return operation.get(parameterName);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));\n+        }\n+    }\n+\n+    private boolean isLegalParameterName(final String parameterName) {\n+        return !(parameterName.equals(NAME) || parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\nindex e1a3440283..1667da3a5b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n", "chunk": "@@ -568,12 +568,12 @@ abstract class AbstractOperationContext implements OperationContext {\n                 return operation.get(parameterName);\n             }\n         } else {\n-            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));\n+            throw ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName);\n         }\n     }\n \n     private boolean isLegalParameterName(final String parameterName) {\n-        return !(parameterName.equals(NAME) || parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n+        return !(parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\nindex e1a3440283..1667da3a5b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n", "chunk": "@@ -568,12 +568,12 @@ abstract class AbstractOperationContext implements OperationContext {\n                 return operation.get(parameterName);\n             }\n         } else {\n-            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));\n+            throw ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName);\n         }\n     }\n \n     private boolean isLegalParameterName(final String parameterName) {\n-        return !(parameterName.equals(NAME) || parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n+        return !(parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "b0fd3c25634efb733013e8ffe1784aeaed1157e2", "committedDate": "2021-03-01 11:15:37 +0000", "message": "[WFCORE-4827] Defer rollback on SVH failure to allow full missing services report"}, {"oid": "bbc831bde1c3cac3c3304f7d4ac7b300ff6214f1", "committedDate": "2021-05-23 15:55:02 -0500", "message": "[WFCORE-5368] Specifically track operations considered to be part of boot"}, {"oid": "681af229bfdd1093675a105f0d05212b656092e5", "committedDate": "2021-07-18 19:25:09 +0200", "message": "[WFCORE-5504] Check emptiness with Collection.isEmpty() (Controller)"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}, {"oid": "b6721a486865420a371f4509b29e043649bd5abf", "committedDate": "2021-10-05 10:27:10 +0200", "message": "[WFCORE-5609]\u00a0Fix AbstractOperationContext#getCurrentOperationName()"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4NjUzNQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535786535", "body": "The return type here should be IllegalArgumentException, as that is what you intend to throw.", "bodyText": "The return type here should be IllegalArgumentException, as that is what you intend to throw.", "bodyHTML": "<p dir=\"auto\">The return type here should be IllegalArgumentException, as that is what you intend to throw.</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:19:25Z", "path": "controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java", "diffHunk": "@@ -3629,4 +3629,7 @@ OperationFailedRuntimeException capabilityAlreadyRegisteredInContext(String capa\n \n     @Message(id = 476, value = \"Value for attribute '%s' is invalid: either '%s' must be specified on its own or '%s' needs to be specified with at least one of '%s' or '%s'\")\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n+\n+    @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n+    OperationFailedException invalidParameterName(String parameterName);", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 37e3d19352..fa2b552758 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3631,5 +3631,5 @@ public interface ControllerLogger extends BasicLogger {\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n \n     @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n-    OperationFailedException invalidParameterName(String parameterName);\n+    IllegalArgumentException invalidParameterName(String parameterName);\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 37e3d19352..fa2b552758 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3631,5 +3631,5 @@ public interface ControllerLogger extends BasicLogger {\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n \n     @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n-    OperationFailedException invalidParameterName(String parameterName);\n+    IllegalArgumentException invalidParameterName(String parameterName);\n }\n", "next_change": {"commit": "9cf0df1c5f9b126ace28e1ed752340fc466658df", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex fa2b552758..8dd4506825 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3632,4 +3632,8 @@ public interface ControllerLogger extends BasicLogger {\n \n     @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n     IllegalArgumentException invalidParameterName(String parameterName);\n+\n+    @Message(id = 478, value = \"Unable to create command based CredentialSource for credential reference.\")\n+    OperationFailedException unableToBuildCommandCredentialSource(@Cause Throwable throwable);\n+\n }\n", "next_change": {"commit": "9f62b0498dc28ce49a0e658ab696815f6011bbb6", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 8dd4506825..077b34c85d 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3636,4 +3636,13 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 478, value = \"Unable to create command based CredentialSource for credential reference.\")\n     OperationFailedException unableToBuildCommandCredentialSource(@Cause Throwable throwable);\n \n+    @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n+    String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n+\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n+\n+\n+\n+\n }\n", "next_change": {"commit": "ac59c5f65631abcfb9ccce9f868a7a8aa2a5ce49", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 077b34c85d..3fcdd0b320 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,10 +3639,12 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-\n+    @LogMessage(level = WARN)\n+    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n+    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n \n }\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3fcdd0b320..ba10056da4 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,12 +3639,15 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @LogMessage(level = WARN)\n-    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n-    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n \n+    @Message(id = 482, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n+\n+    @Message(id = 483, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n+\n }\n", "next_change": {"commit": "74f4f8fed339734d801dd5cd675277ee9167a279", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex ba10056da4..f1eb1792c9 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3650,4 +3652,6 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 483, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n     OperationFailedException unsupportedCharset(String charset);\n \n+    @Message(id = 484, value = \"Attribute definition of attribute '%s' is null\")\n+    IllegalArgumentException invalidAttributeDefinition(String attributeName);\n }\n", "next_change": {"commit": "52f62b95acb8c9dccacf10a4965f2689a80ba20b", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex f1eb1792c9..bbc403cb92 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3654,4 +3668,46 @@ public interface ControllerLogger extends BasicLogger {\n \n     @Message(id = 484, value = \"Attribute definition of attribute '%s' is null\")\n     IllegalArgumentException invalidAttributeDefinition(String attributeName);\n+\n+    @Message(id = 485, value = \"Error parsing yaml file %s\")\n+    IllegalArgumentException failedToParseYamlConfigurationFile(String path, @Cause Throwable throwable);\n+\n+    @Message(id = 486, value = \"Missing yaml file %s\")\n+    IllegalArgumentException missingYamlFile(String path);\n+\n+    @LogMessage(level = DEBUG)\n+    @Message(id = 487, value = \"It took %s ms to load and parse the yaml files\")\n+    void loadingYamlFiles(long duration);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 488, value = \"No registration found for address %s - Ignoring the subtree\")\n+    void noResourceRegistered(String address);\n+\n+    @Message(id = 489, value = \"Can't undefine attribute %s since there is no resource at %s\")\n+    IllegalArgumentException noResourceForUndefiningAttribute(String attribute, String address);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 490, value = \"You have defined a resource for address %s without any attributes, doing nothing\")\n+    void noAttributeSetForAddress(String address);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 491, value = \"We have an unexpected value %s for address %s and name %s\")\n+    void unexpectedValueForResource(Object value, String address, String name);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 492, value = \"Couldn't find a resource registration for address %s with current registration %s\")\n+    void noResourceRegistered(String address, String registration);\n+\n+    @Message(id = 493, value = \"The attribute %s hasn't a valueType properly defined.\")\n+    UnsupportedOperationException missingListAttributeValueType(String name);\n+\n+    @Message(id = NONE, value = \"While constructing a mapping; %s; expected a mapping for merging, but found %s\")\n+    String errorConstructingYAMLMapping(Mark mark, NodeId node);\n+\n+    /**\n+     * Instructions for the {@link YamlConfigurationExtension#YAML_CONFIG} command line argument.\n+     * @return Instructions for the {@link YamlConfigurationExtension#YAML_CONFIG} command line argument.\n+     */\n+    @Message(id = Message.NONE, value = \"The yaml configuration files for customizing the configuration. Paths can be absolute, relative to the current execution directory or relative to the standalone configuration directory.\")\n+    String argYaml();\n }\n", "next_change": {"commit": "49e0d3ce9ee9be73966ee5cbe5b6427e4e07bf81", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex bbc403cb92..14750d14b3 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3710,4 +3736,7 @@ public interface ControllerLogger extends BasicLogger {\n      */\n     @Message(id = Message.NONE, value = \"The yaml configuration files for customizing the configuration. Paths can be absolute, relative to the current execution directory or relative to the standalone configuration directory.\")\n     String argYaml();\n+\n+    @Message(id = 499, value = \"There is no satisfactory capability '%s' available to resources with capability scope '%s'. This capability is registered at address(es) '%s', and are not accessible to resources with scope '%s'.\")\n+    IllegalStateException noSatisfactoryCapability(String capability, String scopeName, Set<RegistrationPoint> addresses, String scopeNameAgain);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "9cf0df1c5f9b126ace28e1ed752340fc466658df", "committedDate": "2021-02-18 19:38:17 +0000", "message": "[WFCORE-4360] Clean up pending TODO items."}, {"oid": "9f62b0498dc28ce49a0e658ab696815f6011bbb6", "committedDate": "2021-02-22 20:44:55 -0600", "message": "[WFCORE-5303] Don't return improperly resolved expressions when management clients ask for resolution of expressions using secured resolution sources"}, {"oid": "23cbfbce9abf701a323d78b40ee43fee35fd0d13", "committedDate": "2021-03-15 15:37:50 +0000", "message": "[WFCORE-5337] Use INFO level instead of WARN for loging traces when a deprecated extension is in use"}, {"oid": "ac59c5f65631abcfb9ccce9f868a7a8aa2a5ce49", "committedDate": "2021-04-29 15:43:27 +0200", "message": "[WFCORE-5382]: The same Additional Runtime Dependency can be added several times for a single resource definition."}, {"oid": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "committedDate": "2021-06-01 11:34:03 -0400", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials"}, {"oid": "1ad2659bef0e140b06e196f21c34fa65d607f5e0", "committedDate": "2021-06-01 17:47:59 +0100", "message": "[WFCORE-5435] Include WFCORE-5027."}, {"oid": "74f4f8fed339734d801dd5cd675277ee9167a279", "committedDate": "2021-06-11 18:15:47 +0200", "message": "[WFCORE-3467] Require existence of the AttributeDefinition in AbstractWriteAttributeHandler"}, {"oid": "1e4673f82a8a1cb0dc13b477013c09c42e1bbc6b", "committedDate": "2021-07-24 13:49:28 +0200", "message": "[WFCORE-5521] Close Resource (Controller)"}, {"oid": "a211cae9e8efd4b67f44e890b6972a2c14acf176", "committedDate": "2021-11-21 08:06:06 -0600", "message": "[WFCORE-5709][WFCORE-5705] Make ElytronExpressionResolver useful in Stage.MODEL"}, {"oid": "52f62b95acb8c9dccacf10a4965f2689a80ba20b", "committedDate": "2022-01-10 16:43:50 +0100", "message": "[WFCORE-5343]: YAML support for configuration customization."}, {"oid": "e950b7ee51809d374c425be15be2c2079f9f9ba0", "committedDate": "2022-01-17 15:51:07 -0600", "message": "[WFCORE-5490] Properly handle the WFCORE-3501 feature with resolver extension expressions."}, {"oid": "e85b1cd6374fe387acb25ea618f64b51114fb7e4", "committedDate": "2022-05-06 16:18:10 +0100", "message": "[WFCORE-5901] Use fetch-from-domain-controller instead of fetch-from-master for the admin-only-policy"}, {"oid": "240398fcccb2bfb37ff227c33bbfd18207a4e6f5", "committedDate": "2022-05-31 14:33:27 +0530", "message": "[WFCORE-5843] [primary/secondary] Find and replace occurrences in the log messages"}, {"oid": "6c2dd58fa6c5228eac5525076ac1d113c05881aa", "committedDate": "2022-06-01 09:55:25 +0100", "message": "Merge pull request #5016 from moulalis/WFCORE-5843"}, {"oid": "4f098883bd4cdab5dd6acb5c355bf2e0dd4eb382", "committedDate": "2022-06-29 21:11:28 +0530", "message": "WFCORE-5927 Misleading message for embedded server configuration file."}, {"oid": "6fb29f678f7d4836a589a38213a8ed8b6b520dde", "committedDate": "2022-06-30 16:00:57 +0100", "message": "Merge pull request #5115 from RanabirChakraborty/WFCORE-5927"}, {"oid": "b3cfcb741c8ced604d8895de48ec920fc130057d", "committedDate": "2022-09-09 19:49:29 -0400", "message": "[WFCORE-5968] log thread dump upon management timeout"}, {"oid": "bca98656bbbc68a1d6986986958a4736de17467c", "committedDate": "2022-11-29 16:19:06 -0600", "message": "[WFCORE-6133] Remove deprecated transformation methods from SubsystemRegistration and ChainedTransformationDescriptionBuilder."}, {"oid": "49e0d3ce9ee9be73966ee5cbe5b6427e4e07bf81", "committedDate": "2023-02-23 10:30:09 +0100", "message": "[WFCORE-785] Improving capability related error messages"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4NjgyMg==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535786822", "body": "ControllerLogger.ROOT_LOGGER.invalidParameterName should return IllegalArgumentException so you can just throw what it returns without wrapping.", "bodyText": "ControllerLogger.ROOT_LOGGER.invalidParameterName should return IllegalArgumentException so you can just throw what it returns without wrapping.", "bodyHTML": "<p dir=\"auto\">ControllerLogger.ROOT_LOGGER.invalidParameterName should return IllegalArgumentException so you can just throw what it returns without wrapping.</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:20:18Z", "path": "controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java", "diffHunk": "@@ -541,6 +541,41 @@ public final String getCurrentAddressValue() {\n         return pa.getLastElement().getValue();\n     }\n \n+    @Override\n+    public final ModelNode getCurrentOperationName() {\n+        assert activeStep != null;\n+        ModelNode operation = activeStep.operation;\n+\n+        assert operation != null;\n+        return operation.get(NAME);\n+    }\n+\n+    @Override\n+    public final ModelNode getCurrentOperationParameter(final String parameterName) {\n+        return getCurrentOperationParameter(parameterName, true);\n+    }\n+\n+    @Override\n+    public final ModelNode getCurrentOperationParameter(final String parameterName, boolean nullable) {\n+        if (isLegalParameterName(parameterName)) {\n+            assert activeStep != null;\n+            ModelNode operation = activeStep.operation;\n+\n+            assert operation != null;\n+            if (!operation.has(parameterName) && nullable) {\n+                return null;\n+            } else {\n+                return operation.get(parameterName);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\nindex e1a3440283..1667da3a5b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n", "chunk": "@@ -568,12 +568,12 @@ abstract class AbstractOperationContext implements OperationContext {\n                 return operation.get(parameterName);\n             }\n         } else {\n-            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));\n+            throw ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName);\n         }\n     }\n \n     private boolean isLegalParameterName(final String parameterName) {\n-        return !(parameterName.equals(NAME) || parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n+        return !(parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\nindex e1a3440283..1667da3a5b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/AbstractOperationContext.java\n", "chunk": "@@ -568,12 +568,12 @@ abstract class AbstractOperationContext implements OperationContext {\n                 return operation.get(parameterName);\n             }\n         } else {\n-            throw new IllegalArgumentException(ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName));\n+            throw ControllerLogger.ROOT_LOGGER.invalidParameterName(parameterName);\n         }\n     }\n \n     private boolean isLegalParameterName(final String parameterName) {\n-        return !(parameterName.equals(NAME) || parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n+        return !(parameterName.equals(OP) || parameterName.equals(OP_ADDR) || parameterName.equals(OPERATION_HEADERS));\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "b0fd3c25634efb733013e8ffe1784aeaed1157e2", "committedDate": "2021-03-01 11:15:37 +0000", "message": "[WFCORE-4827] Defer rollback on SVH failure to allow full missing services report"}, {"oid": "bbc831bde1c3cac3c3304f7d4ac7b300ff6214f1", "committedDate": "2021-05-23 15:55:02 -0500", "message": "[WFCORE-5368] Specifically track operations considered to be part of boot"}, {"oid": "681af229bfdd1093675a105f0d05212b656092e5", "committedDate": "2021-07-18 19:25:09 +0200", "message": "[WFCORE-5504] Check emptiness with Collection.isEmpty() (Controller)"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}, {"oid": "b6721a486865420a371f4509b29e043649bd5abf", "committedDate": "2021-10-05 10:27:10 +0200", "message": "[WFCORE-5609]\u00a0Fix AbstractOperationContext#getCurrentOperationName()"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4ODQwMg==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535788402", "body": "This should also say 'or {@code null} if the operation has no such parameter'.", "bodyText": "This should also say 'or {@code null} if the operation has no such parameter'.", "bodyHTML": "<p dir=\"auto\">This should also say 'or {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/code/hovercard\" href=\"https://github.com/code\">@code</a> null} if the operation has no such parameter'.</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:25:01Z", "path": "controller/src/main/java/org/jboss/as/controller/OperationContext.java", "diffHunk": "@@ -418,6 +418,30 @@\n      */\n     String getCurrentAddressValue();\n \n+    /**\n+     * Get the node with current operation name\n+     *\n+     * @return operation name node\n+     */\n+    ModelNode getCurrentOperationName();\n+\n+    /**\n+     * Get parameter node by its name\n+     *\n+     * @param name of desired parameter\n+     * @return node for parameter of given name", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "1500daa976698e4c6f2edd0b71b2ff4df93d38c4", "committedDate": "2021-04-09 08:50:07 +0530", "message": "WFCORE-4162 Incorrect OperationContext.getCapabilityServiceName javadoc"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4ODY5Mg==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535788692", "body": "This should return String. The node will always hold a string.", "bodyText": "This should return String. The node will always hold a string.", "bodyHTML": "<p dir=\"auto\">This should return String. The node will always hold a string.</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:25:53Z", "path": "controller/src/main/java/org/jboss/as/controller/OperationContext.java", "diffHunk": "@@ -418,6 +418,30 @@\n      */\n     String getCurrentAddressValue();\n \n+    /**\n+     * Get the node with current operation name\n+     *\n+     * @return operation name node\n+     */\n+    ModelNode getCurrentOperationName();", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "1500daa976698e4c6f2edd0b71b2ff4df93d38c4", "committedDate": "2021-04-09 08:50:07 +0530", "message": "WFCORE-4162 Incorrect OperationContext.getCapabilityServiceName javadoc"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MDg0OA==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535790848", "body": "whether the return value can be null if the operation has no parameter with the given name", "bodyText": "whether the return value can be null if the operation has no parameter with the given name", "bodyHTML": "<p dir=\"auto\">whether the return value can be null if the operation has no parameter with the given name</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:32:19Z", "path": "controller/src/main/java/org/jboss/as/controller/OperationContext.java", "diffHunk": "@@ -418,6 +418,30 @@\n      */\n     String getCurrentAddressValue();\n \n+    /**\n+     * Get the node with current operation name\n+     *\n+     * @return operation name node\n+     */\n+    ModelNode getCurrentOperationName();\n+\n+    /**\n+     * Get parameter node by its name\n+     *\n+     * @param name of desired parameter\n+     * @return node for parameter of given name\n+     */\n+    ModelNode getCurrentOperationParameter(String name);\n+\n+    /**\n+     * Get parameter node by its name\n+     *\n+     * @param name of desired parameter\n+     * @param nullable whether return value can be null", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}, {"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -437,8 +437,8 @@ public interface OperationContext extends ExpressionResolver {\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @param nullable whether return value can be null\n-     * @return node for parameter of given name\n+     * @param nullable whether the return value can be null if the operation has no parameter with the given name\n+     * @return node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name\n      */\n     ModelNode getCurrentOperationParameter(String name, boolean nullable);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -423,13 +423,13 @@ public interface OperationContext extends ExpressionResolver {\n      *\n      * @return operation name node\n      */\n-    ModelNode getCurrentOperationName();\n+    String getCurrentOperationName();\n \n     /**\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @return node for parameter of given name\n+     * @return node for parameter of given name or {@code null} if the operation has no such parameter\n      */\n     ModelNode getCurrentOperationParameter(String name);\n \n", "next_change": null}, {"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -437,8 +437,8 @@ public interface OperationContext extends ExpressionResolver {\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @param nullable whether return value can be null\n-     * @return node for parameter of given name\n+     * @param nullable whether the return value can be null if the operation has no parameter with the given name\n+     * @return node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name\n      */\n     ModelNode getCurrentOperationParameter(String name, boolean nullable);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "1500daa976698e4c6f2edd0b71b2ff4df93d38c4", "committedDate": "2021-04-09 08:50:07 +0530", "message": "WFCORE-4162 Incorrect OperationContext.getCapabilityServiceName javadoc"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MTEwNw==", "url": "https://github.com/wildfly/wildfly-core/pull/4356#discussion_r535791107", "body": "node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name", "bodyText": "node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name", "bodyHTML": "<p dir=\"auto\">node for the parameter of the given name, or {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/code/hovercard\" href=\"https://github.com/code\">@code</a> null} if {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/code/hovercard\" href=\"https://github.com/code\">@code</a> nullable} is {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/code/hovercard\" href=\"https://github.com/code\">@code</a> true} and the operation has no parameter with the given name</p>", "author": "bstansberry", "createdAt": "2020-12-04T02:33:10Z", "path": "controller/src/main/java/org/jboss/as/controller/OperationContext.java", "diffHunk": "@@ -418,6 +418,30 @@\n      */\n     String getCurrentAddressValue();\n \n+    /**\n+     * Get the node with current operation name\n+     *\n+     * @return operation name node\n+     */\n+    ModelNode getCurrentOperationName();\n+\n+    /**\n+     * Get parameter node by its name\n+     *\n+     * @param name of desired parameter\n+     * @return node for parameter of given name\n+     */\n+    ModelNode getCurrentOperationParameter(String name);\n+\n+    /**\n+     * Get parameter node by its name\n+     *\n+     * @param name of desired parameter\n+     * @param nullable whether return value can be null\n+     * @return node for parameter of given name", "originalCommit": "a08b093efef315999d6a6e91fc2970734a7fa690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -437,8 +437,8 @@ public interface OperationContext extends ExpressionResolver {\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @param nullable whether return value can be null\n-     * @return node for parameter of given name\n+     * @param nullable whether the return value can be null if the operation has no parameter with the given name\n+     * @return node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name\n      */\n     ModelNode getCurrentOperationParameter(String name, boolean nullable);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2e531435f74a9ecb87f555b46449bdf439ae7271", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/OperationContext.java b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\nindex 26c0969b8b..9f0696d860 100644\n--- a/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n+++ b/controller/src/main/java/org/jboss/as/controller/OperationContext.java\n", "chunk": "@@ -437,8 +437,8 @@ public interface OperationContext extends ExpressionResolver {\n      * Get parameter node by its name\n      *\n      * @param name of desired parameter\n-     * @param nullable whether return value can be null\n-     * @return node for parameter of given name\n+     * @param nullable whether the return value can be null if the operation has no parameter with the given name\n+     * @return node for the parameter of the given name, or {@code null} if {@code nullable} is {@code true} and the operation has no parameter with the given name\n      */\n     ModelNode getCurrentOperationParameter(String name, boolean nullable);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2e531435f74a9ecb87f555b46449bdf439ae7271", "message": "Merge commit", "committedDate": null}, {"oid": "1500daa976698e4c6f2edd0b71b2ff4df93d38c4", "committedDate": "2021-04-09 08:50:07 +0530", "message": "WFCORE-4162 Incorrect OperationContext.getCapabilityServiceName javadoc"}, {"oid": "8820cdf5361e2d24ba9fd411645d1460754efc0d", "committedDate": "2021-07-30 09:55:31 +0100", "message": "[WFCORE-5526] Update controller module for removed legacy security APIs."}]}, {"oid": "f888b11b27efd4bc108c3efe9295d2a2e3324691", "url": "https://github.com/wildfly/wildfly-core/commit/f888b11b27efd4bc108c3efe9295d2a2e3324691", "message": "[WFCORE-2687] Requested changes", "committedDate": "2020-12-04T12:19:04Z", "type": "commit"}]}