{"pr_number": 928, "pr_title": "Issue #889 - Initial implementation of ServerRegistryResourceProvider", "pr_author": "JohnTimm", "pr_createdAt": "2020-04-14T21:07:54Z", "pr_url": "https://github.com/IBM/FHIR/pull/928", "merge_commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "timeline": [{"oid": "b935e16770f0c3b2c86633642fa0418307d409bf", "url": "https://github.com/IBM/FHIR/commit/b935e16770f0c3b2c86633642fa0418307d409bf", "message": "Issue #889 - Initial implementation of ServerRegistryResourceProvider\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T21:21:57Z", "type": "commit"}, {"oid": "b935e16770f0c3b2c86633642fa0418307d409bf", "url": "https://github.com/IBM/FHIR/commit/b935e16770f0c3b2c86633642fa0418307d409bf", "message": "Issue #889 - Initial implementation of ServerRegistryResourceProvider\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T21:21:57Z", "type": "forcePushed"}, {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "url": "https://github.com/IBM/FHIR/commit/ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "message": "Issue #889 - changed logging from fine to info\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T22:33:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408956935", "body": "please add the corresponding docs to the user's guide", "bodyText": "please add the corresponding docs to the user's guide", "bodyHTML": "<p dir=\"auto\">please add the corresponding docs to the user's guide</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:01:25Z", "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -33,6 +33,7 @@\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n+    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODYyOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408968628", "bodyText": "Added documentation to the user's guide.", "author": "JohnTimm", "createdAt": "2020-04-15T16:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "aaeda25c8a47775003839dfb40c63d7f8f5c71ee", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex ad0e544f6d..c71ba8fa15 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -33,7 +33,6 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n-    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n \n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n", "next_change": {"commit": "17d928b933fc9f89127f62c856190b919d8333fd", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex c71ba8fa15..156d88c7b4 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -33,6 +32,7 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n+    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n \n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n", "next_change": {"commit": "f6751edd844640778e71611f9085267b1ae5566c", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 156d88c7b4..2b21641abb 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -37,8 +37,6 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n     // Auth and security properties\n-    public static final String PROPERTY_TRUSTSTORE_LOCATION = \"fhirServer/core/truststoreLocation\";\n-    public static final String PROPERTY_TRUSTSTORE_PASSWORD = \"fhirServer/core/truststorePassword\";\n     public static final String PROPERTY_OAUTH_REGURL = \"fhirServer/oauth/regUrl\";\n     public static final String PROPERTY_OAUTH_AUTHURL = \"fhirServer/oauth/authUrl\";\n     public static final String PROPERTY_OAUTH_TOKENURL = \"fhirServer/oauth/tokenUrl\";\n", "next_change": {"commit": "3c2aa513c6efb34406b89c2f7ebca5b29b6ff5e5", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 2b21641abb..2a6a923132 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -33,6 +33,7 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n     public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n+    public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n \n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n", "next_change": {"commit": "c20868fe71f7f2e61b5dd98079b35c6be07af4dc", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 2a6a923132..ee69f87bce 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -34,6 +34,7 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n     public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n+    public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConcepValidation\";\n \n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n", "next_change": {"commit": "dfe67c29576749fc72bc12d24eb37bf4d9810ea4", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex ee69f87bce..4407c56798 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -34,7 +34,7 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n     public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n-    public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConcepValidation\";\n+    public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n \n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n", "next_change": {"commit": "cabdc2ffc52df961ca93283570815f37222286f8", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 4407c56798..cc5aa3f22a 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -39,13 +39,19 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n \n     // Auth and security properties\n-    public static final String PROPERTY_OAUTH_REGURL = \"fhirServer/oauth/regUrl\";\n-    public static final String PROPERTY_OAUTH_AUTHURL = \"fhirServer/oauth/authUrl\";\n-    public static final String PROPERTY_OAUTH_TOKENURL = \"fhirServer/oauth/tokenUrl\";\n-\n-    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/authFilter/enabled\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/authFilter/authorizedClientCertClientCN\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/authFilter/authorizedClientCertIssuerOU\";\n+    public static final String PROPERTY_SECURITY_CORS = \"fhirServer/security/cors\";\n+    public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n+    public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n+    public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n+    public static final String PROPERTY_SECURITY_SMART_ENABLED = \"fhirServer/security/smart/enabled\";\n+    public static final String PROPERTY_SECURITY_SMART_REGURL = \"fhirServer/security/smart/regUrl\";\n+    public static final String PROPERTY_SECURITY_SMART_AUTHURL = \"fhirServer/security/smart/authUrl\";\n+    public static final String PROPERTY_SECURITY_SMART_TOKENURL = \"fhirServer/security/smart/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n+\n+    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n \n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n", "next_change": {"commit": "90e59c64d59798b6ace71d9816145431402b51b6", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex cc5aa3f22a..259a3f5a46 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -43,11 +43,11 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n     public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_SMART_ENABLED = \"fhirServer/security/smart/enabled\";\n-    public static final String PROPERTY_SECURITY_SMART_REGURL = \"fhirServer/security/smart/regUrl\";\n-    public static final String PROPERTY_SECURITY_SMART_AUTHURL = \"fhirServer/security/smart/authUrl\";\n-    public static final String PROPERTY_SECURITY_SMART_TOKENURL = \"fhirServer/security/smart/tokenUrl\";\n-    public static final String PROPERTY_SECURITY_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REGURL = \"fhirServer/security/smart/regUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_AUTHURL = \"fhirServer/security/smart/authUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_TOKENURL = \"fhirServer/security/smart/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n \n     public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n     public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n", "next_change": {"commit": "8464da0256da607deaa7a04d921432949f2f69e8", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 259a3f5a46..d2aa3a35d7 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -43,11 +43,15 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n     public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REGURL = \"fhirServer/security/smart/regUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_AUTHURL = \"fhirServer/security/smart/authUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_TOKENURL = \"fhirServer/security/smart/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/smart/regUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/smart/authUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/smart/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/smart/manageUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/smart/introspectUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/smart/revokeUrl\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/smart/scopes\";\n \n     public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n     public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n", "next_change": {"commit": "095513ee1979ef823995b998d656ebf6ad0383d2", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex d2aa3a35d7..96eb6db4c3 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -36,22 +36,27 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n     public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n \n-    public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n+    // Resources properties\n+    public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n+    public static final String PROPERTY_FIELD_RESOURCES_OPEN = \"open\";\n+    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS = \"searchParameters\";\n+    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_URL = \"url\";\n+    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_REQUIRED = \"required\";\n \n     // Auth and security properties\n     public static final String PROPERTY_SECURITY_CORS = \"fhirServer/security/cors\";\n     public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n     public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/smart/regUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/smart/authUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/smart/tokenUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/smart/manageUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/smart/introspectUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/smart/revokeUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/oauth/regUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/oauth/authUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/oauth/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/oauth/manageUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/oauth/introspectUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/oauth/smart/revokeUrl\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n     public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n     public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n", "next_change": {"commit": "01a95d24049168144cbb0445deaa0277617b2e70", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 96eb6db4c3..5b6a623337 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -42,21 +42,21 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS = \"searchParameters\";\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_URL = \"url\";\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_REQUIRED = \"required\";\n-\n+    \n     // Auth and security properties\n     public static final String PROPERTY_SECURITY_CORS = \"fhirServer/security/cors\";\n     public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n     public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/oauth/regUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/oauth/authUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/oauth/tokenUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/oauth/manageUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/oauth/introspectUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/oauth/smart/revokeUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/smart/regUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/smart/authUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/smart/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/smart/manageUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/smart/introspectUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/smart/revokeUrl\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/smart/scopes\";\n \n     public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n     public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n", "next_change": {"commit": "dc560b6085731cc1af3089eb804ed5223d420a0c", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 5b6a623337..c4701f3e31 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -39,24 +39,25 @@ public class FHIRConfiguration {\n     // Resources properties\n     public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n     public static final String PROPERTY_FIELD_RESOURCES_OPEN = \"open\";\n+    public static final String PROPERTY_FIELD_RESOURCES_INTERACTIONS = \"interactions\";\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS = \"searchParameters\";\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_URL = \"url\";\n     public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_REQUIRED = \"required\";\n-    \n+\n     // Auth and security properties\n     public static final String PROPERTY_SECURITY_CORS = \"fhirServer/security/cors\";\n     public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n-    public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/cert/enabled\";\n+    public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/certificates/enabled\";\n     public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/smart/regUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/smart/authUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/smart/tokenUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/smart/manageUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/smart/introspectUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/smart/revokeUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/oauth/regUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/oauth/authUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/oauth/tokenUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/oauth/manageUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/oauth/introspectUrl\";\n+    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/oauth/smart/revokeUrl\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/smart/scopes\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n+    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n     public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n     public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n", "next_change": {"commit": "079e06a4cc9756761726e030b33afe98cb6583f7", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex c4701f3e31..32d3a448c2 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -59,10 +64,6 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n-    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n-\n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n", "next_change": {"commit": "54719a66578918c37ac8f2a2f3380ac4169a88d9", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 32d3a448c2..62ddcb43b5 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -64,6 +64,10 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n+    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n+\n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n", "next_change": {"commit": "0c1ca1263909f36c319aec7973d85985ce1f9852", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 62ddcb43b5..8d124eaf46 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -64,10 +64,6 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n-    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n-\n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n", "next_change": {"commit": "3c5e29548a919f8cc010e9bb7aa2a8b702ee18c4", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 8d124eaf46..ee55924220 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -64,6 +64,10 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n+    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n+    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n+\n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n", "next_change": {"commit": "fc4a70cbf798e77aaf92b6e09769eed9b999e6a7", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex ee55924220..65d100baf1 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -64,10 +64,6 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n     public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n \n-    public static final String PROPERTY_AUTHFILTER_ENABLED = \"fhirServer/security/cert/authFilter/enabled\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_CLIENT_CN = \"fhirServer/security/cert/authFilter/authorizedClientCertClientCN\";\n-    public static final String PROPERTY_AUTHORIZED_CLIENT_CERT_ISSUER_OU = \"fhirServer/security/cert/authFilter/authorizedClientCertIssuerOU\";\n-\n     // Audit config properties\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n", "next_change": {"commit": "a96ea3d45935ca135b2041d0ffed40c2ace9c5ed", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 65d100baf1..216e4419b7 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -68,6 +68,8 @@ public class FHIRConfiguration {\n     public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n     public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n     public static final String PROPERTY_AUDIT_PATIENT_ID_EXTURL = \"fhirServer/audit/patientIdExtensionUrl\";\n+    public static final String PROPERTY_AUDIT_HOSTNAME = \"fhirServer/audit/hostname\";\n+    public static final String PROPERTY_AUDIT_IP = \"fhirServer/audit/ip\";\n \n     // Notification config properties\n     public static final String PROPERTY_NOTIFICATION_RESOURCE_TYPES = \"fhirServer/notifications/common/includeResourceTypes\";\n", "next_change": {"commit": "ab36ed97210223c518c33e434f75a9ca1be73f20", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\nindex 216e4419b7..0366644072 100644\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n", "chunk": "@@ -73,10 +85,13 @@ public class FHIRConfiguration {\n \n     // Notification config properties\n     public static final String PROPERTY_NOTIFICATION_RESOURCE_TYPES = \"fhirServer/notifications/common/includeResourceTypes\";\n+    public static final String PROPERTY_NOTIFICATION_NOTIFICATION_SIZE_BEHAVIOR = \"fhirServer/notifications/common/maxNotificationSizeBehavior\";\n+    public static final String PROPERTY_NOTIFICATION_MAX_SIZE = \"fhirServer/notifications/common/maxNotificationSizeBytes\";\n     public static final String PROPERTY_WEBSOCKET_ENABLED = \"fhirServer/notifications/websocket/enabled\";\n     public static final String PROPERTY_KAFKA_ENABLED = \"fhirServer/notifications/kafka/enabled\";\n     public static final String PROPERTY_KAFKA_TOPICNAME = \"fhirServer/notifications/kafka/topicName\";\n     public static final String PROPERTY_KAFKA_CONNECTIONPROPS = \"fhirServer/notifications/kafka/connectionProperties\";\n+    public static final String PROPERTY_KAFKA_SYNC = \"fhirServer/notifications/kafka/sync\";\n     public static final String PROPERTY_NATS_ENABLED = \"fhirServer/notifications/nats/enabled\";\n     public static final String PROPERTY_NATS_CLUSTER = \"fhirServer/notifications/nats/cluster\";\n     public static final String PROPERTY_NATS_CHANNEL = \"fhirServer/notifications/nats/channel\";\n", "next_change": {"commit": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "changed_code": [{"header": "diff --git a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java b/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\ndeleted file mode 100644\nindex 0366644072..0000000000\n--- a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java\n+++ /dev/null\n", "chunk": "@@ -1,275 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2016, 2021\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.config;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.logging.Logger;\n-\n-/**\n- * This class serves up a singleton instance of ConfigurationService containing the FHIR Server's configuration.\n- */\n-public class FHIRConfiguration {\n-    private static final Logger log = Logger.getLogger(FHIRConfiguration.class.getName());\n-\n-    public static final String CONFIG_LOCATION = \"config\";\n-    public static final String CONFIG_FILE_BASENAME = \"fhir-server-config.json\";\n-    public static final String DEFAULT_TENANT_ID = \"default\";\n-    public static final String DEFAULT_DATASTORE_ID = \"default\";\n-\n-    // Core server properties\n-    public static final String PROPERTY_ORIGINAL_REQUEST_URI_HEADER_NAME = \"fhirServer/core/originalRequestUriHeaderName\";\n-    public static final String PROPERTY_TENANT_ID_HEADER_NAME = \"fhirServer/core/tenantIdHeaderName\";\n-    public static final String PROPERTY_DATASTORE_ID_HEADER_NAME = \"fhirServer/core/datastoreIdHeaderName\";\n-    public static final String PROPERTY_DEFAULT_TENANT_ID = \"fhirServer/core/defaultTenantId\";\n-    public static final String PROPERTY_DEFAULT_PRETTY_PRINT = \"fhirServer/core/defaultPrettyPrint\";\n-    public static final String PROPERTY_DEFAULT_HANDLING = \"fhirServer/core/defaultHandling\";\n-    public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n-    public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n-    public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n-    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";\n-    public static final String PROPERTY_SERVER_RESOLVE_FUNCTION_ENABLED = \"fhirServer/core/serverResolveFunctionEnabled\";\n-    public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n-    public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n-    public static final String PROPERTY_DISABLED_OPERATIONS = \"fhirServer/core/disabledOperations\";\n-    public static final String PROPERTY_DEFAULT_PAGE_SIZE = \"fhirServer/core/defaultPageSize\";\n-    public static final String PROPERTY_MAX_PAGE_SIZE = \"fhirServer/core/maxPageSize\";\n-    public static final String PROPERTY_MAX_PAGE_INCLUDE_COUNT = \"fhirServer/core/maxPageIncludeCount\";\n-    public static final String PROPERTY_CAPABILITIES_URL = \"fhirServer/core/capabilitiesUrl\";\n-\n-    // Terminology service properties\n-    public static final String PROPERTY_TERM_SERVICE_CAPABILITIES_URL = \"fhirServer/term/capabilitiesUrl\";\n-    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED = \"fhirServer/term/graphTermServiceProvider/enabled\";\n-    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT = \"fhirServer/term/graphTermServiceProvider/timeLimit\";\n-    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION = \"fhirServer/term/graphTermServiceProvider/configuration\";\n-\n-    // Resources properties\n-    public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n-    public static final String PROPERTY_FIELD_RESOURCES_OPEN = \"open\";\n-    public static final String PROPERTY_FIELD_RESOURCES_INTERACTIONS = \"interactions\";\n-    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS = \"searchParameters\";\n-    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES = \"searchIncludes\";\n-    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_REV_INCLUDES = \"searchRevIncludes\";\n-    public static final String PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS = \"searchParameterCombinations\";\n-    public static final String PROPERTY_FIELD_RESOURCES_PROFILES = \"profiles\";\n-    public static final String PROPERTY_FIELD_RESOURCES_PROFILES_AT_LEAST_ONE = \"atLeastOne\";\n-    public static final String PROPERTY_USE_STORED_COMPARTMENT_PARAM = \"fhirServer/search/useStoredCompartmentParam\";\n-    public static final String PROPERTY_SEARCH_ENABLE_OPT_QUERY_BUILDER = \"fhirServer/search/enableOptQueryBuilder\";\n-\n-    // Auth and security properties\n-    public static final String PROPERTY_SECURITY_CORS = \"fhirServer/security/cors\";\n-    public static final String PROPERTY_SECURITY_BASIC_ENABLED = \"fhirServer/security/basic/enabled\";\n-    public static final String PROPERTY_SECURITY_CERT_ENABLED = \"fhirServer/security/certificates/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_ENABLED = \"fhirServer/security/oauth/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REG_URL = \"fhirServer/security/oauth/regUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_AUTH_URL = \"fhirServer/security/oauth/authUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_TOKEN_URL = \"fhirServer/security/oauth/tokenUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_MANAGE_URL = \"fhirServer/security/oauth/manageUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_INTROSPECT_URL = \"fhirServer/security/oauth/introspectUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_REVOKE_URL = \"fhirServer/security/oauth/smart/revokeUrl\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_ENABLED = \"fhirServer/security/oauth/smart/enabled\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_SCOPES = \"fhirServer/security/oauth/smart/scopes\";\n-    public static final String PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES = \"fhirServer/security/oauth/smart/capabilities\";\n-\n-    // Audit config properties\n-    public static final String PROPERTY_AUDIT_SERVICE_CLASS_NAME = \"fhirServer/audit/serviceClassName\";\n-    public static final String PROPERTY_AUDIT_SERVICE_PROPERTIES = \"fhirServer/audit/serviceProperties\";\n-    public static final String PROPERTY_AUDIT_PATIENT_ID_EXTURL = \"fhirServer/audit/patientIdExtensionUrl\";\n-    public static final String PROPERTY_AUDIT_HOSTNAME = \"fhirServer/audit/hostname\";\n-    public static final String PROPERTY_AUDIT_IP = \"fhirServer/audit/ip\";\n-\n-    // Notification config properties\n-    public static final String PROPERTY_NOTIFICATION_RESOURCE_TYPES = \"fhirServer/notifications/common/includeResourceTypes\";\n-    public static final String PROPERTY_NOTIFICATION_NOTIFICATION_SIZE_BEHAVIOR = \"fhirServer/notifications/common/maxNotificationSizeBehavior\";\n-    public static final String PROPERTY_NOTIFICATION_MAX_SIZE = \"fhirServer/notifications/common/maxNotificationSizeBytes\";\n-    public static final String PROPERTY_WEBSOCKET_ENABLED = \"fhirServer/notifications/websocket/enabled\";\n-    public static final String PROPERTY_KAFKA_ENABLED = \"fhirServer/notifications/kafka/enabled\";\n-    public static final String PROPERTY_KAFKA_TOPICNAME = \"fhirServer/notifications/kafka/topicName\";\n-    public static final String PROPERTY_KAFKA_CONNECTIONPROPS = \"fhirServer/notifications/kafka/connectionProperties\";\n-    public static final String PROPERTY_KAFKA_SYNC = \"fhirServer/notifications/kafka/sync\";\n-    public static final String PROPERTY_NATS_ENABLED = \"fhirServer/notifications/nats/enabled\";\n-    public static final String PROPERTY_NATS_CLUSTER = \"fhirServer/notifications/nats/cluster\";\n-    public static final String PROPERTY_NATS_CHANNEL = \"fhirServer/notifications/nats/channel\";\n-    public static final String PROPERTY_NATS_CLIENT = \"fhirServer/notifications/nats/client\";\n-    public static final String PROPERTY_NATS_SERVERS = \"fhirServer/notifications/nats/servers\";\n-    public static final String PROPERTY_NATS_TLS_ENABLED = \"fhirServer/notifications/nats/useTLS\";\n-    public static final String PROPERTY_NATS_TRUSTSTORE = \"fhirServer/notifications/nats/truststoreLocation\";\n-    public static final String PROPERTY_NATS_TRUSTSTORE_PW = \"fhirServer/notifications/nats/truststorePassword\";\n-    public static final String PROPERTY_NATS_KEYSTORE = \"fhirServer/notifications/nats/keystoreLocation\";\n-    public static final String PROPERTY_NATS_KEYSTORE_PW = \"fhirServer/notifications/nats/keystorePassword\";\n-\n-    // Persistence layer properties\n-    public static final String PROPERTY_UPDATE_CREATE_ENABLED = \"fhirServer/persistence/common/updateCreateEnabled\";\n-    public static final String PROPERTY_PERSISTENCE_FACTORY = \"fhirServer/persistence/factoryClassname\";\n-    public static final String PROPERTY_DATASOURCES = \"fhirServer/persistence/datasources\";\n-    @Deprecated\n-    public static final String PROPERTY_JDBC_DATASOURCE_JNDINAME = \"fhirServer/persistence/jdbc/dataSourceJndiName\";\n-    @Deprecated\n-    public static final String PROPERTY_JDBC_ENABLE_PROXY_DATASOURCE = \"fhirServer/persistence/jdbc/enableProxyDatasource\";\n-    public static final String PROPERTY_JDBC_ENABLE_READ_ONLY_REPLICAS = \"fhirServer/persistence/jdbc/enableReadOnlyReplicas\";\n-    public static final String PROPERTY_JDBC_ENABLE_CODE_SYSTEMS_CACHE = \"fhirServer/persistence/jdbc/enableCodeSystemsCache\";\n-    public static final String PROPERTY_JDBC_ENABLE_PARAMETER_NAMES_CACHE = \"fhirServer/persistence/jdbc/enableParameterNamesCache\";\n-    public static final String PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE = \"fhirServer/persistence/jdbc/enableResourceTypesCache\";\n-    public static final String PROPERTY_JDBC_EXTERNAL_REF_SYSTEM_CACHE_SIZE = \"fhirServer/persistence/jdbc/externalRefSystemCacheSize\";\n-    public static final String PROPERTY_JDBC_EXTERNAL_REF_VALUE_CACHE_SIZE = \"fhirServer/persistence/jdbc/externalRefValueCacheSize\";\n-\n-    // Optimizer options within a datasource definition\n-    public static final String PROPERTY_JDBC_SEARCH_OPTIMIZER_OPTIONS = \"searchOptimizerOptions\";\n-\n-    // fhir-search - Bounding area\n-    public static final String PROPERTY_SEARCH_BOUNDING_AREA_RADIUS_TYPE = \"fhirServer/search/useBoundingRadius\";\n-\n-    // bulkdata\n-    // JavaBatch Job id encryption key\n-    public static final String PROPERTY_BULKDATA_BATCHJOBID_ENCRYPTION_KEY = \"fhirServer/bulkdata/bulkDataBatchJobIdEncryptionKey\";\n-    // JavaBatch Job parameters\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_PARAMETERS  = \"fhirServer/bulkdata/jobParameters\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_APPLICATIONNAME = \"fhirServer/bulkdata/applicationName\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_MODULENAME = \"fhirServer/bulkdata/moduleName\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_JOBXMLNAME = \"fhirServer/bulkdata/jobXMLName\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_IMPTYPE = \"fhirServer/bulkdata/implementation_type\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_BATCHURI = \"fhirServer/bulkdata/batch-uri\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_BATCHUSER = \"fhirServer/bulkdata/batch-user\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_BATCHUSERPWD = \"fhirServer/bulkdata/batch-user-password\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_BATCHTRUSTSTORE = \"fhirServer/bulkdata/batch-truststore\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_BATCHTRUSTSTOREPWD = \"fhirServer/bulkdata/batch-truststore-password\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_USEFHIRSERVERTRUSTSTORE = \"fhirServer/bulkdata/useFhirServerTrustStore\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_ENABLEPARQUET = \"fhirServer/bulkdata/enableParquet\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_SYSTEMEXPIMPL = \"fhirServer/bulkdata/systemExportImpl\";\n-\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_VALID_BASE_URLS = \"fhirServer/bulkdata/validBaseUrls\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_VALID_URLS_DISABLED = \"fhirServer/bulkdata/validBaseUrlsDisabled\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_MAX_INPUT_PER_TENANT =\n-            \"fhirServer/bulkdata/maxInputPerRequest\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_COSFILEMAXSIZE = \"fhirServer/bulkdata/cosFileMaxSize\";\n-    public static final String PROPERTY_BULKDATA_BATCHJOB_COSFILEMAXRESOURCES = \"fhirServer/bulkdata/cosFileMaxResources\";\n-    public static final String PROPERTY_BULKDATA_PATIENTEXPORT_PAGESIZE = \"fhirServer/bulkdata/patientExportPageSize\";\n-    // Control if push OperationOutcomes to COS/S3.\n-    public static final String PROPERTY_BULKDATA_IGNORE_IMPORT_OPERATION_OUTCOMES = \"fhirServer/bulkdata/ignoreImportOutcomes\";\n-\n-    // Custom header names\n-    public static final String DEFAULT_TENANT_ID_HEADER_NAME = \"X-FHIR-TENANT-ID\";\n-    public static final String DEFAULT_DATASTORE_ID_HEADER_NAME = \"X-FHIR-DSID\";\n-    public static final String DEFAULT_PRETTY_RESPONSE_HEADER_NAME = \"X-FHIR-FORMATTED\";\n-\n-    public static final String FHIR_SERVER_DEFAULT_CONFIG = \"config/default/fhir-server-config.json\";\n-\n-    // Optional \"home directory\" for config files.  Defaults to current directory.\n-    private static String configHome = \"\";\n-\n-    private static FHIRConfiguration _instance = new FHIRConfiguration();\n-\n-    public static FHIRConfiguration getInstance() {\n-        return _instance;\n-    }\n-\n-    /**\n-     * This is our in-memory cache of PropertyGroup's keyed by tenant-id.\n-     */\n-    private TenantSpecificPropertyGroupCache configCache = new TenantSpecificPropertyGroupCache();\n-\n-    /**\n-     * This method is used to configure an explicit top-level directory where FHIR Server configuration\n-     * information is expected to reside.\n-     * <p>\n-     * For example, by calling this method with value \"/mydir\", then we'd expect\n-     * to find config files whose names are of the form: {@code \"/mydir/config/<tenant-id>/fhir-server-config.json\"}\n-     * <p>\n-     * The default location for config files is the current working directory (i.e. \"\" - the empty string).\n-     * @param s the new config home directory name\n-     */\n-    public static void setConfigHome(String s) {\n-        if (s == null) {\n-            s = \"\";\n-        }\n-        if (!s.isEmpty() && !s.endsWith(File.separator)) {\n-            s += File.separator;\n-        }\n-\n-        configHome = s;\n-    }\n-\n-    /**\n-     * Returns the \"home\" directory for FHIR Server configuration information (this directory will contain\n-     * the \"config\" directory, etc.).\n-     * <p>\n-     * The default value of this property is \"\" which is interpreted to mean the current working directory\n-     * (which for a running FHIR Server will be $WLP_HOME/wlp/usr/servers/fhir-server).\n-     */\n-    public static String getConfigHome() {\n-        return configHome;\n-    }\n-\n-    /**\n-     * Retrieves the FHIR Server default configuration and returns it as a PropertyGroup.\n-     *\n-     * @return the top-level property group of the default tenant or null if it doesn't exist\n-     * @throws Exception if the configuration file was found but couldn't be loaded\n-     */\n-    public PropertyGroup loadConfiguration() throws Exception {\n-        return loadConfigurationForTenant(DEFAULT_TENANT_ID);\n-    }\n-\n-    /**\n-     * Loads the configuration for the specified tenant id.\n-     *\n-     * @param tenantId\n-     *            a shortname representing the tenant whose configuration will be loaded\n-     * @return the top-level property group representing this tenant's configuration or null if it doesn't exist\n-     * @throws Exception\n-     */\n-    public PropertyGroup loadConfigurationForTenant(String tenantId) throws Exception {\n-        return configCache.getCachedObjectForTenant(tenantId);\n-    }\n-\n-    /**\n-     * Clears the entire cache of configuration objects. This can be used perhaps during testing when you need to clear\n-     * and re-load the configuration.\n-     */\n-    public void clearConfiguration() {\n-        synchronized (configCache) {\n-            configCache.clearCache();\n-        }\n-    }\n-\n-    /**\n-     * This method returns the list of tenant id's for which a configuration exists.\n-     * @return\n-     */\n-    public List<String> getConfiguredTenants() {\n-        log.entering(this.getClass().getName(), \"getConfiguredTenants\");\n-\n-        try {\n-            List<String> result = new ArrayList<>();\n-\n-            // 'configDir' represents the directory that contains the tenant ids\n-            // Example: \"/opt/ibm/fhir-server/wlp/usr/servers/fhir-server/config\".\n-            File configDir = new File(getConfigHome() + CONFIG_LOCATION);\n-            log.fine(\"Listing tenant id's rooted at directory: \" + configDir.getName());\n-\n-            // List the directories within 'configDir' that contain a fhir-server-config.json file.\n-            for (File f : configDir.listFiles()) {\n-                // For a directory, let's verify that a config exists within it.\n-                // If yes, then add the name of the directory to the result list, as that\n-                // represents a tenant id.\n-                if (f.isDirectory()) {\n-                    File configFile = new File(f, CONFIG_FILE_BASENAME);\n-                    if (configFile.exists() && configFile.isFile()) {\n-                        result.add(f.getName());\n-                    }\n-                }\n-            }\n-\n-            log.fine(\"Returning list of tenant ids: \" + result.toString());\n-\n-            return result;\n-        } finally {\n-            log.exiting(this.getClass().getName(), \"getConfiguredTenants\");\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "967c57aa9cf105fb183cffbd6817af65227355c6", "committedDate": "2020-04-16 18:47:16 -0400", "message": "Cleanup NPE when the server starts with no fhir-server-config"}, {"oid": "aaeda25c8a47775003839dfb40c63d7f8f5c71ee", "committedDate": "2020-04-17 08:38:33 -0400", "message": "Bulk-Data Import Operation and API #671"}, {"oid": "17d928b933fc9f89127f62c856190b919d8333fd", "committedDate": "2020-04-17 09:32:26 -0400", "message": "Merge branch 'master' into issue-671-redo"}, {"oid": "b017dc16a1fe29faab590c5deb90d82f46308596", "committedDate": "2020-04-21 14:14:55 -0400", "message": "Code Review Update for #671"}, {"oid": "eefa0c0c37ee8eeb845a408b91b73d9d9ebc1318", "committedDate": "2020-04-22 13:25:10 -0400", "message": "Fix for p12 issue and subsequent issues"}, {"oid": "0908735c3bb710956c9f5f2158bf8e00805fce59", "committedDate": "2020-04-24 18:27:04 -0400", "message": "parent fd44bdd39e004256cf043b71f219fb613b981491 author ccorley <ccorley@us.ibm.com> 1585150915 -0500 committer ccorley <ccorley@us.ibm.com> 1587571679 -0500"}, {"oid": "f6751edd844640778e71611f9085267b1ae5566c", "committedDate": "2020-04-27 13:02:10 -0400", "message": "remove defunct truststore properties from FHIRConfiguration and sample configs"}, {"oid": "1582eebda71a411e3fbe4d643d348091cf982dd3", "committedDate": "2020-04-30 13:28:30 -0400", "message": "Merge pull request #973 from ccorley/nats-tls2"}, {"oid": "85d426b01cb7cabf2efdb292351ee20c48fdba84", "committedDate": "2020-05-04 16:54:34 -0400", "message": "Improve the Exception Case for Db2 Configured Multitenancy #1018"}, {"oid": "6fece5b82ae7f814b60ab62ec64059a9eccc3bd7", "committedDate": "2020-05-06 13:49:16 -0400", "message": "Set Context Invalid in Multi-tenant Db2 #1032"}, {"oid": "3c2aa513c6efb34406b89c2f7ebca5b29b6ff5e5", "committedDate": "2020-05-12 16:07:20 -0400", "message": "Add cache support for the capabilites request #734"}, {"oid": "c4a64643681f778b9ae7e49f5fa97a5b99edc598", "committedDate": "2020-05-26 08:57:06 -0400", "message": "issue #779 #1150 further refactor and fix CWWKY0041W warnings"}, {"oid": "f7418224e85fd66b56ff240e01359a4a083523e0", "committedDate": "2020-06-04 06:10:23 -0400", "message": "issue #1187 fix for DB connection timeout issue of patient export"}, {"oid": "bdc6f4a5874bacced9a0bdb3181838871eb86f35", "committedDate": "2020-06-24 20:28:04 -0400", "message": "issue #1242 per tenant truststore config and bulkdata tests enhancement"}, {"oid": "6d346a86c8195acb50533c17172916071d97b9cc", "committedDate": "2020-06-26 12:07:35 -0400", "message": "issue #1242 updates per review comments"}, {"oid": "a30fcfe5b04c8b550dd45a154ecbe91f7b1444a7", "committedDate": "2020-08-03 00:22:45 -0400", "message": "Skip filling the bytebuffer for patient and group exports"}, {"oid": "e3af287f068da8194c7c1550dce745d8827f1de3", "committedDate": "2020-08-03 00:22:46 -0400", "message": "Mark spark and stocator as \"provided\" and disable parquet by default"}, {"oid": "c20868fe71f7f2e61b5dd98079b35c6be07af4dc", "committedDate": "2020-09-01 15:47:56 -0500", "message": "Issue #1421 - fix validation config, add documentation of new property"}, {"oid": "dfe67c29576749fc72bc12d24eb37bf4d9810ea4", "committedDate": "2020-09-02 10:45:14 -0500", "message": "Issue #1421 - fix typo in extendedCodeableConceptValidation name"}, {"oid": "f29f3032f2317cfd22f65e705c3592013acb52d6", "committedDate": "2020-09-25 18:03:45 -0400", "message": "issue 1366 integrated cache and reference DAO with JDBC persistence layer"}, {"oid": "cabdc2ffc52df961ca93283570815f37222286f8", "committedDate": "2020-09-28 11:51:03 -0400", "message": "issue #1480 - introduce new fhir-server-config security group and use"}, {"oid": "90e59c64d59798b6ace71d9816145431402b51b6", "committedDate": "2020-09-28 15:02:11 -0400", "message": "move smart config underneath the oauth config"}, {"oid": "8464da0256da607deaa7a04d921432949f2f69e8", "committedDate": "2020-09-29 11:53:53 -0400", "message": "introduce properties for adding the additional \"recommended\" fields"}, {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed", "committedDate": "2020-10-15 18:44:43 -0500", "message": "issue #1351 - Update config with resources group for search parameters"}, {"oid": "f3ac6ea3a9d5625ee89e48d3435bf5c086032d4c", "committedDate": "2020-10-16 09:22:22 -0400", "message": "renamed \"includeOmittedResourceTypes\" to \"open\""}, {"oid": "095513ee1979ef823995b998d656ebf6ad0383d2", "committedDate": "2020-10-16 17:08:28 -0400", "message": "issue #1589 - fix FHIRConfiguration smart properties"}, {"oid": "96d9a21cf2e314d35915b5ac05975f0fc5861a46", "committedDate": "2020-10-19 10:15:23 -0400", "message": "issue #1449 - build the capabilitystatement from the config"}, {"oid": "01a95d24049168144cbb0445deaa0277617b2e70", "committedDate": "2020-10-19 15:26:17 -0400", "message": "issue #1366 merge conflict resolution with latest master"}, {"oid": "dc560b6085731cc1af3089eb804ed5223d420a0c", "committedDate": "2020-10-19 23:15:19 -0400", "message": "fix the PROPERTY_SECURITY_CERT_ENABLED property path"}, {"oid": "df7df01a31d05690e583de2561a66609e64b15e7", "committedDate": "2020-10-20 13:07:10 -0400", "message": "issue #1272 - simplify searchParameter configuration"}, {"oid": "6b36983c0016392d24b40bbda98e390407319a32", "committedDate": "2020-10-24 13:55:39 -0400", "message": "issue #1366 fixes to support Db2 and merge latest from master"}, {"oid": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "committedDate": "2020-10-26 09:26:37 -0500", "message": "issue #1351 - Check _include and _revinclude values are supported"}, {"oid": "1feaa611ff458a258d6f8bd66fea3b90bc526c80", "committedDate": "2020-10-26 09:26:39 -0500", "message": "issue #1351 - Check search parameter combinations"}, {"oid": "23468d01cf38e2636c677444c226f04ea1142dc1", "committedDate": "2020-10-28 17:03:14 -0400", "message": "Merge pull request #1604 from IBM/robin-proto"}, {"oid": "a5b40e535517a45cc540b0ed2d13743a1243cda9", "committedDate": "2020-11-02 15:46:01 -0500", "message": "issue #916 static datasource option and make it the default"}, {"oid": "d343e20a0af25d2dcf00d70b247bc87a602350e2", "committedDate": "2020-11-03 14:29:37 -0500", "message": "issue #916 make proxy datasource the default config and fix jndi naming for bootstrap derby databases"}, {"oid": "3a7e9993f8658fdf570af65cd8aac5c4bf65d85a", "committedDate": "2020-11-06 11:24:49 -0500", "message": "issue #916 addressed review comments, use legacy proxy datasource config for Db2 SITs"}, {"oid": "8f9f41f50623e1291ac9e7866543479a7555a61e", "committedDate": "2020-11-17 09:14:23 -0500", "message": "Issue #1547 - enable validation of profile assertions (#1721)"}, {"oid": "2d89c8a62ca4c68cb3f20a8d4a765e8444eaa3d1", "committedDate": "2020-11-19 17:01:09 -0500", "message": "issue #1708 use ibm-internal stored parameters for compartment searches"}, {"oid": "c757abe505ca0683b56f3e1ff0c2703efc945e9f", "committedDate": "2020-11-30 15:35:54 -0500", "message": "Add disable operation configuration #1753"}, {"oid": "ca7f6acc2ac368b0c05f7379741eaec750f666e0", "committedDate": "2020-12-01 09:37:20 -0500", "message": "Per code review"}, {"oid": "6c115b49526c4708155665085c6a8bd85ee7d312", "committedDate": "2021-01-27 08:28:35 -0500", "message": "issue 1866 fixed timestamp handling and added config item to enable legacy behavior"}, {"oid": "efc862859a00f21b920457d27bac496095b0b463", "committedDate": "2021-02-01 22:49:01 -0500", "message": "issue 1869 investigate storing payload outside of RDBMS"}, {"oid": "b4ae2d5439042bf93507541696f07d3a14fecc3a", "committedDate": "2021-02-02 00:24:44 -0500", "message": "issue 1866 merge with latest master"}, {"oid": "abed6c147051bd3eecc40f41b0047106caa179e9", "committedDate": "2021-02-02 17:00:25 -0500", "message": "Control the writing of operational outcomes with https $import"}, {"oid": "079e06a4cc9756761726e030b33afe98cb6583f7", "committedDate": "2021-02-03 16:04:15 -0500", "message": "Cleanup the Removal of the Auth Filter"}, {"oid": "54719a66578918c37ac8f2a2f3380ac4169a88d9", "committedDate": "2021-02-04 21:18:49 -0500", "message": "issue 1911 support query optimizer tuning params for postgres search queries"}, {"oid": "0c1ca1263909f36c319aec7973d85985ce1f9852", "committedDate": "2021-02-05 09:05:29 -0500", "message": "Merge branch 'issue-1879' into issue-1880"}, {"oid": "3c5e29548a919f8cc010e9bb7aa2a8b702ee18c4", "committedDate": "2021-02-05 09:43:34 -0500", "message": "issue 1911 updated copyright headers"}, {"oid": "fc4a70cbf798e77aaf92b6e09769eed9b999e6a7", "committedDate": "2021-02-05 09:55:45 -0500", "message": "Improve Import Bulkdata Operations #1880"}, {"oid": "0152a34332395f9a6d2892dd0cdc174cc0d924a1", "committedDate": "2021-02-05 12:06:17 -0500", "message": "Merge pull request #1916 from IBM/issue-1911"}, {"oid": "9b5c077088ad225e3836b4dabf77d70e3b1c5e82", "committedDate": "2021-02-08 10:44:25 -0500", "message": "Merge pull request #1882 from IBM/issue-1880"}, {"oid": "a96ea3d45935ca135b2041d0ffed40c2ace9c5ed", "committedDate": "2021-02-15 15:10:27 -0500", "message": "Audit Optimizations #1805 and #1933 (#1934)"}, {"oid": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "committedDate": "2021-02-26 13:55:02 -0500", "message": "Issue #1980 - Introduce fhir-term-graph module"}, {"oid": "28a6ad48105d0acb7747dc80c1ee1a2834ce29d8", "committedDate": "2021-02-26 17:08:44 -0600", "message": "issue #1408 - move advanced bootstrapping into CI (#1992)"}, {"oid": "56520e31e66a3e9c431692af02726488fad8fb4d", "committedDate": "2021-03-02 08:57:53 -0500", "message": "issue #1694 - remove the fhir-persistence-proxy more completely"}, {"oid": "7ca7f7ed1a9707fca4a7d31a75b27d2ad3eeca9c", "committedDate": "2021-03-02 15:07:06 -0500", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "65ed664645766bb537b6721ad1150f515692d9c9", "committedDate": "2021-03-12 10:14:57 -0500", "message": "Issue #1980 - changes per PR review"}, {"oid": "f79a867e3e12230e4b218145d0e1a7cdcc152de1", "committedDate": "2021-03-15 14:51:51 -0400", "message": "Issue #1980 - added support for time limit"}, {"oid": "6b5e844b39abe0d17c0a0cd86d99a67989341d06", "committedDate": "2021-04-03 22:23:15 -0400", "message": "issue #923 - docker image updates"}, {"oid": "eaba471dd0a845e6b0f359bea0b1048afaca55b1", "committedDate": "2021-04-12 10:12:14 -0400", "message": "Add configuration property defaultPageSize (#2235)"}, {"oid": "95044a6ae8693582ff4dea41a23b43027aa4f614", "committedDate": "2021-04-27 21:04:35 -0400", "message": "issue 1385 new query builder tuned include query and added config option to disable new query builder"}, {"oid": "d02f0bb64269820aff6bc47d51f61ea02052460e", "committedDate": "2021-05-04 14:03:12 -0400", "message": "issue 1385 initial code cleanup prior to PR review"}, {"oid": "0ead6955b9c218483bf75aa701a93bfb60da2c51", "committedDate": "2021-05-18 12:01:44 -0400", "message": "Deprecate the exportPublic + ACL-based approach to exported object expiry #2054"}, {"oid": "5ff53d3d16b530b17b853d48a2494c86c0cd3383", "committedDate": "2021-05-19 09:06:22 -0500", "message": "Issue #1868 - Configurable max page size and max page included resources"}, {"oid": "8e589c46210614fafbd29e1defb8152751d7b5dc", "committedDate": "2021-05-19 12:51:51 -0400", "message": "Issue #2296 - implement server resolve function (#2375)"}, {"oid": "08a0c9f6f2140d7ff6ae04f58ff6f39ed65b6e94", "committedDate": "2021-05-27 11:17:34 -0400", "message": "IBM FHIR Server CapabilityStatement is invalid #2436"}, {"oid": "33d5693109f34f978b182fbaedce9c736a2354ea", "committedDate": "2021-06-07 09:15:28 -0400", "message": "Merge branch 'main' into issue-2054"}, {"oid": "ab36ed97210223c518c33e434f75a9ca1be73f20", "committedDate": "2021-06-15 09:00:21 -0400", "message": "fhir-notification: Limit handling for 1M #1948"}, {"oid": "3998f6264eec4e3f491ff7725406f1705778e05a", "committedDate": "2021-07-08 15:04:56 -0400", "message": "Issue #2582 - add support for fail-fast validation (#2587)"}, {"oid": "a387e1a65bf8f0406e2ff8e9bd6d43d0d17104e5", "committedDate": "2021-07-09 14:12:31 -0400", "message": "issue #2522 - Mark everything related to the old query builder deprecated (#2591)"}, {"oid": "c0529ae611322e19350a51085a20fd26f79e729e", "committedDate": "2021-07-15 10:53:35 -0500", "message": "Issue #2609 - enable use of legacy search parm tables during reindex"}, {"oid": "69b5ab0d3b63c557552f869ba90ff9edb5d7757f", "committedDate": "2021-07-15 11:53:45 -0500", "message": "Issue #2609 - address review comments"}, {"oid": "4e770640b5b1d39a60735edcecf991ad956215eb", "committedDate": "2021-08-18 14:33:50 +0100", "message": "issue 1869. Offload payload storage. Merged with main from 4.9.0"}, {"oid": "0deb2f13be6361119b32d75d0bb8002da1915bba", "committedDate": "2021-09-07 21:22:54 -0400", "message": "Deprecate our older caches for future removal"}, {"oid": "b40920bd4af64641cb029f0c8624b7dd91be3ba8", "committedDate": "2021-09-30 22:41:14 +0100", "message": "issue 1869 merged with latest main"}, {"oid": "b6591db5d16bd973192c27b2e511890d52875a93", "committedDate": "2021-10-11 08:49:03 -0400", "message": "Update with Model Config"}, {"oid": "1e8e6f4c1a2f8b8b3a57401f5aa26a21f84877f7", "committedDate": "2021-10-14 12:46:03 +0100", "message": "issue 1869 merged with main"}, {"oid": "2ab35bfac73036ac5a173368cb87f29b4ecebff4", "committedDate": "2021-10-19 14:13:10 -0500", "message": "Issue #2834 - add support to configure not allowed profiles"}, {"oid": "b424d4328639dbd046bddc13c4f4c14aadfb35d9", "committedDate": "2021-10-19 16:02:32 -0400", "message": "Per QA - updated error message"}, {"oid": "07d89171a5694d95dada7683054cb49a68125440", "committedDate": "2021-10-20 13:54:15 -0500", "message": "Issue #2873 - enable 'allowUnknown' profile config property"}, {"oid": "1229d26df60030bb228328f364277bda631ea8db", "committedDate": "2021-10-21 08:48:39 -0500", "message": "Merge pull request #2871 from IBM/issue-2834"}, {"oid": "2d6f6477c7f1496835793208d0c13bf46cc224c7", "committedDate": "2021-10-21 10:57:33 -0400", "message": "issue #2728 - Remove the old query builder and update behavior tests"}, {"oid": "b0f57c580ad15aad1747ab0aaf3310a9a9a76fd5", "committedDate": "2021-10-22 14:40:56 -0400", "message": "Merge pull request #2881 from IBM/issue-2728"}, {"oid": "a2a62d3755ebdef936e745773f11e50a87a2f23f", "committedDate": "2021-10-26 15:13:19 -0500", "message": "Issue #2832 - enable default profile version configuration"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "167acbd65a652d648905297cf141e9747359f088", "committedDate": "2021-11-12 16:05:15 -0500", "message": "issue 2050 ifNoneMatch returns 412 unless ifNoneMatchReturnsNotModified (#2978)"}, {"oid": "36ba7ba48c8e0967b7ed73cafed1aa46940228d5", "committedDate": "2022-01-20 08:33:15 -0500", "message": "issue #2901 remove deprecated persistence caches (#3201)"}, {"oid": "b180bb8d8697750d27e6429edc2fbadc57f4ec2a", "committedDate": "2022-02-07 12:56:03 -0500", "message": "Add search for related resources and make extra resources in patient $everything configurable (#3243)"}, {"oid": "ed4b3ca7d3323b2be1d3ad3172e2283ac4c10dd8", "committedDate": "2022-03-07 23:25:32 -0500", "message": "issue #2886 - remove useStoredCompartmentParam param"}, {"oid": "4c8e459a33902ec0f404a3c523515c1ad11bec20", "committedDate": "2022-04-01 08:37:09 -0400", "message": "update docs to clarify behavior"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "267919a881727455b9854aa4920bd384e0a2c7f7", "committedDate": "2022-05-11 22:22:36 -0400", "message": "issue #3137 - implicit type filtering for whole-system search"}, {"oid": "2d6aed7706ac1ec5ca4b3b673ddf90380ff4a654", "committedDate": "2022-05-11 22:22:36 -0400", "message": "issue #3242 - introduce defaultFhirVersion config property"}, {"oid": "19daa4c960db4917439c9221531995533a80d4a1", "committedDate": "2022-06-02 10:05:23 +0100", "message": "issue #3437 merge with main for R4B"}, {"oid": "c446a15e0d22b4109347028df86ce80710e54789", "committedDate": "2022-06-20 13:54:23 +0100", "message": "issue #3437 add instanceIdentifier to remote index messages and other review fixes"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408960097", "body": "javadoc?", "bodyText": "javadoc?", "bodyHTML": "<p dir=\"auto\">javadoc?</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:06:12Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java", "diffHunk": "@@ -108,7 +108,13 @@ public static boolean isDefinitionalResource(Resource resource) {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n-    private static boolean isDefinitionalResourceType(Class<?> resourceType) {\n+    public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTgxOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991818", "bodyText": "Added Javadoc to both methods", "author": "JohnTimm", "createdAt": "2020-04-15T16:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\nindex 0326c7e6a4..126f35ad33 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n", "chunk": "@@ -108,12 +108,28 @@ public final class FHIRRegistryUtil {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n+    /**\n+     * Throw an {@link IllegalArgumentException} if the resource type is not a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resourceType\n+     */\n     public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         if (!isDefinitionalResourceType(resourceType)) {\n             throw new IllegalArgumentException(resourceType.getSimpleName() + \" is not a definitional resource type\");\n         }\n     }\n \n+    /**\n+     * Indicates whether the resource type is a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resource type\n+     * @return\n+     *     true if the resource type is a definitional resource, false otherwise\n+     */\n     public static boolean isDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         return DEFINITIONAL_RESOURCE_TYPES.contains(resourceType);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\nindex 0326c7e6a4..126f35ad33 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n", "chunk": "@@ -108,12 +108,28 @@ public final class FHIRRegistryUtil {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n+    /**\n+     * Throw an {@link IllegalArgumentException} if the resource type is not a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resourceType\n+     */\n     public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         if (!isDefinitionalResourceType(resourceType)) {\n             throw new IllegalArgumentException(resourceType.getSimpleName() + \" is not a definitional resource type\");\n         }\n     }\n \n+    /**\n+     * Indicates whether the resource type is a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resource type\n+     * @return\n+     *     true if the resource type is a definitional resource, false otherwise\n+     */\n     public static boolean isDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         return DEFINITIONAL_RESOURCE_TYPES.contains(resourceType);\n     }\n", "next_change": {"commit": "8199e7f1bff5e1eb3cbc9e33e5fc0138bf180801", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\nindex 126f35ad33..75c8c525f3 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n", "chunk": "@@ -138,7 +139,7 @@ public final class FHIRRegistryUtil {\n         try (BufferedReader reader = new BufferedReader(new InputStreamReader(FHIRRegistryUtil.class.getClassLoader().getResourceAsStream(path), StandardCharsets.UTF_8))) {\n             return FHIRParser.parser(Format.JSON).parse(reader);\n         } catch (Exception e) {\n-            log.warning(\"Unable to load resource: \" + path + \" due to the following exception: \" + e.getMessage());\n+            log.log(Level.WARNING, \"Unable to load resource: \" + path, e);\n         }\n         return null;\n     }\n", "next_change": {"commit": "4b1806fd7fc34ac7cd2c581a3a89cabe8c5222cc", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\nindex 75c8c525f3..905b99e620 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n", "chunk": "@@ -136,8 +133,12 @@ public final class FHIRRegistryUtil {\n     }\n \n     public static Resource loadResource(String path) {\n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(FHIRRegistryUtil.class.getClassLoader().getResourceAsStream(path), StandardCharsets.UTF_8))) {\n-            return FHIRParser.parser(Format.JSON).parse(reader);\n+        try (InputStream in = FHIRRegistryUtil.class.getClassLoader().getResourceAsStream(path)) {\n+            if (in == null) {\n+                log.log(Level.WARNING, \"Resource at '\" + path + \"' was not found\");\n+                return null;\n+            }\n+            return FHIRParser.parser(Format.JSON).parse(in);\n         } catch (Exception e) {\n             log.log(Level.WARNING, \"Unable to load resource: \" + path, e);\n         }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "b33ba7399f13375cd8480fb21c4c9a5bd0682771", "committedDate": "2020-05-12 07:58:02 -0400", "message": "Skip index entries that are missing required fields instead of throwing"}, {"oid": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "committedDate": "2021-02-26 13:55:02 -0500", "message": "Issue #1980 - Introduce fhir-term-graph module"}, {"oid": "122e50677fbb9bd98ce6c4ea0423b5a1cb8d65e7", "committedDate": "2021-05-12 11:07:57 -0400", "message": "Issue #2342 - set experimental to true (#2350)"}, {"oid": "8199e7f1bff5e1eb3cbc9e33e5fc0138bf180801", "committedDate": "2021-10-27 12:27:27 -0400", "message": "Updates to US Core 3.1.1 examples"}, {"oid": "2ddc43ca1985a57370e77310fffc399e6c88e386", "committedDate": "2022-05-11 22:21:29 -0400", "message": "manual edits to make it compile"}, {"oid": "a83e957f83267df177a8848807c2c9ddb941d4d6", "committedDate": "2022-05-11 22:22:25 -0400", "message": "organize definitions by release and update tools to work with R4B"}, {"oid": "4b1806fd7fc34ac7cd2c581a3a89cabe8c5222cc", "committedDate": "2022-05-11 22:22:27 -0400", "message": "set expectations for the ibm-generated example indices"}, {"oid": "d195a46e72cd1594365e124cfbb62a8abfda4f12", "committedDate": "2022-05-11 22:34:17 -0400", "message": "issue #3447 - add expanded valuesets to fhir-core-r4b"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408961242", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:07:53Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -143,6 +157,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n      */", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDQ5Mw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970493", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simply return null.", "author": "JohnTimm", "createdAt": "2020-04-15T16:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -154,6 +169,8 @@ public final class FHIRRegistry {\n      *     the resource type\n      * @return\n      *     the resources for the given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n         Objects.requireNonNull(resourceType);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -154,6 +169,8 @@ public final class FHIRRegistry {\n      *     the resource type\n      * @return\n      *     the resources for the given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n         Objects.requireNonNull(resourceType);\n", "next_change": {"commit": "b7b48408b2ca1692a2f173a3318675fda505f212", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 1b2c9d2c34..1c6d139ae7 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -175,11 +179,13 @@ public final class FHIRRegistry {\n     public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n         Objects.requireNonNull(resourceType);\n         requireDefinitionalResourceType(resourceType);\n-        return providers.stream()\n-                .map(provider -> provider.getRegistryResources(resourceType))\n-                .flatMap(Collection::stream)\n-                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n-                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+        List<T> resources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource registryResource : provider.getRegistryResources(resourceType)) {\n+                resources.add(resourceType.cast(registryResource.getResource()));\n+            }\n+        }\n+        return Collections.unmodifiableList(resources);\n     }\n \n     /**\n", "next_change": {"commit": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 1c6d139ae7..d37b38e44b 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -188,31 +184,6 @@ public final class FHIRRegistry {\n         return Collections.unmodifiableList(resources);\n     }\n \n-    /**\n-     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n-     *\n-     * @param type\n-     *     the constrained resource type\n-     * @return\n-     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n-     */\n-    public Collection<Canonical> getProfiles(String type) {\n-        Objects.requireNonNull(type);\n-        if (!ModelSupport.isResourceType(type)) {\n-            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n-        }\n-        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            registryResources.addAll(provider.getProfileResources(type));\n-        }\n-        Collections.sort(registryResources);\n-        List<Canonical> profiles = new ArrayList<>();\n-        for (FHIRRegistryResource registryResource : registryResources) {\n-            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n-        }\n-        return Collections.unmodifiableList(profiles);\n-    }\n-\n     /**\n      * Get the search parameters with the given search parameter type (e.g. string, token, etc.)\n      *\n", "next_change": {"commit": "4fb5d81909a40293d4f8783c035b6207515ace3a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex d37b38e44b..1786a1d5de 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -184,6 +186,28 @@ public final class FHIRRegistry {\n         return Collections.unmodifiableList(resources);\n     }\n \n+    /**\n+     * Get the registry resources for the given resource type\n+     *\n+     * <p>Use this method to get FHIR registry resources (metadata) and not actual FHIR resources\n+     *\n+     * @param resourceType\n+     *     the resource type\n+     * @return\n+     *     the registry resources for the given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n+     */\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        Objects.requireNonNull(resourceType);\n+        requireDefinitionalResourceType(resourceType);\n+        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            registryResources.addAll(provider.getRegistryResources(resourceType));\n+        }\n+        return registryResources;\n+    }\n+\n     /**\n      * Get the search parameters with the given search parameter type (e.g. string, token, etc.)\n      *\n", "next_change": {"commit": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\ndeleted file mode 100644\nindex 1786a1d5de..0000000000\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,332 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019, 2021\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.registry;\n-\n-import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResourceType;\n-import static com.ibm.fhir.registry.util.FHIRRegistryUtil.requireDefinitionalResourceType;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.logging.Logger;\n-\n-import com.ibm.fhir.model.resource.DomainResource;\n-import com.ibm.fhir.model.resource.Resource;\n-import com.ibm.fhir.model.resource.SearchParameter;\n-import com.ibm.fhir.model.type.Canonical;\n-import com.ibm.fhir.model.type.code.SearchParamType;\n-import com.ibm.fhir.model.util.ModelSupport;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n-import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n-\n-/**\n- * A singleton registry for FHIR definitional resources: <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n- */\n-public final class FHIRRegistry {\n-    private static final Logger log = Logger.getLogger(FHIRRegistry.class.getName());\n-\n-    private static final FHIRRegistry INSTANCE = new FHIRRegistry();\n-\n-    private final List<FHIRRegistryResourceProvider> providers;\n-\n-    private FHIRRegistry() {\n-        providers = new CopyOnWriteArrayList<>(loadProviders());\n-    }\n-\n-    /**\n-     * Add a registry resource provider to the registry\n-     *\n-     * @implNote\n-     *     This method should not be called by consumers that make their registry resource providers available through\n-     *     the service loader\n-     * @param provider\n-     *     the registry resource provider to be added\n-     */\n-    public void addProvider(FHIRRegistryResourceProvider provider) {\n-        Objects.requireNonNull(provider);\n-        providers.add(provider);\n-    }\n-\n-    /**\n-     * Get the latest version of a resource for the given url and resource type\n-     *\n-     * @param url\n-     *     the url\n-     * @param resourceType\n-     *     the resource type\n-     * @return\n-     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n-     */\n-    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return null;\n-        }\n-\n-        int index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n-        return (resource != null) ? resource.getVersion().toString() : null;\n-    }\n-\n-    /**\n-     * Get a map containing sets of type specific canonical URLs for all profile resources across all providers.\n-     *\n-     * @return\n-     *     the map of sets\n-     */\n-    public Map<String, Set<Canonical>> getProfiles() {\n-        Map<String, Set<Canonical>> map = new HashMap<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            for (FHIRRegistryResource r : provider.getProfileResources()) {\n-                map.computeIfAbsent(r.getType(), k -> new LinkedHashSet<>())\n-                    .add(Canonical.of(r.getUrl(), r.getVersion().toString()));\n-            }\n-        }\n-        return map;\n-    }\n-\n-    /**\n-     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n-     *\n-     * @param type\n-     *     the constrained resource type\n-     * @return\n-     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n-     */\n-    public Collection<Canonical> getProfiles(String type) {\n-        Objects.requireNonNull(type);\n-        if (!ModelSupport.isResourceType(type)) {\n-            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n-        }\n-        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            registryResources.addAll(provider.getProfileResources(type));\n-        }\n-        Collections.sort(registryResources);\n-        List<Canonical> profiles = new ArrayList<>();\n-        for (FHIRRegistryResource registryResource : registryResources) {\n-            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n-        }\n-        return Collections.unmodifiableList(profiles);\n-    }\n-\n-    /**\n-     * Get the resource for the given canonical url and resource type\n-     *\n-     * @param url\n-     *     the canonical url\n-     * @param resourceType\n-     *     the resource type\n-     * @return\n-     *     the resource for the given canonical url and resource type if exists, null otherwise\n-     * @throws ClassCastException\n-     *     if the resource exists in the registry but its type does not match given resource type\n-     * @throws IllegalArgumentException\n-     *     if the resource type is not a definitional resource type\n-     */\n-    public <T extends Resource> T getResource(String url, Class<T> resourceType) {\n-        Objects.requireNonNull(url);\n-        Objects.requireNonNull(resourceType);\n-        requireDefinitionalResourceType(resourceType);\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));\n-    }\n-\n-    /**\n-     * Get the resources for the given resource type\n-     *\n-     * <p>Use this method to get actual FHIR resources and not FHIR registry resources (metadata)\n-     *\n-     * @param resourceType\n-     *     the resource type\n-     * @return\n-     *     the resources for the given resource type\n-     * @throws IllegalArgumentException\n-     *     if the resource type is not a definitional resource type\n-     */\n-    public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n-        Objects.requireNonNull(resourceType);\n-        requireDefinitionalResourceType(resourceType);\n-        List<T> resources = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            for (FHIRRegistryResource registryResource : provider.getRegistryResources(resourceType)) {\n-                resources.add(resourceType.cast(registryResource.getResource()));\n-            }\n-        }\n-        return Collections.unmodifiableList(resources);\n-    }\n-\n-    /**\n-     * Get the registry resources for the given resource type\n-     *\n-     * <p>Use this method to get FHIR registry resources (metadata) and not actual FHIR resources\n-     *\n-     * @param resourceType\n-     *     the resource type\n-     * @return\n-     *     the registry resources for the given resource type\n-     * @throws IllegalArgumentException\n-     *     if the resource type is not a definitional resource type\n-     */\n-    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n-        Objects.requireNonNull(resourceType);\n-        requireDefinitionalResourceType(resourceType);\n-        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            registryResources.addAll(provider.getRegistryResources(resourceType));\n-        }\n-        return registryResources;\n-    }\n-\n-    /**\n-     * Get the search parameters with the given search parameter type (e.g. string, token, etc.)\n-     *\n-     * <p>The method {@link FHIRRegistry#getResources(Class)} can be used to get all search parameters regardless of type\n-     *\n-     * @param type\n-     *     the search parameter type\n-     * @return\n-     *     the search parameters with the given search parameter type\n-     */\n-    public Collection<SearchParameter> getSearchParameters(String type) {\n-        Objects.requireNonNull(type);\n-        SearchParamType.Value.from(type);\n-        List<SearchParameter> searchParameters = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            for (FHIRRegistryResource registryResource : provider.getSearchParameterResources(type)) {\n-                searchParameters.add(registryResource.getResource().as(SearchParameter.class));\n-            }\n-        }\n-        return Collections.unmodifiableList(searchParameters);\n-\n-    }\n-\n-    /**\n-     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n-     *\n-     * @param url\n-     *     the canonical url\n-     * @param resourceType\n-     *     the resource type\n-     * @return\n-     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n-     */\n-    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n-        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n-    }\n-\n-    private FHIRRegistryResource findRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n-        if (version == null) {\n-            // find the latest version of the registry resource with the specified resourceType and url (across all providers)\n-            Set<FHIRRegistryResource> distinct = new HashSet<>();\n-            for (FHIRRegistryResourceProvider provider : providers) {\n-                FHIRRegistryResource registryResource = provider.getRegistryResource(resourceType, url, version);\n-                if (registryResource != null) {\n-                    distinct.add(registryResource);\n-                }\n-            }\n-            List<FHIRRegistryResource> registryResources = new ArrayList<>(distinct);\n-            Collections.sort(registryResources);\n-            return !registryResources.isEmpty() ? registryResources.get(registryResources.size() - 1) : null;\n-        }\n-        // find the first registry resource with the specified resourceType, url, and version\n-        for (FHIRRegistryResourceProvider provider : providers) {\n-            FHIRRegistryResource registryResource = provider.getRegistryResource(resourceType, url, version);\n-            if (registryResource != null) {\n-                return registryResource;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private Resource getResource(FHIRRegistryResource registryResource, String url, String id) {\n-        if (registryResource == null) {\n-            return null;\n-        }\n-        Resource resource = registryResource.getResource();\n-        if (resource != null && id != null) {\n-            if (resource.is(DomainResource.class)) {\n-                for (Resource contained : resource.as(DomainResource.class).getContained()) {\n-                    if (id.equals(contained.getId())) {\n-                        return contained;\n-                    }\n-                }\n-                log.warning(\"Unable to find contained resource with id: \" + id + \" in resource: \" + url);\n-            } else {\n-                log.warning(\"Resource: \" + url + \" is not a DomainResource\");\n-            }\n-            return null;\n-        }\n-        return resource;\n-    }\n-\n-    private List<FHIRRegistryResourceProvider> loadProviders() {\n-        List<FHIRRegistryResourceProvider> providers = new ArrayList<>();\n-        for (FHIRRegistryResourceProvider provider : ServiceLoader.load(FHIRRegistryResourceProvider.class)) {\n-            providers.add(provider);\n-        }\n-        return providers;\n-    }\n-\n-    /**\n-     * Get the singleton instance of this class\n-     *\n-     * <p>This first time that this method is called, all registry resource providers made available through the\n-     * service loader are added to the registry\n-     *\n-     * @return\n-     *     the singleton instance of this class\n-     */\n-    public static FHIRRegistry getInstance() {\n-        return INSTANCE;\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "45e220f9cefd0eecfa803dfbd6776a79980db59e", "committedDate": "2020-05-14 13:46:24 -0400", "message": "Issue #1092 - look at all providers to determine latest version (#1095)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "3b1b52c59fbfe2e7c6617bb70d1661a847ef4be0", "committedDate": "2020-06-12 15:20:49 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "4b8a0cfca553572dec4e6a37ffabf98c969e59ba", "committedDate": "2021-03-18 14:17:39 -0400", "message": "Issue #1980 - updates"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "committedDate": "2021-03-19 10:43:27 -0400", "message": "Issue #1980 - sort members"}, {"oid": "bd777dca4c61937e801019c137e4a60355d0175a", "committedDate": "2021-05-07 08:36:40 -0400", "message": "Issue #2290 - changed SearchParamType.ValueSet -> SearchParamType.Value"}, {"oid": "4fb5d81909a40293d4f8783c035b6207515ace3a", "committedDate": "2021-05-12 09:00:53 -0400", "message": "Issue #2342 - add support for TerminologyCapabilities (#2347)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "3f4f52a5f757bd1953e2ad7e12fb96e666d9439c", "committedDate": "2021-07-23 11:39:20 -0400", "message": "Miscellaneous updates (#2635)"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "committedDate": "2021-11-10 13:57:37 -0500", "message": "Add support for looking up and skipping provider discovery"}, {"oid": "f99d231e4481ef29321c4c5829b8652e7316fc88", "committedDate": "2021-11-10 19:48:49 -0500", "message": "Apply suggestions from code review"}, {"oid": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "committedDate": "2021-11-10 19:52:54 -0500", "message": "Updates per code review"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "8aad9a8a1451c1fb4f9f59659b43b5281859e47a", "committedDate": "2021-11-11 15:30:14 -0500", "message": "Update add provider init to the dynamic path"}, {"oid": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "committedDate": "2021-11-17 09:07:26 -0500", "message": "javadoc udpate"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962513", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:09:46Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -115,6 +128,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDc0MA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408974740", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -124,6 +137,8 @@ public final class FHIRRegistry {\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n      *     if the resource exists in the registry but its type does not match given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {\n         Objects.requireNonNull(url);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -124,6 +137,8 @@ public final class FHIRRegistry {\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n      *     if the resource exists in the registry but its type does not match given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {\n         Objects.requireNonNull(url);\n", "next_change": {"commit": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 1b2c9d2c34..a8f939b499 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -140,7 +162,7 @@ public final class FHIRRegistry {\n      * @throws IllegalArgumentException\n      *     if the resource type is not a definitional resource type\n      */\n-    public <T extends Resource> T getResource(String url, Class<T> resourceType) {\n+    public <T extends Resource> T getResource(String url, Class<T> resourceType, String providerName) {\n         Objects.requireNonNull(url);\n         Objects.requireNonNull(resourceType);\n         requireDefinitionalResourceType(resourceType);\n", "next_change": {"commit": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex a8f939b499..539591bb64 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -162,7 +160,7 @@ public final class FHIRRegistry {\n      * @throws IllegalArgumentException\n      *     if the resource type is not a definitional resource type\n      */\n-    public <T extends Resource> T getResource(String url, Class<T> resourceType, String providerName) {\n+    public <T extends Resource> T getResource(String url, Class<T> resourceType, String providerNameToExclude) {\n         Objects.requireNonNull(url);\n         Objects.requireNonNull(resourceType);\n         requireDefinitionalResourceType(resourceType);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "45e220f9cefd0eecfa803dfbd6776a79980db59e", "committedDate": "2020-05-14 13:46:24 -0400", "message": "Issue #1092 - look at all providers to determine latest version (#1095)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "3b1b52c59fbfe2e7c6617bb70d1661a847ef4be0", "committedDate": "2020-06-12 15:20:49 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "4b8a0cfca553572dec4e6a37ffabf98c969e59ba", "committedDate": "2021-03-18 14:17:39 -0400", "message": "Issue #1980 - updates"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "committedDate": "2021-03-19 10:43:27 -0400", "message": "Issue #1980 - sort members"}, {"oid": "bd777dca4c61937e801019c137e4a60355d0175a", "committedDate": "2021-05-07 08:36:40 -0400", "message": "Issue #2290 - changed SearchParamType.ValueSet -> SearchParamType.Value"}, {"oid": "4fb5d81909a40293d4f8783c035b6207515ace3a", "committedDate": "2021-05-12 09:00:53 -0400", "message": "Issue #2342 - add support for TerminologyCapabilities (#2347)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "3f4f52a5f757bd1953e2ad7e12fb96e666d9439c", "committedDate": "2021-07-23 11:39:20 -0400", "message": "Miscellaneous updates (#2635)"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "committedDate": "2021-11-10 13:57:37 -0500", "message": "Add support for looking up and skipping provider discovery"}, {"oid": "f99d231e4481ef29321c4c5829b8652e7316fc88", "committedDate": "2021-11-10 19:48:49 -0500", "message": "Apply suggestions from code review"}, {"oid": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "committedDate": "2021-11-10 19:52:54 -0500", "message": "Updates per code review"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "8aad9a8a1451c1fb4f9f59659b43b5281859e47a", "committedDate": "2021-11-11 15:30:14 -0500", "message": "Update add provider init to the dynamic path"}, {"oid": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "committedDate": "2021-11-17 09:07:26 -0500", "message": "javadoc udpate"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962663", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:10:01Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -87,7 +100,7 @@ public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n      *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n     public String getLatestVersion(String url, Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTQxNQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975415", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..d37b38e44b 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -42,75 +46,84 @@ public final class FHIRRegistry {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n-    public static FHIRRegistry getInstance() {\n-        return INSTANCE;\n-    }\n-\n     /**\n-     * Register a provider\n+     * Add a registry resource provider to the registry\n      *\n+     * @implNote\n+     *     This method should not be called by consumers that make their registry resource providers available through\n+     *     the service loader\n      * @param provider\n-     *     the provider to register\n+     *     the registry resource provider to be added\n      */\n-    public void register(FHIRRegistryResourceProvider provider) {\n+    public void addProvider(FHIRRegistryResourceProvider provider) {\n+        Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n     /**\n-     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n+     * Get the latest version of a resource for the given url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the url\n      * @param resourceType\n      *     the resource type\n      * @return\n-     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n+     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n-    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n+    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n         if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n+            return null;\n         }\n \n-        String version = null;\n-        index = url.indexOf(\"|\");\n+        int index = url.indexOf(\"|\");\n         if (index != -1) {\n-            version = url.substring(index + 1);\n             url = url.substring(0, index);\n         }\n \n-        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n-        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n+        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n+        return (resource != null) ? resource.getVersion().toString() : null;\n     }\n \n     /**\n-     * Get the latest version of a resource for the given url and resource type\n+     * Get a map containing sets of type specific canonical URLs for all profile resources across all providers.\n      *\n-     * @param url\n-     *     the url\n-     * @param resourceType\n-     *     the resource type\n      * @return\n-     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n+     *     the map of sets\n      */\n-    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return null;\n+    public Map<String, Set<Canonical>> getProfiles() {\n+        Map<String, Set<Canonical>> map = new HashMap<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource r : provider.getProfileResources()) {\n+                map.computeIfAbsent(r.getType(), k -> new LinkedHashSet<>())\n+                    .add(Canonical.of(r.getUrl(), r.getVersion().toString()));\n+            }\n         }\n+        return map;\n+    }\n \n-        int index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n+    /**\n+     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n+     *\n+     * @param type\n+     *     the constrained resource type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n+     */\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        if (!ModelSupport.isResourceType(type)) {\n+            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n         }\n-\n-        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n-        return (resource != null) ? resource.getVersion().toString() : null;\n+        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            registryResources.addAll(provider.getProfileResources(type));\n+        }\n+        Collections.sort(registryResources);\n+        List<Canonical> profiles = new ArrayList<>();\n+        for (FHIRRegistryResource registryResource : registryResources) {\n+            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n+        }\n+        return Collections.unmodifiableList(profiles);\n     }\n \n     /**\n", "next_change": {"commit": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex d37b38e44b..3a851627db 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +130,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": {"commit": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 3a851627db..a8f939b499 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,6 +133,8 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n+     * @param providerName\n+     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "f99d231e4481ef29321c4c5829b8652e7316fc88", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex a8f939b499..62288c377a 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,8 +133,6 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n-     * @param providerName\n-     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 62288c377a..eca94070c0 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +131,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url (with optional version postfix)\n+     *     the canonical url (with optional version postfix and optional fragment id for contained resources)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "45e220f9cefd0eecfa803dfbd6776a79980db59e", "committedDate": "2020-05-14 13:46:24 -0400", "message": "Issue #1092 - look at all providers to determine latest version (#1095)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "3b1b52c59fbfe2e7c6617bb70d1661a847ef4be0", "committedDate": "2020-06-12 15:20:49 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "4b8a0cfca553572dec4e6a37ffabf98c969e59ba", "committedDate": "2021-03-18 14:17:39 -0400", "message": "Issue #1980 - updates"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "committedDate": "2021-03-19 10:43:27 -0400", "message": "Issue #1980 - sort members"}, {"oid": "bd777dca4c61937e801019c137e4a60355d0175a", "committedDate": "2021-05-07 08:36:40 -0400", "message": "Issue #2290 - changed SearchParamType.ValueSet -> SearchParamType.Value"}, {"oid": "4fb5d81909a40293d4f8783c035b6207515ace3a", "committedDate": "2021-05-12 09:00:53 -0400", "message": "Issue #2342 - add support for TerminologyCapabilities (#2347)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "3f4f52a5f757bd1953e2ad7e12fb96e666d9439c", "committedDate": "2021-07-23 11:39:20 -0400", "message": "Miscellaneous updates (#2635)"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "committedDate": "2021-11-10 13:57:37 -0500", "message": "Add support for looking up and skipping provider discovery"}, {"oid": "f99d231e4481ef29321c4c5829b8652e7316fc88", "committedDate": "2021-11-10 19:48:49 -0500", "message": "Apply suggestions from code review"}, {"oid": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "committedDate": "2021-11-10 19:52:54 -0500", "message": "Updates per code review"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "8aad9a8a1451c1fb4f9f59659b43b5281859e47a", "committedDate": "2021-11-11 15:30:14 -0500", "message": "Update add provider init to the dynamic path"}, {"oid": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "committedDate": "2021-11-17 09:07:26 -0500", "message": "javadoc udpate"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962724", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:10:09Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -54,7 +67,7 @@ public static FHIRRegistry getInstance() {\n      *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n      */\n     public boolean hasResource(String url, Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTkxOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975918", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simple return false.", "author": "JohnTimm", "createdAt": "2020-04-15T16:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..d37b38e44b 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -42,75 +46,84 @@ public final class FHIRRegistry {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n-    public static FHIRRegistry getInstance() {\n-        return INSTANCE;\n-    }\n-\n     /**\n-     * Register a provider\n+     * Add a registry resource provider to the registry\n      *\n+     * @implNote\n+     *     This method should not be called by consumers that make their registry resource providers available through\n+     *     the service loader\n      * @param provider\n-     *     the provider to register\n+     *     the registry resource provider to be added\n      */\n-    public void register(FHIRRegistryResourceProvider provider) {\n+    public void addProvider(FHIRRegistryResourceProvider provider) {\n+        Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n     /**\n-     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n+     * Get the latest version of a resource for the given url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the url\n      * @param resourceType\n      *     the resource type\n      * @return\n-     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n+     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n-    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n+    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n         if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n+            return null;\n         }\n \n-        String version = null;\n-        index = url.indexOf(\"|\");\n+        int index = url.indexOf(\"|\");\n         if (index != -1) {\n-            version = url.substring(index + 1);\n             url = url.substring(0, index);\n         }\n \n-        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n-        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n+        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n+        return (resource != null) ? resource.getVersion().toString() : null;\n     }\n \n     /**\n-     * Get the latest version of a resource for the given url and resource type\n+     * Get a map containing sets of type specific canonical URLs for all profile resources across all providers.\n      *\n-     * @param url\n-     *     the url\n-     * @param resourceType\n-     *     the resource type\n      * @return\n-     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n+     *     the map of sets\n      */\n-    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return null;\n+    public Map<String, Set<Canonical>> getProfiles() {\n+        Map<String, Set<Canonical>> map = new HashMap<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource r : provider.getProfileResources()) {\n+                map.computeIfAbsent(r.getType(), k -> new LinkedHashSet<>())\n+                    .add(Canonical.of(r.getUrl(), r.getVersion().toString()));\n+            }\n         }\n+        return map;\n+    }\n \n-        int index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n+    /**\n+     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n+     *\n+     * @param type\n+     *     the constrained resource type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n+     */\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        if (!ModelSupport.isResourceType(type)) {\n+            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n         }\n-\n-        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n-        return (resource != null) ? resource.getVersion().toString() : null;\n+        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            registryResources.addAll(provider.getProfileResources(type));\n+        }\n+        Collections.sort(registryResources);\n+        List<Canonical> profiles = new ArrayList<>();\n+        for (FHIRRegistryResource registryResource : registryResources) {\n+            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n+        }\n+        return Collections.unmodifiableList(profiles);\n     }\n \n     /**\n", "next_change": {"commit": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex d37b38e44b..3a851627db 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +130,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": {"commit": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 3a851627db..a8f939b499 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,6 +133,8 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n+     * @param providerName\n+     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "f99d231e4481ef29321c4c5829b8652e7316fc88", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex a8f939b499..62288c377a 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,8 +133,6 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n-     * @param providerName\n-     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 62288c377a..eca94070c0 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +131,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url (with optional version postfix)\n+     *     the canonical url (with optional version postfix and optional fragment id for contained resources)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "45e220f9cefd0eecfa803dfbd6776a79980db59e", "committedDate": "2020-05-14 13:46:24 -0400", "message": "Issue #1092 - look at all providers to determine latest version (#1095)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "3b1b52c59fbfe2e7c6617bb70d1661a847ef4be0", "committedDate": "2020-06-12 15:20:49 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "4b8a0cfca553572dec4e6a37ffabf98c969e59ba", "committedDate": "2021-03-18 14:17:39 -0400", "message": "Issue #1980 - updates"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "committedDate": "2021-03-19 10:43:27 -0400", "message": "Issue #1980 - sort members"}, {"oid": "bd777dca4c61937e801019c137e4a60355d0175a", "committedDate": "2021-05-07 08:36:40 -0400", "message": "Issue #2290 - changed SearchParamType.ValueSet -> SearchParamType.Value"}, {"oid": "4fb5d81909a40293d4f8783c035b6207515ace3a", "committedDate": "2021-05-12 09:00:53 -0400", "message": "Issue #2342 - add support for TerminologyCapabilities (#2347)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "3f4f52a5f757bd1953e2ad7e12fb96e666d9439c", "committedDate": "2021-07-23 11:39:20 -0400", "message": "Miscellaneous updates (#2635)"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "committedDate": "2021-11-10 13:57:37 -0500", "message": "Add support for looking up and skipping provider discovery"}, {"oid": "f99d231e4481ef29321c4c5829b8652e7316fc88", "committedDate": "2021-11-10 19:48:49 -0500", "message": "Apply suggestions from code review"}, {"oid": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "committedDate": "2021-11-10 19:52:54 -0500", "message": "Updates per code review"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "8aad9a8a1451c1fb4f9f59659b43b5281859e47a", "committedDate": "2021-11-11 15:30:14 -0500", "message": "Update add provider init to the dynamic path"}, {"oid": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "committedDate": "2021-11-17 09:07:26 -0500", "message": "javadoc udpate"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970342", "body": "maybe overload the constructor to let the user pass in the cache size?", "bodyText": "maybe overload the constructor to let the user pass in the cache size?", "bodyHTML": "<p dir=\"auto\">maybe overload the constructor to let the user pass in the cache size?</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:21:35Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjI3OA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408976278", "bodyText": "This is used internally and is not intended to be configured / controlled by the user.", "author": "JohnTimm", "createdAt": "2020-04-15T16:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "21beff5026a437c3ba291decc9555fd540fbecbd", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 3b1fe9881e..a70be18da2 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -42,7 +44,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n     public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n \n     private final PersistenceHelper persistenceHelper;\n-    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+    private final Map<String, Map<String, List<FHIRRegistryResource>>> registryResourceMap = new ConcurrentHashMap<>();\n \n     public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n         try {\n", "next_change": {"commit": "557470aee0e286572ba9610b842aca85198dcb41", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex a70be18da2..2a550920b0 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -1,50 +1,44 @@\n /*\n- * (C) Copyright IBM Corp. 2020\n+ * (C) Copyright IBM Corp. 2020, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n package com.ibm.fhir.server.registry;\n \n-import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n-import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n-\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n-import java.util.concurrent.ConcurrentHashMap;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.stream.Collectors;\n \n-import com.ibm.fhir.config.FHIRRequestContext;\n-import com.ibm.fhir.core.util.LRUCache;\n import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.model.resource.SearchParameter;\n import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.code.ResourceType;\n import com.ibm.fhir.persistence.FHIRPersistence;\n import com.ibm.fhir.persistence.MultiResourceResult;\n import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n import com.ibm.fhir.persistence.helper.PersistenceHelper;\n-import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n-import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n import com.ibm.fhir.search.context.FHIRSearchContext;\n import com.ibm.fhir.search.util.SearchUtil;\n \n-public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider {\n     public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n \n     private final PersistenceHelper persistenceHelper;\n-    private final Map<String, Map<String, List<FHIRRegistryResource>>> registryResourceMap = new ConcurrentHashMap<>();\n \n     public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n         try {\n", "next_change": {"commit": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 2a550920b0..9bae54819e 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -40,6 +47,8 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n \n     private final PersistenceHelper persistenceHelper;\n \n+    private final Map<CacheKey, List<FHIRRegistryResource>> registryResourceCache = createCacheAsMap(1024, Duration.of(1, ChronoUnit.MINUTES));\n+\n     public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n         try {\n             this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n", "next_change": {"commit": "b3f10c83e3bdad3e95140dda9381319b906e1f81", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 9bae54819e..03a1ebb6eb 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -37,17 +38,17 @@ import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n import com.ibm.fhir.persistence.helper.PersistenceHelper;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n-import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.registry.spi.AbstractRegistryResourceProvider;\n import com.ibm.fhir.search.context.FHIRSearchContext;\n import com.ibm.fhir.search.util.SearchUtil;\n \n-public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider {\n+public class ServerRegistryResourceProvider extends AbstractRegistryResourceProvider {\n     public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n \n-    private final PersistenceHelper persistenceHelper;\n+    public static final String REGISTRY_RESOURCE_CACHE_NAME = \"com.ibm.fhir.server.registry.ServerRegistryResourceProvider.registryResourceCache\";\n+    public static final Configuration REGISTRY_RESOURCE_CACHE_CONFIGURATION = Configuration.of(1024, Duration.of(1, ChronoUnit.MINUTES));\n \n-    private final Map<CacheKey, List<FHIRRegistryResource>> registryResourceCache = createCacheAsMap(1024, Duration.of(1, ChronoUnit.MINUTES));\n+    private final PersistenceHelper persistenceHelper;\n \n     public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n         try {\n", "next_change": {"commit": "634e61f02756e8731c12be1196d876def7236c82", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 03a1ebb6eb..3932ad6490 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -49,21 +49,23 @@ public class ServerRegistryResourceProvider extends AbstractRegistryResourceProv\n     public static final Configuration REGISTRY_RESOURCE_CACHE_CONFIGURATION = Configuration.of(1024, Duration.of(1, ChronoUnit.MINUTES));\n \n     private final PersistenceHelper persistenceHelper;\n+    private final SearchUtil searchHelper;\n \n-    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n-        try {\n-            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n-        } catch (Exception e) {\n-            throw new Error(e);\n-        }\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper, SearchUtil searchHelper) {\n+        this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        this.searchHelper = Objects.requireNonNull(searchHelper);\n     }\n \n     @Override\n     protected List<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, String url) {\n         String dataStoreId = FHIRRequestContext.get().getDataStoreId();\n         CacheKey key = key(dataStoreId, url);\n-        Map<CacheKey, List<FHIRRegistryResource>> cacheAsMap = CacheManager.getCacheAsMap(REGISTRY_RESOURCE_CACHE_NAME, REGISTRY_RESOURCE_CACHE_CONFIGURATION);\n-        return cacheAsMap.computeIfAbsent(key, k -> computeRegistryResources(resourceType, url));\n+        try {\n+            Map<CacheKey, List<FHIRRegistryResource>> cacheAsMap = CacheManager.getCacheAsMap(REGISTRY_RESOURCE_CACHE_NAME, REGISTRY_RESOURCE_CACHE_CONFIGURATION);\n+            return cacheAsMap.computeIfAbsent(key, k -> computeRegistryResources(resourceType, url));\n+        } finally {\n+            CacheManager.reportCacheStats(log, REGISTRY_RESOURCE_CACHE_NAME);\n+        }\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "21beff5026a437c3ba291decc9555fd540fbecbd", "committedDate": "2020-05-11 18:56:41 -0400", "message": "Issue #1069 - make registry resource cache tenant-aware (#1071)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "071291da2a9ddd8d704c5b4ed3ae89380756a4cf", "committedDate": "2020-06-26 15:08:00 -0400", "message": "issue-1144 refactored to remove setSchema which exposes a transaction handling bug in Liberty"}, {"oid": "d547f26ea899ce12468faae9291b5d136b4ad023", "committedDate": "2021-03-12 16:20:34 -0600", "message": "Issue #1353 - Add support for _total search parameter"}, {"oid": "c40b8e17dedf291bc04978526cdbaff513a7a932", "committedDate": "2021-03-15 16:22:22 -0500", "message": "Issue #1353 - Updates after code review"}, {"oid": "9b8db1126c28089cfc878ef7c858ddfafa2c36a3", "committedDate": "2021-03-17 10:57:07 -0400", "message": "Issue #1980 - additional updates and clean-up"}, {"oid": "9fff88386232fe7f7b3bbb078458d6e3adeab025", "committedDate": "2021-03-18 11:26:43 -0400", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "557470aee0e286572ba9610b842aca85198dcb41", "committedDate": "2021-04-14 16:52:30 -0400", "message": "Issue #2198 - removed LRUCache class in favor of CacheSupport"}, {"oid": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "committedDate": "2021-04-15 17:13:58 -0400", "message": "Issue #2198 - tenant-aware caching"}, {"oid": "f987af6e0e43857bb3082c30a2f9d7dfcacf0f27", "committedDate": "2021-04-19 17:23:15 -0400", "message": "Issue #2198 - refactoring per PR review"}, {"oid": "d8f74df551d3013f48e2f2d9e7d44ac7080ae1c7", "committedDate": "2021-04-19 17:47:27 -0400", "message": "Issue #2198 - more refactoring"}, {"oid": "a46fa00a8c06ad012672248a1602248913916724", "committedDate": "2021-04-28 10:38:56 -0400", "message": "issue #2169 - change getValueConstant to getValueAsEnum and update project code (#2293)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "b3f10c83e3bdad3e95140dda9381319b906e1f81", "committedDate": "2021-05-19 17:39:58 -0400", "message": "Issue #2296 - miscellaneous updates (#2393)"}, {"oid": "5f6f379597609bd8f992d00ff930ec79f66d1852", "committedDate": "2021-09-23 11:54:30 -0400", "message": "Investigate cache stats / cache management #2733"}, {"oid": "5b643656f8437ed1c7e9315549fa09bb2cdfb1d3", "committedDate": "2021-10-04 21:46:20 -0400", "message": "Handle null values in fhir-server-config and throw for exceptional case (#2822)"}, {"oid": "92f29ccdfaea590e3bf4f633137b0dd0516924c2", "committedDate": "2022-01-01 17:28:18 +0000", "message": "issue #2027 alter persistence api to support null resource in results"}, {"oid": "ebbd34c162e665e47e0e0770e3f56f1761e0a3d7", "committedDate": "2022-01-04 09:05:02 +0000", "message": "issue #2027 updated copyright headers for 2022"}, {"oid": "634e61f02756e8731c12be1196d876def7236c82", "committedDate": "2022-03-05 15:54:03 -0500", "message": "issue #3385 - avoid reliance on statics for SearchUtil"}, {"oid": "427197ac6c2160f809b1e4e506948e7b4531a176", "committedDate": "2022-03-07 13:16:01 -0500", "message": "issue #3385 - renamed Util to Helper"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "5b03a77bc2c969f4cb108d85cc7362f64c39b3d5", "committedDate": "2022-05-11 22:34:02 -0400", "message": "issue #3289 - rationalize ResourceType and ResourceTypeCode (#3290)"}, {"oid": "19daa4c960db4917439c9221531995533a80d4a1", "committedDate": "2022-06-02 10:05:23 +0100", "message": "issue #3437 merge with main for R4B"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408973994", "body": "maybe a comment here to explain that getInstance() loads all the static providers", "bodyText": "maybe a comment here to explain that getInstance() loads all the static providers", "bodyHTML": "<p dir=\"auto\">maybe a comment here to explain that getInstance() loads all the static providers</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:27:14Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +131,14 @@ public void contextInitialized(ServletContextEvent event) {\n             log.fine(\"Initializing FHIRRegistry...\");\n             FHIRRegistry.getInstance();\n \n+            Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (serverRegistryResourceProviderEnabled) {\n+                log.info(\"Registering ServerRegistryResourceProvider...\");\n+                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n+                FHIRRegistry.getInstance().register(provider);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODgxNg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988816", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 7afd94b1e2..b44bf944f5 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -139,6 +209,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "28a6ad48105d0acb7747dc80c1ee1a2834ce29d8", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex b44bf944f5..c656a82cf3 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -209,20 +188,6 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "7ca7f7ed1a9707fca4a7d31a75b27d2ad3eeca9c", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex c656a82cf3..5a59a7b8fe 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -188,6 +198,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "809f55cbe99ea4d40ed38fe1a5da3cd24286d42b", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 5a59a7b8fe..d7a568d25a 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -198,20 +186,6 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "22b10795eab90d2a759e71f981f70e2b2595057c", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex d7a568d25a..cca6a759e9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -186,6 +195,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "f79a867e3e12230e4b218145d0e1a7cdcc152de1", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex cca6a759e9..2163a7ba33 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -204,7 +205,8 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 } else {\n                     Map<String, Object> map = new HashMap<>();\n                     propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    int timeLimit = fhirConfig.getIntProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT, GraphTermServiceProvider.DEFAULT_TIME_LIMIT);\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map), timeLimit);\n                     FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n                 }\n             }\n", "next_change": {"commit": "bc7c3c32f9811843c72a84216bd099f064e5096f", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 2163a7ba33..5f3966f2f9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -211,6 +220,61 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 }\n             }\n \n+            PropertyGroup termPropertyGroup = fhirConfig.getPropertyGroup(\"fhirServer/term\");\n+            if (termPropertyGroup != null) {\n+                Object[] remoteTermServiceProvidersArray = termPropertyGroup.getArrayProperty(\"remoteTermServiceProviders\");\n+                if (remoteTermServiceProvidersArray != null) {\n+                    for (Object remoteTermServiceProviderObject : remoteTermServiceProvidersArray) {\n+                        PropertyGroup remoteTermServiceProviderPropertyGroup = (PropertyGroup) remoteTermServiceProviderObject;\n+                        try {\n+                            Configuration.Builder builder = Configuration.builder();\n+\n+                            builder.base(remoteTermServiceProviderPropertyGroup.getStringProperty(\"base\"));\n+\n+                            PropertyGroup trustStorePropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"trustStore\");\n+                            if (trustStorePropertyGroup != null) {\n+                                builder.trustStore(TrustStore.builder()\n+                                    .location(trustStorePropertyGroup.getStringProperty(\"location\"))\n+                                    .password(trustStorePropertyGroup.getStringProperty(\"password\"))\n+                                    .type(trustStorePropertyGroup.getStringProperty(\"type\", TrustStore.DEFAULT_TYPE))\n+                                    .build());\n+                            }\n+\n+                            builder.hostnameVerificationEnabled(remoteTermServiceProviderPropertyGroup.getBooleanProperty(\"hostnameVerificationEnabled\", Configuration.DEFAULT_HOSTNAME_VERIFICATION_ENABLED));\n+\n+                            PropertyGroup basicAuthPropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"basicAuth\");\n+                            if (basicAuthPropertyGroup != null) {\n+                                builder.basicAuth(BasicAuth.builder()\n+                                    .username(basicAuthPropertyGroup.getStringProperty(\"username\"))\n+                                    .password(basicAuthPropertyGroup.getStringProperty(\"password\"))\n+                                    .build());\n+                            }\n+\n+                            builder.httpTimeout(remoteTermServiceProviderPropertyGroup.getIntProperty(\"httpTimeout\", Configuration.DEFAULT_HTTP_TIMEOUT));\n+\n+                            Object[] supportsArray = remoteTermServiceProviderPropertyGroup.getArrayProperty(\"supports\");\n+                            if (supportsArray != null) {\n+                                for (Object supportsObject : supportsArray) {\n+                                    PropertyGroup supportsPropertyGroup = (PropertyGroup) supportsObject;\n+                                    builder.supports(Supports.builder()\n+                                        .system(supportsPropertyGroup.getStringProperty(\"system\"))\n+                                        .version(supportsPropertyGroup.getStringProperty(\"version\"))\n+                                        .build());\n+                                }\n+                            }\n+\n+                            Configuration configuration = builder.build();\n+\n+                            RemoteTermServiceProvider remoteTermServiceProvider = new RemoteTermServiceProvider(configuration);\n+                            FHIRTermService.getInstance().addProvider(remoteTermServiceProvider);\n+                            remoteTermServiceProviders.add(remoteTermServiceProvider);\n+                        } catch (Exception e) {\n+                            log.log(Level.WARNING, \"Unable to create RemoteTermServiceProvider from configuration property group: \" + remoteTermServiceProviderPropertyGroup, e);\n+                        }\n+                    }\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "aa3901cdc664baaa6d5d29f270506d267d4463c0", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 5f3966f2f9..f995fc2847 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -200,80 +199,10 @@ public class FHIRServletContextListener implements ServletContextListener {\n             Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n             if (serverRegistryResourceProviderEnabled) {\n                 log.info(\"Registering ServerRegistryResourceProvider...\");\n-                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n-                FHIRRegistry.getInstance().addProvider(provider);\n-                FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n+                FHIRRegistry.getInstance().addProvider(new ServerRegistryResourceProvider(persistenceHelper));\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    int timeLimit = fhirConfig.getIntProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT, GraphTermServiceProvider.DEFAULT_TIME_LIMIT);\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map), timeLimit);\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n-            PropertyGroup termPropertyGroup = fhirConfig.getPropertyGroup(\"fhirServer/term\");\n-            if (termPropertyGroup != null) {\n-                Object[] remoteTermServiceProvidersArray = termPropertyGroup.getArrayProperty(\"remoteTermServiceProviders\");\n-                if (remoteTermServiceProvidersArray != null) {\n-                    for (Object remoteTermServiceProviderObject : remoteTermServiceProvidersArray) {\n-                        PropertyGroup remoteTermServiceProviderPropertyGroup = (PropertyGroup) remoteTermServiceProviderObject;\n-                        try {\n-                            Configuration.Builder builder = Configuration.builder();\n-\n-                            builder.base(remoteTermServiceProviderPropertyGroup.getStringProperty(\"base\"));\n-\n-                            PropertyGroup trustStorePropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"trustStore\");\n-                            if (trustStorePropertyGroup != null) {\n-                                builder.trustStore(TrustStore.builder()\n-                                    .location(trustStorePropertyGroup.getStringProperty(\"location\"))\n-                                    .password(trustStorePropertyGroup.getStringProperty(\"password\"))\n-                                    .type(trustStorePropertyGroup.getStringProperty(\"type\", TrustStore.DEFAULT_TYPE))\n-                                    .build());\n-                            }\n-\n-                            builder.hostnameVerificationEnabled(remoteTermServiceProviderPropertyGroup.getBooleanProperty(\"hostnameVerificationEnabled\", Configuration.DEFAULT_HOSTNAME_VERIFICATION_ENABLED));\n-\n-                            PropertyGroup basicAuthPropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"basicAuth\");\n-                            if (basicAuthPropertyGroup != null) {\n-                                builder.basicAuth(BasicAuth.builder()\n-                                    .username(basicAuthPropertyGroup.getStringProperty(\"username\"))\n-                                    .password(basicAuthPropertyGroup.getStringProperty(\"password\"))\n-                                    .build());\n-                            }\n-\n-                            builder.httpTimeout(remoteTermServiceProviderPropertyGroup.getIntProperty(\"httpTimeout\", Configuration.DEFAULT_HTTP_TIMEOUT));\n-\n-                            Object[] supportsArray = remoteTermServiceProviderPropertyGroup.getArrayProperty(\"supports\");\n-                            if (supportsArray != null) {\n-                                for (Object supportsObject : supportsArray) {\n-                                    PropertyGroup supportsPropertyGroup = (PropertyGroup) supportsObject;\n-                                    builder.supports(Supports.builder()\n-                                        .system(supportsPropertyGroup.getStringProperty(\"system\"))\n-                                        .version(supportsPropertyGroup.getStringProperty(\"version\"))\n-                                        .build());\n-                                }\n-                            }\n-\n-                            Configuration configuration = builder.build();\n-\n-                            RemoteTermServiceProvider remoteTermServiceProvider = new RemoteTermServiceProvider(configuration);\n-                            FHIRTermService.getInstance().addProvider(remoteTermServiceProvider);\n-                            remoteTermServiceProviders.add(remoteTermServiceProvider);\n-                        } catch (Exception e) {\n-                            log.log(Level.WARNING, \"Unable to create RemoteTermServiceProvider from configuration property group: \" + remoteTermServiceProviderPropertyGroup, e);\n-                        }\n-                    }\n-                }\n-            }\n+            configureTermServiceCapabilities(fhirConfig);\n \n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n", "next_change": {"commit": "8e589c46210614fafbd29e1defb8152751d7b5dc", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex f995fc2847..9dc06b39d8 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -202,6 +204,12 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRRegistry.getInstance().addProvider(new ServerRegistryResourceProvider(persistenceHelper));\n             }\n \n+            Boolean serverResolveFunctionEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_RESOLVE_FUNCTION_ENABLED, Boolean.FALSE);\n+            if (serverResolveFunctionEnabled) {\n+                log.info(\"Registering ServerResolveFunction...\");\n+                FHIRPathFunctionRegistry.getInstance().register(new ServerResolveFunction(persistenceHelper));\n+            }\n+\n             configureTermServiceCapabilities(fhirConfig);\n \n             // Finally, set our \"initComplete\" flag to true.\n", "next_change": {"commit": "338590ddfea42ba0958b899a30ea4cd3f478978a", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 9dc06b39d8..d9b43f085e 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -212,8 +219,11 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Finally, set our \"initComplete\" flag to true.\n+            // Set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n+\n+            // Now init is complete, tell all registered callbacks\n+            EventManagerImpl.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "3d12455051019e10dc6b24827b8a23a04d4b5d77", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex d9b43f085e..80d7382acd 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -223,7 +223,7 @@ public class FHIRServletContextListener implements ServletContextListener {\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n \n             // Now init is complete, tell all registered callbacks\n-            EventManagerImpl.serverReady(serviceManagerId);\n+            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "bcba89404d7752d545897bcd507bd0ed80b7a389", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 80d7382acd..69104abcc6 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -219,11 +221,8 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Set our \"initComplete\" flag to true.\n+            // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n-\n-            // Now init is complete, tell all registered callbacks\n-            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "1e8e6f4c1a2f8b8b3a57401f5aa26a21f84877f7", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 69104abcc6..3282e77006 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -221,8 +227,11 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Finally, set our \"initComplete\" flag to true.\n+            // Set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n+\n+            // Now init is complete, tell all registered callbacks\n+            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "967c57aa9cf105fb183cffbd6817af65227355c6", "committedDate": "2020-04-16 18:47:16 -0400", "message": "Cleanup NPE when the server starts with no fhir-server-config"}, {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99", "committedDate": "2020-04-22 00:00:59 -0400", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default"}, {"oid": "0908735c3bb710956c9f5f2158bf8e00805fce59", "committedDate": "2020-04-24 18:27:04 -0400", "message": "parent fd44bdd39e004256cf043b71f219fb613b981491 author ccorley <ccorley@us.ibm.com> 1585150915 -0500 committer ccorley <ccorley@us.ibm.com> 1587571679 -0500"}, {"oid": "267e0ec98d8877fe33ac16106e45a5922d24e389", "committedDate": "2020-04-30 07:16:02 -0500", "message": "Updated var names"}, {"oid": "38a6455c56e7cea72ac581f821cefbbc07c854ec", "committedDate": "2020-05-01 10:36:30 -0400", "message": "make useTLS true if the config prop is missing and fix docs"}, {"oid": "af28128989ec0a06127536c1798d7a6ab8a84451", "committedDate": "2020-05-01 11:08:06 -0400", "message": "use Boolean.TRUE to match current style"}, {"oid": "8a9527902f95e9d4b0569021381a0ab042f0324b", "committedDate": "2020-05-08 20:44:23 -0400", "message": "Sequence Lock Contention on Apache Derby #1038"}, {"oid": "87858a66d8c31d9b3e63af3bdc56e3b073087f4d", "committedDate": "2020-05-19 15:47:14 -0400", "message": "Improve Bulk and OAuth Support #1110"}, {"oid": "42d7af361135d264ad9be219d36844759405904b", "committedDate": "2020-05-21 09:07:59 -0400", "message": "issue 1110"}, {"oid": "6a7e5222b2b7ef9e05ba02e43695e86ac1f09586", "committedDate": "2020-05-21 14:04:20 -0400", "message": "issue #1110 - fixed message for java batch bootsrapping"}, {"oid": "ab5edee34105c60799c6b77de9179e79aad3361d", "committedDate": "2020-06-09 01:32:43 -0400", "message": "issue #1136 - reorg fhir-operation projects"}, {"oid": "071291da2a9ddd8d704c5b4ed3ae89380756a4cf", "committedDate": "2020-06-26 15:08:00 -0400", "message": "issue-1144 refactored to remove setSchema which exposes a transaction handling bug in Liberty"}, {"oid": "4460020daaf15e89809e3b2642d461c23498dfc3", "committedDate": "2020-06-30 15:27:16 -0400", "message": "issue-1144 additional review cleanup"}, {"oid": "c20868fe71f7f2e61b5dd98079b35c6be07af4dc", "committedDate": "2020-09-01 15:47:56 -0500", "message": "Issue #1421 - fix validation config, add documentation of new property"}, {"oid": "b9f8c5cc1c446cf18ad337327fa9e6e0ab74629b", "committedDate": "2020-09-30 11:10:51 -0500", "message": "issue #1445 - Initialize LanguageRegistry at startup"}, {"oid": "5b611c79856fd1fbd27cff7d703b95a2c747b925", "committedDate": "2020-10-18 11:00:17 -0400", "message": "issue #1366 reworked schema migration logic to avoid Liberty/Derby transaction defect"}, {"oid": "01a95d24049168144cbb0445deaa0277617b2e70", "committedDate": "2020-10-19 15:26:17 -0400", "message": "issue #1366 merge conflict resolution with latest master"}, {"oid": "a5b40e535517a45cc540b0ed2d13743a1243cda9", "committedDate": "2020-11-02 15:46:01 -0500", "message": "issue #916 static datasource option and make it the default"}, {"oid": "d343e20a0af25d2dcf00d70b247bc87a602350e2", "committedDate": "2020-11-03 14:29:37 -0500", "message": "issue #916 make proxy datasource the default config and fix jndi naming for bootstrap derby databases"}, {"oid": "9e91293c46a16dd46e78c189bc52dcb71c47dff1", "committedDate": "2020-11-06 14:12:55 -0500", "message": "issue #916 derby bootstrap must default using proxy datasource config"}, {"oid": "c757abe505ca0683b56f3e1ff0c2703efc945e9f", "committedDate": "2020-11-30 15:35:54 -0500", "message": "Add disable operation configuration #1753"}, {"oid": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "committedDate": "2021-02-26 13:55:02 -0500", "message": "Issue #1980 - Introduce fhir-term-graph module"}, {"oid": "28a6ad48105d0acb7747dc80c1ee1a2834ce29d8", "committedDate": "2021-02-26 17:08:44 -0600", "message": "issue #1408 - move advanced bootstrapping into CI (#1992)"}, {"oid": "7ca7f7ed1a9707fca4a7d31a75b27d2ad3eeca9c", "committedDate": "2021-03-02 15:07:06 -0500", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "bb3aa9fd298fccb197cd7861befff7207f1f93d2", "committedDate": "2021-03-02 15:20:08 -0500", "message": "Issue #1980 - removed unused import"}, {"oid": "809f55cbe99ea4d40ed38fe1a5da3cd24286d42b", "committedDate": "2021-03-03 00:07:42 -0500", "message": "issue 1683 and issue 2011 fixed migration for Postgres and added last_updated to xxx_logical_resources"}, {"oid": "22b10795eab90d2a759e71f981f70e2b2595057c", "committedDate": "2021-03-12 11:15:43 -0500", "message": "Merge pull request #2080 from IBM/main"}, {"oid": "f79a867e3e12230e4b218145d0e1a7cdcc152de1", "committedDate": "2021-03-15 14:51:51 -0400", "message": "Issue #1980 - added support for time limit"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "6b5e844b39abe0d17c0a0cd86d99a67989341d06", "committedDate": "2021-04-03 22:23:15 -0400", "message": "issue #923 - docker image updates"}, {"oid": "bc7c3c32f9811843c72a84216bd099f064e5096f", "committedDate": "2021-04-09 18:16:58 -0400", "message": "Issue #2198 - introduce fhir-term-remote module"}, {"oid": "7fc368245380f77dd20f2415b99b7e09928e7aad", "committedDate": "2021-04-13 16:01:35 -0400", "message": "Issue #2198 - added caching and better exception handling"}, {"oid": "557470aee0e286572ba9610b842aca85198dcb41", "committedDate": "2021-04-14 16:52:30 -0400", "message": "Issue #2198 - removed LRUCache class in favor of CacheSupport"}, {"oid": "9780651da77a02b292f653c981d0bf802931cc3f", "committedDate": "2021-04-14 17:47:19 -0400", "message": "Issue #2198 - added FHIRTermConfig to support cache enable/disable"}, {"oid": "33bacd29b12339febb8aba2af5b81d0f8a985bd7", "committedDate": "2021-04-14 19:14:25 -0400", "message": "Issue #2198 - added CacheManager, changed enabled -> disabled"}, {"oid": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "committedDate": "2021-04-15 17:13:58 -0400", "message": "Issue #2198 - tenant-aware caching"}, {"oid": "f987af6e0e43857bb3082c30a2f9d7dfcacf0f27", "committedDate": "2021-04-19 17:23:15 -0400", "message": "Issue #2198 - refactoring per PR review"}, {"oid": "d8f74df551d3013f48e2f2d9e7d44ac7080ae1c7", "committedDate": "2021-04-19 17:47:27 -0400", "message": "Issue #2198 - more refactoring"}, {"oid": "aa3901cdc664baaa6d5d29f270506d267d4463c0", "committedDate": "2021-04-20 09:08:46 -0400", "message": "Issue #2198 - updates per PR feedback"}, {"oid": "6381cfdf364bfb1fb653883065fa6894287592c6", "committedDate": "2021-04-20 18:05:04 -0400", "message": "Issue #2198 - miscellaneous updates (#2258)"}, {"oid": "d4a7538816320c473178631abfadc6520f632703", "committedDate": "2021-04-22 17:10:37 -0400", "message": "Issue #2269, #2271, #2198 - miscellaneous updates (#2270)"}, {"oid": "486e23b7914605898831d3eb248dd1840e268b11", "committedDate": "2021-04-23 09:59:48 -0400", "message": "null check for missing graphTermServiceProviders config (#2274)"}, {"oid": "8e589c46210614fafbd29e1defb8152751d7b5dc", "committedDate": "2021-05-19 12:51:51 -0400", "message": "Issue #2296 - implement server resolve function (#2375)"}, {"oid": "567eff3e73eaa77e162d48e9f6d9007c6a88da80", "committedDate": "2021-05-26 17:31:10 -0400", "message": "Issue #2431 - add support for headers in RemoteTermServiceProvider (#2435)"}, {"oid": "44c3dce9d46ab0f07d71fa62be04996d2b51c381", "committedDate": "2021-09-13 14:58:04 -0400", "message": "Update to the latest janusgraph and gremlin (#2755)"}, {"oid": "19afc25939d69bdce44702c9328704cdf890963a", "committedDate": "2021-10-07 09:06:36 +0100", "message": "issue-2837 deadlock issues with common values in Derby"}, {"oid": "b6591db5d16bd973192c27b2e511890d52875a93", "committedDate": "2021-10-11 08:49:03 -0400", "message": "Update with Model Config"}, {"oid": "338590ddfea42ba0958b899a30ea4cd3f478978a", "committedDate": "2021-10-12 16:19:13 +0100", "message": "issue-1869 fixes per review comments and a new lifecycle event for correct shutdown processing"}, {"oid": "3d12455051019e10dc6b24827b8a23a04d4b5d77", "committedDate": "2021-10-12 16:26:23 +0100", "message": "issue-1869 removed unused EventManager interface and renamed impl"}, {"oid": "bcba89404d7752d545897bcd507bd0ed80b7a389", "committedDate": "2021-10-13 09:49:57 +0100", "message": "issue-2837 merged main and resolved conflict in FHIRServletContextListener"}, {"oid": "1e8e6f4c1a2f8b8b3a57401f5aa26a21f84877f7", "committedDate": "2021-10-14 12:46:03 +0100", "message": "issue 1869 merged with main"}, {"oid": "543e9f5d30129cb672d4f7f0ac0022be97dd7cda", "committedDate": "2021-10-18 17:22:34 -0400", "message": "issue #2777 - bulkdata authz enforcement in fhir-smart"}, {"oid": "4e62a9409e9a70750a5a3c12de7d377233b4b327", "committedDate": "2021-10-19 13:56:45 -0400", "message": "Introduce fhir-server-spi"}, {"oid": "b424d4328639dbd046bddc13c4f4c14aadfb35d9", "committedDate": "2021-10-19 16:02:32 -0400", "message": "Per QA - updated error message"}, {"oid": "66c52fa3588544c4200af85f7778bf5fb7f33e58", "committedDate": "2021-10-22 15:16:15 -0400", "message": "Merge pull request #2785 from IBM/issue-2777"}, {"oid": "2dee31b3b61bb1ac348ed5ab6226f019ad50ca56", "committedDate": "2021-11-08 10:47:49 -0500", "message": "performance improvement for ModelSupport.getElementInfoMap (#2934)"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "634e61f02756e8731c12be1196d876def7236c82", "committedDate": "2022-03-05 15:54:03 -0500", "message": "issue #3385 - avoid reliance on statics for SearchUtil"}, {"oid": "427197ac6c2160f809b1e4e506948e7b4531a176", "committedDate": "2022-03-07 13:16:01 -0500", "message": "issue #3385 - renamed Util to Helper"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "c446a15e0d22b4109347028df86ce80710e54789", "committedDate": "2022-06-20 13:54:23 +0100", "message": "issue #3437 add instanceIdentifier to remote index messages and other review fixes"}, {"oid": "5d4e4e9be0b643cc0051e88ff22660874574262d", "committedDate": "2022-07-01 11:11:12 +0100", "message": "issue #3741 compare citus performance"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975804", "body": "Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead", "bodyText": "Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead", "bodyHTML": "<p dir=\"auto\">Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:29:57Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -36,13 +39,23 @@\n     private final List<FHIRRegistryResourceProvider> providers;\n \n     private FHIRRegistry() {\n-        providers = loadProviders();\n+        providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n+    /**\n+     * Register a provider\n+     *\n+     * @param provider\n+     *     the provider to register\n+     */\n+    public void register(FHIRRegistryResourceProvider provider) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODY5MA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988690", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -42,17 +42,30 @@ public final class FHIRRegistry {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n+    /**\n+     * Get the singleton instance of this class\n+     *\n+     * <p>This first time that this method is called, all registry resource providers made available through the\n+     * service loader are added to the registry\n+     *\n+     * @return\n+     *     the singleton instance of this class\n+     */\n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n     /**\n-     * Register a provider\n+     * Add a registry resource provider to the registry\n      *\n+     * @implNote\n+     *     This method should not be called by consumers that make their registry resource providers available through\n+     *     the service loader\n      * @param provider\n-     *     the provider to register\n+     *     the registry resource provider to be added\n      */\n     public void register(FHIRRegistryResourceProvider provider) {\n+        Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -42,17 +42,30 @@ public final class FHIRRegistry {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n+    /**\n+     * Get the singleton instance of this class\n+     *\n+     * <p>This first time that this method is called, all registry resource providers made available through the\n+     * service loader are added to the registry\n+     *\n+     * @return\n+     *     the singleton instance of this class\n+     */\n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n     /**\n-     * Register a provider\n+     * Add a registry resource provider to the registry\n      *\n+     * @implNote\n+     *     This method should not be called by consumers that make their registry resource providers available through\n+     *     the service loader\n      * @param provider\n-     *     the provider to register\n+     *     the registry resource provider to be added\n      */\n     public void register(FHIRRegistryResourceProvider provider) {\n+        Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n", "next_change": {"commit": "b7b48408b2ca1692a2f173a3318675fda505f212", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 1b2c9d2c34..1c6d139ae7 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -64,7 +68,7 @@ public final class FHIRRegistry {\n      * @param provider\n      *     the registry resource provider to be added\n      */\n-    public void register(FHIRRegistryResourceProvider provider) {\n+    public void addProvider(FHIRRegistryResourceProvider provider) {\n         Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n", "next_change": {"commit": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 1c6d139ae7..d37b38e44b 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -74,60 +61,69 @@ public final class FHIRRegistry {\n     }\n \n     /**\n-     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n+     * Get the latest version of a resource for the given url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the url\n      * @param resourceType\n      *     the resource type\n      * @return\n-     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n+     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n-    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n+    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n         if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n+            return null;\n         }\n \n-        String version = null;\n-        index = url.indexOf(\"|\");\n+        int index = url.indexOf(\"|\");\n         if (index != -1) {\n-            version = url.substring(index + 1);\n             url = url.substring(0, index);\n         }\n \n-        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n-        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n+        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n+        return (resource != null) ? resource.getVersion().toString() : null;\n     }\n \n     /**\n-     * Get the latest version of a resource for the given url and resource type\n+     * Get a map containing sets of type specific canonical URLs for all profile resources across all providers.\n      *\n-     * @param url\n-     *     the url\n-     * @param resourceType\n-     *     the resource type\n      * @return\n-     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n+     *     the map of sets\n      */\n-    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return null;\n+    public Map<String, Set<Canonical>> getProfiles() {\n+        Map<String, Set<Canonical>> map = new HashMap<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource r : provider.getProfileResources()) {\n+                map.computeIfAbsent(r.getType(), k -> new LinkedHashSet<>())\n+                    .add(Canonical.of(r.getUrl(), r.getVersion().toString()));\n+            }\n         }\n+        return map;\n+    }\n \n-        int index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n+    /**\n+     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n+     *\n+     * @param type\n+     *     the constrained resource type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n+     */\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        if (!ModelSupport.isResourceType(type)) {\n+            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n         }\n-\n-        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n-        return (resource != null) ? resource.getVersion().toString() : null;\n+        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            registryResources.addAll(provider.getProfileResources(type));\n+        }\n+        Collections.sort(registryResources);\n+        List<Canonical> profiles = new ArrayList<>();\n+        for (FHIRRegistryResource registryResource : registryResources) {\n+            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n+        }\n+        return Collections.unmodifiableList(profiles);\n     }\n \n     /**\n", "next_change": {"commit": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex d37b38e44b..3a851627db 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +130,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": {"commit": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 3a851627db..a8f939b499 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,6 +133,8 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n+     * @param providerName\n+     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "f99d231e4481ef29321c4c5829b8652e7316fc88", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex a8f939b499..62288c377a 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -133,8 +133,6 @@ public final class FHIRRegistry {\n      *     the canonical url (with optional version postfix)\n      * @param resourceType\n      *     the resource type\n-     * @param providerName\n-     *     the canonical class name of the provider that is calling get resources\n      * @return\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n", "next_change": {"commit": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 62288c377a..eca94070c0 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -130,7 +131,7 @@ public final class FHIRRegistry {\n      * Get the resource for the given canonical url and resource type\n      *\n      * @param url\n-     *     the canonical url (with optional version postfix)\n+     *     the canonical url (with optional version postfix and optional fragment id for contained resources)\n      * @param resourceType\n      *     the resource type\n      * @return\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "45e220f9cefd0eecfa803dfbd6776a79980db59e", "committedDate": "2020-05-14 13:46:24 -0400", "message": "Issue #1092 - look at all providers to determine latest version (#1095)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "3b1b52c59fbfe2e7c6617bb70d1661a847ef4be0", "committedDate": "2020-06-12 15:20:49 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "4b8a0cfca553572dec4e6a37ffabf98c969e59ba", "committedDate": "2021-03-18 14:17:39 -0400", "message": "Issue #1980 - updates"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "5fa8f939c9d735b62db82465a2c92c4ee0b0c62a", "committedDate": "2021-03-19 10:43:27 -0400", "message": "Issue #1980 - sort members"}, {"oid": "bd777dca4c61937e801019c137e4a60355d0175a", "committedDate": "2021-05-07 08:36:40 -0400", "message": "Issue #2290 - changed SearchParamType.ValueSet -> SearchParamType.Value"}, {"oid": "4fb5d81909a40293d4f8783c035b6207515ace3a", "committedDate": "2021-05-12 09:00:53 -0400", "message": "Issue #2342 - add support for TerminologyCapabilities (#2347)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "3f4f52a5f757bd1953e2ad7e12fb96e666d9439c", "committedDate": "2021-07-23 11:39:20 -0400", "message": "Miscellaneous updates (#2635)"}, {"oid": "95d1278d95698fa4d33c0b8cc0513e88ca6fbdec", "committedDate": "2021-11-08 21:13:29 -0500", "message": "issues #1625 and #1596 - apply search parameter filters on init (#2942)"}, {"oid": "0995e95d2f72ac3ba1b7aaea305e4c7b86db961a", "committedDate": "2021-11-10 13:57:37 -0500", "message": "Add support for looking up and skipping provider discovery"}, {"oid": "f99d231e4481ef29321c4c5829b8652e7316fc88", "committedDate": "2021-11-10 19:48:49 -0500", "message": "Apply suggestions from code review"}, {"oid": "83d05e4d53abfafbb8b8520f1def3e74d5365e1e", "committedDate": "2021-11-10 19:52:54 -0500", "message": "Updates per code review"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "8aad9a8a1451c1fb4f9f59659b43b5281859e47a", "committedDate": "2021-11-11 15:30:14 -0500", "message": "Update add provider init to the dynamic path"}, {"oid": "27a82bc37e8a7728efe4f286d9e71efba7df29b0", "committedDate": "2021-11-17 09:07:26 -0500", "message": "javadoc udpate"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408978859", "body": "Was debating whether INFO level here is appropriate...we try to be very sparse with those.", "bodyText": "Was debating whether INFO level here is appropriate...we try to be very sparse with those.", "bodyHTML": "<p dir=\"auto\">Was debating whether INFO level here is appropriate...we try to be very sparse with those.</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:34:57Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n+        try {\n+            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n+        List<FHIRRegistryResource> registryResources = registryResourceMap.computeIfAbsent(url, k -> computeRegistryResources(resourceType, url));\n+        if (!registryResources.isEmpty()) {\n+            if (version != null) {\n+                Version v = Version.from(version);\n+                for (FHIRRegistryResource resource : registryResources) {\n+                    if (resource.getVersion().equals(v)) {\n+                        return resource;\n+                    }\n+                }\n+                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n+            } else {\n+                return registryResources.get(registryResources.size() - 1);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        try {\n+            return getRegistryResources(resourceType, Collections.emptyMap());\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n+        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n+        return getRegistryResources(StructureDefinition.class, queryParameters);\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        return getRegistryResources(SearchParameter.class, queryParameters);\n+    }\n+\n+    @Override\n+    public void afterCreate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterUpdate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterDelete(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    private List<FHIRRegistryResource> computeRegistryResources(Class<? extends Resource> resourceType, String url) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .sorted()\n+                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount());\n+                registryResources.addAll(result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList()));\n+\n+                int pageNumber = 1;\n+                int lastPageNumber = searchContext.getLastPageNumber();\n+                while (pageNumber < lastPageNumber) {\n+                    searchContext.setPageNumber(++pageNumber);\n+                    result = persistence.search(context, resourceType);\n+                    registryResources.addAll(result.getResource().stream()\n+                            .map(ServerRegistryResource::from)\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList()));\n+                }\n+\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return Collections.unmodifiableList(registryResources);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n+        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n+            return;\n+        }\n+        Resource resource = event.getFhirResource();\n+        String url = getUrl(resource);\n+        if (url != null) {\n+            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            if (previous != null && !previous.isEmpty()) {\n+                log.info(\"Removed registry resource(s) with url: \" + url);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NjQ0NA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408986444", "bodyText": "As discussed on slack, please also make it clear we're just removing them from the cache...not from the registry or the db or something", "author": "lmsurpre", "createdAt": "2020-04-15T16:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTcwNw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991707", "bodyText": "Changed to fine", "author": "JohnTimm", "createdAt": "2020-04-15T16:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 3b1fe9881e..59d41a5ab8 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url: \" + url);\n             }\n         }\n     }\n", "next_change": {"commit": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 59d41a5ab8..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 3b1fe9881e..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": {"commit": "21beff5026a437c3ba291decc9555fd540fbecbd", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex b2c37942a9..a70be18da2 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -206,7 +212,10 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         Resource resource = event.getFhirResource();\n         String url = getUrl(resource);\n         if (url != null) {\n-            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dataStoreId = FHIRRequestContext.get().getDataStoreId();\n+            String key = tenantId + \":\" + dataStoreId;\n+            List<FHIRRegistryResource> previous = registryResourceMap.getOrDefault(key, Collections.emptyMap()).remove(url);\n             if (previous != null && !previous.isEmpty()) {\n                 log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n", "next_change": {"commit": "557470aee0e286572ba9610b842aca85198dcb41", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex a70be18da2..2a550920b0 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -198,27 +187,14 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n             log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n         } finally {\n             if (transactionHelper != null) {\n-                transactionHelper.rollback();\n+                try {\n+                    transactionHelper.rollback();\n+                } catch (FHIRPersistenceException e) {\n+                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n+                }\n             }\n         }\n \n         return Collections.emptyList();\n     }\n-\n-    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n-        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n-            return;\n-        }\n-        Resource resource = event.getFhirResource();\n-        String url = getUrl(resource);\n-        if (url != null) {\n-            String tenantId = FHIRRequestContext.get().getTenantId();\n-            String dataStoreId = FHIRRequestContext.get().getDataStoreId();\n-            String key = tenantId + \":\" + dataStoreId;\n-            List<FHIRRegistryResource> previous = registryResourceMap.getOrDefault(key, Collections.emptyMap()).remove(url);\n-            if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\ndeleted file mode 100644\nindex 2a550920b0..0000000000\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ /dev/null\n", "chunk": "@@ -1,200 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2020, 2021\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.server.registry;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.stream.Collectors;\n-\n-import com.ibm.fhir.model.resource.Resource;\n-import com.ibm.fhir.model.resource.SearchParameter;\n-import com.ibm.fhir.model.resource.StructureDefinition;\n-import com.ibm.fhir.model.type.code.ResourceType;\n-import com.ibm.fhir.persistence.FHIRPersistence;\n-import com.ibm.fhir.persistence.MultiResourceResult;\n-import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n-import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n-import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n-import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n-import com.ibm.fhir.persistence.helper.PersistenceHelper;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n-import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n-import com.ibm.fhir.search.context.FHIRSearchContext;\n-import com.ibm.fhir.search.util.SearchUtil;\n-\n-public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider {\n-    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n-\n-    private final PersistenceHelper persistenceHelper;\n-\n-    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n-        try {\n-            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n-        } catch (Exception e) {\n-            throw new Error(e);\n-        }\n-    }\n-\n-    @Override\n-    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n-        List<FHIRRegistryResource> registryResources = getRegistryResources(resourceType, url);\n-        if (!registryResources.isEmpty()) {\n-            if (version != null) {\n-                Version v = Version.from(version);\n-                for (FHIRRegistryResource resource : registryResources) {\n-                    if (resource.getVersion().equals(v)) {\n-                        return resource;\n-                    }\n-                }\n-                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n-            } else {\n-                return registryResources.get(registryResources.size() - 1);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n-        try {\n-            return getRegistryResources(resourceType, Collections.emptyMap());\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        }\n-        return Collections.emptyList();\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getRegistryResources() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getProfileResources() {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        String types = Arrays.asList(ResourceType.ValueSet.values()).stream().map(r -> r.value()).collect(Collectors.joining(\",\"));\n-        queryParameters.put(\"type\", Collections.singletonList(types));\n-        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n-        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n-        return getRegistryResources(StructureDefinition.class, queryParameters);\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        queryParameters.put(\"type\", Collections.singletonList(type));\n-        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n-        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n-        return getRegistryResources(StructureDefinition.class, queryParameters);\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        queryParameters.put(\"type\", Collections.singletonList(type));\n-        return getRegistryResources(SearchParameter.class, queryParameters);\n-    }\n-\n-    private List<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, String url) {\n-        FHIRTransactionHelper transactionHelper = null;\n-        try {\n-            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n-            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n-\n-            transactionHelper.begin();\n-\n-            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n-            searchContext.setPageSize(1000);\n-\n-            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n-\n-            if (result.isSuccess()) {\n-                transactionHelper.commit();\n-                transactionHelper = null;\n-\n-                return result.getResource().stream()\n-                        .map(FHIRRegistryResource::from)\n-                        .filter(Objects::nonNull)\n-                        .sorted()\n-                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-            }\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        } finally {\n-            if (transactionHelper != null) {\n-                try {\n-                    transactionHelper.rollback();\n-                } catch (FHIRPersistenceException e) {\n-                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n-                }\n-            }\n-        }\n-        return Collections.emptyList();\n-    }\n-\n-    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n-        FHIRTransactionHelper transactionHelper = null;\n-        try {\n-            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n-            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n-\n-            transactionHelper.begin();\n-\n-            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n-            searchContext.setPageSize(1000);\n-\n-            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n-\n-            if (result.isSuccess()) {\n-                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount() != null ? searchContext.getTotalCount() : result.getResource().size());\n-                registryResources.addAll(result.getResource().stream()\n-                        .map(FHIRRegistryResource::from)\n-                        .filter(Objects::nonNull)\n-                        .collect(Collectors.toList()));\n-\n-                int pageNumber = 1;\n-                int lastPageNumber = searchContext.getLastPageNumber();\n-                while (pageNumber < lastPageNumber) {\n-                    searchContext.setPageNumber(++pageNumber);\n-                    result = persistence.search(context, resourceType);\n-                    registryResources.addAll(result.getResource().stream()\n-                            .map(FHIRRegistryResource::from)\n-                            .filter(Objects::nonNull)\n-                            .collect(Collectors.toList()));\n-                }\n-\n-                transactionHelper.commit();\n-                transactionHelper = null;\n-\n-                return Collections.unmodifiableList(registryResources);\n-            }\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        } finally {\n-            if (transactionHelper != null) {\n-                try {\n-                    transactionHelper.rollback();\n-                } catch (FHIRPersistenceException e) {\n-                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n-                }\n-            }\n-        }\n-\n-        return Collections.emptyList();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "21beff5026a437c3ba291decc9555fd540fbecbd", "committedDate": "2020-05-11 18:56:41 -0400", "message": "Issue #1069 - make registry resource cache tenant-aware (#1071)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "071291da2a9ddd8d704c5b4ed3ae89380756a4cf", "committedDate": "2020-06-26 15:08:00 -0400", "message": "issue-1144 refactored to remove setSchema which exposes a transaction handling bug in Liberty"}, {"oid": "d547f26ea899ce12468faae9291b5d136b4ad023", "committedDate": "2021-03-12 16:20:34 -0600", "message": "Issue #1353 - Add support for _total search parameter"}, {"oid": "c40b8e17dedf291bc04978526cdbaff513a7a932", "committedDate": "2021-03-15 16:22:22 -0500", "message": "Issue #1353 - Updates after code review"}, {"oid": "9b8db1126c28089cfc878ef7c858ddfafa2c36a3", "committedDate": "2021-03-17 10:57:07 -0400", "message": "Issue #1980 - additional updates and clean-up"}, {"oid": "9fff88386232fe7f7b3bbb078458d6e3adeab025", "committedDate": "2021-03-18 11:26:43 -0400", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "557470aee0e286572ba9610b842aca85198dcb41", "committedDate": "2021-04-14 16:52:30 -0400", "message": "Issue #2198 - removed LRUCache class in favor of CacheSupport"}, {"oid": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "committedDate": "2021-04-15 17:13:58 -0400", "message": "Issue #2198 - tenant-aware caching"}, {"oid": "f987af6e0e43857bb3082c30a2f9d7dfcacf0f27", "committedDate": "2021-04-19 17:23:15 -0400", "message": "Issue #2198 - refactoring per PR review"}, {"oid": "d8f74df551d3013f48e2f2d9e7d44ac7080ae1c7", "committedDate": "2021-04-19 17:47:27 -0400", "message": "Issue #2198 - more refactoring"}, {"oid": "a46fa00a8c06ad012672248a1602248913916724", "committedDate": "2021-04-28 10:38:56 -0400", "message": "issue #2169 - change getValueConstant to getValueAsEnum and update project code (#2293)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "b3f10c83e3bdad3e95140dda9381319b906e1f81", "committedDate": "2021-05-19 17:39:58 -0400", "message": "Issue #2296 - miscellaneous updates (#2393)"}, {"oid": "5f6f379597609bd8f992d00ff930ec79f66d1852", "committedDate": "2021-09-23 11:54:30 -0400", "message": "Investigate cache stats / cache management #2733"}, {"oid": "5b643656f8437ed1c7e9315549fa09bb2cdfb1d3", "committedDate": "2021-10-04 21:46:20 -0400", "message": "Handle null values in fhir-server-config and throw for exceptional case (#2822)"}, {"oid": "92f29ccdfaea590e3bf4f633137b0dd0516924c2", "committedDate": "2022-01-01 17:28:18 +0000", "message": "issue #2027 alter persistence api to support null resource in results"}, {"oid": "ebbd34c162e665e47e0e0770e3f56f1761e0a3d7", "committedDate": "2022-01-04 09:05:02 +0000", "message": "issue #2027 updated copyright headers for 2022"}, {"oid": "634e61f02756e8731c12be1196d876def7236c82", "committedDate": "2022-03-05 15:54:03 -0500", "message": "issue #3385 - avoid reliance on statics for SearchUtil"}, {"oid": "427197ac6c2160f809b1e4e506948e7b4531a176", "committedDate": "2022-03-07 13:16:01 -0500", "message": "issue #3385 - renamed Util to Helper"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "5b03a77bc2c969f4cb108d85cc7362f64c39b3d5", "committedDate": "2022-05-11 22:34:02 -0400", "message": "issue #3289 - rationalize ResourceType and ResourceTypeCode (#3290)"}, {"oid": "19daa4c960db4917439c9221531995533a80d4a1", "committedDate": "2022-06-02 10:05:23 +0100", "message": "issue #3437 merge with main for R4B"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"oid": "a9796bd65cc265950463b7ec06fae8f973627c92", "url": "https://github.com/IBM/FHIR/commit/a9796bd65cc265950463b7ec06fae8f973627c92", "message": "Issue #889 - changes per PR feedback\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-15T16:59:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDExMg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r409010112", "body": "```suggestion\r\n                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.fine(\"Removed registry resource(s) with url: \" + url);\n          \n          \n            \n                            log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                log<span class=\"pl-k\">.</span>fine(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Removed registry resource(s) with url<span class=\"x x-first x-last\">: </span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> url);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                log<span class=\"pl-k\">.</span>fine(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Removed registry resource(s) with url<span class=\"x x-first x-last\"> '</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> url<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">' from the ServerRegistryResourceProvider cache</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lmsurpre", "createdAt": "2020-04-15T17:25:05Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -208,7 +208,7 @@ private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url: \" + url);", "originalCommit": "a9796bd65cc265950463b7ec06fae8f973627c92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 59d41a5ab8..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 59d41a5ab8..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": {"commit": "21beff5026a437c3ba291decc9555fd540fbecbd", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex b2c37942a9..a70be18da2 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -206,7 +212,10 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         Resource resource = event.getFhirResource();\n         String url = getUrl(resource);\n         if (url != null) {\n-            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dataStoreId = FHIRRequestContext.get().getDataStoreId();\n+            String key = tenantId + \":\" + dataStoreId;\n+            List<FHIRRegistryResource> previous = registryResourceMap.getOrDefault(key, Collections.emptyMap()).remove(url);\n             if (previous != null && !previous.isEmpty()) {\n                 log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n", "next_change": {"commit": "557470aee0e286572ba9610b842aca85198dcb41", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex a70be18da2..2a550920b0 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -198,27 +187,14 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n             log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n         } finally {\n             if (transactionHelper != null) {\n-                transactionHelper.rollback();\n+                try {\n+                    transactionHelper.rollback();\n+                } catch (FHIRPersistenceException e) {\n+                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n+                }\n             }\n         }\n \n         return Collections.emptyList();\n     }\n-\n-    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n-        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n-            return;\n-        }\n-        Resource resource = event.getFhirResource();\n-        String url = getUrl(resource);\n-        if (url != null) {\n-            String tenantId = FHIRRequestContext.get().getTenantId();\n-            String dataStoreId = FHIRRequestContext.get().getDataStoreId();\n-            String key = tenantId + \":\" + dataStoreId;\n-            List<FHIRRegistryResource> previous = registryResourceMap.getOrDefault(key, Collections.emptyMap()).remove(url);\n-            if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\ndeleted file mode 100644\nindex 2a550920b0..0000000000\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ /dev/null\n", "chunk": "@@ -1,200 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2020, 2021\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.server.registry;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.stream.Collectors;\n-\n-import com.ibm.fhir.model.resource.Resource;\n-import com.ibm.fhir.model.resource.SearchParameter;\n-import com.ibm.fhir.model.resource.StructureDefinition;\n-import com.ibm.fhir.model.type.code.ResourceType;\n-import com.ibm.fhir.persistence.FHIRPersistence;\n-import com.ibm.fhir.persistence.MultiResourceResult;\n-import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n-import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n-import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n-import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n-import com.ibm.fhir.persistence.helper.PersistenceHelper;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n-import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n-import com.ibm.fhir.search.context.FHIRSearchContext;\n-import com.ibm.fhir.search.util.SearchUtil;\n-\n-public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider {\n-    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n-\n-    private final PersistenceHelper persistenceHelper;\n-\n-    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n-        try {\n-            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n-        } catch (Exception e) {\n-            throw new Error(e);\n-        }\n-    }\n-\n-    @Override\n-    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n-        List<FHIRRegistryResource> registryResources = getRegistryResources(resourceType, url);\n-        if (!registryResources.isEmpty()) {\n-            if (version != null) {\n-                Version v = Version.from(version);\n-                for (FHIRRegistryResource resource : registryResources) {\n-                    if (resource.getVersion().equals(v)) {\n-                        return resource;\n-                    }\n-                }\n-                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n-            } else {\n-                return registryResources.get(registryResources.size() - 1);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n-        try {\n-            return getRegistryResources(resourceType, Collections.emptyMap());\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        }\n-        return Collections.emptyList();\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getRegistryResources() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getProfileResources() {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        String types = Arrays.asList(ResourceType.ValueSet.values()).stream().map(r -> r.value()).collect(Collectors.joining(\",\"));\n-        queryParameters.put(\"type\", Collections.singletonList(types));\n-        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n-        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n-        return getRegistryResources(StructureDefinition.class, queryParameters);\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        queryParameters.put(\"type\", Collections.singletonList(type));\n-        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n-        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n-        return getRegistryResources(StructureDefinition.class, queryParameters);\n-    }\n-\n-    @Override\n-    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n-        Map<String, List<String>> queryParameters = new HashMap<>();\n-        queryParameters.put(\"type\", Collections.singletonList(type));\n-        return getRegistryResources(SearchParameter.class, queryParameters);\n-    }\n-\n-    private List<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, String url) {\n-        FHIRTransactionHelper transactionHelper = null;\n-        try {\n-            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n-            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n-\n-            transactionHelper.begin();\n-\n-            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n-            searchContext.setPageSize(1000);\n-\n-            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n-\n-            if (result.isSuccess()) {\n-                transactionHelper.commit();\n-                transactionHelper = null;\n-\n-                return result.getResource().stream()\n-                        .map(FHIRRegistryResource::from)\n-                        .filter(Objects::nonNull)\n-                        .sorted()\n-                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-            }\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        } finally {\n-            if (transactionHelper != null) {\n-                try {\n-                    transactionHelper.rollback();\n-                } catch (FHIRPersistenceException e) {\n-                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n-                }\n-            }\n-        }\n-        return Collections.emptyList();\n-    }\n-\n-    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n-        FHIRTransactionHelper transactionHelper = null;\n-        try {\n-            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n-            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n-\n-            transactionHelper.begin();\n-\n-            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n-            searchContext.setPageSize(1000);\n-\n-            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n-\n-            if (result.isSuccess()) {\n-                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount() != null ? searchContext.getTotalCount() : result.getResource().size());\n-                registryResources.addAll(result.getResource().stream()\n-                        .map(FHIRRegistryResource::from)\n-                        .filter(Objects::nonNull)\n-                        .collect(Collectors.toList()));\n-\n-                int pageNumber = 1;\n-                int lastPageNumber = searchContext.getLastPageNumber();\n-                while (pageNumber < lastPageNumber) {\n-                    searchContext.setPageNumber(++pageNumber);\n-                    result = persistence.search(context, resourceType);\n-                    registryResources.addAll(result.getResource().stream()\n-                            .map(FHIRRegistryResource::from)\n-                            .filter(Objects::nonNull)\n-                            .collect(Collectors.toList()));\n-                }\n-\n-                transactionHelper.commit();\n-                transactionHelper = null;\n-\n-                return Collections.unmodifiableList(registryResources);\n-            }\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n-        } finally {\n-            if (transactionHelper != null) {\n-                try {\n-                    transactionHelper.rollback();\n-                } catch (FHIRPersistenceException e) {\n-                    log.log(Level.WARNING, \"An error occurred ending the current transaction\", e);\n-                }\n-            }\n-        }\n-\n-        return Collections.emptyList();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "21beff5026a437c3ba291decc9555fd540fbecbd", "committedDate": "2020-05-11 18:56:41 -0400", "message": "Issue #1069 - make registry resource cache tenant-aware (#1071)"}, {"oid": "59ef9a07f9501dfea2e1a68103cb8d545e3ba5e0", "committedDate": "2020-06-12 10:57:21 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727", "committedDate": "2020-06-12 14:51:20 -0400", "message": "Capability Statement Takes Too Long #1210"}, {"oid": "071291da2a9ddd8d704c5b4ed3ae89380756a4cf", "committedDate": "2020-06-26 15:08:00 -0400", "message": "issue-1144 refactored to remove setSchema which exposes a transaction handling bug in Liberty"}, {"oid": "d547f26ea899ce12468faae9291b5d136b4ad023", "committedDate": "2021-03-12 16:20:34 -0600", "message": "Issue #1353 - Add support for _total search parameter"}, {"oid": "c40b8e17dedf291bc04978526cdbaff513a7a932", "committedDate": "2021-03-15 16:22:22 -0500", "message": "Issue #1353 - Updates after code review"}, {"oid": "9b8db1126c28089cfc878ef7c858ddfafa2c36a3", "committedDate": "2021-03-17 10:57:07 -0400", "message": "Issue #1980 - additional updates and clean-up"}, {"oid": "9fff88386232fe7f7b3bbb078458d6e3adeab025", "committedDate": "2021-03-18 11:26:43 -0400", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "557470aee0e286572ba9610b842aca85198dcb41", "committedDate": "2021-04-14 16:52:30 -0400", "message": "Issue #2198 - removed LRUCache class in favor of CacheSupport"}, {"oid": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "committedDate": "2021-04-15 17:13:58 -0400", "message": "Issue #2198 - tenant-aware caching"}, {"oid": "f987af6e0e43857bb3082c30a2f9d7dfcacf0f27", "committedDate": "2021-04-19 17:23:15 -0400", "message": "Issue #2198 - refactoring per PR review"}, {"oid": "d8f74df551d3013f48e2f2d9e7d44ac7080ae1c7", "committedDate": "2021-04-19 17:47:27 -0400", "message": "Issue #2198 - more refactoring"}, {"oid": "a46fa00a8c06ad012672248a1602248913916724", "committedDate": "2021-04-28 10:38:56 -0400", "message": "issue #2169 - change getValueConstant to getValueAsEnum and update project code (#2293)"}, {"oid": "b3c439320ee19da02b3fc4770bec26b90dc05c11", "committedDate": "2021-05-13 11:23:40 -0400", "message": "Issue #2356 - add support for default version of registry resources (#2360)"}, {"oid": "b3f10c83e3bdad3e95140dda9381319b906e1f81", "committedDate": "2021-05-19 17:39:58 -0400", "message": "Issue #2296 - miscellaneous updates (#2393)"}, {"oid": "5f6f379597609bd8f992d00ff930ec79f66d1852", "committedDate": "2021-09-23 11:54:30 -0400", "message": "Investigate cache stats / cache management #2733"}, {"oid": "5b643656f8437ed1c7e9315549fa09bb2cdfb1d3", "committedDate": "2021-10-04 21:46:20 -0400", "message": "Handle null values in fhir-server-config and throw for exceptional case (#2822)"}, {"oid": "92f29ccdfaea590e3bf4f633137b0dd0516924c2", "committedDate": "2022-01-01 17:28:18 +0000", "message": "issue #2027 alter persistence api to support null resource in results"}, {"oid": "ebbd34c162e665e47e0e0770e3f56f1761e0a3d7", "committedDate": "2022-01-04 09:05:02 +0000", "message": "issue #2027 updated copyright headers for 2022"}, {"oid": "634e61f02756e8731c12be1196d876def7236c82", "committedDate": "2022-03-05 15:54:03 -0500", "message": "issue #3385 - avoid reliance on statics for SearchUtil"}, {"oid": "427197ac6c2160f809b1e4e506948e7b4531a176", "committedDate": "2022-03-07 13:16:01 -0500", "message": "issue #3385 - renamed Util to Helper"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "5b03a77bc2c969f4cb108d85cc7362f64c39b3d5", "committedDate": "2022-05-11 22:34:02 -0400", "message": "issue #3289 - rationalize ResourceType and ResourceTypeCode (#3290)"}, {"oid": "19daa4c960db4917439c9221531995533a80d4a1", "committedDate": "2022-06-02 10:05:23 +0100", "message": "issue #3437 merge with main for R4B"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"oid": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "url": "https://github.com/IBM/FHIR/commit/862315bd01fbd4e8533307a528b6b9ee75a1aa74", "message": "Update fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\r\n\r\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>\n\nCo-Authored-By: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-04-15T17:28:33Z", "type": "commit"}]}