{"pr_number": 254, "pr_title": "Improve code formatting and optimize imports", "pr_author": "TobiGr", "pr_createdAt": "2020-02-08T23:01:29Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376815186", "body": "below:\r\n// -2 because well the testing system will then know its the regex that failed :/\r\nwill consequently know that the regex failed", "bodyText": "below:\n// -2 because well the testing system will then know its the regex that failed :/\nwill consequently know that the regex failed", "bodyHTML": "<p dir=\"auto\">below:<br>\n// -2 because well the testing system will then know its the regex that failed :/<br>\nwill consequently know that the regex failed</p>", "author": "B0pol", "createdAt": "2020-02-09T21:03:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyODA2Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376928067", "bodyText": "I don't understand what you mean. Can you explain in more detail please?", "author": "TobiGr", "createdAt": "2020-02-10T08:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTQ1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376929452", "bodyText": "Below this line there is a comment\n// -2 because well the testing system will then know its the regex that failed\nI suggest to reword it to\n// -2 because the testing system will consequently know that the regex failed", "author": "B0pol", "createdAt": "2020-02-10T08:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNzEwMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379827102", "bodyText": "Done", "author": "TobiGr", "createdAt": "2020-02-15T11:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -325,7 +302,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n-     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -302,6 +325,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -162,179 +181,232 @@ public abstract class StreamExtractor extends Extractor {\n      * The name of the creator/uploader of the stream.\n      * If the name is not available you can simply return an empty string.\n      *\n-     * @return the name of the creator/uploader of the stream or an empty String\n-     * @throws ParsingException\n+     * @return the name of the creator/uploader of the stream or an empty tring\n      */\n     @Nonnull\n     public abstract String getUploaderName() throws ParsingException;\n \n+    /**\n+     * Whether the uploader has been verified by the service's provider.\n+     * If there is no verification implemented, return <code>false</code>.\n+     *\n+     * @return whether the uploader has been verified by the service's provider\n+     */\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n+    /**\n+     * The subscriber count of the uploader.\n+     * If the subscriber count is not implemented, or is unavailable, return <code>-1</code>.\n+     *\n+     * @return the subscriber count of the uploader or {@value UNKNOWN_SUBSCRIBER_COUNT} if not\n+     * available\n+     */\n+    public long getUploaderSubscriberCount() throws ParsingException {\n+        return UNKNOWN_SUBSCRIBER_COUNT;\n+    }\n+\n     /**\n      * The url to the image file/profile picture/avatar of the creator/uploader of the stream.\n      * If the url is not available you can return an empty String.\n      *\n      * @return The url of the image file of the uploader or an empty String\n-     * @throws ParsingException\n      */\n     @Nonnull\n-    public abstract String getUploaderAvatarUrl() throws ParsingException;\n+    public String getUploaderAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The Url to the page of the sub-channel of the stream. This must not be a homepage,\n+     * but the page offered by the service the extractor handles. This url will be handled by the\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n+     *\n+     * @return the url to the page of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The name of the sub-channel of the stream.\n+     * If the name is not available you can simply return an empty string.\n+     *\n+     * @return the name of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The url to the image file/profile picture/avatar of the sub-channel of the stream.\n+     * If the url is not available you can return an empty String.\n+     *\n+     * @return The url of the image file of the sub-channel or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n      * Get the dash mpd url. If you don't know what a dash MPD is you can read about it\n      * <a href=\"https://www.brendanlong.com/the-structure-of-an-mpeg-dash-mpd.html\">here</a>.\n      *\n-     * @return the url as a string or an empty string\n+     * @return the url as a string or an empty string or an empty string if not available\n      * @throws ParsingException if an error occurs while reading\n      */\n     @Nonnull\n-    public abstract String getDashMpdUrl() throws ParsingException;\n+    public String getDashMpdUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * I am not sure if this is in use, and how this is used. However the frontend is missing support\n-     * for HLS streams. Prove me if I am wrong. Please open an\n+     * I am not sure if this is in use, and how this is used. However the frontend is missing\n+     * support for HLS streams. Prove me if I am wrong. Please open an\n      * <a href=\"https://github.com/teamnewpipe/newpipe/issues\">issue</a>,\n      * or fix this description if you know whats up with this.\n      *\n-     * @return The Url to the hls stream.\n-     * @throws ParsingException\n+     * @return The Url to the hls stream or an empty string if not available.\n      */\n     @Nonnull\n-    public abstract String getHlsUrl() throws ParsingException;\n+    public String getHlsUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/AudioStream.html\">AudioStream</a>s\n+     * This should return a list of available {@link AudioStream}s.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of audio only streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<AudioStream> getAudioStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of combined video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s.\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do NOT contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle\n+     * this as a failed extraction procedure.\n      *\n      * @return a list of video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoOnlyStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * If no subtitles are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s.\n+     * If no subtitles are available an empty list can be returned.\n      *\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * given by a specific type.\n-     * If no subtitles in that specific format are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s given by a specific type.\n+     * If no subtitles in that specific format are available an empty list can be returned.\n      *\n      * @param format the media format by which the subtitles should be filtered\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitles(MediaFormat format) throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitles(final MediaFormat format)\n+            throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     * Get the {@link StreamType}.\n      *\n      * @return the type of the stream\n-     * @throws ParsingException\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    @Nullable\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n+\n+    /**\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else {\n+            return null;\n+        }\n+    }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -342,33 +414,29 @@ public abstract class StreamExtractor extends Extractor {\n             return -2;\n         }\n \n-        if (!timeStamp.isEmpty()) {\n+        if (!timestamp.isEmpty()) {\n             try {\n                 String secondsString = \"\";\n                 String minutesString = \"\";\n                 String hoursString = \"\";\n                 try {\n-                    secondsString = Parser.matchGroup1(\"(\\\\d{1,3})s\", timeStamp);\n-                    minutesString = Parser.matchGroup1(\"(\\\\d{1,3})m\", timeStamp);\n-                    hoursString = Parser.matchGroup1(\"(\\\\d{1,3})h\", timeStamp);\n-                } catch (Exception e) {\n-                    //it could be that time is given in another method\n-                    if (secondsString.isEmpty() //if nothing was got,\n-                            && minutesString.isEmpty()//treat as unlabelled seconds\n-                            && hoursString.isEmpty()) {\n-                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timeStamp);\n+                    secondsString = Parser.matchGroup1(\"(\\\\d+)s\", timestamp);\n+                    minutesString = Parser.matchGroup1(\"(\\\\d+)m\", timestamp);\n+                    hoursString = Parser.matchGroup1(\"(\\\\d+)h\", timestamp);\n+                } catch (final Exception e) {\n+                    // it could be that time is given in another method\n+                    if (secondsString.isEmpty() && minutesString.isEmpty()) {\n+                        // if nothing was obtained, treat as unlabelled seconds\n+                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timestamp);\n                     }\n                 }\n \n-                int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n-                int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n-                int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n+                final int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n+                final int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n+                final int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n \n-                //don't trust BODMAS!\n-                return seconds + (60 * minutes) + (3600 * hours);\n-                //Log.d(TAG, \"derived timestamp value:\"+ret);\n-                //the ordering varies internationally\n-            } catch (ParsingException e) {\n+                return seconds + (60L * minutes) + (3600L * hours);\n+            } catch (final ParsingException e) {\n                 throw new ParsingException(\"Could not get timestamp.\", e);\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg0NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818845", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated constructor stub", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO Auto-generated constructor stub</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:52:23Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java", "diffHunk": "@@ -10,20 +8,22 @@\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.utils.ExtractorHelper;\n \n-public class CommentsInfo extends ListInfo<CommentsInfoItem>{\n+import java.io.IOException;\n+\n+public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n+\n+    private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n+        super(serviceId, listUrlIdHandler, name);\n+        // TODO Auto-generated constructor stub", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex d5f4c434..e07c6746 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -14,7 +14,6 @@ public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n \n     private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n         super(serviceId, listUrlIdHandler, name);\n-        // TODO Auto-generated constructor stub\n     }\n \n     public static CommentsInfo getInfo(String url) throws IOException, ExtractionException {\n", "next_change": {"commit": "688a1c316bb40c3536c2a003a07ad7e8462eef26", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex e07c6746..8803aa57 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -12,60 +13,79 @@ import java.io.IOException;\n \n public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n \n-    private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n+    private CommentsInfo(\n+            final int serviceId,\n+            final ListLinkHandler listUrlIdHandler,\n+            final String name) {\n         super(serviceId, listUrlIdHandler, name);\n     }\n \n-    public static CommentsInfo getInfo(String url) throws IOException, ExtractionException {\n+    public static CommentsInfo getInfo(final String url) throws IOException, ExtractionException {\n         return getInfo(NewPipe.getServiceByUrl(url), url);\n     }\n \n-    public static CommentsInfo getInfo(StreamingService serviceByUrl, String url) throws ExtractionException, IOException {\n+    public static CommentsInfo getInfo(final StreamingService serviceByUrl, final String url)\n+            throws ExtractionException, IOException {\n         return getInfo(serviceByUrl.getCommentsExtractor(url));\n     }\n \n-    private static CommentsInfo getInfo(CommentsExtractor commentsExtractor) throws IOException, ExtractionException {\n+    public static CommentsInfo getInfo(final CommentsExtractor commentsExtractor)\n+            throws IOException, ExtractionException {\n         // for services which do not have a comments extractor\n-        if (null == commentsExtractor) {\n+        if (commentsExtractor == null) {\n             return null;\n         }\n \n         commentsExtractor.fetchPage();\n-        String name = commentsExtractor.getName();\n-        int serviceId = commentsExtractor.getServiceId();\n-        ListLinkHandler listUrlIdHandler = commentsExtractor.getLinkHandler();\n-        CommentsInfo commentsInfo = new CommentsInfo(serviceId, listUrlIdHandler, name);\n+\n+        final String name = commentsExtractor.getName();\n+        final int serviceId = commentsExtractor.getServiceId();\n+        final ListLinkHandler listUrlIdHandler = commentsExtractor.getLinkHandler();\n+\n+        final CommentsInfo commentsInfo = new CommentsInfo(serviceId, listUrlIdHandler, name);\n         commentsInfo.setCommentsExtractor(commentsExtractor);\n-        InfoItemsPage<CommentsInfoItem> initialCommentsPage = ExtractorHelper.getItemsPageOrLogError(commentsInfo,\n-                commentsExtractor);\n+        final InfoItemsPage<CommentsInfoItem> initialCommentsPage =\n+                ExtractorHelper.getItemsPageOrLogError(commentsInfo, commentsExtractor);\n+        commentsInfo.setCommentsDisabled(commentsExtractor.isCommentsDisabled());\n         commentsInfo.setRelatedItems(initialCommentsPage.getItems());\n-        commentsInfo.setNextPageUrl(initialCommentsPage.getNextPageUrl());\n+        commentsInfo.setNextPage(initialCommentsPage.getNextPage());\n \n         return commentsInfo;\n     }\n \n-    public static InfoItemsPage<CommentsInfoItem> getMoreItems(CommentsInfo commentsInfo, String pageUrl)\n-            throws ExtractionException, IOException {\n-        return getMoreItems(NewPipe.getService(commentsInfo.getServiceId()), commentsInfo, pageUrl);\n+    public static InfoItemsPage<CommentsInfoItem> getMoreItems(\n+            final CommentsInfo commentsInfo,\n+            final Page page) throws ExtractionException, IOException {\n+        return getMoreItems(NewPipe.getService(commentsInfo.getServiceId()), commentsInfo, page);\n     }\n \n-    public static InfoItemsPage<CommentsInfoItem> getMoreItems(StreamingService service, CommentsInfo commentsInfo,\n-                                                               String pageUrl) throws IOException, ExtractionException {\n+    public static InfoItemsPage<CommentsInfoItem> getMoreItems(\n+            final StreamingService service,\n+            final CommentsInfo commentsInfo,\n+            final Page page) throws IOException, ExtractionException {\n         if (null == commentsInfo.getCommentsExtractor()) {\n             commentsInfo.setCommentsExtractor(service.getCommentsExtractor(commentsInfo.getUrl()));\n             commentsInfo.getCommentsExtractor().fetchPage();\n         }\n-        return commentsInfo.getCommentsExtractor().getPage(pageUrl);\n+        return commentsInfo.getCommentsExtractor().getPage(page);\n     }\n \n     private transient CommentsExtractor commentsExtractor;\n+    private boolean commentsDisabled = false;\n \n     public CommentsExtractor getCommentsExtractor() {\n         return commentsExtractor;\n     }\n \n-    public void setCommentsExtractor(CommentsExtractor commentsExtractor) {\n+    public void setCommentsExtractor(final CommentsExtractor commentsExtractor) {\n         this.commentsExtractor = commentsExtractor;\n     }\n \n+    public boolean isCommentsDisabled() {\n+        return commentsDisabled;\n+    }\n+\n+    public void setCommentsDisabled(final boolean commentsDisabled) {\n+        this.commentsDisabled = commentsDisabled;\n+    }\n }\n", "next_change": {"commit": "fdebf3c6cdf88fed8a372d7d7376acfa3a9f8c10", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex 8803aa57..506bee53 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -81,10 +81,19 @@ public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n         this.commentsExtractor = commentsExtractor;\n     }\n \n+    /**\n+     * @apiNote Warning: This method is experimental and may get removed in a future release.\n+     * @return <code>true</code> if the comments are disabled otherwise <code>false</code> (default)\n+     * @see CommentsExtractor#isCommentsDisabled()\n+     */\n     public boolean isCommentsDisabled() {\n         return commentsDisabled;\n     }\n \n+    /**\n+     * @apiNote Warning: This method is experimental and may get removed in a future release.\n+     * @param commentsDisabled <code>true</code> if the comments are disabled otherwise <code>false</code>\n+     */\n     public void setCommentsDisabled(final boolean commentsDisabled) {\n         this.commentsDisabled = commentsDisabled;\n     }\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex 506bee53..98ec136e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -92,7 +96,7 @@ public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n \n     /**\n      * @apiNote Warning: This method is experimental and may get removed in a future release.\n-     * @param commentsDisabled <code>true</code> if the comments are disabled otherwise <code>false</code>\n+     * @param commentsDisabled {@code true} if the comments are disabled otherwise {@code false}\n      */\n     public void setCommentsDisabled(final boolean commentsDisabled) {\n         this.commentsDisabled = commentsDisabled;\n", "next_change": {"commit": "981aee40927ae03442f16856185ac5726ea836c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex 98ec136e..73dfa8ab 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -95,10 +102,29 @@ public final class CommentsInfo extends ListInfo<CommentsInfoItem> {\n     }\n \n     /**\n+     * @param commentsDisabled <code>true</code> if the comments are disabled otherwise <code>false</code>\n      * @apiNote Warning: This method is experimental and may get removed in a future release.\n      * @param commentsDisabled {@code true} if the comments are disabled otherwise {@code false}\n      */\n     public void setCommentsDisabled(final boolean commentsDisabled) {\n         this.commentsDisabled = commentsDisabled;\n     }\n+\n+    /**\n+     * Returns the total number of comments.\n+     *\n+     * @return totalComments\n+     */\n+    public int getCommentsCount() {\n+        return commentsCount;\n+    }\n+\n+    /**\n+     * Sets the total number of comments.\n+     *\n+     * @param commentsCount\n+     */\n+    public void setCommentsCount(int commentsCount) {\n+        this.commentsCount = commentsCount;\n+    }\n }\n", "next_change": {"commit": "656b7c1cd922851b9c04d2493e298da6790a2a66", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex 73dfa8ab..7386716c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -122,7 +122,7 @@ public final class CommentsInfo extends ListInfo<CommentsInfoItem> {\n     /**\n      * Sets the total number of comments.\n      *\n-     * @param commentsCount\n+     * @param commentsCount the commentsCount to set.\n      */\n     public void setCommentsCount(int commentsCount) {\n         this.commentsCount = commentsCount;\n", "next_change": {"commit": "67ef4f4c30678c5309e061f363321506240c5ab5", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex 7386716c..aac965db 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -124,7 +120,7 @@ public final class CommentsInfo extends ListInfo<CommentsInfoItem> {\n      *\n      * @param commentsCount the commentsCount to set.\n      */\n-    public void setCommentsCount(int commentsCount) {\n+    public void setCommentsCount(final int commentsCount) {\n         this.commentsCount = commentsCount;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818891", "body": "```suggestion\r\n     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n          \n          \n            \n                 * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">For</span> <span class=\"x x-first x-last\">makeing</span> <span class=\"pl-smi\">ListLinkHandlerFactory</span> compatible with <span class=\"pl-smi\">LinkHandlerFactory</span> we need to override <span class=\"pl-c1\">this</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">For</span> <span class=\"x x-first x-last\">making</span> <span class=\"pl-smi\">ListLinkHandlerFactory</span> compatible with <span class=\"pl-smi\">LinkHandlerFactory</span> we need to override <span class=\"pl-c1\">this</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:53:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java", "diffHunk": "@@ -53,18 +59,19 @@ public ListLinkHandler fromQuery(String id,\n         final String url = getUrl(id, contentFilters, sortFilter);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n-    \n+\n     public ListLinkHandler fromQuery(String id,\n                                      List<String> contentFilters,\n                                      String sortFilter, String baseUrl) throws ParsingException {\n         final String url = getUrl(id, contentFilters, sortFilter, baseUrl);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n \n-    \n+\n     /**\n      * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\nindex 60e1db48..9ea478b0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n", "chunk": "@@ -69,7 +69,7 @@ public abstract class ListLinkHandlerFactory extends LinkHandlerFactory {\n \n \n     /**\n-     * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n+     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n      * however it should not be overridden by the actual implementation.\n      *\n      * @param id\n", "next_change": {"commit": "c9d9bd1e249020f2504761bee64ca3826ad6a720", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\nindex 9ea478b0..86991c4d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n", "chunk": "@@ -73,7 +74,7 @@ public abstract class ListLinkHandlerFactory extends LinkHandlerFactory {\n      * however it should not be overridden by the actual implementation.\n      *\n      * @param id\n-     * @return the url coresponding to id without any filters applied\n+     * @return the url corresponding to id without any filters applied\n      */\n     public String getUrl(String id) throws ParsingException {\n         return getUrl(id, new ArrayList<String>(0), \"\");\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\nindex 86991c4d..2e386782 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n", "chunk": "@@ -38,55 +45,59 @@ public abstract class ListLinkHandlerFactory extends LinkHandlerFactory {\n     }\n \n     @Override\n-    public ListLinkHandler fromUrl(String url, String baseUrl) throws ParsingException {\n-        if (url == null) throw new IllegalArgumentException(\"url may not be null\");\n+    public ListLinkHandler fromUrl(final String url, final String baseUrl) throws ParsingException {\n+        if (url == null) {\n+            throw new IllegalArgumentException(\"url may not be null\");\n+        }\n \n-        return new ListLinkHandler(super.fromUrl(url, baseUrl), getContentFilter(url), getSortFilter(url));\n+        return new ListLinkHandler(super.fromUrl(url, baseUrl), getContentFilter(url),\n+                getSortFilter(url));\n     }\n \n     @Override\n-    public ListLinkHandler fromId(String id) throws ParsingException {\n-        return new ListLinkHandler(super.fromId(id), new ArrayList<String>(0), \"\");\n+    public ListLinkHandler fromId(final String id) throws ParsingException {\n+        return new ListLinkHandler(super.fromId(id), new ArrayList<>(0), \"\");\n     }\n \n     @Override\n-    public ListLinkHandler fromId(String id, String baseUrl) throws ParsingException {\n-        return new ListLinkHandler(super.fromId(id, baseUrl), new ArrayList<String>(0), \"\");\n+    public ListLinkHandler fromId(final String id, final String baseUrl) throws ParsingException {\n+        return new ListLinkHandler(super.fromId(id, baseUrl), new ArrayList<>(0), \"\");\n     }\n \n-    public ListLinkHandler fromQuery(String id,\n-                                     List<String> contentFilters,\n-                                     String sortFilter) throws ParsingException {\n+    public ListLinkHandler fromQuery(final String id,\n+                                     final List<String> contentFilters,\n+                                     final String sortFilter) throws ParsingException {\n         final String url = getUrl(id, contentFilters, sortFilter);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n \n-    public ListLinkHandler fromQuery(String id,\n-                                     List<String> contentFilters,\n-                                     String sortFilter, String baseUrl) throws ParsingException {\n+    public ListLinkHandler fromQuery(final String id,\n+                                     final List<String> contentFilters,\n+                                     final String sortFilter,\n+                                     final String baseUrl) throws ParsingException {\n         final String url = getUrl(id, contentFilters, sortFilter, baseUrl);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n \n \n     /**\n-     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n-     * however it should not be overridden by the actual implementation.\n+     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override\n+     * this, however it should not be overridden by the actual implementation.\n      *\n-     * @param id\n      * @return the url corresponding to id without any filters applied\n      */\n-    public String getUrl(String id) throws ParsingException {\n-        return getUrl(id, new ArrayList<String>(0), \"\");\n+    public String getUrl(final String id) throws ParsingException {\n+        return getUrl(id, new ArrayList<>(0), \"\");\n     }\n \n     @Override\n-    public String getUrl(String id, String baseUrl) throws ParsingException {\n-        return getUrl(id, new ArrayList<String>(0), \"\", baseUrl);\n+    public String getUrl(final String id, final String baseUrl) throws ParsingException {\n+        return getUrl(id, new ArrayList<>(0), \"\", baseUrl);\n     }\n \n     /**\n-     * Will returns content filter the corresponding extractor can handle like \"channels\", \"videos\", \"music\", etc.\n+     * Will returns content filter the corresponding extractor can handle like \"channels\", \"videos\",\n+     * \"music\", etc.\n      *\n      * @return filter that can be applied when building a query for getting a list\n      */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODk0OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818948", "body": "```suggestion\r\n     * It's not mandatory for NewPipe to handle the Url\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It's not mandatorry for NewPipe to handle the Url\n          \n          \n            \n                 * It's not mandatory for NewPipe to handle the Url", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s not <span class=\"x x-first x-last\">mandatorry</span> for NewPipe to handle the Url</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s not <span class=\"x x-first x-last\">mandatory</span> for NewPipe to handle the Url</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:53:19Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java", "diffHunk": "@@ -35,9 +40,12 @@ public SearchQueryHandler fromQuery(String querry) throws ParsingException {\n \n     /**\n      * It's not mandatorry for NewPipe to handle the Url", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\nindex 55c76b78..50977e20 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n", "chunk": "@@ -39,7 +39,7 @@ public abstract class SearchQueryHandlerFactory extends ListLinkHandlerFactory {\n     }\n \n     /**\n-     * It's not mandatorry for NewPipe to handle the Url\n+     * It's not mandatory for NewPipe to handle the Url\n      *\n      * @param url\n      * @return\n", "next_change": {"commit": "d63d20f94354ade24dc0b163c9b9ba395f11dea5", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\nindex 50977e20..efd5ad02 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n", "chunk": "@@ -42,7 +42,6 @@ public abstract class SearchQueryHandlerFactory extends ListLinkHandlerFactory {\n      * It's not mandatory for NewPipe to handle the Url\n      *\n      * @param url\n-     * @return\n      */\n     @Override\n     public boolean onAcceptUrl(String url) {\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\nindex efd5ad02..07e7a5dc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n", "chunk": "@@ -23,28 +27,26 @@ public abstract class SearchQueryHandlerFactory extends ListLinkHandlerFactory {\n     ///////////////////////////////////\n \n     @Override\n-    public String getId(String url) {\n+    public String getId(final String url) {\n         return getSearchString(url);\n     }\n \n     @Override\n-    public SearchQueryHandler fromQuery(String querry,\n-                                        List<String> contentFilter,\n-                                        String sortFilter) throws ParsingException {\n-        return new SearchQueryHandler(super.fromQuery(querry, contentFilter, sortFilter));\n+    public SearchQueryHandler fromQuery(final String query,\n+                                        final List<String> contentFilter,\n+                                        final String sortFilter) throws ParsingException {\n+        return new SearchQueryHandler(super.fromQuery(query, contentFilter, sortFilter));\n     }\n \n-    public SearchQueryHandler fromQuery(String querry) throws ParsingException {\n-        return fromQuery(querry, new ArrayList<String>(0), \"\");\n+    public SearchQueryHandler fromQuery(final String query) throws ParsingException {\n+        return fromQuery(query, new ArrayList<>(0), EMPTY_STRING);\n     }\n \n     /**\n      * It's not mandatory for NewPipe to handle the Url\n-     *\n-     * @param url\n      */\n     @Override\n-    public boolean onAcceptUrl(String url) {\n+    public boolean onAcceptUrl(final String url) {\n         return false;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819052", "body": "```suggestion\r\n        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> json) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">peertube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> json) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">PeerTube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:12Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..d53fb7ad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n+        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": {"commit": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex d53fb7ad..cb8a5f78 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -117,59 +125,33 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             }\n         }\n \n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final long total;\n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            Number number = JsonUtils.getNumber(json, \"total\");\n-            if (number != null) this.total = number.longValue();\n-            collectStreamsFrom(collector, json, pageUrl);\n+            total = JsonUtils.getNumber(json, \"total\").longValue();\n+            collectStreamsFrom(collector, json);\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n-        return new InfoItemsPage<>(collector, getNextPageUrl(pageUrl));\n-    }\n-\n-\n-    private String getNextPageUrl(String prevPageUrl) {\n-        String prevStart;\n-        try {\n-            prevStart = Parser.matchGroup1(START_PATTERN, prevPageUrl);\n-        } catch (RegexException e) {\n-            return \"\";\n-        }\n-        if (StringUtil.isBlank(prevStart)) return \"\";\n-        long nextStart = 0;\n-        try {\n-            nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n-        } catch (NumberFormatException e) {\n-            return \"\";\n-        }\n-\n-        if (nextStart >= total) {\n-            return \"\";\n-        } else {\n-            return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n-        }\n+        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        Response response = downloader.get(getUrl());\n-        if (null != response && null != response.responseBody()) {\n+    public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n+        final Response response = downloader.get(getUrl());\n+        if (response != null && response.responseBody() != null) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n-\n-        String pageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n-        this.initPage = getPage(pageUrl);\n     }\n \n-    private void setInitialData(String responseBody) throws ExtractionException {\n+    private void setInitialData(final String responseBody) throws ExtractionException {\n         try {\n             json = JsonParser.object().from(responseBody);\n         } catch (JsonParserException e) {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\", e);\n         }\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex cb8a5f78..432433cd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -156,13 +152,9 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n         return JsonUtils.getString(json, \"displayName\");\n     }\n-\n-    @Override\n-    public String getOriginalUrl() throws ParsingException {\n-        return baseUrl + \"/\" + getId();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA3OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819078", "body": "```suggestion\r\n            throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">peertube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">PeerTube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -138,30 +137,30 @@ private String getNextPageUrl(String prevPageUrl) {\n         } catch (RegexException e) {\n             return \"\";\n         }\n-        if(StringUtil.isBlank(prevStart)) return \"\";\n+        if (StringUtil.isBlank(prevStart)) return \"\";\n         long nextStart = 0;\n         try {\n             nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n         } catch (NumberFormatException e) {\n             return \"\";\n         }\n-        \n-        if(nextStart >= total) {\n+\n+        if (nextStart >= total) {\n             return \"\";\n-        }else {\n+        } else {\n             return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n         }\n     }\n-    \n+\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         Response response = downloader.get(getUrl());\n-        if(null != response && null != response.responseBody()) {\n+        if (null != response && null != response.responseBody()) {\n             setInitialData(response.responseBody());\n-        }else {\n+        } else {\n             throw new ExtractionException(\"Unable to extract peertube channel data\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -158,7 +158,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (null != response && null != response.responseBody()) {\n             setInitialData(response.responseBody());\n         } else {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\");\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n \n         String pageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n", "next_change": {"commit": "5bab9d9fc00cc36d4efc0170efa417db91e4eb51", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..b41e2101 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -161,8 +155,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n \n-        String pageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n-        this.initPage = getPage(pageUrl);\n+        this.initPage = getPage(getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE);\n     }\n \n     private void setInitialData(String responseBody) throws ExtractionException {\n", "next_change": {"commit": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex b41e2101..cb8a5f78 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -147,22 +138,20 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        Response response = downloader.get(getUrl());\n-        if (null != response && null != response.responseBody()) {\n+    public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n+        final Response response = downloader.get(getUrl());\n+        if (response != null && response.responseBody() != null) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n-\n-        this.initPage = getPage(getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE);\n     }\n \n-    private void setInitialData(String responseBody) throws ExtractionException {\n+    private void setInitialData(final String responseBody) throws ExtractionException {\n         try {\n             json = JsonParser.object().from(responseBody);\n         } catch (JsonParserException e) {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\", e);\n         }\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex cb8a5f78..432433cd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -156,13 +152,9 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n         return JsonUtils.getString(json, \"displayName\");\n     }\n-\n-    @Override\n-    public String getOriginalUrl() throws ParsingException {\n-        return baseUrl + \"/\" + getId();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819096", "body": "```suggestion\r\n            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to get peertube kiosk info\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to get PeerTube kiosk info\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to get <span class=\"x x-first x-last\">peertube</span> kiosk info<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to get <span class=\"x x-first x-last\">PeerTube</span> kiosk info<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:49Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -110,26 +109,26 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n         Response response = getDownloader().get(pageUrl);\n         JsonObject json = null;\n-        if(null != response && !StringUtil.isBlank(response.responseBody())) {\n+        if (null != response && !StringUtil.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n             } catch (Exception e) {\n                 throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n             }\n         }\n-        \n+\n         StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        if(json != null) {\n+        if (json != null) {\n             PeertubeParsingHelper.validate(json);\n             Number number = JsonUtils.getNumber(json, \"total\");\n-            if(number != null) this.total = number.longValue();\n+            if (number != null) this.total = number.longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n             throw new ExtractionException(\"Unable to get peertube kiosk info\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -124,7 +124,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             if (number != null) this.total = number.longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n-            throw new ExtractionException(\"Unable to get peertube kiosk info\");\n+            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n         return new InfoItemsPage<>(collector, getNextPageUrl(pageUrl));\n     }\n", "next_change": {"commit": "5bab9d9fc00cc36d4efc0170efa417db91e4eb51", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..b41e2101 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -120,36 +138,12 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            Number number = JsonUtils.getNumber(json, \"total\");\n-            if (number != null) this.total = number.longValue();\n+            this.total = JsonUtils.getNumber(json, \"total\").longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n-        return new InfoItemsPage<>(collector, getNextPageUrl(pageUrl));\n-    }\n-\n-\n-    private String getNextPageUrl(String prevPageUrl) {\n-        String prevStart;\n-        try {\n-            prevStart = Parser.matchGroup1(START_PATTERN, prevPageUrl);\n-        } catch (RegexException e) {\n-            return \"\";\n-        }\n-        if (StringUtil.isBlank(prevStart)) return \"\";\n-        long nextStart = 0;\n-        try {\n-            nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n-        } catch (NumberFormatException e) {\n-            return \"\";\n-        }\n-\n-        if (nextStart >= total) {\n-            return \"\";\n-        } else {\n-            return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n-        }\n+        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n", "next_change": {"commit": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex b41e2101..cb8a5f78 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -135,11 +125,12 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             }\n         }\n \n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final long total;\n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            this.total = JsonUtils.getNumber(json, \"total\").longValue();\n-            collectStreamsFrom(collector, json, pageUrl);\n+            total = JsonUtils.getNumber(json, \"total\").longValue();\n+            collectStreamsFrom(collector, json);\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n", "next_change": {"commit": "4cc312086afc6d6772ba657ddf96c5f5b14f41bd", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex cb8a5f78..d4a30c73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -114,27 +115,28 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     }\n \n     @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n-        final Response response = getDownloader().get(pageUrl);\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        final Response response = getDownloader().get(page.getUrl());\n         JsonObject json = null;\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n             } catch (Exception e) {\n-                throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n+                throw new ParsingException(\"Could not parse json data for channel info\", e);\n             }\n         }\n \n-        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        final long total;\n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            total = JsonUtils.getNumber(json, \"total\").longValue();\n+            final long total = JsonUtils.getNumber(json, \"total\").longValue();\n+\n+            final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n             collectStreamsFrom(collector, json);\n+\n+            return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n         } else {\n-            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n+            throw new ExtractionException(\"Unable to get PeerTube channel info\");\n         }\n-        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex d4a30c73..432433cd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -141,7 +134,8 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n \n     @Override\n     public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n-        final Response response = downloader.get(getUrl());\n+        final Response response = downloader.get(\n+                baseUrl + PeertubeChannelLinkHandlerFactory.API_ENDPOINT + getId());\n         if (response != null && response.responseBody() != null) {\n             setInitialData(response.responseBody());\n         } else {\n", "next_change": {"commit": "b9282bbe94ec820606744ef4494e92987c25be1c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 432433cd..bcfa7d28 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -136,7 +136,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n         final Response response = downloader.get(\n                 baseUrl + PeertubeChannelLinkHandlerFactory.API_ENDPOINT + getId());\n-        if (response != null && response.responseBody() != null) {\n+        if (response != null ) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex bcfa7d28..940f0fa5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -98,45 +101,48 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        return getPage(new Page(\n-                baseUrl + \"/api/v1/\" + getId() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE));\n+        return getPage(new Page(baseUrl + \"/api/v1/\" + getId() + \"/videos?\" + START_KEY + \"=0&\"\n+                + COUNT_KEY + \"=\" + ITEMS_PER_PAGE));\n     }\n \n     @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws IOException, ExtractionException {\n         if (page == null || isNullOrEmpty(page.getUrl())) {\n             throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n         }\n \n         final Response response = getDownloader().get(page.getUrl());\n \n-        JsonObject json = null;\n+        JsonObject pageJson = null;\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n-                json = JsonParser.object().from(response.responseBody());\n-            } catch (Exception e) {\n+                pageJson = JsonParser.object().from(response.responseBody());\n+            } catch (final Exception e) {\n                 throw new ParsingException(\"Could not parse json data for channel info\", e);\n             }\n         }\n \n-        if (json != null) {\n-            PeertubeParsingHelper.validate(json);\n-            final long total = json.getLong(\"total\");\n+        if (pageJson != null) {\n+            PeertubeParsingHelper.validate(pageJson);\n+            final long total = pageJson.getLong(\"total\");\n \n             final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-            collectStreamsFrom(collector, json, getBaseUrl());\n+            collectStreamsFrom(collector, pageJson, getBaseUrl());\n \n-            return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n+            return new InfoItemsPage<>(collector,\n+                    PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube channel info\");\n         }\n     }\n \n     @Override\n-    public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n+    public void onFetchPage(final Downloader downloader)\n+            throws IOException, ExtractionException {\n         final Response response = downloader.get(\n                 baseUrl + PeertubeChannelLinkHandlerFactory.API_ENDPOINT + getId());\n-        if (response != null ) {\n+        if (response != null) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n", "next_change": {"commit": "8c1041def62b0d839900b7c4795ccc8eaa19dcf5", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 940f0fa5..c5b7bf39 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -138,7 +138,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     }\n \n     @Override\n-    public void onFetchPage(final Downloader downloader)\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n         final Response response = downloader.get(\n                 baseUrl + PeertubeChannelLinkHandlerFactory.API_ENDPOINT + getId());\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex b41e2101..cb8a5f78 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -147,22 +138,20 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        Response response = downloader.get(getUrl());\n-        if (null != response && null != response.responseBody()) {\n+    public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n+        final Response response = downloader.get(getUrl());\n+        if (response != null && response.responseBody() != null) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n-\n-        this.initPage = getPage(getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE);\n     }\n \n-    private void setInitialData(String responseBody) throws ExtractionException {\n+    private void setInitialData(final String responseBody) throws ExtractionException {\n         try {\n             json = JsonParser.object().from(responseBody);\n         } catch (JsonParserException e) {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\", e);\n         }\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex cb8a5f78..432433cd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -156,13 +152,9 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n         return JsonUtils.getString(json, \"displayName\");\n     }\n-\n-    @Override\n-    public String getOriginalUrl() throws ParsingException {\n-        return baseUrl + \"/\" + getId();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTEzMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819132", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO Auto-generated method stub</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:55:22Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java", "diffHunk": "@@ -74,7 +74,7 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         // TODO Auto-generated method stub", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\nindex 81cd165d..1a96111a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n", "chunk": "@@ -73,7 +73,6 @@ public class PeertubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n \n     }\n \n", "next_change": {"commit": "5bab9d9fc00cc36d4efc0170efa417db91e4eb51", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\nindex 1a96111a..76509ce8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n", "chunk": "@@ -1,85 +1,117 @@\n package org.schabi.newpipe.extractor.services.peertube.extractors;\n \n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n+import javax.annotation.Nonnull;\n import java.io.IOException;\n \n+import static org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper.*;\n+\n public class PeertubePlaylistExtractor extends PlaylistExtractor {\n \n+    private JsonObject playlistInfo;\n+    private JsonObject playlistVideos;\n+    private String initialPageUrl;\n+\n+    private long total;\n+\n     public PeertubePlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n-        // TODO Auto-generated constructor stub\n     }\n \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getString(\"thumbnailPath\");\n     }\n \n     @Override\n     public String getBannerUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"url\");\n     }\n \n     @Override\n     public String getUploaderName() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"displayName\");\n     }\n \n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getObject(\"ownerAccount\").getObject(\"avatar\").getString(\"path\");\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return 0;\n+        return playlistInfo.getNumber(\"videosLength\").longValue();\n     }\n \n+    @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getPage(initialPageUrl);\n     }\n \n     @Override\n     public String getNextPageUrl() throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return PeertubeParsingHelper.getNextPageUrl(initialPageUrl, total);\n     }\n \n     @Override\n     public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        Response response = getDownloader().get(pageUrl);\n+        try {\n+            playlistVideos = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException jpe) {\n+            throw new ExtractionException(\"Could not parse json\", jpe);\n+        }\n+        PeertubeParsingHelper.validate(playlistVideos);\n+\n+        this.total = JsonUtils.getNumber(playlistVideos, \"total\").longValue();\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+\n+        JsonArray videos = playlistVideos.getArray(\"data\");\n+        for (Object o : videos) {\n+            JsonObject video = ((JsonObject) o).getObject(\"video\");\n+            collector.commit(new PeertubeStreamInfoItemExtractor(video, getBaseUrl()));\n+        }\n+\n+        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        try {\n+            playlistInfo = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException jpe) {\n+            throw new ExtractionException(\"Could not parse json\", jpe);\n+        }\n+        PeertubeParsingHelper.validate(playlistInfo);\n+        initialPageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n     }\n \n+    @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getString(\"displayName\");\n     }\n-\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTE5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819191", "body": "```suggestion\r\n            throw new ParsingException(\"Unable to extract kiosk info\", e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ParsingException(\"unable to extract kiosk info\", e);\n          \n          \n            \n                        throw new ParsingException(\"Unable to extract kiosk info\", e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsingException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">unable</span> to extract kiosk info<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsingException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Unable</span> to extract kiosk info<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:55:57Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java", "diffHunk": "@@ -49,19 +48,19 @@ private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonObject j\n         JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to extract kiosk info\", e);", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex e6c1a1b5..e4bc1dff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -49,7 +49,7 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n         } catch (Exception e) {\n-            throw new ParsingException(\"unable to extract kiosk info\", e);\n+            throw new ParsingException(\"Unable to extract kiosk info\", e);\n         }\n \n         String baseUrl = getBaseUrl();\n", "next_change": {"commit": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex e4bc1dff..37c22aa4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -40,40 +37,33 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n \n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        super.fetchPage();\n-        return initPage;\n+        final String pageUrl = getUrl() + \"&\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n+        return getPage(pageUrl);\n     }\n \n-    private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonObject json, String pageUrl) throws ParsingException {\n-        JsonArray contents;\n+    private void collectStreamsFrom(final StreamInfoItemsCollector collector, final JsonObject json) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Unable to extract kiosk info\", e);\n         }\n \n-        String baseUrl = getBaseUrl();\n-        for (Object c : contents) {\n+        final String baseUrl = getBaseUrl();\n+        for (final Object c : contents) {\n             if (c instanceof JsonObject) {\n                 final JsonObject item = (JsonObject) c;\n-                PeertubeStreamInfoItemExtractor extractor = new PeertubeStreamInfoItemExtractor(item, baseUrl);\n+                final PeertubeStreamInfoItemExtractor extractor = new PeertubeStreamInfoItemExtractor(item, baseUrl);\n                 collector.commit(extractor);\n             }\n         }\n-\n     }\n \n     @Override\n-    public String getNextPageUrl() throws IOException, ExtractionException {\n-        super.fetchPage();\n-        return initPage.getNextPageUrl();\n-    }\n-\n-    @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n-        Response response = getDownloader().get(pageUrl);\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n+        final Response response = getDownloader().get(pageUrl);\n         JsonObject json = null;\n-        if (null != response && !StringUtil.isBlank(response.responseBody())) {\n+        if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n             } catch (Exception e) {\n", "next_change": {"commit": "4cc312086afc6d6772ba657ddf96c5f5b14f41bd", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 37c22aa4..8aebc91d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -60,8 +59,8 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n     }\n \n     @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n-        final Response response = getDownloader().get(pageUrl);\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        final Response response = getDownloader().get(page.getUrl());\n         JsonObject json = null;\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n", "next_change": {"commit": "9b6fe1dea6b740c948a8553da03e1f20390b6112", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 8aebc91d..5686bb20 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -60,7 +63,12 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n \n     @Override\n     public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        if (page == null || isNullOrEmpty(page.getUrl())) {\n+            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n+        }\n+\n         final Response response = getDownloader().get(page.getUrl());\n+\n         JsonObject json = null;\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 5686bb20..676fdfb2 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -73,24 +57,27 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n-            } catch (Exception e) {\n+            } catch (final Exception e) {\n                 throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n             }\n         }\n \n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            final long total = JsonUtils.getNumber(json, \"total\").longValue();\n+            final long total = json.getLong(\"total\");\n \n             final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-            collectStreamsFrom(collector, json);\n+            collectStreamsFrom(collector, json, getBaseUrl());\n \n-            return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n+            return new InfoItemsPage<>(collector,\n+                    PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException { }\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+    }\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 37c22aa4..8aebc91d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -71,18 +70,19 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n             }\n         }\n \n-        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        final long total;\n         if (json != null) {\n-            final Number number = JsonUtils.getNumber(json, \"total\");\n-            total = number.longValue();\n+            PeertubeParsingHelper.validate(json);\n+            final long total = JsonUtils.getNumber(json, \"total\").longValue();\n+\n+            final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n             collectStreamsFrom(collector, json);\n+\n+            return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n         } else {\n-            throw new ExtractionException(\"Unable to get peertube kiosk info\");\n+            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n-        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException { }\n+    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException { }\n }\n", "next_change": {"commit": "9b6fe1dea6b740c948a8553da03e1f20390b6112", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 8aebc91d..5686bb20 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -84,5 +92,5 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException { }\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException { }\n }\n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex 5686bb20..676fdfb2 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -73,24 +57,27 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n         if (response != null && !Utils.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n-            } catch (Exception e) {\n+            } catch (final Exception e) {\n                 throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n             }\n         }\n \n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            final long total = JsonUtils.getNumber(json, \"total\").longValue();\n+            final long total = json.getLong(\"total\");\n \n             final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-            collectStreamsFrom(collector, json);\n+            collectStreamsFrom(collector, json, getBaseUrl());\n \n-            return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n+            return new InfoItemsPage<>(collector,\n+                    PeertubeParsingHelper.getNextPage(page.getUrl(), total));\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException { }\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTI5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819294", "body": "```suggestion\r\n        // Whoever is willing to implement this should also implement this in the front end.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the fornt end\n          \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement this in the <span class=\"x x-first x-last\">fornt</span> end</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement this in the <span class=\"x x-first x-last\">front</span> end<span class=\"x x-first x-last\">.</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:57:09Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the fornt end", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0f3f56e6..a03b1d5a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the front end.\n     }\n \n     @Override\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex a03b1d5a..520bda80 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the front end.\n+        // Whoever is willing to implement this should also implement it in the frontend.\n     }\n \n     @Override\n", "next_change": {"commit": "b705515da06ff2ebca28bed2bb513e4f94f6a94a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 520bda80..692b9cc3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -75,8 +146,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    doc.select(\"button[class*=\\\"yt-uix-subscription-button\\\"]\")\n-                            .first().attr(\"data-channel-external-id\");\n+                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "951ed9f0d85b5a526b40d5883c676fb8069ea312", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 692b9cc3..240fa537 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -146,7 +138,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+                    getUploaderInfo().getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "365b0329f3dfb0dba257d1399624b5e9a4a56822", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -137,8 +142,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    getUploaderInfo().getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -40,110 +48,86 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl() + \"&pbj=1\";\n-\n-        JsonArray ajaxJson;\n-\n-        Map<String, List<String>> headers = new HashMap<>();\n-        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n-        headers.put(\"X-YouTube-Client-Version\",\n-                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n-        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n-        if (response.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"Could not parse json data for next streams\");\n-        }\n-\n-        try {\n-            ajaxJson = JsonParser.array().from(response);\n-        } catch (JsonParserException e) {\n-            throw new ParsingException(\"Could not parse json data for next streams\", e);\n-        }\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException,\n+            ExtractionException {\n+        final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n+                .getCountryCode())\n+                .value(\"browseId\", \"VL\" + getId())\n+                .value(\"params\", \"wgYCCAA%3D\") // show unavailable videos\n+                .done())\n+                .getBytes(UTF_8);\n+\n+        initialData = getJsonPostResponse(\"browse\", body, getExtractorLocalization());\n+        YoutubeParsingHelper.defaultAlertsCheck(initialData);\n \n-        initialData = ajaxJson.getObject(1).getObject(\"response\");\n         playlistInfo = getPlaylistInfo();\n     }\n \n     private JsonObject getUploaderInfo() throws ParsingException {\n-        JsonArray items = initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n-        try {\n-            JsonObject uploaderInfo = items.getObject(1).getObject(\"playlistSidebarSecondaryInfoRenderer\")\n-                    .getObject(\"videoOwner\").getObject(\"videoOwnerRenderer\");\n-            if (uploaderInfo != null) {\n-                return uploaderInfo;\n-            }\n-        } catch (Exception ignored) {}\n+        final JsonArray items = initialData.getObject(\"sidebar\")\n+                .getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n+\n+        JsonObject videoOwner = items.getObject(1)\n+                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n+        if (videoOwner.has(\"videoOwnerRenderer\")) {\n+            return videoOwner.getObject(\"videoOwnerRenderer\");\n+        }\n \n         // we might want to create a loop here instead of using duplicated code\n-        try {\n-            JsonObject uploaderInfo = items.getObject(items.size()).getObject(\"playlistSidebarSecondaryInfoRenderer\")\n-                    .getObject(\"videoOwner\").getObject(\"videoOwnerRenderer\");\n-            if (uploaderInfo != null) {\n-                return uploaderInfo;\n-            }\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get uploader info\", e);\n+        videoOwner = items.getObject(items.size())\n+                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n+        if (videoOwner.has(\"videoOwnerRenderer\")) {\n+            return videoOwner.getObject(\"videoOwnerRenderer\");\n         }\n         throw new ParsingException(\"Could not get uploader info\");\n     }\n \n     private JsonObject getPlaylistInfo() throws ParsingException {\n         try {\n-            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\").getArray(\"items\")\n-                    .getObject(0).getObject(\"playlistSidebarPrimaryInfoRenderer\");\n-        } catch (Exception e) {\n+            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\").getObject(0)\n+                    .getObject(\"playlistSidebarPrimaryInfoRenderer\");\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get PlaylistInfo\", e);\n         }\n     }\n \n-    @Override\n-    public String getNextPageUrl() {\n-        return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n-                .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n-                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"playlistVideoListRenderer\").getArray(\"continuations\"));\n-    }\n-\n     @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n-        try {\n-            String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n-            if (name != null) return name;\n-        } catch (Exception ignored) {}\n-        try {\n-            return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get playlist name\", e);\n-        }\n+        final String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n+        if (!isNullOrEmpty(name)) return name;\n+\n+        return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n     }\n \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        try {\n-            return playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n-                    .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-        } catch (Exception ignored) {}\n-        try {\n-            return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n+        String url = playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n+                .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+\n+        if (isNullOrEmpty(url)) {\n+            url = initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n                     .getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+\n+            if (isNullOrEmpty(url)) throw new ParsingException(\"Could not get playlist thumbnail\");\n         }\n+\n+        return fixThumbnailUrl(url);\n     }\n \n     @Override\n     public String getBannerUrl() {\n-        return \"\";      // Banner can't be handled by frontend right now.\n+        // Banner can't be handled by frontend right now.\n         // Whoever is willing to implement this should also implement it in the frontend.\n+        return \"\";\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n     }\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -11,122 +24,193 @@ import org.schabi.newpipe.extractor.downloader.Response;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n-import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.localization.Localization;\n import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfo;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n-import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeStreamLinkHandlerFactory;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n-import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n-import org.schabi.newpipe.extractor.stream.StreamType;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Utils;\n \n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.fixThumbnailUrl;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonPostResponse;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getKey;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getTextFromObject;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getValidJsonResponseBody;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.prepareJsonBuilder;\n-import static org.schabi.newpipe.extractor.utils.Utils.UTF_8;\n-import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n-\n-@SuppressWarnings(\"WeakerAccess\")\n public class YoutubePlaylistExtractor extends PlaylistExtractor {\n-    private JsonObject initialData;\n+    // Names of some objects in JSON response frequently used in this class\n+    private static final String PLAYLIST_VIDEO_RENDERER = \"playlistVideoRenderer\";\n+    private static final String PLAYLIST_VIDEO_LIST_RENDERER = \"playlistVideoListRenderer\";\n+    private static final String SIDEBAR = \"sidebar\";\n+    private static final String VIDEO_OWNER_RENDERER = \"videoOwnerRenderer\";\n+\n+    private JsonObject browseResponse;\n+\n     private JsonObject playlistInfo;\n+    private JsonObject uploaderInfo;\n+    private JsonObject playlistHeader;\n+\n+    private boolean isNewPlaylistInterface;\n \n-    public YoutubePlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+    public YoutubePlaylistExtractor(final StreamingService service,\n+                                    final ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n     }\n \n     @Override\n     public void onFetchPage(@Nonnull final Downloader downloader) throws IOException,\n             ExtractionException {\n-        final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n-                .getCountryCode())\n-                .value(\"browseId\", \"VL\" + getId())\n-                .value(\"params\", \"wgYCCAA%3D\") // show unavailable videos\n-                .done())\n-                .getBytes(UTF_8);\n-\n-        initialData = getJsonPostResponse(\"browse\", body, getExtractorLocalization());\n-        YoutubeParsingHelper.defaultAlertsCheck(initialData);\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                        .value(\"browseId\", \"VL\" + getId())\n+                        .value(\"params\", \"wgYCCAA%3D\") // Show unavailable videos\n+                        .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+\n+        browseResponse = getJsonPostResponse(\"browse\", body, localization);\n+        YoutubeParsingHelper.defaultAlertsCheck(browseResponse);\n+        isNewPlaylistInterface = checkIfResponseIsNewPlaylistInterface();\n+    }\n \n-        playlistInfo = getPlaylistInfo();\n+    /**\n+     * Whether the playlist response is using only the new playlist design.\n+     *\n+     * <p>\n+     * This new response changes how metadata is returned, and does not provide author thumbnails.\n+     * </p>\n+     *\n+     * <p>\n+     * The new response can be detected by checking whether a header JSON object is returned in the\n+     * browse response (the old returns instead a sidebar one).\n+     * </p>\n+     *\n+     * <p>\n+     * This new playlist UI is currently A/B tested.\n+     * </p>\n+     *\n+     * @return Whether the playlist response is using only the new playlist design\n+     */\n+    private boolean checkIfResponseIsNewPlaylistInterface() {\n+        // The \"old\" playlist UI can be also returned with the new one\n+        return browseResponse.has(\"header\") && !browseResponse.has(SIDEBAR);\n     }\n \n+    @Nonnull\n     private JsonObject getUploaderInfo() throws ParsingException {\n-        final JsonArray items = initialData.getObject(\"sidebar\")\n-                .getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n-\n-        JsonObject videoOwner = items.getObject(1)\n-                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n-        if (videoOwner.has(\"videoOwnerRenderer\")) {\n-            return videoOwner.getObject(\"videoOwnerRenderer\");\n+        if (uploaderInfo == null) {\n+            uploaderInfo = browseResponse.getObject(SIDEBAR)\n+                    .getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\")\n+                    .stream()\n+                    .filter(JsonObject.class::isInstance)\n+                    .map(JsonObject.class::cast)\n+                    .filter(item -> item.getObject(\"playlistSidebarSecondaryInfoRenderer\")\n+                            .getObject(\"videoOwner\")\n+                            .has(VIDEO_OWNER_RENDERER))\n+                    .map(item -> item.getObject(\"playlistSidebarSecondaryInfoRenderer\")\n+                            .getObject(\"videoOwner\")\n+                            .getObject(VIDEO_OWNER_RENDERER))\n+                    .findFirst()\n+                    .orElseThrow(() -> new ParsingException(\"Could not get uploader info\"));\n         }\n \n-        // we might want to create a loop here instead of using duplicated code\n-        videoOwner = items.getObject(items.size())\n-                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n-        if (videoOwner.has(\"videoOwnerRenderer\")) {\n-            return videoOwner.getObject(\"videoOwnerRenderer\");\n-        }\n-        throw new ParsingException(\"Could not get uploader info\");\n+        return uploaderInfo;\n     }\n \n+    @Nonnull\n     private JsonObject getPlaylistInfo() throws ParsingException {\n-        try {\n-            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\")\n-                    .getArray(\"items\").getObject(0)\n-                    .getObject(\"playlistSidebarPrimaryInfoRenderer\");\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get PlaylistInfo\", e);\n+        if (playlistInfo == null) {\n+            playlistInfo = browseResponse.getObject(SIDEBAR)\n+                    .getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\")\n+                    .stream()\n+                    .filter(JsonObject.class::isInstance)\n+                    .map(JsonObject.class::cast)\n+                    .filter(item -> item.has(\"playlistSidebarPrimaryInfoRenderer\"))\n+                    .map(item -> item.getObject(\"playlistSidebarPrimaryInfoRenderer\"))\n+                    .findFirst()\n+                    .orElseThrow(() -> new ParsingException(\"Could not get playlist info\"));\n+        }\n+\n+        return playlistInfo;\n+    }\n+\n+    @Nonnull\n+    private JsonObject getPlaylistHeader() {\n+        if (playlistHeader == null) {\n+            playlistHeader = browseResponse.getObject(\"header\")\n+                    .getObject(\"playlistHeaderRenderer\");\n         }\n+\n+        return playlistHeader;\n     }\n \n     @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n-        final String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n-        if (!isNullOrEmpty(name)) return name;\n+        final String name = getTextFromObject(getPlaylistInfo().getObject(\"title\"));\n+        if (!isNullOrEmpty(name)) {\n+            return name;\n+        }\n \n-        return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n+        return browseResponse.getObject(\"microformat\")\n+                .getObject(\"microformatDataRenderer\")\n+                .getString(\"title\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        String url = playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n-                .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+        String url;\n+        if (isNewPlaylistInterface) {\n+            url = getPlaylistHeader().getObject(\"playlistHeaderBanner\")\n+                    .getObject(\"heroPlaylistThumbnailRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+        } else {\n+            url = getPlaylistInfo().getObject(\"thumbnailRenderer\")\n+                    .getObject(\"playlistVideoThumbnailRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+        }\n \n+        // This data structure is returned in both layouts\n         if (isNullOrEmpty(url)) {\n-            url = initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n-                    .getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            if (isNullOrEmpty(url)) throw new ParsingException(\"Could not get playlist thumbnail\");\n+            url = browseResponse.getObject(\"microformat\")\n+                    .getObject(\"microformatDataRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+\n+            if (isNullOrEmpty(url)) {\n+                throw new ParsingException(\"Could not get playlist thumbnail\");\n+            }\n         }\n \n         return fixThumbnailUrl(url);\n     }\n \n-    @Override\n-    public String getBannerUrl() {\n-        // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement it in the frontend.\n-        return \"\";\n-    }\n-\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n+            return getUrlFromNavigationEndpoint(isNewPlaylistInterface\n+                    ? getPlaylistHeader().getObject(\"ownerText\")\n+                    .getArray(\"runs\")\n+                    .getObject(0)\n+                    .getObject(\"navigationEndpoint\")\n+                    : getUploaderInfo().getObject(\"navigationEndpoint\"));\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -135,7 +219,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n+            return getTextFromObject(isNewPlaylistInterface\n+                    ? getPlaylistHeader().getObject(\"ownerText\")\n+                    : getUploaderInfo().getObject(\"title\"));\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -147,7 +151,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -160,19 +130,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 692b9cc3..240fa537 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -155,7 +147,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return uploaderInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "365b0329f3dfb0dba257d1399624b5e9a4a56822", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -147,7 +151,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -160,19 +130,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -156,7 +160,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+\n+            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n+            if (url.startsWith(\"//\")) {\n+                url = url.substring(2);\n+            }\n+            if (url.startsWith(HTTP)) {\n+                url = Utils.replaceHttpWithHttps(url);\n+            } else if (!url.startsWith(HTTPS)) {\n+                url = HTTPS + url;\n+            }\n+\n+            return url;\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "612ec06839bfef5db6616f99aba81e243bc6cd14", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..fdd75868 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -162,17 +169,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n-\n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex fdd75868..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -167,7 +130,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n             return fixThumbnailUrl(url);\n         } catch (Exception e) {\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex fdd75868..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -178,79 +141,97 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n+            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n \n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n     @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() {\n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        Page nextPage = null;\n \n-        JsonArray videos = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n+        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n                 .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n                 .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"playlistVideoListRenderer\").getArray(\"contents\");\n+                .getObject(\"itemSectionRenderer\").getArray(\"contents\");\n+\n+        if (contents.getObject(0).has(\"playlistSegmentRenderer\")) {\n+            for (final Object segment : contents) {\n+                if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"trailer\")) {\n+                    collectTrailerFrom(collector, ((JsonObject) segment));\n+                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"videoList\")) {\n+                    collectStreamsFrom(collector, ((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n+                            .getObject(\"videoList\").getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n+                }\n+            }\n \n-        collectStreamsFrom(collector, videos);\n-        return new InfoItemsPage<>(collector, getNextPageUrl());\n-    }\n+            return new InfoItemsPage<>(collector, null);\n+        } else if (contents.getObject(0).has(\"playlistVideoListRenderer\")) {\n+            final JsonObject videos = contents.getObject(0).getObject(\"playlistVideoListRenderer\");\n+            collectStreamsFrom(collector, videos.getArray(\"contents\"));\n \n-    @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n-        if (pageUrl == null || pageUrl.isEmpty()) {\n-            throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n+            nextPage = getNextPageFrom(videos.getArray(\"continuations\"));\n         }\n \n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        JsonArray ajaxJson;\n+        return new InfoItemsPage<>(collector, nextPage);\n+    }\n \n-        Map<String, List<String>> headers = new HashMap<>();\n-        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n-        headers.put(\"X-YouTube-Client-Version\",\n-                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n-        final String response = getDownloader().get(pageUrl, headers, getExtractorLocalization()).responseBody();\n-        if (response.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"Could not parse json data for next streams\");\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        if (page == null || isNullOrEmpty(page.getUrl())) {\n+            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n         }\n \n-        try {\n-            ajaxJson = JsonParser.array().from(response);\n-        } catch (JsonParserException e) {\n-            throw new ParsingException(\"Could not parse json data for next streams\", e);\n-        }\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(page.getUrl(), getExtractorLocalization());\n \n-        JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n+        final JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n                 .getObject(\"continuationContents\").getObject(\"playlistVideoListContinuation\");\n \n         collectStreamsFrom(collector, sectionListContinuation.getArray(\"contents\"));\n \n-        return new InfoItemsPage<>(collector, getNextPageUrlFrom(sectionListContinuation.getArray(\"continuations\")));\n+        return new InfoItemsPage<>(collector, getNextPageFrom(sectionListContinuation.getArray(\"continuations\")));\n     }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) {\n-        if (continuations == null) {\n-            return \"\";\n+    private Page getNextPageFrom(final JsonArray continuations) {\n+        if (isNullOrEmpty(continuations)) {\n+            return null;\n         }\n \n-        JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        String continuation = nextContinuationData.getString(\"continuation\");\n-        String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-        return \"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                + \"&itct=\" + clickTrackingParams;\n+        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n+        final String continuation = nextContinuationData.getString(\"continuation\");\n+        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n+        return new Page(\"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n+                + \"&itct=\" + clickTrackingParams);\n     }\n \n-    private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonArray videos) {\n-        collector.reset();\n-\n+    private void collectStreamsFrom(final StreamInfoItemsCollector collector, final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n-        for (Object video : videos) {\n-            if (((JsonObject) video).getObject(\"playlistVideoRenderer\") != null) {\n+        for (final Object video : videos) {\n+            if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n                 collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video).getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -168,71 +187,98 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Nonnull\n     @Override\n-    public InfoItemsPage<StreamInfoItem> getInitialPage() {\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n         final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n         Page nextPage = null;\n \n-        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n-                .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n-                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\");\n+        final JsonArray contents = initialData.getObject(\"contents\")\n+                .getObject(\"twoColumnBrowseResultsRenderer\").getArray(\"tabs\").getObject(0)\n+                .getObject(\"tabRenderer\").getObject(\"content\").getObject(\"sectionListRenderer\")\n+                .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\")\n+                .getArray(\"contents\");\n \n         if (contents.getObject(0).has(\"playlistSegmentRenderer\")) {\n             for (final Object segment : contents) {\n                 if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"trailer\")) {\n                     collectTrailerFrom(collector, ((JsonObject) segment));\n-                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"videoList\")) {\n-                    collectStreamsFrom(collector, ((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n-                            .getObject(\"videoList\").getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n+                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n+                        .has(\"videoList\")) {\n+                    collectStreamsFrom(collector, ((JsonObject) segment)\n+                            .getObject(\"playlistSegmentRenderer\").getObject(\"videoList\")\n+                            .getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n                 }\n             }\n \n             return new InfoItemsPage<>(collector, null);\n         } else if (contents.getObject(0).has(\"playlistVideoListRenderer\")) {\n             final JsonObject videos = contents.getObject(0).getObject(\"playlistVideoListRenderer\");\n-            collectStreamsFrom(collector, videos.getArray(\"contents\"));\n+            final JsonArray videosArray = videos.getArray(\"contents\");\n+            collectStreamsFrom(collector, videosArray);\n \n-            nextPage = getNextPageFrom(videos.getArray(\"continuations\"));\n+            nextPage = getNextPageFrom(videosArray);\n         }\n \n         return new InfoItemsPage<>(collector, nextPage);\n     }\n \n     @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException,\n+            ExtractionException {\n         if (page == null || isNullOrEmpty(page.getUrl())) {\n             throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n         }\n \n         final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        final JsonArray ajaxJson = getJsonResponse(page.getUrl(), getExtractorLocalization());\n \n-        final JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n-                .getObject(\"continuationContents\").getObject(\"playlistVideoListContinuation\");\n+        final Response response = getDownloader().post(page.getUrl(), null, page.getBody(),\n+                getExtractorLocalization());\n+        final JsonObject ajaxJson = JsonUtils.toJsonObject(getValidJsonResponseBody(response));\n+\n+        final JsonArray continuation = ajaxJson.getArray(\"onResponseReceivedActions\")\n+                .getObject(0)\n+                .getObject(\"appendContinuationItemsAction\")\n+                .getArray(\"continuationItems\");\n \n-        collectStreamsFrom(collector, sectionListContinuation.getArray(\"contents\"));\n+        collectStreamsFrom(collector, continuation);\n \n-        return new InfoItemsPage<>(collector, getNextPageFrom(sectionListContinuation.getArray(\"continuations\")));\n+        return new InfoItemsPage<>(collector, getNextPageFrom(continuation));\n     }\n \n-    private Page getNextPageFrom(final JsonArray continuations) {\n-        if (isNullOrEmpty(continuations)) {\n+    private Page getNextPageFrom(final JsonArray contents) throws IOException,\n+            ExtractionException {\n+        if (isNullOrEmpty(contents)) {\n             return null;\n         }\n \n-        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        final String continuation = nextContinuationData.getString(\"continuation\");\n-        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-        return new Page(\"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                + \"&itct=\" + clickTrackingParams);\n+        final JsonObject lastElement = contents.getObject(contents.size() - 1);\n+        if (lastElement.has(\"continuationItemRenderer\")) {\n+            final String continuation = lastElement\n+                    .getObject(\"continuationItemRenderer\")\n+                    .getObject(\"continuationEndpoint\")\n+                    .getObject(\"continuationCommand\")\n+                    .getString(\"token\");\n+\n+            final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n+                    .getCountryCode())\n+                    .value(\"continuation\", continuation)\n+                    .done())\n+                    .getBytes(UTF_8);\n+\n+            return new Page(\"https://youtubei.googleapis.com/youtubei/v1/browse?key=\"\n+                    + getKey(), body);\n+        } else {\n+            return null;\n+        }\n     }\n \n-    private void collectStreamsFrom(final StreamInfoItemsCollector collector, final JsonArray videos) {\n+    private void collectStreamsFrom(final StreamInfoItemsCollector collector,\n+                                    final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n         for (final Object video : videos) {\n             if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n-                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video).getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n+                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n+                        .getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n                         return -1;\n", "next_change": {"commit": "e075dd5a63856d7cdf760a614153936b6575363e", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..826aee6c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -287,83 +285,4 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n             }\n         }\n     }\n-\n-    private void collectTrailerFrom(final StreamInfoItemsCollector collector,\n-                                    final JsonObject segment) {\n-        collector.commit(new StreamInfoItemExtractor() {\n-            @Override\n-            public String getName() throws ParsingException {\n-                return getTextFromObject(segment.getObject(\"playlistSegmentRenderer\")\n-                        .getObject(\"title\"));\n-            }\n-\n-            @Override\n-            public String getUrl() throws ParsingException {\n-                return YoutubeStreamLinkHandlerFactory.getInstance()\n-                        .fromId(segment.getObject(\"playlistSegmentRenderer\").getObject(\"trailer\")\n-                                .getObject(\"playlistVideoPlayerRenderer\").getString(\"videoId\"))\n-                        .getUrl();\n-            }\n-\n-            @Override\n-            public String getThumbnailUrl() {\n-                return \"\";\n-                /*final JsonArray thumbnails = initialAjaxJson.getObject(1)\n-                        .getObject(\"playerResponse\")\n-                        .getObject(\"videoDetails\").getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                // the last thumbnail is the one with the highest resolution\n-                final String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-                return fixThumbnailUrl(url);*/\n-            }\n-\n-            @Override\n-            public StreamType getStreamType() {\n-                return StreamType.VIDEO_STREAM;\n-            }\n-\n-            @Override\n-            public boolean isAd() {\n-                return false;\n-            }\n-\n-            @Override\n-            public long getDuration() throws ParsingException {\n-                return YoutubeParsingHelper.parseDurationString(\n-                        getTextFromObject(segment.getObject(\"playlistSegmentRenderer\")\n-                                .getObject(\"segmentAnnotation\")).split(\"\u2022\")[0]);\n-            }\n-\n-            @Override\n-            public long getViewCount() {\n-                return -1;\n-            }\n-\n-            @Override\n-            public String getUploaderName() throws ParsingException {\n-                return YoutubePlaylistExtractor.this.getUploaderName();\n-            }\n-\n-            @Override\n-            public String getUploaderUrl() throws ParsingException {\n-                return YoutubePlaylistExtractor.this.getUploaderUrl();\n-            }\n-\n-            @Override\n-            public boolean isUploaderVerified() {\n-                return false;\n-            }\n-\n-            @Nullable\n-            @Override\n-            public String getTextualUploadDate() {\n-                return null;\n-            }\n-\n-            @Nullable\n-            @Override\n-            public DateWrapper getUploadDate() {\n-                return null;\n-            }\n-        });\n-    }\n }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 826aee6c..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -256,33 +299,31 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n                     .getObject(\"continuationCommand\")\n                     .getString(\"token\");\n \n-            final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n-                    .getCountryCode())\n-                    .value(\"continuation\", continuation)\n-                    .done())\n-                    .getBytes(UTF_8);\n+            final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(\n+                            getExtractorLocalization(), getExtractorContentCountry())\n+                            .value(\"continuation\", continuation)\n+                            .done())\n+                    .getBytes(StandardCharsets.UTF_8);\n \n-            return new Page(\"https://youtubei.googleapis.com/youtubei/v1/browse?key=\"\n-                    + getKey(), body);\n+            return new Page(YOUTUBEI_V1_URL + \"browse?key=\" + getKey(), body);\n         } else {\n             return null;\n         }\n     }\n \n-    private void collectStreamsFrom(final StreamInfoItemsCollector collector,\n-                                    final JsonArray videos) {\n+    private void collectStreamsFrom(@Nonnull final StreamInfoItemsCollector collector,\n+                                    @Nonnull final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n-        for (final Object video : videos) {\n-            if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n-                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n-                        .getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n+        videos.stream()\n+                .filter(video -> ((JsonObject) video).has(PLAYLIST_VIDEO_RENDERER))\n+                .map(video -> new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n+                        .getObject(PLAYLIST_VIDEO_RENDERER), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n                         return -1;\n                     }\n-                });\n-            }\n-        }\n+                })\n+                .forEachOrdered(collector::commit);\n     }\n }\n", "next_change": {"commit": "401082abe451368fd4af816ec179dbbd3d174977", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..c3ffd17d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -326,4 +330,10 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n                 })\n                 .forEachOrdered(collector::commit);\n     }\n+\n+    @Nonnull\n+    @Override\n+    public PlaylistInfo.PlaylistType getPlaylistType() throws ParsingException {\n+        return extractPlaylistTypeFromPlaylistUrl(getUrl());\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTM5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819396", "body": "```suggestion\r\n     * The amount of likes a video/audio stream got.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of likes a video/audio stream got.\n          \n          \n            \n                 * The amount of likes a video/audio stream got.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi x x-first x-last\">Amount</span> of likes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"x x-first x-last\">amount</span> of likes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:58:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -125,6 +130,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of likes a video/audio stream got.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -121,7 +117,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n-     *\n      * @return amount of views.\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -117,6 +121,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n+     *\n      * @return amount of views.\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -128,7 +128,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getViewCount() throws ParsingException;\n \n     /**\n-     * The Amount of likes a video/audio stream got.\n+     * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -125,6 +130,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -128,7 +128,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getViewCount() throws ParsingException;\n \n     /**\n-     * The Amount of likes a video/audio stream got.\n+     * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -130,7 +125,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n-     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -125,6 +130,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -128,7 +128,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getViewCount() throws ParsingException;\n \n     /**\n-     * The Amount of likes a video/audio stream got.\n+     * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -133,6 +139,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819446", "body": "```suggestion\r\n     * The amount of dislikes a video/audio stream got.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of dislikes a video/audio stream got.\n          \n          \n            \n                 * The amount of dislikes a video/audio stream got.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi x x-first x-last\">Amount</span> of dislikes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"x x-first x-last\">amount</span> of dislikes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:59:15Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -133,6 +139,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of dislikes a video/audio stream got.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -130,7 +125,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n-     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -125,6 +130,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -128,7 +128,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getViewCount() throws ParsingException;\n \n     /**\n-     * The Amount of likes a video/audio stream got.\n+     * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -133,6 +139,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -139,7 +133,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n-     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -133,6 +139,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n+     *\n      * @return the amount of likes the stream got\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -98,61 +109,73 @@ public abstract class StreamExtractor extends Extractor {\n      * @return The age which limits the content or {@value NO_AGE_LIMIT} if there is no limit\n      * @throws ParsingException if an error occurs while parsing\n      */\n-    public abstract int getAgeLimit() throws ParsingException;\n+    public int getAgeLimit() throws ParsingException {\n+        return NO_AGE_LIMIT;\n+    }\n \n     /**\n      * This should return the length of a video in seconds.\n      *\n-     * @return The length of the stream in seconds.\n+     * @return The length of the stream in seconds or 0 when it has no length (e.g. a livestream).\n      * @throws ParsingException\n      */\n-    public abstract long getLength() throws ParsingException;\n+    public long getLength() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * If the url you are currently handling contains a time stamp/seek, you can return the\n      * position it represents here.\n      * If the url has no time stamp simply return zero.\n      *\n-     * @return the timestamp in seconds\n+     * @return the timestamp in seconds or 0 when there is no timestamp\n      * @throws ParsingException\n      */\n-    public abstract long getTimeStamp() throws ParsingException;\n+    public long getTimeStamp() throws ParsingException {\n+        return 0;\n+    }\n \n     /**\n      * The count of how many people have watched the video/listened to the audio stream.\n      * If the current stream has no view count or its not available simply return -1\n      *\n-     * @return amount of views.\n+     * @return amount of views or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getViewCount() throws ParsingException;\n+    public long getViewCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getLikeCount() throws ParsingException;\n+    public long getLikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n-     * @return the amount of likes the stream got\n+     * @return the amount of likes the stream got or -1 if not available.\n      * @throws ParsingException\n      */\n-    public abstract long getDislikeCount() throws ParsingException;\n+    public long getDislikeCount() throws ParsingException {\n+        return -1;\n+    }\n \n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * <a href=\"https://teamnewpipe.github.io/documentation/03_Implement_a_service/#channel\">ChannelExtractor</a>,\n+     * {@link ChannelExtractor},\n      * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n      * this url.\n      *\n-     * @return the url to the page of the creator/uploader of the stream or an empty String\n+     * @return the url to the page of the creator/uploader of the stream or an empty string\n      * @throws ParsingException\n      */\n     @Nonnull\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -171,12 +169,10 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * The Url to the page of the creator/uploader of the stream. This must not be a homepage,\n      * but the page offered by the service the extractor handles. This url will be handled by the\n-     * {@link ChannelExtractor},\n-     * so be sure to implement that one before you return a value here, otherwise NewPipe will crash if one selects\n-     * this url.\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n      *\n      * @return the url to the page of the creator/uploader of the stream or an empty string\n-     * @throws ParsingException\n      */\n     @Nonnull\n     public abstract String getUploaderUrl() throws ParsingException;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819487", "body": "```suggestion\r\n     * Should return the url of the next stream. NewPipe will automatically play\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * should return the url of the next stream. NewPipe will automatically play\n          \n          \n            \n                 * Should return the url of the next stream. NewPipe will automatically play", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">should</span> <span class=\"pl-k\">return</span> the url of the next stream. <span class=\"pl-smi\">NewPipe</span> will automatically play</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Should</span> <span class=\"pl-k\">return</span> the url of the next stream. <span class=\"pl-smi\">NewPipe</span> will automatically play</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:59:42Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -259,6 +279,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * should return the url of the next stream. NewPipe will automatically play", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -269,7 +250,6 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n-     *\n      * @return the type of the stream\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -250,6 +269,7 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     *\n      * @return the type of the stream\n      * @throws ParsingException\n      */\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -276,7 +276,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract StreamType getStreamType() throws ParsingException;\n \n     /**\n-     * should return the url of the next stream. NewPipe will automatically play\n+     * Should return the url of the next stream. NewPipe will automatically play\n      * the next stream if the user wants that.\n      * If the next stream is is not available simply return null\n      *\n", "next_change": {"commit": "ff560e907a64dc228a04b4f6f4e1f93e94b63da8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..ad8b2290 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -275,22 +310,10 @@ public abstract class StreamExtractor extends Extractor {\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n      * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If it is not available simply return null\n      *\n      * @return a list of InfoItems showing the related videos/streams\n", "next_change": {"commit": "fc3a63fec56c110d7f434ef4377b3eeb2b8bbefe", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex ad8b2290..f48bb913 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -313,8 +313,9 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex f48bb913..4e109bba 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -321,6 +321,7 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws IOException\n      * @throws ExtractionException\n      */\n+    @Nullable\n     public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n \n     /**\n", "next_change": {"commit": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4e109bba..4a7ef400 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -322,7 +334,8 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException;\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n", "next_change": {"commit": "c87771264792fa565b9fae90a7142ac936d51d16", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a7ef400..8eeb1b49 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -337,6 +337,22 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n     getRelatedItems() throws IOException, ExtractionException;\n \n+    /**\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     *         StreamInfoItemsCollector, null otherwise\n+     * @throws IOException\n+     * @throws ExtractionException\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else return null;\n+    }\n+\n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 8eeb1b49..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -330,34 +349,34 @@ public abstract class StreamExtractor extends Extractor {\n      * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n-    getRelatedItems() throws IOException, ExtractionException;\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n \n     /**\n-     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      * @return The result of {@link #getRelatedItems()} if it is a\n-     *         StreamInfoItemsCollector, null otherwise\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      */\n     @Deprecated\n     @Nullable\n     public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n-        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n         if (collector instanceof StreamInfoItemsCollector) {\n             return (StreamInfoItemsCollector) collector;\n-        } else return null;\n+        } else {\n+            return null;\n+        }\n     }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n     public List<Frameset> getFrames() throws ExtractionException {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -279,7 +259,6 @@ public abstract class StreamExtractor extends Extractor {\n      * should return the url of the next stream. NewPipe will automatically play\n      * the next stream if the user wants that.\n      * If the next stream is is not available simply return null\n-     *\n      * @return the InfoItem of the next stream\n      * @throws IOException\n      * @throws ExtractionException\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -259,6 +279,7 @@ public abstract class StreamExtractor extends Extractor {\n      * should return the url of the next stream. NewPipe will automatically play\n      * the next stream if the user wants that.\n      * If the next stream is is not available simply return null\n+     *\n      * @return the InfoItem of the next stream\n      * @throws IOException\n      * @throws ExtractionException\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -276,7 +276,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract StreamType getStreamType() throws ParsingException;\n \n     /**\n-     * should return the url of the next stream. NewPipe will automatically play\n+     * Should return the url of the next stream. NewPipe will automatically play\n      * the next stream if the user wants that.\n      * If the next stream is is not available simply return null\n      *\n", "next_change": {"commit": "ff560e907a64dc228a04b4f6f4e1f93e94b63da8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..ad8b2290 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -275,22 +310,10 @@ public abstract class StreamExtractor extends Extractor {\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n      * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If it is not available simply return null\n      *\n      * @return a list of InfoItems showing the related videos/streams\n", "next_change": {"commit": "fc3a63fec56c110d7f434ef4377b3eeb2b8bbefe", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex ad8b2290..f48bb913 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -313,8 +313,9 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex f48bb913..4e109bba 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -321,6 +321,7 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws IOException\n      * @throws ExtractionException\n      */\n+    @Nullable\n     public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n \n     /**\n", "next_change": {"commit": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4e109bba..4a7ef400 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -322,7 +334,8 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException;\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n", "next_change": {"commit": "c87771264792fa565b9fae90a7142ac936d51d16", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a7ef400..8eeb1b49 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -337,6 +337,22 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n     getRelatedItems() throws IOException, ExtractionException;\n \n+    /**\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     *         StreamInfoItemsCollector, null otherwise\n+     * @throws IOException\n+     * @throws ExtractionException\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else return null;\n+    }\n+\n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 8eeb1b49..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -330,34 +349,34 @@ public abstract class StreamExtractor extends Extractor {\n      * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n-    getRelatedItems() throws IOException, ExtractionException;\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n \n     /**\n-     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      * @return The result of {@link #getRelatedItems()} if it is a\n-     *         StreamInfoItemsCollector, null otherwise\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      */\n     @Deprecated\n     @Nullable\n     public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n-        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n         if (collector instanceof StreamInfoItemsCollector) {\n             return (StreamInfoItemsCollector) collector;\n-        } else return null;\n+        } else {\n+            return null;\n+        }\n     }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n     public List<Frameset> getFrames() throws ExtractionException {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTUyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819520", "body": "```suggestion\r\n     * If it is not available simply return null\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If  is is not available simply return null\n          \n          \n            \n                 * If it is not available simply return null", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">If</span> <span class=\"x x-first x-last\"> is</span> is not available simply <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">If</span> <span class=\"x x-first x-last\">it</span> is not available simply <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:00:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -271,6 +292,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If  is is not available simply return null", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -292,7 +271,6 @@ public abstract class StreamExtractor extends Extractor {\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If  is is not available simply return null\n-     *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n      * @throws ExtractionException\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -271,6 +292,7 @@ public abstract class StreamExtractor extends Extractor {\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If  is is not available simply return null\n+     *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n      * @throws ExtractionException\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -291,7 +291,7 @@ public abstract class StreamExtractor extends Extractor {\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If  is is not available simply return null\n+     * If it is not available simply return null\n      *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n", "next_change": {"commit": "ff560e907a64dc228a04b4f6f4e1f93e94b63da8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..ad8b2290 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -275,22 +310,10 @@ public abstract class StreamExtractor extends Extractor {\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n      * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If it is not available simply return null\n      *\n      * @return a list of InfoItems showing the related videos/streams\n", "next_change": {"commit": "fc3a63fec56c110d7f434ef4377b3eeb2b8bbefe", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex ad8b2290..f48bb913 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -313,8 +313,9 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex f48bb913..4e109bba 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -321,6 +321,7 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws IOException\n      * @throws ExtractionException\n      */\n+    @Nullable\n     public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n \n     /**\n", "next_change": {"commit": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4e109bba..4a7ef400 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -322,7 +334,8 @@ public abstract class StreamExtractor extends Extractor {\n      * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException;\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n", "next_change": {"commit": "c87771264792fa565b9fae90a7142ac936d51d16", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a7ef400..8eeb1b49 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -337,6 +337,22 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n     getRelatedItems() throws IOException, ExtractionException;\n \n+    /**\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     *         StreamInfoItemsCollector, null otherwise\n+     * @throws IOException\n+     * @throws ExtractionException\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else return null;\n+    }\n+\n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 8eeb1b49..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -330,34 +349,34 @@ public abstract class StreamExtractor extends Extractor {\n      * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nullable\n-    public abstract InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n-    getRelatedItems() throws IOException, ExtractionException;\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n \n     /**\n-     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      * @return The result of {@link #getRelatedItems()} if it is a\n-     *         StreamInfoItemsCollector, null otherwise\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n      */\n     @Deprecated\n     @Nullable\n     public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n-        InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n         if (collector instanceof StreamInfoItemsCollector) {\n             return (StreamInfoItemsCollector) collector;\n-        } else return null;\n+        } else {\n+            return null;\n+        }\n     }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n     public List<Frameset> getFrames() throws ExtractionException {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -279,6 +301,7 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n+     *\n      * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n      * @throws IOException\n      * @throws ExtractionException\n", "next_change": {"commit": "fc3a63fec56c110d7f434ef4377b3eeb2b8bbefe", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..f48bb913 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -303,11 +327,10 @@ public abstract class StreamExtractor extends Extractor {\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n      * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n      * @throws ExtractionException\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex f48bb913..12cd5d34 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -337,9 +405,11 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 12cd5d34..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -416,18 +397,16 @@ public abstract class StreamExtractor extends Extractor {\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTU3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819573", "body": "```suggestion\r\n     * Honestly I don't even know the time stamp format of YouTube.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Honestly I don't even know the time stamp fromat of youtube.\n          \n          \n            \n                 * Honestly I don't even know the time stamp format of YouTube.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Honestly</span> <span class=\"pl-smi\">I</span> don<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t even know the time stamp <span class=\"x x-first x-last\">fromat</span> of <span class=\"x x-first x-last\">youtube</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Honestly</span> <span class=\"pl-smi\">I</span> don<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t even know the time stamp <span class=\"x x-first x-last\">format</span> of <span class=\"x x-first x-last\">YouTube</span>.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:00:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -325,7 +302,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n-     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -302,6 +325,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -162,179 +181,232 @@ public abstract class StreamExtractor extends Extractor {\n      * The name of the creator/uploader of the stream.\n      * If the name is not available you can simply return an empty string.\n      *\n-     * @return the name of the creator/uploader of the stream or an empty String\n-     * @throws ParsingException\n+     * @return the name of the creator/uploader of the stream or an empty tring\n      */\n     @Nonnull\n     public abstract String getUploaderName() throws ParsingException;\n \n+    /**\n+     * Whether the uploader has been verified by the service's provider.\n+     * If there is no verification implemented, return <code>false</code>.\n+     *\n+     * @return whether the uploader has been verified by the service's provider\n+     */\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n+    /**\n+     * The subscriber count of the uploader.\n+     * If the subscriber count is not implemented, or is unavailable, return <code>-1</code>.\n+     *\n+     * @return the subscriber count of the uploader or {@value UNKNOWN_SUBSCRIBER_COUNT} if not\n+     * available\n+     */\n+    public long getUploaderSubscriberCount() throws ParsingException {\n+        return UNKNOWN_SUBSCRIBER_COUNT;\n+    }\n+\n     /**\n      * The url to the image file/profile picture/avatar of the creator/uploader of the stream.\n      * If the url is not available you can return an empty String.\n      *\n      * @return The url of the image file of the uploader or an empty String\n-     * @throws ParsingException\n      */\n     @Nonnull\n-    public abstract String getUploaderAvatarUrl() throws ParsingException;\n+    public String getUploaderAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The Url to the page of the sub-channel of the stream. This must not be a homepage,\n+     * but the page offered by the service the extractor handles. This url will be handled by the\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n+     *\n+     * @return the url to the page of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The name of the sub-channel of the stream.\n+     * If the name is not available you can simply return an empty string.\n+     *\n+     * @return the name of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The url to the image file/profile picture/avatar of the sub-channel of the stream.\n+     * If the url is not available you can return an empty String.\n+     *\n+     * @return The url of the image file of the sub-channel or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n      * Get the dash mpd url. If you don't know what a dash MPD is you can read about it\n      * <a href=\"https://www.brendanlong.com/the-structure-of-an-mpeg-dash-mpd.html\">here</a>.\n      *\n-     * @return the url as a string or an empty string\n+     * @return the url as a string or an empty string or an empty string if not available\n      * @throws ParsingException if an error occurs while reading\n      */\n     @Nonnull\n-    public abstract String getDashMpdUrl() throws ParsingException;\n+    public String getDashMpdUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * I am not sure if this is in use, and how this is used. However the frontend is missing support\n-     * for HLS streams. Prove me if I am wrong. Please open an\n+     * I am not sure if this is in use, and how this is used. However the frontend is missing\n+     * support for HLS streams. Prove me if I am wrong. Please open an\n      * <a href=\"https://github.com/teamnewpipe/newpipe/issues\">issue</a>,\n      * or fix this description if you know whats up with this.\n      *\n-     * @return The Url to the hls stream.\n-     * @throws ParsingException\n+     * @return The Url to the hls stream or an empty string if not available.\n      */\n     @Nonnull\n-    public abstract String getHlsUrl() throws ParsingException;\n+    public String getHlsUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/AudioStream.html\">AudioStream</a>s\n+     * This should return a list of available {@link AudioStream}s.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of audio only streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<AudioStream> getAudioStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of combined video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s.\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do NOT contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle\n+     * this as a failed extraction procedure.\n      *\n      * @return a list of video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoOnlyStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * If no subtitles are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s.\n+     * If no subtitles are available an empty list can be returned.\n      *\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * given by a specific type.\n-     * If no subtitles in that specific format are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s given by a specific type.\n+     * If no subtitles in that specific format are available an empty list can be returned.\n      *\n      * @param format the media format by which the subtitles should be filtered\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitles(MediaFormat format) throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitles(final MediaFormat format)\n+            throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     * Get the {@link StreamType}.\n      *\n      * @return the type of the stream\n-     * @throws ParsingException\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    @Nullable\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n+\n+    /**\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else {\n+            return null;\n+        }\n+    }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -342,33 +414,29 @@ public abstract class StreamExtractor extends Extractor {\n             return -2;\n         }\n \n-        if (!timeStamp.isEmpty()) {\n+        if (!timestamp.isEmpty()) {\n             try {\n                 String secondsString = \"\";\n                 String minutesString = \"\";\n                 String hoursString = \"\";\n                 try {\n-                    secondsString = Parser.matchGroup1(\"(\\\\d{1,3})s\", timeStamp);\n-                    minutesString = Parser.matchGroup1(\"(\\\\d{1,3})m\", timeStamp);\n-                    hoursString = Parser.matchGroup1(\"(\\\\d{1,3})h\", timeStamp);\n-                } catch (Exception e) {\n-                    //it could be that time is given in another method\n-                    if (secondsString.isEmpty() //if nothing was got,\n-                            && minutesString.isEmpty()//treat as unlabelled seconds\n-                            && hoursString.isEmpty()) {\n-                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timeStamp);\n+                    secondsString = Parser.matchGroup1(\"(\\\\d+)s\", timestamp);\n+                    minutesString = Parser.matchGroup1(\"(\\\\d+)m\", timestamp);\n+                    hoursString = Parser.matchGroup1(\"(\\\\d+)h\", timestamp);\n+                } catch (final Exception e) {\n+                    // it could be that time is given in another method\n+                    if (secondsString.isEmpty() && minutesString.isEmpty()) {\n+                        // if nothing was obtained, treat as unlabelled seconds\n+                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timestamp);\n                     }\n                 }\n \n-                int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n-                int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n-                int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n+                final int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n+                final int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n+                final int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n \n-                //don't trust BODMAS!\n-                return seconds + (60 * minutes) + (3600 * hours);\n-                //Log.d(TAG, \"derived timestamp value:\"+ret);\n-                //the ordering varies internationally\n-            } catch (ParsingException e) {\n+                return seconds + (60L * minutes) + (3600L * hours);\n+            } catch (final ParsingException e) {\n                 throw new ParsingException(\"Could not get timestamp.\", e);\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTYwNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819604", "body": "```suggestion\r\n     * @return the time stamp/seek for the video in seconds\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the sime stamp/seek for the video in seconds\n          \n          \n            \n                 * @return the time stamp/seek for the video in seconds", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first x-last\">sime</span> stamp<span class=\"pl-k\">/</span>seek <span class=\"pl-k\">for</span> the video in seconds</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first x-last\">time</span> stamp<span class=\"pl-k\">/</span>seek <span class=\"pl-k\">for</span> the video in seconds</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:01:10Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9f03178f540bda74eaa2512519e7acf1a89471", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..fdc56972 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -325,7 +302,6 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n-     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex fdc56972..587101cf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -302,6 +325,7 @@ public abstract class StreamExtractor extends Extractor {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException\n", "next_change": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -162,179 +181,232 @@ public abstract class StreamExtractor extends Extractor {\n      * The name of the creator/uploader of the stream.\n      * If the name is not available you can simply return an empty string.\n      *\n-     * @return the name of the creator/uploader of the stream or an empty String\n-     * @throws ParsingException\n+     * @return the name of the creator/uploader of the stream or an empty tring\n      */\n     @Nonnull\n     public abstract String getUploaderName() throws ParsingException;\n \n+    /**\n+     * Whether the uploader has been verified by the service's provider.\n+     * If there is no verification implemented, return <code>false</code>.\n+     *\n+     * @return whether the uploader has been verified by the service's provider\n+     */\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n+    /**\n+     * The subscriber count of the uploader.\n+     * If the subscriber count is not implemented, or is unavailable, return <code>-1</code>.\n+     *\n+     * @return the subscriber count of the uploader or {@value UNKNOWN_SUBSCRIBER_COUNT} if not\n+     * available\n+     */\n+    public long getUploaderSubscriberCount() throws ParsingException {\n+        return UNKNOWN_SUBSCRIBER_COUNT;\n+    }\n+\n     /**\n      * The url to the image file/profile picture/avatar of the creator/uploader of the stream.\n      * If the url is not available you can return an empty String.\n      *\n      * @return The url of the image file of the uploader or an empty String\n-     * @throws ParsingException\n      */\n     @Nonnull\n-    public abstract String getUploaderAvatarUrl() throws ParsingException;\n+    public String getUploaderAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The Url to the page of the sub-channel of the stream. This must not be a homepage,\n+     * but the page offered by the service the extractor handles. This url will be handled by the\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n+     *\n+     * @return the url to the page of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The name of the sub-channel of the stream.\n+     * If the name is not available you can simply return an empty string.\n+     *\n+     * @return the name of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The url to the image file/profile picture/avatar of the sub-channel of the stream.\n+     * If the url is not available you can return an empty String.\n+     *\n+     * @return The url of the image file of the sub-channel or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n      * Get the dash mpd url. If you don't know what a dash MPD is you can read about it\n      * <a href=\"https://www.brendanlong.com/the-structure-of-an-mpeg-dash-mpd.html\">here</a>.\n      *\n-     * @return the url as a string or an empty string\n+     * @return the url as a string or an empty string or an empty string if not available\n      * @throws ParsingException if an error occurs while reading\n      */\n     @Nonnull\n-    public abstract String getDashMpdUrl() throws ParsingException;\n+    public String getDashMpdUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * I am not sure if this is in use, and how this is used. However the frontend is missing support\n-     * for HLS streams. Prove me if I am wrong. Please open an\n+     * I am not sure if this is in use, and how this is used. However the frontend is missing\n+     * support for HLS streams. Prove me if I am wrong. Please open an\n      * <a href=\"https://github.com/teamnewpipe/newpipe/issues\">issue</a>,\n      * or fix this description if you know whats up with this.\n      *\n-     * @return The Url to the hls stream.\n-     * @throws ParsingException\n+     * @return The Url to the hls stream or an empty string if not available.\n      */\n     @Nonnull\n-    public abstract String getHlsUrl() throws ParsingException;\n+    public String getHlsUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/AudioStream.html\">AudioStream</a>s\n+     * This should return a list of available {@link AudioStream}s.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of audio only streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<AudioStream> getAudioStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of combined video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s.\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do NOT contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle\n+     * this as a failed extraction procedure.\n      *\n      * @return a list of video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoOnlyStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * If no subtitles are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s.\n+     * If no subtitles are available an empty list can be returned.\n      *\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * given by a specific type.\n-     * If no subtitles in that specific format are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s given by a specific type.\n+     * If no subtitles in that specific format are available an empty list can be returned.\n      *\n      * @param format the media format by which the subtitles should be filtered\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitles(MediaFormat format) throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitles(final MediaFormat format)\n+            throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     * Get the {@link StreamType}.\n      *\n      * @return the type of the stream\n-     * @throws ParsingException\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    @Nullable\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n+\n+    /**\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else {\n+            return null;\n+        }\n+    }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -342,33 +414,29 @@ public abstract class StreamExtractor extends Extractor {\n             return -2;\n         }\n \n-        if (!timeStamp.isEmpty()) {\n+        if (!timestamp.isEmpty()) {\n             try {\n                 String secondsString = \"\";\n                 String minutesString = \"\";\n                 String hoursString = \"\";\n                 try {\n-                    secondsString = Parser.matchGroup1(\"(\\\\d{1,3})s\", timeStamp);\n-                    minutesString = Parser.matchGroup1(\"(\\\\d{1,3})m\", timeStamp);\n-                    hoursString = Parser.matchGroup1(\"(\\\\d{1,3})h\", timeStamp);\n-                } catch (Exception e) {\n-                    //it could be that time is given in another method\n-                    if (secondsString.isEmpty() //if nothing was got,\n-                            && minutesString.isEmpty()//treat as unlabelled seconds\n-                            && hoursString.isEmpty()) {\n-                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timeStamp);\n+                    secondsString = Parser.matchGroup1(\"(\\\\d+)s\", timestamp);\n+                    minutesString = Parser.matchGroup1(\"(\\\\d+)m\", timestamp);\n+                    hoursString = Parser.matchGroup1(\"(\\\\d+)h\", timestamp);\n+                } catch (final Exception e) {\n+                    // it could be that time is given in another method\n+                    if (secondsString.isEmpty() && minutesString.isEmpty()) {\n+                        // if nothing was obtained, treat as unlabelled seconds\n+                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timestamp);\n                     }\n                 }\n \n-                int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n-                int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n-                int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n+                final int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n+                final int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n+                final int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n \n-                //don't trust BODMAS!\n-                return seconds + (60 * minutes) + (3600 * hours);\n-                //Log.d(TAG, \"derived timestamp value:\"+ret);\n-                //the ordering varies internationally\n-            } catch (ParsingException e) {\n+                return seconds + (60L * minutes) + (3600L * hours);\n+            } catch (final ParsingException e) {\n                 throw new ParsingException(\"Could not get timestamp.\", e);\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTc2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819766", "body": "```suggestion\r\n     * Get the media format by its id.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the media format by it's id.\n          \n          \n            \n                 * Get the media format by its id.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Get</span> the media format by <span class=\"x x-first\">it</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">s</span> id.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Get</span> the media format by <span class=\"x x-first x-last\">its</span> id.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:03:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java", "diffHunk": "@@ -116,25 +116,27 @@ public static MediaFormat getFromMimeType(String mimeType) {\n \n     /**\n      * Get the media format by it's id.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\nindex 0b6052f0..6936568a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n", "chunk": "@@ -115,7 +115,7 @@ public enum MediaFormat {\n     }\n \n     /**\n-     * Get the media format by it's id.\n+     * Get the media format by its id.\n      *\n      * @param id the id\n      * @return the id of the media format or null.\n", "next_change": {"commit": "c2446ecff002f7ffd6fd147956081fd0d2ae84db", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\nindex 6936568a..5836f5b8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n", "chunk": "@@ -107,11 +113,11 @@ public enum MediaFormat {\n      * @return MediaFormat associated with this mime type,\n      * or null if none match it.\n      */\n-    public static MediaFormat getFromMimeType(String mimeType) {\n-        for (MediaFormat vf : MediaFormat.values()) {\n-            if (vf.mimeType.equals(mimeType)) return vf;\n-        }\n-        return null;\n+    public static MediaFormat getFromMimeType(final String mimeType) {\n+        return Arrays.stream(MediaFormat.values())\n+                .filter(mediaFormat -> mediaFormat.mimeType.equals(mimeType))\n+                .findFirst()\n+                .orElse(null);\n     }\n \n     /**\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\nindex 6936568a..5836f5b8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n", "chunk": "@@ -120,18 +126,15 @@ public enum MediaFormat {\n      * @param id the id\n      * @return the id of the media format or null.\n      */\n-    public static MediaFormat getFormatById(int id) {\n-        for (MediaFormat vf : values()) {\n-            if (vf.id == id) return vf;\n-        }\n-        return null;\n+    public static MediaFormat getFormatById(final int id) {\n+        return getById(id, mediaFormat -> mediaFormat, null);\n     }\n \n-    public static MediaFormat getFromSuffix(String suffix) {\n-        for (MediaFormat vf : values()) {\n-            if (vf.suffix.equals(suffix)) return vf;\n-        }\n-        return null;\n+    public static MediaFormat getFromSuffix(final String suffix) {\n+        return Arrays.stream(MediaFormat.values())\n+                .filter(mediaFormat -> mediaFormat.suffix.equals(suffix))\n+                .findFirst()\n+                .orElse(null);\n     }\n \n     /**\n", "next_change": null}]}}]}}, {"oid": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "message": "Improve code formatting and optimise imports", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "6822574588cde36580cfd564363dc632e0f7446a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6822574588cde36580cfd564363dc632e0f7446a", "message": "Fix typos\n\nCo-Authored-By: B0pol <bopol@e.email>", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "message": "Apply one suggestion", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "message": "Apply one suggestion", "committedDate": "2020-02-15T12:36:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NTIyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379845220", "body": "```suggestion\r\n        if (llhf == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == llhf) {\n          \n          \n            \n                    if (llhf == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">llhf</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">llhf</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-15T17:43:17Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java", "diffHunk": "@@ -269,7 +263,7 @@ public StreamExtractor getStreamExtractor(String url) throws ExtractionException\n \n     public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n         ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if(null == llhf) {\n+        if (null == llhf) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\nindex 110efe04..e21b17f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n", "chunk": "@@ -263,7 +263,7 @@ public abstract class StreamingService {\n \n     public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n         ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if (null == llhf) {\n+        if (llhf == null) {\n             return null;\n         }\n         return getCommentsExtractor(llhf.fromUrl(url));\n", "next_change": {"commit": "d79e20340cfea7d7a96b2e40487c0f069491d25c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\nindex e21b17f3..94b8ba2d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n", "chunk": "@@ -245,28 +254,28 @@ public abstract class StreamingService {\n     // Short extractors overloads\n     //////////////////////////////////////////////////////////////////////////*/\n \n-    public SearchExtractor getSearchExtractor(String query) throws ExtractionException {\n+    public SearchExtractor getSearchExtractor(final String query) throws ExtractionException {\n         return getSearchExtractor(getSearchQHFactory().fromQuery(query));\n     }\n \n-    public ChannelExtractor getChannelExtractor(String url) throws ExtractionException {\n+    public ChannelExtractor getChannelExtractor(final String url) throws ExtractionException {\n         return getChannelExtractor(getChannelLHFactory().fromUrl(url));\n     }\n \n-    public PlaylistExtractor getPlaylistExtractor(String url) throws ExtractionException {\n+    public PlaylistExtractor getPlaylistExtractor(final String url) throws ExtractionException {\n         return getPlaylistExtractor(getPlaylistLHFactory().fromUrl(url));\n     }\n \n-    public StreamExtractor getStreamExtractor(String url) throws ExtractionException {\n+    public StreamExtractor getStreamExtractor(final String url) throws ExtractionException {\n         return getStreamExtractor(getStreamLHFactory().fromUrl(url));\n     }\n \n-    public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n-        ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if (llhf == null) {\n+    public CommentsExtractor getCommentsExtractor(final String url) throws ExtractionException {\n+        final ListLinkHandlerFactory listLinkHandlerFactory = getCommentsLHFactory();\n+        if (listLinkHandlerFactory == null) {\n             return null;\n         }\n-        return getCommentsExtractor(llhf.fromUrl(url));\n+        return getCommentsExtractor(listLinkHandlerFactory.fromUrl(url));\n     }\n \n     /*//////////////////////////////////////////////////////////////////////////\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926074", "body": "```suggestion\r\n        if (response == null || StringUtil.isBlank(response.responseBody())) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == response || StringUtil.isBlank(response.responseBody())) {\n          \n          \n            \n                    if (response == null || StringUtil.isBlank(response.responseBody())) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">response</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>isBlank(response<span class=\"pl-k\">.</span>responseBody())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">response</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>isBlank(response<span class=\"pl-k\">.</span>responseBody())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:14:47Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java", "diffHunk": "@@ -10,45 +11,43 @@\n import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n-import com.grack.nanojson.JsonObject;\n-import com.grack.nanojson.JsonParser;\n-import com.grack.nanojson.JsonParserException;\n+import java.io.IOException;\n \n public class PeertubeInstance {\n-    \n+\n     private final String url;\n     private String name;\n     public static final PeertubeInstance defaultInstance = new PeertubeInstance(\"https://framatube.org\", \"FramaTube\");\n-    \n+\n     public PeertubeInstance(String url) {\n         this.url = url;\n         this.name = \"PeerTube\";\n     }\n-    \n-    public PeertubeInstance(String url , String name) {\n+\n+    public PeertubeInstance(String url, String name) {\n         this.url = url;\n         this.name = name;\n     }\n \n     public String getUrl() {\n         return url;\n     }\n-    \n+\n     public void fetchInstanceMetaData() throws Exception {\n         Downloader downloader = NewPipe.getDownloader();\n         Response response = null;\n-        \n+\n         try {\n             response = downloader.get(url + \"/api/v1/config\");\n         } catch (ReCaptchaException | IOException e) {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n-        \n-        if(null == response || StringUtil.isBlank(response.responseBody())) {\n+\n+        if (null == response || StringUtil.isBlank(response.responseBody())) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\nindex 17d08580..82b67539 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n", "chunk": "@@ -43,7 +43,7 @@ public class PeertubeInstance {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n \n-        if (null == response || StringUtil.isBlank(response.responseBody())) {\n+        if (response == null || StringUtil.isBlank(response.responseBody())) {\n             throw new Exception(\"unable to configure instance \" + url);\n         }\n \n", "next_change": {"commit": "036cc7e26e926b41a35f71bbbebde13f1de2f13e", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\nindex 82b67539..a29a592e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n", "chunk": "@@ -43,7 +44,7 @@ public class PeertubeInstance {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n \n-        if (response == null || StringUtil.isBlank(response.responseBody())) {\n+        if (response == null || Utils.isBlank(response.responseBody())) {\n             throw new Exception(\"unable to configure instance \" + url);\n         }\n \n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\nindex a29a592e..5b6d64d6 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n", "chunk": "@@ -49,7 +47,7 @@ public class PeertubeInstance {\n         }\n \n         try {\n-            JsonObject json = JsonParser.object().from(response.responseBody());\n+            final JsonObject json = JsonParser.object().from(response.responseBody());\n             this.name = JsonUtils.getString(json, \"instance.name\");\n         } catch (JsonParserException | ParsingException e) {\n             throw new Exception(\"unable to parse instance config\", e);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926084", "body": "```suggestion\r\n        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n          \n          \n            \n                    if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">json</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract PeerTube channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">json</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract PeerTube channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:15:04Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..d53fb7ad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n+        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": {"commit": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex d53fb7ad..cb8a5f78 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -117,59 +125,33 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             }\n         }\n \n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final long total;\n         if (json != null) {\n             PeertubeParsingHelper.validate(json);\n-            Number number = JsonUtils.getNumber(json, \"total\");\n-            if (number != null) this.total = number.longValue();\n-            collectStreamsFrom(collector, json, pageUrl);\n+            total = JsonUtils.getNumber(json, \"total\").longValue();\n+            collectStreamsFrom(collector, json);\n         } else {\n             throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n-        return new InfoItemsPage<>(collector, getNextPageUrl(pageUrl));\n-    }\n-\n-\n-    private String getNextPageUrl(String prevPageUrl) {\n-        String prevStart;\n-        try {\n-            prevStart = Parser.matchGroup1(START_PATTERN, prevPageUrl);\n-        } catch (RegexException e) {\n-            return \"\";\n-        }\n-        if (StringUtil.isBlank(prevStart)) return \"\";\n-        long nextStart = 0;\n-        try {\n-            nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n-        } catch (NumberFormatException e) {\n-            return \"\";\n-        }\n-\n-        if (nextStart >= total) {\n-            return \"\";\n-        } else {\n-            return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n-        }\n+        return new InfoItemsPage<>(collector, PeertubeParsingHelper.getNextPageUrl(pageUrl, total));\n     }\n \n     @Override\n-    public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        Response response = downloader.get(getUrl());\n-        if (null != response && null != response.responseBody()) {\n+    public void onFetchPage(final Downloader downloader) throws IOException, ExtractionException {\n+        final Response response = downloader.get(getUrl());\n+        if (response != null && response.responseBody() != null) {\n             setInitialData(response.responseBody());\n         } else {\n             throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n-\n-        String pageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n-        this.initPage = getPage(pageUrl);\n     }\n \n-    private void setInitialData(String responseBody) throws ExtractionException {\n+    private void setInitialData(final String responseBody) throws ExtractionException {\n         try {\n             json = JsonParser.object().from(responseBody);\n         } catch (JsonParserException e) {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\", e);\n         }\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex cb8a5f78..432433cd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -156,13 +152,9 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n         return JsonUtils.getString(json, \"displayName\");\n     }\n-\n-    @Override\n-    public String getOriginalUrl() throws ParsingException {\n-        return baseUrl + \"/\" + getId();\n-    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926097", "body": "```suggestion\r\n        if (title == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == title) {\n          \n          \n            \n                    if (title == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">title</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">title</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:15:22Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java", "diffHunk": "@@ -107,32 +108,32 @@ private String getNextPageUrl(String continuation) throws ParsingException {\n     }\n \n     private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObject ajaxJson) throws ParsingException {\n-        \n+\n         JsonArray contents;\n         try {\n             contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             //no comments\n             return;\n         }\n         fetchTitle(contents);\n         List<Object> comments;\n         try {\n             comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to get parse youtube comments\", e);\n         }\n-        \n-        for(Object c: comments) {\n-            if(c instanceof JsonObject) {\n+\n+        for (Object c : comments) {\n+            if (c instanceof JsonObject) {\n                 CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if(null == title) {\n+        if (null == title) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex bcacf7cf..78eb59f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -133,7 +133,7 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if (null == title) {\n+        if (title == null) {\n             try {\n                 title = getYoutubeText(JsonUtils.getObject(contents.getObject(0), \"commentThreadRenderer.commentTargetTitle\"));\n             } catch (Exception e) {\n", "next_change": {"commit": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 78eb59f3..5a68501e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -132,16 +130,6 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         }\n     }\n \n-    private void fetchTitle(JsonArray contents) {\n-        if (title == null) {\n-            try {\n-                title = getYoutubeText(JsonUtils.getObject(contents.getObject(0), \"commentThreadRenderer.commentTargetTitle\"));\n-            } catch (Exception e) {\n-                title = \"Youtube Comments\";\n-            }\n-        }\n-    }\n-\n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n", "next_change": {"commit": "4cc312086afc6d6772ba657ddf96c5f5b14f41bd", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 5a68501e..62d1eb97 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -135,16 +124,13 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        String responseBody = response.responseBody();\n+        responseBody = response.responseBody();\n         ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n         ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n-        String commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n-        String commentsToken = findValue(commentsTokenInside, \"continuation\\\":\\\"\", \"\\\"\");\n-        initPage = getPage(getNextPageUrl(commentsToken));\n     }\n \n-    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n \n+    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n         Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n", "next_change": {"commit": "688a1c316bb40c3536c2a003a07ad7e8462eef26", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 62d1eb97..a4b22524 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -16,122 +15,180 @@ import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Parser;\n \n+import javax.annotation.Nonnull;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n-import javax.annotation.Nonnull;\n-\n import static java.util.Collections.singletonList;\n+import static org.schabi.newpipe.extractor.utils.Utils.UTF_8;\n+import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n \n public class YoutubeCommentsExtractor extends CommentsExtractor {\n     // using the mobile site for comments because it loads faster and uses get requests instead of post\n-    private static final String USER_AGENT = \"Mozilla/5.0 (Android 8.1.0; Mobile; rv:62.0) Gecko/62.0 Firefox/62.0\";\n+    private static final String USER_AGENT = \"Mozilla/5.0 (Android 9; Mobile; rv:78.0) Gecko/20100101 Firefox/78.0\";\n     private static final Pattern YT_CLIENT_NAME_PATTERN = Pattern.compile(\"INNERTUBE_CONTEXT_CLIENT_NAME\\\\\\\":(.*?)[,}]\");\n \n     private String ytClientVersion;\n     private String ytClientName;\n     private String responseBody;\n \n-    public YoutubeCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+    private Optional<Boolean> optCommentsDisabled = Optional.empty();\n+\n+    public YoutubeCommentsExtractor(\n+            final StreamingService service,\n+            final ListLinkHandler uiHandler) {\n         super(service, uiHandler);\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        String commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n-        String commentsToken = findValue(commentsTokenInside, \"continuation\\\":\\\"\", \"\\\"\");\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage()\n+            throws IOException, ExtractionException {\n+\n+        // Check if the the findInitialCommentsToken was already called and initialized\n+        if (optCommentsDisabled.orElse(false)) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+\n+        // Get the token\n+        final String commentsToken = findInitialCommentsToken();\n+        // Check if the comments have been disabled\n+        if (optCommentsDisabled.get()) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+\n         return getPage(getNextPage(commentsToken));\n     }\n \n-    private Page getNextPage(JsonObject ajaxJson) throws ParsingException {\n-        JsonArray arr;\n+    /**\n+     * Finds the initial comments token and initializes commentsDisabled.\n+     * @return\n+     */\n+    private String findInitialCommentsToken() {\n+        final String continuationStartPattern = \"continuation\\\":\\\"\";\n+\n+        String commentsTokenInside = findValue(responseBody, \"sectionListRenderer\", \"}\");\n+        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+            commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n+        }\n+\n+        // If no continuation token is found the comments are disabled\n+        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+            optCommentsDisabled = Optional.of(true);\n+            return null;\n+        }\n+\n+        // If a continuation token is found there are >= 0 comments\n+        final String commentsToken = findValue(commentsTokenInside, continuationStartPattern, \"\\\"\");\n+\n+        optCommentsDisabled = Optional.of(false);\n+\n+        return commentsToken;\n+    }\n+\n+    private InfoItemsPage<CommentsInfoItem> getInfoItemsPageForDisabledComments() {\n+        return new InfoItemsPage<>(Collections.emptyList(), null, Collections.emptyList());\n+    }\n+\n+    private Page getNextPage(final JsonObject ajaxJson) throws ParsingException {\n+        final JsonArray arr;\n         try {\n             arr = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.continuations\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             return null;\n         }\n         if (arr.isEmpty()) {\n             return null;\n         }\n-        String continuation;\n+        final String continuation;\n         try {\n             continuation = JsonUtils.getString(arr.getObject(0), \"nextContinuationData.continuation\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             return null;\n         }\n         return getNextPage(continuation);\n     }\n \n-    private Page getNextPage(String continuation) throws ParsingException {\n-        Map<String, String> params = new HashMap<>();\n+    private Page getNextPage(final String continuation) throws ParsingException {\n+        final Map<String, String> params = new HashMap<>();\n         params.put(\"action_get_comments\", \"1\");\n         params.put(\"pbj\", \"1\");\n         params.put(\"ctoken\", continuation);\n         try {\n             return new Page(\"https://m.youtube.com/watch_comment?\" + getDataString(params));\n-        } catch (UnsupportedEncodingException e) {\n+        } catch (final UnsupportedEncodingException e) {\n             throw new ParsingException(\"Could not get next page url\", e);\n         }\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getPage(Page page) throws IOException, ExtractionException {\n-        String ajaxResponse = makeAjaxRequest(page.getUrl());\n-        JsonObject ajaxJson;\n+    public InfoItemsPage<CommentsInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        if (optCommentsDisabled.orElse(false)) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+        if (page == null || isNullOrEmpty(page.getUrl())) {\n+            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n+        }\n+\n+        final String ajaxResponse = makeAjaxRequest(page.getUrl());\n+        final JsonObject ajaxJson;\n         try {\n             ajaxJson = JsonParser.array().from(ajaxResponse).getObject(1);\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not parse json data for comments\", e);\n         }\n-        CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n         collectCommentsFrom(collector, ajaxJson);\n         return new InfoItemsPage<>(collector, getNextPage(ajaxJson));\n     }\n \n-    private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObject ajaxJson) throws ParsingException {\n-        JsonArray contents;\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject ajaxJson) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             //no comments\n             return;\n         }\n-        List<Object> comments;\n+        final List<Object> comments;\n         try {\n             comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"unable to get parse youtube comments\", e);\n         }\n \n-        for (Object c : comments) {\n+        for (final Object c : comments) {\n             if (c instanceof JsonObject) {\n-                CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n+                final CommentsInfoItemExtractor extractor =\n+                        new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        responseBody = response.responseBody();\n+        responseBody = YoutubeParsingHelper.unescapeDocument(response.responseBody());\n         ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n         ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n     }\n \n \n-    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n-        Map<String, List<String>> requestHeaders = new HashMap<>();\n+    private String makeAjaxRequest(final String siteUrl) throws IOException, ReCaptchaException {\n+        final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         requestHeaders.put(\"X-YouTube-Client-Version\", singletonList(ytClientVersion));\n", "next_change": {"commit": "f3e4c9d689d72f1c800acde289a6c9159377010a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex a4b22524..018e3efb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -72,163 +74,177 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     /**\n      * Finds the initial comments token and initializes commentsDisabled.\n-     * @return\n+     *\n+     * @return the continuation token or null if none was found\n      */\n-    private String findInitialCommentsToken() {\n-        final String continuationStartPattern = \"continuation\\\":\\\"\";\n+    @Nullable\n+    private String findInitialCommentsToken() throws ExtractionException {\n \n-        String commentsTokenInside = findValue(responseBody, \"sectionListRenderer\", \"}\");\n-        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n-            commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n+        final JsonArray jArray = JsonUtils.getArray(nextResponse,\n+                \"contents.twoColumnWatchNextResults.results.results.contents\");\n+\n+        final Optional<Object> itemSectionRenderer = jArray.stream().filter(o -> {\n+            JsonObject jObj = (JsonObject) o;\n+\n+            if (jObj.has(\"itemSectionRenderer\")) {\n+                try {\n+                    return JsonUtils.getString(jObj, \"itemSectionRenderer.targetId\")\n+                            .equals(\"comments-section\");\n+                } catch (final ParsingException ignored) {\n+                }\n+            }\n+\n+            return false;\n+        }).findFirst();\n+\n+        final String token;\n+\n+        if (itemSectionRenderer.isPresent()) {\n+            token = JsonUtils.getString(((JsonObject) itemSectionRenderer.get())\n+                    .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0),\n+                    \"continuationItemRenderer.continuationEndpoint.continuationCommand.token\");\n+        } else {\n+            token = null;\n         }\n \n-        // If no continuation token is found the comments are disabled\n-        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+        if (token == null) {\n             optCommentsDisabled = Optional.of(true);\n             return null;\n         }\n \n-        // If a continuation token is found there are >= 0 comments\n-        final String commentsToken = findValue(commentsTokenInside, continuationStartPattern, \"\\\"\");\n-\n         optCommentsDisabled = Optional.of(false);\n \n-        return commentsToken;\n+        return token;\n     }\n \n+    @Nonnull\n     private InfoItemsPage<CommentsInfoItem> getInfoItemsPageForDisabledComments() {\n         return new InfoItemsPage<>(Collections.emptyList(), null, Collections.emptyList());\n     }\n \n-    private Page getNextPage(final JsonObject ajaxJson) throws ParsingException {\n-        final JsonArray arr;\n+    @Nullable\n+    private Page getNextPage(@Nonnull final JsonObject ajaxJson) throws ExtractionException {\n+        final JsonArray jsonArray;\n+        final JsonArray onResponseReceivedEndpoints = ajaxJson.getArray(\n+                \"onResponseReceivedEndpoints\");\n+        final JsonObject endpoint = onResponseReceivedEndpoints.getObject(\n+                onResponseReceivedEndpoints.size() - 1);\n+\n         try {\n-            arr = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.continuations\");\n+            jsonArray = endpoint.getObject(\"reloadContinuationItemsCommand\", endpoint.getObject(\n+                    \"appendContinuationItemsAction\")).getArray(\"continuationItems\");\n         } catch (final Exception e) {\n             return null;\n         }\n-        if (arr.isEmpty()) {\n+        if (jsonArray.isEmpty()) {\n             return null;\n         }\n+\n         final String continuation;\n         try {\n-            continuation = JsonUtils.getString(arr.getObject(0), \"nextContinuationData.continuation\");\n+            continuation = JsonUtils.getString(jsonArray.getObject(jsonArray.size() - 1),\n+                    \"continuationItemRenderer.continuationEndpoint.continuationCommand.token\");\n         } catch (final Exception e) {\n             return null;\n         }\n         return getNextPage(continuation);\n     }\n \n+    @Nonnull\n     private Page getNextPage(final String continuation) throws ParsingException {\n-        final Map<String, String> params = new HashMap<>();\n-        params.put(\"action_get_comments\", \"1\");\n-        params.put(\"pbj\", \"1\");\n-        params.put(\"ctoken\", continuation);\n-        try {\n-            return new Page(\"https://m.youtube.com/watch_comment?\" + getDataString(params));\n-        } catch (final UnsupportedEncodingException e) {\n-            throw new ParsingException(\"Could not get next page url\", e);\n-        }\n+        return new Page(getUrl(), continuation); // URL is ignored tho\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+    public InfoItemsPage<CommentsInfoItem> getPage(final Page page)\n+            throws IOException, ExtractionException {\n         if (optCommentsDisabled.orElse(false)) {\n             return getInfoItemsPageForDisabledComments();\n         }\n-        if (page == null || isNullOrEmpty(page.getUrl())) {\n-            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n+        if (page == null || isNullOrEmpty(page.getId())) {\n+            throw new IllegalArgumentException(\"Page doesn't have the continuation.\");\n         }\n \n-        final String ajaxResponse = makeAjaxRequest(page.getUrl());\n-        final JsonObject ajaxJson;\n-        try {\n-            ajaxJson = JsonParser.array().from(ajaxResponse).getObject(1);\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not parse json data for comments\", e);\n-        }\n-        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                .value(\"continuation\", page.getId())\n+                .done())\n+                .getBytes(UTF_8);\n+\n+        final JsonObject ajaxJson = getJsonPostResponse(\"next\", body, localization);\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(\n+                getServiceId());\n         collectCommentsFrom(collector, ajaxJson);\n         return new InfoItemsPage<>(collector, getNextPage(ajaxJson));\n     }\n \n-    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject ajaxJson) throws ParsingException {\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector,\n+                                     @Nonnull final JsonObject ajaxJson) throws ParsingException {\n+\n+        final JsonArray onResponseReceivedEndpoints = ajaxJson.getArray(\n+                \"onResponseReceivedEndpoints\");\n+        final JsonObject commentsEndpoint = onResponseReceivedEndpoints.getObject(\n+                onResponseReceivedEndpoints.size() - 1);\n+\n+        final String path;\n+\n+        if (commentsEndpoint.has(\"reloadContinuationItemsCommand\")) {\n+            path = \"reloadContinuationItemsCommand.continuationItems\";\n+        } else if (commentsEndpoint.has(\"appendContinuationItemsAction\")) {\n+            path = \"appendContinuationItemsAction.continuationItems\";\n+        } else {\n+            // No comments\n+            return;\n+        }\n+\n         final JsonArray contents;\n         try {\n-            contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n+            contents = (JsonArray) JsonUtils.getArray(commentsEndpoint, path).clone();\n         } catch (final Exception e) {\n-            //no comments\n+            // No comments\n             return;\n         }\n+\n+        final int index = contents.size() - 1;\n+        if (contents.getObject(index).has(\"continuationItemRenderer\")) {\n+            contents.remove(index);\n+        }\n+\n         final List<Object> comments;\n         try {\n-            comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n+            comments = JsonUtils.getValues(contents,\n+                    \"commentThreadRenderer.comment.commentRenderer\");\n         } catch (final Exception e) {\n-            throw new ParsingException(\"unable to get parse youtube comments\", e);\n+            throw new ParsingException(\"Unable to get parse youtube comments\", e);\n         }\n \n         for (final Object c : comments) {\n             if (c instanceof JsonObject) {\n-                final CommentsInfoItemExtractor extractor =\n-                        new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n+                final CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor(\n+                        (JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n-        final Map<String, List<String>> requestHeaders = new HashMap<>();\n-        requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n-        final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        responseBody = YoutubeParsingHelper.unescapeDocument(response.responseBody());\n-        ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n-        ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n-    }\n-\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                .value(\"videoId\", getId())\n+                .done())\n+                .getBytes(UTF_8);\n \n-    private String makeAjaxRequest(final String siteUrl) throws IOException, ReCaptchaException {\n-        final Map<String, List<String>> requestHeaders = new HashMap<>();\n-        requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n-        requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n-        requestHeaders.put(\"X-YouTube-Client-Version\", singletonList(ytClientVersion));\n-        requestHeaders.put(\"X-YouTube-Client-Name\", singletonList(ytClientName));\n-        return getDownloader().get(siteUrl, requestHeaders, getExtractorLocalization()).responseBody();\n+        nextResponse = getJsonPostResponse(\"next\", body, localization);\n     }\n \n-    private String getDataString(final Map<String, String> params) throws UnsupportedEncodingException {\n-        final StringBuilder result = new StringBuilder();\n-        boolean first = true;\n-        for (final Map.Entry<String, String> entry : params.entrySet()) {\n-            if (first) {\n-                first = false;\n-            } else {\n-                result.append(\"&\");\n-            }\n-            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n-            result.append(\"=\");\n-            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n-        }\n-        return result.toString();\n-    }\n-\n-    private String findValue(final String doc, final String start, final String end) {\n-        int beginIndex = doc.indexOf(start);\n-        // Start string was not found\n-        if (beginIndex == -1) {\n-            return null;\n-        }\n-        beginIndex = beginIndex + start.length();\n-        final int endIndex = doc.indexOf(end, beginIndex);\n-        // End string was not found\n-        if (endIndex == -1) {\n-            return null;\n-        }\n-        return doc.substring(beginIndex, endIndex);\n-    }\n \n     @Override\n-    public boolean isCommentsDisabled() {\n+    public boolean isCommentsDisabled() throws ExtractionException {\n         // Check if commentsDisabled has to be initialized\n         if (!optCommentsDisabled.isPresent()) {\n             // Initialize commentsDisabled\n", "next_change": {"commit": "981aee40927ae03442f16856185ac5726ea836c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 018e3efb..6d0c38cb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -253,4 +276,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n         return optCommentsDisabled.get();\n     }\n+\n+    @Override\n+    public int getCommentsCount() throws ExtractionException {\n+        final JsonObject commentsHeaderRenderer = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\");\n+\n+        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+\n+        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+    }\n }\n", "next_change": {"commit": "22f71b010c20936cab9034f77c02afbfe44c1d5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 6d0c38cb..40a22fe5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -279,14 +282,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject commentsHeaderRenderer = ajaxJson\n+        final JsonObject countText = ajaxJson\n                 .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n                 .getObject(\"reloadContinuationItemsCommand\")\n                 .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\");\n-\n-        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n \n-        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+        try {\n+            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": {"commit": "2974dfaa4858e08ce7d2cede005f7fd2c8cbf783", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 40a22fe5..92d46118 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -259,40 +257,55 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n         final Localization localization = getExtractorLocalization();\n+        // @formatter:off\n         final byte[] body = JsonWriter.string(\n                 prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n                     .value(\"videoId\", getId())\n                     .done())\n                 .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n+\n+        final String initialToken =\n+                findInitialCommentsToken(getJsonPostResponse(\"next\", body, localization));\n+\n+        // @formatter:off\n+        final byte[] ajaxBody = JsonWriter.string(\n+                        prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n+                                .value(\"continuation\", initialToken)\n+                                .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n \n-        nextResponse = getJsonPostResponse(\"next\", body, localization);\n+        ajaxJson = getJsonPostResponse(\"next\", ajaxBody, localization);\n     }\n \n \n     @Override\n-    public boolean isCommentsDisabled() throws ExtractionException {\n-        // Check if commentsDisabled has to be initialized\n-        if (!optCommentsDisabled.isPresent()) {\n-            // Initialize commentsDisabled\n-            this.findInitialCommentsToken();\n-        }\n-\n-        return optCommentsDisabled.get();\n+    public boolean isCommentsDisabled() {\n+        return commentsDisabled;\n     }\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject countText = ajaxJson\n-                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                .getObject(\"reloadContinuationItemsCommand\")\n-                .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\")\n-                .getObject(\"countText\");\n-\n-        try {\n-            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n-        } catch (final Exception e) {\n-            throw new ExtractionException(\"Unable to get comments count\", e);\n+        assertPageFetched();\n+\n+        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n+            final JsonObject countText = ajaxJson\n+                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                    .getObject(\"reloadContinuationItemsCommand\")\n+                    .getArray(\"continuationItems\").getObject(0)\n+                    .getObject(\"commentsHeaderRenderer\")\n+                    .getObject(\"countText\");\n+\n+            try {\n+                commentsCount = Integer.parseInt(\n+                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+                );\n+            } catch (final Exception e) {\n+                throw new ExtractionException(\"Unable to get comments count\", e);\n+            }\n         }\n+\n+        return commentsCount;\n     }\n }\n", "next_change": {"commit": "98a90fd9c8fa02c11bb2a8a04cd2b5cf3b7c3028", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 92d46118..176317a3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -289,23 +288,23 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public int getCommentsCount() throws ExtractionException {\n         assertPageFetched();\n \n-        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n-            final JsonObject countText = ajaxJson\n-                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                    .getObject(\"reloadContinuationItemsCommand\")\n-                    .getArray(\"continuationItems\").getObject(0)\n-                    .getObject(\"commentsHeaderRenderer\")\n-                    .getObject(\"countText\");\n-\n-            try {\n-                commentsCount = Integer.parseInt(\n-                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n-                );\n-            } catch (final Exception e) {\n-                throw new ExtractionException(\"Unable to get comments count\", e);\n-            }\n+        if (commentsDisabled) {\n+            return -1;\n         }\n \n-        return commentsCount;\n+        final JsonObject countText = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n+\n+        try {\n+            return Integer.parseInt(\n+                    Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+            );\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 62d1eb97..a4b22524 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -139,24 +196,45 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         return getDownloader().get(siteUrl, requestHeaders, getExtractorLocalization()).responseBody();\n     }\n \n-    private String getDataString(Map<String, String> params) throws UnsupportedEncodingException {\n-        StringBuilder result = new StringBuilder();\n+    private String getDataString(final Map<String, String> params) throws UnsupportedEncodingException {\n+        final StringBuilder result = new StringBuilder();\n         boolean first = true;\n-        for (Map.Entry<String, String> entry : params.entrySet()) {\n-            if (first)\n+        for (final Map.Entry<String, String> entry : params.entrySet()) {\n+            if (first) {\n                 first = false;\n-            else\n+            } else {\n                 result.append(\"&\");\n-            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n+            }\n+            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n             result.append(\"=\");\n-            result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n+            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n         }\n         return result.toString();\n     }\n \n-    private String findValue(String doc, String start, String end) {\n-        int beginIndex = doc.indexOf(start) + start.length();\n-        int endIndex = doc.indexOf(end, beginIndex);\n+    private String findValue(final String doc, final String start, final String end) {\n+        int beginIndex = doc.indexOf(start);\n+        // Start string was not found\n+        if (beginIndex == -1) {\n+            return null;\n+        }\n+        beginIndex = beginIndex + start.length();\n+        final int endIndex = doc.indexOf(end, beginIndex);\n+        // End string was not found\n+        if (endIndex == -1) {\n+            return null;\n+        }\n         return doc.substring(beginIndex, endIndex);\n     }\n+\n+    @Override\n+    public boolean isCommentsDisabled() {\n+        // Check if commentsDisabled has to be initialized\n+        if (!optCommentsDisabled.isPresent()) {\n+            // Initialize commentsDisabled\n+            this.findInitialCommentsToken();\n+        }\n+\n+        return optCommentsDisabled.get();\n+    }\n }\n", "next_change": {"commit": "981aee40927ae03442f16856185ac5726ea836c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex a4b22524..6d0c38cb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -237,4 +276,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n         return optCommentsDisabled.get();\n     }\n+\n+    @Override\n+    public int getCommentsCount() throws ExtractionException {\n+        final JsonObject commentsHeaderRenderer = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\");\n+\n+        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+\n+        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+    }\n }\n", "next_change": {"commit": "22f71b010c20936cab9034f77c02afbfe44c1d5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 6d0c38cb..40a22fe5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -279,14 +282,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject commentsHeaderRenderer = ajaxJson\n+        final JsonObject countText = ajaxJson\n                 .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n                 .getObject(\"reloadContinuationItemsCommand\")\n                 .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\");\n-\n-        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n \n-        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+        try {\n+            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": {"commit": "2974dfaa4858e08ce7d2cede005f7fd2c8cbf783", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 40a22fe5..92d46118 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -259,40 +257,55 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n         final Localization localization = getExtractorLocalization();\n+        // @formatter:off\n         final byte[] body = JsonWriter.string(\n                 prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n                     .value(\"videoId\", getId())\n                     .done())\n                 .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n+\n+        final String initialToken =\n+                findInitialCommentsToken(getJsonPostResponse(\"next\", body, localization));\n+\n+        // @formatter:off\n+        final byte[] ajaxBody = JsonWriter.string(\n+                        prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n+                                .value(\"continuation\", initialToken)\n+                                .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n \n-        nextResponse = getJsonPostResponse(\"next\", body, localization);\n+        ajaxJson = getJsonPostResponse(\"next\", ajaxBody, localization);\n     }\n \n \n     @Override\n-    public boolean isCommentsDisabled() throws ExtractionException {\n-        // Check if commentsDisabled has to be initialized\n-        if (!optCommentsDisabled.isPresent()) {\n-            // Initialize commentsDisabled\n-            this.findInitialCommentsToken();\n-        }\n-\n-        return optCommentsDisabled.get();\n+    public boolean isCommentsDisabled() {\n+        return commentsDisabled;\n     }\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject countText = ajaxJson\n-                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                .getObject(\"reloadContinuationItemsCommand\")\n-                .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\")\n-                .getObject(\"countText\");\n-\n-        try {\n-            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n-        } catch (final Exception e) {\n-            throw new ExtractionException(\"Unable to get comments count\", e);\n+        assertPageFetched();\n+\n+        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n+            final JsonObject countText = ajaxJson\n+                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                    .getObject(\"reloadContinuationItemsCommand\")\n+                    .getArray(\"continuationItems\").getObject(0)\n+                    .getObject(\"commentsHeaderRenderer\")\n+                    .getObject(\"countText\");\n+\n+            try {\n+                commentsCount = Integer.parseInt(\n+                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+                );\n+            } catch (final Exception e) {\n+                throw new ExtractionException(\"Unable to get comments count\", e);\n+            }\n         }\n+\n+        return commentsCount;\n     }\n }\n", "next_change": {"commit": "98a90fd9c8fa02c11bb2a8a04cd2b5cf3b7c3028", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 92d46118..176317a3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -289,23 +288,23 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public int getCommentsCount() throws ExtractionException {\n         assertPageFetched();\n \n-        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n-            final JsonObject countText = ajaxJson\n-                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                    .getObject(\"reloadContinuationItemsCommand\")\n-                    .getArray(\"continuationItems\").getObject(0)\n-                    .getObject(\"commentsHeaderRenderer\")\n-                    .getObject(\"countText\");\n-\n-            try {\n-                commentsCount = Integer.parseInt(\n-                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n-                );\n-            } catch (final Exception e) {\n-                throw new ExtractionException(\"Unable to get comments count\", e);\n-            }\n+        if (commentsDisabled) {\n+            return -1;\n         }\n \n-        return commentsCount;\n+        final JsonObject countText = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n+\n+        try {\n+            return Integer.parseInt(\n+                    Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+            );\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjQ4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926484", "body": "```suggestion\r\n        // Whoever is willing to implement this should also implement it in the frontend.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.\n          \n          \n            \n                    // Whoever is willing to implement this should also implement it in the frontend.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement <span class=\"x x-first x-last\">this</span> in the <span class=\"x x-first x-last\">front end</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement <span class=\"x x-first x-last\">it</span> in the <span class=\"x x-first x-last\">frontend</span>.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:21:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the front end.", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex a03b1d5a..520bda80 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the front end.\n+        // Whoever is willing to implement this should also implement it in the frontend.\n     }\n \n     @Override\n", "next_change": {"commit": "b705515da06ff2ebca28bed2bb513e4f94f6a94a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 520bda80..692b9cc3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -75,8 +146,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    doc.select(\"button[class*=\\\"yt-uix-subscription-button\\\"]\")\n-                            .first().attr(\"data-channel-external-id\");\n+                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "951ed9f0d85b5a526b40d5883c676fb8069ea312", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 692b9cc3..240fa537 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -146,7 +138,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+                    getUploaderInfo().getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "365b0329f3dfb0dba257d1399624b5e9a4a56822", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -137,8 +142,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    getUploaderInfo().getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -40,110 +48,86 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl() + \"&pbj=1\";\n-\n-        JsonArray ajaxJson;\n-\n-        Map<String, List<String>> headers = new HashMap<>();\n-        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n-        headers.put(\"X-YouTube-Client-Version\",\n-                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n-        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n-        if (response.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"Could not parse json data for next streams\");\n-        }\n-\n-        try {\n-            ajaxJson = JsonParser.array().from(response);\n-        } catch (JsonParserException e) {\n-            throw new ParsingException(\"Could not parse json data for next streams\", e);\n-        }\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException,\n+            ExtractionException {\n+        final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n+                .getCountryCode())\n+                .value(\"browseId\", \"VL\" + getId())\n+                .value(\"params\", \"wgYCCAA%3D\") // show unavailable videos\n+                .done())\n+                .getBytes(UTF_8);\n+\n+        initialData = getJsonPostResponse(\"browse\", body, getExtractorLocalization());\n+        YoutubeParsingHelper.defaultAlertsCheck(initialData);\n \n-        initialData = ajaxJson.getObject(1).getObject(\"response\");\n         playlistInfo = getPlaylistInfo();\n     }\n \n     private JsonObject getUploaderInfo() throws ParsingException {\n-        JsonArray items = initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n-        try {\n-            JsonObject uploaderInfo = items.getObject(1).getObject(\"playlistSidebarSecondaryInfoRenderer\")\n-                    .getObject(\"videoOwner\").getObject(\"videoOwnerRenderer\");\n-            if (uploaderInfo != null) {\n-                return uploaderInfo;\n-            }\n-        } catch (Exception ignored) {}\n+        final JsonArray items = initialData.getObject(\"sidebar\")\n+                .getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n+\n+        JsonObject videoOwner = items.getObject(1)\n+                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n+        if (videoOwner.has(\"videoOwnerRenderer\")) {\n+            return videoOwner.getObject(\"videoOwnerRenderer\");\n+        }\n \n         // we might want to create a loop here instead of using duplicated code\n-        try {\n-            JsonObject uploaderInfo = items.getObject(items.size()).getObject(\"playlistSidebarSecondaryInfoRenderer\")\n-                    .getObject(\"videoOwner\").getObject(\"videoOwnerRenderer\");\n-            if (uploaderInfo != null) {\n-                return uploaderInfo;\n-            }\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get uploader info\", e);\n+        videoOwner = items.getObject(items.size())\n+                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n+        if (videoOwner.has(\"videoOwnerRenderer\")) {\n+            return videoOwner.getObject(\"videoOwnerRenderer\");\n         }\n         throw new ParsingException(\"Could not get uploader info\");\n     }\n \n     private JsonObject getPlaylistInfo() throws ParsingException {\n         try {\n-            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\").getArray(\"items\")\n-                    .getObject(0).getObject(\"playlistSidebarPrimaryInfoRenderer\");\n-        } catch (Exception e) {\n+            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\").getObject(0)\n+                    .getObject(\"playlistSidebarPrimaryInfoRenderer\");\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get PlaylistInfo\", e);\n         }\n     }\n \n-    @Override\n-    public String getNextPageUrl() {\n-        return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n-                .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n-                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"playlistVideoListRenderer\").getArray(\"continuations\"));\n-    }\n-\n     @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n-        try {\n-            String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n-            if (name != null) return name;\n-        } catch (Exception ignored) {}\n-        try {\n-            return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get playlist name\", e);\n-        }\n+        final String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n+        if (!isNullOrEmpty(name)) return name;\n+\n+        return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n     }\n \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        try {\n-            return playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n-                    .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-        } catch (Exception ignored) {}\n-        try {\n-            return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n+        String url = playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n+                .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+\n+        if (isNullOrEmpty(url)) {\n+            url = initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n                     .getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+\n+            if (isNullOrEmpty(url)) throw new ParsingException(\"Could not get playlist thumbnail\");\n         }\n+\n+        return fixThumbnailUrl(url);\n     }\n \n     @Override\n     public String getBannerUrl() {\n-        return \"\";      // Banner can't be handled by frontend right now.\n+        // Banner can't be handled by frontend right now.\n         // Whoever is willing to implement this should also implement it in the frontend.\n+        return \"\";\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n             return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n     }\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -11,122 +24,193 @@ import org.schabi.newpipe.extractor.downloader.Response;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n-import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.localization.Localization;\n import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfo;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n-import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeStreamLinkHandlerFactory;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n-import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n-import org.schabi.newpipe.extractor.stream.StreamType;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Utils;\n \n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.fixThumbnailUrl;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonPostResponse;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getKey;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getTextFromObject;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getValidJsonResponseBody;\n-import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.prepareJsonBuilder;\n-import static org.schabi.newpipe.extractor.utils.Utils.UTF_8;\n-import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n-\n-@SuppressWarnings(\"WeakerAccess\")\n public class YoutubePlaylistExtractor extends PlaylistExtractor {\n-    private JsonObject initialData;\n+    // Names of some objects in JSON response frequently used in this class\n+    private static final String PLAYLIST_VIDEO_RENDERER = \"playlistVideoRenderer\";\n+    private static final String PLAYLIST_VIDEO_LIST_RENDERER = \"playlistVideoListRenderer\";\n+    private static final String SIDEBAR = \"sidebar\";\n+    private static final String VIDEO_OWNER_RENDERER = \"videoOwnerRenderer\";\n+\n+    private JsonObject browseResponse;\n+\n     private JsonObject playlistInfo;\n+    private JsonObject uploaderInfo;\n+    private JsonObject playlistHeader;\n+\n+    private boolean isNewPlaylistInterface;\n \n-    public YoutubePlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+    public YoutubePlaylistExtractor(final StreamingService service,\n+                                    final ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n     }\n \n     @Override\n     public void onFetchPage(@Nonnull final Downloader downloader) throws IOException,\n             ExtractionException {\n-        final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n-                .getCountryCode())\n-                .value(\"browseId\", \"VL\" + getId())\n-                .value(\"params\", \"wgYCCAA%3D\") // show unavailable videos\n-                .done())\n-                .getBytes(UTF_8);\n-\n-        initialData = getJsonPostResponse(\"browse\", body, getExtractorLocalization());\n-        YoutubeParsingHelper.defaultAlertsCheck(initialData);\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                        .value(\"browseId\", \"VL\" + getId())\n+                        .value(\"params\", \"wgYCCAA%3D\") // Show unavailable videos\n+                        .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+\n+        browseResponse = getJsonPostResponse(\"browse\", body, localization);\n+        YoutubeParsingHelper.defaultAlertsCheck(browseResponse);\n+        isNewPlaylistInterface = checkIfResponseIsNewPlaylistInterface();\n+    }\n \n-        playlistInfo = getPlaylistInfo();\n+    /**\n+     * Whether the playlist response is using only the new playlist design.\n+     *\n+     * <p>\n+     * This new response changes how metadata is returned, and does not provide author thumbnails.\n+     * </p>\n+     *\n+     * <p>\n+     * The new response can be detected by checking whether a header JSON object is returned in the\n+     * browse response (the old returns instead a sidebar one).\n+     * </p>\n+     *\n+     * <p>\n+     * This new playlist UI is currently A/B tested.\n+     * </p>\n+     *\n+     * @return Whether the playlist response is using only the new playlist design\n+     */\n+    private boolean checkIfResponseIsNewPlaylistInterface() {\n+        // The \"old\" playlist UI can be also returned with the new one\n+        return browseResponse.has(\"header\") && !browseResponse.has(SIDEBAR);\n     }\n \n+    @Nonnull\n     private JsonObject getUploaderInfo() throws ParsingException {\n-        final JsonArray items = initialData.getObject(\"sidebar\")\n-                .getObject(\"playlistSidebarRenderer\").getArray(\"items\");\n-\n-        JsonObject videoOwner = items.getObject(1)\n-                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n-        if (videoOwner.has(\"videoOwnerRenderer\")) {\n-            return videoOwner.getObject(\"videoOwnerRenderer\");\n+        if (uploaderInfo == null) {\n+            uploaderInfo = browseResponse.getObject(SIDEBAR)\n+                    .getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\")\n+                    .stream()\n+                    .filter(JsonObject.class::isInstance)\n+                    .map(JsonObject.class::cast)\n+                    .filter(item -> item.getObject(\"playlistSidebarSecondaryInfoRenderer\")\n+                            .getObject(\"videoOwner\")\n+                            .has(VIDEO_OWNER_RENDERER))\n+                    .map(item -> item.getObject(\"playlistSidebarSecondaryInfoRenderer\")\n+                            .getObject(\"videoOwner\")\n+                            .getObject(VIDEO_OWNER_RENDERER))\n+                    .findFirst()\n+                    .orElseThrow(() -> new ParsingException(\"Could not get uploader info\"));\n         }\n \n-        // we might want to create a loop here instead of using duplicated code\n-        videoOwner = items.getObject(items.size())\n-                .getObject(\"playlistSidebarSecondaryInfoRenderer\").getObject(\"videoOwner\");\n-        if (videoOwner.has(\"videoOwnerRenderer\")) {\n-            return videoOwner.getObject(\"videoOwnerRenderer\");\n-        }\n-        throw new ParsingException(\"Could not get uploader info\");\n+        return uploaderInfo;\n     }\n \n+    @Nonnull\n     private JsonObject getPlaylistInfo() throws ParsingException {\n-        try {\n-            return initialData.getObject(\"sidebar\").getObject(\"playlistSidebarRenderer\")\n-                    .getArray(\"items\").getObject(0)\n-                    .getObject(\"playlistSidebarPrimaryInfoRenderer\");\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get PlaylistInfo\", e);\n+        if (playlistInfo == null) {\n+            playlistInfo = browseResponse.getObject(SIDEBAR)\n+                    .getObject(\"playlistSidebarRenderer\")\n+                    .getArray(\"items\")\n+                    .stream()\n+                    .filter(JsonObject.class::isInstance)\n+                    .map(JsonObject.class::cast)\n+                    .filter(item -> item.has(\"playlistSidebarPrimaryInfoRenderer\"))\n+                    .map(item -> item.getObject(\"playlistSidebarPrimaryInfoRenderer\"))\n+                    .findFirst()\n+                    .orElseThrow(() -> new ParsingException(\"Could not get playlist info\"));\n+        }\n+\n+        return playlistInfo;\n+    }\n+\n+    @Nonnull\n+    private JsonObject getPlaylistHeader() {\n+        if (playlistHeader == null) {\n+            playlistHeader = browseResponse.getObject(\"header\")\n+                    .getObject(\"playlistHeaderRenderer\");\n         }\n+\n+        return playlistHeader;\n     }\n \n     @Nonnull\n     @Override\n     public String getName() throws ParsingException {\n-        final String name = getTextFromObject(playlistInfo.getObject(\"title\"));\n-        if (!isNullOrEmpty(name)) return name;\n+        final String name = getTextFromObject(getPlaylistInfo().getObject(\"title\"));\n+        if (!isNullOrEmpty(name)) {\n+            return name;\n+        }\n \n-        return initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getString(\"title\");\n+        return browseResponse.getObject(\"microformat\")\n+                .getObject(\"microformatDataRenderer\")\n+                .getString(\"title\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        String url = playlistInfo.getObject(\"thumbnailRenderer\").getObject(\"playlistVideoThumbnailRenderer\")\n-                .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+        String url;\n+        if (isNewPlaylistInterface) {\n+            url = getPlaylistHeader().getObject(\"playlistHeaderBanner\")\n+                    .getObject(\"heroPlaylistThumbnailRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+        } else {\n+            url = getPlaylistInfo().getObject(\"thumbnailRenderer\")\n+                    .getObject(\"playlistVideoThumbnailRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+        }\n \n+        // This data structure is returned in both layouts\n         if (isNullOrEmpty(url)) {\n-            url = initialData.getObject(\"microformat\").getObject(\"microformatDataRenderer\").getObject(\"thumbnail\")\n-                    .getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            if (isNullOrEmpty(url)) throw new ParsingException(\"Could not get playlist thumbnail\");\n+            url = browseResponse.getObject(\"microformat\")\n+                    .getObject(\"microformatDataRenderer\")\n+                    .getObject(\"thumbnail\")\n+                    .getArray(\"thumbnails\")\n+                    .getObject(0)\n+                    .getString(\"url\");\n+\n+            if (isNullOrEmpty(url)) {\n+                throw new ParsingException(\"Could not get playlist thumbnail\");\n+            }\n         }\n \n         return fixThumbnailUrl(url);\n     }\n \n-    @Override\n-    public String getBannerUrl() {\n-        // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement it in the frontend.\n-        return \"\";\n-    }\n-\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));\n+            return getUrlFromNavigationEndpoint(isNewPlaylistInterface\n+                    ? getPlaylistHeader().getObject(\"ownerText\")\n+                    .getArray(\"runs\")\n+                    .getObject(0)\n+                    .getObject(\"navigationEndpoint\")\n+                    : getUploaderInfo().getObject(\"navigationEndpoint\"));\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader url\", e);\n         }\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -135,7 +219,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n+            return getTextFromObject(isNewPlaylistInterface\n+                    ? getPlaylistHeader().getObject(\"ownerText\")\n+                    : getUploaderInfo().getObject(\"title\"));\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -147,7 +151,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -160,19 +130,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 692b9cc3..240fa537 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -155,7 +147,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return uploaderInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "365b0329f3dfb0dba257d1399624b5e9a4a56822", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -147,7 +151,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n+            return getTextFromObject(getUploaderInfo().getObject(\"title\"));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader name\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -160,19 +130,9 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n-\n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 240fa537..e32b42ef 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -156,7 +160,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            return getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+\n+            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n+            if (url.startsWith(\"//\")) {\n+                url = url.substring(2);\n+            }\n+            if (url.startsWith(HTTP)) {\n+                url = Utils.replaceHttpWithHttps(url);\n+            } else if (!url.startsWith(HTTPS)) {\n+                url = HTTPS + url;\n+            }\n+\n+            return url;\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "612ec06839bfef5db6616f99aba81e243bc6cd14", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex e32b42ef..fdd75868 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -162,17 +169,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n-            // the first characters of the avatar URLs are different for each channel and some are not even valid URLs\n-            if (url.startsWith(\"//\")) {\n-                url = url.substring(2);\n-            }\n-            if (url.startsWith(HTTP)) {\n-                url = Utils.replaceHttpWithHttps(url);\n-            } else if (!url.startsWith(HTTPS)) {\n-                url = HTTPS + url;\n-            }\n-\n-            return url;\n+            return fixThumbnailUrl(url);\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get playlist uploader avatar\", e);\n         }\n", "next_change": {"commit": "0a5a905bc70b52f57f70bf69705f05cde1d4e329", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex fdd75868..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -167,7 +130,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n         try {\n-            String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n+            final String url = getUploaderInfo().getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\");\n \n             return fixThumbnailUrl(url);\n         } catch (Exception e) {\n", "next_change": {"commit": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..6a6ab97a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -138,6 +133,11 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         }\n     }\n \n+    @Override\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 6a6ab97a..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -143,7 +162,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n         try {\n             final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -154,14 +174,29 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public boolean isUploaderVerified() throws ParsingException {\n+        // YouTube doesn't provide this information\n         return false;\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n-            return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n+            final JsonArray stats = playlistInfo.getArray(\"stats\");\n+            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n+            // on the desktop client but only the number of views and the playlist modified date\n+            // On normal playlists, at least 3 items are returned: the number of videos, the number\n+            // of views and the playlist modification date\n+            // We can get it by using another client, however it seems we can't get the avatar\n+            // uploader URL with another client than the WEB client\n+            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n+                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n+                        .getObject(0));\n+                if (videosText != null) {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+                }\n+            }\n+\n+            return ITEM_COUNT_UNKNOWN;\n         } catch (final Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -170,19 +205,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return EMPTY_STRING;\n     }\n \n     @Nonnull\n", "next_change": {"commit": "943b7c033bb9d07ead63ddab4441c287653e4384", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..ae3a678d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -205,19 +216,19 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Nonnull\n     @Override\n     public String getSubChannelName() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n     @Override\n     public String getSubChannelAvatarUrl() {\n-        return EMPTY_STRING;\n+        return \"\";\n     }\n \n     @Nonnull\n", "next_change": {"commit": "7258a5322539ef6709d46a83d8c1b1fb3093a569", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex ae3a678d..bfdadc73 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -191,44 +255,50 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        try {\n-            final JsonArray stats = playlistInfo.getArray(\"stats\");\n-            // For unknown reasons, YouTube don't provide the stream count for learning playlists\n-            // on the desktop client but only the number of views and the playlist modified date\n-            // On normal playlists, at least 3 items are returned: the number of videos, the number\n-            // of views and the playlist modification date\n-            // We can get it by using another client, however it seems we can't get the avatar\n-            // uploader URL with another client than the WEB client\n-            if (stats.size() > STATS_ARRAY_WITH_STREAMS_COUNT_MIN_SIZE) {\n-                final String videosText = getTextFromObject(playlistInfo.getArray(\"stats\")\n-                        .getObject(0));\n-                if (videosText != null) {\n-                    return Long.parseLong(Utils.removeNonDigitCharacters(videosText));\n+        if (isNewPlaylistInterface) {\n+            final String numVideosText =\n+                    getTextFromObject(getPlaylistHeader().getObject(\"numVideosText\"));\n+            if (numVideosText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(numVideosText));\n+                } catch (final NumberFormatException ignored) {\n                 }\n             }\n \n-            return ITEM_COUNT_UNKNOWN;\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not get video count from playlist\", e);\n+            final String firstByLineRendererText = getTextFromObject(\n+                    getPlaylistHeader().getArray(\"byline\")\n+                            .getObject(0)\n+                            .getObject(\"text\"));\n+\n+            if (firstByLineRendererText != null) {\n+                try {\n+                    return Long.parseLong(Utils.removeNonDigitCharacters(firstByLineRendererText));\n+                } catch (final NumberFormatException ignored) {\n+                }\n+            }\n         }\n-    }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelName() {\n-        return \"\";\n-    }\n+        // These data structures are returned in both layouts\n+        final JsonArray briefStats =\n+                (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                        .getArray(\"briefStats\");\n+        if (!briefStats.isEmpty()) {\n+            final String briefsStatsText = getTextFromObject(briefStats.getObject(0));\n+            if (briefsStatsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(briefsStatsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelUrl() {\n-        return \"\";\n-    }\n+        final JsonArray stats = (isNewPlaylistInterface ? getPlaylistHeader() : getPlaylistInfo())\n+                .getArray(\"stats\");\n+        if (!stats.isEmpty()) {\n+            final String statsText = getTextFromObject(stats.getObject(0));\n+            if (statsText != null) {\n+                return Long.parseLong(Utils.removeNonDigitCharacters(statsText));\n+            }\n+        }\n \n-    @Nonnull\n-    @Override\n-    public String getSubChannelAvatarUrl() {\n-        return \"\";\n+        return ITEM_COUNT_UNKNOWN;\n     }\n \n     @Nonnull\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex fdd75868..c5570723 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -178,79 +141,97 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n+            final String viewsText = getTextFromObject(getPlaylistInfo().getArray(\"stats\").getObject(0));\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewsText));\n         } catch (Exception e) {\n             throw new ParsingException(\"Could not get video count from playlist\", e);\n         }\n     }\n \n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n     @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() {\n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        Page nextPage = null;\n \n-        JsonArray videos = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n+        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n                 .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n                 .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"playlistVideoListRenderer\").getArray(\"contents\");\n+                .getObject(\"itemSectionRenderer\").getArray(\"contents\");\n+\n+        if (contents.getObject(0).has(\"playlistSegmentRenderer\")) {\n+            for (final Object segment : contents) {\n+                if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"trailer\")) {\n+                    collectTrailerFrom(collector, ((JsonObject) segment));\n+                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"videoList\")) {\n+                    collectStreamsFrom(collector, ((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n+                            .getObject(\"videoList\").getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n+                }\n+            }\n \n-        collectStreamsFrom(collector, videos);\n-        return new InfoItemsPage<>(collector, getNextPageUrl());\n-    }\n+            return new InfoItemsPage<>(collector, null);\n+        } else if (contents.getObject(0).has(\"playlistVideoListRenderer\")) {\n+            final JsonObject videos = contents.getObject(0).getObject(\"playlistVideoListRenderer\");\n+            collectStreamsFrom(collector, videos.getArray(\"contents\"));\n \n-    @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n-        if (pageUrl == null || pageUrl.isEmpty()) {\n-            throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n+            nextPage = getNextPageFrom(videos.getArray(\"continuations\"));\n         }\n \n-        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        JsonArray ajaxJson;\n+        return new InfoItemsPage<>(collector, nextPage);\n+    }\n \n-        Map<String, List<String>> headers = new HashMap<>();\n-        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n-        headers.put(\"X-YouTube-Client-Version\",\n-                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n-        final String response = getDownloader().get(pageUrl, headers, getExtractorLocalization()).responseBody();\n-        if (response.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"Could not parse json data for next streams\");\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        if (page == null || isNullOrEmpty(page.getUrl())) {\n+            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n         }\n \n-        try {\n-            ajaxJson = JsonParser.array().from(response);\n-        } catch (JsonParserException e) {\n-            throw new ParsingException(\"Could not parse json data for next streams\", e);\n-        }\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(page.getUrl(), getExtractorLocalization());\n \n-        JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n+        final JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n                 .getObject(\"continuationContents\").getObject(\"playlistVideoListContinuation\");\n \n         collectStreamsFrom(collector, sectionListContinuation.getArray(\"contents\"));\n \n-        return new InfoItemsPage<>(collector, getNextPageUrlFrom(sectionListContinuation.getArray(\"continuations\")));\n+        return new InfoItemsPage<>(collector, getNextPageFrom(sectionListContinuation.getArray(\"continuations\")));\n     }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) {\n-        if (continuations == null) {\n-            return \"\";\n+    private Page getNextPageFrom(final JsonArray continuations) {\n+        if (isNullOrEmpty(continuations)) {\n+            return null;\n         }\n \n-        JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        String continuation = nextContinuationData.getString(\"continuation\");\n-        String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-        return \"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                + \"&itct=\" + clickTrackingParams;\n+        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n+        final String continuation = nextContinuationData.getString(\"continuation\");\n+        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n+        return new Page(\"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n+                + \"&itct=\" + clickTrackingParams);\n     }\n \n-    private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonArray videos) {\n-        collector.reset();\n-\n+    private void collectStreamsFrom(final StreamInfoItemsCollector collector, final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n-        for (Object video : videos) {\n-            if (((JsonObject) video).getObject(\"playlistVideoRenderer\") != null) {\n+        for (final Object video : videos) {\n+            if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n                 collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video).getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex c5570723..0d53be6a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -168,71 +187,98 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n \n     @Nonnull\n     @Override\n-    public InfoItemsPage<StreamInfoItem> getInitialPage() {\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n         final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n         Page nextPage = null;\n \n-        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"twoColumnBrowseResultsRenderer\")\n-                .getArray(\"tabs\").getObject(0).getObject(\"tabRenderer\").getObject(\"content\")\n-                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                .getObject(\"itemSectionRenderer\").getArray(\"contents\");\n+        final JsonArray contents = initialData.getObject(\"contents\")\n+                .getObject(\"twoColumnBrowseResultsRenderer\").getArray(\"tabs\").getObject(0)\n+                .getObject(\"tabRenderer\").getObject(\"content\").getObject(\"sectionListRenderer\")\n+                .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\")\n+                .getArray(\"contents\");\n \n         if (contents.getObject(0).has(\"playlistSegmentRenderer\")) {\n             for (final Object segment : contents) {\n                 if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"trailer\")) {\n                     collectTrailerFrom(collector, ((JsonObject) segment));\n-                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\").has(\"videoList\")) {\n-                    collectStreamsFrom(collector, ((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n-                            .getObject(\"videoList\").getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n+                } else if (((JsonObject) segment).getObject(\"playlistSegmentRenderer\")\n+                        .has(\"videoList\")) {\n+                    collectStreamsFrom(collector, ((JsonObject) segment)\n+                            .getObject(\"playlistSegmentRenderer\").getObject(\"videoList\")\n+                            .getObject(\"playlistVideoListRenderer\").getArray(\"contents\"));\n                 }\n             }\n \n             return new InfoItemsPage<>(collector, null);\n         } else if (contents.getObject(0).has(\"playlistVideoListRenderer\")) {\n             final JsonObject videos = contents.getObject(0).getObject(\"playlistVideoListRenderer\");\n-            collectStreamsFrom(collector, videos.getArray(\"contents\"));\n+            final JsonArray videosArray = videos.getArray(\"contents\");\n+            collectStreamsFrom(collector, videosArray);\n \n-            nextPage = getNextPageFrom(videos.getArray(\"continuations\"));\n+            nextPage = getNextPageFrom(videosArray);\n         }\n \n         return new InfoItemsPage<>(collector, nextPage);\n     }\n \n     @Override\n-    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page) throws IOException,\n+            ExtractionException {\n         if (page == null || isNullOrEmpty(page.getUrl())) {\n             throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n         }\n \n         final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        final JsonArray ajaxJson = getJsonResponse(page.getUrl(), getExtractorLocalization());\n \n-        final JsonObject sectionListContinuation = ajaxJson.getObject(1).getObject(\"response\")\n-                .getObject(\"continuationContents\").getObject(\"playlistVideoListContinuation\");\n+        final Response response = getDownloader().post(page.getUrl(), null, page.getBody(),\n+                getExtractorLocalization());\n+        final JsonObject ajaxJson = JsonUtils.toJsonObject(getValidJsonResponseBody(response));\n+\n+        final JsonArray continuation = ajaxJson.getArray(\"onResponseReceivedActions\")\n+                .getObject(0)\n+                .getObject(\"appendContinuationItemsAction\")\n+                .getArray(\"continuationItems\");\n \n-        collectStreamsFrom(collector, sectionListContinuation.getArray(\"contents\"));\n+        collectStreamsFrom(collector, continuation);\n \n-        return new InfoItemsPage<>(collector, getNextPageFrom(sectionListContinuation.getArray(\"continuations\")));\n+        return new InfoItemsPage<>(collector, getNextPageFrom(continuation));\n     }\n \n-    private Page getNextPageFrom(final JsonArray continuations) {\n-        if (isNullOrEmpty(continuations)) {\n+    private Page getNextPageFrom(final JsonArray contents) throws IOException,\n+            ExtractionException {\n+        if (isNullOrEmpty(contents)) {\n             return null;\n         }\n \n-        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        final String continuation = nextContinuationData.getString(\"continuation\");\n-        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-        return new Page(\"https://www.youtube.com/browse_ajax?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                + \"&itct=\" + clickTrackingParams);\n+        final JsonObject lastElement = contents.getObject(contents.size() - 1);\n+        if (lastElement.has(\"continuationItemRenderer\")) {\n+            final String continuation = lastElement\n+                    .getObject(\"continuationItemRenderer\")\n+                    .getObject(\"continuationEndpoint\")\n+                    .getObject(\"continuationCommand\")\n+                    .getString(\"token\");\n+\n+            final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n+                    .getCountryCode())\n+                    .value(\"continuation\", continuation)\n+                    .done())\n+                    .getBytes(UTF_8);\n+\n+            return new Page(\"https://youtubei.googleapis.com/youtubei/v1/browse?key=\"\n+                    + getKey(), body);\n+        } else {\n+            return null;\n+        }\n     }\n \n-    private void collectStreamsFrom(final StreamInfoItemsCollector collector, final JsonArray videos) {\n+    private void collectStreamsFrom(final StreamInfoItemsCollector collector,\n+                                    final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n         for (final Object video : videos) {\n             if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n-                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video).getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n+                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n+                        .getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n                         return -1;\n", "next_change": {"commit": "e075dd5a63856d7cdf760a614153936b6575363e", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0d53be6a..826aee6c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -287,83 +285,4 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n             }\n         }\n     }\n-\n-    private void collectTrailerFrom(final StreamInfoItemsCollector collector,\n-                                    final JsonObject segment) {\n-        collector.commit(new StreamInfoItemExtractor() {\n-            @Override\n-            public String getName() throws ParsingException {\n-                return getTextFromObject(segment.getObject(\"playlistSegmentRenderer\")\n-                        .getObject(\"title\"));\n-            }\n-\n-            @Override\n-            public String getUrl() throws ParsingException {\n-                return YoutubeStreamLinkHandlerFactory.getInstance()\n-                        .fromId(segment.getObject(\"playlistSegmentRenderer\").getObject(\"trailer\")\n-                                .getObject(\"playlistVideoPlayerRenderer\").getString(\"videoId\"))\n-                        .getUrl();\n-            }\n-\n-            @Override\n-            public String getThumbnailUrl() {\n-                return \"\";\n-                /*final JsonArray thumbnails = initialAjaxJson.getObject(1)\n-                        .getObject(\"playerResponse\")\n-                        .getObject(\"videoDetails\").getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                // the last thumbnail is the one with the highest resolution\n-                final String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-                return fixThumbnailUrl(url);*/\n-            }\n-\n-            @Override\n-            public StreamType getStreamType() {\n-                return StreamType.VIDEO_STREAM;\n-            }\n-\n-            @Override\n-            public boolean isAd() {\n-                return false;\n-            }\n-\n-            @Override\n-            public long getDuration() throws ParsingException {\n-                return YoutubeParsingHelper.parseDurationString(\n-                        getTextFromObject(segment.getObject(\"playlistSegmentRenderer\")\n-                                .getObject(\"segmentAnnotation\")).split(\"\u2022\")[0]);\n-            }\n-\n-            @Override\n-            public long getViewCount() {\n-                return -1;\n-            }\n-\n-            @Override\n-            public String getUploaderName() throws ParsingException {\n-                return YoutubePlaylistExtractor.this.getUploaderName();\n-            }\n-\n-            @Override\n-            public String getUploaderUrl() throws ParsingException {\n-                return YoutubePlaylistExtractor.this.getUploaderUrl();\n-            }\n-\n-            @Override\n-            public boolean isUploaderVerified() {\n-                return false;\n-            }\n-\n-            @Nullable\n-            @Override\n-            public String getTextualUploadDate() {\n-                return null;\n-            }\n-\n-            @Nullable\n-            @Override\n-            public DateWrapper getUploadDate() {\n-                return null;\n-            }\n-        });\n-    }\n }\n", "next_change": {"commit": "8b3f90eb7e4a56ee7e33128af7cf8dd94663414a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 826aee6c..0e0c6003 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -256,33 +299,31 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n                     .getObject(\"continuationCommand\")\n                     .getString(\"token\");\n \n-            final byte[] body = JsonWriter.string(prepareJsonBuilder(getExtractorContentCountry()\n-                    .getCountryCode())\n-                    .value(\"continuation\", continuation)\n-                    .done())\n-                    .getBytes(UTF_8);\n+            final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(\n+                            getExtractorLocalization(), getExtractorContentCountry())\n+                            .value(\"continuation\", continuation)\n+                            .done())\n+                    .getBytes(StandardCharsets.UTF_8);\n \n-            return new Page(\"https://youtubei.googleapis.com/youtubei/v1/browse?key=\"\n-                    + getKey(), body);\n+            return new Page(YOUTUBEI_V1_URL + \"browse?key=\" + getKey(), body);\n         } else {\n             return null;\n         }\n     }\n \n-    private void collectStreamsFrom(final StreamInfoItemsCollector collector,\n-                                    final JsonArray videos) {\n+    private void collectStreamsFrom(@Nonnull final StreamInfoItemsCollector collector,\n+                                    @Nonnull final JsonArray videos) {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n-        for (final Object video : videos) {\n-            if (((JsonObject) video).has(\"playlistVideoRenderer\")) {\n-                collector.commit(new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n-                        .getObject(\"playlistVideoRenderer\"), timeAgoParser) {\n+        videos.stream()\n+                .filter(video -> ((JsonObject) video).has(PLAYLIST_VIDEO_RENDERER))\n+                .map(video -> new YoutubeStreamInfoItemExtractor(((JsonObject) video)\n+                        .getObject(PLAYLIST_VIDEO_RENDERER), timeAgoParser) {\n                     @Override\n                     public long getViewCount() {\n                         return -1;\n                     }\n-                });\n-            }\n-        }\n+                })\n+                .forEachOrdered(collector::commit);\n     }\n }\n", "next_change": {"commit": "401082abe451368fd4af816ec179dbbd3d174977", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0e0c6003..c3ffd17d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -326,4 +330,10 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n                 })\n                 .forEachOrdered(collector::commit);\n     }\n+\n+    @Nonnull\n+    @Override\n+    public PlaylistInfo.PlaylistType getPlaylistType() throws ParsingException {\n+        return extractPlaylistTypeFromPlaylistUrl(getUrl());\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjY1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926659", "body": "```suggestion\r\n            // not good, I know\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // not good i know\n          \n          \n            \n                        // not good, I know", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> not good<span class=\"x x-first x-last\"> i</span> know</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> not good<span class=\"x x-first x-last\">, I</span> know</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:23:27Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n+            // -2 because the testing system will consequently know that the regex failed\n             // not good i know", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 900707ab..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n-            // not good i know\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -162,179 +181,232 @@ public abstract class StreamExtractor extends Extractor {\n      * The name of the creator/uploader of the stream.\n      * If the name is not available you can simply return an empty string.\n      *\n-     * @return the name of the creator/uploader of the stream or an empty String\n-     * @throws ParsingException\n+     * @return the name of the creator/uploader of the stream or an empty tring\n      */\n     @Nonnull\n     public abstract String getUploaderName() throws ParsingException;\n \n+    /**\n+     * Whether the uploader has been verified by the service's provider.\n+     * If there is no verification implemented, return <code>false</code>.\n+     *\n+     * @return whether the uploader has been verified by the service's provider\n+     */\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n+    /**\n+     * The subscriber count of the uploader.\n+     * If the subscriber count is not implemented, or is unavailable, return <code>-1</code>.\n+     *\n+     * @return the subscriber count of the uploader or {@value UNKNOWN_SUBSCRIBER_COUNT} if not\n+     * available\n+     */\n+    public long getUploaderSubscriberCount() throws ParsingException {\n+        return UNKNOWN_SUBSCRIBER_COUNT;\n+    }\n+\n     /**\n      * The url to the image file/profile picture/avatar of the creator/uploader of the stream.\n      * If the url is not available you can return an empty String.\n      *\n      * @return The url of the image file of the uploader or an empty String\n-     * @throws ParsingException\n      */\n     @Nonnull\n-    public abstract String getUploaderAvatarUrl() throws ParsingException;\n+    public String getUploaderAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The Url to the page of the sub-channel of the stream. This must not be a homepage,\n+     * but the page offered by the service the extractor handles. This url will be handled by the\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n+     *\n+     * @return the url to the page of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The name of the sub-channel of the stream.\n+     * If the name is not available you can simply return an empty string.\n+     *\n+     * @return the name of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The url to the image file/profile picture/avatar of the sub-channel of the stream.\n+     * If the url is not available you can return an empty String.\n+     *\n+     * @return The url of the image file of the sub-channel or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n      * Get the dash mpd url. If you don't know what a dash MPD is you can read about it\n      * <a href=\"https://www.brendanlong.com/the-structure-of-an-mpeg-dash-mpd.html\">here</a>.\n      *\n-     * @return the url as a string or an empty string\n+     * @return the url as a string or an empty string or an empty string if not available\n      * @throws ParsingException if an error occurs while reading\n      */\n     @Nonnull\n-    public abstract String getDashMpdUrl() throws ParsingException;\n+    public String getDashMpdUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * I am not sure if this is in use, and how this is used. However the frontend is missing support\n-     * for HLS streams. Prove me if I am wrong. Please open an\n+     * I am not sure if this is in use, and how this is used. However the frontend is missing\n+     * support for HLS streams. Prove me if I am wrong. Please open an\n      * <a href=\"https://github.com/teamnewpipe/newpipe/issues\">issue</a>,\n      * or fix this description if you know whats up with this.\n      *\n-     * @return The Url to the hls stream.\n-     * @throws ParsingException\n+     * @return The Url to the hls stream or an empty string if not available.\n      */\n     @Nonnull\n-    public abstract String getHlsUrl() throws ParsingException;\n+    public String getHlsUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/AudioStream.html\">AudioStream</a>s\n+     * This should return a list of available {@link AudioStream}s.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of audio only streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<AudioStream> getAudioStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of combined video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s.\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do NOT contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle\n+     * this as a failed extraction procedure.\n      *\n      * @return a list of video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoOnlyStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * If no subtitles are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s.\n+     * If no subtitles are available an empty list can be returned.\n      *\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * given by a specific type.\n-     * If no subtitles in that specific format are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s given by a specific type.\n+     * If no subtitles in that specific format are available an empty list can be returned.\n      *\n      * @param format the media format by which the subtitles should be filtered\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitles(MediaFormat format) throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitles(final MediaFormat format)\n+            throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     * Get the {@link StreamType}.\n      *\n      * @return the type of the stream\n-     * @throws ParsingException\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    @Nullable\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n+\n+    /**\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else {\n+            return null;\n+        }\n+    }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -342,33 +414,29 @@ public abstract class StreamExtractor extends Extractor {\n             return -2;\n         }\n \n-        if (!timeStamp.isEmpty()) {\n+        if (!timestamp.isEmpty()) {\n             try {\n                 String secondsString = \"\";\n                 String minutesString = \"\";\n                 String hoursString = \"\";\n                 try {\n-                    secondsString = Parser.matchGroup1(\"(\\\\d{1,3})s\", timeStamp);\n-                    minutesString = Parser.matchGroup1(\"(\\\\d{1,3})m\", timeStamp);\n-                    hoursString = Parser.matchGroup1(\"(\\\\d{1,3})h\", timeStamp);\n-                } catch (Exception e) {\n-                    //it could be that time is given in another method\n-                    if (secondsString.isEmpty() //if nothing was got,\n-                            && minutesString.isEmpty()//treat as unlabelled seconds\n-                            && hoursString.isEmpty()) {\n-                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timeStamp);\n+                    secondsString = Parser.matchGroup1(\"(\\\\d+)s\", timestamp);\n+                    minutesString = Parser.matchGroup1(\"(\\\\d+)m\", timestamp);\n+                    hoursString = Parser.matchGroup1(\"(\\\\d+)h\", timestamp);\n+                } catch (final Exception e) {\n+                    // it could be that time is given in another method\n+                    if (secondsString.isEmpty() && minutesString.isEmpty()) {\n+                        // if nothing was obtained, treat as unlabelled seconds\n+                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timestamp);\n                     }\n                 }\n \n-                int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n-                int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n-                int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n+                final int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n+                final int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n+                final int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n \n-                //don't trust BODMAS!\n-                return seconds + (60 * minutes) + (3600 * hours);\n-                //Log.d(TAG, \"derived timestamp value:\"+ret);\n-                //the ordering varies internationally\n-            } catch (ParsingException e) {\n+                return seconds + (60L * minutes) + (3600L * hours);\n+            } catch (final ParsingException e) {\n                 throw new ParsingException(\"Could not get timestamp.\", e);\n             }\n         } else {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjcwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926703", "body": "```suggestion\r\n            // catch this instantly since a url does not necessarily have a timestamp\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // catch this instantly since an url does not necessarily have to have a time stamp\n          \n          \n            \n                        // catch this instantly since a url does not necessarily have a timestamp", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> catch this instantly since <span class=\"x x-first x-last\">an</span> url does not necessarily have <span class=\"x x-first x-last\">to have a time stamp</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> catch this instantly since <span class=\"x x-first x-last\">a</span> url does not necessarily have <span class=\"x x-first x-last\">a timestamp</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:24:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 900707ab..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n-            // not good i know\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": {"commit": "8aba2b47b0995cab55883895c40fb35d91eb49a1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -162,179 +181,232 @@ public abstract class StreamExtractor extends Extractor {\n      * The name of the creator/uploader of the stream.\n      * If the name is not available you can simply return an empty string.\n      *\n-     * @return the name of the creator/uploader of the stream or an empty String\n-     * @throws ParsingException\n+     * @return the name of the creator/uploader of the stream or an empty tring\n      */\n     @Nonnull\n     public abstract String getUploaderName() throws ParsingException;\n \n+    /**\n+     * Whether the uploader has been verified by the service's provider.\n+     * If there is no verification implemented, return <code>false</code>.\n+     *\n+     * @return whether the uploader has been verified by the service's provider\n+     */\n+    public boolean isUploaderVerified() throws ParsingException {\n+        return false;\n+    }\n+\n+    /**\n+     * The subscriber count of the uploader.\n+     * If the subscriber count is not implemented, or is unavailable, return <code>-1</code>.\n+     *\n+     * @return the subscriber count of the uploader or {@value UNKNOWN_SUBSCRIBER_COUNT} if not\n+     * available\n+     */\n+    public long getUploaderSubscriberCount() throws ParsingException {\n+        return UNKNOWN_SUBSCRIBER_COUNT;\n+    }\n+\n     /**\n      * The url to the image file/profile picture/avatar of the creator/uploader of the stream.\n      * If the url is not available you can return an empty String.\n      *\n      * @return The url of the image file of the uploader or an empty String\n-     * @throws ParsingException\n      */\n     @Nonnull\n-    public abstract String getUploaderAvatarUrl() throws ParsingException;\n+    public String getUploaderAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The Url to the page of the sub-channel of the stream. This must not be a homepage,\n+     * but the page offered by the service the extractor handles. This url will be handled by the\n+     * {@link ChannelExtractor}, so be sure to implement that one before you return a value here,\n+     * otherwise NewPipe will crash if one selects this url.\n+     *\n+     * @return the url to the page of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelUrl() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The name of the sub-channel of the stream.\n+     * If the name is not available you can simply return an empty string.\n+     *\n+     * @return the name of the sub-channel of the stream or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    /**\n+     * The url to the image file/profile picture/avatar of the sub-channel of the stream.\n+     * If the url is not available you can return an empty String.\n+     *\n+     * @return The url of the image file of the sub-channel or an empty String\n+     */\n+    @Nonnull\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n      * Get the dash mpd url. If you don't know what a dash MPD is you can read about it\n      * <a href=\"https://www.brendanlong.com/the-structure-of-an-mpeg-dash-mpd.html\">here</a>.\n      *\n-     * @return the url as a string or an empty string\n+     * @return the url as a string or an empty string or an empty string if not available\n      * @throws ParsingException if an error occurs while reading\n      */\n     @Nonnull\n-    public abstract String getDashMpdUrl() throws ParsingException;\n+    public String getDashMpdUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * I am not sure if this is in use, and how this is used. However the frontend is missing support\n-     * for HLS streams. Prove me if I am wrong. Please open an\n+     * I am not sure if this is in use, and how this is used. However the frontend is missing\n+     * support for HLS streams. Prove me if I am wrong. Please open an\n      * <a href=\"https://github.com/teamnewpipe/newpipe/issues\">issue</a>,\n      * or fix this description if you know whats up with this.\n      *\n-     * @return The Url to the hls stream.\n-     * @throws ParsingException\n+     * @return The Url to the hls stream or an empty string if not available.\n      */\n     @Nonnull\n-    public abstract String getHlsUrl() throws ParsingException;\n+    public String getHlsUrl() throws ParsingException {\n+        return \"\";\n+    }\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/AudioStream.html\">AudioStream</a>s\n+     * This should return a list of available {@link AudioStream}s.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getVideoStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of audio only streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<AudioStream> getAudioStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoOnlyStreams() and getDashMpdUrl() either the Collector will\n+     * handle this as a failed extraction procedure.\n      *\n      * @return a list of combined video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This should return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/VideoStream.html\">VideoStream</a>s.\n+     * This should return a list of available {@link VideoStream}s.\n      * Be aware this is the list of video streams which do NOT contain an audio stream.\n      * You can also return null or an empty list, however be aware that if you don't return anything\n-     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle this as\n-     * a failed extraction procedure.\n+     * in getAudioStreams(), getVideoStreams() and getDashMpdUrl() either the Collector will handle\n+     * this as a failed extraction procedure.\n      *\n      * @return a list of video and streams in the format of AudioStream\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     public abstract List<VideoStream> getVideoOnlyStreams() throws IOException, ExtractionException;\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * If no subtitles are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s.\n+     * If no subtitles are available an empty list can be returned.\n      *\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * This will return a list of available\n-     * <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/org/schabi/newpipe/extractor/stream/Subtitles.html\">Subtitles</a>s.\n-     * given by a specific type.\n-     * If no subtitles in that specific format are available an empty list can returned.\n+     * This will return a list of available {@link SubtitlesStream}s given by a specific type.\n+     * If no subtitles in that specific format are available an empty list can be returned.\n      *\n      * @param format the media format by which the subtitles should be filtered\n      * @return a list of available subtitles or an empty list\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n     @Nonnull\n-    public abstract List<SubtitlesStream> getSubtitles(MediaFormat format) throws IOException, ExtractionException;\n+    public List<SubtitlesStream> getSubtitles(final MediaFormat format)\n+            throws IOException, ExtractionException {\n+        return Collections.emptyList();\n+    }\n \n     /**\n-     * Get the <a href=\"https://teamnewpipe.github.io/NewPipeExtractor/javadoc/\">StreamType</a>.\n+     * Get the {@link StreamType}.\n      *\n      * @return the type of the stream\n-     * @throws ParsingException\n      */\n     public abstract StreamType getStreamType() throws ParsingException;\n \n-    /**\n-     * Should return the url of the next stream. NewPipe will automatically play\n-     * the next stream if the user wants that.\n-     * If the next stream is is not available simply return null\n-     *\n-     * @return the InfoItem of the next stream\n-     * @throws IOException\n-     * @throws ExtractionException\n-     */\n-    public abstract StreamInfoItem getNextStream() throws IOException, ExtractionException;\n-\n     /**\n      * Should return a list of streams related to the current handled. Many services show suggested\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n-     * be disabled by the user later in the frontend.\n-     * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If it is not available simply return null\n+     * be disabled by the user later in the frontend. The first related stream might be what was\n+     * previously known as a next stream.\n+     * If related streams aren't available simply return {@code null}.\n      *\n      * @return a list of InfoItems showing the related videos/streams\n-     * @throws IOException\n-     * @throws ExtractionException\n      */\n-    public abstract StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException;\n+    @Nullable\n+    public InfoItemsCollector<? extends InfoItem, ? extends InfoItemExtractor>\n+    getRelatedItems() throws IOException, ExtractionException {\n+        return null;\n+    }\n+\n+    /**\n+     * @return The result of {@link #getRelatedItems()} if it is a\n+     * {@link StreamInfoItemsCollector}, <code>null</code> otherwise\n+     * @deprecated Use {@link #getRelatedItems()}. May be removed in a future version.\n+     */\n+    @Deprecated\n+    @Nullable\n+    public StreamInfoItemsCollector getRelatedStreams() throws IOException, ExtractionException {\n+        final InfoItemsCollector<?, ?> collector = getRelatedItems();\n+        if (collector instanceof StreamInfoItemsCollector) {\n+            return (StreamInfoItemsCollector) collector;\n+        } else {\n+            return null;\n+        }\n+    }\n \n     /**\n      * Should return a list of Frameset object that contains preview of stream frames\n      *\n-     * @return list of preview frames or empty list if frames preview is not supported or not found for specified stream\n-     * @throws IOException\n-     * @throws ExtractionException\n+     * @return list of preview frames or empty list if frames preview is not supported or not found\n+     *         for specified stream\n      */\n     @Nonnull\n-    public List<Frameset> getFrames() throws IOException, ExtractionException {\n+    public List<Frameset> getFrames() throws ExtractionException {\n         return Collections.emptyList();\n     }\n \n     /**\n      * Should analyse the webpage's document and extracts any error message there might be.\n      *\n-     * @return Error message; null if there is no error message.\n+     * @return Error message; <code>null</code> if there is no error message.\n      */\n-    public abstract String getErrorMessage();\n+    public String getErrorMessage() {\n+        return null;\n+    }\n \n     //////////////////////////////////////////////////////////////////\n     ///  Helper\n     //////////////////////////////////////////////////////////////////\n \n     /**\n-     * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp format of YouTube.\n+     * Override this function if the format of timestamp in the url is not the same format as that\n+     * from youtube.\n      *\n-     * @param regexPattern\n      * @return the time stamp/seek for the video in seconds\n-     * @throws ParsingException\n      */\n-    protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n-        String timeStamp;\n+    protected long getTimestampSeconds(final String regexPattern) throws ParsingException {\n+        final String timestamp;\n         try {\n-            timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n-        } catch (Parser.RegexException e) {\n+            timestamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n+        } catch (final Parser.RegexException e) {\n             // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 78a5fbf3..ab922b1c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -342,33 +414,29 @@ public abstract class StreamExtractor extends Extractor {\n             return -2;\n         }\n \n-        if (!timeStamp.isEmpty()) {\n+        if (!timestamp.isEmpty()) {\n             try {\n                 String secondsString = \"\";\n                 String minutesString = \"\";\n                 String hoursString = \"\";\n                 try {\n-                    secondsString = Parser.matchGroup1(\"(\\\\d{1,3})s\", timeStamp);\n-                    minutesString = Parser.matchGroup1(\"(\\\\d{1,3})m\", timeStamp);\n-                    hoursString = Parser.matchGroup1(\"(\\\\d{1,3})h\", timeStamp);\n-                } catch (Exception e) {\n-                    //it could be that time is given in another method\n-                    if (secondsString.isEmpty() //if nothing was got,\n-                            && minutesString.isEmpty()//treat as unlabelled seconds\n-                            && hoursString.isEmpty()) {\n-                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timeStamp);\n+                    secondsString = Parser.matchGroup1(\"(\\\\d+)s\", timestamp);\n+                    minutesString = Parser.matchGroup1(\"(\\\\d+)m\", timestamp);\n+                    hoursString = Parser.matchGroup1(\"(\\\\d+)h\", timestamp);\n+                } catch (final Exception e) {\n+                    // it could be that time is given in another method\n+                    if (secondsString.isEmpty() && minutesString.isEmpty()) {\n+                        // if nothing was obtained, treat as unlabelled seconds\n+                        secondsString = Parser.matchGroup1(\"t=(\\\\d+)\", timestamp);\n                     }\n                 }\n \n-                int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n-                int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n-                int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n+                final int seconds = secondsString.isEmpty() ? 0 : Integer.parseInt(secondsString);\n+                final int minutes = minutesString.isEmpty() ? 0 : Integer.parseInt(minutesString);\n+                final int hours = hoursString.isEmpty() ? 0 : Integer.parseInt(hoursString);\n \n-                //don't trust BODMAS!\n-                return seconds + (60 * minutes) + (3600 * hours);\n-                //Log.d(TAG, \"derived timestamp value:\"+ret);\n-                //the ordering varies internationally\n-            } catch (ParsingException e) {\n+                return seconds + (60L * minutes) + (3600L * hours);\n+            } catch (final ParsingException e) {\n                 throw new ParsingException(\"Could not get timestamp.\", e);\n             }\n         } else {\n", "next_change": null}]}}]}}, {"oid": "a129c65c63ee95462239b9681bf14c1562abfe07", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a129c65c63ee95462239b9681bf14c1562abfe07", "message": "more improvements of comments\n\nCo-Authored-By: Stypox <stypox@pm.me>", "committedDate": "2020-02-16T22:59:31Z", "type": "commit"}]}