{"pr_number": 3200, "pr_title": "introduce command timeout types", "pr_author": "vladak", "pr_createdAt": "2020-08-31T19:18:31Z", "pr_url": "https://github.com/oracle/opengrok/pull/3200", "timeline": [{"oid": "de698c4e0851dd700b852933eaf5294549ce2f39", "url": "https://github.com/oracle/opengrok/commit/de698c4e0851dd700b852933eaf5294549ce2f39", "message": "introduce CommandTimeoutType\n\nfixes #3146", "committedDate": "2020-08-31T09:24:02Z", "type": "commit"}, {"oid": "2739a693d632219fc9847688d762477095113ba2", "url": "https://github.com/oracle/opengrok/commit/2739a693d632219fc9847688d762477095113ba2", "message": "report command duration via Statistics", "committedDate": "2020-08-31T18:46:18Z", "type": "commit"}, {"oid": "acb0e685834ecd54cd8e47e665d0b5dd7f0fc471", "url": "https://github.com/oracle/opengrok/commit/acb0e685834ecd54cd8e47e665d0b5dd7f0fc471", "message": "report index time of files with Level.FINEST", "committedDate": "2020-09-02T09:35:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjMwMA==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490236300", "body": "Would not `IllegalArgumentException` make more sense? `InvalidParameterException` is from `security` package and is not that commonly used.", "bodyText": "Would not IllegalArgumentException make more sense? InvalidParameterException is from security package and is not that commonly used.", "bodyHTML": "<p dir=\"auto\">Would not <code>IllegalArgumentException</code> make more sense? <code>InvalidParameterException</code> is from <code>security</code> package and is not that commonly used.</p>", "author": "ahornace", "createdAt": "2020-09-17T13:18:22Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -227,29 +228,59 @@ public void setNestingMaximum(int nestingMaximum) {\n         syncWriteConfiguration(nestingMaximum, Configuration::setNestingMaximum);\n     }\n \n-    public int getCommandTimeout() {\n-        return syncReadConfiguration(Configuration::getCommandTimeout);\n+    public int getCommandTimeout(CommandTimeoutType cmdType) {\n+        switch (cmdType) {\n+            case INDEXER:\n+                return getIndexerCommandTimeout();\n+            case INTERACTIVE:\n+                return getInteractiveCommandTimeout();\n+            case WEBAPP_START:\n+                return getWebappStartCommandTimeout();\n+            case RESTFUL:\n+                return getRestfulCommandTimeout();\n+        }\n+\n+        throw new InvalidParameterException(\"invalid command timeout type\");", "originalCommit": "acb0e685834ecd54cd8e47e665d0b5dd7f0fc471", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MTM0OA==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490361348", "bodyText": "sounds reasonable, changed.", "author": "vladak", "createdAt": "2020-09-17T15:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "61b71b09a625d79515c57b13f87590c56e699577", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\nindex 6514ba33e3..26969223b7 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n", "chunk": "@@ -228,67 +225,29 @@ public final class RuntimeEnvironment {\n         syncWriteConfiguration(nestingMaximum, Configuration::setNestingMaximum);\n     }\n \n-    public int getCommandTimeout(CommandTimeoutType cmdType) {\n-        switch (cmdType) {\n-            case INDEXER:\n-                return getIndexerCommandTimeout();\n-            case INTERACTIVE:\n-                return getInteractiveCommandTimeout();\n-            case WEBAPP_START:\n-                return getWebappStartCommandTimeout();\n-            case RESTFUL:\n-                return getRestfulCommandTimeout();\n-        }\n-\n-        throw new InvalidParameterException(\"invalid command timeout type\");\n-    }\n-\n-    public int getRestfulCommandTimeout() {\n-        return syncReadConfiguration(Configuration::getRestfulCommandTimeout);\n-    }\n-\n-    public void setRestfulCommandTimeout(int timeout) {\n-        syncWriteConfiguration(timeout, Configuration::setWebappStartCommandTimeout);\n-    }\n-\n-    public int getWebappStartCommandTimeout() {\n-        return syncReadConfiguration(Configuration::getWebappStartCommandTimeout);\n+    public int getCommandTimeout() {\n+        return syncReadConfiguration(Configuration::getCommandTimeout);\n     }\n \n-    public void setWebappStartCommandTimeout(int timeout) {\n-        syncWriteConfiguration(timeout, Configuration::setWebappStartCommandTimeout);\n-    }\n-\n-    public int getIndexerCommandTimeout() {\n-        return syncReadConfiguration(Configuration::getIndexerCommandTimeout);\n-    }\n-\n-    public void setIndexerCommandTimeout(int timeout) {\n-        syncWriteConfiguration(timeout, Configuration::setIndexerCommandTimeout);\n+    public void setCommandTimeout(int commandTimeout) {\n+        syncWriteConfiguration(commandTimeout, Configuration::setCommandTimeout);\n     }\n \n     public int getInteractiveCommandTimeout() {\n         return syncReadConfiguration(Configuration::getInteractiveCommandTimeout);\n     }\n \n-    public void setInteractiveCommandTimeout(int timeout) {\n-        syncWriteConfiguration(timeout, Configuration::setInteractiveCommandTimeout);\n+    public void setInteractiveCommandTimeout(int interactiveCommandTimeout) {\n+        syncWriteConfiguration(interactiveCommandTimeout,\n+                Configuration::setInteractiveCommandTimeout);\n     }\n \n     public long getCtagsTimeout() {\n         return syncReadConfiguration(Configuration::getCtagsTimeout);\n     }\n \n-    public void setCtagsTimeout(long timeout) {\n-        syncWriteConfiguration(timeout, Configuration::setCtagsTimeout);\n-    }\n-    \n-    public Statistics getStatistics() {\n-        return statistics;\n-    }\n-\n-    public void setStatistics(Statistics statistics) {\n-        this.statistics = statistics;\n+    public void setCtagsTimeout(long ctagsTimeout) {\n+        syncWriteConfiguration(ctagsTimeout, Configuration::setCtagsTimeout);\n     }\n \n     public void setLastEditedDisplayMode(boolean lastEditedDisplayMode) {\n", "next_change": {"commit": "a904b83a16dc8999be29a5d9b455e523c4ff86a9", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\nindex 26969223b7..300b964680 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n", "chunk": "@@ -225,29 +226,59 @@ public final class RuntimeEnvironment {\n         syncWriteConfiguration(nestingMaximum, Configuration::setNestingMaximum);\n     }\n \n-    public int getCommandTimeout() {\n-        return syncReadConfiguration(Configuration::getCommandTimeout);\n+    public int getCommandTimeout(CommandTimeoutType cmdType) {\n+        switch (cmdType) {\n+            case INDEXER:\n+                return getIndexerCommandTimeout();\n+            case INTERACTIVE:\n+                return getInteractiveCommandTimeout();\n+            case WEBAPP_START:\n+                return getWebappStartCommandTimeout();\n+            case RESTFUL:\n+                return getRestfulCommandTimeout();\n+        }\n+\n+        throw new InvalidParameterException(\"invalid command timeout type\");\n+    }\n+\n+    public int getRestfulCommandTimeout() {\n+        return syncReadConfiguration(Configuration::getRestfulCommandTimeout);\n+    }\n+\n+    public void setRestfulCommandTimeout(int timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setWebappStartCommandTimeout);\n+    }\n+\n+    public int getWebappStartCommandTimeout() {\n+        return syncReadConfiguration(Configuration::getWebappStartCommandTimeout);\n     }\n \n-    public void setCommandTimeout(int commandTimeout) {\n-        syncWriteConfiguration(commandTimeout, Configuration::setCommandTimeout);\n+    public void setWebappStartCommandTimeout(int timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setWebappStartCommandTimeout);\n+    }\n+\n+    public int getIndexerCommandTimeout() {\n+        return syncReadConfiguration(Configuration::getIndexerCommandTimeout);\n+    }\n+\n+    public void setIndexerCommandTimeout(int timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setIndexerCommandTimeout);\n     }\n \n     public int getInteractiveCommandTimeout() {\n         return syncReadConfiguration(Configuration::getInteractiveCommandTimeout);\n     }\n \n-    public void setInteractiveCommandTimeout(int interactiveCommandTimeout) {\n-        syncWriteConfiguration(interactiveCommandTimeout,\n-                Configuration::setInteractiveCommandTimeout);\n+    public void setInteractiveCommandTimeout(int timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setInteractiveCommandTimeout);\n     }\n \n     public long getCtagsTimeout() {\n         return syncReadConfiguration(Configuration::getCtagsTimeout);\n     }\n \n-    public void setCtagsTimeout(long ctagsTimeout) {\n-        syncWriteConfiguration(ctagsTimeout, Configuration::setCtagsTimeout);\n+    public void setCtagsTimeout(long timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setCtagsTimeout);\n     }\n \n     public void setLastEditedDisplayMode(boolean lastEditedDisplayMode) {\n", "next_change": {"commit": "e92cec67491a347b48a5429a882f72582e04165b", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\nindex 300b964680..fc50cff1d3 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n", "chunk": "@@ -281,6 +298,14 @@ public final class RuntimeEnvironment {\n         syncWriteConfiguration(timeout, Configuration::setCtagsTimeout);\n     }\n \n+    public long getXrefTimeout() {\n+        return syncReadConfiguration(Configuration::getXrefTimeout);\n+    }\n+\n+    public void setXrefTimeout(long timeout) {\n+        syncWriteConfiguration(timeout, Configuration::setXrefTimeout);\n+    }\n+\n     public void setLastEditedDisplayMode(boolean lastEditedDisplayMode) {\n         syncWriteConfiguration(lastEditedDisplayMode, Configuration::setLastEditedDisplayMode);\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0MzE0Mg==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490243142", "body": "I know it was like this but since you are touching it, could you please rename to `timeStr` to follow Java standard?", "bodyText": "I know it was like this but since you are touching it, could you please rename to timeStr to follow Java standard?", "bodyHTML": "<p dir=\"auto\">I know it was like this but since you are touching it, could you please rename to <code>timeStr</code> to follow Java standard?</p>", "author": "ahornace", "createdAt": "2020-09-17T13:26:34Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java", "diffHunk": "@@ -28,28 +28,47 @@\n import static org.opengrok.indexer.util.StringUtils.getReadableTime;\n \n public class Statistics {\n-        \n-  private final long startTime;  \n \n-  public Statistics() {\n+    private final long startTime;\n+\n+    public Statistics() {\n       startTime = System.currentTimeMillis();    \n   }\n \n-  public void report(Logger log, String msg) {\n-      long stopTime = System.currentTimeMillis();\n-      String time_str = StringUtils.getReadableTime(stopTime - startTime);\n-      log.log(Level.INFO, msg + \" (took {0})\", time_str);\n-  }\n+    /**\n+     * log a message along with how much time it took since the constructor was called.\n+     * @param logger logger instance\n+     * @param logLevel log level\n+     * @param msg message string\n+     */\n+    public void report(Logger logger, Level logLevel, String msg) {\n+        long stopTime = System.currentTimeMillis();\n+        String time_str = StringUtils.getReadableTime(stopTime - startTime);", "originalCommit": "acb0e685834ecd54cd8e47e665d0b5dd7f0fc471", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1OTkzMA==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490359930", "bodyText": "sure", "author": "vladak", "createdAt": "2020-09-17T15:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0MzE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b7eec7802fdf7d77c7d777a2b2e59d59e04afc45", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 97ec32f0d1..1949696d92 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -43,8 +43,8 @@ public class Statistics {\n      */\n     public void report(Logger logger, Level logLevel, String msg) {\n         long stopTime = System.currentTimeMillis();\n-        String time_str = StringUtils.getReadableTime(stopTime - startTime);\n-        logger.log(Level.INFO, msg + \" (took {0})\", time_str);\n+        String timeStr = StringUtils.getReadableTime(stopTime - startTime);\n+        logger.log(Level.INFO, msg + \" (took {0})\", timeStr);\n     }\n \n     /**\n", "next_change": {"commit": "20c879e05002e01f8231db309ca16c0368a6372f", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 1949696d92..37aafc2645 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -42,14 +44,13 @@ public class Statistics {\n      * @param msg message string\n      */\n     public void report(Logger logger, Level logLevel, String msg) {\n-        long stopTime = System.currentTimeMillis();\n-        String timeStr = StringUtils.getReadableTime(stopTime - startTime);\n-        logger.log(Level.INFO, msg + \" (took {0})\", timeStr);\n+        String timeStr = StringUtils.getReadableTime(Duration.between(startTime, Instant.now()).toMillis());\n+        logger.log(logLevel, msg + \" (took {0})\", timeStr);\n     }\n \n     /**\n      * log a message along with how much time it took since the constructor was called.\n-     * The log level is Level.INFO.\n+     * The log level is {@code INFO}.\n      * @param logger logger instance\n      * @param msg message string\n      */\n", "next_change": {"commit": "0d7ace53e3bf35d6e3f78d37ef6ea4b1a697fcbe", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 37aafc2645..fb760e9a8a 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -53,24 +80,19 @@ public class Statistics {\n      * The log level is {@code INFO}.\n      * @param logger logger instance\n      * @param msg message string\n+     * @param meterName name of the meter\n      */\n-    public void report(Logger logger, String msg) {\n-        report(logger, Level.INFO, msg);\n+    public void report(Logger logger, String msg, String meterName) {\n+        report(logger, Level.INFO, msg, meterName);\n     }\n \n     /**\n-     * log a message along with how much time and memory it took since the constructor was called.\n-     * The message will be logged with the {@code INFO} level.\n+     * log a message along with how much time it took since the constructor was called.\n+     * The log level is {@code INFO}.\n      * @param logger logger instance\n+     * @param msg message string\n      */\n-    public void report(Logger logger) {\n-        logger.log(Level.INFO, \"Total time: {0}\",\n-                getReadableTime(Duration.between(startTime, Instant.now()).toMillis()));\n-\n-        System.gc();\n-        Runtime r = Runtime.getRuntime();\n-        long mb = 1024L * 1024;\n-        logger.log(Level.INFO, \"Final Memory: {0}M/{1}M\",\n-                new Object[]{(r.totalMemory() - r.freeMemory()) / mb, r.totalMemory() / mb});\n+    public void report(Logger logger, String msg) {\n+        report(logger, Level.INFO, msg);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0OTY2Nw==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490249667", "body": "I still prefer using `Instant` and `Duration` classes for computing the duration as it is more high level. If you do not, then feel free to ignore.", "bodyText": "I still prefer using Instant and Duration classes for computing the duration as it is more high level. If you do not, then feel free to ignore.", "bodyHTML": "<p dir=\"auto\">I still prefer using <code>Instant</code> and <code>Duration</code> classes for computing the duration as it is more high level. If you do not, then feel free to ignore.</p>", "author": "ahornace", "createdAt": "2020-09-17T13:33:46Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java", "diffHunk": "@@ -28,28 +28,47 @@\n import static org.opengrok.indexer.util.StringUtils.getReadableTime;\n \n public class Statistics {\n-        \n-  private final long startTime;  \n \n-  public Statistics() {\n+    private final long startTime;", "originalCommit": "acb0e685834ecd54cd8e47e665d0b5dd7f0fc471", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NTAwOA==", "url": "https://github.com/oracle/opengrok/pull/3200#discussion_r490365008", "bodyText": "why not, changed. I like Duration.between().", "author": "vladak", "createdAt": "2020-09-17T15:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0OTY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "20c879e05002e01f8231db309ca16c0368a6372f", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 97ec32f0d1..37aafc2645 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -23,16 +23,18 @@\n \n package org.opengrok.indexer.util;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import static org.opengrok.indexer.util.StringUtils.getReadableTime;\n \n public class Statistics {\n \n-    private final long startTime;\n+    private final Instant startTime;\n \n     public Statistics() {\n-      startTime = System.currentTimeMillis();    \n+      startTime = Instant.now();\n   }\n \n     /**\n", "next_change": {"commit": "0d7ace53e3bf35d6e3f78d37ef6ea4b1a697fcbe", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 37aafc2645..fb760e9a8a 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -37,15 +40,39 @@ public class Statistics {\n       startTime = Instant.now();\n   }\n \n+    private void logIt(Logger logger, Level logLevel, String msg, Duration duration) {\n+        String timeStr = StringUtils.getReadableTime(duration.toMillis());\n+        logger.log(logLevel, msg + \" (took {0})\", timeStr);\n+    }\n+\n     /**\n-     * log a message along with how much time it took since the constructor was called.\n+     * Log a message along with how much time it took since the constructor was called.\n      * @param logger logger instance\n      * @param logLevel log level\n      * @param msg message string\n      */\n     public void report(Logger logger, Level logLevel, String msg) {\n-        String timeStr = StringUtils.getReadableTime(Duration.between(startTime, Instant.now()).toMillis());\n-        logger.log(logLevel, msg + \" (took {0})\", timeStr);\n+        logIt(logger, logLevel, msg, Duration.between(startTime, Instant.now()));\n+    }\n+\n+    /**\n+     * Log a message and trigger statsd message along with how much time it took since the constructor was called.\n+     * @param logger logger instance\n+     * @param logLevel log level\n+     * @param msg message string\n+     * @param meterName name of the meter\n+     */\n+    public void report(Logger logger, Level logLevel, String msg, String meterName) {\n+        Duration duration = Duration.between(startTime, Instant.now());\n+\n+        logIt(logger, logLevel, msg, duration);\n+\n+        MeterRegistry registry = Metrics.getRegistry();\n+        if (registry != null) {\n+            Timer.builder(meterName).\n+                    register(registry).\n+                    record(duration);\n+        }\n     }\n \n     /**\n", "next_change": {"commit": "5752d8ba1f4fa1892ace5235ae48a63534fd24d3", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex fb760e9a8a..269bd00dff 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -77,6 +82,7 @@ public class Statistics {\n \n     /**\n      * log a message along with how much time it took since the constructor was called.\n+     * If there is a metrics registry, it will update the timer specified by the meter name.\n      * The log level is {@code INFO}.\n      * @param logger logger instance\n      * @param msg message string\n", "next_change": {"commit": "e2f7528863dc2eccfe7204bba2a56a47df14f9f8", "changed_code": [{"header": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\nindex 269bd00dff..a11795988b 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/Statistics.java\n", "chunk": "@@ -75,13 +91,14 @@ public class Statistics {\n         MeterRegistry registry = Metrics.getRegistry();\n         if (registry != null) {\n             Timer.builder(meterName).\n+                    tags(tags).\n                     register(registry).\n                     record(duration);\n         }\n     }\n \n     /**\n-     * log a message along with how much time it took since the constructor was called.\n+     * Log a message along with how much time it took since the constructor was called.\n      * If there is a metrics registry, it will update the timer specified by the meter name.\n      * The log level is {@code INFO}.\n      * @param logger logger instance\n", "next_change": null}]}}]}}]}}]}}, {"oid": "187f4cd872c1fceca95551343bdb2b9a4df4fc52", "url": "https://github.com/oracle/opengrok/commit/187f4cd872c1fceca95551343bdb2b9a4df4fc52", "message": "rename per review comment", "committedDate": "2020-09-17T15:51:13Z", "type": "commit"}, {"oid": "e8c53d06676e666d0146465992e0d9111d9fbeb5", "url": "https://github.com/oracle/opengrok/commit/e8c53d06676e666d0146465992e0d9111d9fbeb5", "message": "use IllegalArgumentException per review comment", "committedDate": "2020-09-17T15:53:14Z", "type": "commit"}, {"oid": "b08ee2a79de4f1e6f076f2ba617f9aa077ad438f", "url": "https://github.com/oracle/opengrok/commit/b08ee2a79de4f1e6f076f2ba617f9aa077ad438f", "message": "use Instant/Duration per review comment", "committedDate": "2020-09-17T15:58:18Z", "type": "commit"}, {"oid": "1a10c24c4b271ec1cf6bfeef17491acc61ce6e85", "url": "https://github.com/oracle/opengrok/commit/1a10c24c4b271ec1cf6bfeef17491acc61ce6e85", "message": "remove unused import", "committedDate": "2020-09-17T17:38:25Z", "type": "commit"}]}