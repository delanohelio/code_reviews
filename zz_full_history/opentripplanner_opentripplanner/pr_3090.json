{"pr_number": 3090, "pr_title": "Add endpoint fetcher for GBFS", "pr_author": "gmellemstrand", "pr_createdAt": "2020-06-03T12:06:23Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090", "timeline": [{"oid": "62613c0788fa0209419bc511eec9eafd26478184", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/62613c0788fa0209419bc511eec9eafd26478184", "message": "Add endpoint fetcher for GBFS", "committedDate": "2020-06-03T12:02:50Z", "type": "commit"}, {"oid": "ce331a5a7deb64a63ae7bdae82e4dafa8fbdf6c9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ce331a5a7deb64a63ae7bdae82e4dafa8fbdf6c9", "message": "Add documentaton", "committedDate": "2020-06-03T12:12:19Z", "type": "commit"}, {"oid": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/50f8abc2c4466c08690da09302e3f02b9e4d1819", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-11T09:40:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDQzMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438730432", "body": "Line break", "bodyText": "Line break", "bodyHTML": "<p dir=\"auto\">Line break</p>", "author": "t2gran", "createdAt": "2020-06-11T11:56:31Z", "path": "src/ext/java/org/opentripplanner/ext/updater_endpoint_fetcher/GBFSUpdaterEndpointFetcher.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.opentripplanner.ext.updater_endpoint_fetcher;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.opentripplanner.updater.GraphUpdater;\n+import org.opentripplanner.updater.bike_rental.BikeRentalUpdater;\n+import org.opentripplanner.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Fetches GBFS endpoints from the Bikeservice component located at\n+ * https://github.com/entur/bikeservice\n+ */\n+public class GBFSUpdaterEndpointFetcher {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GBFSUpdaterEndpointFetcher.class);\n+\n+  private static final int DEFAULT_FREQUENCY_SEC = 15;\n+\n+  public static List<GraphUpdater> createUpdatersFromEndpoint(String url) {\n+\n+    LOG.info(\"Fetching list of updaters from {}\", url);\n+\n+    List<GraphUpdater> updaters = new ArrayList<>();\n+\n+    try {\n+      InputStream is = HttpUtils.getData(url);\n+      JsonNode node = (new ObjectMapper()).readTree(is);\n+      for (JsonNode operator : node.get(\"operators\")) {\n+        String network = operator.get(\"name\").asText();\n+        String updaterUrl = adjustUrlForUpdater(operator.get(\"url\").asText());\n+\n+        GbfsDataSource dataSource = new GbfsDataSource(updaterUrl, network);\n+        GbfsUpdaterSourceConfig gbfsUpdaterSourceConfig = new GbfsUpdaterSourceConfig(dataSource);\n+        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(\n+            gbfsUpdaterSourceConfig,\n+            updaterUrl,\n+            DEFAULT_FREQUENCY_SEC,\n+            network\n+        );\n+        LOG.info(\"Fetched updater info for {} at url {}\", network, updaterUrl);\n+\n+        GraphUpdater updater = new BikeRentalUpdater(bikeRentalParameters);\n+        updaters.add(updater);\n+      }\n+    }\n+    catch (java.io.IOException e) {\n+      LOG.warn(\n+          \"Error fetching list of bike rental endpoints from {}\", url);", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMTc0MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438811740", "bodyText": "You are silently eating the exception, print at least the exception message in the log.", "author": "t2gran", "createdAt": "2020-06-11T14:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDQzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTA4NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438735085", "body": "We try to avoid using the 'org.apache.commons' when possible, and here you can rewrite this as:\r\n```\r\nprivate static final String GBFS_JSON_FILENAME = \"gbfs.json\";\r\n:\r\nreturn url.endsWith(GBFS_JSON_FILENAME)\r\n        ? url.substring(0, url.length() - GBFS_JSON_FILENAME.length())\r\n        : url;\r\n```", "bodyText": "We try to avoid using the 'org.apache.commons' when possible, and here you can rewrite this as:\nprivate static final String GBFS_JSON_FILENAME = \"gbfs.json\";\n:\nreturn url.endsWith(GBFS_JSON_FILENAME)\n        ? url.substring(0, url.length() - GBFS_JSON_FILENAME.length())\n        : url;", "bodyHTML": "<p dir=\"auto\">We try to avoid using the 'org.apache.commons' when possible, and here you can rewrite this as:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static final String GBFS_JSON_FILENAME = &quot;gbfs.json&quot;;\n:\nreturn url.endsWith(GBFS_JSON_FILENAME)\n        ? url.substring(0, url.length() - GBFS_JSON_FILENAME.length())\n        : url;\"><pre><code>private static final String GBFS_JSON_FILENAME = \"gbfs.json\";\n:\nreturn url.endsWith(GBFS_JSON_FILENAME)\n        ? url.substring(0, url.length() - GBFS_JSON_FILENAME.length())\n        : url;\n</code></pre></div>", "author": "t2gran", "createdAt": "2020-06-11T12:06:27Z", "path": "src/ext/java/org/opentripplanner/ext/updater_endpoint_fetcher/GBFSUpdaterEndpointFetcher.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.opentripplanner.ext.updater_endpoint_fetcher;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.opentripplanner.updater.GraphUpdater;\n+import org.opentripplanner.updater.bike_rental.BikeRentalUpdater;\n+import org.opentripplanner.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Fetches GBFS endpoints from the Bikeservice component located at\n+ * https://github.com/entur/bikeservice\n+ */\n+public class GBFSUpdaterEndpointFetcher {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GBFSUpdaterEndpointFetcher.class);\n+\n+  private static final int DEFAULT_FREQUENCY_SEC = 15;\n+\n+  public static List<GraphUpdater> createUpdatersFromEndpoint(String url) {\n+\n+    LOG.info(\"Fetching list of updaters from {}\", url);\n+\n+    List<GraphUpdater> updaters = new ArrayList<>();\n+\n+    try {\n+      InputStream is = HttpUtils.getData(url);\n+      JsonNode node = (new ObjectMapper()).readTree(is);\n+      for (JsonNode operator : node.get(\"operators\")) {\n+        String network = operator.get(\"name\").asText();\n+        String updaterUrl = adjustUrlForUpdater(operator.get(\"url\").asText());\n+\n+        GbfsDataSource dataSource = new GbfsDataSource(updaterUrl, network);\n+        GbfsUpdaterSourceConfig gbfsUpdaterSourceConfig = new GbfsUpdaterSourceConfig(dataSource);\n+        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(\n+            gbfsUpdaterSourceConfig,\n+            updaterUrl,\n+            DEFAULT_FREQUENCY_SEC,\n+            network\n+        );\n+        LOG.info(\"Fetched updater info for {} at url {}\", network, updaterUrl);\n+\n+        GraphUpdater updater = new BikeRentalUpdater(bikeRentalParameters);\n+        updaters.add(updater);\n+      }\n+    }\n+    catch (java.io.IOException e) {\n+      LOG.warn(\n+          \"Error fetching list of bike rental endpoints from {}\", url);\n+    }\n+\n+    LOG.info(\"{} updaters fetched\", updaters.size());\n+\n+    return updaters;\n+  }\n+\n+  /**\n+   * The GBFS standard defines \"gbfs.json\" as the entrypoint, while\n+   * {@link org.opentripplanner.updater.bike_rental.BikeRentalDataSource} expects the base url and\n+   * does not look at \"gbfs.json\". This method adjusts the URL to what the BikeRentalDataSource\n+   * expects.\n+   */\n+  private static String adjustUrlForUpdater(String url) {\n+    return url.endsWith(\"gbfs.json\")\n+        ? StringUtils.substring(url, 0, url.length() - 9)\n+        : url;\n+  }", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNjE2Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438736163", "body": "Follow the Java package naming convention using only lowercase letters, no underscores.", "bodyText": "Follow the Java package naming convention using only lowercase letters, no underscores.", "bodyHTML": "<p dir=\"auto\">Follow the Java package naming convention using only lowercase letters, no underscores.</p>", "author": "t2gran", "createdAt": "2020-06-11T12:08:44Z", "path": "src/ext/java/org/opentripplanner/ext/updater_endpoint_fetcher/GBFSUpdaterEndpointFetcher.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.opentripplanner.ext.updater_endpoint_fetcher;", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNjg1Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438736856", "body": "Should be named `GbfsDataSourceParameters` ?", "bodyText": "Should be named GbfsDataSourceParameters ?", "bodyHTML": "<p dir=\"auto\">Should be named <code>GbfsDataSourceParameters</code> ?</p>", "author": "t2gran", "createdAt": "2020-06-11T12:10:14Z", "path": "src/ext/java/org/opentripplanner/ext/updater_endpoint_fetcher/GbfsDataSource.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.opentripplanner.ext.updater_endpoint_fetcher;\n+\n+import org.opentripplanner.updater.bike_rental.GbfsBikeRentalDataSource;\n+\n+public class GbfsDataSource implements GbfsBikeRentalDataSource.Parameters {", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NTU4MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438745581", "body": "The url is configurable, ref that not our url.", "bodyText": "The url is configurable, ref that not our url.", "bodyHTML": "<p dir=\"auto\">The url is configurable, ref that not our url.</p>", "author": "t2gran", "createdAt": "2020-06-11T12:27:56Z", "path": "src/ext/java/org/opentripplanner/ext/updater_endpoint_fetcher/GBFSUpdaterEndpointFetcher.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.opentripplanner.ext.updater_endpoint_fetcher;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.opentripplanner.updater.GraphUpdater;\n+import org.opentripplanner.updater.bike_rental.BikeRentalUpdater;\n+import org.opentripplanner.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Fetches GBFS endpoints from the Bikeservice component located at\n+ * https://github.com/entur/bikeservice", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5NjgzOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r439296838", "bodyText": "The endpoint url is configurable, but the component that provides the API is open source and located at that url. This is useful if someone else wants to set up their own bikeservice deployment.", "author": "gmellemstrand", "createdAt": "2020-06-12T08:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NTU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MjMyMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r441492320", "bodyText": "Sorry, missed the fact that this is pointing to the implementation, not the running service.", "author": "t2gran", "createdAt": "2020-06-17T12:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NTU4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNTI5Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438815293", "body": "asURI(...)", "bodyText": "asURI(...)", "bodyHTML": "<p dir=\"auto\">asURI(...)</p>", "author": "t2gran", "createdAt": "2020-06-11T14:09:43Z", "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -42,6 +44,9 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n+        this.bikeShareUpdaterEndpoint = adapter.asText(\n+            \"bikeShareUpdaterEndpoint\", null\n+        );", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d92bd5bde3cbc65b6efb726de88978d194ed7efc", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex c85fdcefd2..21776227c0 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -44,7 +44,7 @@ public class RouterConfig implements Serializable {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n-        this.bikeShareUpdaterEndpoint = adapter.asText(\n+        this.bikeShareUpdaterEndpoint = adapter.asUri(\n             \"bikeShareUpdaterEndpoint\", null\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n", "next_change": {"commit": "a1229c03c922ac3e72e333460cc1fd80ef2b3b5f", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 21776227c0..8f6c117c8b 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -44,8 +44,8 @@ public class RouterConfig implements Serializable {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n-        this.bikeShareUpdaterEndpoint = adapter.asUri(\n-            \"bikeShareUpdaterEndpoint\", null\n+        this.bikeRentalServiceDirectoryUrl = adapter.asUri(\n+            \"bikeRentalServiceDirectoryUrl\", null\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n", "next_change": {"commit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 8f6c117c8b..326bf6d5ad 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -44,12 +44,12 @@ public class RouterConfig implements Serializable {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n-        this.bikeRentalServiceDirectoryUrl = adapter.asUri(\n-            \"bikeRentalServiceDirectoryUrl\", null\n-        );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterConfig = new UpdaterConfig(adapter.path(\"updaters\"));\n+        this.updaterParameters = new UpdaterConfig(\n+            adapter.path(\"updaters\"),\n+            adapter.asUri(\"bikeRentalServiceDirectoryUrl\", null)\n+        );\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "fe9a3093b263e393965ab16530cffc9d4398e836", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 326bf6d5ad..69fcf99b99 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -46,10 +45,7 @@ public class RouterConfig implements Serializable {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(\n-            adapter.path(\"updaters\"),\n-            adapter.asUri(\"bikeRentalServiceDirectoryUrl\", null)\n-        );\n+        this.updaterParameters = new UpdaterConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "8b23fd3cbe4cac6d88a14fa7621a35a501a3165d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 69fcf99b99..3aa266c909 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -28,24 +28,27 @@ public class RouterConfig implements Serializable {\n     /**\n      * The raw JsonNode three kept for reference and (de)serialization.\n      */\n-    public final JsonNode rawJson;\n-\n+    private final JsonNode rawJson;\n     private final String requestLogFile;\n+    private final boolean transmodelApiHideFeedId;\n     private final double streetRoutingTimeoutSeconds;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdaterParameters updaterParameters;\n+    private final VectorTileConfig vectorTileLayers;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n         this.rawJson = node;\n         this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updaterParameters = new UpdaterConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "803296083d4a9314d4518c9f204f280d760edd7b", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 3aa266c909..38477d4920 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,8 +46,7 @@ public class RouterConfig implements Serializable {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+        this.updatersParameters = new UpdatersConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "9cd28885f3514bc725578dc1e1c893dfec8bf0a4", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 38477d4920..ffa6fed7bf 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,6 +48,7 @@ public class RouterConfig implements Serializable {\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updatersParameters = new UpdatersConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "49b46f4305ee31d745f86ca8f37ee70682bb210d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex ffa6fed7bf..9d64da67a3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -55,6 +57,23 @@ public class RouterConfig implements Serializable {\n         }\n     }\n \n+    /**\n+     * The config-version is a parameter witch each OTP deployment may set to be able to\n+     * query the OTP server and verify that it uses the correct version of the config. The\n+     * version must be injected into the config in the operation deployment pipeline. How this\n+     * is done is up to the deployment.\n+     * <p>\n+     * The config-version have no effect on OTP, and is provided as is on the API. There is\n+     * not syntax or format check on the version and it can be any string.\n+     * <p>\n+     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+     * <p>\n+     * This parameter is optional, and the default is {@code null}.\n+     */\n+    public String getConfigVersion() {\n+        return configVersion;\n+    }\n+\n     public String requestLogFile() {\n         return requestLogFile;\n     }\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 9d64da67a3..43ccdc4ced 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -1,125 +1,140 @@\n package org.opentripplanner.standalone.config;\n \n+import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.MissingNode;\n-import org.opentripplanner.routing.algorithm.raptor.transit.TransitTuningParameters;\n+import java.io.Serializable;\n+import org.opentripplanner.ext.flex.FlexParameters;\n+import org.opentripplanner.ext.vectortiles.VectorTilesResource;\n+import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitTuningParameters;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n+import org.opentripplanner.standalone.config.sandbox.FlexConfig;\n+import org.opentripplanner.standalone.config.sandbox.TransmodelAPIConfig;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n import org.opentripplanner.updater.UpdatersParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.Serializable;\n-\n-import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n-\n /**\n  * This class is an object representation of the 'router-config.json'.\n  */\n public class RouterConfig implements Serializable {\n \n-    private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n-    private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n-\n-    public static final RouterConfig DEFAULT = new RouterConfig(\n-            MissingNode.getInstance(), \"DEFAULT\", false\n-    );\n-\n-    /**\n-     * The raw JsonNode three kept for reference and (de)serialization.\n-     */\n-    private final JsonNode rawJson;\n-    private final String configVersion;\n-    private final String requestLogFile;\n-    private final boolean transmodelApiHideFeedId;\n-    private final double streetRoutingTimeoutSeconds;\n-    private final RoutingRequest routingRequestDefaults;\n-    private final TransitRoutingConfig transitConfig;\n-    private final UpdatersParameters updatersParameters;\n-    private final VectorTileConfig vectorTileLayers;\n-\n-    public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n-        NodeAdapter adapter = new NodeAdapter(node, source);\n-        this.rawJson = node;\n-        this.configVersion = adapter.asText(\"configVersion\", null);\n-        this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n-        this.streetRoutingTimeoutSeconds = adapter.asDouble(\n-                \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n-        );\n-        this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n-        this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updatersParameters = new UpdatersConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n-\n-        if(logUnusedParams) {\n-            adapter.logAllUnusedParameters(LOG);\n-        }\n+  private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n+  private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n+\n+  public static final RouterConfig DEFAULT = new RouterConfig(\n+    MissingNode.getInstance(),\n+    \"DEFAULT\",\n+    false\n+  );\n+\n+  /**\n+   * The raw JsonNode three kept for reference and (de)serialization.\n+   */\n+  private final JsonNode rawJson;\n+  private final String configVersion;\n+  private final String requestLogFile;\n+  private final TransmodelAPIConfig transmodelApi;\n+  private final double streetRoutingTimeoutSeconds;\n+  private final RoutingRequest routingRequestDefaults;\n+  private final TransitRoutingConfig transitConfig;\n+  private final UpdatersParameters updatersParameters;\n+  private final VectorTileConfig vectorTileLayers;\n+  private final FlexConfig flexConfig;\n+\n+  public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n+    NodeAdapter adapter = new NodeAdapter(node, source);\n+    this.rawJson = node;\n+    this.configVersion = adapter.asText(\"configVersion\", null);\n+    this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+    this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n+    this.streetRoutingTimeoutSeconds =\n+      adapter.asDouble(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n+    this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n+    this.updatersParameters = new UpdatersConfig(adapter);\n+    this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+    this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n+\n+    if (logUnusedParams) {\n+      adapter.logAllUnusedParameters(LOG);\n     }\n-\n-    /**\n-     * The config-version is a parameter witch each OTP deployment may set to be able to\n-     * query the OTP server and verify that it uses the correct version of the config. The\n-     * version must be injected into the config in the operation deployment pipeline. How this\n-     * is done is up to the deployment.\n-     * <p>\n-     * The config-version have no effect on OTP, and is provided as is on the API. There is\n-     * not syntax or format check on the version and it can be any string.\n-     * <p>\n-     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n-     * <p>\n-     * This parameter is optional, and the default is {@code null}.\n-     */\n-    public String getConfigVersion() {\n-        return configVersion;\n-    }\n-\n-    public String requestLogFile() {\n-        return requestLogFile;\n-    }\n-\n-    /**\n-     * The preferred way to limit the search is to limit the distance for\n-     * each street mode(WALK, BIKE, CAR). So the default timeout for a\n-     * street search is set quite high. This is used to abort the search\n-     * if the max distance is not reached within the timeout.\n-     */\n-    public double streetRoutingTimeoutSeconds() {\n-        return streetRoutingTimeoutSeconds;\n-    }\n-\n-    public boolean transmodelApiHideFeedId() { return transmodelApiHideFeedId; }\n-\n-    public RoutingRequest routingRequestDefaults() {\n-        return routingRequestDefaults;\n-    }\n-\n-    public RaptorTuningParameters raptorTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public TransitTuningParameters transitTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public UpdatersParameters updaterConfig() { return updatersParameters; }\n-\n-    public VectorTileConfig vectorTileLayers() { return vectorTileLayers; }\n-\n-    /**\n-     * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n-     */\n-    public boolean isDefault() {\n-        return this.rawJson.isMissingNode();\n-    }\n-\n-    public String toJson() {\n-        return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n-    }\n-\n-    public String toString() {\n-        // Print ONLY the values set, not deafult values\n-        return rawJson.toPrettyString();\n-    }\n-\n+  }\n+\n+  /**\n+   * The config-version is a parameter which each OTP deployment may set to be able to\n+   * query the OTP server and verify that it uses the correct version of the config. The\n+   * version must be injected into the config in the operation deployment pipeline. How this\n+   * is done is up to the deployment.\n+   * <p>\n+   * The config-version have no effect on OTP, and is provided as is on the API. There is\n+   * not syntax or format check on the version and it can be any string.\n+   * <p>\n+   * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+   * <p>\n+   * This parameter is optional, and the default is {@code null}.\n+   */\n+  public String getConfigVersion() {\n+    return configVersion;\n+  }\n+\n+  public String requestLogFile() {\n+    return requestLogFile;\n+  }\n+\n+  /**\n+   * The preferred way to limit the search is to limit the distance for\n+   * each street mode(WALK, BIKE, CAR). So the default timeout for a\n+   * street search is set quite high. This is used to abort the search\n+   * if the max distance is not reached within the timeout.\n+   */\n+  public double streetRoutingTimeoutSeconds() {\n+    return streetRoutingTimeoutSeconds;\n+  }\n+\n+  public TransmodelAPIConfig transmodelApi() {\n+    return transmodelApi;\n+  }\n+\n+  public RoutingRequest routingRequestDefaults() {\n+    return routingRequestDefaults;\n+  }\n+\n+  public RaptorTuningParameters raptorTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public TransitTuningParameters transitTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public UpdatersParameters updaterConfig() {\n+    return updatersParameters;\n+  }\n+\n+  public VectorTilesResource.LayersParameters vectorTileLayers() {\n+    return vectorTileLayers;\n+  }\n+\n+  public FlexParameters flexParameters(RoutingRequest request) {\n+    return flexConfig.toFlexParameters(request);\n+  }\n+\n+  /**\n+   * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n+   */\n+  public boolean isDefault() {\n+    return this.rawJson.isMissingNode();\n+  }\n+\n+  public String toJson() {\n+    return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n+  }\n+\n+  public String toString() {\n+    // Print ONLY the values set, not deafult values\n+    return rawJson.toPrettyString();\n+  }\n }\n", "next_change": {"commit": "e383f2b7c6773da4bb49dec187f21ccd38867219", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 43ccdc4ced..b44f87ff2d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -137,4 +137,32 @@ public class RouterConfig implements Serializable {\n     // Print ONLY the values set, not deafult values\n     return rawJson.toPrettyString();\n   }\n+\n+  /**\n+   * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n+   * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   * @since 2.2 - The support for the old format can be removed in version > 2.2.\n+   */\n+  static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n+    try {\n+      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    } catch (DateTimeParseException ex) {\n+      LOG.warn(\n+        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n+        \"Duration. Update you config, the support for the old format will be removed in the \" +\n+        \"next version after v2.2. Details: \" +\n+        ex.getMessage()\n+      );\n+      // This is safe, because the asDouble, will fall back to the default value on parse error\n+      return Duration.ofMillis(\n+        (long) (\n+          1000L *\n+          adapter.asDouble(\n+            \"streetRoutingTimeout\",\n+            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n+          )\n+        )\n+      );\n+    }\n+  }\n }\n", "next_change": {"commit": "1257e89c4bb8c235b0168ec5704ab411844cf838", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b44f87ff2d..1a23b9636a 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -144,25 +145,10 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    try {\n-      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n-    } catch (DateTimeParseException ex) {\n-      LOG.warn(\n-        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n-        \"Duration. Update you config, the support for the old format will be removed in the \" +\n-        \"next version after v2.2. Details: \" +\n-        ex.getMessage()\n-      );\n-      // This is safe, because the asDouble, will fall back to the default value on parse error\n-      return Duration.ofMillis(\n-        (long) (\n-          1000L *\n-          adapter.asDouble(\n-            \"streetRoutingTimeout\",\n-            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n-          )\n-        )\n-      );\n-    }\n+    return adapter.asDuration2(\n+      \"streetRoutingTimeout\",\n+      DEFAULT_STREET_ROUTING_TIMEOUT,\n+      ChronoUnit.SECONDS\n+    );\n   }\n }\n", "next_change": {"commit": "70734a29363ab8f2b62f9c3d46b5a393930b3f05", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 1a23b9636a..b796502f23 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -145,10 +156,9 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    return adapter.asDuration2(\n-      \"streetRoutingTimeout\",\n-      DEFAULT_STREET_ROUTING_TIMEOUT,\n-      ChronoUnit.SECONDS\n-    );\n+    return adapter\n+      .of(\"streetRoutingTimeout\")\n+      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "31423839f8cd698e253c376011b444a2c0947481", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b796502f23..a229bfbe12 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -158,7 +178,8 @@ public class RouterConfig implements Serializable {\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n-      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .since(NA)\n+      .summary(\"TODO\")\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "8c7b12353ac171d27fea3c1982bd0bd052af5aa1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex a229bfbe12..566aa8bdd7 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -173,13 +186,16 @@ public class RouterConfig implements Serializable {\n   /**\n    * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n    * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   *\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n       .since(NA)\n-      .summary(\"TODO\")\n+      .summary(\n+        \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n+      )\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "aa0be03f918d3c5e169be4f9444972b1da00e27c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 566aa8bdd7..52486ebdb3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -196,6 +195,20 @@ public class RouterConfig implements Serializable {\n       .summary(\n         \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n       )\n-      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n+      .description(\n+        \"\"\"\n+In OTP1 path searches sometimes toke a long time to complete. With the new Raptor algorithm this not\n+the case anymore. The street part of the routing may still take a long time if searching very long\n+distances. You can set the street routing timeout to avoid tying up server resources on pointless\n+searches and ensure that your users receive a timely response. You can also limit the max distance\n+to search for WALK, BIKE and CAR. When a search times out, a WARN level log entry is made with\n+information that can help identify problematic searches and improve our routing methods. There are\n+no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n+search-window.\n+\n+The search abort after this duration and any paths found are returned to the client.\n+\"\"\"\n+      )\n+      .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n   }\n }\n", "next_change": {"commit": "f9fec1b69eae33ab17c5e2e40cdbfce9bc7802cd", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 52486ebdb3..5eeea61849 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -206,7 +226,7 @@ information that can help identify problematic searches and improve our routing\n no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n search-window.\n \n-The search abort after this duration and any paths found are returned to the client.\n+The search aborts after this duration and any paths found are returned to the client.\n \"\"\"\n       )\n       .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNTM1MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438815351", "body": "`private final URI gbfsBikeRentalServiceDirectory;`", "bodyText": "private final URI gbfsBikeRentalServiceDirectory;", "bodyHTML": "<p dir=\"auto\"><code>private final URI gbfsBikeRentalServiceDirectory;</code></p>", "author": "t2gran", "createdAt": "2020-06-11T14:09:48Z", "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n     private final String requestLogFile;\n     private final double streetRoutingTimeoutSeconds;\n+    private final String bikeShareUpdaterEndpoint;", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d92bd5bde3cbc65b6efb726de88978d194ed7efc", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex c85fdcefd2..21776227c0 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -32,7 +32,7 @@ public class RouterConfig implements Serializable {\n \n     private final String requestLogFile;\n     private final double streetRoutingTimeoutSeconds;\n-    private final String bikeShareUpdaterEndpoint;\n+    private final URI bikeShareUpdaterEndpoint;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdaterConfig updaterConfig;\n", "next_change": {"commit": "a1229c03c922ac3e72e333460cc1fd80ef2b3b5f", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 21776227c0..8f6c117c8b 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -32,7 +32,7 @@ public class RouterConfig implements Serializable {\n \n     private final String requestLogFile;\n     private final double streetRoutingTimeoutSeconds;\n-    private final URI bikeShareUpdaterEndpoint;\n+    private final URI bikeRentalServiceDirectoryUrl;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdaterConfig updaterConfig;\n", "next_change": {"commit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 8f6c117c8b..326bf6d5ad 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -32,10 +33,9 @@ public class RouterConfig implements Serializable {\n \n     private final String requestLogFile;\n     private final double streetRoutingTimeoutSeconds;\n-    private final URI bikeRentalServiceDirectoryUrl;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n-    private final UpdaterConfig updaterConfig;\n+    private final UpdaterParameters updaterParameters;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n", "next_change": {"commit": "ee765172cc4cf2ab769759da47e10344c3734caa", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 326bf6d5ad..032bed31fe 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -29,9 +28,9 @@ public class RouterConfig implements Serializable {\n     /**\n      * The raw JsonNode three kept for reference and (de)serialization.\n      */\n-    public final JsonNode rawJson;\n-\n+    private final JsonNode rawJson;\n     private final String requestLogFile;\n+    private final boolean transmodelApiHideFeedId;\n     private final double streetRoutingTimeoutSeconds;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n", "next_change": {"commit": "8b23fd3cbe4cac6d88a14fa7621a35a501a3165d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 032bed31fe..3aa266c909 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -35,6 +35,7 @@ public class RouterConfig implements Serializable {\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdaterParameters updaterParameters;\n+    private final VectorTileConfig vectorTileLayers;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n", "next_change": {"commit": "803296083d4a9314d4518c9f204f280d760edd7b", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 3aa266c909..38477d4920 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -34,8 +34,7 @@ public class RouterConfig implements Serializable {\n     private final double streetRoutingTimeoutSeconds;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n-    private final UpdaterParameters updaterParameters;\n-    private final VectorTileConfig vectorTileLayers;\n+    private final UpdatersParameters updatersParameters;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n", "next_change": {"commit": "9cd28885f3514bc725578dc1e1c893dfec8bf0a4", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 38477d4920..ffa6fed7bf 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -35,6 +35,7 @@ public class RouterConfig implements Serializable {\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdatersParameters updatersParameters;\n+    private final VectorTileConfig vectorTileLayers;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n", "next_change": {"commit": "49b46f4305ee31d745f86ca8f37ee70682bb210d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex ffa6fed7bf..9d64da67a3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -40,6 +41,7 @@ public class RouterConfig implements Serializable {\n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n         this.rawJson = node;\n+        this.configVersion = adapter.asText(\"configVersion\", null);\n         this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n         this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n", "next_change": {"commit": "5c3be4aee62f15ed78edff99f7cce5691a5b6791", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 9d64da67a3..2c4722edc9 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -31,19 +34,20 @@ public class RouterConfig implements Serializable {\n     private final JsonNode rawJson;\n     private final String configVersion;\n     private final String requestLogFile;\n-    private final boolean transmodelApiHideFeedId;\n+    private final TransmodelAPIConfig transmodelApi;\n     private final double streetRoutingTimeoutSeconds;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdatersParameters updatersParameters;\n     private final VectorTileConfig vectorTileLayers;\n+    private final FlexConfig flexConfig;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n         this.rawJson = node;\n         this.configVersion = adapter.asText(\"configVersion\", null);\n         this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n+        this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 2c4722edc9..43ccdc4ced 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -1,134 +1,140 @@\n package org.opentripplanner.standalone.config;\n \n+import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.MissingNode;\n+import java.io.Serializable;\n import org.opentripplanner.ext.flex.FlexParameters;\n import org.opentripplanner.ext.vectortiles.VectorTilesResource;\n-import org.opentripplanner.routing.algorithm.raptor.transit.TransitTuningParameters;\n+import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitTuningParameters;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n import org.opentripplanner.standalone.config.sandbox.FlexConfig;\n+import org.opentripplanner.standalone.config.sandbox.TransmodelAPIConfig;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n import org.opentripplanner.updater.UpdatersParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.Serializable;\n-\n-import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n-\n /**\n  * This class is an object representation of the 'router-config.json'.\n  */\n public class RouterConfig implements Serializable {\n \n-    private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n-    private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n-\n-    public static final RouterConfig DEFAULT = new RouterConfig(\n-            MissingNode.getInstance(), \"DEFAULT\", false\n-    );\n-\n-    /**\n-     * The raw JsonNode three kept for reference and (de)serialization.\n-     */\n-    private final JsonNode rawJson;\n-    private final String configVersion;\n-    private final String requestLogFile;\n-    private final TransmodelAPIConfig transmodelApi;\n-    private final double streetRoutingTimeoutSeconds;\n-    private final RoutingRequest routingRequestDefaults;\n-    private final TransitRoutingConfig transitConfig;\n-    private final UpdatersParameters updatersParameters;\n-    private final VectorTileConfig vectorTileLayers;\n-    private final FlexConfig flexConfig;\n-\n-    public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n-        NodeAdapter adapter = new NodeAdapter(node, source);\n-        this.rawJson = node;\n-        this.configVersion = adapter.asText(\"configVersion\", null);\n-        this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n-        this.streetRoutingTimeoutSeconds = adapter.asDouble(\n-                \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n-        );\n-        this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n-        this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updatersParameters = new UpdatersConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n-        this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n-\n-        if(logUnusedParams) {\n-            adapter.logAllUnusedParameters(LOG);\n-        }\n-    }\n-\n-    /**\n-     * The config-version is a parameter witch each OTP deployment may set to be able to\n-     * query the OTP server and verify that it uses the correct version of the config. The\n-     * version must be injected into the config in the operation deployment pipeline. How this\n-     * is done is up to the deployment.\n-     * <p>\n-     * The config-version have no effect on OTP, and is provided as is on the API. There is\n-     * not syntax or format check on the version and it can be any string.\n-     * <p>\n-     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n-     * <p>\n-     * This parameter is optional, and the default is {@code null}.\n-     */\n-    public String getConfigVersion() {\n-        return configVersion;\n-    }\n-\n-    public String requestLogFile() {\n-        return requestLogFile;\n-    }\n-\n-    /**\n-     * The preferred way to limit the search is to limit the distance for\n-     * each street mode(WALK, BIKE, CAR). So the default timeout for a\n-     * street search is set quite high. This is used to abort the search\n-     * if the max distance is not reached within the timeout.\n-     */\n-    public double streetRoutingTimeoutSeconds() {\n-        return streetRoutingTimeoutSeconds;\n-    }\n-\n-    public TransmodelAPIConfig transmodelApi() { return transmodelApi; }\n-\n-    public RoutingRequest routingRequestDefaults() {\n-        return routingRequestDefaults;\n+  private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n+  private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n+\n+  public static final RouterConfig DEFAULT = new RouterConfig(\n+    MissingNode.getInstance(),\n+    \"DEFAULT\",\n+    false\n+  );\n+\n+  /**\n+   * The raw JsonNode three kept for reference and (de)serialization.\n+   */\n+  private final JsonNode rawJson;\n+  private final String configVersion;\n+  private final String requestLogFile;\n+  private final TransmodelAPIConfig transmodelApi;\n+  private final double streetRoutingTimeoutSeconds;\n+  private final RoutingRequest routingRequestDefaults;\n+  private final TransitRoutingConfig transitConfig;\n+  private final UpdatersParameters updatersParameters;\n+  private final VectorTileConfig vectorTileLayers;\n+  private final FlexConfig flexConfig;\n+\n+  public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n+    NodeAdapter adapter = new NodeAdapter(node, source);\n+    this.rawJson = node;\n+    this.configVersion = adapter.asText(\"configVersion\", null);\n+    this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+    this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n+    this.streetRoutingTimeoutSeconds =\n+      adapter.asDouble(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n+    this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n+    this.updatersParameters = new UpdatersConfig(adapter);\n+    this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+    this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n+\n+    if (logUnusedParams) {\n+      adapter.logAllUnusedParameters(LOG);\n     }\n-\n-    public RaptorTuningParameters raptorTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public TransitTuningParameters transitTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public UpdatersParameters updaterConfig() { return updatersParameters; }\n-\n-    public VectorTilesResource.LayersParameters vectorTileLayers() { return vectorTileLayers; }\n-\n-    public FlexParameters flexParameters(RoutingRequest request) { \n-        return flexConfig.toFlexParameters(request);\n-    }\n-\n-    /**\n-     * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n-     */\n-    public boolean isDefault() {\n-        return this.rawJson.isMissingNode();\n-    }\n-\n-    public String toJson() {\n-        return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n-    }\n-\n-    public String toString() {\n-        // Print ONLY the values set, not deafult values\n-        return rawJson.toPrettyString();\n-    }\n-\n+  }\n+\n+  /**\n+   * The config-version is a parameter which each OTP deployment may set to be able to\n+   * query the OTP server and verify that it uses the correct version of the config. The\n+   * version must be injected into the config in the operation deployment pipeline. How this\n+   * is done is up to the deployment.\n+   * <p>\n+   * The config-version have no effect on OTP, and is provided as is on the API. There is\n+   * not syntax or format check on the version and it can be any string.\n+   * <p>\n+   * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+   * <p>\n+   * This parameter is optional, and the default is {@code null}.\n+   */\n+  public String getConfigVersion() {\n+    return configVersion;\n+  }\n+\n+  public String requestLogFile() {\n+    return requestLogFile;\n+  }\n+\n+  /**\n+   * The preferred way to limit the search is to limit the distance for\n+   * each street mode(WALK, BIKE, CAR). So the default timeout for a\n+   * street search is set quite high. This is used to abort the search\n+   * if the max distance is not reached within the timeout.\n+   */\n+  public double streetRoutingTimeoutSeconds() {\n+    return streetRoutingTimeoutSeconds;\n+  }\n+\n+  public TransmodelAPIConfig transmodelApi() {\n+    return transmodelApi;\n+  }\n+\n+  public RoutingRequest routingRequestDefaults() {\n+    return routingRequestDefaults;\n+  }\n+\n+  public RaptorTuningParameters raptorTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public TransitTuningParameters transitTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public UpdatersParameters updaterConfig() {\n+    return updatersParameters;\n+  }\n+\n+  public VectorTilesResource.LayersParameters vectorTileLayers() {\n+    return vectorTileLayers;\n+  }\n+\n+  public FlexParameters flexParameters(RoutingRequest request) {\n+    return flexConfig.toFlexParameters(request);\n+  }\n+\n+  /**\n+   * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n+   */\n+  public boolean isDefault() {\n+    return this.rawJson.isMissingNode();\n+  }\n+\n+  public String toJson() {\n+    return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n+  }\n+\n+  public String toString() {\n+    // Print ONLY the values set, not deafult values\n+    return rawJson.toPrettyString();\n+  }\n }\n", "next_change": {"commit": "e383f2b7c6773da4bb49dec187f21ccd38867219", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 43ccdc4ced..b44f87ff2d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -137,4 +137,32 @@ public class RouterConfig implements Serializable {\n     // Print ONLY the values set, not deafult values\n     return rawJson.toPrettyString();\n   }\n+\n+  /**\n+   * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n+   * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   * @since 2.2 - The support for the old format can be removed in version > 2.2.\n+   */\n+  static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n+    try {\n+      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    } catch (DateTimeParseException ex) {\n+      LOG.warn(\n+        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n+        \"Duration. Update you config, the support for the old format will be removed in the \" +\n+        \"next version after v2.2. Details: \" +\n+        ex.getMessage()\n+      );\n+      // This is safe, because the asDouble, will fall back to the default value on parse error\n+      return Duration.ofMillis(\n+        (long) (\n+          1000L *\n+          adapter.asDouble(\n+            \"streetRoutingTimeout\",\n+            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n+          )\n+        )\n+      );\n+    }\n+  }\n }\n", "next_change": {"commit": "1257e89c4bb8c235b0168ec5704ab411844cf838", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b44f87ff2d..1a23b9636a 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -144,25 +145,10 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    try {\n-      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n-    } catch (DateTimeParseException ex) {\n-      LOG.warn(\n-        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n-        \"Duration. Update you config, the support for the old format will be removed in the \" +\n-        \"next version after v2.2. Details: \" +\n-        ex.getMessage()\n-      );\n-      // This is safe, because the asDouble, will fall back to the default value on parse error\n-      return Duration.ofMillis(\n-        (long) (\n-          1000L *\n-          adapter.asDouble(\n-            \"streetRoutingTimeout\",\n-            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n-          )\n-        )\n-      );\n-    }\n+    return adapter.asDuration2(\n+      \"streetRoutingTimeout\",\n+      DEFAULT_STREET_ROUTING_TIMEOUT,\n+      ChronoUnit.SECONDS\n+    );\n   }\n }\n", "next_change": {"commit": "70734a29363ab8f2b62f9c3d46b5a393930b3f05", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 1a23b9636a..b796502f23 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -145,10 +156,9 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    return adapter.asDuration2(\n-      \"streetRoutingTimeout\",\n-      DEFAULT_STREET_ROUTING_TIMEOUT,\n-      ChronoUnit.SECONDS\n-    );\n+    return adapter\n+      .of(\"streetRoutingTimeout\")\n+      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "31423839f8cd698e253c376011b444a2c0947481", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b796502f23..a229bfbe12 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -158,7 +178,8 @@ public class RouterConfig implements Serializable {\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n-      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .since(NA)\n+      .summary(\"TODO\")\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "8c7b12353ac171d27fea3c1982bd0bd052af5aa1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex a229bfbe12..566aa8bdd7 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -173,13 +186,16 @@ public class RouterConfig implements Serializable {\n   /**\n    * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n    * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   *\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n       .since(NA)\n-      .summary(\"TODO\")\n+      .summary(\n+        \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n+      )\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "aa0be03f918d3c5e169be4f9444972b1da00e27c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 566aa8bdd7..52486ebdb3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -196,6 +195,20 @@ public class RouterConfig implements Serializable {\n       .summary(\n         \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n       )\n-      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n+      .description(\n+        \"\"\"\n+In OTP1 path searches sometimes toke a long time to complete. With the new Raptor algorithm this not\n+the case anymore. The street part of the routing may still take a long time if searching very long\n+distances. You can set the street routing timeout to avoid tying up server resources on pointless\n+searches and ensure that your users receive a timely response. You can also limit the max distance\n+to search for WALK, BIKE and CAR. When a search times out, a WARN level log entry is made with\n+information that can help identify problematic searches and improve our routing methods. There are\n+no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n+search-window.\n+\n+The search abort after this duration and any paths found are returned to the client.\n+\"\"\"\n+      )\n+      .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n   }\n }\n", "next_change": {"commit": "f9fec1b69eae33ab17c5e2e40cdbfce9bc7802cd", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 52486ebdb3..5eeea61849 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -206,7 +226,7 @@ information that can help identify problematic searches and improve our routing\n no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n search-window.\n \n-The search abort after this duration and any paths found are returned to the client.\n+The search aborts after this duration and any paths found are returned to the client.\n \"\"\"\n       )\n       .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 326bf6d5ad..032bed31fe 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -41,15 +40,13 @@ public class RouterConfig implements Serializable {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n         this.rawJson = node;\n         this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(\n-            adapter.path(\"updaters\"),\n-            adapter.asUri(\"bikeRentalServiceDirectoryUrl\", null)\n-        );\n+        this.updaterParameters = new UpdaterConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "8b23fd3cbe4cac6d88a14fa7621a35a501a3165d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 032bed31fe..3aa266c909 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,6 +48,7 @@ public class RouterConfig implements Serializable {\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updaterParameters = new UpdaterConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "803296083d4a9314d4518c9f204f280d760edd7b", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 3aa266c909..38477d4920 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,8 +46,7 @@ public class RouterConfig implements Serializable {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+        this.updatersParameters = new UpdatersConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "9cd28885f3514bc725578dc1e1c893dfec8bf0a4", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 38477d4920..ffa6fed7bf 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,6 +48,7 @@ public class RouterConfig implements Serializable {\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updatersParameters = new UpdatersConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "49b46f4305ee31d745f86ca8f37ee70682bb210d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex ffa6fed7bf..9d64da67a3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -55,6 +57,23 @@ public class RouterConfig implements Serializable {\n         }\n     }\n \n+    /**\n+     * The config-version is a parameter witch each OTP deployment may set to be able to\n+     * query the OTP server and verify that it uses the correct version of the config. The\n+     * version must be injected into the config in the operation deployment pipeline. How this\n+     * is done is up to the deployment.\n+     * <p>\n+     * The config-version have no effect on OTP, and is provided as is on the API. There is\n+     * not syntax or format check on the version and it can be any string.\n+     * <p>\n+     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+     * <p>\n+     * This parameter is optional, and the default is {@code null}.\n+     */\n+    public String getConfigVersion() {\n+        return configVersion;\n+    }\n+\n     public String requestLogFile() {\n         return requestLogFile;\n     }\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 9d64da67a3..43ccdc4ced 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -1,125 +1,140 @@\n package org.opentripplanner.standalone.config;\n \n+import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.MissingNode;\n-import org.opentripplanner.routing.algorithm.raptor.transit.TransitTuningParameters;\n+import java.io.Serializable;\n+import org.opentripplanner.ext.flex.FlexParameters;\n+import org.opentripplanner.ext.vectortiles.VectorTilesResource;\n+import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitTuningParameters;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n+import org.opentripplanner.standalone.config.sandbox.FlexConfig;\n+import org.opentripplanner.standalone.config.sandbox.TransmodelAPIConfig;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n import org.opentripplanner.updater.UpdatersParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.Serializable;\n-\n-import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n-\n /**\n  * This class is an object representation of the 'router-config.json'.\n  */\n public class RouterConfig implements Serializable {\n \n-    private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n-    private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n-\n-    public static final RouterConfig DEFAULT = new RouterConfig(\n-            MissingNode.getInstance(), \"DEFAULT\", false\n-    );\n-\n-    /**\n-     * The raw JsonNode three kept for reference and (de)serialization.\n-     */\n-    private final JsonNode rawJson;\n-    private final String configVersion;\n-    private final String requestLogFile;\n-    private final boolean transmodelApiHideFeedId;\n-    private final double streetRoutingTimeoutSeconds;\n-    private final RoutingRequest routingRequestDefaults;\n-    private final TransitRoutingConfig transitConfig;\n-    private final UpdatersParameters updatersParameters;\n-    private final VectorTileConfig vectorTileLayers;\n-\n-    public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n-        NodeAdapter adapter = new NodeAdapter(node, source);\n-        this.rawJson = node;\n-        this.configVersion = adapter.asText(\"configVersion\", null);\n-        this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n-        this.streetRoutingTimeoutSeconds = adapter.asDouble(\n-                \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n-        );\n-        this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n-        this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updatersParameters = new UpdatersConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n-\n-        if(logUnusedParams) {\n-            adapter.logAllUnusedParameters(LOG);\n-        }\n+  private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n+  private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n+\n+  public static final RouterConfig DEFAULT = new RouterConfig(\n+    MissingNode.getInstance(),\n+    \"DEFAULT\",\n+    false\n+  );\n+\n+  /**\n+   * The raw JsonNode three kept for reference and (de)serialization.\n+   */\n+  private final JsonNode rawJson;\n+  private final String configVersion;\n+  private final String requestLogFile;\n+  private final TransmodelAPIConfig transmodelApi;\n+  private final double streetRoutingTimeoutSeconds;\n+  private final RoutingRequest routingRequestDefaults;\n+  private final TransitRoutingConfig transitConfig;\n+  private final UpdatersParameters updatersParameters;\n+  private final VectorTileConfig vectorTileLayers;\n+  private final FlexConfig flexConfig;\n+\n+  public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n+    NodeAdapter adapter = new NodeAdapter(node, source);\n+    this.rawJson = node;\n+    this.configVersion = adapter.asText(\"configVersion\", null);\n+    this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+    this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n+    this.streetRoutingTimeoutSeconds =\n+      adapter.asDouble(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n+    this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n+    this.updatersParameters = new UpdatersConfig(adapter);\n+    this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+    this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n+\n+    if (logUnusedParams) {\n+      adapter.logAllUnusedParameters(LOG);\n     }\n-\n-    /**\n-     * The config-version is a parameter witch each OTP deployment may set to be able to\n-     * query the OTP server and verify that it uses the correct version of the config. The\n-     * version must be injected into the config in the operation deployment pipeline. How this\n-     * is done is up to the deployment.\n-     * <p>\n-     * The config-version have no effect on OTP, and is provided as is on the API. There is\n-     * not syntax or format check on the version and it can be any string.\n-     * <p>\n-     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n-     * <p>\n-     * This parameter is optional, and the default is {@code null}.\n-     */\n-    public String getConfigVersion() {\n-        return configVersion;\n-    }\n-\n-    public String requestLogFile() {\n-        return requestLogFile;\n-    }\n-\n-    /**\n-     * The preferred way to limit the search is to limit the distance for\n-     * each street mode(WALK, BIKE, CAR). So the default timeout for a\n-     * street search is set quite high. This is used to abort the search\n-     * if the max distance is not reached within the timeout.\n-     */\n-    public double streetRoutingTimeoutSeconds() {\n-        return streetRoutingTimeoutSeconds;\n-    }\n-\n-    public boolean transmodelApiHideFeedId() { return transmodelApiHideFeedId; }\n-\n-    public RoutingRequest routingRequestDefaults() {\n-        return routingRequestDefaults;\n-    }\n-\n-    public RaptorTuningParameters raptorTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public TransitTuningParameters transitTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public UpdatersParameters updaterConfig() { return updatersParameters; }\n-\n-    public VectorTileConfig vectorTileLayers() { return vectorTileLayers; }\n-\n-    /**\n-     * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n-     */\n-    public boolean isDefault() {\n-        return this.rawJson.isMissingNode();\n-    }\n-\n-    public String toJson() {\n-        return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n-    }\n-\n-    public String toString() {\n-        // Print ONLY the values set, not deafult values\n-        return rawJson.toPrettyString();\n-    }\n-\n+  }\n+\n+  /**\n+   * The config-version is a parameter which each OTP deployment may set to be able to\n+   * query the OTP server and verify that it uses the correct version of the config. The\n+   * version must be injected into the config in the operation deployment pipeline. How this\n+   * is done is up to the deployment.\n+   * <p>\n+   * The config-version have no effect on OTP, and is provided as is on the API. There is\n+   * not syntax or format check on the version and it can be any string.\n+   * <p>\n+   * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+   * <p>\n+   * This parameter is optional, and the default is {@code null}.\n+   */\n+  public String getConfigVersion() {\n+    return configVersion;\n+  }\n+\n+  public String requestLogFile() {\n+    return requestLogFile;\n+  }\n+\n+  /**\n+   * The preferred way to limit the search is to limit the distance for\n+   * each street mode(WALK, BIKE, CAR). So the default timeout for a\n+   * street search is set quite high. This is used to abort the search\n+   * if the max distance is not reached within the timeout.\n+   */\n+  public double streetRoutingTimeoutSeconds() {\n+    return streetRoutingTimeoutSeconds;\n+  }\n+\n+  public TransmodelAPIConfig transmodelApi() {\n+    return transmodelApi;\n+  }\n+\n+  public RoutingRequest routingRequestDefaults() {\n+    return routingRequestDefaults;\n+  }\n+\n+  public RaptorTuningParameters raptorTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public TransitTuningParameters transitTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public UpdatersParameters updaterConfig() {\n+    return updatersParameters;\n+  }\n+\n+  public VectorTilesResource.LayersParameters vectorTileLayers() {\n+    return vectorTileLayers;\n+  }\n+\n+  public FlexParameters flexParameters(RoutingRequest request) {\n+    return flexConfig.toFlexParameters(request);\n+  }\n+\n+  /**\n+   * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n+   */\n+  public boolean isDefault() {\n+    return this.rawJson.isMissingNode();\n+  }\n+\n+  public String toJson() {\n+    return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n+  }\n+\n+  public String toString() {\n+    // Print ONLY the values set, not deafult values\n+    return rawJson.toPrettyString();\n+  }\n }\n", "next_change": {"commit": "e383f2b7c6773da4bb49dec187f21ccd38867219", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 43ccdc4ced..b44f87ff2d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -137,4 +137,32 @@ public class RouterConfig implements Serializable {\n     // Print ONLY the values set, not deafult values\n     return rawJson.toPrettyString();\n   }\n+\n+  /**\n+   * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n+   * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   * @since 2.2 - The support for the old format can be removed in version > 2.2.\n+   */\n+  static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n+    try {\n+      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    } catch (DateTimeParseException ex) {\n+      LOG.warn(\n+        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n+        \"Duration. Update you config, the support for the old format will be removed in the \" +\n+        \"next version after v2.2. Details: \" +\n+        ex.getMessage()\n+      );\n+      // This is safe, because the asDouble, will fall back to the default value on parse error\n+      return Duration.ofMillis(\n+        (long) (\n+          1000L *\n+          adapter.asDouble(\n+            \"streetRoutingTimeout\",\n+            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n+          )\n+        )\n+      );\n+    }\n+  }\n }\n", "next_change": {"commit": "1257e89c4bb8c235b0168ec5704ab411844cf838", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b44f87ff2d..1a23b9636a 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -144,25 +145,10 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    try {\n-      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n-    } catch (DateTimeParseException ex) {\n-      LOG.warn(\n-        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n-        \"Duration. Update you config, the support for the old format will be removed in the \" +\n-        \"next version after v2.2. Details: \" +\n-        ex.getMessage()\n-      );\n-      // This is safe, because the asDouble, will fall back to the default value on parse error\n-      return Duration.ofMillis(\n-        (long) (\n-          1000L *\n-          adapter.asDouble(\n-            \"streetRoutingTimeout\",\n-            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n-          )\n-        )\n-      );\n-    }\n+    return adapter.asDuration2(\n+      \"streetRoutingTimeout\",\n+      DEFAULT_STREET_ROUTING_TIMEOUT,\n+      ChronoUnit.SECONDS\n+    );\n   }\n }\n", "next_change": {"commit": "70734a29363ab8f2b62f9c3d46b5a393930b3f05", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 1a23b9636a..b796502f23 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -145,10 +156,9 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    return adapter.asDuration2(\n-      \"streetRoutingTimeout\",\n-      DEFAULT_STREET_ROUTING_TIMEOUT,\n-      ChronoUnit.SECONDS\n-    );\n+    return adapter\n+      .of(\"streetRoutingTimeout\")\n+      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "31423839f8cd698e253c376011b444a2c0947481", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b796502f23..a229bfbe12 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -158,7 +178,8 @@ public class RouterConfig implements Serializable {\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n-      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .since(NA)\n+      .summary(\"TODO\")\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "8c7b12353ac171d27fea3c1982bd0bd052af5aa1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex a229bfbe12..566aa8bdd7 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -173,13 +186,16 @@ public class RouterConfig implements Serializable {\n   /**\n    * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n    * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   *\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n       .since(NA)\n-      .summary(\"TODO\")\n+      .summary(\n+        \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n+      )\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "aa0be03f918d3c5e169be4f9444972b1da00e27c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 566aa8bdd7..52486ebdb3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -196,6 +195,20 @@ public class RouterConfig implements Serializable {\n       .summary(\n         \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n       )\n-      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n+      .description(\n+        \"\"\"\n+In OTP1 path searches sometimes toke a long time to complete. With the new Raptor algorithm this not\n+the case anymore. The street part of the routing may still take a long time if searching very long\n+distances. You can set the street routing timeout to avoid tying up server resources on pointless\n+searches and ensure that your users receive a timely response. You can also limit the max distance\n+to search for WALK, BIKE and CAR. When a search times out, a WARN level log entry is made with\n+information that can help identify problematic searches and improve our routing methods. There are\n+no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n+search-window.\n+\n+The search abort after this duration and any paths found are returned to the client.\n+\"\"\"\n+      )\n+      .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n   }\n }\n", "next_change": {"commit": "f9fec1b69eae33ab17c5e2e40cdbfce9bc7802cd", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 52486ebdb3..5eeea61849 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -206,7 +226,7 @@ information that can help identify problematic searches and improve our routing\n no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n search-window.\n \n-The search abort after this duration and any paths found are returned to the client.\n+The search aborts after this duration and any paths found are returned to the client.\n \"\"\"\n       )\n       .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r438817172", "body": "Can the `gbfsBikeRentalServiceDirectory ` part of the `UpdaterConfig`?", "bodyText": "Can the gbfsBikeRentalServiceDirectory  part of the UpdaterConfig?", "bodyHTML": "<p dir=\"auto\">Can the <code>gbfsBikeRentalServiceDirectory </code> part of the <code>UpdaterConfig</code>?</p>", "author": "t2gran", "createdAt": "2020-06-11T14:12:17Z", "path": "src/main/java/org/opentripplanner/standalone/server/Router.java", "diffHunk": "@@ -93,7 +93,11 @@ public void startup() {\n         }\n \n         /* Create Graph updater modules from JSON config. */\n-        GraphUpdaterConfigurator.setupGraph(this.graph, routerConfig.updaterConfig());\n+        GraphUpdaterConfigurator.setupGraph(\n+            this.graph,\n+            routerConfig.updaterConfig(),\n+            routerConfig.getBikeShareUpdaterEndpoint()", "originalCommit": "50f8abc2c4466c08690da09302e3f02b9e4d1819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5ODAzMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r439298030", "bodyText": "It could, but the reason I decided to separate them was to keep router-config json loading completely separate from the reading of this endpoint.", "author": "gmellemstrand", "createdAt": "2020-06-12T09:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1NzEzMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r441657132", "bodyText": "The routerConfig.getBikeShareUpdaterEndpoint() is just reading the config, not reading the endpoint. There is a mismatch here witch make people ask? Why do we need to pass in two config objects, when the UpdaterConfig exist as the \"All the GraphUpdaterConfigurator need to know\" role?", "author": "t2gran", "createdAt": "2020-06-17T16:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE0NzY0OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r442147649", "bodyText": "It depends on whether we want to UpdaterConfig to have the role of reading all config from all sources, or the role of reading config from json specifically, as is stated in the javadoc.", "author": "gmellemstrand", "createdAt": "2020-06-18T11:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMjM5OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r442212398", "bodyText": "The bikeShareUpdaterEndpoint parameter is in the JSON file.", "author": "t2gran", "createdAt": "2020-06-18T13:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMjU1Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r442222557", "bodyText": "I see what you mean now. That method is reading the config, which is an endpoint, just for the configuration. I see that I already rename it to getBikeRentalServiceDirectoryUrl.", "author": "gmellemstrand", "createdAt": "2020-06-18T13:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a1229c03c922ac3e72e333460cc1fd80ef2b3b5f", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\nindex 212c44941f..c8de63570d 100644\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ b/src/main/java/org/opentripplanner/standalone/server/Router.java\n", "chunk": "@@ -96,7 +96,7 @@ public class Router {\n         GraphUpdaterConfigurator.setupGraph(\n             this.graph,\n             routerConfig.updaterConfig(),\n-            routerConfig.getBikeShareUpdaterEndpoint()\n+            routerConfig.getBikeRentalServiceDirectoryUrl()\n         );\n \n         /* Compute ellipsoidToGeoidDifference for this Graph */\n", "next_change": {"commit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\nindex c8de63570d..0bd1c89c79 100644\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ b/src/main/java/org/opentripplanner/standalone/server/Router.java\n", "chunk": "@@ -95,8 +95,7 @@ public class Router {\n         /* Create Graph updater modules from JSON config. */\n         GraphUpdaterConfigurator.setupGraph(\n             this.graph,\n-            routerConfig.updaterConfig(),\n-            routerConfig.getBikeRentalServiceDirectoryUrl()\n+            routerConfig.updaterConfig()\n         );\n \n         /* Compute ellipsoidToGeoidDifference for this Graph */\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\nindex 0bd1c89c79..f9cfcf377a 100644\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ b/src/main/java/org/opentripplanner/standalone/server/Router.java\n", "chunk": "@@ -26,118 +32,148 @@ import org.slf4j.LoggerFactory;\n  */\n public class Router {\n \n-    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Router.class);\n-    public final Graph graph;\n-    public final RouterConfig routerConfig;\n-    public final RaptorConfig<TripSchedule> raptorConfig;\n+  private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Router.class);\n+  private final RoutingRequest defaultRoutingRequest;\n+  public final Graph graph;\n+  public final RouterConfig routerConfig;\n+  public final MeterRegistry meterRegistry;\n+  public final RaptorConfig<TripSchedule> raptorConfig;\n \n-    /**\n-     *  Separate logger for incoming requests. This should be handled with a Logback logger\n-     *  rather than something simple like a PrintStream because requests come in multi-threaded.\n-     */\n-    public ch.qos.logback.classic.Logger requestLogger = null;\n+  /**\n+   *  Separate logger for incoming requests. This should be handled with a Logback logger\n+   *  rather than something simple like a PrintStream because requests come in multi-threaded.\n+   */\n+  public ch.qos.logback.classic.Logger requestLogger = null;\n \n-    /* TODO The fields for \"components\" are slowly disappearing... maybe at some point a router\n+  /* TODO The fields for \"components\" are slowly disappearing... maybe at some point a router\n         will be nothing but configuration values tied to a Graph. */\n \n-    /** Inspector/debug services */\n-    public TileRendererManager tileRendererManager;\n-\n-    /**\n-     * A RoutingRequest containing default parameters that will be cloned when handling each\n-     * request.\n-     */\n-    public RoutingRequest defaultRoutingRequest;\n-\n-    /** A graphical window that is used for visualizing search progress (debugging). */\n-    public GraphVisualizer graphVisualizer = null;\n-\n-    public Router(Graph graph, RouterConfig routerConfig) {\n-        this.graph = graph;\n-        this.routerConfig = routerConfig;\n-        this.raptorConfig = new RaptorConfig<>(routerConfig.raptorTuningParameters());\n+  /** Inspector/debug services */\n+  public TileRendererManager tileRendererManager;\n+\n+  /** A graphical window that is used for visualizing search progress (debugging). */\n+  public GraphVisualizer graphVisualizer = null;\n+\n+  public Router(Graph graph, RouterConfig routerConfig, MeterRegistry meterRegistry) {\n+    this.graph = graph;\n+    this.routerConfig = routerConfig;\n+    this.defaultRoutingRequest = routerConfig.routingRequestDefaults();\n+    this.meterRegistry = meterRegistry;\n+    this.raptorConfig = new RaptorConfig<>(routerConfig.raptorTuningParameters(), meterRegistry);\n+  }\n+\n+  /*\n+   * Below is functionality moved into Router from the \"router lifecycle manager\" interface and implementation.\n+   * Current responsibilities are: 1) Binding proper services (depending on the configuration from command-line or\n+   * JSON config files) and 2) starting / stopping real-time updaters (delegated to the GraphUpdaterConfigurator class).\n+   */\n+\n+  /**\n+   * Start up a new router once it has been created.\n+   */\n+  public void startup() {\n+    this.tileRendererManager = new TileRendererManager(this.graph);\n+\n+    if (routerConfig.requestLogFile() != null) {\n+      this.requestLogger = createLogger(routerConfig.requestLogFile());\n+      LOG.info(\"Logging incoming requests at '{}'\", routerConfig.requestLogFile());\n+    } else {\n+      LOG.info(\"Incoming requests will not be logged.\");\n     }\n \n-    /*\n-     * Below is functionality moved into Router from the \"router lifecycle manager\" interface and implementation.\n-     * Current responsibilities are: 1) Binding proper services (depending on the configuration from command-line or\n-     * JSON config files) and 2) starting / stopping real-time updaters (delegated to the GraphUpdaterConfigurator class).\n-     */\n-\n-    /**\n-     * Start up a new router once it has been created.\n-     */\n-    public void startup() {\n-        this.tileRendererManager = new TileRendererManager(this.graph);\n-        this.defaultRoutingRequest = routerConfig.routingRequestDefaults();\n-\n-        if (routerConfig.requestLogFile() != null) {\n-            this.requestLogger = createLogger(routerConfig.requestLogFile());\n-            LOG.info(\"Logging incoming requests at '{}'\", routerConfig.requestLogFile());\n-        } else {\n-            LOG.info(\"Incoming requests will not be logged.\");\n-        }\n-\n-        /* Create transit layer for Raptor routing. Here we map the scheduled timetables. */\n-        /* Realtime updates can be mapped similarly by a recurring operation in a GraphUpdater below. */\n-        LOG.info(\"Creating transit layer for Raptor routing.\");\n-        if (graph.hasTransit && graph.index != null) {\n-            graph.setTransitLayer(TransitLayerMapper.map(routerConfig.transitTuningParameters(), graph));\n-            graph.setRealtimeTransitLayer(new TransitLayer(graph.getTransitLayer()));\n-            graph.transitLayerUpdater = new TransitLayerUpdater(\n-                graph,\n-                graph.index.getServiceCodesRunningForDate()\n-            );\n-        } else {\n-            LOG.warn(\"Cannot create Raptor data, that requires the graph to have transit data and be indexed.\");\n-        }\n-\n-        /* Create Graph updater modules from JSON config. */\n-        GraphUpdaterConfigurator.setupGraph(\n-            this.graph,\n-            routerConfig.updaterConfig()\n-        );\n-\n-        /* Compute ellipsoidToGeoidDifference for this Graph */\n-        try {\n-            WorldEnvelope env = graph.getEnvelope();\n-            double lat = (env.getLowerLeftLatitude() + env.getUpperRightLatitude()) / 2;\n-            double lon = (env.getLowerLeftLongitude() + env.getUpperRightLongitude()) / 2;\n-            graph.ellipsoidToGeoidDifference = ElevationUtils.computeEllipsoidToGeoidDifference(lat, lon);\n-            LOG.info(\"Computed ellipsoid/geoid offset at (\" + lat + \", \" + lon + \") as \" + graph.ellipsoidToGeoidDifference);\n-        } catch (Exception e) {\n-            LOG.error(\"Error computing ellipsoid/geoid difference\");\n-        }\n+    /* Create transit layer for Raptor routing. Here we map the scheduled timetables. */\n+    /* Realtime updates can be mapped similarly by a recurring operation in a GraphUpdater below. */\n+    LOG.info(\"Creating transit layer for Raptor routing.\");\n+    if (graph.hasTransit && graph.index != null) {\n+      graph.setTransitLayer(TransitLayerMapper.map(routerConfig.transitTuningParameters(), graph));\n+      graph.setRealtimeTransitLayer(new TransitLayer(graph.getTransitLayer()));\n+      graph.transitLayerUpdater =\n+        new TransitLayerUpdater(graph, graph.index.getServiceCodesRunningForDate());\n+    } else {\n+      LOG.warn(\n+        \"Cannot create Raptor data, that requires the graph to have transit data and be indexed.\"\n+      );\n     }\n \n-    /** Shut down this router when evicted or (auto-)reloaded. Stop any real-time updater threads. */\n-    public void shutdown() {\n-        GraphUpdaterConfigurator.shutdownGraph(this.graph);\n+    /* Create Graph updater modules from JSON config. */\n+    GraphUpdaterConfigurator.setupGraph(this.graph, routerConfig.updaterConfig());\n+\n+    /* Compute ellipsoidToGeoidDifference for this Graph */\n+    try {\n+      WorldEnvelope env = graph.getEnvelope();\n+      double lat = (env.getLowerLeftLatitude() + env.getUpperRightLatitude()) / 2;\n+      double lon = (env.getLowerLeftLongitude() + env.getUpperRightLongitude()) / 2;\n+      graph.ellipsoidToGeoidDifference = ElevationUtils.computeEllipsoidToGeoidDifference(lat, lon);\n+      LOG.info(\n+        \"Computed ellipsoid/geoid offset at (\" +\n+        lat +\n+        \", \" +\n+        lon +\n+        \") as \" +\n+        graph.ellipsoidToGeoidDifference\n+      );\n+    } catch (Exception e) {\n+      LOG.error(\"Error computing ellipsoid/geoid difference\");\n     }\n \n-    /**\n-     * Programmatically (i.e. not in XML) create a Logback logger for requests happening on this router.\n-     * http://stackoverflow.com/a/17215011/778449\n-     */\n-    private static ch.qos.logback.classic.Logger createLogger(String file) {\n-        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n-        PatternLayoutEncoder ple = new PatternLayoutEncoder();\n-        ple.setPattern(\"%d{yyyy-MM-dd'T'HH:mm:ss.SSS} %msg%n\");\n-        ple.setContext(lc);\n-        ple.start();\n-        FileAppender<ILoggingEvent> fileAppender = new FileAppender<>();\n-        fileAppender.setFile(file);\n-        fileAppender.setEncoder(ple);\n-        fileAppender.setContext(lc);\n-        fileAppender.start();\n-        ch.qos.logback.classic.Logger logger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(\"REQ_LOG\");\n-        logger.addAppender(fileAppender);\n-        logger.setLevel(Level.INFO);\n-        logger.setAdditive(false);\n-        return logger;\n+    if (OTPFeature.SandboxAPITransmodelApi.isOn()) {\n+      TransmodelAPI.setUp(routerConfig.transmodelApi(), graph, defaultRoutingRequest);\n     }\n \n-    public double streetRoutingTimeoutSeconds() {\n-        return  routerConfig.streetRoutingTimeoutSeconds();\n+    if (OTPFeature.SandboxAPIGeocoder.isOn()) {\n+      LOG.info(\"Creating debug client geocoder lucene index\");\n+      LuceneIndex.forServer(this);\n     }\n+  }\n+\n+  /**\n+   * A RoutingRequest containing default parameters that will be cloned when handling each\n+   * request.\n+   */\n+  public RoutingRequest copyDefaultRoutingRequest() {\n+    var copy = this.defaultRoutingRequest.clone();\n+    copy.setDateTime(Instant.now());\n+    return copy;\n+  }\n+\n+  /**\n+   * Return the default routing request locale(without cloning the request).\n+   */\n+  public Locale getDefaultLocale() {\n+    return this.defaultRoutingRequest.locale;\n+  }\n+\n+  /** Shut down this router when evicted or (auto-)reloaded. Stop any real-time updater threads. */\n+  public void shutdown() {\n+    GraphUpdaterConfigurator.shutdownGraph(this.graph);\n+    raptorConfig.shutdown();\n+  }\n+\n+  /**\n+   * Programmatically (i.e. not in XML) create a Logback logger for requests happening on this router.\n+   * http://stackoverflow.com/a/17215011/778449\n+   */\n+  private static ch.qos.logback.classic.Logger createLogger(String file) {\n+    LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+    PatternLayoutEncoder ple = new PatternLayoutEncoder();\n+    ple.setPattern(\"%d{yyyy-MM-dd'T'HH:mm:ss.SSS} %msg%n\");\n+    ple.setContext(lc);\n+    ple.start();\n+    FileAppender<ILoggingEvent> fileAppender = new FileAppender<>();\n+    fileAppender.setFile(file);\n+    fileAppender.setEncoder(ple);\n+    fileAppender.setContext(lc);\n+    fileAppender.start();\n+    ch.qos.logback.classic.Logger logger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(\n+      \"REQ_LOG\"\n+    );\n+    logger.addAppender(fileAppender);\n+    logger.setLevel(Level.INFO);\n+    logger.setAdditive(false);\n+    return logger;\n+  }\n+\n+  public double streetRoutingTimeoutSeconds() {\n+    return routerConfig.streetRoutingTimeoutSeconds();\n+  }\n }\n", "next_change": {"commit": "6468e42f1e348eba2568f0abc0799965b68723b7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\nindex f9cfcf377a..aeabf1379f 100644\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ b/src/main/java/org/opentripplanner/standalone/server/Router.java\n", "chunk": "@@ -172,8 +175,4 @@ public class Router {\n     logger.setAdditive(false);\n     return logger;\n   }\n-\n-  public double streetRoutingTimeoutSeconds() {\n-    return routerConfig.streetRoutingTimeoutSeconds();\n-  }\n }\n", "next_change": {"commit": "4afc2cd32a9dc26d0b727f9248fb1a018ca6c18d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\nindex aeabf1379f..7181823377 100644\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ b/src/main/java/org/opentripplanner/standalone/server/Router.java\n", "chunk": "@@ -1,178 +1,7 @@\n package org.opentripplanner.standalone.server;\n \n-import ch.qos.logback.classic.Level;\n-import ch.qos.logback.classic.LoggerContext;\n-import ch.qos.logback.classic.encoder.PatternLayoutEncoder;\n-import ch.qos.logback.classic.spi.ILoggingEvent;\n-import ch.qos.logback.core.FileAppender;\n-import io.micrometer.core.instrument.MeterRegistry;\n-import java.time.Instant;\n-import java.util.Locale;\n-import org.opentripplanner.ext.geocoder.LuceneIndex;\n-import org.opentripplanner.ext.transmodelapi.TransmodelAPI;\n-import org.opentripplanner.inspector.TileRendererManager;\n-import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitLayer;\n-import org.opentripplanner.routing.algorithm.raptoradapter.transit.TripSchedule;\n-import org.opentripplanner.routing.algorithm.raptoradapter.transit.mappers.TransitLayerMapper;\n-import org.opentripplanner.routing.algorithm.raptoradapter.transit.mappers.TransitLayerUpdater;\n-import org.opentripplanner.routing.api.request.RoutingRequest;\n-import org.opentripplanner.routing.graph.Graph;\n-import org.opentripplanner.standalone.config.RouterConfig;\n-import org.opentripplanner.transit.raptor.rangeraptor.configure.RaptorConfig;\n-import org.opentripplanner.updater.GraphUpdaterConfigurator;\n-import org.opentripplanner.util.ElevationUtils;\n-import org.opentripplanner.util.OTPFeature;\n-import org.opentripplanner.util.WorldEnvelope;\n-import org.opentripplanner.visualizer.GraphVisualizer;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Represents the configuration of a single router (a single graph for a specific geographic area)\n  * in an OTP server.\n  */\n-public class Router {\n-\n-  private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Router.class);\n-  private final RoutingRequest defaultRoutingRequest;\n-  public final Graph graph;\n-  public final RouterConfig routerConfig;\n-  public final MeterRegistry meterRegistry;\n-  public final RaptorConfig<TripSchedule> raptorConfig;\n-\n-  /**\n-   * Separate logger for incoming requests. This should be handled with a Logback logger rather than\n-   * something simple like a PrintStream because requests come in multi-threaded.\n-   */\n-  public ch.qos.logback.classic.Logger requestLogger = null;\n-\n-  /* TODO The fields for \"components\" are slowly disappearing... maybe at some point a router\n-        will be nothing but configuration values tied to a Graph. */\n-\n-  /** Inspector/debug services */\n-  public TileRendererManager tileRendererManager;\n-\n-  /** A graphical window that is used for visualizing search progress (debugging). */\n-  public GraphVisualizer graphVisualizer = null;\n-\n-  public Router(Graph graph, RouterConfig routerConfig, MeterRegistry meterRegistry) {\n-    this.graph = graph;\n-    this.routerConfig = routerConfig;\n-    this.defaultRoutingRequest = routerConfig.routingRequestDefaults();\n-    this.meterRegistry = meterRegistry;\n-    this.raptorConfig = new RaptorConfig<>(routerConfig.raptorTuningParameters(), meterRegistry);\n-  }\n-\n-  /*\n-   * Below is functionality moved into Router from the \"router lifecycle manager\" interface and implementation.\n-   * Current responsibilities are: 1) Binding proper services (depending on the configuration from command-line or\n-   * JSON config files) and 2) starting / stopping real-time updaters (delegated to the GraphUpdaterConfigurator class).\n-   */\n-\n-  /**\n-   * Start up a new router once it has been created.\n-   */\n-  public void startup() {\n-    this.tileRendererManager = new TileRendererManager(this.graph);\n-\n-    if (routerConfig.requestLogFile() != null) {\n-      this.requestLogger = createLogger(routerConfig.requestLogFile());\n-      LOG.info(\"Logging incoming requests at '{}'\", routerConfig.requestLogFile());\n-    } else {\n-      LOG.info(\"Incoming requests will not be logged.\");\n-    }\n-\n-    /* Create transit layer for Raptor routing. Here we map the scheduled timetables. */\n-    /* Realtime updates can be mapped similarly by a recurring operation in a GraphUpdater below. */\n-    LOG.info(\"Creating transit layer for Raptor routing.\");\n-    if (graph.hasTransit && graph.index != null) {\n-      graph.setTransitLayer(TransitLayerMapper.map(routerConfig.transitTuningParameters(), graph));\n-      graph.setRealtimeTransitLayer(new TransitLayer(graph.getTransitLayer()));\n-      graph.transitLayerUpdater =\n-        new TransitLayerUpdater(graph, graph.index.getServiceCodesRunningForDate());\n-    } else {\n-      LOG.warn(\n-        \"Cannot create Raptor data, that requires the graph to have transit data and be indexed.\"\n-      );\n-    }\n-\n-    /* Create Graph updater modules from JSON config. */\n-    GraphUpdaterConfigurator.setupGraph(this.graph, routerConfig.updaterConfig());\n-\n-    /* Compute ellipsoidToGeoidDifference for this Graph */\n-    try {\n-      WorldEnvelope env = graph.getEnvelope();\n-      double lat = (env.getLowerLeftLatitude() + env.getUpperRightLatitude()) / 2;\n-      double lon = (env.getLowerLeftLongitude() + env.getUpperRightLongitude()) / 2;\n-      graph.ellipsoidToGeoidDifference = ElevationUtils.computeEllipsoidToGeoidDifference(lat, lon);\n-      LOG.info(\n-        \"Computed ellipsoid/geoid offset at (\" +\n-        lat +\n-        \", \" +\n-        lon +\n-        \") as \" +\n-        graph.ellipsoidToGeoidDifference\n-      );\n-    } catch (Exception e) {\n-      LOG.error(\"Error computing ellipsoid/geoid difference\");\n-    }\n-\n-    if (OTPFeature.SandboxAPITransmodelApi.isOn()) {\n-      TransmodelAPI.setUp(routerConfig.transmodelApi(), graph, defaultRoutingRequest);\n-    }\n-\n-    if (OTPFeature.SandboxAPIGeocoder.isOn()) {\n-      LOG.info(\"Creating debug client geocoder lucene index\");\n-      LuceneIndex.forServer(this);\n-    }\n-  }\n-\n-  /**\n-   * A RoutingRequest containing default parameters that will be cloned when handling each request.\n-   */\n-  public RoutingRequest copyDefaultRoutingRequest() {\n-    var copy = this.defaultRoutingRequest.clone();\n-    copy.setDateTime(Instant.now());\n-    return copy;\n-  }\n-\n-  /**\n-   * Return the default routing request locale(without cloning the request).\n-   */\n-  public Locale getDefaultLocale() {\n-    return this.defaultRoutingRequest.locale;\n-  }\n-\n-  /** Shut down this router when evicted or (auto-)reloaded. Stop any real-time updater threads. */\n-  public void shutdown() {\n-    GraphUpdaterConfigurator.shutdownGraph(this.graph);\n-    raptorConfig.shutdown();\n-  }\n-\n-  public double streetRoutingTimeoutSeconds() {\n-    return routerConfig.streetRoutingTimeoutSeconds();\n-  }\n-\n-  /**\n-   * Programmatically (i.e. not in XML) create a Logback logger for requests happening on this\n-   * router. http://stackoverflow.com/a/17215011/778449\n-   */\n-  private static ch.qos.logback.classic.Logger createLogger(String file) {\n-    LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n-    PatternLayoutEncoder ple = new PatternLayoutEncoder();\n-    ple.setPattern(\"%d{yyyy-MM-dd'T'HH:mm:ss.SSS} %msg%n\");\n-    ple.setContext(lc);\n-    ple.start();\n-    FileAppender<ILoggingEvent> fileAppender = new FileAppender<>();\n-    fileAppender.setFile(file);\n-    fileAppender.setEncoder(ple);\n-    fileAppender.setContext(lc);\n-    fileAppender.start();\n-    ch.qos.logback.classic.Logger logger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(\n-      \"REQ_LOG\"\n-    );\n-    logger.addAppender(fileAppender);\n-    logger.setLevel(Level.INFO);\n-    logger.setAdditive(false);\n-    return logger;\n-  }\n-}\n+public class Router {}\n", "next_change": {"commit": "9e092e941b4ab3c931a8a017961936e1974253c5", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/server/Router.java b/src/main/java/org/opentripplanner/standalone/server/Router.java\ndeleted file mode 100644\nindex 7181823377..0000000000\n--- a/src/main/java/org/opentripplanner/standalone/server/Router.java\n+++ /dev/null\n", "chunk": "@@ -1,7 +0,0 @@\n-package org.opentripplanner.standalone.server;\n-\n-/**\n- * Represents the configuration of a single router (a single graph for a specific geographic area)\n- * in an OTP server.\n- */\n-public class Router {}\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "b3491e22091f96444284aef1bc54ee408d428973", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b3491e22091f96444284aef1bc54ee408d428973", "message": "Log exception message", "committedDate": "2020-06-12T08:46:32Z", "type": "commit"}, {"oid": "c3d1ec8bab01e4c0418528e7411b9709c8115bac", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c3d1ec8bab01e4c0418528e7411b9709c8115bac", "message": "Avoid using apache commons", "committedDate": "2020-06-12T08:47:48Z", "type": "commit"}, {"oid": "50b5ae1883bb0f07472d7a5ed59c0a43bce77a56", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/50b5ae1883bb0f07472d7a5ed59c0a43bce77a56", "message": "Rename package to not use underscores", "committedDate": "2020-06-12T08:53:17Z", "type": "commit"}, {"oid": "9d6db34631fc83fc8f7be80a1ea0c35b9688a7ff", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9d6db34631fc83fc8f7be80a1ea0c35b9688a7ff", "message": "Rename GBFSDataSource to GBFSDataSourceParameters", "committedDate": "2020-06-12T08:54:01Z", "type": "commit"}, {"oid": "2191313227011393118049be20f5c7501d0539e2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2191313227011393118049be20f5c7501d0539e2", "message": "Expanded javadoc", "committedDate": "2020-06-12T08:56:36Z", "type": "commit"}, {"oid": "d92bd5bde3cbc65b6efb726de88978d194ed7efc", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d92bd5bde3cbc65b6efb726de88978d194ed7efc", "message": "Use URI data type for endpoint config", "committedDate": "2020-06-12T09:34:47Z", "type": "commit"}, {"oid": "a1229c03c922ac3e72e333460cc1fd80ef2b3b5f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a1229c03c922ac3e72e333460cc1fd80ef2b3b5f", "message": "Rename to bikeRentalServiceDirectory", "committedDate": "2020-06-17T11:43:02Z", "type": "commit"}, {"oid": "e9444256ceaf9482bb8091ea368a5ab6a1bca07d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e9444256ceaf9482bb8091ea368a5ab6a1bca07d", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-17T11:44:05Z", "type": "commit"}, {"oid": "124612b5544ece60fbdcad7d3e98f4fdc5f22441", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/124612b5544ece60fbdcad7d3e98f4fdc5f22441", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-17T12:06:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5NTU0OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r441495548", "body": "Add a short javadoc to this method including that it configure a Sandbox feature.", "bodyText": "Add a short javadoc to this method including that it configure a Sandbox feature.", "bodyHTML": "<p dir=\"auto\">Add a short javadoc to this method including that it configure a Sandbox feature.</p>", "author": "t2gran", "createdAt": "2020-06-17T12:08:42Z", "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -65,6 +70,10 @@ public double streetRoutingTimeoutSeconds() {\n         return streetRoutingTimeoutSeconds;\n     }\n \n+    public URI getBikeRentalServiceDirectoryUrl() {", "originalCommit": "124612b5544ece60fbdcad7d3e98f4fdc5f22441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76160af2495c0d7ec8ccda2d1a8c018d0e37ced1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 8f6c117c8b..373ed5f88d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -70,6 +70,10 @@ public class RouterConfig implements Serializable {\n         return streetRoutingTimeoutSeconds;\n     }\n \n+    /**\n+     * This is the endpoint url used for the BikeRentalServiceDirectory sandbox feature.\n+     * @see org.opentripplanner.ext.bikerentalservicedirectory.BikeRentalServiceDirectoryFetcher\n+     */\n     public URI getBikeRentalServiceDirectoryUrl() {\n         return bikeRentalServiceDirectoryUrl;\n     }\n", "next_change": {"commit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 373ed5f88d..326bf6d5ad 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -70,14 +70,6 @@ public class RouterConfig implements Serializable {\n         return streetRoutingTimeoutSeconds;\n     }\n \n-    /**\n-     * This is the endpoint url used for the BikeRentalServiceDirectory sandbox feature.\n-     * @see org.opentripplanner.ext.bikerentalservicedirectory.BikeRentalServiceDirectoryFetcher\n-     */\n-    public URI getBikeRentalServiceDirectoryUrl() {\n-        return bikeRentalServiceDirectoryUrl;\n-    }\n-\n     public RoutingRequest routingRequestDefaults() {\n         return routingRequestDefaults;\n     }\n", "next_change": {"commit": "ee765172cc4cf2ab769759da47e10344c3734caa", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 326bf6d5ad..032bed31fe 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -70,6 +67,8 @@ public class RouterConfig implements Serializable {\n         return streetRoutingTimeoutSeconds;\n     }\n \n+    public boolean transmodelApiHideFeedId() { return transmodelApiHideFeedId; }\n+\n     public RoutingRequest routingRequestDefaults() {\n         return routingRequestDefaults;\n     }\n", "next_change": {"commit": "5c3be4aee62f15ed78edff99f7cce5691a5b6791", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 032bed31fe..2c4722edc9 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -67,7 +93,7 @@ public class RouterConfig implements Serializable {\n         return streetRoutingTimeoutSeconds;\n     }\n \n-    public boolean transmodelApiHideFeedId() { return transmodelApiHideFeedId; }\n+    public TransmodelAPIConfig transmodelApi() { return transmodelApi; }\n \n     public RoutingRequest routingRequestDefaults() {\n         return routingRequestDefaults;\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 2c4722edc9..43ccdc4ced 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -1,134 +1,140 @@\n package org.opentripplanner.standalone.config;\n \n+import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.MissingNode;\n+import java.io.Serializable;\n import org.opentripplanner.ext.flex.FlexParameters;\n import org.opentripplanner.ext.vectortiles.VectorTilesResource;\n-import org.opentripplanner.routing.algorithm.raptor.transit.TransitTuningParameters;\n+import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitTuningParameters;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n import org.opentripplanner.standalone.config.sandbox.FlexConfig;\n+import org.opentripplanner.standalone.config.sandbox.TransmodelAPIConfig;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n import org.opentripplanner.updater.UpdatersParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.Serializable;\n-\n-import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n-\n /**\n  * This class is an object representation of the 'router-config.json'.\n  */\n public class RouterConfig implements Serializable {\n \n-    private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n-    private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n-\n-    public static final RouterConfig DEFAULT = new RouterConfig(\n-            MissingNode.getInstance(), \"DEFAULT\", false\n-    );\n-\n-    /**\n-     * The raw JsonNode three kept for reference and (de)serialization.\n-     */\n-    private final JsonNode rawJson;\n-    private final String configVersion;\n-    private final String requestLogFile;\n-    private final TransmodelAPIConfig transmodelApi;\n-    private final double streetRoutingTimeoutSeconds;\n-    private final RoutingRequest routingRequestDefaults;\n-    private final TransitRoutingConfig transitConfig;\n-    private final UpdatersParameters updatersParameters;\n-    private final VectorTileConfig vectorTileLayers;\n-    private final FlexConfig flexConfig;\n-\n-    public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n-        NodeAdapter adapter = new NodeAdapter(node, source);\n-        this.rawJson = node;\n-        this.configVersion = adapter.asText(\"configVersion\", null);\n-        this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n-        this.streetRoutingTimeoutSeconds = adapter.asDouble(\n-                \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n-        );\n-        this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n-        this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updatersParameters = new UpdatersConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n-        this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n-\n-        if(logUnusedParams) {\n-            adapter.logAllUnusedParameters(LOG);\n-        }\n-    }\n-\n-    /**\n-     * The config-version is a parameter witch each OTP deployment may set to be able to\n-     * query the OTP server and verify that it uses the correct version of the config. The\n-     * version must be injected into the config in the operation deployment pipeline. How this\n-     * is done is up to the deployment.\n-     * <p>\n-     * The config-version have no effect on OTP, and is provided as is on the API. There is\n-     * not syntax or format check on the version and it can be any string.\n-     * <p>\n-     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n-     * <p>\n-     * This parameter is optional, and the default is {@code null}.\n-     */\n-    public String getConfigVersion() {\n-        return configVersion;\n-    }\n-\n-    public String requestLogFile() {\n-        return requestLogFile;\n-    }\n-\n-    /**\n-     * The preferred way to limit the search is to limit the distance for\n-     * each street mode(WALK, BIKE, CAR). So the default timeout for a\n-     * street search is set quite high. This is used to abort the search\n-     * if the max distance is not reached within the timeout.\n-     */\n-    public double streetRoutingTimeoutSeconds() {\n-        return streetRoutingTimeoutSeconds;\n-    }\n-\n-    public TransmodelAPIConfig transmodelApi() { return transmodelApi; }\n-\n-    public RoutingRequest routingRequestDefaults() {\n-        return routingRequestDefaults;\n+  private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n+  private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n+\n+  public static final RouterConfig DEFAULT = new RouterConfig(\n+    MissingNode.getInstance(),\n+    \"DEFAULT\",\n+    false\n+  );\n+\n+  /**\n+   * The raw JsonNode three kept for reference and (de)serialization.\n+   */\n+  private final JsonNode rawJson;\n+  private final String configVersion;\n+  private final String requestLogFile;\n+  private final TransmodelAPIConfig transmodelApi;\n+  private final double streetRoutingTimeoutSeconds;\n+  private final RoutingRequest routingRequestDefaults;\n+  private final TransitRoutingConfig transitConfig;\n+  private final UpdatersParameters updatersParameters;\n+  private final VectorTileConfig vectorTileLayers;\n+  private final FlexConfig flexConfig;\n+\n+  public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n+    NodeAdapter adapter = new NodeAdapter(node, source);\n+    this.rawJson = node;\n+    this.configVersion = adapter.asText(\"configVersion\", null);\n+    this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+    this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n+    this.streetRoutingTimeoutSeconds =\n+      adapter.asDouble(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n+    this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n+    this.updatersParameters = new UpdatersConfig(adapter);\n+    this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+    this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n+\n+    if (logUnusedParams) {\n+      adapter.logAllUnusedParameters(LOG);\n     }\n-\n-    public RaptorTuningParameters raptorTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public TransitTuningParameters transitTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public UpdatersParameters updaterConfig() { return updatersParameters; }\n-\n-    public VectorTilesResource.LayersParameters vectorTileLayers() { return vectorTileLayers; }\n-\n-    public FlexParameters flexParameters(RoutingRequest request) { \n-        return flexConfig.toFlexParameters(request);\n-    }\n-\n-    /**\n-     * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n-     */\n-    public boolean isDefault() {\n-        return this.rawJson.isMissingNode();\n-    }\n-\n-    public String toJson() {\n-        return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n-    }\n-\n-    public String toString() {\n-        // Print ONLY the values set, not deafult values\n-        return rawJson.toPrettyString();\n-    }\n-\n+  }\n+\n+  /**\n+   * The config-version is a parameter which each OTP deployment may set to be able to\n+   * query the OTP server and verify that it uses the correct version of the config. The\n+   * version must be injected into the config in the operation deployment pipeline. How this\n+   * is done is up to the deployment.\n+   * <p>\n+   * The config-version have no effect on OTP, and is provided as is on the API. There is\n+   * not syntax or format check on the version and it can be any string.\n+   * <p>\n+   * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+   * <p>\n+   * This parameter is optional, and the default is {@code null}.\n+   */\n+  public String getConfigVersion() {\n+    return configVersion;\n+  }\n+\n+  public String requestLogFile() {\n+    return requestLogFile;\n+  }\n+\n+  /**\n+   * The preferred way to limit the search is to limit the distance for\n+   * each street mode(WALK, BIKE, CAR). So the default timeout for a\n+   * street search is set quite high. This is used to abort the search\n+   * if the max distance is not reached within the timeout.\n+   */\n+  public double streetRoutingTimeoutSeconds() {\n+    return streetRoutingTimeoutSeconds;\n+  }\n+\n+  public TransmodelAPIConfig transmodelApi() {\n+    return transmodelApi;\n+  }\n+\n+  public RoutingRequest routingRequestDefaults() {\n+    return routingRequestDefaults;\n+  }\n+\n+  public RaptorTuningParameters raptorTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public TransitTuningParameters transitTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public UpdatersParameters updaterConfig() {\n+    return updatersParameters;\n+  }\n+\n+  public VectorTilesResource.LayersParameters vectorTileLayers() {\n+    return vectorTileLayers;\n+  }\n+\n+  public FlexParameters flexParameters(RoutingRequest request) {\n+    return flexConfig.toFlexParameters(request);\n+  }\n+\n+  /**\n+   * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n+   */\n+  public boolean isDefault() {\n+    return this.rawJson.isMissingNode();\n+  }\n+\n+  public String toJson() {\n+    return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n+  }\n+\n+  public String toString() {\n+    // Print ONLY the values set, not deafult values\n+    return rawJson.toPrettyString();\n+  }\n }\n", "next_change": {"commit": "e383f2b7c6773da4bb49dec187f21ccd38867219", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 43ccdc4ced..b44f87ff2d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -137,4 +137,32 @@ public class RouterConfig implements Serializable {\n     // Print ONLY the values set, not deafult values\n     return rawJson.toPrettyString();\n   }\n+\n+  /**\n+   * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n+   * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   * @since 2.2 - The support for the old format can be removed in version > 2.2.\n+   */\n+  static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n+    try {\n+      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    } catch (DateTimeParseException ex) {\n+      LOG.warn(\n+        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n+        \"Duration. Update you config, the support for the old format will be removed in the \" +\n+        \"next version after v2.2. Details: \" +\n+        ex.getMessage()\n+      );\n+      // This is safe, because the asDouble, will fall back to the default value on parse error\n+      return Duration.ofMillis(\n+        (long) (\n+          1000L *\n+          adapter.asDouble(\n+            \"streetRoutingTimeout\",\n+            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n+          )\n+        )\n+      );\n+    }\n+  }\n }\n", "next_change": {"commit": "1257e89c4bb8c235b0168ec5704ab411844cf838", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b44f87ff2d..1a23b9636a 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -144,25 +145,10 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    try {\n-      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n-    } catch (DateTimeParseException ex) {\n-      LOG.warn(\n-        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n-        \"Duration. Update you config, the support for the old format will be removed in the \" +\n-        \"next version after v2.2. Details: \" +\n-        ex.getMessage()\n-      );\n-      // This is safe, because the asDouble, will fall back to the default value on parse error\n-      return Duration.ofMillis(\n-        (long) (\n-          1000L *\n-          adapter.asDouble(\n-            \"streetRoutingTimeout\",\n-            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n-          )\n-        )\n-      );\n-    }\n+    return adapter.asDuration2(\n+      \"streetRoutingTimeout\",\n+      DEFAULT_STREET_ROUTING_TIMEOUT,\n+      ChronoUnit.SECONDS\n+    );\n   }\n }\n", "next_change": {"commit": "70734a29363ab8f2b62f9c3d46b5a393930b3f05", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 1a23b9636a..b796502f23 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -145,10 +156,9 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    return adapter.asDuration2(\n-      \"streetRoutingTimeout\",\n-      DEFAULT_STREET_ROUTING_TIMEOUT,\n-      ChronoUnit.SECONDS\n-    );\n+    return adapter\n+      .of(\"streetRoutingTimeout\")\n+      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "31423839f8cd698e253c376011b444a2c0947481", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b796502f23..a229bfbe12 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -158,7 +178,8 @@ public class RouterConfig implements Serializable {\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n-      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .since(NA)\n+      .summary(\"TODO\")\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "8c7b12353ac171d27fea3c1982bd0bd052af5aa1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex a229bfbe12..566aa8bdd7 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -173,13 +186,16 @@ public class RouterConfig implements Serializable {\n   /**\n    * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n    * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   *\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n       .since(NA)\n-      .summary(\"TODO\")\n+      .summary(\n+        \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n+      )\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "aa0be03f918d3c5e169be4f9444972b1da00e27c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 566aa8bdd7..52486ebdb3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -196,6 +195,20 @@ public class RouterConfig implements Serializable {\n       .summary(\n         \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n       )\n-      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n+      .description(\n+        \"\"\"\n+In OTP1 path searches sometimes toke a long time to complete. With the new Raptor algorithm this not\n+the case anymore. The street part of the routing may still take a long time if searching very long\n+distances. You can set the street routing timeout to avoid tying up server resources on pointless\n+searches and ensure that your users receive a timely response. You can also limit the max distance\n+to search for WALK, BIKE and CAR. When a search times out, a WARN level log entry is made with\n+information that can help identify problematic searches and improve our routing methods. There are\n+no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n+search-window.\n+\n+The search abort after this duration and any paths found are returned to the client.\n+\"\"\"\n+      )\n+      .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n   }\n }\n", "next_change": {"commit": "f9fec1b69eae33ab17c5e2e40cdbfce9bc7802cd", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 52486ebdb3..5eeea61849 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -206,7 +226,7 @@ information that can help identify problematic searches and improve our routing\n no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n search-window.\n \n-The search abort after this duration and any paths found are returned to the client.\n+The search aborts after this duration and any paths found are returned to the client.\n \"\"\"\n       )\n       .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5Njk2OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r441496969", "body": "This parameter need documentation in the Configuration.md - Not much, but clearly stated that it is a Sandbox feature.", "bodyText": "This parameter need documentation in the Configuration.md - Not much, but clearly stated that it is a Sandbox feature.", "bodyHTML": "<p dir=\"auto\">This parameter need documentation in the Configuration.md - Not much, but clearly stated that it is a Sandbox feature.</p>", "author": "t2gran", "createdAt": "2020-06-17T12:11:21Z", "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -42,6 +44,9 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n+        this.bikeRentalServiceDirectoryUrl = adapter.asUri(\n+            \"bikeRentalServiceDirectoryUrl\", null\n+        );", "originalCommit": "124612b5544ece60fbdcad7d3e98f4fdc5f22441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NTQ0NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r441665445", "bodyText": "I added a config parameter for the TransmodelAPI today, this is how I did it:\nConfiguration.md:\n\ntransmodelApi | configure Entur Transmodel API (Sandbox) | object | null | See the code for parameters, no doc provided.\n\nThis allow us to add as many parametes as needed later, and the parameter is extracted in the RouterConfiglike this:\nthis.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\nI did not create a POJO for the one parameter - I will do that next time I add a new parameter, but the JSON structure account for such change.", "author": "t2gran", "createdAt": "2020-06-17T16:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5Njk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE0MzU0Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r442143547", "bodyText": "I have added documentation in Configuration.md for this now", "author": "gmellemstrand", "createdAt": "2020-06-18T10:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5Njk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 8f6c117c8b..326bf6d5ad 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -44,12 +44,12 @@ public class RouterConfig implements Serializable {\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n-        this.bikeRentalServiceDirectoryUrl = adapter.asUri(\n-            \"bikeRentalServiceDirectoryUrl\", null\n-        );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterConfig = new UpdaterConfig(adapter.path(\"updaters\"));\n+        this.updaterParameters = new UpdaterConfig(\n+            adapter.path(\"updaters\"),\n+            adapter.asUri(\"bikeRentalServiceDirectoryUrl\", null)\n+        );\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "fe9a3093b263e393965ab16530cffc9d4398e836", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 326bf6d5ad..69fcf99b99 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -46,10 +45,7 @@ public class RouterConfig implements Serializable {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(\n-            adapter.path(\"updaters\"),\n-            adapter.asUri(\"bikeRentalServiceDirectoryUrl\", null)\n-        );\n+        this.updaterParameters = new UpdaterConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "8b23fd3cbe4cac6d88a14fa7621a35a501a3165d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 69fcf99b99..3aa266c909 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -28,24 +28,27 @@ public class RouterConfig implements Serializable {\n     /**\n      * The raw JsonNode three kept for reference and (de)serialization.\n      */\n-    public final JsonNode rawJson;\n-\n+    private final JsonNode rawJson;\n     private final String requestLogFile;\n+    private final boolean transmodelApiHideFeedId;\n     private final double streetRoutingTimeoutSeconds;\n     private final RoutingRequest routingRequestDefaults;\n     private final TransitRoutingConfig transitConfig;\n     private final UpdaterParameters updaterParameters;\n+    private final VectorTileConfig vectorTileLayers;\n \n     public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         NodeAdapter adapter = new NodeAdapter(node, source);\n         this.rawJson = node;\n         this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n         this.streetRoutingTimeoutSeconds = adapter.asDouble(\n                 \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updaterParameters = new UpdaterConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "803296083d4a9314d4518c9f204f280d760edd7b", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 3aa266c909..38477d4920 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,8 +46,7 @@ public class RouterConfig implements Serializable {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updaterParameters = new UpdaterConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+        this.updatersParameters = new UpdatersConfig(adapter);\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "9cd28885f3514bc725578dc1e1c893dfec8bf0a4", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 38477d4920..ffa6fed7bf 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -47,6 +48,7 @@ public class RouterConfig implements Serializable {\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n         this.updatersParameters = new UpdatersConfig(adapter);\n+        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n \n         if(logUnusedParams) {\n             adapter.logAllUnusedParameters(LOG);\n", "next_change": {"commit": "49b46f4305ee31d745f86ca8f37ee70682bb210d", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex ffa6fed7bf..9d64da67a3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -55,6 +57,23 @@ public class RouterConfig implements Serializable {\n         }\n     }\n \n+    /**\n+     * The config-version is a parameter witch each OTP deployment may set to be able to\n+     * query the OTP server and verify that it uses the correct version of the config. The\n+     * version must be injected into the config in the operation deployment pipeline. How this\n+     * is done is up to the deployment.\n+     * <p>\n+     * The config-version have no effect on OTP, and is provided as is on the API. There is\n+     * not syntax or format check on the version and it can be any string.\n+     * <p>\n+     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+     * <p>\n+     * This parameter is optional, and the default is {@code null}.\n+     */\n+    public String getConfigVersion() {\n+        return configVersion;\n+    }\n+\n     public String requestLogFile() {\n         return requestLogFile;\n     }\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 9d64da67a3..43ccdc4ced 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -1,125 +1,140 @@\n package org.opentripplanner.standalone.config;\n \n+import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.MissingNode;\n-import org.opentripplanner.routing.algorithm.raptor.transit.TransitTuningParameters;\n+import java.io.Serializable;\n+import org.opentripplanner.ext.flex.FlexParameters;\n+import org.opentripplanner.ext.vectortiles.VectorTilesResource;\n+import org.opentripplanner.routing.algorithm.raptoradapter.transit.TransitTuningParameters;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n+import org.opentripplanner.standalone.config.sandbox.FlexConfig;\n+import org.opentripplanner.standalone.config.sandbox.TransmodelAPIConfig;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n import org.opentripplanner.updater.UpdatersParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.Serializable;\n-\n-import static org.opentripplanner.standalone.config.RoutingRequestMapper.mapRoutingRequest;\n-\n /**\n  * This class is an object representation of the 'router-config.json'.\n  */\n public class RouterConfig implements Serializable {\n \n-    private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n-    private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n-\n-    public static final RouterConfig DEFAULT = new RouterConfig(\n-            MissingNode.getInstance(), \"DEFAULT\", false\n-    );\n-\n-    /**\n-     * The raw JsonNode three kept for reference and (de)serialization.\n-     */\n-    private final JsonNode rawJson;\n-    private final String configVersion;\n-    private final String requestLogFile;\n-    private final boolean transmodelApiHideFeedId;\n-    private final double streetRoutingTimeoutSeconds;\n-    private final RoutingRequest routingRequestDefaults;\n-    private final TransitRoutingConfig transitConfig;\n-    private final UpdatersParameters updatersParameters;\n-    private final VectorTileConfig vectorTileLayers;\n-\n-    public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n-        NodeAdapter adapter = new NodeAdapter(node, source);\n-        this.rawJson = node;\n-        this.configVersion = adapter.asText(\"configVersion\", null);\n-        this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n-        this.transmodelApiHideFeedId = adapter.path(\"transmodelApi\").asBoolean(\"hideFeedId\", false);\n-        this.streetRoutingTimeoutSeconds = adapter.asDouble(\n-                \"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT\n-        );\n-        this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n-        this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-        this.updatersParameters = new UpdatersConfig(adapter);\n-        this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n-\n-        if(logUnusedParams) {\n-            adapter.logAllUnusedParameters(LOG);\n-        }\n+  private static final double DEFAULT_STREET_ROUTING_TIMEOUT = 5.0;\n+  private static final Logger LOG = LoggerFactory.getLogger(RouterConfig.class);\n+\n+  public static final RouterConfig DEFAULT = new RouterConfig(\n+    MissingNode.getInstance(),\n+    \"DEFAULT\",\n+    false\n+  );\n+\n+  /**\n+   * The raw JsonNode three kept for reference and (de)serialization.\n+   */\n+  private final JsonNode rawJson;\n+  private final String configVersion;\n+  private final String requestLogFile;\n+  private final TransmodelAPIConfig transmodelApi;\n+  private final double streetRoutingTimeoutSeconds;\n+  private final RoutingRequest routingRequestDefaults;\n+  private final TransitRoutingConfig transitConfig;\n+  private final UpdatersParameters updatersParameters;\n+  private final VectorTileConfig vectorTileLayers;\n+  private final FlexConfig flexConfig;\n+\n+  public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n+    NodeAdapter adapter = new NodeAdapter(node, source);\n+    this.rawJson = node;\n+    this.configVersion = adapter.asText(\"configVersion\", null);\n+    this.requestLogFile = adapter.asText(\"requestLogFile\", null);\n+    this.transmodelApi = new TransmodelAPIConfig(adapter.path(\"transmodelApi\"));\n+    this.streetRoutingTimeoutSeconds =\n+      adapter.asDouble(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n+    this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n+    this.updatersParameters = new UpdatersConfig(adapter);\n+    this.vectorTileLayers = new VectorTileConfig(adapter.path(\"vectorTileLayers\").asList());\n+    this.flexConfig = new FlexConfig(adapter.path(\"flex\"));\n+\n+    if (logUnusedParams) {\n+      adapter.logAllUnusedParameters(LOG);\n     }\n-\n-    /**\n-     * The config-version is a parameter witch each OTP deployment may set to be able to\n-     * query the OTP server and verify that it uses the correct version of the config. The\n-     * version must be injected into the config in the operation deployment pipeline. How this\n-     * is done is up to the deployment.\n-     * <p>\n-     * The config-version have no effect on OTP, and is provided as is on the API. There is\n-     * not syntax or format check on the version and it can be any string.\n-     * <p>\n-     * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n-     * <p>\n-     * This parameter is optional, and the default is {@code null}.\n-     */\n-    public String getConfigVersion() {\n-        return configVersion;\n-    }\n-\n-    public String requestLogFile() {\n-        return requestLogFile;\n-    }\n-\n-    /**\n-     * The preferred way to limit the search is to limit the distance for\n-     * each street mode(WALK, BIKE, CAR). So the default timeout for a\n-     * street search is set quite high. This is used to abort the search\n-     * if the max distance is not reached within the timeout.\n-     */\n-    public double streetRoutingTimeoutSeconds() {\n-        return streetRoutingTimeoutSeconds;\n-    }\n-\n-    public boolean transmodelApiHideFeedId() { return transmodelApiHideFeedId; }\n-\n-    public RoutingRequest routingRequestDefaults() {\n-        return routingRequestDefaults;\n-    }\n-\n-    public RaptorTuningParameters raptorTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public TransitTuningParameters transitTuningParameters() {\n-        return transitConfig;\n-    }\n-\n-    public UpdatersParameters updaterConfig() { return updatersParameters; }\n-\n-    public VectorTileConfig vectorTileLayers() { return vectorTileLayers; }\n-\n-    /**\n-     * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n-     */\n-    public boolean isDefault() {\n-        return this.rawJson.isMissingNode();\n-    }\n-\n-    public String toJson() {\n-        return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n-    }\n-\n-    public String toString() {\n-        // Print ONLY the values set, not deafult values\n-        return rawJson.toPrettyString();\n-    }\n-\n+  }\n+\n+  /**\n+   * The config-version is a parameter which each OTP deployment may set to be able to\n+   * query the OTP server and verify that it uses the correct version of the config. The\n+   * version must be injected into the config in the operation deployment pipeline. How this\n+   * is done is up to the deployment.\n+   * <p>\n+   * The config-version have no effect on OTP, and is provided as is on the API. There is\n+   * not syntax or format check on the version and it can be any string.\n+   * <p>\n+   * Be aware that OTP uses the config embedded in the loaded graph if no new config is provided.\n+   * <p>\n+   * This parameter is optional, and the default is {@code null}.\n+   */\n+  public String getConfigVersion() {\n+    return configVersion;\n+  }\n+\n+  public String requestLogFile() {\n+    return requestLogFile;\n+  }\n+\n+  /**\n+   * The preferred way to limit the search is to limit the distance for\n+   * each street mode(WALK, BIKE, CAR). So the default timeout for a\n+   * street search is set quite high. This is used to abort the search\n+   * if the max distance is not reached within the timeout.\n+   */\n+  public double streetRoutingTimeoutSeconds() {\n+    return streetRoutingTimeoutSeconds;\n+  }\n+\n+  public TransmodelAPIConfig transmodelApi() {\n+    return transmodelApi;\n+  }\n+\n+  public RoutingRequest routingRequestDefaults() {\n+    return routingRequestDefaults;\n+  }\n+\n+  public RaptorTuningParameters raptorTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public TransitTuningParameters transitTuningParameters() {\n+    return transitConfig;\n+  }\n+\n+  public UpdatersParameters updaterConfig() {\n+    return updatersParameters;\n+  }\n+\n+  public VectorTilesResource.LayersParameters vectorTileLayers() {\n+    return vectorTileLayers;\n+  }\n+\n+  public FlexParameters flexParameters(RoutingRequest request) {\n+    return flexConfig.toFlexParameters(request);\n+  }\n+\n+  /**\n+   * If {@code true} the config is loaded from file, in not the DEFAULT config is used.\n+   */\n+  public boolean isDefault() {\n+    return this.rawJson.isMissingNode();\n+  }\n+\n+  public String toJson() {\n+    return rawJson.isMissingNode() ? \"\" : rawJson.toString();\n+  }\n+\n+  public String toString() {\n+    // Print ONLY the values set, not deafult values\n+    return rawJson.toPrettyString();\n+  }\n }\n", "next_change": {"commit": "e383f2b7c6773da4bb49dec187f21ccd38867219", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 43ccdc4ced..b44f87ff2d 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -137,4 +137,32 @@ public class RouterConfig implements Serializable {\n     // Print ONLY the values set, not deafult values\n     return rawJson.toPrettyString();\n   }\n+\n+  /**\n+   * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n+   * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   * @since 2.2 - The support for the old format can be removed in version > 2.2.\n+   */\n+  static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n+    try {\n+      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n+    } catch (DateTimeParseException ex) {\n+      LOG.warn(\n+        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n+        \"Duration. Update you config, the support for the old format will be removed in the \" +\n+        \"next version after v2.2. Details: \" +\n+        ex.getMessage()\n+      );\n+      // This is safe, because the asDouble, will fall back to the default value on parse error\n+      return Duration.ofMillis(\n+        (long) (\n+          1000L *\n+          adapter.asDouble(\n+            \"streetRoutingTimeout\",\n+            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n+          )\n+        )\n+      );\n+    }\n+  }\n }\n", "next_change": {"commit": "1257e89c4bb8c235b0168ec5704ab411844cf838", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b44f87ff2d..1a23b9636a 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -144,25 +145,10 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    try {\n-      return adapter.asDuration(\"streetRoutingTimeout\", DEFAULT_STREET_ROUTING_TIMEOUT);\n-    } catch (DateTimeParseException ex) {\n-      LOG.warn(\n-        \"The `streetRoutingTimeout` parameter input format changed from a real number to a \" +\n-        \"Duration. Update you config, the support for the old format will be removed in the \" +\n-        \"next version after v2.2. Details: \" +\n-        ex.getMessage()\n-      );\n-      // This is safe, because the asDouble, will fall back to the default value on parse error\n-      return Duration.ofMillis(\n-        (long) (\n-          1000L *\n-          adapter.asDouble(\n-            \"streetRoutingTimeout\",\n-            (double) DEFAULT_STREET_ROUTING_TIMEOUT.toSeconds()\n-          )\n-        )\n-      );\n-    }\n+    return adapter.asDuration2(\n+      \"streetRoutingTimeout\",\n+      DEFAULT_STREET_ROUTING_TIMEOUT,\n+      ChronoUnit.SECONDS\n+    );\n   }\n }\n", "next_change": {"commit": "70734a29363ab8f2b62f9c3d46b5a393930b3f05", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 1a23b9636a..b796502f23 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -145,10 +156,9 @@ public class RouterConfig implements Serializable {\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n-    return adapter.asDuration2(\n-      \"streetRoutingTimeout\",\n-      DEFAULT_STREET_ROUTING_TIMEOUT,\n-      ChronoUnit.SECONDS\n-    );\n+    return adapter\n+      .of(\"streetRoutingTimeout\")\n+      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "31423839f8cd698e253c376011b444a2c0947481", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex b796502f23..a229bfbe12 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -158,7 +178,8 @@ public class RouterConfig implements Serializable {\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n-      .withDoc(NA, /*TODO DOC*/\"TODO\")\n+      .since(NA)\n+      .summary(\"TODO\")\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "8c7b12353ac171d27fea3c1982bd0bd052af5aa1", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex a229bfbe12..566aa8bdd7 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -173,13 +186,16 @@ public class RouterConfig implements Serializable {\n   /**\n    * This method is needed, because we want to support the old format for the \"streetRoutingTimeout\"\n    * parameter. We will keep it for some time, to let OTP deployments update the config.\n+   *\n    * @since 2.2 - The support for the old format can be removed in version > 2.2.\n    */\n   static Duration parseStreetRoutingTimeout(NodeAdapter adapter) {\n     return adapter\n       .of(\"streetRoutingTimeout\")\n       .since(NA)\n-      .summary(\"TODO\")\n+      .summary(\n+        \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n+      )\n       .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n   }\n }\n", "next_change": {"commit": "aa0be03f918d3c5e169be4f9444972b1da00e27c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 566aa8bdd7..52486ebdb3 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -196,6 +195,20 @@ public class RouterConfig implements Serializable {\n       .summary(\n         \"The maximimg time a street routing request is allowed to take before returning a timeout.\"\n       )\n-      .asDuration2(DEFAULT_STREET_ROUTING_TIMEOUT, ChronoUnit.SECONDS);\n+      .description(\n+        \"\"\"\n+In OTP1 path searches sometimes toke a long time to complete. With the new Raptor algorithm this not\n+the case anymore. The street part of the routing may still take a long time if searching very long\n+distances. You can set the street routing timeout to avoid tying up server resources on pointless\n+searches and ensure that your users receive a timely response. You can also limit the max distance\n+to search for WALK, BIKE and CAR. When a search times out, a WARN level log entry is made with\n+information that can help identify problematic searches and improve our routing methods. There are\n+no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n+search-window.\n+\n+The search abort after this duration and any paths found are returned to the client.\n+\"\"\"\n+      )\n+      .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n   }\n }\n", "next_change": {"commit": "f9fec1b69eae33ab17c5e2e40cdbfce9bc7802cd", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\nindex 52486ebdb3..5eeea61849 100644\n--- a/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n+++ b/src/main/java/org/opentripplanner/standalone/config/RouterConfig.java\n", "chunk": "@@ -206,7 +226,7 @@ information that can help identify problematic searches and improve our routing\n no timeouts for the transit part of the routing search, instead configure a reasonable dynamic\n search-window.\n \n-The search abort after this duration and any paths found are returned to the client.\n+The search aborts after this duration and any paths found are returned to the client.\n \"\"\"\n       )\n       .asDuration(DEFAULT_STREET_ROUTING_TIMEOUT);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "76160af2495c0d7ec8ccda2d1a8c018d0e37ced1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/76160af2495c0d7ec8ccda2d1a8c018d0e37ced1", "message": "Documentation", "committedDate": "2020-06-17T12:27:16Z", "type": "commit"}, {"oid": "76160af2495c0d7ec8ccda2d1a8c018d0e37ced1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/76160af2495c0d7ec8ccda2d1a8c018d0e37ced1", "message": "Documentation", "committedDate": "2020-06-17T12:27:16Z", "type": "forcePushed"}, {"oid": "cdceeeb3dae2646a9f1495b4dc869d002ead2f43", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/cdceeeb3dae2646a9f1495b4dc869d002ead2f43", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-25T08:21:13Z", "type": "commit"}, {"oid": "d29aa8ba9931b7b1534e2ec647a04faa286c462b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d29aa8ba9931b7b1534e2ec647a04faa286c462b", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-25T09:11:46Z", "type": "commit"}, {"oid": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "message": "Extracted interface from UpdaterConfig and added getBikeRentalServiceDirectoryUrl to the interface", "committedDate": "2020-06-25T09:57:45Z", "type": "commit"}, {"oid": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "message": "Extracted interface from UpdaterConfig and added getBikeRentalServiceDirectoryUrl to the interface", "committedDate": "2020-06-25T09:57:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5NjQ3NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r446096474", "body": "FYI: The `UpdaterDataSourceConfig` is still a bit \"stange\", but not part of this PR. I might look at it later. ", "bodyText": "FYI: The UpdaterDataSourceConfig is still a bit \"stange\", but not part of this PR. I might look at it later.", "bodyHTML": "<p dir=\"auto\">FYI: The <code>UpdaterDataSourceConfig</code> is still a bit \"stange\", but not part of this PR. I might look at it later.</p>", "author": "t2gran", "createdAt": "2020-06-26T10:15:00Z", "path": "src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/GbfsUpdaterSourceConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opentripplanner.ext.bikerentalservicedirectory;\n+\n+import org.opentripplanner.updater.UpdaterDataSourceConfig;\n+import org.opentripplanner.updater.UpdaterDataSourceParameters;\n+\n+public class GbfsUpdaterSourceConfig implements UpdaterDataSourceConfig {", "originalCommit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "782d552cba9af97d93dfb0b35d1e0096d8602b0e", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/GbfsUpdaterSourceConfig.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/GbfsUpdaterSourceConfig.java\ndeleted file mode 100644\nindex 1de984b686..0000000000\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/GbfsUpdaterSourceConfig.java\n+++ /dev/null\n", "chunk": "@@ -1,25 +0,0 @@\n-package org.opentripplanner.ext.bikerentalservicedirectory;\n-\n-import org.opentripplanner.updater.UpdaterDataSourceConfig;\n-import org.opentripplanner.updater.UpdaterDataSourceParameters;\n-\n-public class GbfsUpdaterSourceConfig implements UpdaterDataSourceConfig {\n-\n-  private static final String DEFAULT_UPDATER_TYPE = \"gbfs\";\n-\n-  private final UpdaterDataSourceParameters updaterSourceParameters;\n-\n-  public GbfsUpdaterSourceConfig(UpdaterDataSourceParameters sourceParameters) {\n-    this.updaterSourceParameters = sourceParameters;\n-  }\n-\n-  @Override\n-  public String getType() {\n-    return DEFAULT_UPDATER_TYPE;\n-  }\n-\n-  @Override\n-  public UpdaterDataSourceParameters getUpdaterSourceParameters() {\n-    return updaterSourceParameters;\n-  }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwMjU3OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r446102578", "body": "The boxing here is unnecessary - I will remove it. ", "bodyText": "The boxing here is unnecessary - I will remove it.", "bodyHTML": "<p dir=\"auto\">The boxing here is unnecessary - I will remove it.</p>", "author": "t2gran", "createdAt": "2020-06-26T10:28:25Z", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -41,11 +41,17 @@\n \n     private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(Graph graph, UpdaterConfig updaterConfig) {\n+    public static void setupGraph(\n+        Graph graph,\n+        UpdaterParameters updaterParameters\n+    ) {\n \n-        List<GraphUpdater> updaters = new ArrayList<>();\n+        List<GraphUpdater> updaters = new ArrayList<>(createUpdatersFromConfig(updaterParameters));", "originalCommit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe9a3093b263e393965ab16530cffc9d4398e836", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex baf3a90a9f..710046e88e 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -39,19 +40,22 @@ import java.util.List;\n  */\n public abstract class GraphUpdaterConfigurator {\n \n-    private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n     public static void setupGraph(\n         Graph graph,\n         UpdaterParameters updaterParameters\n     ) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        List<GraphUpdater> updaters = new ArrayList<>(createUpdatersFromConfig(updaterParameters));\n-\n-        if (updaterParameters.bikeRentalServiceDirectoryUrl() != null) {\n-            updaters.addAll(BikeRentalServiceDirectoryFetcher\n-                .createUpdatersFromEndpoint(updaterParameters.bikeRentalServiceDirectoryUrl()));\n-        }\n+        updaters.addAll(\n+            createUpdatersFromConfig(updaterParameters)\n+        );\n+        updaters.addAll(\n+            fetchBikeRentalServicesFromOnlineDirectory(\n+                updaterParameters.bikeRentalServiceDirectoryUrl()\n+            )\n+        );\n \n         setupUpdaters(graph, updaters);\n         GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph, updaters);\n", "next_change": {"commit": "803296083d4a9314d4518c9f204f280d760edd7b", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex 710046e88e..9218fd7890 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -44,16 +44,16 @@ public abstract class GraphUpdaterConfigurator {\n \n     public static void setupGraph(\n         Graph graph,\n-        UpdaterParameters updaterParameters\n+        UpdatersParameters updatersParameters\n     ) {\n         List<GraphUpdater> updaters = new ArrayList<>();\n \n         updaters.addAll(\n-            createUpdatersFromConfig(updaterParameters)\n+            createUpdatersFromConfig(updatersParameters)\n         );\n         updaters.addAll(\n             fetchBikeRentalServicesFromOnlineDirectory(\n-                updaterParameters.bikeRentalServiceDirectoryUrl()\n+                updatersParameters.bikeRentalServiceDirectoryUrl()\n             )\n         );\n \n", "next_change": {"commit": "bfd0f75842cec241d322539256acc6f7ff0cff10", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex 9218fd7890..b1938b1be2 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -53,7 +54,7 @@ public abstract class GraphUpdaterConfigurator {\n         );\n         updaters.addAll(\n             fetchBikeRentalServicesFromOnlineDirectory(\n-                updatersParameters.bikeRentalServiceDirectoryUrl()\n+                updatersParameters.getBikeRentalServiceDirectoryFetcherParameters()\n             )\n         );\n \n", "next_change": {"commit": "2cfc97060155c9d8a94b6a2f75630ef71da702ce", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex b1938b1be2..6201b1b8b2 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -53,6 +52,7 @@ public abstract class GraphUpdaterConfigurator {\n             createUpdatersFromConfig(updatersParameters)\n         );\n         updaters.addAll(\n+            // Setup updaters using the BikeRentalServiceDirectoryFetcher(Sandbox)\n             fetchBikeRentalServicesFromOnlineDirectory(\n                 updatersParameters.getBikeRentalServiceDirectoryFetcherParameters()\n             )\n", "next_change": {"commit": "291dc21ad1e3e01673fdcc76f1a3f0d34c627a9c", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex 6201b1b8b2..37ba24fd7d 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -52,9 +52,9 @@ public abstract class GraphUpdaterConfigurator {\n             createUpdatersFromConfig(updatersParameters)\n         );\n         updaters.addAll(\n-            // Setup updaters using the BikeRentalServiceDirectoryFetcher(Sandbox)\n-            fetchBikeRentalServicesFromOnlineDirectory(\n-                updatersParameters.getBikeRentalServiceDirectoryFetcherParameters()\n+            // Setup updaters using the VehicleRentalServiceDirectoryFetcher(Sandbox)\n+            fetchVehicleRentalServicesFromOnlineDirectory(\n+                updatersParameters.getVehicleRentalServiceDirectoryFetcherParameters()\n             )\n         );\n \n", "next_change": {"commit": "7cc2c2e857f5af7cdacb4374ae389c514f68d487", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex 37ba24fd7d..e51186d683 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -63,7 +62,7 @@ public abstract class GraphUpdaterConfigurator {\n         updaterManager.startUpdaters();\n \n         // Stop the updater manager if it contains nothing\n-        if (updaterManager.size() == 0) {\n+        if (updaterManager.numberOfUpdaters() == 0) {\n             updaterManager.stop();\n         }\n         // Otherwise add it to the graph\n", "next_change": {"commit": "9c9dd613489a348d2381acdcbeab8f86589154d7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex e51186d683..c282a541ff 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -39,111 +42,110 @@ import org.slf4j.LoggerFactory;\n  */\n public abstract class GraphUpdaterConfigurator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(\n-        Graph graph,\n-        UpdatersParameters updatersParameters\n-    ) {\n-        List<GraphUpdater> updaters = new ArrayList<>();\n+  public static void setupGraph(Graph graph, UpdatersParameters updatersParameters) {\n+    List<GraphUpdater> updaters = new ArrayList<>();\n \n-        updaters.addAll(\n-            createUpdatersFromConfig(updatersParameters)\n-        );\n-        updaters.addAll(\n-            // Setup updaters using the VehicleRentalServiceDirectoryFetcher(Sandbox)\n-            fetchVehicleRentalServicesFromOnlineDirectory(\n-                updatersParameters.getVehicleRentalServiceDirectoryFetcherParameters()\n-            )\n-        );\n+    updaters.addAll(createUpdatersFromConfig(updatersParameters));\n+    updaters.addAll(\n+      // Setup updaters using the VehicleRentalServiceDirectoryFetcher(Sandbox)\n+      fetchVehicleRentalServicesFromOnlineDirectory(\n+        updatersParameters.getVehicleRentalServiceDirectoryFetcherParameters()\n+      )\n+    );\n \n-        setupUpdaters(graph, updaters);\n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph, updaters);\n-        updaterManager.startUpdaters();\n+    setupUpdaters(graph, updaters);\n+    GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph, updaters);\n+    updaterManager.startUpdaters();\n \n-        // Stop the updater manager if it contains nothing\n-        if (updaterManager.numberOfUpdaters() == 0) {\n-            updaterManager.stop();\n-        }\n-        // Otherwise add it to the graph\n-        else {\n-            graph.updaterManager = updaterManager;\n-        }\n+    // Stop the updater manager if it contains nothing\n+    if (updaterManager.numberOfUpdaters() == 0) {\n+      updaterManager.stop();\n     }\n-\n-    public static void shutdownGraph(Graph graph) {\n-        GraphUpdaterManager updaterManager = graph.updaterManager;\n-        if (updaterManager != null) {\n-            LOG.info(\"Stopping updater manager with \" + updaterManager.numberOfUpdaters() + \" updaters.\");\n-            updaterManager.stop();\n-        }\n+    // Otherwise add it to the graph\n+    else {\n+      graph.updaterManager = updaterManager;\n     }\n+  }\n \n-    public static void setupUpdaters(Graph graph, List<GraphUpdater> updaters) {\n-        for (GraphUpdater updater : updaters) {\n-            try {\n-                updater.setup(graph);\n-            } catch (Exception e) {\n-                LOG.warn(\"Failed to setup updater {}\", updater.getConfigRef());\n-            }\n-        }\n+  public static void shutdownGraph(Graph graph) {\n+    GraphUpdaterManager updaterManager = graph.updaterManager;\n+    if (updaterManager != null) {\n+      LOG.info(\"Stopping updater manager with \" + updaterManager.numberOfUpdaters() + \" updaters.\");\n+      updaterManager.stop();\n     }\n+  }\n \n+  public static void setupUpdaters(Graph graph, List<GraphUpdater> updaters) {\n+    for (GraphUpdater updater : updaters) {\n+      try {\n+        updater.setup(graph);\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to setup updater {}\", updater.getConfigRef());\n+      }\n+    }\n+  }\n \n-    /* private methods */\n+  /* private methods */\n \n-    /**\n-     * Use the online UpdaterDirectoryService to fetch VehicleRental updaters.\n-     */\n-    private static List<GraphUpdater> fetchVehicleRentalServicesFromOnlineDirectory(\n-        VehicleRentalServiceDirectoryFetcherParameters parameters\n-    ) {\n-        if (parameters == null) { return List.of(); }\n-        return VehicleRentalServiceDirectoryFetcher.createUpdatersFromEndpoint(parameters);\n+  /**\n+   * Use the online UpdaterDirectoryService to fetch VehicleRental updaters.\n+   */\n+  private static List<GraphUpdater> fetchVehicleRentalServicesFromOnlineDirectory(\n+    VehicleRentalServiceDirectoryFetcherParameters parameters\n+  ) {\n+    if (parameters == null) {\n+      return List.of();\n     }\n+    return VehicleRentalServiceDirectoryFetcher.createUpdatersFromEndpoint(parameters);\n+  }\n \n-    /**\n-     * @return a list of GraphUpdaters created from the configuration\n-     */\n-    private static List<GraphUpdater> createUpdatersFromConfig(\n-        UpdatersParameters config\n-    ) {\n-        List<GraphUpdater> updaters = new ArrayList<>();\n+  /**\n+   * @return a list of GraphUpdaters created from the configuration\n+   */\n+  private static List<GraphUpdater> createUpdatersFromConfig(UpdatersParameters config) {\n+    List<GraphUpdater> updaters = new ArrayList<>();\n \n-        for (VehicleRentalUpdaterParameters configItem : config.getVehicleRentalParameters()) {\n-            updaters.add(new VehicleRentalUpdater(configItem));\n-        }\n-        for (GtfsRealtimeAlertsUpdaterParameters configItem : config.getGtfsRealtimeAlertsUpdaterParameters()) {\n-            updaters.add(new GtfsRealtimeAlertsUpdater(configItem));\n-        }\n-        for (PollingStoptimeUpdaterParameters configItem : config.getPollingStoptimeUpdaterParameters()) {\n-            updaters.add(new PollingStoptimeUpdater(configItem));\n-        }\n-        for (SiriETUpdaterParameters configItem : config.getSiriETUpdaterParameters()) {\n-            updaters.add(new SiriETUpdater(configItem));\n-        }\n-        for (SiriETGooglePubsubUpdaterParameters configItem : config.getSiriETGooglePubsubUpdaterParameters()) {\n-            updaters.add(new SiriETGooglePubsubUpdater(configItem));\n-        }\n-        for (SiriSXUpdaterParameters configItem : config.getSiriSXUpdaterParameters()) {\n-            updaters.add(new SiriSXUpdater(configItem));\n-        }\n-        for (SiriVMUpdaterParameters configItem : config.getSiriVMUpdaterParameters()) {\n-            updaters.add(new SiriVMUpdater(configItem));\n-        }\n-        for (WebsocketGtfsRealtimeUpdaterParameters configItem : config.getWebsocketGtfsRealtimeUpdaterParameters()) {\n-            updaters.add(new WebsocketGtfsRealtimeUpdater(configItem));\n-        }\n-        for (MqttGtfsRealtimeUpdaterParameters configItem : config.getMqttGtfsRealtimeUpdaterParameters()) {\n-            updaters.add(new MqttGtfsRealtimeUpdater(configItem));\n-        }\n-        for (VehicleParkingUpdaterParameters configItem : config.getVehicleParkingUpdaterParameters()) {\n-            updaters.add(new VehicleParkingUpdater(configItem));\n-        }\n-        for (WFSNotePollingGraphUpdaterParameters configItem : config.getWinkkiPollingGraphUpdaterParameters()) {\n-            updaters.add(new WinkkiPollingGraphUpdater(configItem));\n-        }\n-\n-        return updaters;\n+    for (VehicleRentalUpdaterParameters configItem : config.getVehicleRentalParameters()) {\n+      var source = VehicleRentalDataSourceFactory.create(configItem.sourceParameters());\n+      updaters.add(new VehicleRentalUpdater(configItem, source));\n+    }\n+    for (GtfsRealtimeAlertsUpdaterParameters configItem : config.getGtfsRealtimeAlertsUpdaterParameters()) {\n+      updaters.add(new GtfsRealtimeAlertsUpdater(configItem));\n+    }\n+    for (PollingStoptimeUpdaterParameters configItem : config.getPollingStoptimeUpdaterParameters()) {\n+      updaters.add(new PollingStoptimeUpdater(configItem));\n+    }\n+    for (var configItem : config.getVehiclePositionsUpdaterParameters()) {\n+      updaters.add(new PollingVehiclePositionUpdater(configItem));\n+    }\n+    for (SiriETUpdaterParameters configItem : config.getSiriETUpdaterParameters()) {\n+      updaters.add(new SiriETUpdater(configItem));\n+    }\n+    for (SiriETGooglePubsubUpdaterParameters configItem : config.getSiriETGooglePubsubUpdaterParameters()) {\n+      updaters.add(new SiriETGooglePubsubUpdater(configItem));\n     }\n+    for (SiriSXUpdaterParameters configItem : config.getSiriSXUpdaterParameters()) {\n+      updaters.add(new SiriSXUpdater(configItem));\n+    }\n+    for (SiriVMUpdaterParameters configItem : config.getSiriVMUpdaterParameters()) {\n+      updaters.add(new SiriVMUpdater(configItem));\n+    }\n+    for (WebsocketGtfsRealtimeUpdaterParameters configItem : config.getWebsocketGtfsRealtimeUpdaterParameters()) {\n+      updaters.add(new WebsocketGtfsRealtimeUpdater(configItem));\n+    }\n+    for (MqttGtfsRealtimeUpdaterParameters configItem : config.getMqttGtfsRealtimeUpdaterParameters()) {\n+      updaters.add(new MqttGtfsRealtimeUpdater(configItem));\n+    }\n+    for (VehicleParkingUpdaterParameters configItem : config.getVehicleParkingUpdaterParameters()) {\n+      var source = VehicleParkingDataSourceFactory.create(configItem);\n+      updaters.add(new VehicleParkingUpdater(configItem, source));\n+    }\n+    for (WFSNotePollingGraphUpdaterParameters configItem : config.getWinkkiPollingGraphUpdaterParameters()) {\n+      updaters.add(new WinkkiPollingGraphUpdater(configItem));\n+    }\n+\n+    return updaters;\n+  }\n }\n", "next_change": {"commit": "f3bc2d34cfa00ed37ea54e609d43d42e34c923c7", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\nindex c282a541ff..10bc8c402b 100644\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n", "chunk": "@@ -145,6 +149,12 @@ public abstract class GraphUpdaterConfigurator {\n     for (WFSNotePollingGraphUpdaterParameters configItem : config.getWinkkiPollingGraphUpdaterParameters()) {\n       updaters.add(new WinkkiPollingGraphUpdater(configItem));\n     }\n+    for (SiriAzureETUpdaterParameters configItem : config.getSiriAzureETUpdaterParameters()) {\n+      updaters.add(new SiriAzureETUpdater(configItem));\n+    }\n+    for (SiriAzureSXUpdaterParameters configItem : config.getSiriAzureSXUpdaterParameters()) {\n+      updaters.add(new SiriAzureSXUpdater(configItem));\n+    }\n \n     return updaters;\n   }\n", "next_change": {"commit": "89aa0fafc82a536074e2a1cef54aa67db0d41ee0", "changed_code": [{"header": "diff --git a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java b/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\ndeleted file mode 100644\nindex 10bc8c402b..0000000000\n--- a/src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java\n+++ /dev/null\n", "chunk": "@@ -1,161 +0,0 @@\n-package org.opentripplanner.updater;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.opentripplanner.ext.siri.updater.SiriETGooglePubsubUpdater;\n-import org.opentripplanner.ext.siri.updater.SiriETGooglePubsubUpdaterParameters;\n-import org.opentripplanner.ext.siri.updater.SiriETUpdater;\n-import org.opentripplanner.ext.siri.updater.SiriETUpdaterParameters;\n-import org.opentripplanner.ext.siri.updater.SiriSXUpdater;\n-import org.opentripplanner.ext.siri.updater.SiriSXUpdaterParameters;\n-import org.opentripplanner.ext.siri.updater.SiriVMUpdater;\n-import org.opentripplanner.ext.siri.updater.SiriVMUpdaterParameters;\n-import org.opentripplanner.ext.siri.updater.azure.SiriAzureETUpdater;\n-import org.opentripplanner.ext.siri.updater.azure.SiriAzureETUpdaterParameters;\n-import org.opentripplanner.ext.siri.updater.azure.SiriAzureSXUpdater;\n-import org.opentripplanner.ext.siri.updater.azure.SiriAzureSXUpdaterParameters;\n-import org.opentripplanner.ext.vehiclerentalservicedirectory.VehicleRentalServiceDirectoryFetcher;\n-import org.opentripplanner.ext.vehiclerentalservicedirectory.api.VehicleRentalServiceDirectoryFetcherParameters;\n-import org.opentripplanner.routing.graph.Graph;\n-import org.opentripplanner.updater.alerts.GtfsRealtimeAlertsUpdater;\n-import org.opentripplanner.updater.alerts.GtfsRealtimeAlertsUpdaterParameters;\n-import org.opentripplanner.updater.stoptime.MqttGtfsRealtimeUpdater;\n-import org.opentripplanner.updater.stoptime.MqttGtfsRealtimeUpdaterParameters;\n-import org.opentripplanner.updater.stoptime.PollingStoptimeUpdater;\n-import org.opentripplanner.updater.stoptime.PollingStoptimeUpdaterParameters;\n-import org.opentripplanner.updater.stoptime.WebsocketGtfsRealtimeUpdater;\n-import org.opentripplanner.updater.stoptime.WebsocketGtfsRealtimeUpdaterParameters;\n-import org.opentripplanner.updater.street_notes.WFSNotePollingGraphUpdaterParameters;\n-import org.opentripplanner.updater.street_notes.WinkkiPollingGraphUpdater;\n-import org.opentripplanner.updater.vehicle_parking.VehicleParkingDataSourceFactory;\n-import org.opentripplanner.updater.vehicle_parking.VehicleParkingUpdater;\n-import org.opentripplanner.updater.vehicle_parking.VehicleParkingUpdaterParameters;\n-import org.opentripplanner.updater.vehicle_positions.PollingVehiclePositionUpdater;\n-import org.opentripplanner.updater.vehicle_rental.VehicleRentalUpdater;\n-import org.opentripplanner.updater.vehicle_rental.VehicleRentalUpdaterParameters;\n-import org.opentripplanner.updater.vehicle_rental.datasources.VehicleRentalDataSourceFactory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Sets up and starts all the graph updaters.\n- * <p>\n- * Updaters are instantiated based on the updater parameters contained in UpdaterConfig. Updaters\n- * are then setup by providing the graph as a parameter. Finally, the updaters are added to the\n- * GraphUpdaterManager.\n- */\n-public abstract class GraphUpdaterConfigurator {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n-\n-  public static void setupGraph(Graph graph, UpdatersParameters updatersParameters) {\n-    List<GraphUpdater> updaters = new ArrayList<>();\n-\n-    updaters.addAll(createUpdatersFromConfig(updatersParameters));\n-    updaters.addAll(\n-      // Setup updaters using the VehicleRentalServiceDirectoryFetcher(Sandbox)\n-      fetchVehicleRentalServicesFromOnlineDirectory(\n-        updatersParameters.getVehicleRentalServiceDirectoryFetcherParameters()\n-      )\n-    );\n-\n-    setupUpdaters(graph, updaters);\n-    GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph, updaters);\n-    updaterManager.startUpdaters();\n-\n-    // Stop the updater manager if it contains nothing\n-    if (updaterManager.numberOfUpdaters() == 0) {\n-      updaterManager.stop();\n-    }\n-    // Otherwise add it to the graph\n-    else {\n-      graph.updaterManager = updaterManager;\n-    }\n-  }\n-\n-  public static void shutdownGraph(Graph graph) {\n-    GraphUpdaterManager updaterManager = graph.updaterManager;\n-    if (updaterManager != null) {\n-      LOG.info(\"Stopping updater manager with \" + updaterManager.numberOfUpdaters() + \" updaters.\");\n-      updaterManager.stop();\n-    }\n-  }\n-\n-  public static void setupUpdaters(Graph graph, List<GraphUpdater> updaters) {\n-    for (GraphUpdater updater : updaters) {\n-      try {\n-        updater.setup(graph);\n-      } catch (Exception e) {\n-        LOG.warn(\"Failed to setup updater {}\", updater.getConfigRef());\n-      }\n-    }\n-  }\n-\n-  /* private methods */\n-\n-  /**\n-   * Use the online UpdaterDirectoryService to fetch VehicleRental updaters.\n-   */\n-  private static List<GraphUpdater> fetchVehicleRentalServicesFromOnlineDirectory(\n-    VehicleRentalServiceDirectoryFetcherParameters parameters\n-  ) {\n-    if (parameters == null) {\n-      return List.of();\n-    }\n-    return VehicleRentalServiceDirectoryFetcher.createUpdatersFromEndpoint(parameters);\n-  }\n-\n-  /**\n-   * @return a list of GraphUpdaters created from the configuration\n-   */\n-  private static List<GraphUpdater> createUpdatersFromConfig(UpdatersParameters config) {\n-    List<GraphUpdater> updaters = new ArrayList<>();\n-\n-    for (VehicleRentalUpdaterParameters configItem : config.getVehicleRentalParameters()) {\n-      var source = VehicleRentalDataSourceFactory.create(configItem.sourceParameters());\n-      updaters.add(new VehicleRentalUpdater(configItem, source));\n-    }\n-    for (GtfsRealtimeAlertsUpdaterParameters configItem : config.getGtfsRealtimeAlertsUpdaterParameters()) {\n-      updaters.add(new GtfsRealtimeAlertsUpdater(configItem));\n-    }\n-    for (PollingStoptimeUpdaterParameters configItem : config.getPollingStoptimeUpdaterParameters()) {\n-      updaters.add(new PollingStoptimeUpdater(configItem));\n-    }\n-    for (var configItem : config.getVehiclePositionsUpdaterParameters()) {\n-      updaters.add(new PollingVehiclePositionUpdater(configItem));\n-    }\n-    for (SiriETUpdaterParameters configItem : config.getSiriETUpdaterParameters()) {\n-      updaters.add(new SiriETUpdater(configItem));\n-    }\n-    for (SiriETGooglePubsubUpdaterParameters configItem : config.getSiriETGooglePubsubUpdaterParameters()) {\n-      updaters.add(new SiriETGooglePubsubUpdater(configItem));\n-    }\n-    for (SiriSXUpdaterParameters configItem : config.getSiriSXUpdaterParameters()) {\n-      updaters.add(new SiriSXUpdater(configItem));\n-    }\n-    for (SiriVMUpdaterParameters configItem : config.getSiriVMUpdaterParameters()) {\n-      updaters.add(new SiriVMUpdater(configItem));\n-    }\n-    for (WebsocketGtfsRealtimeUpdaterParameters configItem : config.getWebsocketGtfsRealtimeUpdaterParameters()) {\n-      updaters.add(new WebsocketGtfsRealtimeUpdater(configItem));\n-    }\n-    for (MqttGtfsRealtimeUpdaterParameters configItem : config.getMqttGtfsRealtimeUpdaterParameters()) {\n-      updaters.add(new MqttGtfsRealtimeUpdater(configItem));\n-    }\n-    for (VehicleParkingUpdaterParameters configItem : config.getVehicleParkingUpdaterParameters()) {\n-      var source = VehicleParkingDataSourceFactory.create(configItem);\n-      updaters.add(new VehicleParkingUpdater(configItem, source));\n-    }\n-    for (WFSNotePollingGraphUpdaterParameters configItem : config.getWinkkiPollingGraphUpdaterParameters()) {\n-      updaters.add(new WinkkiPollingGraphUpdater(configItem));\n-    }\n-    for (SiriAzureETUpdaterParameters configItem : config.getSiriAzureETUpdaterParameters()) {\n-      updaters.add(new SiriAzureETUpdater(configItem));\n-    }\n-    for (SiriAzureSXUpdaterParameters configItem : config.getSiriAzureSXUpdaterParameters()) {\n-      updaters.add(new SiriAzureSXUpdater(configItem));\n-    }\n-\n-    return updaters;\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwNzEyOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3090#discussion_r446107129", "body": "The getData method should be refactored to take in a type-safe argument when we have it. I will fix this.", "bodyText": "The getData method should be refactored to take in a type-safe argument when we have it. I will fix this.", "bodyHTML": "<p dir=\"auto\">The getData method should be refactored to take in a type-safe argument when we have it. I will fix this.</p>", "author": "t2gran", "createdAt": "2020-06-26T10:39:26Z", "path": "src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.opentripplanner.ext.bikerentalservicedirectory;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.opentripplanner.updater.GraphUpdater;\n+import org.opentripplanner.updater.bike_rental.BikeRentalUpdater;\n+import org.opentripplanner.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Fetches GBFS endpoints from the Bikeservice component located at\n+ * https://github.com/entur/bikeservice, which is an API for aggregating GBFS endpoints.\n+ */\n+public class BikeRentalServiceDirectoryFetcher {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BikeRentalServiceDirectoryFetcher.class);\n+\n+  private static final int DEFAULT_FREQUENCY_SEC = 15;\n+\n+  private static final String GBFS_JSON_FILENAME = \"gbfs.json\";\n+\n+  public static List<GraphUpdater> createUpdatersFromEndpoint(URI url) {\n+\n+    LOG.info(\"Fetching list of updaters from {}\", url);\n+\n+    List<GraphUpdater> updaters = new ArrayList<>();\n+\n+    try {\n+      InputStream is = HttpUtils.getData(url.toString());", "originalCommit": "49ac74015e01bbfad12722f71a1c494a5d3f0ff6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe9a3093b263e393965ab16530cffc9d4398e836", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex 3461180e21..befa74d258 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -32,8 +32,9 @@ public class BikeRentalServiceDirectoryFetcher {\n     List<GraphUpdater> updaters = new ArrayList<>();\n \n     try {\n-      InputStream is = HttpUtils.getData(url.toString());\n+      InputStream is = HttpUtils.getData(url);\n       JsonNode node = (new ObjectMapper()).readTree(is);\n+\n       for (JsonNode operator : node.get(\"operators\")) {\n         String network = operator.get(\"name\").asText();\n         String updaterUrl = adjustUrlForUpdater(operator.get(\"url\").asText());\n", "next_change": {"commit": "782d552cba9af97d93dfb0b35d1e0096d8602b0e", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex befa74d258..06617bd687 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -38,14 +39,17 @@ public class BikeRentalServiceDirectoryFetcher {\n       for (JsonNode operator : node.get(\"operators\")) {\n         String network = operator.get(\"name\").asText();\n         String updaterUrl = adjustUrlForUpdater(operator.get(\"url\").asText());\n+        GbfsDataSourceParameters dataSource = new GbfsDataSourceParameters(\n+            DataSourceType.GBFS,\n+            updaterUrl\n+        );\n \n-        GbfsDataSourceParameters dataSource = new GbfsDataSourceParameters(updaterUrl, network);\n-        GbfsUpdaterSourceConfig gbfsUpdaterSourceConfig = new GbfsUpdaterSourceConfig(dataSource);\n         BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(\n-            gbfsUpdaterSourceConfig,\n+            \"bike-rental-service-directory:\" + network,\n+            network,\n             updaterUrl,\n             DEFAULT_FREQUENCY_SEC,\n-            network\n+            dataSource\n         );\n         LOG.info(\"Fetched updater info for {} at url {}\", network, updaterUrl);\n \n", "next_change": {"commit": "9d9219a2197524c5f290fc144b495fb69ec9329c", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex 06617bd687..512d572a92 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -44,12 +44,9 @@ public class BikeRentalServiceDirectoryFetcher {\n             updaterUrl\n         );\n \n-        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(\n-            \"bike-rental-service-directory:\" + network,\n-            network,\n-            updaterUrl,\n-            DEFAULT_FREQUENCY_SEC,\n-            dataSource\n+        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(dataSource,\n+            \"bike-rental-service-directory:\" + network, network, updaterUrl,\n+            DEFAULT_FREQUENCY_SEC\n         );\n         LOG.info(\"Fetched updater info for {} at url {}\", network, updaterUrl);\n \n", "next_change": {"commit": "b88e09cd461c2624ddd3afd3fd8dbad8506985a8", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex 512d572a92..6f04392ec8 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -39,14 +39,12 @@ public class BikeRentalServiceDirectoryFetcher {\n       for (JsonNode operator : node.get(\"operators\")) {\n         String network = operator.get(\"name\").asText();\n         String updaterUrl = adjustUrlForUpdater(operator.get(\"url\").asText());\n-        GbfsDataSourceParameters dataSource = new GbfsDataSourceParameters(\n-            DataSourceType.GBFS,\n-            updaterUrl\n-        );\n \n-        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(dataSource,\n-            \"bike-rental-service-directory:\" + network, network, updaterUrl,\n-            DEFAULT_FREQUENCY_SEC\n+        BikeRentalParameters bikeRentalParameters = new BikeRentalParameters(\n+            \"bike-rental-service-directory:\" + network,\n+            updaterUrl,\n+            DEFAULT_FREQUENCY_SEC,\n+            new GbfsDataSourceParameters(updaterUrl, network)\n         );\n         LOG.info(\"Fetched updater info for {} at url {}\", network, updaterUrl);\n \n", "next_change": {"commit": "bfd0f75842cec241d322539256acc6f7ff0cff10", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex 6f04392ec8..e9a2f156d2 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -53,7 +54,14 @@ public class BikeRentalServiceDirectoryFetcher {\n       }\n     }\n     catch (java.io.IOException e) {\n-      LOG.warn(\"Error fetching list of bike rental endpoints from {}\", url, e);\n+      LOG.warn(\"Error fetching list of bike rental endpoints from {}\", parameters.getUrl(), e);\n+    }\n+    catch (NullPointerException e) {\n+      LOG.warn(\n+          \"Error reading json from {}. Are json tag names configured properly?\",\n+          parameters.getUrl(),\n+          e\n+      );\n     }\n \n     LOG.info(\"{} updaters fetched\", updaters.size());\n", "next_change": {"commit": "b670c3e5e6ff0b8448a8ab4cfd23bd7d42d498ec", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex e9a2f156d2..e4a4010a1c 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -56,13 +77,6 @@ public class BikeRentalServiceDirectoryFetcher {\n     catch (java.io.IOException e) {\n       LOG.warn(\"Error fetching list of bike rental endpoints from {}\", parameters.getUrl(), e);\n     }\n-    catch (NullPointerException e) {\n-      LOG.warn(\n-          \"Error reading json from {}. Are json tag names configured properly?\",\n-          parameters.getUrl(),\n-          e\n-      );\n-    }\n \n     LOG.info(\"{} updaters fetched\", updaters.size());\n \n", "next_change": {"commit": "48b6746fa2c665d0e65daff0848a408ca22de7f4", "changed_code": [{"header": "diff --git a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\nindex e4a4010a1c..6dda7d144a 100644\n--- a/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n+++ b/src/ext/java/org/opentripplanner/ext/bikerentalservicedirectory/BikeRentalServiceDirectoryFetcher.java\n", "chunk": "@@ -82,16 +77,4 @@ public class BikeRentalServiceDirectoryFetcher {\n \n     return updaters;\n   }\n-\n-  /**\n-   * The GBFS standard defines \"gbfs.json\" as the entrypoint, while\n-   * {@link BikeRentalDataSource} expects the base url and\n-   * does not look at \"gbfs.json\". This method adjusts the URL to what the BikeRentalDataSource\n-   * expects.\n-   */\n-  private static String adjustUrlForUpdater(String url) {\n-    return url.endsWith(GBFS_JSON_FILENAME)\n-        ? url.substring(0, url.length() - GBFS_JSON_FILENAME.length())\n-        : url;\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "fe9a3093b263e393965ab16530cffc9d4398e836", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fe9a3093b263e393965ab16530cffc9d4398e836", "message": "Small code cleanups.", "committedDate": "2020-06-26T10:49:09Z", "type": "commit"}, {"oid": "8a2dd02198a1566a314a287a191f4557ba10c1b1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8a2dd02198a1566a314a287a191f4557ba10c1b1", "message": "Merge branch 'dev-2.x' into otp2_bikerental_endpoint", "committedDate": "2020-06-26T10:51:48Z", "type": "commit"}, {"oid": "5ec39a081ad871b5d2173f904af0907d668ded66", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5ec39a081ad871b5d2173f904af0907d668ded66", "message": "Small code cleanups - fix compilation error.", "committedDate": "2020-06-26T11:11:14Z", "type": "commit"}]}