{"pr_number": 659, "pr_title": "#604 - rpm upload", "pr_author": "olenagerasimova", "pr_createdAt": "2020-10-05T13:57:38Z", "pr_url": "https://github.com/artipie/artipie/pull/659", "timeline": [{"oid": "418f5042992787336d80c543d11e27d4fef599c7", "url": "https://github.com/artipie/artipie/commit/418f5042992787336d80c543d11e27d4fef599c7", "message": "#604 - rpm upload", "committedDate": "2020-10-05T13:56:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MjgxMg==", "url": "https://github.com/artipie/artipie/pull/659#discussion_r499642812", "body": "@olenagerasimova I'd suggest to use `ByteStreams.copy` from Guava library here for copying of bytes, it will simplify code a little bit", "bodyText": "@olenagerasimova I'd suggest to use ByteStreams.copy from Guava library here for copying of bytes, it will simplify code a little bit", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/olenagerasimova/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/olenagerasimova\">@olenagerasimova</a> I'd suggest to use <code>ByteStreams.copy</code> from Guava library here for copying of bytes, it will simplify code a little bit</p>", "author": "olegmoz", "createdAt": "2020-10-05T14:31:00Z", "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.rpm;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * IT case for RPM repository.\n+ * @since 0.12\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public final class RpmITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.configs());\n+        this.port = this.server.start();\n+    }\n+\n+    @Test\n+    void addsRpm() throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\"http://localhost:%s/my-rpm/time-1.7-45.el7.x86_64.rpm\", this.port)\n+        ).openConnection();\n+        con.setRequestMethod(\"PUT\");\n+        con.setDoOutput(true);\n+        try (OutputStream out = con.getOutputStream()) {\n+            final byte[] input = new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes();\n+            out.write(input, 0, input.length);\n+        }", "originalCommit": "418f5042992787336d80c543d11e27d4fef599c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe5a5f0f14fd0aeccd531cee0448abdb1bc4b510", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex caf91c19..37d7c986 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -68,21 +69,21 @@ public final class RpmITCase {\n \n     @BeforeEach\n     void init() throws IOException {\n-        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.configs());\n+        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.config());\n         this.port = this.server.start();\n     }\n \n     @Test\n-    void addsRpm() throws Exception {\n+    void addsRpmAndCreatesRepodata() throws Exception {\n         final HttpURLConnection con = (HttpURLConnection) new URL(\n             String.format(\"http://localhost:%s/my-rpm/time-1.7-45.el7.x86_64.rpm\", this.port)\n         ).openConnection();\n         con.setRequestMethod(\"PUT\");\n         con.setDoOutput(true);\n-        try (OutputStream out = con.getOutputStream()) {\n-            final byte[] input = new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes();\n-            out.write(input, 0, input.length);\n-        }\n+        ByteStreams.copy(\n+            new ByteArrayInputStream(new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes()),\n+            con.getOutputStream()\n+        );\n         MatcherAssert.assertThat(\n             \"Response status is 202\",\n             con.getResponseCode(),\n", "next_change": {"commit": "48577c591f1a2ae146b0d2d2e0b452624ef5aa52", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 37d7c986..605ea663 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -91,31 +112,70 @@ public final class RpmITCase {\n         );\n         MatcherAssert.assertThat(\n             \"Repository xml indexes are created\",\n-            new FileStorage(this.tmp).list(new Key.From(\"my-rpm/repodata\")).join().size(),\n+            new FileStorage(this.tmp).list(new Key.From(RpmITCase.REPO, \"repodata\")).join().size(),\n             new IsEqual<>(4)\n         );\n         con.disconnect();\n     }\n \n+    @Test\n+    void listAndInstallsRpmPackage() throws Exception {\n+        final Storage storage = new FileStorage(this.tmp);\n+        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n+            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n+        new Rpm(\n+            storage,\n+            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n+        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+        this.prepareContainer();\n+        MatcherAssert.assertThat(\n+            \"Lists 'time' package\",\n+            this.yumExec(\"list\"),\n+            new StringContainsInOrder(new ListOf<>(\"time.x86_64\", \"1.7-45.el7\"))\n+        );\n+        MatcherAssert.assertThat(\n+            \"Installs 'time' package\",\n+            this.yumExec(\"install\"),\n+            new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n+        );\n+    }\n+\n     @AfterEach\n     void close() {\n         this.server.stop();\n+        if (this.cntn != null) {\n+            this.cntn.stop();\n+        }\n+    }\n+\n+    private String yumExec(final String action) throws Exception {\n+        return this.cntn.execInContainer(\n+            \"yum\", \"-y\", \"repo-pkgs\", \"example\", action\n+        ).getStdout();\n     }\n \n-    private String config() {\n-        return Yaml.createYamlMappingBuilder().add(\n-            \"repo\",\n-            Yaml.createYamlMappingBuilder()\n-                .add(\"type\", \"rpm\")\n-                .add(\n-                    \"storage\",\n-                    Yaml.createYamlMappingBuilder()\n-                        .add(\"type\", \"fs\")\n-                        .add(\"path\", this.tmp.toString())\n-                        .build()\n-                )\n-                .build()\n-        ).build().toString();\n+    private void prepareContainer() throws IOException, InterruptedException {\n+        Testcontainers.exposeHostPorts(this.port);\n+        final Path setting = this.tmp.resolve(\"example.repo\");\n+        this.tmp.resolve(\"example.repo\").toFile().createNewFile();\n+        Files.write(\n+            setting,\n+            new ListOf<>(\n+                \"[example]\",\n+                \"name=Example Repository\",\n+                String.format(\n+                    \"baseurl=http://host.testcontainers.internal:%d/%s\", this.port, RpmITCase.REPO\n+                ),\n+                \"enabled=1\",\n+                \"gpgcheck=0\"\n+            )\n+        );\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.cntn.execInContainer(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n }\n", "next_change": {"commit": "00f5223aa7e95804cdcd2672d67a1ba3b986eea3", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 605ea663..0bc77b37 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -178,4 +181,14 @@ public final class RpmITCase {\n         this.cntn.execInContainer(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n+    private void prepareRpmRepository() {\n+        final Storage storage = new FileStorage(this.tmp);\n+        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n+            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n+        new Rpm(\n+            storage,\n+            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n+        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+    }\n+\n }\n", "next_change": {"commit": "0ba692137032c7ebc59bdf489f557a346de4e076", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 0bc77b37..8358b5ed 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -191,4 +223,14 @@ public final class RpmITCase {\n         ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n     }\n \n+    private String auth(final boolean anonymous) {\n+        String res = \"\";\n+        if (!anonymous) {\n+            res = String.format(\n+                \"%s:%s@\", ArtipieServer.ALICE.name(), ArtipieServer.ALICE.password()\n+            );\n+        }\n+        return res;\n+    }\n+\n }\n", "next_change": {"commit": "820ce9a101771433d062c3dff87ac0475381cab6", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 8358b5ed..0e2e2150 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -223,14 +220,4 @@ public final class RpmITCase {\n         ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n     }\n \n-    private String auth(final boolean anonymous) {\n-        String res = \"\";\n-        if (!anonymous) {\n-            res = String.format(\n-                \"%s:%s@\", ArtipieServer.ALICE.name(), ArtipieServer.ALICE.password()\n-            );\n-        }\n-        return res;\n-    }\n-\n }\n", "next_change": {"commit": "a4c48f4586fb85b3b66d80a6c3dbdff6a2967137", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 0e2e2150..52de7b56 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -23,201 +23,77 @@\n  */\n package com.artipie.rpm;\n \n-import com.artipie.ArtipieServer;\n-import com.artipie.RepoConfigYaml;\n-import com.artipie.RepoPermissions;\n-import com.artipie.RepoPerms;\n-import com.artipie.asto.Key;\n-import com.artipie.asto.Storage;\n-import com.artipie.asto.fs.FileStorage;\n-import com.artipie.asto.test.TestResource;\n-import com.artipie.http.rs.RsStatus;\n-import com.artipie.test.TestContainer;\n-import com.artipie.test.UrlCredsHelper;\n-import com.google.common.io.ByteStreams;\n-import java.io.ByteArrayInputStream;\n+import com.artipie.maven.MavenITCase;\n+import com.artipie.test.TestDeployment;\n import java.io.IOException;\n-import java.net.Authenticator;\n-import java.net.HttpURLConnection;\n-import java.net.PasswordAuthentication;\n-import java.net.URL;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n import org.cactoos.list.ListOf;\n-import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.hamcrest.text.StringContainsInOrder;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n import org.junit.jupiter.api.condition.OS;\n-import org.junit.jupiter.api.io.TempDir;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import org.testcontainers.Testcontainers;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.testcontainers.containers.BindMode;\n \n /**\n  * IT case for RPM repository.\n  * @since 0.12\n- * @checkstyle MagicNumberCheck (500 lines)\n- * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n-@EnabledOnOs({OS.LINUX, OS.MAC})\n+@DisabledOnOs(OS.WINDOWS)\n public final class RpmITCase {\n \n     /**\n-     * Repo name.\n+     * Test deployments.\n+     * @checkstyle VisibilityModifierCheck (10 lines)\n      */\n-    private static final String REPO = \"my-rpm\";\n-\n-    /**\n-     * Temporary directory for all tests.\n-     * @checkstyle VisibilityModifierCheck (3 lines)\n-     */\n-    @TempDir\n-    Path tmp;\n-\n-    /**\n-     * Tested Artipie server.\n-     */\n-    private ArtipieServer server;\n-\n-    /**\n-     * Artipie server port.\n-     */\n-    private int port;\n-\n-    /**\n-     * Container.\n-     */\n-    private TestContainer cntn;\n-\n-    void startArtipie(final boolean anonymous) throws IOException {\n-        final RepoConfigYaml config = new RepoConfigYaml(\"rpm\").withFileStorage(this.tmp);\n-        if (!anonymous) {\n-            config.withPermissions(\n-                new RepoPerms(\n-                    new RepoPermissions.PermissionItem(\n-                        ArtipieServer.ALICE.name(), new ListOf<>(\"*\")\n-                    )\n-                )\n-            );\n-        }\n-        this.server = new ArtipieServer(this.tmp, RpmITCase.REPO, config);\n-        this.port = this.server.start();\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void addsRpmAndCreatesRepodata(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        final HttpURLConnection con = (HttpURLConnection) new URL(\n-            String.format(\n-                \"http://localhost:%s/%s/time-1.7-45.el7.x86_64.rpm\", this.port, RpmITCase.REPO\n+    @RegisterExtension\n+    final TestDeployment containers = new TestDeployment(\n+        () -> TestDeployment.ArtipieContainer.defaultDefinition()\n+            .withRepoConfig(\"rpm/my-rpm.yml\", \"my-rpm\"),\n+        () -> new TestDeployment.ClientContainer(\"centos:centos8\")\n+            .withClasspathResourceMapping(\n+                \"rpm/time-1.7-45.el7.x86_64.rpm\", \"/w/time-1.7-45.el7.x86_64.rpm\",\n+                BindMode.READ_ONLY\n             )\n-        ).openConnection();\n-        con.setRequestMethod(\"PUT\");\n-        con.setDoOutput(true);\n-        if (!anonymous) {\n-            con.setAuthenticator(\n-                new Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(\n-                            ArtipieServer.ALICE.name(),\n-                            ArtipieServer.ALICE.password().toCharArray()\n-                        );\n-                    }\n-                }\n-            );\n-        }\n-        ByteStreams.copy(\n-            new ByteArrayInputStream(new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes()),\n-            con.getOutputStream()\n-        );\n-        MatcherAssert.assertThat(\n-            \"Response status is 202\",\n-            con.getResponseCode(),\n-            new IsEqual<>(Integer.parseInt(RsStatus.ACCEPTED.code()))\n-        );\n-        MatcherAssert.assertThat(\n-            \"Repository xml indexes are created\",\n-            new FileStorage(this.tmp).list(new Key.From(RpmITCase.REPO, \"repodata\")).join().size(),\n-            new IsEqual<>(4)\n+    );\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        this.containers.assertExec(\n+            \"Yum install curl failed\",\n+            new MavenITCase.ContainerResultMatcher(),\n+            \"yum\", \"-y\", \"install\", \"curl\"\n         );\n-        con.disconnect();\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void listYumOperationWorks(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        this.prepareRpmRepository();\n-        this.prepareContainer(anonymous);\n-        MatcherAssert.assertThat(\n-            \"Lists 'time' package\",\n-            this.yumExec(\"list\"),\n-            new StringContainsInOrder(new ListOf<>(\"time.x86_64\", \"1.7-45.el7\"))\n-        );\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void installYumOperationWorks(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        this.prepareRpmRepository();\n-        this.prepareContainer(anonymous);\n-        MatcherAssert.assertThat(\n-            \"Installs 'time' package\",\n-            this.yumExec(\"install\"),\n-            new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n-        );\n-    }\n-\n-    @AfterEach\n-    void close() {\n-        this.server.stop();\n-        if (this.cntn != null) {\n-            this.cntn.close();\n-        }\n-    }\n-\n-    private String yumExec(final String action) throws Exception {\n-        return this.cntn.execStdout(\n-            \"yum\", \"-y\", \"repo-pkgs\", \"example\", action\n-        );\n-    }\n-\n-    private void prepareContainer(final boolean anonymous)\n-        throws Exception {\n-        Testcontainers.exposeHostPorts(this.port);\n-        final Path setting = this.tmp.resolve(\"example.repo\");\n-        this.tmp.resolve(\"example.repo\").toFile().createNewFile();\n-        Files.write(\n-            setting,\n-            new ListOf<>(\n-                \"[example]\",\n+        this.containers.putBinaryToClient(\n+            String.join(\n+                \"\\n\", \"[example]\",\n                 \"name=Example Repository\",\n-                String.format(\n-                    \"baseurl=%s\", new UrlCredsHelper(this.port, RpmITCase.REPO).url(anonymous)\n-                ),\n+                \"baseurl=http://artipie:8080/my-rpm\",\n                 \"enabled=1\",\n                 \"gpgcheck=0\"\n-            )\n+            ).getBytes(),\n+            \"/etc/yum.repos.d/example.repo\"\n         );\n-        this.cntn = new TestContainer(\"centos:centos8\", this.tmp);\n-        this.cntn.start(this.port);\n-        this.cntn.execStdout(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n-    private void prepareRpmRepository() {\n-        final Storage storage = new FileStorage(this.tmp);\n-        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n-            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n-        new Rpm(\n-            storage,\n-            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n-        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+    @Test\n+    void uploadsAndInstallsThePackage() throws Exception {\n+        this.containers.assertExec(\n+            \"Failed to upload rpm package\",\n+            new MavenITCase.ContainerResultMatcher(),\n+            \"curl\", \"http://artipie:8080/my-rpm/time-1.7-45.el7.x86_64.rpm\",\n+            \"--upload-file\", \"/w/time-1.7-45.el7.x86_64.rpm\"\n+        );\n+        this.containers.assertExec(\n+            \"Failed to install time package\",\n+            new MavenITCase.ContainerResultMatcher(\n+                new IsEqual<>(0),\n+                new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n+            ),\n+            \"yum\", \"-y\", \"repo-pkgs\", \"example\", \"install\"\n+        );\n     }\n \n }\n", "next_change": {"commit": "591a78d9e6542f14704ba1e4a9a6499192cf558d", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 52de7b56..0f3fe354 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -82,17 +61,17 @@ public final class RpmITCase {\n     void uploadsAndInstallsThePackage() throws Exception {\n         this.containers.assertExec(\n             \"Failed to upload rpm package\",\n-            new MavenITCase.ContainerResultMatcher(),\n+            new ContainerResultMatcher(),\n             \"curl\", \"http://artipie:8080/my-rpm/time-1.7-45.el7.x86_64.rpm\",\n             \"--upload-file\", \"/w/time-1.7-45.el7.x86_64.rpm\"\n         );\n         this.containers.assertExec(\n             \"Failed to install time package\",\n-            new MavenITCase.ContainerResultMatcher(\n+            new ContainerResultMatcher(\n                 new IsEqual<>(0),\n                 new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n             ),\n-            \"yum\", \"-y\", \"repo-pkgs\", \"example\", \"install\"\n+            \"dnf\", \"-y\", \"repository-packages\", \"example\", \"install\"\n         );\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NTUyMg==", "url": "https://github.com/artipie/artipie/pull/659#discussion_r499645522", "body": "@olenagerasimova guess there is typo and this method's name is supposed to be `config`, not `configs`, isn't it?", "bodyText": "@olenagerasimova guess there is typo and this method's name is supposed to be config, not configs, isn't it?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/olenagerasimova/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/olenagerasimova\">@olenagerasimova</a> guess there is typo and this method's name is supposed to be <code>config</code>, not <code>configs</code>, isn't it?</p>", "author": "olegmoz", "createdAt": "2020-10-05T14:34:42Z", "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.rpm;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * IT case for RPM repository.\n+ * @since 0.12\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public final class RpmITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.configs());\n+        this.port = this.server.start();\n+    }\n+\n+    @Test\n+    void addsRpm() throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\"http://localhost:%s/my-rpm/time-1.7-45.el7.x86_64.rpm\", this.port)\n+        ).openConnection();\n+        con.setRequestMethod(\"PUT\");\n+        con.setDoOutput(true);\n+        try (OutputStream out = con.getOutputStream()) {\n+            final byte[] input = new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes();\n+            out.write(input, 0, input.length);\n+        }\n+        MatcherAssert.assertThat(\n+            \"Response status is 202\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.ACCEPTED.code()))\n+        );\n+        MatcherAssert.assertThat(\n+            \"Repository xml indexes are created\",\n+            new FileStorage(this.tmp).list(new Key.From(\"my-rpm/repodata\")).join().size(),\n+            new IsEqual<>(4)\n+        );\n+        con.disconnect();\n+    }\n+\n+    @AfterEach\n+    void close() {\n+        this.server.stop();\n+    }\n+\n+    private String configs() {", "originalCommit": "418f5042992787336d80c543d11e27d4fef599c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe5a5f0f14fd0aeccd531cee0448abdb1bc4b510", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex caf91c19..37d7c986 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -101,7 +102,7 @@ public final class RpmITCase {\n         this.server.stop();\n     }\n \n-    private String configs() {\n+    private String config() {\n         return Yaml.createYamlMappingBuilder().add(\n             \"repo\",\n             Yaml.createYamlMappingBuilder()\n", "next_change": {"commit": "48577c591f1a2ae146b0d2d2e0b452624ef5aa52", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 37d7c986..605ea663 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -91,31 +112,70 @@ public final class RpmITCase {\n         );\n         MatcherAssert.assertThat(\n             \"Repository xml indexes are created\",\n-            new FileStorage(this.tmp).list(new Key.From(\"my-rpm/repodata\")).join().size(),\n+            new FileStorage(this.tmp).list(new Key.From(RpmITCase.REPO, \"repodata\")).join().size(),\n             new IsEqual<>(4)\n         );\n         con.disconnect();\n     }\n \n+    @Test\n+    void listAndInstallsRpmPackage() throws Exception {\n+        final Storage storage = new FileStorage(this.tmp);\n+        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n+            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n+        new Rpm(\n+            storage,\n+            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n+        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+        this.prepareContainer();\n+        MatcherAssert.assertThat(\n+            \"Lists 'time' package\",\n+            this.yumExec(\"list\"),\n+            new StringContainsInOrder(new ListOf<>(\"time.x86_64\", \"1.7-45.el7\"))\n+        );\n+        MatcherAssert.assertThat(\n+            \"Installs 'time' package\",\n+            this.yumExec(\"install\"),\n+            new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n+        );\n+    }\n+\n     @AfterEach\n     void close() {\n         this.server.stop();\n+        if (this.cntn != null) {\n+            this.cntn.stop();\n+        }\n+    }\n+\n+    private String yumExec(final String action) throws Exception {\n+        return this.cntn.execInContainer(\n+            \"yum\", \"-y\", \"repo-pkgs\", \"example\", action\n+        ).getStdout();\n     }\n \n-    private String config() {\n-        return Yaml.createYamlMappingBuilder().add(\n-            \"repo\",\n-            Yaml.createYamlMappingBuilder()\n-                .add(\"type\", \"rpm\")\n-                .add(\n-                    \"storage\",\n-                    Yaml.createYamlMappingBuilder()\n-                        .add(\"type\", \"fs\")\n-                        .add(\"path\", this.tmp.toString())\n-                        .build()\n-                )\n-                .build()\n-        ).build().toString();\n+    private void prepareContainer() throws IOException, InterruptedException {\n+        Testcontainers.exposeHostPorts(this.port);\n+        final Path setting = this.tmp.resolve(\"example.repo\");\n+        this.tmp.resolve(\"example.repo\").toFile().createNewFile();\n+        Files.write(\n+            setting,\n+            new ListOf<>(\n+                \"[example]\",\n+                \"name=Example Repository\",\n+                String.format(\n+                    \"baseurl=http://host.testcontainers.internal:%d/%s\", this.port, RpmITCase.REPO\n+                ),\n+                \"enabled=1\",\n+                \"gpgcheck=0\"\n+            )\n+        );\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.cntn.execInContainer(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n }\n", "next_change": {"commit": "00f5223aa7e95804cdcd2672d67a1ba3b986eea3", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 605ea663..0bc77b37 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -178,4 +181,14 @@ public final class RpmITCase {\n         this.cntn.execInContainer(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n+    private void prepareRpmRepository() {\n+        final Storage storage = new FileStorage(this.tmp);\n+        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n+            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n+        new Rpm(\n+            storage,\n+            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n+        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+    }\n+\n }\n", "next_change": {"commit": "0ba692137032c7ebc59bdf489f557a346de4e076", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 0bc77b37..8358b5ed 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -191,4 +223,14 @@ public final class RpmITCase {\n         ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n     }\n \n+    private String auth(final boolean anonymous) {\n+        String res = \"\";\n+        if (!anonymous) {\n+            res = String.format(\n+                \"%s:%s@\", ArtipieServer.ALICE.name(), ArtipieServer.ALICE.password()\n+            );\n+        }\n+        return res;\n+    }\n+\n }\n", "next_change": {"commit": "820ce9a101771433d062c3dff87ac0475381cab6", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 8358b5ed..0e2e2150 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -223,14 +220,4 @@ public final class RpmITCase {\n         ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n     }\n \n-    private String auth(final boolean anonymous) {\n-        String res = \"\";\n-        if (!anonymous) {\n-            res = String.format(\n-                \"%s:%s@\", ArtipieServer.ALICE.name(), ArtipieServer.ALICE.password()\n-            );\n-        }\n-        return res;\n-    }\n-\n }\n", "next_change": {"commit": "a4c48f4586fb85b3b66d80a6c3dbdff6a2967137", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 0e2e2150..52de7b56 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -23,201 +23,77 @@\n  */\n package com.artipie.rpm;\n \n-import com.artipie.ArtipieServer;\n-import com.artipie.RepoConfigYaml;\n-import com.artipie.RepoPermissions;\n-import com.artipie.RepoPerms;\n-import com.artipie.asto.Key;\n-import com.artipie.asto.Storage;\n-import com.artipie.asto.fs.FileStorage;\n-import com.artipie.asto.test.TestResource;\n-import com.artipie.http.rs.RsStatus;\n-import com.artipie.test.TestContainer;\n-import com.artipie.test.UrlCredsHelper;\n-import com.google.common.io.ByteStreams;\n-import java.io.ByteArrayInputStream;\n+import com.artipie.maven.MavenITCase;\n+import com.artipie.test.TestDeployment;\n import java.io.IOException;\n-import java.net.Authenticator;\n-import java.net.HttpURLConnection;\n-import java.net.PasswordAuthentication;\n-import java.net.URL;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n import org.cactoos.list.ListOf;\n-import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.hamcrest.text.StringContainsInOrder;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n import org.junit.jupiter.api.condition.OS;\n-import org.junit.jupiter.api.io.TempDir;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import org.testcontainers.Testcontainers;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.testcontainers.containers.BindMode;\n \n /**\n  * IT case for RPM repository.\n  * @since 0.12\n- * @checkstyle MagicNumberCheck (500 lines)\n- * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n-@EnabledOnOs({OS.LINUX, OS.MAC})\n+@DisabledOnOs(OS.WINDOWS)\n public final class RpmITCase {\n \n     /**\n-     * Repo name.\n+     * Test deployments.\n+     * @checkstyle VisibilityModifierCheck (10 lines)\n      */\n-    private static final String REPO = \"my-rpm\";\n-\n-    /**\n-     * Temporary directory for all tests.\n-     * @checkstyle VisibilityModifierCheck (3 lines)\n-     */\n-    @TempDir\n-    Path tmp;\n-\n-    /**\n-     * Tested Artipie server.\n-     */\n-    private ArtipieServer server;\n-\n-    /**\n-     * Artipie server port.\n-     */\n-    private int port;\n-\n-    /**\n-     * Container.\n-     */\n-    private TestContainer cntn;\n-\n-    void startArtipie(final boolean anonymous) throws IOException {\n-        final RepoConfigYaml config = new RepoConfigYaml(\"rpm\").withFileStorage(this.tmp);\n-        if (!anonymous) {\n-            config.withPermissions(\n-                new RepoPerms(\n-                    new RepoPermissions.PermissionItem(\n-                        ArtipieServer.ALICE.name(), new ListOf<>(\"*\")\n-                    )\n-                )\n-            );\n-        }\n-        this.server = new ArtipieServer(this.tmp, RpmITCase.REPO, config);\n-        this.port = this.server.start();\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void addsRpmAndCreatesRepodata(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        final HttpURLConnection con = (HttpURLConnection) new URL(\n-            String.format(\n-                \"http://localhost:%s/%s/time-1.7-45.el7.x86_64.rpm\", this.port, RpmITCase.REPO\n+    @RegisterExtension\n+    final TestDeployment containers = new TestDeployment(\n+        () -> TestDeployment.ArtipieContainer.defaultDefinition()\n+            .withRepoConfig(\"rpm/my-rpm.yml\", \"my-rpm\"),\n+        () -> new TestDeployment.ClientContainer(\"centos:centos8\")\n+            .withClasspathResourceMapping(\n+                \"rpm/time-1.7-45.el7.x86_64.rpm\", \"/w/time-1.7-45.el7.x86_64.rpm\",\n+                BindMode.READ_ONLY\n             )\n-        ).openConnection();\n-        con.setRequestMethod(\"PUT\");\n-        con.setDoOutput(true);\n-        if (!anonymous) {\n-            con.setAuthenticator(\n-                new Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(\n-                            ArtipieServer.ALICE.name(),\n-                            ArtipieServer.ALICE.password().toCharArray()\n-                        );\n-                    }\n-                }\n-            );\n-        }\n-        ByteStreams.copy(\n-            new ByteArrayInputStream(new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes()),\n-            con.getOutputStream()\n-        );\n-        MatcherAssert.assertThat(\n-            \"Response status is 202\",\n-            con.getResponseCode(),\n-            new IsEqual<>(Integer.parseInt(RsStatus.ACCEPTED.code()))\n-        );\n-        MatcherAssert.assertThat(\n-            \"Repository xml indexes are created\",\n-            new FileStorage(this.tmp).list(new Key.From(RpmITCase.REPO, \"repodata\")).join().size(),\n-            new IsEqual<>(4)\n+    );\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        this.containers.assertExec(\n+            \"Yum install curl failed\",\n+            new MavenITCase.ContainerResultMatcher(),\n+            \"yum\", \"-y\", \"install\", \"curl\"\n         );\n-        con.disconnect();\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void listYumOperationWorks(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        this.prepareRpmRepository();\n-        this.prepareContainer(anonymous);\n-        MatcherAssert.assertThat(\n-            \"Lists 'time' package\",\n-            this.yumExec(\"list\"),\n-            new StringContainsInOrder(new ListOf<>(\"time.x86_64\", \"1.7-45.el7\"))\n-        );\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    void installYumOperationWorks(final boolean anonymous) throws Exception {\n-        this.startArtipie(anonymous);\n-        this.prepareRpmRepository();\n-        this.prepareContainer(anonymous);\n-        MatcherAssert.assertThat(\n-            \"Installs 'time' package\",\n-            this.yumExec(\"install\"),\n-            new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n-        );\n-    }\n-\n-    @AfterEach\n-    void close() {\n-        this.server.stop();\n-        if (this.cntn != null) {\n-            this.cntn.close();\n-        }\n-    }\n-\n-    private String yumExec(final String action) throws Exception {\n-        return this.cntn.execStdout(\n-            \"yum\", \"-y\", \"repo-pkgs\", \"example\", action\n-        );\n-    }\n-\n-    private void prepareContainer(final boolean anonymous)\n-        throws Exception {\n-        Testcontainers.exposeHostPorts(this.port);\n-        final Path setting = this.tmp.resolve(\"example.repo\");\n-        this.tmp.resolve(\"example.repo\").toFile().createNewFile();\n-        Files.write(\n-            setting,\n-            new ListOf<>(\n-                \"[example]\",\n+        this.containers.putBinaryToClient(\n+            String.join(\n+                \"\\n\", \"[example]\",\n                 \"name=Example Repository\",\n-                String.format(\n-                    \"baseurl=%s\", new UrlCredsHelper(this.port, RpmITCase.REPO).url(anonymous)\n-                ),\n+                \"baseurl=http://artipie:8080/my-rpm\",\n                 \"enabled=1\",\n                 \"gpgcheck=0\"\n-            )\n+            ).getBytes(),\n+            \"/etc/yum.repos.d/example.repo\"\n         );\n-        this.cntn = new TestContainer(\"centos:centos8\", this.tmp);\n-        this.cntn.start(this.port);\n-        this.cntn.execStdout(\"mv\", \"/home/example.repo\", \"/etc/yum.repos.d/\");\n     }\n \n-    private void prepareRpmRepository() {\n-        final Storage storage = new FileStorage(this.tmp);\n-        new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\")\n-            .saveTo(storage, new Key.From(RpmITCase.REPO, \"time-1.7-45.el7.x86_64.rpm\"));\n-        new Rpm(\n-            storage,\n-            new RepoConfig.Simple(Digest.SHA256, new NamingPolicy.HashPrefixed(Digest.SHA1), true)\n-        ).batchUpdate(new Key.From(RpmITCase.REPO)).blockingAwait();\n+    @Test\n+    void uploadsAndInstallsThePackage() throws Exception {\n+        this.containers.assertExec(\n+            \"Failed to upload rpm package\",\n+            new MavenITCase.ContainerResultMatcher(),\n+            \"curl\", \"http://artipie:8080/my-rpm/time-1.7-45.el7.x86_64.rpm\",\n+            \"--upload-file\", \"/w/time-1.7-45.el7.x86_64.rpm\"\n+        );\n+        this.containers.assertExec(\n+            \"Failed to install time package\",\n+            new MavenITCase.ContainerResultMatcher(\n+                new IsEqual<>(0),\n+                new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n+            ),\n+            \"yum\", \"-y\", \"repo-pkgs\", \"example\", \"install\"\n+        );\n     }\n \n }\n", "next_change": {"commit": "591a78d9e6542f14704ba1e4a9a6499192cf558d", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/rpm/RpmITCase.java b/src/test/java/com/artipie/rpm/RpmITCase.java\nindex 52de7b56..0f3fe354 100644\n--- a/src/test/java/com/artipie/rpm/RpmITCase.java\n+++ b/src/test/java/com/artipie/rpm/RpmITCase.java\n", "chunk": "@@ -82,17 +61,17 @@ public final class RpmITCase {\n     void uploadsAndInstallsThePackage() throws Exception {\n         this.containers.assertExec(\n             \"Failed to upload rpm package\",\n-            new MavenITCase.ContainerResultMatcher(),\n+            new ContainerResultMatcher(),\n             \"curl\", \"http://artipie:8080/my-rpm/time-1.7-45.el7.x86_64.rpm\",\n             \"--upload-file\", \"/w/time-1.7-45.el7.x86_64.rpm\"\n         );\n         this.containers.assertExec(\n             \"Failed to install time package\",\n-            new MavenITCase.ContainerResultMatcher(\n+            new ContainerResultMatcher(\n                 new IsEqual<>(0),\n                 new StringContainsInOrder(new ListOf<>(\"time-1.7-45.el7.x86_64\", \"Complete!\"))\n             ),\n-            \"yum\", \"-y\", \"repo-pkgs\", \"example\", \"install\"\n+            \"dnf\", \"-y\", \"repository-packages\", \"example\", \"install\"\n         );\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "fe5a5f0f14fd0aeccd531cee0448abdb1bc4b510", "url": "https://github.com/artipie/artipie/commit/fe5a5f0f14fd0aeccd531cee0448abdb1bc4b510", "message": "#604 - CR", "committedDate": "2020-10-05T16:11:22Z", "type": "commit"}, {"oid": "2cfb1967e2f31b8d35ca1e70d0171336ca85137f", "url": "https://github.com/artipie/artipie/commit/2cfb1967e2f31b8d35ca1e70d0171336ca85137f", "message": "#604 - exclude test rpm from .pdd", "committedDate": "2020-10-05T16:12:58Z", "type": "commit"}, {"oid": "251dc0bdeed7feb5062894470ff034ad65f1e704", "url": "https://github.com/artipie/artipie/commit/251dc0bdeed7feb5062894470ff034ad65f1e704", "message": "Merge branch 'master' into 604-upload", "committedDate": "2020-10-05T16:47:26Z", "type": "commit"}, {"oid": "11ac9e0e6ff5c8277396f2ccb2a6b577b09dc818", "url": "https://github.com/artipie/artipie/commit/11ac9e0e6ff5c8277396f2ccb2a6b577b09dc818", "message": "Merge branch 'master' into 604-upload", "committedDate": "2020-10-06T13:09:50Z", "type": "commit"}]}