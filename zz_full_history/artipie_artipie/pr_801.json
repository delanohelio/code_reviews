{"pr_number": 801, "pr_title": "#775 - test for ArtipieApi", "pr_author": "olenagerasimova", "pr_createdAt": "2020-12-11T15:09:56Z", "pr_url": "https://github.com/artipie/artipie/pull/801", "timeline": [{"oid": "4ca3055c453424644628df33c617f666a1dec298", "url": "https://github.com/artipie/artipie/commit/4ca3055c453424644628df33c617f666a1dec298", "message": "#775 - test for ArtipieApi", "committedDate": "2020-12-11T15:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTM2Mg==", "url": "https://github.com/artipie/artipie/pull/801#discussion_r541021362", "body": "@olenagerasimova to me it does not seem logical that a configuration parameter is passed to `start` method. I'd suggest to specify layyou (or whole `artipie.yaml` content) when `ArtipieServer` is created. It might be too much to add in this PR, so I'd suggest to add a puzzle for that if you agree about this design issue.", "bodyText": "@olenagerasimova to me it does not seem logical that a configuration parameter is passed to start method. I'd suggest to specify layyou (or whole artipie.yaml content) when ArtipieServer is created. It might be too much to add in this PR, so I'd suggest to add a puzzle for that if you agree about this design issue.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/olenagerasimova/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/olenagerasimova\">@olenagerasimova</a> to me it does not seem logical that a configuration parameter is passed to <code>start</code> method. I'd suggest to specify layyou (or whole <code>artipie.yaml</code> content) when <code>ArtipieServer</code> is created. It might be too much to add in this PR, so I'd suggest to add a puzzle for that if you agree about this design issue.</p>", "author": "olegmoz", "createdAt": "2020-12-11T15:19:18Z", "path": "src/test/java/com/artipie/ArtipieServer.java", "diffHunk": "@@ -156,6 +156,17 @@ public ArtipieServer(final Path root, final String name, final String config,\n      *  for usage in all these places.\n      */\n     public int start() throws IOException {\n+        return this.start(\"flat\");\n+    }\n+\n+    /**\n+     * Starts the server.\n+     *\n+     * @param layout Layout\n+     * @return Port the servers listening on.\n+     * @throws IOException In case of error creating configs or running the server.\n+     */\n+    public int start(final String layout) throws IOException {", "originalCommit": "4ca3055c453424644628df33c617f666a1dec298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "943696da166ce994b5df3ae88256ee748245b451", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/ArtipieServer.java b/src/test/java/com/artipie/ArtipieServer.java\nindex 7d83787b..5c743565 100644\n--- a/src/test/java/com/artipie/ArtipieServer.java\n+++ b/src/test/java/com/artipie/ArtipieServer.java\n", "chunk": "@@ -165,6 +165,10 @@ public class ArtipieServer {\n      * @param layout Layout\n      * @return Port the servers listening on.\n      * @throws IOException In case of error creating configs or running the server.\n+     * @todo #775:30min Specify layout when ArtipieServer instance is created\n+     *  Layout should be specified when ArtipieServer is created, not on start. As this class\n+     *  already has too many fields, consider creating separate class to create whole\n+     *  artipie.yaml and passing instance of this class to the ctor.\n      */\n     public int start(final String layout) throws IOException {\n         final Path repos = this.root.resolve(\"repos\");\n", "next_change": {"commit": "683288e3945b800fbe79924d28451cfc35d8c5fa", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/ArtipieServer.java b/src/test/java/com/artipie/ArtipieServer.java\nindex 5c743565..4e38b6b8 100644\n--- a/src/test/java/com/artipie/ArtipieServer.java\n+++ b/src/test/java/com/artipie/ArtipieServer.java\n", "chunk": "@@ -156,21 +191,6 @@ public class ArtipieServer {\n      *  for usage in all these places.\n      */\n     public int start() throws IOException {\n-        return this.start(\"flat\");\n-    }\n-\n-    /**\n-     * Starts the server.\n-     *\n-     * @param layout Layout\n-     * @return Port the servers listening on.\n-     * @throws IOException In case of error creating configs or running the server.\n-     * @todo #775:30min Specify layout when ArtipieServer instance is created\n-     *  Layout should be specified when ArtipieServer is created, not on start. As this class\n-     *  already has too many fields, consider creating separate class to create whole\n-     *  artipie.yaml and passing instance of this class to the ctor.\n-     */\n-    public int start(final String layout) throws IOException {\n         final Path repos = this.root.resolve(\"repos\");\n         repos.toFile().mkdir();\n         Files.write(\n", "next_change": {"commit": "e7245c8c0c3f3ab119085bd0c8002eedf2251ec3", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/ArtipieServer.java b/src/test/java/com/artipie/ArtipieServer.java\nindex 4e38b6b8..9c965d63 100644\n--- a/src/test/java/com/artipie/ArtipieServer.java\n+++ b/src/test/java/com/artipie/ArtipieServer.java\n", "chunk": "@@ -193,34 +216,42 @@ public class ArtipieServer {\n     public int start() throws IOException {\n         final Path repos = this.root.resolve(\"repos\");\n         repos.toFile().mkdir();\n+        this.repoconfigs.ifPresent(key -> repos.resolve(key.string()).toFile().mkdir());\n         Files.write(\n-            repos.resolve(String.format(\"%s.yaml\", this.name)),\n+            repos.resolve(\n+                String.format(\n+                    \"%s%s.yaml\",\n+                    this.repoconfigs.map(Key::string)\n+                        .map(key -> String.format(\"%s/\", key)).orElse(\"\"),\n+                    this.name\n+                )\n+            ),\n             this.config.getBytes()\n         );\n         final Path cfg = this.root.resolve(\"artipie.yaml\");\n-        Files.write(\n-            cfg,\n-            Yaml.createYamlMappingBuilder().add(\n-                \"meta\",\n+        YamlMappingBuilder meta = Yaml.createYamlMappingBuilder()\n+            .add(\n+                \"storage\",\n                 Yaml.createYamlMappingBuilder()\n-                    .add(\n-                        \"storage\",\n-                        Yaml.createYamlMappingBuilder()\n-                            .add(\"type\", \"fs\")\n-                            .add(\"path\", repos.toString())\n-                            .build()\n-                    )\n-                    .add(\n-                        \"credentials\",\n-                        Yaml.createYamlMappingBuilder()\n-                            .add(\"type\", \"file\")\n-                            .add(\"path\", ArtipieServer.CREDENTIALS_FILE)\n-                            .build()\n-                    )\n-                    .add(\"layout\", this.layout)\n-                    .add(\"base_url\", \"http://artipie.example.com\")\n+                    .add(\"type\", \"fs\")\n+                    .add(\"path\", repos.toString())\n                     .build()\n-            ).build().toString().getBytes()\n+            )\n+            .add(\n+                \"credentials\",\n+                Yaml.createYamlMappingBuilder()\n+                    .add(\"type\", \"file\")\n+                    .add(\"path\", ArtipieServer.CREDENTIALS_FILE)\n+                    .build()\n+            )\n+            .add(\"layout\", this.layout)\n+            .add(\"base_url\", \"http://artipie.example.com\");\n+        if (this.repoconfigs.isPresent()) {\n+            meta = meta.add(\"repo_configs\", this.repoconfigs.get().string());\n+        }\n+        Files.write(\n+            cfg,\n+            Yaml.createYamlMappingBuilder().add(\"meta\", meta.build()).build().toString().getBytes()\n         );\n         Files.write(\n             repos.resolve(ArtipieServer.CREDENTIALS_FILE),\n", "next_change": {"commit": "245e3fffbf79290eaa579ea007e5adc316672253", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/ArtipieServer.java b/src/test/java/com/artipie/ArtipieServer.java\nindex 9c965d63..6241ba8f 100644\n--- a/src/test/java/com/artipie/ArtipieServer.java\n+++ b/src/test/java/com/artipie/ArtipieServer.java\n", "chunk": "@@ -257,8 +232,15 @@ public class ArtipieServer {\n             repos.resolve(ArtipieServer.CREDENTIALS_FILE),\n             credentials().getBytes()\n         );\n+        final JettyClientSlices http = new JettyClientSlices(new HttpClientSettings());\n+        try {\n+            http.start();\n+            // @checkstyle IllegalCatchCheck (1 line)\n+        } catch (final Exception err) {\n+            throw new IllegalStateException(err);\n+        }\n         this.vertx = Vertx.vertx();\n-        this.server = new VertxMain(cfg, this.vertx, this.freeport);\n+        this.server = new VertxMain(http, cfg, this.vertx, this.freeport);\n         this.prt = this.server.start();\n         return this.prt;\n     }\n", "next_change": {"commit": "6b305df2717b64b18de1dbb4338f49d53e2e28d9", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/ArtipieServer.java b/src/test/java/com/artipie/ArtipieServer.java\ndeleted file mode 100644\nindex 6241ba8f..00000000\n--- a/src/test/java/com/artipie/ArtipieServer.java\n+++ /dev/null\n", "chunk": "@@ -1,332 +0,0 @@\n-/*\n- * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com\n- * https://github.com/artipie/artipie/LICENSE.txt\n- */\n-package com.artipie;\n-\n-import com.amihaiemil.eoyaml.Yaml;\n-import com.amihaiemil.eoyaml.YamlMappingBuilder;\n-import com.artipie.asto.Key;\n-import com.artipie.http.client.jetty.JettyClientSlices;\n-import io.vertx.reactivex.core.Vertx;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Optional;\n-\n-/**\n- * Artipie server with single repository configured.\n- *\n- * @since 0.10\n- */\n-@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.AvoidCatchingGenericException\"})\n-public class ArtipieServer {\n-\n-    /**\n-     * User Alice.\n-     */\n-    public static final User ALICE = new User(\"alice\", \"123\");\n-\n-    /**\n-     * User Bob.\n-     */\n-    public static final User BOB = new User(\"bob\", \"qwerty\");\n-\n-    /**\n-     * User Carol.\n-     */\n-    public static final User CAROL = new User(\"carol\", \"LetMeIn\");\n-\n-    /**\n-     * Credentials file name.\n-     */\n-    public static final String CREDENTIALS_FILE = \"_credentials.yaml\";\n-\n-    /**\n-     * All users.\n-     */\n-    private static final Collection<User> USERS = Arrays.asList(\n-        ArtipieServer.ALICE, ArtipieServer.BOB, ArtipieServer.CAROL\n-    );\n-\n-    /**\n-     * Root path.\n-     */\n-    private final Path root;\n-\n-    /**\n-     * Repo name.\n-     */\n-    private final String name;\n-\n-    /**\n-     * Repo config.\n-     */\n-    private final String config;\n-\n-    /**\n-     * Free port for starting server. If equal to 0, the server\n-     * starts on an arbitrary free port.\n-     */\n-    private final int freeport;\n-\n-    /**\n-     * Vert.x instance used to run the server.\n-     */\n-    private Vertx vertx;\n-\n-    /**\n-     * Running server.\n-     */\n-    private VertxMain server;\n-\n-    /**\n-     * Port server is listening.\n-     */\n-    private int prt;\n-\n-    /**\n-     * Artipie layout.\n-     */\n-    private final String layout;\n-\n-    /**\n-     * Repo configs key.\n-     */\n-    private final Optional<Key> repoconfigs;\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     */\n-    public ArtipieServer(final Path root, final String name, final String config) {\n-        this(root, name, config, 0);\n-    }\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     */\n-    public ArtipieServer(final Path root, final String name, final RepoConfigYaml config) {\n-        this(root, name, config.toString(), 0);\n-    }\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     * @param port Free port.\n-     * @checkstyle ParameterNumberCheck (2 lines)\n-     */\n-    public ArtipieServer(final Path root, final String name, final String config,\n-        final int port) {\n-        this(root, name, config, port, \"flat\", Optional.empty());\n-    }\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     * @param layout Layout\n-     * @checkstyle ParameterNumberCheck (2 lines)\n-     */\n-    public ArtipieServer(final Path root, final String name, final RepoConfigYaml config,\n-        final String layout) {\n-        this(root, name, config.toString(), 0, layout, Optional.empty());\n-    }\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     * @param repoconfigs Repo configs key\n-     * @checkstyle ParameterNumberCheck (2 lines)\n-     */\n-    public ArtipieServer(final Path root, final String name, final RepoConfigYaml config,\n-        final Optional<Key> repoconfigs) {\n-        this(root, name, config.toString(), 0, \"flat\", repoconfigs);\n-    }\n-\n-    /**\n-     * Ctor.\n-     *\n-     * @param root Root directory.\n-     * @param name Repo name.\n-     * @param config Repo config.\n-     * @param port Free port.\n-     * @param layout Layout\n-     * @param repoconfig Repository configs key\n-     * @checkstyle ParameterNumberCheck (2 lines)\n-     */\n-    public ArtipieServer(final Path root, final String name, final String config,\n-        final int port, final String layout, final Optional<Key> repoconfig) {\n-        this.root = root;\n-        this.name = name;\n-        this.config = config;\n-        this.freeport = port;\n-        this.layout = layout;\n-        this.repoconfigs = repoconfig;\n-    }\n-\n-    /**\n-     * Starts the server.\n-     *\n-     * @return Port the servers listening on.\n-     * @throws IOException In case of error creating configs or running the server.\n-     */\n-    public int start() throws IOException {\n-        final Path repos = this.root.resolve(\"repos\");\n-        repos.toFile().mkdir();\n-        this.repoconfigs.ifPresent(key -> repos.resolve(key.string()).toFile().mkdir());\n-        Files.write(\n-            repos.resolve(\n-                String.format(\n-                    \"%s%s.yaml\",\n-                    this.repoconfigs.map(Key::string)\n-                        .map(key -> String.format(\"%s/\", key)).orElse(\"\"),\n-                    this.name\n-                )\n-            ),\n-            this.config.getBytes()\n-        );\n-        final Path cfg = this.root.resolve(\"artipie.yaml\");\n-        YamlMappingBuilder meta = Yaml.createYamlMappingBuilder()\n-            .add(\n-                \"storage\",\n-                Yaml.createYamlMappingBuilder()\n-                    .add(\"type\", \"fs\")\n-                    .add(\"path\", repos.toString())\n-                    .build()\n-            )\n-            .add(\n-                \"credentials\",\n-                Yaml.createYamlMappingBuilder()\n-                    .add(\"type\", \"file\")\n-                    .add(\"path\", ArtipieServer.CREDENTIALS_FILE)\n-                    .build()\n-            )\n-            .add(\"layout\", this.layout)\n-            .add(\"base_url\", \"http://artipie.example.com\");\n-        if (this.repoconfigs.isPresent()) {\n-            meta = meta.add(\"repo_configs\", this.repoconfigs.get().string());\n-        }\n-        Files.write(\n-            cfg,\n-            Yaml.createYamlMappingBuilder().add(\"meta\", meta.build()).build().toString().getBytes()\n-        );\n-        Files.write(\n-            repos.resolve(ArtipieServer.CREDENTIALS_FILE),\n-            credentials().getBytes()\n-        );\n-        final JettyClientSlices http = new JettyClientSlices(new HttpClientSettings());\n-        try {\n-            http.start();\n-            // @checkstyle IllegalCatchCheck (1 line)\n-        } catch (final Exception err) {\n-            throw new IllegalStateException(err);\n-        }\n-        this.vertx = Vertx.vertx();\n-        this.server = new VertxMain(http, cfg, this.vertx, this.freeport);\n-        this.prt = this.server.start();\n-        return this.prt;\n-    }\n-\n-    /**\n-     * Stops server releasing all resources.\n-     */\n-    public void stop() {\n-        Optional.ofNullable(this.server).ifPresent(VertxMain::stop);\n-        Optional.ofNullable(this.vertx).ifPresent(Vertx::close);\n-    }\n-\n-    /**\n-     * Port server is listening.\n-     *\n-     * @return Server port, 0 if server is not started.\n-     */\n-    public int port() {\n-        return this.prt;\n-    }\n-\n-    /**\n-     * Create credentials YAML with known users.\n-     *\n-     * @return Credentials YAML.\n-     */\n-    private static String credentials() {\n-        final CredsConfigYaml cred = new CredsConfigYaml();\n-        for (final User user : ArtipieServer.USERS) {\n-            cred.withUserAndPlainPswd(user.name(), user.password());\n-        }\n-        return cred.toString();\n-    }\n-\n-    /**\n-     * User with name and password.\n-     *\n-     * @since 0.10\n-     */\n-    public static final class User {\n-\n-        /**\n-         * Username.\n-         */\n-        private final String username;\n-\n-        /**\n-         * Password.\n-         */\n-        private final String pwd;\n-\n-        /**\n-         * Ctor.\n-         *\n-         * @param username Username.\n-         * @param pwd Password.\n-         */\n-        public User(final String username, final String pwd) {\n-            this.username = username;\n-            this.pwd = pwd;\n-        }\n-\n-        /**\n-         * Get username.\n-         *\n-         * @return Username.\n-         */\n-        public String name() {\n-            return this.username;\n-        }\n-\n-        /**\n-         * Get password.\n-         *\n-         * @return Password.\n-         */\n-        public String password() {\n-            return this.pwd;\n-        }\n-\n-        /**\n-         * Username and password separated by colon.\n-         * @return Username:pswd\n-         */\n-        public String nameAndPswd() {\n-            return String.format(\"%s:%s\", this.username, this.pwd);\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNTE5OA==", "url": "https://github.com/artipie/artipie/pull/801#discussion_r541025198", "body": "@olenagerasimova as you are using java standard library in this method, I'd suggest to use `HttpURLConnection.HTTP_OK` instead of parsing `RsStatus.OK` value", "bodyText": "@olenagerasimova as you are using java standard library in this method, I'd suggest to use HttpURLConnection.HTTP_OK instead of parsing RsStatus.OK value", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/olenagerasimova/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/olenagerasimova\">@olenagerasimova</a> as you are using java standard library in this method, I'd suggest to use <code>HttpURLConnection.HTTP_OK</code> instead of parsing <code>RsStatus.OK</code> value</p>", "author": "olegmoz", "createdAt": "2020-12-11T15:24:37Z", "path": "src/test/java/com/artipie/api/ArtipieApiITCase.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.apache.commons.codec.binary.Base64;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+/**\n+ * IT for Artipie API and dashboard.\n+ * @since 0.14\n+ */\n+class ArtipieApiITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        final Storage storage = new FileStorage(this.tmp);\n+        storage.save(\n+            new Key.From(\"repos/_permissions.yaml\"), new Content.From(this.apiPerms().getBytes())\n+        ).join();\n+        this.server = new ArtipieServer(\n+            this.tmp, \"my_repo\",\n+            new RepoConfigYaml(\"binary\")\n+                .withFileStorage(this.tmp.resolve(\"repos/test\"))\n+        );\n+        this.port = this.server.start(\"org\");\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+        strings = {\n+            \"api/repos/bob\",\n+            \"dashboard/bob\", \"dashboard/bob/my_repo\",\n+            \"api/security/users/bob\", \"api/security/permissions/my_repo\",\n+            \"api/security/permissions\"\n+        }\n+    )\n+    void getRequestsWork(final String url) throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection)\n+            new URL(\n+                String.format(\"http://localhost:%s/%s\", this.port, url)\n+            ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\n+            \"Authorization\",\n+            String.format(\n+                \"Basic %s\",\n+                new String(\n+                    Base64.encodeBase64(\n+                        String.format(\n+                            \"%s:%s\", ArtipieServer.BOB.name(), ArtipieServer.BOB.password()\n+                        ).getBytes()\n+                    )\n+                )\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))", "originalCommit": "4ca3055c453424644628df33c617f666a1dec298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "943696da166ce994b5df3ae88256ee748245b451", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/api/ArtipieApiITCase.java b/src/test/java/com/artipie/api/ArtipieApiITCase.java\nindex 0fc3e7f0..b638fb0f 100644\n--- a/src/test/java/com/artipie/api/ArtipieApiITCase.java\n+++ b/src/test/java/com/artipie/api/ArtipieApiITCase.java\n", "chunk": "@@ -112,7 +111,7 @@ class ArtipieApiITCase {\n         MatcherAssert.assertThat(\n             \"Response status is 200\",\n             con.getResponseCode(),\n-            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+            new IsEqual<>(HttpURLConnection.HTTP_OK)\n         );\n         con.disconnect();\n     }\n", "next_change": {"commit": "c67bba2fc2267e029d1ab33f143b37787ffc9551", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/api/ArtipieApiITCase.java b/src/test/java/com/artipie/api/ArtipieApiITCase.java\nindex b638fb0f..c689ad09 100644\n--- a/src/test/java/com/artipie/api/ArtipieApiITCase.java\n+++ b/src/test/java/com/artipie/api/ArtipieApiITCase.java\n", "chunk": "@@ -108,17 +133,21 @@ class ArtipieApiITCase {\n                 )\n             )\n         );\n-        MatcherAssert.assertThat(\n-            \"Response status is 200\",\n-            con.getResponseCode(),\n-            new IsEqual<>(HttpURLConnection.HTTP_OK)\n-        );\n-        con.disconnect();\n     }\n \n-    @AfterEach\n-    void stop() {\n-        this.server.stop();\n+    private void init(final String extension) throws IOException {\n+        final Storage storage = new FileStorage(this.tmp.resolve(\"repos\"));\n+        storage.save(\n+            new Key.From(String.format(\"_permissions%s\", extension)),\n+            new Content.From(this.apiPerms().getBytes())\n+        ).join();\n+        this.server = new ArtipieServer(\n+            this.tmp, \"my_repo\",\n+            new RepoConfigYaml(\"binary\")\n+                .withFileStorage(this.tmp.resolve(\"repos/test\")),\n+            \"org\"\n+        );\n+        this.port = this.server.start();\n     }\n \n     private String apiPerms() {\n", "next_change": {"commit": "89b4ef0834b089133f3e623838141a29d49d8453", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/api/ArtipieApiITCase.java b/src/test/java/com/artipie/api/ArtipieApiITCase.java\nindex c689ad09..c528f87c 100644\n--- a/src/test/java/com/artipie/api/ArtipieApiITCase.java\n+++ b/src/test/java/com/artipie/api/ArtipieApiITCase.java\n", "chunk": "@@ -1,166 +1,71 @@\n /*\n- * The MIT License (MIT)\n- *\n- * Copyright (c) 2020 artipie.com\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included\n- * in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n- * SOFTWARE.\n+ * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com\n+ * https://github.com/artipie/artipie/LICENSE.txt\n  */\n package com.artipie.api;\n \n-import com.amihaiemil.eoyaml.Yaml;\n-import com.artipie.ArtipieServer;\n-import com.artipie.RepoConfigYaml;\n-import com.artipie.asto.Content;\n-import com.artipie.asto.Key;\n-import com.artipie.asto.Storage;\n-import com.artipie.asto.fs.FileStorage;\n-import com.artipie.repo.ConfigFile;\n-import java.io.IOException;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.nio.file.Path;\n-import org.apache.commons.codec.binary.Base64;\n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.core.IsEqual;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.io.TempDir;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.CsvSource;\n-import org.junit.jupiter.params.provider.ValueSource;\n+import com.artipie.test.ContainerResultMatcher;\n+import com.artipie.test.TestDeployment;\n+import java.net.URLEncoder;\n+import java.util.concurrent.TimeUnit;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n \n /**\n  * IT for Artipie API and dashboard.\n  * @since 0.14\n+ * @checkstyle MagicNumberCheck (500 lines)\n  */\n-class ArtipieApiITCase {\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class ArtipieApiITCase {\n \n     /**\n-     * Temporary directory for all tests.\n-     * @checkstyle VisibilityModifierCheck (3 lines)\n+     * Deployment for tests.\n+     * @checkstyle VisibilityModifierCheck (5 lines)\n      */\n-    @TempDir\n-    Path tmp;\n+    @RegisterExtension\n+    final TestDeployment deployment = new TestDeployment(\n+        () -> TestDeployment.ArtipieContainer.defaultDefinition()\n+            .withCredentials(\"_credentials.yaml\")\n+            .withPermissions(\"_permissions.yaml\"),\n+        () -> new TestDeployment.ClientContainer(\"alpine:3.11\")\n+            .withWorkingDirectory(\"/w\")\n+    );\n \n-    /**\n-     * Tested Artipie server.\n-     */\n-    private ArtipieServer server;\n-\n-    /**\n-     * Port.\n-     */\n-    private int port;\n-\n-    /**\n-     * Http connection.\n-     */\n-    private HttpURLConnection con;\n-\n-    @ParameterizedTest\n-    @ValueSource(\n-        strings = {\n-            \"api/repos/bob\",\n-            \"dashboard/bob\", \"dashboard/bob/my_repo\",\n-            \"api/security/users/bob\", \"api/security/permissions/my_repo\",\n-            \"api/security/permissions\"\n-        }\n-    )\n-    void getRequestsWork(final String url) throws Exception {\n-        this.init(ConfigFile.Extension.YAML.value());\n-        this.initConnection(url);\n-        MatcherAssert.assertThat(\n-            \"Response status is 200\",\n-            this.con.getResponseCode(),\n-            new IsEqual<>(HttpURLConnection.HTTP_OK)\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        this.deployment.assertExec(\n+            \"Failed to install deps\",\n+            new ContainerResultMatcher(Matchers.is(0)),\n+            \"apk\", \"add\", \"--no-cache\", \"curl\"\n         );\n     }\n \n-    @ParameterizedTest\n-    @CsvSource({\n-        \"api/repos/bob,.yaml\", \"api/repos/bob,.yml\",\n-        \"dashboard/bob,.yaml\", \"dashboard/bob,.yml\",\n-        \"api/security/users/bob,.yaml\", \"api/security/users/bob,.yml\"\n-    })\n-    void readsConfigWithYamlAndYmlExtension(final String url, final String extension)\n-        throws Exception {\n-        this.init(extension);\n-        this.initConnection(url);\n-        MatcherAssert.assertThat(\n-            \"Response status is 200 for different extension\",\n-            this.con.getResponseCode(),\n-            new IsEqual<>(HttpURLConnection.HTTP_OK)\n+    @Test\n+    @Timeout(value = 500, unit = TimeUnit.MILLISECONDS)\n+    @Disabled\n+    void createRepository() throws Exception {\n+        final String repo = \"repo1\";\n+        final String config = String.join(\n+            \"\\n\",\n+            \"repo:\",\n+            \"  type: file\",\n+            \"  storage:\",\n+            \"    type: fs\",\n+            \"    path: /var/artipie/repo/1\"\n         );\n-    }\n-\n-    @AfterEach\n-    void stop() {\n-        this.con.disconnect();\n-        this.server.stop();\n-    }\n-\n-    private void initConnection(final String url) throws Exception {\n-        this.con = (HttpURLConnection)\n-            new URL(\n-                String.format(\"http://localhost:%s/%s\", this.port, url)\n-            ).openConnection();\n-        this.con.setRequestMethod(\"GET\");\n-        this.con.setRequestProperty(\n-            \"Authorization\",\n-            String.format(\n-                \"Basic %s\",\n-                new String(\n-                    Base64.encodeBase64(\n-                        String.format(\n-                            \"%s:%s\", ArtipieServer.BOB.name(), ArtipieServer.BOB.password()\n-                        ).getBytes()\n-                    )\n-                )\n-            )\n+        this.deployment.assertExec(\n+            \"Failed to create a new repo\",\n+            new ContainerResultMatcher(Matchers.is(0)),\n+            \"curl\", \"-X\", \"GET\", \"http://artipie:8080/api/repos/alice\",\n+            \"-X\", \"POST\",\n+            \"-u\", \"alice:123\",\n+            \"-F\", String.format(\"repo=%s\", repo),\n+            \"-F\", String.format(\"config=%s\", URLEncoder.encode(config, \"UTF-8\"))\n         );\n     }\n-\n-    private void init(final String extension) throws IOException {\n-        final Storage storage = new FileStorage(this.tmp.resolve(\"repos\"));\n-        storage.save(\n-            new Key.From(String.format(\"_permissions%s\", extension)),\n-            new Content.From(this.apiPerms().getBytes())\n-        ).join();\n-        this.server = new ArtipieServer(\n-            this.tmp, \"my_repo\",\n-            new RepoConfigYaml(\"binary\")\n-                .withFileStorage(this.tmp.resolve(\"repos/test\")),\n-            \"org\"\n-        );\n-        this.port = this.server.start();\n-    }\n-\n-    private String apiPerms() {\n-        return Yaml.createYamlMappingBuilder()\n-            .add(\n-                \"permissions\",\n-                Yaml.createYamlMappingBuilder()\n-                    .add(\n-                        ArtipieServer.BOB.name(),\n-                        Yaml.createYamlSequenceBuilder().add(\"api\").build()\n-                    ).build()\n-            )\n-            .build().toString();\n-    }\n-\n }\n", "next_change": {"commit": "394c24543a707d9ef10c4d24c77f7b9da96a02bc", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/api/ArtipieApiITCase.java b/src/test/java/com/artipie/api/ArtipieApiITCase.java\nindex c528f87c..e1fa99a3 100644\n--- a/src/test/java/com/artipie/api/ArtipieApiITCase.java\n+++ b/src/test/java/com/artipie/api/ArtipieApiITCase.java\n", "chunk": "@@ -58,14 +120,5 @@ final class ArtipieApiITCase {\n             \"    type: fs\",\n             \"    path: /var/artipie/repo/1\"\n         );\n-        this.deployment.assertExec(\n-            \"Failed to create a new repo\",\n-            new ContainerResultMatcher(Matchers.is(0)),\n-            \"curl\", \"-X\", \"GET\", \"http://artipie:8080/api/repos/alice\",\n-            \"-X\", \"POST\",\n-            \"-u\", \"alice:123\",\n-            \"-F\", String.format(\"repo=%s\", repo),\n-            \"-F\", String.format(\"config=%s\", URLEncoder.encode(config, \"UTF-8\"))\n-        );\n     }\n }\n", "next_change": {"commit": "b9776b91fee19ac5c54e4bff94f1d3f8b52817dd", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/api/ArtipieApiITCase.java b/src/test/java/com/artipie/api/ArtipieApiITCase.java\ndeleted file mode 100644\nindex e1fa99a3..00000000\n--- a/src/test/java/com/artipie/api/ArtipieApiITCase.java\n+++ /dev/null\n", "chunk": "@@ -1,124 +0,0 @@\n-/*\n- * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com\n- * https://github.com/artipie/artipie/LICENSE.txt\n- */\n-package com.artipie.api;\n-\n-import com.artipie.test.ContainerResultMatcher;\n-import com.artipie.test.TestDeployment;\n-import java.io.IOException;\n-import org.cactoos.list.ListOf;\n-import org.hamcrest.Matchers;\n-import org.hamcrest.core.IsEqual;\n-import org.hamcrest.core.StringContains;\n-import org.hamcrest.text.StringContainsInOrder;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n-\n-/**\n- * IT for Artipie API and dashboard.\n- * @since 0.14\n- * @checkstyle MagicNumberCheck (500 lines)\n- * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n- * @todo #896:30min Tests to create and update repositories are disabled due to test deployment\n- *  configuration problem: there is no write permission on directory with the repository configs for\n- *  `artipie` user in artipie container. Here is corresponding question on SO\n- *  https://stackoverflow.com/questions/67869196/change-files-owner-when-copying-resources-with-testcontainers\n- *  Wait for the answer, fix permission error and enable tests.\n- */\n-@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n-final class ArtipieApiITCase {\n-\n-    /**\n-     * Deployment for tests.\n-     * @checkstyle VisibilityModifierCheck (5 lines)\n-     */\n-    @RegisterExtension\n-    final TestDeployment deployment = new TestDeployment(\n-        () -> new TestDeployment.ArtipieContainer().withConfig(\"artipie_org.yaml\")\n-            .withCredentials(\"_credentials.yaml\")\n-            .withPermissions(\"_permissions.yaml\"),\n-        () -> new TestDeployment.ClientContainer(\"alpine:3.11\")\n-            .withWorkingDirectory(\"/w\")\n-    );\n-\n-    @BeforeEach\n-    void setUp() throws Exception {\n-        this.deployment.assertExec(\n-            \"Failed to install deps\",\n-            new ContainerResultMatcher(Matchers.is(0)),\n-            \"apk\", \"add\", \"--no-cache\", \"curl\"\n-        );\n-    }\n-\n-    @Test\n-    void dashboardIsUp() throws IOException {\n-        this.deployment.assertExec(\n-            \"Artipie dashboard is not up and running\",\n-            new ContainerResultMatcher(\n-                Matchers.is(0),\n-                new StringContainsInOrder(\n-                    new ListOf<String>(\n-                        \"<!DOCTYPE html>\", \"<title>alice</title>\", \"Your repositories:\"\n-                    )\n-                )\n-            ),\n-            \"curl\", \"-X\", \"GET\", \"http://artipie:8080/dashboard/alice\", \"-u\", \"alice:123\"\n-        );\n-    }\n-\n-    @Test\n-    @Disabled\n-    void createRepository() throws Exception {\n-        final String repo = \"repo1\";\n-        final String config = this.config();\n-        this.deployment.assertExec(\n-            \"Failed to create a new repo\",\n-            new ContainerResultMatcher(Matchers.is(0), new StringContains(\"<!DOCTYPE html>\")),\n-            \"curl\", \"-X\", \"POST\", \"http://artipie:8080/api/repos/alice\",\n-            \"-u\", \"alice:123\",\n-            \"--data\", String.format(\"repo=%s;config=%s\", repo, config)\n-        );\n-        this.deployment.assertArtipieContent(\n-            \"Repo config is wrong\",\n-            String.format(\"/var/artipie/repo/alice/%s.yaml\", repo),\n-            new IsEqual<>(config.getBytes())\n-        );\n-    }\n-\n-    @Test\n-    @Disabled\n-    void updatesRepository() throws Exception {\n-        final String repo = \"repo1\";\n-        String config = this.config();\n-        this.deployment.putBinaryToArtipie(\n-            config.getBytes(), String.format(\"/var/artipie/repo/alice/%s.yaml\", repo)\n-        );\n-        config = config.replace(\"/var/artipie/repo/1\", \"/var/artipie/repo/one\");\n-        this.deployment.assertExec(\n-            \"Failed to create a new repo\",\n-            new ContainerResultMatcher(Matchers.is(0), new StringContains(\"<!DOCTYPE html>\")),\n-            \"curl\", \"-X\", \"POST\", \"http://artipie:8080/api/repos/alice\",\n-            \"-u\", \"alice:123\",\n-            \"--data\", String.format(\"repo=%s;config=%s\", repo, config)\n-        );\n-        this.deployment.assertArtipieContent(\n-            \"Repo config is wrong\",\n-            String.format(\"/var/artipie/repo/alice/%s.yaml\", repo),\n-            new IsEqual<>(config.getBytes())\n-        );\n-    }\n-\n-    private String config() {\n-        return String.join(\n-            \"\\n\",\n-            \"repo:\",\n-            \"  type: file\",\n-            \"  storage:\",\n-            \"    type: fs\",\n-            \"    path: /var/artipie/repo/1\"\n-        );\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "943696da166ce994b5df3ae88256ee748245b451", "url": "https://github.com/artipie/artipie/commit/943696da166ce994b5df3ae88256ee748245b451", "message": "#775 - CR", "committedDate": "2020-12-11T15:36:52Z", "type": "commit"}]}