{"pr_number": 161, "pr_title": "Ensures that we rely on server-specified activity retry policy if user doesn't set retry options", "pr_author": "mastermanu", "pr_createdAt": "2020-07-29T02:21:50Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/161", "timeline": [{"oid": "cbed0d999a76c4dcf3289fd3308b69bddb080848", "url": "https://github.com/temporalio/sdk-java/commit/cbed0d999a76c4dcf3289fd3308b69bddb080848", "message": "initial checkin", "committedDate": "2020-07-29T02:19:33Z", "type": "commit"}, {"oid": "d92fcfb1e9b29eb0aa4789c8148a9556c12aa120", "url": "https://github.com/temporalio/sdk-java/commit/d92fcfb1e9b29eb0aa4789c8148a9556c12aa120", "message": "remove dead code", "committedDate": "2020-07-29T02:20:49Z", "type": "commit"}, {"oid": "cd0cacb51638e5f5c1d0b5314a79c36a85d877ac", "url": "https://github.com/temporalio/sdk-java/commit/cd0cacb51638e5f5c1d0b5314a79c36a85d877ac", "message": "cleans up tests", "committedDate": "2020-07-29T03:20:01Z", "type": "commit"}, {"oid": "64f66b1a75c8ad610a163b91aafd5eb488245067", "url": "https://github.com/temporalio/sdk-java/commit/64f66b1a75c8ad610a163b91aafd5eb488245067", "message": "fixes formatting", "committedDate": "2020-07-29T03:20:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjIyOA==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462022228", "body": "I think we should not add any defaults to the retry options and rely on the service for these.", "bodyText": "I think we should not add any defaults to the retry options and rely on the service for these.", "bodyHTML": "<p dir=\"auto\">I think we should not add any defaults to the retry options and rely on the service for these.</p>", "author": "mfateev", "createdAt": "2020-07-29T03:52:35Z", "path": "src/main/java/io/temporal/activity/ActivityOptions.java", "diffHunk": "@@ -173,13 +177,19 @@ public ActivityOptions build() {\n     }\n \n     public ActivityOptions validateAndBuildWithDefaults() {\n+      if (retryOptions != null) {\n+        // retryOptions being null means we will explicitly fallback to the default\n+        // activity retry behavior as specified on the server\n+        retryOptions = RetryOptions.newBuilder(retryOptions).validateBuildWithDefaults();", "originalCommit": "64f66b1a75c8ad610a163b91aafd5eb488245067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c65004ed068a197f0ec1666b4e34bc1362194810", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/activity/ActivityOptions.java b/src/main/java/io/temporal/activity/ActivityOptions.java\nindex b5d03c3e..ade3162b 100644\n--- a/src/main/java/io/temporal/activity/ActivityOptions.java\n+++ b/src/main/java/io/temporal/activity/ActivityOptions.java\n", "chunk": "@@ -177,12 +177,6 @@ public final class ActivityOptions {\n     }\n \n     public ActivityOptions validateAndBuildWithDefaults() {\n-      if (retryOptions != null) {\n-        // retryOptions being null means we will explicitly fallback to the default\n-        // activity retry behavior as specified on the server\n-        retryOptions = RetryOptions.newBuilder(retryOptions).validateBuildWithDefaults();\n-      }\n-\n       return new ActivityOptions(\n           heartbeatTimeout,\n           scheduleToCloseTimeout,\n", "next_change": {"commit": "d357d79603c172142d4f34ca9c182b82fc110358", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/activity/ActivityOptions.java b/src/main/java/io/temporal/activity/ActivityOptions.java\nindex ade3162b..9cbc260a 100644\n--- a/src/main/java/io/temporal/activity/ActivityOptions.java\n+++ b/src/main/java/io/temporal/activity/ActivityOptions.java\n", "chunk": "@@ -185,7 +185,7 @@ public final class ActivityOptions {\n           taskQueue,\n           retryOptions,\n           contextPropagators,\n-          cancellationType);\n+          cancellationType == null ? ActivityCancellationType.TRY_CANCEL : cancellationType);\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjM2NQ==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462022365", "body": "We should compy defaults from the service and do not rely on validateBuildWithDefaults which was intended for the SDK only validation.", "bodyText": "We should compy defaults from the service and do not rely on validateBuildWithDefaults which was intended for the SDK only validation.", "bodyHTML": "<p dir=\"auto\">We should compy defaults from the service and do not rely on validateBuildWithDefaults which was intended for the SDK only validation.</p>", "author": "mfateev", "createdAt": "2020-07-29T03:53:10Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -980,15 +975,19 @@ private static void scheduleActivityTask(\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n     TestServiceRetryState retryState;\n-    if (d.hasRetryPolicy()) {\n-      RetryPolicy retryPolicy = d.getRetryPolicy();\n-      long expirationInterval = TimeUnit.SECONDS.toMillis(d.getScheduleToCloseTimeoutSeconds());\n-      long expirationTime = data.store.currentTimeMillis() + expirationInterval;\n-      retryState = new TestServiceRetryState(retryPolicy, expirationTime);\n+    RetryPolicy retryPolicy;\n+    if (!d.hasRetryPolicy()) {\n+      // If no activity retry policy is supplied, assume a default to mimic a standard Temporal\n+      // server\n+      retryPolicy = toRetryPolicy(RetryOptions.newBuilder().validateBuildWithDefaults()).build();", "originalCommit": "64f66b1a75c8ad610a163b91aafd5eb488245067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c65004ed068a197f0ec1666b4e34bc1362194810", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex b18fdf1a..19363325 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -974,19 +983,10 @@ class StateMachines {\n       ActivityTaskData data,\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n-    TestServiceRetryState retryState;\n-    RetryPolicy retryPolicy;\n-    if (!d.hasRetryPolicy()) {\n-      // If no activity retry policy is supplied, assume a default to mimic a standard Temporal\n-      // server\n-      retryPolicy = toRetryPolicy(RetryOptions.newBuilder().validateBuildWithDefaults()).build();\n-    } else {\n-      retryPolicy = d.getRetryPolicy();\n-    }\n-\n+    RetryPolicy retryPolicy = ensureDefaultFieldsForActivityRetryPolicy(d.getRetryPolicy());\n     long expirationInterval = TimeUnit.SECONDS.toMillis(d.getScheduleToCloseTimeoutSeconds());\n     long expirationTime = data.store.currentTimeMillis() + expirationInterval;\n-    retryState = new TestServiceRetryState(retryPolicy, expirationTime);\n+    TestServiceRetryState retryState = new TestServiceRetryState(retryPolicy, expirationTime);\n \n     ActivityTaskScheduledEventAttributes.Builder a =\n         ActivityTaskScheduledEventAttributes.newBuilder()\n", "next_change": {"commit": "8b460ace48ea8c8f376d7b0630920232fa9c03fd", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 19363325..77709654 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -984,8 +989,8 @@ class StateMachines {\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n     RetryPolicy retryPolicy = ensureDefaultFieldsForActivityRetryPolicy(d.getRetryPolicy());\n-    long expirationInterval = TimeUnit.SECONDS.toMillis(d.getScheduleToCloseTimeoutSeconds());\n-    long expirationTime = data.store.currentTimeMillis() + expirationInterval;\n+    Duration expirationInterval = d.getScheduleToCloseTimeout();\n+    Timestamp expirationTime = Timestamps.add(data.store.currentTime(), expirationInterval);\n     TestServiceRetryState retryState = new TestServiceRetryState(retryPolicy, expirationTime);\n \n     ActivityTaskScheduledEventAttributes.Builder a =\n", "next_change": null}, {"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 19363325..77709654 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -994,11 +999,11 @@ class StateMachines {\n             .setActivityId(d.getActivityId())\n             .setActivityType(d.getActivityType())\n             .setNamespace(d.getNamespace().isEmpty() ? ctx.getNamespace() : d.getNamespace())\n-            .setHeartbeatTimeoutSeconds(d.getHeartbeatTimeoutSeconds())\n+            .setHeartbeatTimeout(d.getHeartbeatTimeout())\n             .setRetryPolicy(retryPolicy)\n-            .setScheduleToCloseTimeoutSeconds(d.getScheduleToCloseTimeoutSeconds())\n-            .setScheduleToStartTimeoutSeconds(d.getScheduleToStartTimeoutSeconds())\n-            .setStartToCloseTimeoutSeconds(d.getStartToCloseTimeoutSeconds())\n+            .setScheduleToCloseTimeout(d.getScheduleToCloseTimeout())\n+            .setScheduleToStartTimeout(d.getScheduleToStartTimeout())\n+            .setStartToCloseTimeout(d.getStartToCloseTimeout())\n             .setTaskQueue(d.getTaskQueue())\n             .setHeader(d.getHeader())\n             .setWorkflowTaskCompletedEventId(workflowTaskCompletedEventId);\n", "next_change": null}]}}]}}, {"oid": "22ea5e03e52e324f219fac1f2f05f2556b36048d", "url": "https://github.com/temporalio/sdk-java/commit/22ea5e03e52e324f219fac1f2f05f2556b36048d", "message": "cleanup based on PR feedback", "committedDate": "2020-07-29T05:38:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTE2OQ==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462061169", "body": "[Nit] i can technically make this a private static variable that represents an empty array", "bodyText": "[Nit] i can technically make this a private static variable that represents an empty array", "bodyHTML": "<p dir=\"auto\">[Nit] i can technically make this a private static variable that represents an empty array</p>", "author": "mastermanu", "createdAt": "2020-07-29T06:13:08Z", "path": "src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java", "diffHunk": "@@ -351,12 +351,15 @@ private ExecuteActivityParameters constructExecuteActivityParameters(\n   }\n \n   static RetryPolicy.Builder toRetryPolicy(RetryOptions retryOptions) {\n+    String[] doNotRetry = retryOptions.getDoNotRetry();\n+\n     return RetryPolicy.newBuilder()\n         .setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()))\n         .setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()))\n         .setBackoffCoefficient(retryOptions.getBackoffCoefficient())\n         .setMaximumAttempts(retryOptions.getMaximumAttempts())\n-        .addAllNonRetryableErrorTypes(Arrays.asList(retryOptions.getDoNotRetry()));\n+        .addAllNonRetryableErrorTypes(\n+            Arrays.asList(doNotRetry != null ? doNotRetry : new String[0]));", "originalCommit": "22ea5e03e52e324f219fac1f2f05f2556b36048d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Nzc4NA==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462387784", "bodyText": "I usually just not set fields on protobufs in this case.", "author": "mfateev", "createdAt": "2020-07-29T15:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNTA1MA==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462535050", "bodyText": "good point, i will omit that", "author": "mastermanu", "createdAt": "2020-07-29T19:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c65004ed068a197f0ec1666b4e34bc1362194810", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\nindex 4b8754d8..9cf520ed 100644\n--- a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n+++ b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n", "chunk": "@@ -351,15 +351,18 @@ final class SyncWorkflowContext implements WorkflowOutboundCallsInterceptor {\n   }\n \n   static RetryPolicy.Builder toRetryPolicy(RetryOptions retryOptions) {\n-    String[] doNotRetry = retryOptions.getDoNotRetry();\n-\n-    return RetryPolicy.newBuilder()\n-        .setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()))\n-        .setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()))\n-        .setBackoffCoefficient(retryOptions.getBackoffCoefficient())\n-        .setMaximumAttempts(retryOptions.getMaximumAttempts())\n-        .addAllNonRetryableErrorTypes(\n-            Arrays.asList(doNotRetry != null ? doNotRetry : new String[0]));\n+    RetryPolicy.Builder builder =\n+        RetryPolicy.newBuilder()\n+            .setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()))\n+            .setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()))\n+            .setBackoffCoefficient(retryOptions.getBackoffCoefficient())\n+            .setMaximumAttempts(retryOptions.getMaximumAttempts());\n+\n+    if (retryOptions.getDoNotRetry() != null) {\n+      builder = builder.addAllNonRetryableErrorTypes(Arrays.asList(retryOptions.getDoNotRetry()));\n+    }\n+\n+    return builder;\n   }\n \n   private ExecuteLocalActivityParameters constructExecuteLocalActivityParameters(\n", "next_change": {"commit": "d357d79603c172142d4f34ca9c182b82fc110358", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\nindex 9cf520ed..0efef378 100644\n--- a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n+++ b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n", "chunk": "@@ -366,21 +323,20 @@ final class SyncWorkflowContext implements WorkflowOutboundCallsInterceptor {\n   }\n \n   private ExecuteLocalActivityParameters constructExecuteLocalActivityParameters(\n-      String name,\n-      LocalActivityOptions options,\n-      Optional<Payloads> input,\n-      long elapsed,\n-      int attempt) {\n+      String name, LocalActivityOptions options, Optional<Payloads> input, int attempt) {\n     options = LocalActivityOptions.newBuilder(options).validateAndBuildWithDefaults();\n \n     PollActivityTaskQueueResponse.Builder activityTask =\n         PollActivityTaskQueueResponse.newBuilder()\n+            .setActivityId(this.context.randomUUID().toString())\n             .setWorkflowNamespace(this.context.getNamespace())\n             .setWorkflowExecution(this.context.getWorkflowExecution())\n-            .setScheduledTimestamp(System.currentTimeMillis())\n-            .setStartToCloseTimeoutSeconds(roundUpToSeconds(options.getStartToCloseTimeout()))\n-            .setScheduleToCloseTimeoutSeconds(roundUpToSeconds(options.getScheduleToCloseTimeout()))\n-            .setStartedTimestamp(System.currentTimeMillis())\n+            .setScheduledTime(ProtobufTimeUtils.getCurrentProtoTime())\n+            .setStartToCloseTimeout(\n+                ProtobufTimeUtils.toProtoDuration(options.getStartToCloseTimeout()))\n+            .setScheduleToCloseTimeout(\n+                ProtobufTimeUtils.toProtoDuration(options.getScheduleToCloseTimeout()))\n+            .setStartedTime(ProtobufTimeUtils.getCurrentProtoTime())\n             .setActivityType(ActivityType.newBuilder().setName(name))\n             .setAttempt(attempt);\n     if (input.isPresent()) {\n", "next_change": {"commit": "3ca7bf530a306a36ea32aae02a8b3b3d9de11bbb", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\nindex 0efef378..b915ce1e 100644\n--- a/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n+++ b/src/main/java/io/temporal/internal/sync/SyncWorkflowContext.java\n", "chunk": "@@ -343,9 +343,8 @@ final class SyncWorkflowContext implements WorkflowOutboundCallsInterceptor {\n       activityTask.setInput(input.get());\n     }\n     RetryOptions retryOptions = options.getRetryOptions();\n-    if (retryOptions != null) {\n-      activityTask.setRetryPolicy(toRetryPolicy(retryOptions));\n-    }\n+    activityTask.setRetryPolicy(\n+        toRetryPolicy(RetryOptions.newBuilder(retryOptions).validateBuildWithDefaults()));\n     Duration localRetryThreshold = options.getLocalRetryThreshold();\n     if (localRetryThreshold == null) {\n       localRetryThreshold = context.getWorkflowTaskTimeout().multipliedBy(6);\n", "next_change": null}]}}]}}]}}, {"oid": "9d8dbb867ca76f4104794c834b2e6bf4b435e1d8", "url": "https://github.com/temporalio/sdk-java/commit/9d8dbb867ca76f4104794c834b2e6bf4b435e1d8", "message": "adjusts test server retry policy", "committedDate": "2020-07-29T18:42:34Z", "type": "commit"}, {"oid": "db4947fbaeaf127f95c1ddf3d8f3dc35318f8959", "url": "https://github.com/temporalio/sdk-java/commit/db4947fbaeaf127f95c1ddf3d8f3dc35318f8959", "message": "fixes build break", "committedDate": "2020-07-29T18:52:27Z", "type": "commit"}, {"oid": "3b73d8fcdf858d4768ff92721dfd1925fded1e6a", "url": "https://github.com/temporalio/sdk-java/commit/3b73d8fcdf858d4768ff92721dfd1925fded1e6a", "message": "matches java sdk with server", "committedDate": "2020-07-29T19:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4ODYxOQ==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462388619", "body": "It looks like you didn't run the build from the command line. I believe we don't have * imports anywhere in the code. In IntelliJ, there is an option to not use *. I'm not sure about other IDEs.", "bodyText": "It looks like you didn't run the build from the command line. I believe we don't have * imports anywhere in the code. In IntelliJ, there is an option to not use *. I'm not sure about other IDEs.", "bodyHTML": "<p dir=\"auto\">It looks like you didn't run the build from the command line. I believe we don't have * imports anywhere in the code. In IntelliJ, there is an option to not use *. I'm not sure about other IDEs.</p>", "author": "mfateev", "createdAt": "2020-07-29T15:28:41Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -110,14 +110,7 @@\n import io.temporal.internal.testservice.TestWorkflowStore.ActivityTask;\n import io.temporal.internal.testservice.TestWorkflowStore.TaskQueueId;\n import io.temporal.internal.testservice.TestWorkflowStore.WorkflowTask;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.OptionalLong;\n-import java.util.UUID;\n+import java.util.*;", "originalCommit": "22ea5e03e52e324f219fac1f2f05f2556b36048d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTE4Nw==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462545187", "bodyText": "i did run gradlew, but i guess it doesn't undo the collapse if intellij does it. i changed my IDE settings and reverted", "author": "mastermanu", "createdAt": "2020-07-29T19:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4ODYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c65004ed068a197f0ec1666b4e34bc1362194810", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 4bbe7a10..19363325 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -110,7 +110,14 @@ import io.temporal.internal.common.StatusUtils;\n import io.temporal.internal.testservice.TestWorkflowStore.ActivityTask;\n import io.temporal.internal.testservice.TestWorkflowStore.TaskQueueId;\n import io.temporal.internal.testservice.TestWorkflowStore.WorkflowTask;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.UUID;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ForkJoinPool;\n import java.util.concurrent.TimeUnit;\n", "next_change": {"commit": "8b460ace48ea8c8f376d7b0630920232fa9c03fd", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 19363325..77709654 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -120,7 +125,6 @@ import java.util.OptionalLong;\n import java.util.UUID;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ForkJoinPool;\n-import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNDE2Mw==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462534163", "body": "We already have constants for some defaults in this file. I would convert these to constants as well.", "bodyText": "We already have constants for some defaults in this file. I would convert these to constants as well.", "bodyHTML": "<p dir=\"auto\">We already have constants for some defaults in this file. I would convert these to constants as well.</p>", "author": "mfateev", "createdAt": "2020-07-29T19:25:18Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1858,4 +1845,23 @@ private static void failExternalCancellation(\n             .build();\n     ctx.addEvent(event);\n   }\n+\n+  // Mimics the default activity retry policy of a standard Temporal server.\n+  static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n+    return RetryPolicy.newBuilder()\n+        .setInitialIntervalInSeconds(\n+            originalPolicy.getInitialIntervalInSeconds() == 0\n+                ? 1", "originalCommit": "db4947fbaeaf127f95c1ddf3d8f3dc35318f8959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTM1OA==", "url": "https://github.com/temporalio/sdk-java/pull/161#discussion_r462545358", "bodyText": "good point. added statics at the top of the file", "author": "mastermanu", "createdAt": "2020-07-29T19:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c65004ed068a197f0ec1666b4e34bc1362194810", "changed_code": [{"header": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex d1a4b10a..19363325 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n", "chunk": "@@ -1848,20 +1859,25 @@ class StateMachines {\n \n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n+    int initialIntervalInSeconds =\n+        originalPolicy.getInitialIntervalInSeconds() == 0\n+            ? DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS\n+            : originalPolicy.getInitialIntervalInSeconds();\n+\n     return RetryPolicy.newBuilder()\n-        .setInitialIntervalInSeconds(\n-            originalPolicy.getInitialIntervalInSeconds() == 0\n-                ? 1\n-                : originalPolicy.getInitialIntervalInSeconds())\n+        .setInitialIntervalInSeconds(initialIntervalInSeconds)\n         .setMaximumIntervalInSeconds(\n             originalPolicy.getMaximumIntervalInSeconds() == 0\n-                ? 100\n+                ? DEFAULT_ACTIVITY_MAXIMUM_INTERVAL_COEFFICIENT * initialIntervalInSeconds\n                 : originalPolicy.getMaximumIntervalInSeconds())\n         .setBackoffCoefficient(\n             originalPolicy.getBackoffCoefficient() == 0\n-                ? 2.0\n+                ? DEFAULT_ACTIVITY_RETRY_BACKOFF_COEFFICIENT\n                 : originalPolicy.getBackoffCoefficient())\n-        .setMaximumAttempts(originalPolicy.getMaximumAttempts())\n+        .setMaximumAttempts(\n+            originalPolicy.getMaximumAttempts() == 0\n+                ? DEFAULT_ACTIVITY_RETRY_MAXIMUM_ATTEMPTS\n+                : originalPolicy.getMaximumAttempts())\n         .build();\n   }\n }\n", "next_change": null}]}}, {"oid": "d102ff8436d49299b4967a99d7b9f08d1ca7801f", "url": "https://github.com/temporalio/sdk-java/commit/d102ff8436d49299b4967a99d7b9f08d1ca7801f", "message": "address CR feedback", "committedDate": "2020-07-29T19:38:09Z", "type": "commit"}, {"oid": "359790bed5d41ed450355815489cd177a36ac3c6", "url": "https://github.com/temporalio/sdk-java/commit/359790bed5d41ed450355815489cd177a36ac3c6", "message": "moves fields to constants", "committedDate": "2020-07-29T19:44:52Z", "type": "commit"}, {"oid": "540154964d79104d2f0f6e839da8ab599d342836", "url": "https://github.com/temporalio/sdk-java/commit/540154964d79104d2f0f6e839da8ab599d342836", "message": "rename constant", "committedDate": "2020-07-29T19:47:08Z", "type": "commit"}]}