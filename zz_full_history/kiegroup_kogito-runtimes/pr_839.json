{"pr_number": 839, "pr_title": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "pr_author": "evacchi", "pr_createdAt": "2020-10-20T13:09:25Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/839", "merge_commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "timeline": [{"oid": "4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "committedDate": "2020-10-20T13:19:43Z", "type": "forcePushed"}, {"oid": "6906e1f9bc0cebe21f41181b4c716d64e794369c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6906e1f9bc0cebe21f41181b4c716d64e794369c", "message": "fix dependency", "committedDate": "2020-10-23T07:21:32Z", "type": "forcePushed"}, {"oid": "dacecc21daf517402548978d664561ed71919ffd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dacecc21daf517402548978d664561ed71919ffd", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "committedDate": "2020-10-27T13:11:22Z", "type": "forcePushed"}, {"oid": "950116bbeeea21209871051a17494f077e1d94e6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/950116bbeeea21209871051a17494f077e1d94e6", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "committedDate": "2020-10-27T15:54:59Z", "type": "commit"}, {"oid": "950116bbeeea21209871051a17494f077e1d94e6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/950116bbeeea21209871051a17494f077e1d94e6", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "committedDate": "2020-10-27T15:54:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513263886", "body": "To be removed?", "bodyText": "To be removed?", "bodyHTML": "<p dir=\"auto\">To be removed?</p>", "author": "danielezonca", "createdAt": "2020-10-28T08:38:54Z", "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n               $DataEventType$.class,\n               \"$Trigger$\",\n               new DefaultEventConsumerFactory(),\n               configBean.useCloudEvents());\n-    }\n \n-    @org.springframework.kafka.annotation.KafkaListener(topics = \"$Trigger$\")\n-    public void consume(String payload) {\n-        super.consume(payload);\n+        Flux.from(eventPublisher)\n+            .log()", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDI2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404268", "bodyText": "+1 to remove, or at least map the log explicitly as a debug.", "author": "tiagodolphine", "createdAt": "2020-10-28T12:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "changed_code": [{"header": "diff --git a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\nindex 1143059c99..4f49baf723 100644\n--- a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n", "chunk": "@@ -27,8 +27,7 @@ public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $Data\n               configBean.useCloudEvents());\n \n         Flux.from(eventPublisher)\n-            .log()\n-            .subscribe(this::consume);\n+                .subscribe(this::consume);\n     }\n \n     protected $Type$ eventToModel($DataType$ event) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\nindex 1143059c99..4f49baf723 100644\n--- a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n", "chunk": "@@ -27,8 +27,7 @@ public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $Data\n               configBean.useCloudEvents());\n \n         Flux.from(eventPublisher)\n-            .log()\n-            .subscribe(this::consume);\n+                .subscribe(this::consume);\n     }\n \n     protected $Type$ eventToModel($DataType$ event) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "6ce20bcc68c234fa8b28bfbd59bb105cfcced831", "committedDate": "2021-01-18 13:46:12 +0100", "message": "[KOGITO-4123] Implement template naming convention in TemplatedGenerator (#968)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513265621", "body": "Shouldn't we check the result and log the error (if any)?", "bodyText": "Shouldn't we check the result and log the error (if any)?", "bodyHTML": "<p dir=\"auto\">Shouldn't we check the result and log the error (if any)?</p>", "author": "danielezonca", "createdAt": "2020-10-28T08:41:54Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {\n+                }); // discard return to comply with the signature", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDQyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404422", "bodyText": "I think the completable() method does something already with the failed future, I will check", "author": "evacchi", "createdAt": "2020-10-28T12:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1NjA2MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513556060", "bodyText": "I have added a log to AbstractMessageProducer. This just propagates the CompletableFuture (which may be completed exceptionally) and discards the return value to comply with the signature (I 100% agree we should not just throw this away, but let's at least make it work now)", "author": "evacchi", "createdAt": "2020-10-28T15:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 3c530dbe71..ad4cc4a5ad 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -34,14 +35,13 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n-    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n     String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n         return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {\n-                }); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n     @Deprecated\n", "next_change": {"commit": "192366d0c2bfead82931e57e0745ced916ad08dc", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex ad4cc4a5ad..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -44,8 +44,4 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 3c530dbe71..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -34,18 +35,13 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n-    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n     String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n         return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {\n-                }); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": {"commit": "9743047b3f17701e4e4d885a283ef8e31edade16", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 5cfe27ecfd..e8be4276d8 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -1,45 +1,70 @@\n /*\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.kie.kogito.addon.cloudevents.spring;\n \n+import java.util.Optional;\n import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n \n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.EventEmitter;\n+import org.kie.kogito.event.EventMarshaller;\n import org.kie.kogito.event.KogitoEventStreams;\n-import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.impl.DefaultEventMarshaller;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n  */\n @Component\n-public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+public class SpringKafkaCloudEventEmitter implements EventEmitter {\n \n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n     @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n-    String kafkaTopicName;\n+    String defaultTopicName;\n+    @Autowired\n+    Environment env;\n+    @Autowired\n+    ObjectProvider<EventMarshaller> marshallerInstance;\n+    private EventMarshaller marshaller;\n+    @Autowired\n+    ConfigBean configBean;\n+\n+    @PostConstruct\n+    void init() {\n+        marshaller = marshallerInstance.getIfAvailable(DefaultEventMarshaller::new);\n+    }\n \n-    public CompletionStage<Void> emit(String e) {\n-        return emitter.send(kafkaTopicName, e)\n+    @Override\n+    public <T> CompletionStage<Void> emit(T e, String type, Optional<Function<T, Object>> processDecorator) {\n+        return emitter\n+                .send(\n+                        env.getProperty(\"kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \".\" + type,\n+                                defaultTopicName),\n+                        marshaller.marshall(configBean.useCloudEvents() ? processDecorator.map(d -> d\n+                                .apply(e)).orElse(e) : e))\n                 .completable()\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "26419812b4aee24b9be31faa605d4699e8461c0c", "committedDate": "2020-12-18 14:11:05 +0100", "message": "KOGITO-3849: kogito-events-api module + pluggable CloudEvent consumers (#915)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "9743047b3f17701e4e4d885a283ef8e31edade16", "committedDate": "2021-05-14 09:40:39 +1000", "message": "[KOGITO-4267] Kafka topic based on message name (#1235)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513382393", "body": "What do you mean with _demo_?", "bodyText": "What do you mean with demo?", "bodyHTML": "<p dir=\"auto\">What do you mean with <em>demo</em>?</p>", "author": "danielezonca", "createdAt": "2020-10-28T11:52:14Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NzM5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513397390", "bodyText": "and I think it would be better using camelCase for the method name, and something indicating you are creating a bean, that would be similar to the @Producer on CDI.", "author": "tiagodolphine", "createdAt": "2020-10-28T12:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDExMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404113", "bodyText": "\ud83d\ude05 copy paste", "author": "evacchi", "createdAt": "2020-10-28T12:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b179be4293..3ea0a9f844 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -63,12 +64,8 @@ public class SpringKafkaCloudEventPublisher {\n     }\n \n     @Bean\n-    @Qualifier(\"kogito_event_publisher\")\n-    public Flux<String> convert_to_demo_topic() {\n-        return makeConsumer();\n-    }\n-\n-    private Flux<String> makeConsumer() {\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b179be4293..3ea0a9f844 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -63,12 +64,8 @@ public class SpringKafkaCloudEventPublisher {\n     }\n \n     @Bean\n-    @Qualifier(\"kogito_event_publisher\")\n-    public Flux<String> convert_to_demo_topic() {\n-        return makeConsumer();\n-    }\n-\n-    private Flux<String> makeConsumer() {\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n", "next_change": {"commit": "a35efd32c0653287ea5f466a065cc0a996227196", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex 3ea0a9f844..b7c4a4a178 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -64,16 +66,16 @@ public class SpringKafkaCloudEventPublisher {\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n                       offset.topicPartition(),\n                       offset.offset(),\n                       dateFormat.format(new Date(record.timestamp())),\n", "next_change": {"commit": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b7c4a4a178..50dc618bc0 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -76,11 +75,11 @@ public class SpringKafkaCloudEventPublisher {\n         ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n             log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n-                      offset.topicPartition(),\n-                      offset.offset(),\n-                      dateFormat.format(new Date(record.timestamp())),\n-                      record.key(),\n-                      record.value());\n+                    offset.topicPartition(),\n+                    offset.offset(),\n+                    dateFormat.format(new Date(record.timestamp())),\n+                    record.key(),\n+                    record.value());\n             offset.acknowledge();\n \n             return record.value();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "a35efd32c0653287ea5f466a065cc0a996227196", "committedDate": "2020-11-05 16:23:13 +0100", "message": "KOGITO-3723 Use trigger name as cloud event type in producer (#854)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "committedDate": "2021-02-25 13:55:16 +1000", "message": "KOGITO-4357 - Add formatter plugin + reformat codebase (#1039)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NDg4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513394888", "body": "I think using `.thenApply(() -> null)` would be better, because it would be similar to `.map(...)`", "bodyText": "I think using .thenApply(() -> null) would be better, because it would be similar to .map(...)", "bodyHTML": "<p dir=\"auto\">I think using <code>.thenApply(() -&gt; null)</code> would be better, because it would be similar to <code>.map(...)</code></p>", "author": "tiagodolphine", "createdAt": "2020-10-28T12:14:41Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 3c530dbe71..ad4cc4a5ad 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -34,14 +35,13 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n-    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n     String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n         return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {\n-                }); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n     @Deprecated\n", "next_change": {"commit": "192366d0c2bfead82931e57e0745ced916ad08dc", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex ad4cc4a5ad..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -44,8 +44,4 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 3c530dbe71..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -34,18 +35,13 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n-    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n     String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n         return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {\n-                }); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": {"commit": "9743047b3f17701e4e4d885a283ef8e31edade16", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 5cfe27ecfd..e8be4276d8 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -1,45 +1,70 @@\n /*\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.kie.kogito.addon.cloudevents.spring;\n \n+import java.util.Optional;\n import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n \n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.EventEmitter;\n+import org.kie.kogito.event.EventMarshaller;\n import org.kie.kogito.event.KogitoEventStreams;\n-import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.impl.DefaultEventMarshaller;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n  */\n @Component\n-public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+public class SpringKafkaCloudEventEmitter implements EventEmitter {\n \n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n     @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n-    String kafkaTopicName;\n+    String defaultTopicName;\n+    @Autowired\n+    Environment env;\n+    @Autowired\n+    ObjectProvider<EventMarshaller> marshallerInstance;\n+    private EventMarshaller marshaller;\n+    @Autowired\n+    ConfigBean configBean;\n+\n+    @PostConstruct\n+    void init() {\n+        marshaller = marshallerInstance.getIfAvailable(DefaultEventMarshaller::new);\n+    }\n \n-    public CompletionStage<Void> emit(String e) {\n-        return emitter.send(kafkaTopicName, e)\n+    @Override\n+    public <T> CompletionStage<Void> emit(T e, String type, Optional<Function<T, Object>> processDecorator) {\n+        return emitter\n+                .send(\n+                        env.getProperty(\"kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \".\" + type,\n+                                defaultTopicName),\n+                        marshaller.marshall(configBean.useCloudEvents() ? processDecorator.map(d -> d\n+                                .apply(e)).orElse(e) : e))\n                 .completable()\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "26419812b4aee24b9be31faa605d4699e8461c0c", "committedDate": "2020-12-18 14:11:05 +0100", "message": "KOGITO-3849: kogito-events-api module + pluggable CloudEvent consumers (#915)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "9743047b3f17701e4e4d885a283ef8e31edade16", "committedDate": "2021-05-14 09:40:39 +1000", "message": "[KOGITO-4267] Kafka topic based on message name (#1235)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513400745", "body": "we could revisit this in the future, but in some way, we should give the flexibility to let the consumer ack the received message, like after executing some computation successfully or whatever, and not ack in case of failure, this would the same for quarkus approach.. anyway just a comment for us to think as a future improvement.", "bodyText": "we could revisit this in the future, but in some way, we should give the flexibility to let the consumer ack the received message, like after executing some computation successfully or whatever, and not ack in case of failure, this would the same for quarkus approach.. anyway just a comment for us to think as a future improvement.", "bodyHTML": "<p dir=\"auto\">we could revisit this in the future, but in some way, we should give the flexibility to let the consumer ack the received message, like after executing some computation successfully or whatever, and not ack in case of failure, this would the same for quarkus approach.. anyway just a comment for us to think as a future improvement.</p>", "author": "tiagodolphine", "createdAt": "2020-10-28T12:25:03Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {\n+        return makeConsumer();\n+    }\n+\n+    private Flux<String> makeConsumer() {\n+        ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n+                .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n+                .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n+        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n+\n+        return kafkaFlux.map(record -> {\n+            ReceiverOffset offset = record.receiverOffset();\n+            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+                      offset.topicPartition(),\n+                      offset.offset(),\n+                      dateFormat.format(new Date(record.timestamp())),\n+                      record.key(),\n+                      record.value());\n+            offset.acknowledge();", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NjY5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513466693", "bodyText": "yes, good point", "author": "evacchi", "createdAt": "2020-10-28T14:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MzMyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514063325", "bodyText": "filed https://issues.redhat.com/browse/KOGITO-3733", "author": "evacchi", "createdAt": "2020-10-29T07:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "a35efd32c0653287ea5f466a065cc0a996227196", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b179be4293..b7c4a4a178 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -63,20 +66,16 @@ public class SpringKafkaCloudEventPublisher {\n     }\n \n     @Bean\n-    @Qualifier(\"kogito_event_publisher\")\n-    public Flux<String> convert_to_demo_topic() {\n-        return makeConsumer();\n-    }\n-\n-    private Flux<String> makeConsumer() {\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n                       offset.topicPartition(),\n                       offset.offset(),\n                       dateFormat.format(new Date(record.timestamp())),\n", "next_change": {"commit": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b7c4a4a178..50dc618bc0 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -76,11 +75,11 @@ public class SpringKafkaCloudEventPublisher {\n         ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n             log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n-                      offset.topicPartition(),\n-                      offset.offset(),\n-                      dateFormat.format(new Date(record.timestamp())),\n-                      record.key(),\n-                      record.value());\n+                    offset.topicPartition(),\n+                    offset.offset(),\n+                    dateFormat.format(new Date(record.timestamp())),\n+                    record.key(),\n+                    record.value());\n             offset.acknowledge();\n \n             return record.value();\n", "next_change": null}]}}, {"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\nindex b179be4293..b7c4a4a178 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java\n", "chunk": "@@ -85,6 +84,8 @@ public class SpringKafkaCloudEventPublisher {\n             offset.acknowledge();\n \n             return record.value();\n-        });\n+        }).publish();\n+\n+        return broadcast.autoConnect();\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "a35efd32c0653287ea5f466a065cc0a996227196", "committedDate": "2020-11-05 16:23:13 +0100", "message": "KOGITO-3723 Use trigger name as cloud event type in producer (#854)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "committedDate": "2021-02-25 13:55:16 +1000", "message": "KOGITO-4357 - Add formatter plugin + reformat codebase (#1039)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMzU4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513403583", "body": "what about using a constant for `\"kogito_event_publisher\"` to centralize the name, in this way it would be easier to change if necessary in the future.", "bodyText": "what about using a constant for \"kogito_event_publisher\" to centralize the name, in this way it would be easier to change if necessary in the future.", "bodyHTML": "<p dir=\"auto\">what about using a constant for <code>\"kogito_event_publisher\"</code> to centralize the name, in this way it would be easier to change if necessary in the future.</p>", "author": "tiagodolphine", "createdAt": "2020-10-28T12:29:59Z", "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {", "originalCommit": "950116bbeeea21209871051a17494f077e1d94e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "changed_code": [{"header": "diff --git a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\nindex 1143059c99..4f49baf723 100644\n--- a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n", "chunk": "@@ -17,7 +17,7 @@ public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $Data\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n             ConfigBean configBean,\n-            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n+            @org.springframework.beans.factory.annotation.Qualifier(KogitoEventStreams.PUBLISHER) Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\nindex 1143059c99..4f49baf723 100644\n--- a/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java\n", "chunk": "@@ -17,7 +17,7 @@ public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $Data\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n             ConfigBean configBean,\n-            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n+            @org.springframework.beans.factory.annotation.Qualifier(KogitoEventStreams.PUBLISHER) Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n", "next_change": null}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "6ce20bcc68c234fa8b28bfbd59bb105cfcced831", "committedDate": "2021-01-18 13:46:12 +0100", "message": "[KOGITO-4123] Implement template naming convention in TemplatedGenerator (#968)"}]}, {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a08407c1af4aeabf5e8513d15f1578d461168cc0", "message": "apply suggestions", "committedDate": "2020-10-28T15:52:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513840054", "body": "@evacchi Im just afraid that we end up limiting the options that can be tweaked for the receiver with this new approach. Having in the application.properties in a way that all kafka properties could be used allows great flexibility.\r\n@MarianMacik have you had to tweak these in your tests? Just wondering as an example about how this is important.", "bodyText": "@evacchi Im just afraid that we end up limiting the options that can be tweaked for the receiver with this new approach. Having in the application.properties in a way that all kafka properties could be used allows great flexibility.\n@MarianMacik have you had to tweak these in your tests? Just wondering as an example about how this is important.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/evacchi/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/evacchi\">@evacchi</a> Im just afraid that we end up limiting the options that can be tweaked for the receiver with this new approach. Having in the application.properties in a way that all kafka properties could be used allows great flexibility.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/MarianMacik/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MarianMacik\">@MarianMacik</a> have you had to tweak these in your tests? Just wondering as an example about how this is important.</p>", "author": "cristianonicolai", "createdAt": "2020-10-29T00:30:10Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "originalCommit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTg2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514061866", "bodyText": "not sure what you mean. this is mapped to application.properties, and the config option is the same that is used by the \"plain\" spring boot kafka connector. If you mean having different kafkas for each topic then AFAIK this worked the same even before this PR (only 1 broker)", "author": "evacchi", "createdAt": "2020-10-29T07:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjY1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514636650", "bodyText": "@evacchi my point is about setting up the consumer config properties. Kafka exposes a set of other configurations, not only the groupid and bootstrap server as used in here. See https://kafka.apache.org/documentation/#consumerconfigs\nMy concern is that in some situation, these properties will need to be tweaked, and I think we would allow that with this new approach.", "author": "cristianonicolai", "createdAt": "2020-10-30T00:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU5MDQwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516590406", "bodyText": "Sorry, just read it now. Not sure about the cloud events here (I guess something Kafka-related), but there are properties which may need to be tweaked theoretically. So do I get it right that this consumes events from external kafka but then publishes them in something called Kogito Event Streams, i.e. in Kogito ecosystem? Hence the name of the class ending in Publisher I guess....", "author": "MarianMacik", "createdAt": "2020-11-03T11:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2NzYyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516667625", "bodyText": "@cristianonicolai ^^", "author": "MarianMacik", "createdAt": "2020-11-03T13:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjczMTY1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516731652", "bodyText": "I have created https://issues.redhat.com/browse/KOGITO-3760 because we can probably reuse the reactive template, which supports standard spring config while retaining the nonblocking API", "author": "evacchi", "createdAt": "2020-11-03T15:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "a35efd32c0653287ea5f466a065cc0a996227196", "committedDate": "2020-11-05 16:23:13 +0100", "message": "KOGITO-3723 Use trigger name as cloud event type in producer (#854)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "committedDate": "2021-02-25 13:55:16 +1000", "message": "KOGITO-4357 - Add formatter plugin + reformat codebase (#1039)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NDQ2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514074465", "body": "```suggestion\r\n        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n          \n          \n            \n                    logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Received: {} on thread {}<span class=\"pl-pds\">\"</span></span>, payload, <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>currentThread()<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Received: {} on thread {}<span class=\"pl-pds\">\"</span></span>, payload, <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>currentThread()<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danielezonca", "createdAt": "2020-10-29T08:17:08Z", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "diffHunk": "@@ -82,6 +82,7 @@ public void setParams(\n     }\n \n     public void consume(String payload) {\n+        logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "originalCommit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39aab28ba24693bee63561f65bd0297a6c877804", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 57069b0428..4e40838212 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -82,7 +82,7 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n     }\n \n     public void consume(String payload) {\n-        logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n+        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n         eventConsumerFactory.get(this::eventToModel, dataEventClass, cloudEventClass, useCloudEvents)\n                 .consume(application, (Process<Model>) process, payload, trigger);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 57069b0428..4e40838212 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -82,7 +82,7 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n     }\n \n     public void consume(String payload) {\n-        logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n+        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n         eventConsumerFactory.get(this::eventToModel, dataEventClass, cloudEventClass, useCloudEvents)\n                 .consume(application, (Process<Model>) process, payload, trigger);\n     }\n", "next_change": {"commit": "9743047b3f17701e4e4d885a283ef8e31edade16", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 4e40838212..680abbc296 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -45,47 +44,51 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n     public AbstractMessageConsumer() {\n     }\n \n-    public AbstractMessageConsumer(\n-            Application application,\n+    public AbstractMessageConsumer(Application application,\n             Process<M> process,\n-            Class<D> dataEventClass,\n-            Class<T> cloudEventClass,\n             String trigger,\n             EventConsumerFactory eventConsumerFactory,\n-            Optional<Boolean> useCloudEvents) {\n-        setParams(application,\n-                  process,\n-                  dataEventClass,\n-                  cloudEventClass,\n-                  trigger,\n-                  eventConsumerFactory,\n-                  useCloudEvents);\n+            EventReceiver eventReceiver,\n+            Class<D> dataEventClass,\n+            Class<T> cloudEventClass,\n+            boolean useCloudEvents) {\n+        init(application, process, trigger, eventConsumerFactory, eventReceiver, dataEventClass, cloudEventClass, useCloudEvents);\n     }\n \n-    public void setParams(\n-            Application application,\n+    public void init(Application application,\n             Process<M> process,\n-            Class<D> dataEventClass,\n-            Class<T> cloudEventClass,\n             String trigger,\n             EventConsumerFactory eventConsumerFactory,\n-            Optional<Boolean> useCloudEvents) {\n+            EventReceiver eventReceiver,\n+            Class<D> dataEventClass,\n+            Class<T> cloudEventClass,\n+            boolean useCloudEvents) {\n         this.process = process;\n         this.application = application;\n-        this.dataEventClass = dataEventClass;\n-        this.cloudEventClass = cloudEventClass;\n-        this.eventConsumerFactory = eventConsumerFactory;\n         this.trigger = trigger;\n-        this.useCloudEvents = useCloudEvents;\n-\n+        this.eventConsumer = eventConsumerFactory.get(this::eventToModel, useCloudEvents);\n+        if (useCloudEvents) {\n+            eventReceiver.subscribe(this::consumeCloud, new SubscriptionInfo<>(cloudEventClass, Optional.of(trigger)));\n+        } else {\n+            eventReceiver.subscribe(this::consume, new SubscriptionInfo<>(dataEventClass, Optional.of(trigger)));\n+        }\n         logger.info(\"Consumer for {} started.\", dataEventClass);\n     }\n \n-    public void consume(String payload) {\n+    public void consumeCloud(T payload) {\n+        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n+        eventConsumer.consume(application, process, payload, trigger);\n+    }\n+\n+    public void consume(D payload) {\n         logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n-        eventConsumerFactory.get(this::eventToModel, dataEventClass, cloudEventClass, useCloudEvents)\n-                .consume(application, (Process<Model>) process, payload, trigger);\n+        eventConsumer.consume(application, process, payload, trigger);\n+    }\n+\n+    @Override\n+    public String getInputTrigger() {\n+        return trigger;\n     }\n \n-    protected abstract Model eventToModel(D event);\n-}\n\\ No newline at end of file\n+    protected abstract M eventToModel(D event);\n+}\n", "next_change": {"commit": "49c622f08f3803d27d0585adfdeabe93200f642e", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 680abbc296..d8e076630a 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -62,32 +70,41 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n             EventReceiver eventReceiver,\n             Class<D> dataEventClass,\n             Class<T> cloudEventClass,\n-            boolean useCloudEvents) {\n+            boolean useCloudEvents,\n+            ProcessService processService,\n+            ExecutorService executorService,\n+            EventConverter<String> eventConverter) {\n         this.process = process;\n         this.application = application;\n         this.trigger = trigger;\n-        this.eventConsumer = eventConsumerFactory.get(this::eventToModel, useCloudEvents);\n+        this.eventConverter = eventConverter;\n+        this.eventConsumer = eventConsumerFactory.get(processService, executorService, this::eventToModel, useCloudEvents);\n         if (useCloudEvents) {\n-            eventReceiver.subscribe(this::consumeCloud, new SubscriptionInfo<>(cloudEventClass, Optional.of(trigger)));\n+            this.outputClass = cloudEventClass;\n+            eventReceiver.subscribe(this::consumeCloud, new SubscriptionInfo<>(eventConverter, cloudEventClass, Optional.of(trigger)));\n         } else {\n-            eventReceiver.subscribe(this::consume, new SubscriptionInfo<>(dataEventClass, Optional.of(trigger)));\n+            this.outputClass = dataEventClass;\n+            eventReceiver.subscribe(this::consumeNotCloud, new SubscriptionInfo<>(eventConverter, dataEventClass, Optional.of(trigger)));\n         }\n-        logger.info(\"Consumer for {} started.\", dataEventClass);\n+        logger.info(\"Consumer for {} started\", trigger);\n     }\n \n-    public void consumeCloud(T payload) {\n-        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n-        eventConsumer.consume(application, process, payload, trigger);\n+    protected CompletionStage<?> consumeCloud(T payload) {\n+        return consume(payload);\n     }\n \n-    public void consume(D payload) {\n-        logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n-        eventConsumer.consume(application, process, payload, trigger);\n+    protected CompletionStage<?> consumeNotCloud(D payload) {\n+        return consume(payload);\n     }\n \n-    @Override\n-    public String getInputTrigger() {\n-        return trigger;\n+    private CompletionStage<?> consume(Object payload) {\n+        logger.trace(\"Received {} for trigger {}\", payload, trigger);\n+        CompletionStage<?> result = eventConsumer.consume(application, process, payload, trigger);\n+        if (logger.isTraceEnabled()) {\n+            result = result.thenAccept(v -> logger.trace(\"Completed {} for trigger {}\", payload, trigger));\n+        }\n+        logger.trace(\"Dispatched {} for trigger {}\", payload, trigger);\n+        return result;\n     }\n \n     protected abstract M eventToModel(D event);\n", "next_change": {"commit": "0509350d78d5164bb5584adb2c80668ae7680fa7", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex d8e076630a..84b6882ac2 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -107,5 +108,7 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n         return result;\n     }\n \n-    protected abstract M eventToModel(D event);\n+    protected Optional<Function<D, M>> getModelConverter() {\n+        return Optional.empty();\n+    }\n }\n", "next_change": {"commit": "eb70deed3e367ce9db1108d886a4a8dce37d79b0", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 84b6882ac2..6b9eb2e4f5 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -111,4 +105,8 @@ public abstract class AbstractMessageConsumer<M extends Model, D, T extends Abst\n     protected Optional<Function<D, M>> getModelConverter() {\n         return Optional.empty();\n     }\n+\n+    protected D getData(ProcessDataEvent<D> cloudEvent) {\n+        return cloudEvent.getData();\n+    }\n }\n", "next_change": {"commit": "f62646cba8f644a869786e15d1a5609eda19c00b", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nindex 6b9eb2e4f5..bf6cc54070 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -51,62 +48,43 @@ public abstract class AbstractMessageConsumer<M extends Model, D> {\n     public AbstractMessageConsumer(Application application,\n             Process<M> process,\n             String trigger,\n-            EventConsumerFactory eventConsumerFactory,\n             EventReceiver eventReceiver,\n-            Class<D> dataEventConverter,\n+            Class<D> dataClass,\n             boolean useCloudEvents,\n             ProcessService processService,\n             ExecutorService executorService,\n             EventUnmarshaller<Object> eventUnmarshaller) {\n-        init(application, process, trigger, eventConsumerFactory, eventReceiver, dataEventConverter, useCloudEvents, processService, executorService, eventUnmarshaller);\n+        init(application, process, trigger, eventReceiver, dataClass, useCloudEvents, processService, executorService, eventUnmarshaller);\n     }\n \n     public void init(Application application,\n             Process<M> process,\n             String trigger,\n-            EventConsumerFactory eventConsumerFactory,\n             EventReceiver eventReceiver,\n-            Class<D> dataEventClass,\n+            Class<D> dataClass,\n             boolean useCloudEvents,\n             ProcessService processService,\n             ExecutorService executorService,\n             EventUnmarshaller<Object> eventUnmarshaller) {\n-        this.process = process;\n-        this.application = application;\n         this.trigger = trigger;\n-        this.eventConsumer = eventConsumerFactory.get(processService, executorService, getModelConverter(), useCloudEvents, this::getData);\n+        this.eventDispatcher = new ProcessEventDispatcher<>(process, getModelConverter().orElse(null), processService, executorService);\n+\n         if (useCloudEvents) {\n-            eventReceiver.subscribe(this::consumeCloud,\n-                    SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(ProcessDataEvent.class).parametrizedClasses(dataEventClass).type(trigger).createSubscriptionInfo());\n+            eventReceiver.subscribe(this::consume,\n+                    SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(ProcessDataEvent.class).parametrizedClasses(dataClass).type(trigger).createSubscriptionInfo());\n         } else {\n-            eventReceiver.subscribe(this::consumeNotCloud, SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(dataEventClass).type(trigger).createSubscriptionInfo());\n+            eventReceiver.subscribe(this::consume, SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(dataClass).type(trigger).createSubscriptionInfo());\n         }\n         logger.info(\"Consumer for {} started\", trigger);\n     }\n \n-    protected CompletionStage<?> consumeCloud(ProcessDataEvent<D> payload) {\n-        return consume(payload);\n-    }\n-\n-    protected CompletionStage<?> consumeNotCloud(D payload) {\n-        return consume(payload);\n-    }\n-\n     private CompletionStage<?> consume(Object payload) {\n         logger.trace(\"Received {} for trigger {}\", payload, trigger);\n-        CompletionStage<?> result = eventConsumer.consume(application, process, payload, trigger);\n-        if (logger.isTraceEnabled()) {\n-            result = result.thenAccept(v -> logger.trace(\"Completed {} for trigger {}\", payload, trigger));\n-        }\n-        logger.trace(\"Dispatched {} for trigger {}\", payload, trigger);\n-        return result;\n+        return eventDispatcher.dispatch(trigger, payload)\n+                .thenAccept(v -> logger.trace(\"Consume completed {} for trigger {}\", payload, trigger));\n     }\n \n-    protected Optional<Function<D, M>> getModelConverter() {\n+    protected Optional<Function<Object, M>> getModelConverter() {\n         return Optional.empty();\n     }\n-\n-    protected D getData(ProcessDataEvent<D> cloudEvent) {\n-        return cloudEvent.getData();\n-    }\n }\n", "next_change": {"commit": "9b0e25ef90bbe17906480da3e18876581ed87254", "changed_code": [{"header": "diff --git a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java b/api/kogito-events-core/src/main/java/org/kie/kogito/event/impl/AbstractMessageConsumer.java\nsimilarity index 51%\nrename from api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\nrename to api/kogito-events-core/src/main/java/org/kie/kogito/event/impl/AbstractMessageConsumer.java\nindex bf6cc54070..d1d2ea732a 100644\n--- a/api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java\n+++ b/api/kogito-events-core/src/main/java/org/kie/kogito/event/impl/AbstractMessageConsumer.java\n", "chunk": "@@ -37,54 +36,38 @@ public abstract class AbstractMessageConsumer<M extends Model, D> {\n     protected static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n \n     private String trigger;\n-    private EventDispatcher<M> eventDispatcher;\n+    private EventDispatcher<M, D> eventDispatcher;\n \n-    // in general we should favor the non-empty constructor\n-    // but there is an issue with Quarkus https://github.com/quarkusio/quarkus/issues/2949#issuecomment-513017781\n-    // use this in conjuction with setParams()\n-    public AbstractMessageConsumer() {\n-    }\n-\n-    public AbstractMessageConsumer(Application application,\n+    protected void init(Application application,\n             Process<M> process,\n             String trigger,\n             EventReceiver eventReceiver,\n             Class<D> dataClass,\n-            boolean useCloudEvents,\n             ProcessService processService,\n             ExecutorService executorService,\n-            EventUnmarshaller<Object> eventUnmarshaller) {\n-        init(application, process, trigger, eventReceiver, dataClass, useCloudEvents, processService, executorService, eventUnmarshaller);\n+            Set<String> correlations) {\n+        this.trigger = trigger;\n+        this.eventDispatcher = new ProcessEventDispatcher<>(process, getModelConverter(), processService, executorService, correlations, getDataResolver());\n+        eventReceiver.subscribe(this::consume, dataClass);\n+        logger.info(\"Consumer for {} started\", trigger);\n     }\n \n-    public void init(Application application,\n-            Process<M> process,\n-            String trigger,\n-            EventReceiver eventReceiver,\n-            Class<D> dataClass,\n-            boolean useCloudEvents,\n-            ProcessService processService,\n-            ExecutorService executorService,\n-            EventUnmarshaller<Object> eventUnmarshaller) {\n-        this.trigger = trigger;\n-        this.eventDispatcher = new ProcessEventDispatcher<>(process, getModelConverter().orElse(null), processService, executorService);\n+    // this will be overriden by serverless workflow\n+    protected Function<DataEvent<D>, D> getDataResolver() {\n+        return this::justData;\n+    }\n \n-        if (useCloudEvents) {\n-            eventReceiver.subscribe(this::consume,\n-                    SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(ProcessDataEvent.class).parametrizedClasses(dataClass).type(trigger).createSubscriptionInfo());\n-        } else {\n-            eventReceiver.subscribe(this::consume, SubscriptionInfo.builder().converter(eventUnmarshaller).outputClass(dataClass).type(trigger).createSubscriptionInfo());\n-        }\n-        logger.info(\"Consumer for {} started\", trigger);\n+    protected final D justData(DataEvent<D> dataEvent) {\n+        return dataEvent.getData();\n     }\n \n-    private CompletionStage<?> consume(Object payload) {\n+    private CompletionStage<?> consume(DataEvent<D> payload) {\n         logger.trace(\"Received {} for trigger {}\", payload, trigger);\n         return eventDispatcher.dispatch(trigger, payload)\n                 .thenAccept(v -> logger.trace(\"Consume completed {} for trigger {}\", payload, trigger));\n     }\n \n-    protected Optional<Function<Object, M>> getModelConverter() {\n+    protected Optional<Function<D, M>> getModelConverter() {\n         return Optional.empty();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "f855f1d0d21e1f6c0fa1d4bfcf289fe5cb0956ec", "committedDate": "2021-02-25 13:55:16 +1000", "message": "KOGITO-4357 - Add formatter plugin + reformat codebase (#1039)"}, {"oid": "9743047b3f17701e4e4d885a283ef8e31edade16", "committedDate": "2021-05-14 09:40:39 +1000", "message": "[KOGITO-4267] Kafka topic based on message name (#1235)"}, {"oid": "49c622f08f3803d27d0585adfdeabe93200f642e", "committedDate": "2021-07-23 23:50:50 +0200", "message": "[KOGITO-5252] Performance changes (#1420)"}, {"oid": "0509350d78d5164bb5584adb2c80668ae7680fa7", "committedDate": "2021-12-23 20:27:50 +0100", "message": "[KOGITO-6418] Changing code generation (#1814)"}, {"oid": "3864d34d11c6cfaa3efa6ae5b6ecb03124cfc879", "committedDate": "2022-01-11 09:18:53 +0100", "message": "[KOGITO-5094] Allowing byte[] as serializer/deserializer for Quarkus (#1823)"}, {"oid": "2aa4b0890e4d042d37be35bfdb9a27c35493f043", "committedDate": "2022-02-14 14:56:06 -0300", "message": "[KOGITO-6658] Simplify Kogito Eventing CodeGen for processes (#1970)"}, {"oid": "eb70deed3e367ce9db1108d886a4a8dce37d79b0", "committedDate": "2022-03-02 20:08:52 +0100", "message": "[KOGITO-6680] Implement data only functionality (#2050)"}, {"oid": "f62646cba8f644a869786e15d1a5609eda19c00b", "committedDate": "2022-03-21 11:43:29 +1000", "message": "[KOGITO-6823] Refactor CloudEventConsumer to extract event decision logic (#2061)"}, {"oid": "a36ca242443f20d8571b7c0d4e5ea25750faa430", "committedDate": "2022-03-26 10:39:40 +1000", "message": "KOGITO-6886 Consolidate Event API between Data Index and Runtime (#2090)"}, {"oid": "a554ff96cde138bc3963593baae58b2f0b0146d5", "committedDate": "2022-05-11 21:33:08 +0200", "message": "[KOGITO-6927] Accessing headers (#2124)"}, {"oid": "a939408c8585a5edb7c3b3a9e400282fad9d677a", "committedDate": "2022-05-30 08:21:26 -0300", "message": "[KOGITO-6785] Serverless Workflow Correlation (#2160)"}, {"oid": "9b0e25ef90bbe17906480da3e18876581ed87254", "committedDate": "2022-10-06 09:36:20 +0200", "message": "[KOGITO-7857] CloudEvent sdk refactor (#2505)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NTcyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514075726", "body": "Ticket to remove this method?", "bodyText": "Ticket to remove this method?", "bodyHTML": "<p dir=\"auto\">Ticket to remove this method?</p>", "author": "danielezonca", "createdAt": "2020-10-29T08:19:20Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -19,25 +19,32 @@\n \n import java.util.concurrent.CompletionStage;\n \n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n+    @Deprecated", "originalCommit": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "192366d0c2bfead82931e57e0745ced916ad08dc", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex ad4cc4a5ad..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -44,8 +44,4 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex ad4cc4a5ad..5cfe27ecfd 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -44,8 +44,4 @@ public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n-    @Deprecated\n-    public void emit(String topic, String message) {\n-        emitter.send(topic, message);\n-    }\n }\n", "next_change": {"commit": "9743047b3f17701e4e4d885a283ef8e31edade16", "changed_code": [{"header": "diff --git a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\nindex 5cfe27ecfd..e8be4276d8 100644\n--- a/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n+++ b/addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java\n", "chunk": "@@ -1,45 +1,70 @@\n /*\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.kie.kogito.addon.cloudevents.spring;\n \n+import java.util.Optional;\n import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n \n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.EventEmitter;\n+import org.kie.kogito.event.EventMarshaller;\n import org.kie.kogito.event.KogitoEventStreams;\n-import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.impl.DefaultEventMarshaller;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n  */\n @Component\n-public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+public class SpringKafkaCloudEventEmitter implements EventEmitter {\n \n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n     @Value(value = \"${spring.kafka.bootstrap-servers}\")\n     String kafkaBootstrapAddress;\n     @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n-    String kafkaTopicName;\n+    String defaultTopicName;\n+    @Autowired\n+    Environment env;\n+    @Autowired\n+    ObjectProvider<EventMarshaller> marshallerInstance;\n+    private EventMarshaller marshaller;\n+    @Autowired\n+    ConfigBean configBean;\n+\n+    @PostConstruct\n+    void init() {\n+        marshaller = marshallerInstance.getIfAvailable(DefaultEventMarshaller::new);\n+    }\n \n-    public CompletionStage<Void> emit(String e) {\n-        return emitter.send(kafkaTopicName, e)\n+    @Override\n+    public <T> CompletionStage<Void> emit(T e, String type, Optional<Function<T, Object>> processDecorator) {\n+        return emitter\n+                .send(\n+                        env.getProperty(\"kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \".\" + type,\n+                                defaultTopicName),\n+                        marshaller.marshall(configBean.useCloudEvents() ? processDecorator.map(d -> d\n+                                .apply(e)).orElse(e) : e))\n                 .completable()\n                 .thenApply(r -> null); // discard return to comply with the signature\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a", "message": "Merge commit", "committedDate": null}, {"oid": "26419812b4aee24b9be31faa605d4699e8461c0c", "committedDate": "2020-12-18 14:11:05 +0100", "message": "KOGITO-3849: kogito-events-api module + pluggable CloudEvent consumers (#915)"}, {"oid": "3b3dc689846591422480de0c8467886a650f05e0", "committedDate": "2021-02-15 15:47:59 +1000", "message": "KOGITO-4376 Copyright reformat to match expected format (#1065)"}, {"oid": "9743047b3f17701e4e4d885a283ef8e31edade16", "committedDate": "2021-05-14 09:40:39 +1000", "message": "[KOGITO-4267] Kafka topic based on message name (#1235)"}, {"oid": "07bd4c9f75c5f3ef32e8e5772737204caaf90999", "committedDate": "2021-06-21 16:17:35 -0300", "message": "[KOGITO-5299] - Addons Restructure (#1367)"}]}, {"oid": "39aab28ba24693bee63561f65bd0297a6c877804", "url": "https://github.com/kiegroup/kogito-runtimes/commit/39aab28ba24693bee63561f65bd0297a6c877804", "message": "debug log", "committedDate": "2020-10-29T10:55:56Z", "type": "commit"}, {"oid": "192366d0c2bfead82931e57e0745ced916ad08dc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/192366d0c2bfead82931e57e0745ced916ad08dc", "message": "cloud event emitter: remove deprecated method", "committedDate": "2020-10-29T10:56:14Z", "type": "commit"}]}