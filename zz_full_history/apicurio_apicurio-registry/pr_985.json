{"pr_number": 985, "pr_title": "REST Client throw specific exceptions", "pr_author": "carlesarnal", "pr_createdAt": "2020-11-04T11:57:49Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/985", "merge_commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "timeline": [{"oid": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "url": "https://github.com/Apicurio/apicurio-registry/commit/7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "message": "Adapt artifact state test", "committedDate": "2020-11-04T12:05:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNDY2Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517304662", "body": "What would you think about sending the exception classname as a response header instead of in the payload?", "bodyText": "What would you think about sending the exception classname as a response header instead of in the payload?", "bodyHTML": "<p dir=\"auto\">What would you think about sending the exception classname as a response header instead of in the payload?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T12:21:40Z", "path": "app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java", "diffHunk": "@@ -158,7 +169,7 @@ private static Error toError(Throwable t, int code) {\n         error.setErrorCode(code);\n         error.setMessage(t.getLocalizedMessage());\n         error.setDetail(getStackTrace(t));\n-\n+        error.setName(t.getClass().getSimpleName());", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzMjM5OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517332399", "bodyText": "Hm, I'm not sure if that's a good idea since this is the error payload so for me, it make sense to add the error name here. Do you have any strong reason I'm not aware of?", "author": "carlesarnal", "createdAt": "2020-11-04T13:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NDQ2OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517344468", "bodyText": "I was going to argue that the error classname is a detail that most clients won't care about, but then I realized that the \"detail\" field holds the java stack trace... so that argument wouldn't be very good.  :)\nSo nevermind - having it in the payload makes sense and is consistent with what we're doing already.\nI'll update the OpenAPI definition.", "author": "EricWittmann", "createdAt": "2020-11-04T13:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNDY2Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\nindex 2f0bb1d5..44e1d139 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n", "chunk": "@@ -161,7 +179,7 @@ public class RegistryExceptionMapper implements ExceptionMapper<Throwable> {\n         if (t instanceof RuleViolationException) {\n             RuleViolationException rve = (RuleViolationException) t;\n             error = new RuleViolationError();\n-            ((RuleViolationError) error).setCauses(rve.getCauses());\n+            ((RuleViolationError) error).setCauses(toRestCauses(rve.getCauses()));\n         } else {\n             error = new Error();\n         }\n", "next_change": {"commit": "0bfadbdf9146e9aad8287a1af7c06693926d0524", "changed_code": [{"header": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\nindex 44e1d139..d17b1321 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n", "chunk": "@@ -173,51 +116,4 @@ public class RegistryExceptionMapper implements ExceptionMapper<Throwable> {\n         return false;\n     }\n \n-    private static Error toError(Throwable t, int code) {\n-        Error error;\n-\n-        if (t instanceof RuleViolationException) {\n-            RuleViolationException rve = (RuleViolationException) t;\n-            error = new RuleViolationError();\n-            ((RuleViolationError) error).setCauses(toRestCauses(rve.getCauses()));\n-        } else {\n-            error = new Error();\n-        }\n-\n-        error.setErrorCode(code);\n-        error.setMessage(t.getLocalizedMessage());\n-        error.setDetail(getStackTrace(t));\n-        error.setName(t.getClass().getSimpleName());\n-        return error;\n-    }\n-\n-    /**\n-     * Converts rule violations to appropriate error beans.\n-     * @param violations\n-     */\n-    private static List<RuleViolationCause> toRestCauses(Set<RuleViolation> violations) {\n-        if (violations == null) {\n-            return null;\n-        }\n-        return violations.stream().map(violation -> {\n-            RuleViolationCause cause = new RuleViolationCause();\n-            cause.setContext(violation.getContext());\n-            cause.setDescription(violation.getDescription());\n-            return cause;\n-        }).collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Gets the full stack trace for the given exception and returns it as a\n-     * string.\n-     * @param t\n-     */\n-    private static String getStackTrace(Throwable t) {\n-        try (StringWriter writer = new StringWriter()) {\n-            t.printStackTrace(new PrintWriter(writer));\n-            return writer.toString();\n-        } catch (Exception e) {\n-            return null;\n-        }\n-    }\n }\n", "next_change": null}]}}, {"header": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\nindex 2f0bb1d5..44e1d139 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n", "chunk": "@@ -172,7 +190,23 @@ public class RegistryExceptionMapper implements ExceptionMapper<Throwable> {\n         error.setName(t.getClass().getSimpleName());\n         return error;\n     }\n-    \n+\n+    /**\n+     * Converts rule violations to appropriate error beans.\n+     * @param violations\n+     */\n+    private static List<RuleViolationCause> toRestCauses(Set<RuleViolation> violations) {\n+        if (violations == null) {\n+            return null;\n+        }\n+        return violations.stream().map(violation -> {\n+            RuleViolationCause cause = new RuleViolationCause();\n+            cause.setContext(violation.getContext());\n+            cause.setDescription(violation.getDescription());\n+            return cause;\n+        }).collect(Collectors.toList());\n+    }\n+\n     /**\n      * Gets the full stack trace for the given exception and returns it as a\n      * string.\n", "next_change": {"commit": "0bfadbdf9146e9aad8287a1af7c06693926d0524", "changed_code": [{"header": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\nindex 44e1d139..d17b1321 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n", "chunk": "@@ -173,51 +116,4 @@ public class RegistryExceptionMapper implements ExceptionMapper<Throwable> {\n         return false;\n     }\n \n-    private static Error toError(Throwable t, int code) {\n-        Error error;\n-\n-        if (t instanceof RuleViolationException) {\n-            RuleViolationException rve = (RuleViolationException) t;\n-            error = new RuleViolationError();\n-            ((RuleViolationError) error).setCauses(toRestCauses(rve.getCauses()));\n-        } else {\n-            error = new Error();\n-        }\n-\n-        error.setErrorCode(code);\n-        error.setMessage(t.getLocalizedMessage());\n-        error.setDetail(getStackTrace(t));\n-        error.setName(t.getClass().getSimpleName());\n-        return error;\n-    }\n-\n-    /**\n-     * Converts rule violations to appropriate error beans.\n-     * @param violations\n-     */\n-    private static List<RuleViolationCause> toRestCauses(Set<RuleViolation> violations) {\n-        if (violations == null) {\n-            return null;\n-        }\n-        return violations.stream().map(violation -> {\n-            RuleViolationCause cause = new RuleViolationCause();\n-            cause.setContext(violation.getContext());\n-            cause.setDescription(violation.getDescription());\n-            return cause;\n-        }).collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Gets the full stack trace for the given exception and returns it as a\n-     * string.\n-     * @param t\n-     */\n-    private static String getStackTrace(Throwable t) {\n-        try (StringWriter writer = new StringWriter()) {\n-            t.printStackTrace(new PrintWriter(writer));\n-            return writer.toString();\n-        } catch (Exception e) {\n-            return null;\n-        }\n-    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "726bdddbeb2cfa64470d8889d2788c79dc7f9924", "committedDate": "2020-11-17 08:49:45 -0500", "message": "Improve rest client error handling (#1002)"}, {"oid": "441de73bf7507ec818e920a1a52cd94d0ce959d8", "committedDate": "2020-12-17 11:57:55 -0500", "message": "special characters handling - % and non ASCII characters are now forbidden (#1086)"}, {"oid": "efaedd04435fd607616837e147e588634576a965", "committedDate": "2020-12-23 12:53:50 -0500", "message": "Remove error name in ccompat api (#1110)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}, {"oid": "6244ff9446ffa75646396688618d17efb9ad2c1e", "committedDate": "2021-03-02 11:49:39 -0500", "message": "Implement CNCF Schema Registry API (#1273)"}, {"oid": "01da2ff50e4879c304a4a0d3817ddc035b62882e", "committedDate": "2021-03-03 07:59:13 -0500", "message": "Multitenancy improvements, auth, tenant-manager, tenant specific urls,... (#1282)"}, {"oid": "ada7936ca6babc24a25e04145cda9f9eb5d97693", "committedDate": "2021-03-17 13:13:01 +0100", "message": "Check if storage supports multitenancy and access tenant manager via REST API (#1351)"}, {"oid": "0b4eca4678b6fc9b8d4547265c444e9f673bf3f4", "committedDate": "2021-05-12 15:35:56 -0400", "message": "Support for multi-tenant aware logging (#1487)"}, {"oid": "0b5543b11c635f9edfc14b33dfe1429830c7ce43", "committedDate": "2021-05-18 09:54:08 -0400", "message": "Ease RegistryStorage delegator pattern + initial impl limits enforcement (#1493)"}, {"oid": "52943eb32846a2cd7f0d664dc5928852d3ff662c", "committedDate": "2021-05-24 12:49:02 -0400", "message": "Adapt tenant manager and resolver to single realm approach (#1495)"}, {"oid": "da3c71a7fde4448a5d458aaed1773cf142766ebd", "committedDate": "2021-06-15 10:10:03 -0400", "message": "Fix code error mismatch in confluent api (#1576)"}, {"oid": "0bfadbdf9146e9aad8287a1af7c06693926d0524", "committedDate": "2021-06-16 14:48:40 +0200", "message": "multitenancy improvements - proper errors and logging verbosity (#1574)"}, {"oid": "dae8a0ad5176a1596fb078ef19f0a4e4336dc169", "committedDate": "2021-06-28 07:12:11 -0400", "message": "Multitenant metrics (#1558)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNTQxNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517305417", "body": "Rename the field as well?  Since it's now an executor and not a handler...", "bodyText": "Rename the field as well?  Since it's now an executor and not a handler...", "bodyHTML": "<p dir=\"auto\">Rename the field as well?  Since it's now an executor and not a handler...</p>", "author": "EricWittmann", "createdAt": "2020-11-04T12:23:10Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java", "diffHunk": "@@ -81,7 +81,7 @@\n  */\n public class RegistryRestClientImpl implements RegistryRestClient {\n \n-    private final RequestHandler requestHandler;\n+    private final RequestExecutor requestHandler;", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzMDIwNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517330207", "bodyText": "Whoops, good catch.", "author": "carlesarnal", "createdAt": "2020-11-04T13:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNTQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex 07d57cf1..5e8e4bf0 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -81,7 +81,7 @@ import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQU\n  */\n public class RegistryRestClientImpl implements RegistryRestClient {\n \n-    private final RequestExecutor requestHandler;\n+    private final RequestExecutor requestExecutor;\n     private final OkHttpClient httpClient;\n \n     private ArtifactsService artifactsService;\n", "next_change": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex 5e8e4bf0..31953be9 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -81,7 +81,7 @@ import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQU\n  */\n public class RegistryRestClientImpl implements RegistryRestClient {\n \n-    private final RequestExecutor requestExecutor;\n+    private final RequestExecutor requestHandler;\n     private final OkHttpClient httpClient;\n \n     private ArtifactsService artifactsService;\n", "next_change": {"commit": "87a03a524f6d2ef4f7879343c89d549bcbd23a94", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex 31953be9..9793580a 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -81,7 +81,7 @@ import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQU\n  */\n public class RegistryRestClientImpl implements RegistryRestClient {\n \n-    private final RequestExecutor requestHandler;\n+    private final RequestExecutor requestExecutor;\n     private final OkHttpClient httpClient;\n \n     private ArtifactsService artifactsService;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex 07d57cf1..9793580a 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -81,7 +81,7 @@ import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQU\n  */\n public class RegistryRestClientImpl implements RegistryRestClient {\n \n-    private final RequestExecutor requestHandler;\n+    private final RequestExecutor requestExecutor;\n     private final OkHttpClient httpClient;\n \n     private ArtifactsService artifactsService;\n", "next_change": {"commit": "68c02d80703e85ead873f9cd99a84e15e10d2830", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex 9793580a..e98eb031 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -88,6 +88,7 @@ public class RegistryRestClientImpl implements RegistryRestClient {\n     private RulesService rulesService;\n     private SearchService searchService;\n     private IdsService idsService;\n+    private static final ThreadLocal<Map<String, String>> requestHeaders = ThreadLocal.withInitial(Collections::emptyMap);\n \n     RegistryRestClientImpl(String baseUrl) {\n         this(baseUrl, Collections.emptyMap());\n", "next_change": {"commit": "ad87e1e1eb00f5c4229752d583ff84b477f44f97", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\nindex e98eb031..3784f9f1 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n", "chunk": "@@ -95,7 +104,11 @@ public class RegistryRestClientImpl implements RegistryRestClient {\n     }\n \n     RegistryRestClientImpl(String baseUrl, Map<String, Object> config) {\n-        this(baseUrl, createHttpClientWithConfig(baseUrl, config));\n+        this(baseUrl, createHttpClientWithConfig(baseUrl, config, null));\n+    }\n+\n+    RegistryRestClientImpl(String baseUrl, Map<String, Object> config, Auth auth) {\n+        this(baseUrl, createHttpClientWithConfig(baseUrl, config, auth));\n     }\n \n     RegistryRestClientImpl(String baseUrl, OkHttpClient okHttpClient) {\n", "next_change": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java b/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\ndeleted file mode 100644\nindex 3784f9f1..00000000\n--- a/rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,467 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat\n- * Copyright 2020 IBM\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.apicurio.registry.client;\n-\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_HEADERS_PREFIX;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_KEYSTORE_LOCATION;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_KEYSTORE_PASSWORD;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_KEYSTORE_TYPE;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_KEY_PASSWORD;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_TRUSTSTORE_LOCATION;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_TRUSTSTORE_PASSWORD;\n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_TRUSTSTORE_TYPE;\n-\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.UncheckedIOException;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import java.security.KeyManagementException;\n-import java.security.KeyStore;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.SecureRandom;\n-import java.security.UnrecoverableKeyException;\n-import java.security.cert.CertificateException;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.net.ssl.KeyManager;\n-import javax.net.ssl.KeyManagerFactory;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.TrustManagerFactory;\n-import javax.net.ssl.X509TrustManager;\n-\n-import io.apicurio.registry.auth.Auth;\n-import io.apicurio.registry.auth.BasicAuth;\n-import io.apicurio.registry.client.exception.InvalidArtifactIdException;\n-import io.apicurio.registry.client.request.AuthInterceptor;\n-import io.apicurio.registry.client.request.HeadersInterceptor;\n-import io.apicurio.registry.client.request.RequestExecutor;\n-import io.apicurio.registry.client.service.ArtifactsService;\n-import io.apicurio.registry.client.service.IdsService;\n-import io.apicurio.registry.client.service.RulesService;\n-import io.apicurio.registry.client.service.SearchService;\n-import io.apicurio.registry.rest.beans.ArtifactMetaData;\n-import io.apicurio.registry.rest.beans.ArtifactSearchResults;\n-import io.apicurio.registry.rest.beans.EditableMetaData;\n-import io.apicurio.registry.rest.beans.IfExistsType;\n-import io.apicurio.registry.rest.beans.Rule;\n-import io.apicurio.registry.rest.beans.SearchOver;\n-import io.apicurio.registry.rest.beans.SortOrder;\n-import io.apicurio.registry.rest.beans.UpdateState;\n-import io.apicurio.registry.rest.beans.VersionMetaData;\n-import io.apicurio.registry.rest.beans.VersionSearchResults;\n-import io.apicurio.registry.types.ArtifactType;\n-import io.apicurio.registry.types.RuleType;\n-import io.apicurio.registry.utils.ArtifactIdValidator;\n-import io.apicurio.registry.utils.IoUtil;\n-import okhttp3.HttpUrl;\n-import okhttp3.Interceptor;\n-import okhttp3.MediaType;\n-import okhttp3.OkHttpClient;\n-import okhttp3.RequestBody;\n-import retrofit2.Retrofit;\n-import retrofit2.converter.jackson.JacksonConverterFactory;\n-\n-/**\n- * @author Carles Arnal <carnalca@redhat.com>\n- */\n-public class RegistryRestClientImpl implements RegistryRestClient {\n-\n-    private final RequestExecutor requestExecutor;\n-    private final OkHttpClient httpClient;\n-\n-    private ArtifactsService artifactsService;\n-    private RulesService rulesService;\n-    private SearchService searchService;\n-    private IdsService idsService;\n-    private static final ThreadLocal<Map<String, String>> requestHeaders = ThreadLocal.withInitial(Collections::emptyMap);\n-\n-    RegistryRestClientImpl(String baseUrl) {\n-        this(baseUrl, Collections.emptyMap());\n-    }\n-\n-    RegistryRestClientImpl(String baseUrl, Map<String, Object> config) {\n-        this(baseUrl, createHttpClientWithConfig(baseUrl, config, null));\n-    }\n-\n-    RegistryRestClientImpl(String baseUrl, Map<String, Object> config, Auth auth) {\n-        this(baseUrl, createHttpClientWithConfig(baseUrl, config, auth));\n-    }\n-\n-    RegistryRestClientImpl(String baseUrl, OkHttpClient okHttpClient) {\n-        if (!baseUrl.endsWith(\"/\")) {\n-            baseUrl += \"/\";\n-        }\n-\n-        this.httpClient = okHttpClient;\n-\n-        Retrofit retrofit = new Retrofit.Builder()\n-                .client(okHttpClient)\n-                .addConverterFactory(JacksonConverterFactory.create())\n-                .baseUrl(baseUrl)\n-                .build();\n-\n-        this.requestExecutor = new RequestExecutor(requestHeaders);\n-\n-        initServices(retrofit);\n-    }\n-\n-    private static OkHttpClient createHttpClientWithConfig(String baseUrl, Map<String, Object> configs, Auth auth) {\n-        OkHttpClient.Builder okHttpClientBuilder = new OkHttpClient.Builder();\n-        okHttpClientBuilder = addHeaders(okHttpClientBuilder, baseUrl, configs, auth);\n-        okHttpClientBuilder = addSSL(okHttpClientBuilder, configs);\n-        return okHttpClientBuilder.build();\n-    }\n-\n-    private static OkHttpClient.Builder addHeaders(OkHttpClient.Builder okHttpClientBuilder, String baseUrl, Map<String, Object> configs, Auth auth) {\n-        Map<String, String> requestHeaders = configs.entrySet().stream()\n-                .filter(map -> map.getKey().startsWith(REGISTRY_REQUEST_HEADERS_PREFIX))\n-                .collect(Collectors.toMap(map -> map.getKey()\n-                        .replace(REGISTRY_REQUEST_HEADERS_PREFIX, \"\"), map -> map.getValue().toString()));\n-\n-        if (!requestHeaders.containsKey(\"Authorization\")) {\n-            // Check if url includes user/password\n-            // and add auth header if it does\n-            HttpUrl url = HttpUrl.parse(baseUrl);\n-            String user = url.encodedUsername();\n-            String pwd = url.encodedPassword();\n-            if (auth == null && user != null && !user.isEmpty()) {\n-                auth = new BasicAuth(user, pwd);\n-            }\n-\n-            if (auth != null) {\n-                okHttpClientBuilder.addInterceptor(new AuthInterceptor(auth));\n-            }\n-        }\n-\n-        if (!requestHeaders.isEmpty()) {\n-            final Interceptor headersInterceptor = new HeadersInterceptor(requestHeaders);\n-            return okHttpClientBuilder.addInterceptor(headersInterceptor);\n-        } else {\n-            return okHttpClientBuilder;\n-        }\n-    }\n-\n-    private static OkHttpClient.Builder addSSL(OkHttpClient.Builder okHttpClientBuilder, Map<String, Object> configs) {\n-\n-        try {\n-            KeyManager[] keyManagers = getKeyManagers(configs);\n-            TrustManager[] trustManagers = getTrustManagers(configs);\n-\n-            if (trustManagers != null && (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager))) {\n-                throw new IllegalStateException(\"A single X509TrustManager is expected. Unexpected trust managers: \" + Arrays.toString(trustManagers));\n-            }\n-\n-            if (keyManagers != null || trustManagers != null) {\n-                SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n-                sslContext.init(keyManagers, trustManagers, new SecureRandom());\n-                return okHttpClientBuilder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0]);\n-            } else {\n-                return okHttpClientBuilder;\n-            }\n-        } catch (IOException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | CertificateException | KeyManagementException ex) {\n-            throw new IllegalStateException(ex);\n-        }\n-    }\n-\n-    private static TrustManager[] getTrustManagers(Map<String, Object> configs) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {\n-        TrustManager[] trustManagers = null;\n-\n-        if (configs.containsKey(REGISTRY_REQUEST_TRUSTSTORE_LOCATION)) {\n-            String truststoreType = (String) configs.getOrDefault(REGISTRY_REQUEST_TRUSTSTORE_TYPE, \"JKS\");\n-            KeyStore truststore = KeyStore.getInstance(truststoreType);\n-            String truststorePwd = (String) configs.getOrDefault(REGISTRY_REQUEST_TRUSTSTORE_PASSWORD, \"\");\n-            truststore.load(new FileInputStream((String) configs.get(REGISTRY_REQUEST_TRUSTSTORE_LOCATION)), truststorePwd.toCharArray());\n-            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n-            trustManagerFactory.init(truststore);\n-            trustManagers = trustManagerFactory.getTrustManagers();\n-        }\n-        return trustManagers;\n-    }\n-\n-    private static KeyManager[] getKeyManagers(Map<String, Object> configs) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException {\n-        KeyManager[] keyManagers = null;\n-\n-        if (configs.containsKey(REGISTRY_REQUEST_KEYSTORE_LOCATION)) {\n-            String keystoreType = (String) configs.getOrDefault(REGISTRY_REQUEST_KEYSTORE_TYPE, \"JKS\");\n-            KeyStore keystore = KeyStore.getInstance(keystoreType);\n-            String keyStorePwd = (String) configs.getOrDefault(REGISTRY_REQUEST_KEYSTORE_PASSWORD, \"\");\n-            keystore.load(new FileInputStream((String) configs.get(REGISTRY_REQUEST_KEYSTORE_LOCATION)), keyStorePwd.toCharArray());\n-\n-            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-            // If no key password provided, try using the keystore password\n-            String keyPwd = (String) configs.getOrDefault(REGISTRY_REQUEST_KEY_PASSWORD, keyStorePwd);\n-            keyManagerFactory.init(keystore, keyPwd.toCharArray());\n-            keyManagers = keyManagerFactory.getKeyManagers();\n-        }\n-        return keyManagers;\n-    }\n-\n-    private void initServices(Retrofit retrofit) {\n-        artifactsService = retrofit.create(ArtifactsService.class);\n-        rulesService = retrofit.create(RulesService.class);\n-        idsService = retrofit.create(IdsService.class);\n-        searchService = retrofit.create(SearchService.class);\n-    }\n-\n-    @Override\n-    public List<String> listArtifacts() {\n-\n-        return requestExecutor.execute(artifactsService.listArtifacts(requestHeaders.get()));\n-    }\n-\n-    @Override\n-    public ArtifactMetaData createArtifact(InputStream data) {\n-        return this.createArtifact(null, null, data);\n-    }\n-\n-    @Override\n-    public ArtifactMetaData createArtifact(String artifactId, ArtifactType artifactType, InputStream data) {\n-        return this.createArtifact(artifactId, artifactType, data, null, null);\n-    }\n-\n-    @Override\n-    public ArtifactMetaData createArtifact(String artifactId, ArtifactType artifactType, InputStream data,\n-                                           IfExistsType ifExists, Boolean canonical) {\n-        if (artifactId != null && !ArtifactIdValidator.isArtifactIdAllowed(artifactId)) {\n-            throw new InvalidArtifactIdException();\n-        }\n-        return requestExecutor.execute(artifactsService.createArtifact(requestHeaders.get(), artifactType, artifactId, ifExists, canonical,\n-                RequestBody.create(MediaType.parse(\"*/*\"), IoUtil.toBytes(data))));\n-    }\n-\n-    @Override\n-    public InputStream getLatestArtifact(String artifactId) {\n-\n-        return requestExecutor.execute(artifactsService.getLatestArtifact(requestHeaders.get(), encodeURIComponent(artifactId))).byteStream();\n-    }\n-\n-    @Override\n-    public ArtifactMetaData updateArtifact(String artifactId, ArtifactType artifactType, InputStream data) {\n-\n-        return requestExecutor.execute(artifactsService.updateArtifact(requestHeaders.get(), encodeURIComponent(artifactId), artifactType, RequestBody.create(MediaType.parse(\"*/*\"), IoUtil.toBytes(data))));\n-    }\n-\n-    @Override\n-    public void deleteArtifact(String artifactId) {\n-\n-        requestExecutor.execute(artifactsService.deleteArtifact(requestHeaders.get(), encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public void updateArtifactState(String artifactId, UpdateState data) {\n-\n-        requestExecutor.execute(artifactsService.updateArtifactState(requestHeaders.get(), encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public ArtifactMetaData getArtifactMetaData(String artifactId) {\n-\n-        return requestExecutor.execute(artifactsService.getArtifactMetaData(requestHeaders.get(), encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public void updateArtifactMetaData(String artifactId, EditableMetaData data) {\n-\n-        requestExecutor.execute(artifactsService.updateArtifactMetaData(requestHeaders.get(), encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public ArtifactMetaData getArtifactMetaDataByContent(String artifactId, Boolean canonical, InputStream data) {\n-        return requestExecutor.execute(artifactsService.getArtifactMetaDataByContent(requestHeaders.get(), encodeURIComponent(artifactId), canonical, RequestBody.create(MediaType.parse(\"*/*\"), IoUtil.toBytes(data))));\n-    }\n-\n-    @Override\n-    public List<Long> listArtifactVersions(String artifactId) {\n-\n-        return requestExecutor.execute(artifactsService.listArtifactVersions(requestHeaders.get(), encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public VersionMetaData createArtifactVersion(String artifactId, ArtifactType artifactType, InputStream data) {\n-\n-        return requestExecutor.execute(artifactsService.createArtifactVersion(requestHeaders.get(), encodeURIComponent(artifactId), artifactType, RequestBody.create(MediaType.parse(\"*/*\"), IoUtil.toBytes(data))));\n-    }\n-\n-    @Override\n-    public InputStream getArtifactVersion(String artifactId, Integer version) {\n-\n-        return requestExecutor.execute(artifactsService.getArtifactVersion(requestHeaders.get(), version, encodeURIComponent(artifactId))).byteStream();\n-    }\n-\n-    @Override\n-    public void updateArtifactVersionState(String artifactId, Integer version, UpdateState data) {\n-\n-        requestExecutor.execute(artifactsService.updateArtifactVersionState(requestHeaders.get(), version, encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public VersionMetaData getArtifactVersionMetaData(String artifactId, Integer version) {\n-\n-        return requestExecutor.execute(artifactsService.getArtifactVersionMetaData(requestHeaders.get(), version, encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public void updateArtifactVersionMetaData(String artifactId, Integer version, EditableMetaData data) {\n-\n-        requestExecutor.execute(artifactsService.updateArtifactVersionMetaData(requestHeaders.get(), version, encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public void deleteArtifactVersionMetaData(String artifactId, Integer version) {\n-\n-        requestExecutor.execute(artifactsService.deleteArtifactVersionMetaData(requestHeaders.get(), version, encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public List<RuleType> listArtifactRules(String artifactId) {\n-\n-        return requestExecutor.execute(artifactsService.listArtifactRules(requestHeaders.get(), encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public void createArtifactRule(String artifactId, Rule data) {\n-\n-        requestExecutor.execute(artifactsService.createArtifactRule(requestHeaders.get(), encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public void deleteArtifactRules(String artifactId) {\n-\n-        requestExecutor.execute(artifactsService.deleteArtifactRules(requestHeaders.get(), encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public Rule getArtifactRuleConfig(String artifactId, RuleType rule) {\n-\n-        return requestExecutor.execute(artifactsService.getArtifactRuleConfig(requestHeaders.get(), rule, encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public Rule updateArtifactRuleConfig(String artifactId, RuleType rule, Rule data) {\n-\n-        return requestExecutor.execute(artifactsService.updateArtifactRuleConfig(requestHeaders.get(), rule, encodeURIComponent(artifactId), data));\n-    }\n-\n-    @Override\n-    public void deleteArtifactRule(String artifactId, RuleType rule) {\n-\n-        requestExecutor.execute(artifactsService.deleteArtifactRule(requestHeaders.get(), rule, encodeURIComponent(artifactId)));\n-    }\n-\n-    @Override\n-    public void testUpdateArtifact(String artifactId, ArtifactType artifactType, InputStream data) {\n-\n-        requestExecutor.execute(artifactsService.testUpdateArtifact(requestHeaders.get(), encodeURIComponent(artifactId), artifactType, RequestBody.create(MediaType.parse(\"*/*\"), IoUtil.toBytes(data))));\n-    }\n-\n-    @Override\n-    public InputStream getArtifactByGlobalId(long globalId) {\n-\n-        return requestExecutor.execute(idsService.getArtifactByGlobalId(requestHeaders.get(), globalId)).byteStream();\n-    }\n-\n-    @Override\n-    public ArtifactMetaData getArtifactMetaDataByGlobalId(long globalId) {\n-\n-        return requestExecutor.execute(idsService.getArtifactMetaDataByGlobalId(requestHeaders.get(), globalId));\n-    }\n-\n-    @Override\n-    public ArtifactSearchResults searchArtifacts(String search, SearchOver over, SortOrder order, Integer offset, Integer limit) {\n-\n-        return requestExecutor.execute(searchService.searchArtifacts(requestHeaders.get(), search, offset, limit, over, order));\n-    }\n-\n-    @Override\n-    public VersionSearchResults searchVersions(String artifactId, Integer offset, Integer limit) {\n-\n-        return requestExecutor.execute(searchService.searchVersions(requestHeaders.get(), encodeURIComponent(artifactId), offset, limit));\n-    }\n-\n-    @Override\n-    public Rule getGlobalRuleConfig(RuleType rule) {\n-\n-        return requestExecutor.execute(rulesService.getGlobalRuleConfig(requestHeaders.get(), rule));\n-    }\n-\n-    @Override\n-    public Rule updateGlobalRuleConfig(RuleType rule, Rule data) {\n-\n-        return requestExecutor.execute(rulesService.updateGlobalRuleConfig(requestHeaders.get(), rule, data));\n-    }\n-\n-    @Override\n-    public void deleteGlobalRule(RuleType rule) {\n-\n-        requestExecutor.execute(rulesService.deleteGlobalRule(requestHeaders.get(), rule));\n-    }\n-\n-    @Override\n-    public List<RuleType> listGlobalRules() {\n-\n-        return requestExecutor.execute(rulesService.listGlobalRules(requestHeaders.get()));\n-    }\n-\n-    @Override\n-    public void createGlobalRule(Rule data) {\n-\n-        requestExecutor.execute(rulesService.createGlobalRule(requestHeaders.get(), data));\n-    }\n-\n-    @Override\n-    public void deleteAllGlobalRules() {\n-\n-        requestExecutor.execute(rulesService.deleteAllGlobalRules(requestHeaders.get()));\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        httpClient.dispatcher().executorService().shutdown();\n-        httpClient.connectionPool().evictAll();\n-        if (httpClient.cache() != null) {\n-            httpClient.cache().close();\n-        }\n-    }\n-\n-    @Override\n-    public void setNextRequestHeaders(Map<String, String> headers) {\n-        requestHeaders.set(headers);\n-    }\n-\n-    @Override\n-    public Map<String, String> getHeaders() {\n-        return requestHeaders.get();\n-    }\n-\n-    private String encodeURIComponent(String value) {\n-        try {\n-            return URLEncoder.encode(value, StandardCharsets.UTF_8.name());\n-        } catch ( UnsupportedEncodingException e ) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "68c02d80703e85ead873f9cd99a84e15e10d2830", "committedDate": "2020-11-23 08:59:11 -0500", "message": "Allow client headers modification on a per request basis (#998)"}, {"oid": "441de73bf7507ec818e920a1a52cd94d0ce959d8", "committedDate": "2020-12-17 11:57:55 -0500", "message": "special characters handling - % and non ASCII characters are now forbidden (#1086)"}, {"oid": "ad87e1e1eb00f5c4229752d583ff84b477f44f97", "committedDate": "2021-01-08 14:59:46 -0500", "message": "Initial auth capabilities (#1032)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NTc2OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517345769", "body": "Should this be abstract? ", "bodyText": "Should this be abstract?", "bodyHTML": "<p dir=\"auto\">Should this be abstract?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:35:09Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+public class AlreadyExistsException extends RestClientException {", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nindex 2d2a9cf1..8a1f54e6 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class AlreadyExistsException extends RestClientException {\n+public abstract class AlreadyExistsException extends ConflictException {\n \n     public AlreadyExistsException(Error error) {\n         super(error);\n", "next_change": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\ndeleted file mode 100644\nindex 8a1f54e6..00000000\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ /dev/null\n", "chunk": "@@ -1,26 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.apicurio.registry.client.exception;\n-\n-import io.apicurio.registry.rest.beans.Error;\n-\n-public abstract class AlreadyExistsException extends ConflictException {\n-\n-    public AlreadyExistsException(Error error) {\n-        super(error);\n-    }\n-}\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nnew file mode 100644\nindex 00000000..2d2a9cf1\n--- /dev/null\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+public class AlreadyExistsException extends RestClientException {\n+\n+    public AlreadyExistsException(Error error) {\n+        super(error);\n+    }\n+}\n", "next_change": {"commit": "ecb08ee079a95b9c01e030fbf8c9659728459c3e", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nindex 2d2a9cf1..8a1f54e6 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class AlreadyExistsException extends RestClientException {\n+public abstract class AlreadyExistsException extends ConflictException {\n \n     public AlreadyExistsException(Error error) {\n         super(error);\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nindex 2d2a9cf1..8a1f54e6 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class AlreadyExistsException extends RestClientException {\n+public abstract class AlreadyExistsException extends ConflictException {\n \n     public AlreadyExistsException(Error error) {\n         super(error);\n", "next_change": {"commit": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nindex 8a1f54e6..e7ad6092 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -20,6 +20,8 @@ import io.apicurio.registry.rest.beans.Error;\n \n public abstract class AlreadyExistsException extends ConflictException {\n \n+    private static final long serialVersionUID = 1L;\n+\n     public AlreadyExistsException(Error error) {\n         super(error);\n     }\n", "next_change": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java b/client/src/main/java/io/apicurio/registry/rest/client/exception/AlreadyExistsException.java\nsimilarity index 83%\nrename from rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\nrename to client/src/main/java/io/apicurio/registry/rest/client/exception/AlreadyExistsException.java\nindex e7ad6092..844f5232 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/AlreadyExistsException.java\n+++ b/client/src/main/java/io/apicurio/registry/rest/client/exception/AlreadyExistsException.java\n", "chunk": "@@ -14,10 +14,14 @@\n  * limitations under the License.\n  */\n \n-package io.apicurio.registry.client.exception;\n+package io.apicurio.registry.rest.client.exception;\n \n-import io.apicurio.registry.rest.beans.Error;\n \n+import io.apicurio.registry.rest.v2.beans.Error;\n+\n+/**\n+ * @author Carles Arnal 'carnalca@redhat.com'\n+ */\n public abstract class AlreadyExistsException extends ConflictException {\n \n     private static final long serialVersionUID = 1L;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "committedDate": "2020-12-07 08:49:09 -0500", "message": "Revision 2 of the ksql storage impl (#1054)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0Njg2Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517346867", "body": "Should be abstract?", "bodyText": "Should be abstract?", "bodyHTML": "<p dir=\"auto\">Should be abstract?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:36:48Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+public class NotFoundException extends RestClientException {", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nindex 26096fae..8226080f 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class NotFoundException extends RestClientException {\n+public abstract class NotFoundException extends RestClientException {\n \n     public NotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\ndeleted file mode 100644\nindex 8226080f..00000000\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ /dev/null\n", "chunk": "@@ -1,26 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.apicurio.registry.client.exception;\n-\n-import io.apicurio.registry.rest.beans.Error;\n-\n-public abstract class NotFoundException extends RestClientException {\n-\n-    public NotFoundException(Error error) {\n-        super(error);\n-    }\n-}\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nnew file mode 100644\nindex 00000000..26096fae\n--- /dev/null\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n", "chunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+public class NotFoundException extends RestClientException {\n+\n+    public NotFoundException(Error error) {\n+        super(error);\n+    }\n+}\n", "next_change": {"commit": "ecb08ee079a95b9c01e030fbf8c9659728459c3e", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nindex 26096fae..8226080f 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class NotFoundException extends RestClientException {\n+public abstract class NotFoundException extends RestClientException {\n \n     public NotFoundException(Error error) {\n         super(error);\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nindex 26096fae..8226080f 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n", "chunk": "@@ -18,7 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-public class NotFoundException extends RestClientException {\n+public abstract class NotFoundException extends RestClientException {\n \n     public NotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nindex 8226080f..d3281f76 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n", "chunk": "@@ -20,6 +20,8 @@ import io.apicurio.registry.rest.beans.Error;\n \n public abstract class NotFoundException extends RestClientException {\n \n+    private static final long serialVersionUID = 1L;\n+\n     public NotFoundException(Error error) {\n         super(error);\n     }\n", "next_change": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java b/client/src/main/java/io/apicurio/registry/rest/client/exception/NotFoundException.java\nsimilarity index 83%\nrename from rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\nrename to client/src/main/java/io/apicurio/registry/rest/client/exception/NotFoundException.java\nindex d3281f76..30281f08 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/NotFoundException.java\n+++ b/client/src/main/java/io/apicurio/registry/rest/client/exception/NotFoundException.java\n", "chunk": "@@ -14,10 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.apicurio.registry.client.exception;\n+package io.apicurio.registry.rest.client.exception;\n \n-import io.apicurio.registry.rest.beans.Error;\n+import io.apicurio.registry.rest.v2.beans.Error;\n \n+/**\n+ * @author Carles Arnal 'carnalca@redhat.com'\n+ */\n public abstract class NotFoundException extends RestClientException {\n \n     private static final long serialVersionUID = 1L;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "committedDate": "2020-12-07 08:49:09 -0500", "message": "Revision 2 of the ksql storage impl (#1054)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NzU5MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517347591", "body": "Is there any way to parse the error detail into a stack trace that we could then use as a root cause?  Probably not, but worth investigating??", "bodyText": "Is there any way to parse the error detail into a stack trace that we could then use as a root cause?  Probably not, but worth investigating??", "bodyHTML": "<p dir=\"auto\">Is there any way to parse the error detail into a stack trace that we could then use as a root cause?  Probably not, but worth investigating??</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:37:50Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n+public class RestClientException extends RuntimeException {\n+\n+    private final Error error;\n+\n+    public RestClientException(Error error) {\n+        super(error.getMessage());", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwOTgyMQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517409821", "bodyText": "Let me take a look.", "author": "carlesarnal", "createdAt": "2020-11-04T15:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NzU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NTg1NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517945855", "bodyText": "I haven't found a way to convert the String to a stack trace.", "author": "carlesarnal", "createdAt": "2020-11-05T10:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NzU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\nindex 629cd7b8..95a5f4f7 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n", "chunk": "@@ -18,9 +18,6 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-/**\n- * @author Carles Arnal <carles.arnal@redhat.com>\n- */\n public class RestClientException extends RuntimeException {\n \n     private final Error error;\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\nindex 95a5f4f7..629cd7b8 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n", "chunk": "@@ -18,6 +18,9 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n public class RestClientException extends RuntimeException {\n \n     private final Error error;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\nindex 629cd7b8..8f9c77b8 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RestClientException.java\n", "chunk": "@@ -23,6 +23,8 @@ import io.apicurio.registry.rest.beans.Error;\n  */\n public class RestClientException extends RuntimeException {\n \n+    private static final long serialVersionUID = 1L;\n+\n     private final Error error;\n \n     public RestClientException(Error error) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "committedDate": "2020-12-07 08:49:09 -0500", "message": "Revision 2 of the ksql storage impl (#1054)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NzgxOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517347818", "body": "Should extend `NotFoundException` ?", "bodyText": "Should extend NotFoundException ?", "bodyHTML": "<p dir=\"auto\">Should extend <code>NotFoundException</code> ?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:38:15Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n+public class RuleNotFoundException extends RestClientException {", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex 5cb27b3b..d06cb17e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class RuleNotFoundException extends RestClientException {\n+public class RuleNotFoundException extends NotFoundException {\n \n     public RuleNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex d06cb17e..07acfa52 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -18,10 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-/**\n- * @author Carles Arnal <carles.arnal@redhat.com>\n- */\n-public class RuleNotFoundException extends NotFoundException {\n+public class RuleNotFoundException extends RestClientException {\n \n     public RuleNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex 07acfa52..5cb27b3b 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -18,6 +18,9 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n public class RuleNotFoundException extends RestClientException {\n \n     public RuleNotFoundException(Error error) {\n", "next_change": {"commit": "ecb08ee079a95b9c01e030fbf8c9659728459c3e", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex 5cb27b3b..d06cb17e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class RuleNotFoundException extends RestClientException {\n+public class RuleNotFoundException extends NotFoundException {\n \n     public RuleNotFoundException(Error error) {\n         super(error);\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex 5cb27b3b..d06cb17e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class RuleNotFoundException extends RestClientException {\n+public class RuleNotFoundException extends NotFoundException {\n \n     public RuleNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\nindex d06cb17e..d50e7672 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/RuleNotFoundException.java\n", "chunk": "@@ -23,6 +23,8 @@ import io.apicurio.registry.rest.beans.Error;\n  */\n public class RuleNotFoundException extends NotFoundException {\n \n+    private static final long serialVersionUID = 1L;\n+\n     public RuleNotFoundException(Error error) {\n         super(error);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "committedDate": "2020-12-07 08:49:09 -0500", "message": "Revision 2 of the ksql storage impl (#1054)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0ODEwNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517348106", "body": "Should extend `NotFoundException`?", "bodyText": "Should extend NotFoundException?", "bodyHTML": "<p dir=\"auto\">Should extend <code>NotFoundException</code>?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:38:44Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.client.exception;\n+\n+import io.apicurio.registry.rest.beans.Error;\n+\n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n+public class VersionNotFoundException extends RestClientException {", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex c6302682..89c4bd5e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class VersionNotFoundException extends RestClientException {\n+public class VersionNotFoundException extends NotFoundException {\n \n     public VersionNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex 89c4bd5e..1d7c12e9 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -18,10 +18,7 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n-/**\n- * @author Carles Arnal <carles.arnal@redhat.com>\n- */\n-public class VersionNotFoundException extends NotFoundException {\n+public class VersionNotFoundException extends RestClientException {\n \n     public VersionNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex 1d7c12e9..c6302682 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -18,6 +18,9 @@ package io.apicurio.registry.client.exception;\n \n import io.apicurio.registry.rest.beans.Error;\n \n+/**\n+ * @author Carles Arnal <carles.arnal@redhat.com>\n+ */\n public class VersionNotFoundException extends RestClientException {\n \n     public VersionNotFoundException(Error error) {\n", "next_change": {"commit": "ecb08ee079a95b9c01e030fbf8c9659728459c3e", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex c6302682..89c4bd5e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class VersionNotFoundException extends RestClientException {\n+public class VersionNotFoundException extends NotFoundException {\n \n     public VersionNotFoundException(Error error) {\n         super(error);\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex c6302682..89c4bd5e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -21,7 +21,7 @@ import io.apicurio.registry.rest.beans.Error;\n /**\n  * @author Carles Arnal <carles.arnal@redhat.com>\n  */\n-public class VersionNotFoundException extends RestClientException {\n+public class VersionNotFoundException extends NotFoundException {\n \n     public VersionNotFoundException(Error error) {\n         super(error);\n", "next_change": {"commit": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\nindex 89c4bd5e..59c0768e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/exception/VersionNotFoundException.java\n", "chunk": "@@ -23,6 +23,8 @@ import io.apicurio.registry.rest.beans.Error;\n  */\n public class VersionNotFoundException extends NotFoundException {\n \n+    private static final long serialVersionUID = 1L;\n+\n     public VersionNotFoundException(Error error) {\n         super(error);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "b4feed1d772ef043ba4c2d5a8b0739f83364d4c0", "committedDate": "2020-12-07 08:49:09 -0500", "message": "Revision 2 of the ksql storage impl (#1054)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0ODUyOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517348528", "body": "Can probably just remove this extra `;`?", "bodyText": "Can probably just remove this extra ;?", "bodyHTML": "<p dir=\"auto\">Can probably just remove this extra <code>;</code>?</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:39:22Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java", "diffHunk": "@@ -40,15 +40,14 @@ public Response intercept(Chain chain) throws IOException {\n \n         final Request request = chain.request();\n \n-\n         final Headers requestHeaders = request.headers().newBuilder()\n-                .addAll(Headers.of(headers)).build();;\n-\n+                .addAll(Headers.of(headers)).build();\n+        ;", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\nindex efee794e..8cd1156a 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n", "chunk": "@@ -41,8 +42,7 @@ public class HeadersInterceptor implements Interceptor {\n         final Request request = chain.request();\n \n         final Headers requestHeaders = request.headers().newBuilder()\n-                .addAll(Headers.of(headers)).build();\n-        ;\n+                .addAll(Headers.of(headers)).build();;\n \n         final Request requestWithHeathers = request.newBuilder()\n                 .headers(requestHeaders)\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\nindex 8cd1156a..efee794e 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n", "chunk": "@@ -42,7 +41,8 @@ public class HeadersInterceptor implements Interceptor {\n         final Request request = chain.request();\n \n         final Headers requestHeaders = request.headers().newBuilder()\n-                .addAll(Headers.of(headers)).build();;\n+                .addAll(Headers.of(headers)).build();\n+        ;\n \n         final Request requestWithHeathers = request.newBuilder()\n                 .headers(requestHeaders)\n", "next_change": {"commit": "f2caeaa9439e237b7cb5ebb8c857611758a34636", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\nindex efee794e..287db950 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n", "chunk": "@@ -42,7 +42,6 @@ public class HeadersInterceptor implements Interceptor {\n \n         final Headers requestHeaders = request.headers().newBuilder()\n                 .addAll(Headers.of(headers)).build();\n-        ;\n \n         final Request requestWithHeathers = request.newBuilder()\n                 .headers(requestHeaders)\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\nindex efee794e..287db950 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n", "chunk": "@@ -42,7 +42,6 @@ public class HeadersInterceptor implements Interceptor {\n \n         final Headers requestHeaders = request.headers().newBuilder()\n                 .addAll(Headers.of(headers)).build();\n-        ;\n \n         final Request requestWithHeathers = request.newBuilder()\n                 .headers(requestHeaders)\n", "next_change": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\ndeleted file mode 100644\nindex 287db950..00000000\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/HeadersInterceptor.java\n+++ /dev/null\n", "chunk": "@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat\n- * Copyright 2020 IBM\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.apicurio.registry.client.request;\n-\n-import okhttp3.Headers;\n-import okhttp3.Interceptor;\n-import okhttp3.Request;\n-import okhttp3.Response;\n-\n-import java.io.IOException;\n-import java.util.Map;\n-\n-/**\n- * @author Carles Arnal <carnalca@redhat.com>\n- */\n-public class HeadersInterceptor implements Interceptor {\n-\n-    private final Map<String, String> headers;\n-\n-    public HeadersInterceptor(Map<String, String> headers) {\n-        this.headers = headers;\n-    }\n-\n-    @Override\n-    public Response intercept(Chain chain) throws IOException {\n-\n-        final Request request = chain.request();\n-\n-        final Headers requestHeaders = request.headers().newBuilder()\n-                .addAll(Headers.of(headers)).build();\n-\n-        final Request requestWithHeathers = request.newBuilder()\n-                .headers(requestHeaders)\n-                .build();\n-\n-        return chain.proceed(requestWithHeathers);\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0OTQ5MA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/985#discussion_r517349490", "body": "This is much nicer now!", "bodyText": "This is much nicer now!", "bodyHTML": "<p dir=\"auto\">This is much nicer now!</p>", "author": "EricWittmann", "createdAt": "2020-11-04T13:40:48Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java", "diffHunk": "@@ -44,18 +44,16 @@ protected void afterCreateArtifact(T schema, ArtifactMetaData amd) {\n     public long findId(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema) {\n         try {\n             return initialLookup(client, artifactId, artifactType, schema);\n-        } catch (WebApplicationException e) {\n-            if (isNotFound(e.getResponse())) {\n-                ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, IfExistsType.RETURN_OR_UPDATE, toStream(schema));\n-                afterCreateArtifact(schema, amd);\n-                return amd.getGlobalId();\n-            } else {\n-                throw new IllegalStateException(String.format(\n+        } catch (ArtifactNotFoundException e) {\n+            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, IfExistsType.RETURN_OR_UPDATE, toStream(schema));\n+            afterCreateArtifact(schema, amd);\n+            return amd.getGlobalId();", "originalCommit": "7bc890bbcc40a58029305ba2d5fca5b1c25a101f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1759e839b6e8e4f618823c044a34b058708617ea", "changed_code": [{"header": "diff --git a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\nindex 23c24315..296d97e7 100644\n--- a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n+++ b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n", "chunk": "@@ -44,16 +44,19 @@ public abstract class AbstractCrudIdStrategy<T> implements GlobalIdStrategy<T> {\n     public long findId(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema) {\n         try {\n             return initialLookup(client, artifactId, artifactType, schema);\n-        } catch (ArtifactNotFoundException e) {\n-            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, IfExistsType.RETURN_OR_UPDATE, toStream(schema));\n-            afterCreateArtifact(schema, amd);\n-            return amd.getGlobalId();\n-        } catch (RestClientException e) {\n-            throw new IllegalStateException(String.format(\n+        } catch (WebApplicationException e) {\n+            if (isNotFound(e.getResponse())) {\n+                // TODO add an option to search by strict content?\n+                ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n+                afterCreateArtifact(schema, amd);\n+                return amd.getGlobalId();\n+            } else {\n+                throw new IllegalStateException(String.format(\n                     \"Error [%s] retrieving schema: %s\",\n                     e.getMessage(),\n                     artifactId)\n-            );\n+                );\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "changed_code": [{"header": "diff --git a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\nindex 296d97e7..a7ee6b85 100644\n--- a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n+++ b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n", "chunk": "@@ -44,19 +44,17 @@ public abstract class AbstractCrudIdStrategy<T> implements GlobalIdStrategy<T> {\n     public long findId(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema) {\n         try {\n             return initialLookup(client, artifactId, artifactType, schema);\n-        } catch (WebApplicationException e) {\n-            if (isNotFound(e.getResponse())) {\n-                // TODO add an option to search by strict content?\n-                ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n-                afterCreateArtifact(schema, amd);\n-                return amd.getGlobalId();\n-            } else {\n-                throw new IllegalStateException(String.format(\n+        } catch (ArtifactNotFoundException e) {\n+            // TODO add an option to search by strict content?\n+            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n+            afterCreateArtifact(schema, amd);\n+            return amd.getGlobalId();\n+        } catch (RestClientException e) {\n+            throw new IllegalStateException(String.format(\n                     \"Error [%s] retrieving schema: %s\",\n                     e.getMessage(),\n                     artifactId)\n-                );\n-            }\n+            );\n         }\n     }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "changed_code": [{"header": "diff --git a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\nindex 23c24315..a7ee6b85 100644\n--- a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n+++ b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n", "chunk": "@@ -45,7 +45,8 @@ public abstract class AbstractCrudIdStrategy<T> implements GlobalIdStrategy<T> {\n         try {\n             return initialLookup(client, artifactId, artifactType, schema);\n         } catch (ArtifactNotFoundException e) {\n-            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, IfExistsType.RETURN_OR_UPDATE, toStream(schema));\n+            // TODO add an option to search by strict content?\n+            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n             afterCreateArtifact(schema, amd);\n             return amd.getGlobalId();\n         } catch (RestClientException e) {\n", "next_change": {"commit": "c32d6a7cb43a12ebb176534edcbc67e82c7513e4", "changed_code": [{"header": "diff --git a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\nindex a7ee6b85..ac5656a2 100644\n--- a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n+++ b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n", "chunk": "@@ -29,25 +30,29 @@ import java.net.HttpURLConnection;\n /**\n  * @author Ales Justin\n  */\n-public abstract class AbstractCrudIdStrategy<T> implements GlobalIdStrategy<T> {\n+public abstract class AbstractCrudIdStrategy<T> extends CheckPeriodIdStrategy<T> {\n \n     protected boolean isNotFound(Response response) {\n         return response.getStatus() == HttpURLConnection.HTTP_NOT_FOUND;\n     }\n \n-    protected abstract long initialLookup(RegistryRestClient service, String artifactId, ArtifactType artifactType, T schema);\n+    protected abstract long initialLookup(RegistryRestClient service, String artifactId, ArtifactType artifactType, T schema, SchemaCache<T> cache);\n \n-    protected void afterCreateArtifact(T schema, ArtifactMetaData amd) {\n+    protected void afterCreateArtifact(T schema, ArtifactMetaData amd, SchemaCache<T> cache) {\n+        populateCache(schema, amd.getGlobalId(), cache);\n     }\n-\n+    \n+    /**\n+     * @see io.apicurio.registry.utils.serde.strategy.CheckPeriodIdStrategy#findIdInternal(io.apicurio.registry.client.RegistryRestClient, java.lang.String, io.apicurio.registry.types.ArtifactType, java.lang.Object, SchemaCache)\n+     */\n     @Override\n-    public long findId(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema) {\n+    long findIdInternal(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema, SchemaCache<T> cache) {\n         try {\n-            return initialLookup(client, artifactId, artifactType, schema);\n+            return initialLookup(client, artifactId, artifactType, schema, cache);\n         } catch (ArtifactNotFoundException e) {\n             // TODO add an option to search by strict content?\n             ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n-            afterCreateArtifact(schema, amd);\n+            afterCreateArtifact(schema, amd, cache);\n             return amd.getGlobalId();\n         } catch (RestClientException e) {\n             throw new IllegalStateException(String.format(\n", "next_change": {"commit": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "changed_code": [{"header": "diff --git a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java b/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\ndeleted file mode 100644\nindex ac5656a2..00000000\n--- a/utils/serde/src/main/java/io/apicurio/registry/utils/serde/strategy/AbstractCrudIdStrategy.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.apicurio.registry.utils.serde.strategy;\n-\n-import io.apicurio.registry.client.RegistryRestClient;\n-import io.apicurio.registry.client.exception.ArtifactNotFoundException;\n-import io.apicurio.registry.client.exception.RestClientException;\n-import io.apicurio.registry.rest.beans.ArtifactMetaData;\n-import io.apicurio.registry.rest.beans.IfExistsType;\n-import io.apicurio.registry.types.ArtifactType;\n-import io.apicurio.registry.utils.serde.SchemaCache;\n-\n-import javax.ws.rs.core.Response;\n-import java.net.HttpURLConnection;\n-\n-/**\n- * @author Ales Justin\n- */\n-public abstract class AbstractCrudIdStrategy<T> extends CheckPeriodIdStrategy<T> {\n-\n-    protected boolean isNotFound(Response response) {\n-        return response.getStatus() == HttpURLConnection.HTTP_NOT_FOUND;\n-    }\n-\n-    protected abstract long initialLookup(RegistryRestClient service, String artifactId, ArtifactType artifactType, T schema, SchemaCache<T> cache);\n-\n-    protected void afterCreateArtifact(T schema, ArtifactMetaData amd, SchemaCache<T> cache) {\n-        populateCache(schema, amd.getGlobalId(), cache);\n-    }\n-    \n-    /**\n-     * @see io.apicurio.registry.utils.serde.strategy.CheckPeriodIdStrategy#findIdInternal(io.apicurio.registry.client.RegistryRestClient, java.lang.String, io.apicurio.registry.types.ArtifactType, java.lang.Object, SchemaCache)\n-     */\n-    @Override\n-    long findIdInternal(RegistryRestClient client, String artifactId, ArtifactType artifactType, T schema, SchemaCache<T> cache) {\n-        try {\n-            return initialLookup(client, artifactId, artifactType, schema, cache);\n-        } catch (ArtifactNotFoundException e) {\n-            // TODO add an option to search by strict content?\n-            ArtifactMetaData amd = client.createArtifact(artifactId, artifactType, toStream(schema), IfExistsType.RETURN_OR_UPDATE, true);\n-            afterCreateArtifact(schema, amd, cache);\n-            return amd.getGlobalId();\n-        } catch (RestClientException e) {\n-            throw new IllegalStateException(String.format(\n-                    \"Error [%s] retrieving schema: %s\",\n-                    e.getMessage(),\n-                    artifactId)\n-            );\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fc30fae68f8141d36ae1250bb830fa7dd8cffb29", "message": "Merge commit", "committedDate": null}, {"oid": "4bbcfac7b12c3aa8577e22c1175249dbc406b01a", "committedDate": "2021-01-15 15:27:06 -0500", "message": "Merged all remaining work from the 1.3.x to master (#1127)"}, {"oid": "c32d6a7cb43a12ebb176534edcbc67e82c7513e4", "committedDate": "2021-01-27 11:53:57 -0500", "message": "Handle serializer cache, simplify Streams storage (#1163)"}, {"oid": "5ceb8a89ae772172826b150b87ff9f1bf87263ec", "committedDate": "2021-03-01 14:17:47 -0500", "message": "Merging all of the work from feat/artifact-groups!! (#1265)"}]}, {"oid": "2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "url": "https://github.com/Apicurio/apicurio-registry/commit/2777a8035fb6b75d1ba3f5c14136c0adec3c7efc", "message": "Use proper exceptions in tests and ignore unknown fields", "committedDate": "2020-11-05T10:09:53Z", "type": "forcePushed"}, {"oid": "63ede13b84044aaf3d6eec3c5714f8ce6317ca41", "url": "https://github.com/Apicurio/apicurio-registry/commit/63ede13b84044aaf3d6eec3c5714f8ce6317ca41", "message": "Use proper exceptions in tests and ignore unknown fields", "committedDate": "2020-11-05T10:20:56Z", "type": "forcePushed"}, {"oid": "1759e839b6e8e4f618823c044a34b058708617ea", "url": "https://github.com/Apicurio/apicurio-registry/commit/1759e839b6e8e4f618823c044a34b058708617ea", "message": "Add rest client exception mapper", "committedDate": "2020-11-05T16:36:20Z", "type": "commit"}, {"oid": "930b9e980c1445c24103ed5b0a293d5c7e2c0590", "url": "https://github.com/Apicurio/apicurio-registry/commit/930b9e980c1445c24103ed5b0a293d5c7e2c0590", "message": "Add all exception kinds", "committedDate": "2020-11-05T16:37:37Z", "type": "commit"}, {"oid": "42abbd7a8e00bbd95ba63fc39258ae151e5fb4be", "url": "https://github.com/Apicurio/apicurio-registry/commit/42abbd7a8e00bbd95ba63fc39258ae151e5fb4be", "message": "Change tests to expect rest client exceptions", "committedDate": "2020-11-05T16:37:37Z", "type": "commit"}, {"oid": "179894ea45a370028b55991b18c17ad798e489af", "url": "https://github.com/Apicurio/apicurio-registry/commit/179894ea45a370028b55991b18c17ad798e489af", "message": "Adapt artifact state test", "committedDate": "2020-11-05T16:37:37Z", "type": "commit"}, {"oid": "87a03a524f6d2ef4f7879343c89d549bcbd23a94", "url": "https://github.com/Apicurio/apicurio-registry/commit/87a03a524f6d2ef4f7879343c89d549bcbd23a94", "message": "Change request executor variable name", "committedDate": "2020-11-05T16:39:27Z", "type": "commit"}, {"oid": "ecb08ee079a95b9c01e030fbf8c9659728459c3e", "url": "https://github.com/Apicurio/apicurio-registry/commit/ecb08ee079a95b9c01e030fbf8c9659728459c3e", "message": "Improve error classes hierarchy", "committedDate": "2020-11-05T16:39:27Z", "type": "commit"}, {"oid": "76ac463b1827d1ccbc24aca84407214e29e4c80b", "url": "https://github.com/Apicurio/apicurio-registry/commit/76ac463b1827d1ccbc24aca84407214e29e4c80b", "message": "Use proper exceptions in tests and ignore unknown fields", "committedDate": "2020-11-05T16:39:27Z", "type": "commit"}, {"oid": "f2caeaa9439e237b7cb5ebb8c857611758a34636", "url": "https://github.com/Apicurio/apicurio-registry/commit/f2caeaa9439e237b7cb5ebb8c857611758a34636", "message": "Remove unnecessary semicolon", "committedDate": "2020-11-05T16:39:27Z", "type": "commit"}, {"oid": "c6b9474ae1ddcc9572b1889d03705f4c71e1f205", "url": "https://github.com/Apicurio/apicurio-registry/commit/c6b9474ae1ddcc9572b1889d03705f4c71e1f205", "message": "Remove unnecessary imports", "committedDate": "2020-11-05T16:39:27Z", "type": "commit"}, {"oid": "c6b9474ae1ddcc9572b1889d03705f4c71e1f205", "url": "https://github.com/Apicurio/apicurio-registry/commit/c6b9474ae1ddcc9572b1889d03705f4c71e1f205", "message": "Remove unnecessary imports", "committedDate": "2020-11-05T16:39:27Z", "type": "forcePushed"}]}