{"pr_number": 7176, "pr_title": "[1.16] IForgeBlock#getToolModifiedState (Handling Axe, Hoe, and Shovel Right Click)", "pr_author": "ChampionAsh5357", "pr_createdAt": "2020-07-26T05:37:27Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571459", "body": "Return the original state if you can't find a modified one, not null.", "bodyText": "Return the original state if you can't find a modified one, not null.", "bodyHTML": "<p dir=\"auto\">Return the original state if you can't find a modified one, not null.</p>", "author": "Lanse505", "createdAt": "2020-07-26T20:44:50Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,37 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;", "originalCommit": "17947576efdc1ccd5c794c8eebe7aea41819960a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTcxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571719", "bodyText": "The reason I return null is that AxeItem, HoeItem, and ShovelItem all check if the block isn't in the list by comparing the result to null.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T20:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTk4NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571984", "bodyText": "Hmm, that's fair enough.", "author": "Lanse505", "createdAt": "2020-07-26T20:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,23 +904,10 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": {"commit": "15733a18e41e53961e486001b7720b36b77c20ad", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex dd23d2f22..809ff078a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -910,4 +911,18 @@ public interface IForgeBlock\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING);\n+    }\n }\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 809ff078a..b83851ed3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -923,6 +921,6 @@ public interface IForgeBlock\n      */\n     default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n     {\n-        return state.isIn(Blocks.SCAFFOLDING);\n+        return state.is(Blocks.SCAFFOLDING);\n     }\n }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex b83851ed3..845c9c235 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -919,7 +748,7 @@ public interface IForgeBlock\n      * @param entity The entity on the scaffolding\n      * @return True if the block should act like scaffolding\n      */\n-    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    default boolean isScaffolding(BlockState state, LevelReader world, BlockPos pos, LivingEntity entity)\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n", "next_change": {"commit": "cd67762beeb680034d2b57c4584c5eafb4e4bead", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 845c9c235..51e61be00 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -752,4 +719,54 @@ public interface IForgeBlock\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a given side\n+     * <p>\n+     * The default implementation is identical to\n+     * {@link RedStoneWireBlock#shouldConnectTo(BlockState, Direction)}\n+     *\n+     * <p>\n+     * {@link RedStoneWireBlock} updates its visual connection when\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}\n+     * is called, this callback is used during the evaluation of its new shape.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     * <p>\n+     * If the return value is evaluated based on world and pos (e.g. from BlockEntity), then the implementation of\n+     * this block should notify its neighbors to update their shapes when necessary. Consider using\n+     * {@link BlockState#updateNeighbourShapes(LevelAccessor, BlockPos, int, int)} or\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}.\n+     * <p>\n+     * Example:\n+     * <p>\n+     * 1. {@code yourBlockState.updateNeighbourShapes(world, yourBlockPos, UPDATE_ALL);}\n+     * <p>\n+     * 2. {@code neighborState.updateShape(fromDirection, stateOfYourBlock, world, neighborBlockPos, yourBlockPos)},\n+     * where {@code fromDirection} is defined from the neighbor block's point of view.\n+     */\n+    default boolean canConnectRedstone(BlockState state, BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    {\n+        if (state.is(Blocks.REDSTONE_WIRE))\n+        {\n+            return true;\n+        }\n+        else if (state.is(Blocks.REPEATER))\n+        {\n+            Direction facing = state.getValue(RepeaterBlock.FACING);\n+            return facing == direction || facing.getOpposite() == direction;\n+        }\n+        else if (state.is(Blocks.OBSERVER))\n+        {\n+            return direction == state.getValue(ObserverBlock.FACING);\n+        }\n+        else\n+        {\n+            return state.isSignalSource() && direction != null;\n+        }\n+    }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 51e61be00..0dd95ac4b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -769,4 +751,43 @@ public interface IForgeBlock\n             return state.isSignalSource() && direction != null;\n         }\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link Block#skipRendering(BlockState, BlockState, Direction)} on the respective block instead\n+     * <p>\n+     * WARNING: This method is likely to be called from a worker thread! If you want to retrieve a\n+     *          {@link net.minecraft.world.level.block.entity.BlockEntity} from the given level, make sure to use\n+     *          {@link net.minecraftforge.common.extensions.IForgeBlockGetter#getExistingBlockEntity(BlockPos)} to not\n+     *          accidentally create a new or delete an old {@link net.minecraft.world.level.block.entity.BlockEntity}\n+     *          off of the main thread as this would cause a write operation to the given {@link BlockGetter} and cause\n+     *          a CME in the process. Any other direct or indirect write operation to the {@link BlockGetter} will have\n+     *          the same outcome.\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param state The blocks {@link BlockState}\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState state, BlockState neighborState, Direction dir)\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding(BlockState state)\n+    {\n+        if (FMLEnvironment.dist.isClient())\n+        {\n+            return !ForgeHooksClient.isBlockInSolidLayer(state);\n+        }\n+        return true;\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0dd95ac4b..ee83e1ee7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -790,4 +844,26 @@ public interface IForgeBlock\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param state the state of the block being hydrated\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockState state, BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return fluid.canHydrate(getter, fluidPos, state, pos);\n+    }\n }\n", "next_change": {"commit": "7e06a2105f149c49722139187738d118fdb7c0cb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex ee83e1ee7..1a6a3d49f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -866,4 +881,17 @@ public interface IForgeBlock\n     {\n         return fluid.canHydrate(getter, fluidPos, state, pos);\n     }\n+\n+    /**\n+     * Returns the {@link MaterialColor} shown on the map.\n+     *\n+     * @param state The state of this block\n+     * @param level The level this block is in\n+     * @param pos The blocks position in the level\n+     * @param defaultColor The {@code MaterialColor} configured for the given {@code BlockState} in the {@link BlockBehaviour.Properties}\n+     */\n+    default MaterialColor getMapColor(BlockState state, BlockGetter level, BlockPos pos, MaterialColor defaultColor)\n+    {\n+        return defaultColor;\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 1a6a3d49f..450f69d17 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -894,4 +923,32 @@ public interface IForgeBlock\n     {\n         return defaultColor;\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this block reports to look like on the given side, for querying by other mods.\n+     * Note: Overriding this does not change how this block renders. That must still be handled in the block's model.\n+     * <p>\n+     * Common implementors would be covers and facades, or any other mimic blocks that proxy another block's model.\n+     * Common consumers would be models with connected textures that wish to seamlessly connect to mimic blocks.\n+     * <p>\n+     * <b>Note that this method may be called on the server, or on any of the client's meshing threads.</b><br/>\n+     * As such, if you need any data from your {@link BlockEntity}, you should put it in {@link ModelData} to guarantee\n+     * safe concurrent access to it on the client.<br/>\n+     * Calling {@link BlockGetter#getModelDataManager()} will return {@code null} if in a server context, where it is\n+     * safe to query your {@link BlockEntity} directly. Otherwise, {@link ModelDataManager#getAt(BlockPos)} will return\n+     * the {@link ModelData} for the queried block, or {@code null} if none is present.\n+     *\n+     * @param state      The state of this block\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block on the given side. By default, the current state\n+     * @see IForgeBlockState#getAppearance(BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockState state, BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTU3NQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571575", "body": "I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.\r\nOtherwise continue.", "bodyText": "I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.\nOtherwise continue.", "bodyHTML": "<p dir=\"auto\">I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.<br>\nOtherwise continue.</p>", "author": "Lanse505", "createdAt": "2020-07-26T20:45:35Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,37 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();", "originalCommit": "17947576efdc1ccd5c794c8eebe7aea41819960a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Njk1MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460576951", "bodyText": "I've added the event.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,23 +904,10 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": {"commit": "15733a18e41e53961e486001b7720b36b77c20ad", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex dd23d2f22..809ff078a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -910,4 +911,18 @@ public interface IForgeBlock\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING);\n+    }\n }\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 809ff078a..b83851ed3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -923,6 +921,6 @@ public interface IForgeBlock\n      */\n     default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n     {\n-        return state.isIn(Blocks.SCAFFOLDING);\n+        return state.is(Blocks.SCAFFOLDING);\n     }\n }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex b83851ed3..845c9c235 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -919,7 +748,7 @@ public interface IForgeBlock\n      * @param entity The entity on the scaffolding\n      * @return True if the block should act like scaffolding\n      */\n-    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    default boolean isScaffolding(BlockState state, LevelReader world, BlockPos pos, LivingEntity entity)\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n", "next_change": {"commit": "cd67762beeb680034d2b57c4584c5eafb4e4bead", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 845c9c235..51e61be00 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -752,4 +719,54 @@ public interface IForgeBlock\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a given side\n+     * <p>\n+     * The default implementation is identical to\n+     * {@link RedStoneWireBlock#shouldConnectTo(BlockState, Direction)}\n+     *\n+     * <p>\n+     * {@link RedStoneWireBlock} updates its visual connection when\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}\n+     * is called, this callback is used during the evaluation of its new shape.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     * <p>\n+     * If the return value is evaluated based on world and pos (e.g. from BlockEntity), then the implementation of\n+     * this block should notify its neighbors to update their shapes when necessary. Consider using\n+     * {@link BlockState#updateNeighbourShapes(LevelAccessor, BlockPos, int, int)} or\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}.\n+     * <p>\n+     * Example:\n+     * <p>\n+     * 1. {@code yourBlockState.updateNeighbourShapes(world, yourBlockPos, UPDATE_ALL);}\n+     * <p>\n+     * 2. {@code neighborState.updateShape(fromDirection, stateOfYourBlock, world, neighborBlockPos, yourBlockPos)},\n+     * where {@code fromDirection} is defined from the neighbor block's point of view.\n+     */\n+    default boolean canConnectRedstone(BlockState state, BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    {\n+        if (state.is(Blocks.REDSTONE_WIRE))\n+        {\n+            return true;\n+        }\n+        else if (state.is(Blocks.REPEATER))\n+        {\n+            Direction facing = state.getValue(RepeaterBlock.FACING);\n+            return facing == direction || facing.getOpposite() == direction;\n+        }\n+        else if (state.is(Blocks.OBSERVER))\n+        {\n+            return direction == state.getValue(ObserverBlock.FACING);\n+        }\n+        else\n+        {\n+            return state.isSignalSource() && direction != null;\n+        }\n+    }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 51e61be00..0dd95ac4b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -769,4 +751,43 @@ public interface IForgeBlock\n             return state.isSignalSource() && direction != null;\n         }\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link Block#skipRendering(BlockState, BlockState, Direction)} on the respective block instead\n+     * <p>\n+     * WARNING: This method is likely to be called from a worker thread! If you want to retrieve a\n+     *          {@link net.minecraft.world.level.block.entity.BlockEntity} from the given level, make sure to use\n+     *          {@link net.minecraftforge.common.extensions.IForgeBlockGetter#getExistingBlockEntity(BlockPos)} to not\n+     *          accidentally create a new or delete an old {@link net.minecraft.world.level.block.entity.BlockEntity}\n+     *          off of the main thread as this would cause a write operation to the given {@link BlockGetter} and cause\n+     *          a CME in the process. Any other direct or indirect write operation to the {@link BlockGetter} will have\n+     *          the same outcome.\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param state The blocks {@link BlockState}\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState state, BlockState neighborState, Direction dir)\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding(BlockState state)\n+    {\n+        if (FMLEnvironment.dist.isClient())\n+        {\n+            return !ForgeHooksClient.isBlockInSolidLayer(state);\n+        }\n+        return true;\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0dd95ac4b..ee83e1ee7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -790,4 +844,26 @@ public interface IForgeBlock\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param state the state of the block being hydrated\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockState state, BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return fluid.canHydrate(getter, fluidPos, state, pos);\n+    }\n }\n", "next_change": {"commit": "7e06a2105f149c49722139187738d118fdb7c0cb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex ee83e1ee7..1a6a3d49f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -866,4 +881,17 @@ public interface IForgeBlock\n     {\n         return fluid.canHydrate(getter, fluidPos, state, pos);\n     }\n+\n+    /**\n+     * Returns the {@link MaterialColor} shown on the map.\n+     *\n+     * @param state The state of this block\n+     * @param level The level this block is in\n+     * @param pos The blocks position in the level\n+     * @param defaultColor The {@code MaterialColor} configured for the given {@code BlockState} in the {@link BlockBehaviour.Properties}\n+     */\n+    default MaterialColor getMapColor(BlockState state, BlockGetter level, BlockPos pos, MaterialColor defaultColor)\n+    {\n+        return defaultColor;\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 1a6a3d49f..450f69d17 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -894,4 +923,32 @@ public interface IForgeBlock\n     {\n         return defaultColor;\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this block reports to look like on the given side, for querying by other mods.\n+     * Note: Overriding this does not change how this block renders. That must still be handled in the block's model.\n+     * <p>\n+     * Common implementors would be covers and facades, or any other mimic blocks that proxy another block's model.\n+     * Common consumers would be models with connected textures that wish to seamlessly connect to mimic blocks.\n+     * <p>\n+     * <b>Note that this method may be called on the server, or on any of the client's meshing threads.</b><br/>\n+     * As such, if you need any data from your {@link BlockEntity}, you should put it in {@link ModelData} to guarantee\n+     * safe concurrent access to it on the client.<br/>\n+     * Calling {@link BlockGetter#getModelDataManager()} will return {@code null} if in a server context, where it is\n+     * safe to query your {@link BlockEntity} directly. Otherwise, {@link ModelDataManager#getAt(BlockPos)} will return\n+     * the {@link ModelData} for the queried block, or {@code null} if none is present.\n+     *\n+     * @param state      The state of this block\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block on the given side. By default, the current state\n+     * @see IForgeBlockState#getAppearance(BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockState state, BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577087", "body": "There really should be a private final originalState, so there is always a clean reference to the originalState.", "bodyText": "There really should be a private final originalState, so there is always a clean reference to the originalState.", "bodyHTML": "<p dir=\"auto\">There really should be a private final originalState, so there is always a clean reference to the originalState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:44:33Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ1MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577450", "bodyText": "I extended BlockEvent, which holds a private final originalState.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ5Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577496", "bodyText": "Ah fair enough, ignore me :P", "author": "Lanse505", "createdAt": "2020-07-26T21:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzY4OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577689", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -456,35 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577149", "body": "Should probably just be state. (Nitpicky)", "bodyText": "Should probably just be state. (Nitpicky)", "bodyHTML": "<p dir=\"auto\">Should probably just be state. (Nitpicky)</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:44:58Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzUzNQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577535", "bodyText": "Referenced as finalState to know the diference between getState and getFinalState in code. However, I can change to state. (less nitpicky)", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYyNA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577624", "bodyText": "You can resolve this, it's valid since there is already a getState, setState, and original state things.", "author": "Lanse505", "createdAt": "2020-07-26T21:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -456,35 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577271", "body": "All the getter lines are wrong formatting should be same line getters.\r\ni.e. \r\n```\r\npublic PlayerEntity getPlayer() { return player; }\r\n```", "bodyText": "All the getter lines are wrong formatting should be same line getters.\ni.e.\npublic PlayerEntity getPlayer() { return player; }", "bodyHTML": "<p dir=\"auto\">All the getter lines are wrong formatting should be same line getters.<br>\ni.e.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public PlayerEntity getPlayer() { return player; }\n\"><pre><code>public PlayerEntity getPlayer() { return player; }\n</code></pre></div>", "author": "Lanse505", "createdAt": "2020-07-26T21:46:23Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Nzg4MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577880", "bodyText": "Most of the formatting for BlockEvent is incorrect then.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Nzk0MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577941", "bodyText": "I might be wrong, but that's how I've been told my triage in the past to format the getters/setters.", "author": "Lanse505", "createdAt": "2020-07-26T21:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -456,35 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577363", "body": "I'd say as above change it to state and getState and setState.", "bodyText": "I'd say as above change it to state and getState and setState.", "bodyHTML": "<p dir=\"auto\">I'd say as above change it to state and getState and setState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:47:29Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzU1Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577553", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577619", "bodyText": "Extends BlockEvent. Cannot use getState. Better to specify what it does though. Can rename setFinalState to setState though if still wanted.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -456,35 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577371", "body": "I'd say as above change it to state and getState and setState.", "bodyText": "I'd say as above change it to state and getState and setState.", "bodyHTML": "<p dir=\"auto\">I'd say as above change it to state and getState and setState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:47:35Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzU1NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577554", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODA4NQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460578085", "bodyText": "Extends BlockEvent. Cannot use getState. Better to specify what it does though.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODEyOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460578128", "bodyText": "once again, you can mark all of these comments as resolved now Champion :P", "author": "Lanse505", "createdAt": "2020-07-26T21:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -456,35 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTM1OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461045358", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs.", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs.", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:17:18Z", "path": "src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package net.minecraftforge.debug.block;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n+import net.minecraftforge.fml.common.Mod;\n+\n+@Mod(\"tool_interact_test\")\n+public class ToolInteractTest {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\nindex 6d24c4b4a..a277c6f3b 100644\n--- a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n+++ b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n", "chunk": "@@ -8,27 +8,29 @@ import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n import net.minecraftforge.fml.common.Mod;\n \n @Mod(\"tool_interact_test\")\n-public class ToolInteractTest {\n+public class ToolInteractTest\n+{\n \n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n+    private static final Logger LOGGER = LogManager.getLogger();\n \t\n-\tpublic ToolInteractTest() {\n-\t\tMinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n-\t}\n+    public ToolInteractTest()\n+    {\n+        MinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n+    }\n \t\n-\tprivate void onToolInteraction(final BlockToolInteractEvent event) {\n-\t\t//Test 1: No Changes, just test if event is called. State and Final State should be the same\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t\n-\t\t\n-\t\t//Test 2: Canceling, nothing in game should change\n-\t\t/*event.setCanceled(true);\n-\t\tLOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n-\t\t*/\n-\t\t\n-\t\t//Test 3: Altering\n-\t\t/*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t*/\n-\t}\n+    private void onToolInteraction(final BlockToolInteractEvent event)\n+    {\n+        //Test 1: No Changes, just test if event is called. State and Final State should be the same\n+        LOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+\n+        //Test 2: Canceling, nothing in game should change\n+        /*event.setCanceled(true);\n+        LOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n+        */\n+\n+        //Test 3: Altering\n+        /*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n+        LOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+        */\n+    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTk5OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461045998", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:18:23Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -450,7 +448,7 @@ public class BlockEvent extends Event\n     \n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * \n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..98026ec17 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,24 +433,24 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalSize size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, PortalSize size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalSize getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n      */\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 98026ec17..d1bd1cb5c 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -449,7 +432,9 @@ public class BlockEvent extends Event\n \n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip or a shovel can path.\n+     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n+     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n      *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n", "next_change": {"commit": "b4feee8046ab50aa90aa1907d52c994bb303f0c7", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex d1bd1cb5c..45b9cc5fa 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -433,7 +431,7 @@ public class BlockEvent extends Event\n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n      * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n+     * For hoes, see {@code net.minecraft.world.item.HoeItem#TILLABLES} and\n      * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n      *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 45b9cc5fa..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -429,65 +417,159 @@ public class BlockEvent extends Event\n     }\n \n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@code net.minecraft.world.item.HoeItem#TILLABLES} and\n-     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n-     *\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolAction toolAction;\n-        private BlockState state;\n+\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n \n         public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n             this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n+        {\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n         public Player getPlayer()\n         {\n-            return player;\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n+            return this.context.getItemInHand();\n         }\n \n-        /**Gets the action being performed.*/\n+        /**\n+         * @return the action being performed\n+         */\n         public ToolAction getToolAction()\n         {\n-            return toolAction;\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n+        {\n+            return context;\n+        }\n+\n+        /**\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 98026ec17..d1bd1cb5c 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,12 +443,12 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n         private final ToolType toolType;\n         private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolType toolType)\n         {\n             super(world, pos, originalState);\n             this.player = player;\n", "next_change": {"commit": "10b51f257fc0ea2318580f4064f4bba4d5511ab9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex d1bd1cb5c..edfc3a505 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -445,16 +443,16 @@ public class BlockEvent extends Event\n \n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n+        private final ToolAction toolAction;\n         private BlockState state;\n \n-        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n             super(world, pos, originalState);\n             this.player = player;\n             this.stack = stack;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n         }\n \n         /**Gets the player using the tool.*/\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex edfc3a505..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -429,65 +417,159 @@ public class BlockEvent extends Event\n     }\n \n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n-     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n-     *\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolAction toolAction;\n-        private BlockState state;\n+\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n \n         public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n             this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n+        {\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n         public Player getPlayer()\n         {\n-            return player;\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n+            return this.context.getItemInHand();\n         }\n \n-        /**Gets the action being performed.*/\n+        /**\n+         * @return the action being performed\n+         */\n         public ToolAction getToolAction()\n         {\n-            return toolAction;\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n+        {\n+            return context;\n+        }\n+\n+        /**\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjgwOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461046808", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:19:47Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -358,6 +360,13 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9f9fd01b5e90c31f76efe19d04f481932f03273", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex e8e11e492..7a9338b79 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -360,13 +359,6 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n-    @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n-    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 7a9338b79..35d3b1f9d 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -359,6 +363,13 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n+    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 35d3b1f9d..27aa257fe 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -377,7 +374,7 @@ public class ForgeEventFactory\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isRemote)\n+            if (!world.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 27aa257fe..cb4778fab 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -382,24 +381,24 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static ActionResult<ItemStack> onBucketUse(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull ItemStack stack, @Nullable RayTraceResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level world, @Nonnull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, world, target);\n-        if (MinecraftForge.EVENT_BUS.post(event)) return new ActionResult<ItemStack>(ActionResultType.FAIL, stack);\n+        if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n \n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (player.abilities.instabuild)\n-                return new ActionResult<ItemStack>(ActionResultType.SUCCESS, stack);\n+            if (player.getAbilities().instabuild)\n+                return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, stack);\n \n             stack.shrink(1);\n             if (stack.isEmpty())\n-                return new ActionResult<ItemStack>(ActionResultType.SUCCESS, event.getFilledBucket());\n+                return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, event.getFilledBucket());\n \n-            if (!player.inventory.add(event.getFilledBucket()))\n+            if (!player.getInventory().add(event.getFilledBucket()))\n                 player.drop(event.getFilledBucket(), false);\n \n-            return new ActionResult<ItemStack>(ActionResultType.SUCCESS, stack);\n+            return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, stack);\n         }\n         return null;\n     }\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -403,21 +363,22 @@ public class ForgeEventFactory\n         return null;\n     }\n \n-    public static boolean canEntityUpdate(Entity entity)\n+    public static PlayLevelSoundEvent.AtEntity onPlaySoundAtEntity(Entity entity, SoundEvent name, SoundSource category, float volume, float pitch)\n     {\n-        EntityEvent.CanUpdate event = new EntityEvent.CanUpdate(entity);\n+        PlayLevelSoundEvent.AtEntity event = new PlayLevelSoundEvent.AtEntity(entity, name, category, volume, pitch);\n         MinecraftForge.EVENT_BUS.post(event);\n-        return event.getCanUpdate();\n+        return event;\n     }\n \n-    public static PlaySoundAtEntityEvent onPlaySoundAtEntity(Entity entity, SoundEvent name, SoundSource category, float volume, float pitch)\n+\n+    public static PlayLevelSoundEvent.AtPosition onPlaySoundAtPosition(Level level, double x, double y, double z, SoundEvent name, SoundSource category, float volume, float pitch)\n     {\n-        PlaySoundAtEntityEvent event = new PlaySoundAtEntityEvent(entity, name, category, volume, pitch);\n+        PlayLevelSoundEvent.AtPosition event = new PlayLevelSoundEvent.AtPosition(level, new Vec3(x, y, z), name, category, volume, pitch);\n         MinecraftForge.EVENT_BUS.post(event);\n         return event;\n     }\n \n-    public static int onItemExpire(ItemEntity entity, @Nonnull ItemStack item)\n+    public static int onItemExpire(ItemEntity entity, @NotNull ItemStack item)\n     {\n         if (item.isEmpty()) return -1;\n         ItemExpireEvent event = new ItemExpireEvent(entity, (item.isEmpty() ? 6000 : item.getItem().getEntityLifespan(item, entity.level)));\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Nzg2Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461047867", "body": "This should probably be like other events in format:\r\n```java\r\nreturn MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\r\n```", "bodyText": "This should probably be like other events in format:\nreturn MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();", "bodyHTML": "<p dir=\"auto\">This should probably be like other events in format:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-smi\">MinecraftForge</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EVENT_BUS</span><span class=\"pl-k\">.</span>post(event) <span class=\"pl-k\">?</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">:</span> event<span class=\"pl-k\">.</span>getFinalState();</pre></div>", "author": "pupnewfster", "createdAt": "2020-07-27T17:21:30Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -358,6 +360,13 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n+    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n+    \treturn event.getFinalState();", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9f9fd01b5e90c31f76efe19d04f481932f03273", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex e8e11e492..7a9338b79 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -360,13 +359,6 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n-    @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n-    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 7a9338b79..35d3b1f9d 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -359,6 +363,13 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n+    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 35d3b1f9d..27aa257fe 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -377,7 +374,7 @@ public class ForgeEventFactory\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isRemote)\n+            if (!world.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 27aa257fe..cb4778fab 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -382,24 +381,24 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static ActionResult<ItemStack> onBucketUse(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull ItemStack stack, @Nullable RayTraceResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level world, @Nonnull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, world, target);\n-        if (MinecraftForge.EVENT_BUS.post(event)) return new ActionResult<ItemStack>(ActionResultType.FAIL, stack);\n+        if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n \n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (player.abilities.instabuild)\n-                return new ActionResult<ItemStack>(ActionResultType.SUCCESS, stack);\n+            if (player.getAbilities().instabuild)\n+                return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, stack);\n \n             stack.shrink(1);\n             if (stack.isEmpty())\n-                return new ActionResult<ItemStack>(ActionResultType.SUCCESS, event.getFilledBucket());\n+                return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, event.getFilledBucket());\n \n-            if (!player.inventory.add(event.getFilledBucket()))\n+            if (!player.getInventory().add(event.getFilledBucket()))\n                 player.drop(event.getFilledBucket(), false);\n \n-            return new ActionResult<ItemStack>(ActionResultType.SUCCESS, stack);\n+            return new InteractionResultHolder<ItemStack>(InteractionResult.SUCCESS, stack);\n         }\n         return null;\n     }\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -403,21 +363,22 @@ public class ForgeEventFactory\n         return null;\n     }\n \n-    public static boolean canEntityUpdate(Entity entity)\n+    public static PlayLevelSoundEvent.AtEntity onPlaySoundAtEntity(Entity entity, SoundEvent name, SoundSource category, float volume, float pitch)\n     {\n-        EntityEvent.CanUpdate event = new EntityEvent.CanUpdate(entity);\n+        PlayLevelSoundEvent.AtEntity event = new PlayLevelSoundEvent.AtEntity(entity, name, category, volume, pitch);\n         MinecraftForge.EVENT_BUS.post(event);\n-        return event.getCanUpdate();\n+        return event;\n     }\n \n-    public static PlaySoundAtEntityEvent onPlaySoundAtEntity(Entity entity, SoundEvent name, SoundSource category, float volume, float pitch)\n+\n+    public static PlayLevelSoundEvent.AtPosition onPlaySoundAtPosition(Level level, double x, double y, double z, SoundEvent name, SoundSource category, float volume, float pitch)\n     {\n-        PlaySoundAtEntityEvent event = new PlaySoundAtEntityEvent(entity, name, category, volume, pitch);\n+        PlayLevelSoundEvent.AtPosition event = new PlayLevelSoundEvent.AtPosition(level, new Vec3(x, y, z), name, category, volume, pitch);\n         MinecraftForge.EVENT_BUS.post(event);\n         return event;\n     }\n \n-    public static int onItemExpire(ItemEntity entity, @Nonnull ItemStack item)\n+    public static int onItemExpire(ItemEntity entity, @NotNull ItemStack item)\n     {\n         if (item.isEmpty()) return -1;\n         ItemExpireEvent event = new ItemExpireEvent(entity, (item.isEmpty() ? 6000 : item.getItem().getEntityLifespan(item, entity.level)));\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODc1Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461048753", "body": "This line is a mix of spaces and tabs, and should only be spaces.", "bodyText": "This line is a mix of spaces and tabs, and should only be spaces.", "bodyHTML": "<p dir=\"auto\">This line is a mix of spaces and tabs, and should only be spaces.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:22:57Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,9 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "15733a18e41e53961e486001b7720b36b77c20ad", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 46791f24a..424723a75 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -797,4 +798,15 @@ public interface IForgeBlockState\n         BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n         return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n+\n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(LivingEntity entity)\n+    {\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.func_233580_cy_(), entity);\n+    }\n }\n", "next_change": {"commit": "53eedb0f102bb1d8cf9432fae891730481206bce", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 424723a75..e012b6e93 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -807,6 +808,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.func_233580_cy_(), entity);\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.getPosition(), entity);\n     }\n }\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex e012b6e93..f19c90a44 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -808,6 +806,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.getPosition(), entity);\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.level, entity.blockPosition(), entity);\n     }\n }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex f19c90a44..cde9c82e3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -806,6 +662,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.level, entity.blockPosition(), entity);\n+        return self().getBlock().isScaffolding(self(), entity.level, entity.blockPosition(), entity);\n     }\n }\n", "next_change": {"commit": "cd67762beeb680034d2b57c4584c5eafb4e4bead", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..8a7f7eb1f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -664,4 +641,19 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().isScaffolding(self(), entity.level, entity.blockPosition(), entity);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a side.\n+     * <p>\n+     * Modded redstone wire blocks should call this function to determine visual connections.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     */\n+    default boolean canRedstoneConnectTo(BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    {\n+        return self().getBlock().canConnectRedstone(self(), world, pos, direction);\n+    }\n }\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 8a7f7eb1f..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -647,13 +637,13 @@ public interface IForgeBlockState\n      * <p>\n      * Modded redstone wire blocks should call this function to determine visual connections.\n      *\n-     * @param world The world\n-     * @param pos The block position in world\n+     * @param level The level\n+     * @param pos The block position in level\n      * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n      * @return True if redstone dust should visually connect on the side passed\n      */\n-    default boolean canRedstoneConnectTo(BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    default boolean canRedstoneConnectTo(BlockGetter level, BlockPos pos, @Nullable Direction direction)\n     {\n-        return self().getBlock().canConnectRedstone(self(), world, pos, direction);\n+        return self().getBlock().canConnectRedstone(self(), level, pos, direction);\n     }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..30b6627a8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -646,4 +646,31 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().canConnectRedstone(self(), level, pos, direction);\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link net.minecraft.world.level.block.Block#skipRendering(BlockState, BlockState, Direction)}\n+     * on the respective block instead\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState neighborState, Direction dir)\n+    {\n+        return self().getBlock().hidesNeighborFace(level, pos, self(), neighborState, dir);\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding()\n+    {\n+        return self().getBlock().supportsExternalFaceHiding(self());\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 30b6627a8..8897c0fce 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -673,4 +687,25 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().supportsExternalFaceHiding(self());\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return self().getBlock().canBeHydrated(self(), getter, pos, fluid, fluidPos);\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 8897c0fce..01b218b2d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -708,4 +749,20 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().canBeHydrated(self(), getter, pos, fluid, fluidPos);\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this state reports to look like on the given side for querying by other mods.\n+     *\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block from the given side\n+     * @see IForgeBlock#getAppearance(BlockState, BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return self().getBlock().getAppearance(self(), level, pos, side, queryState, queryPos);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDc5OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461050798", "body": "The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:26:20Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,38 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,24 +904,10 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": {"commit": "15733a18e41e53961e486001b7720b36b77c20ad", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex dd23d2f22..809ff078a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -910,4 +911,18 @@ public interface IForgeBlock\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING);\n+    }\n }\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 809ff078a..b83851ed3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -923,6 +921,6 @@ public interface IForgeBlock\n      */\n     default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n     {\n-        return state.isIn(Blocks.SCAFFOLDING);\n+        return state.is(Blocks.SCAFFOLDING);\n     }\n }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex b83851ed3..845c9c235 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -919,7 +748,7 @@ public interface IForgeBlock\n      * @param entity The entity on the scaffolding\n      * @return True if the block should act like scaffolding\n      */\n-    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    default boolean isScaffolding(BlockState state, LevelReader world, BlockPos pos, LivingEntity entity)\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n", "next_change": {"commit": "cd67762beeb680034d2b57c4584c5eafb4e4bead", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 845c9c235..51e61be00 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -752,4 +719,54 @@ public interface IForgeBlock\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a given side\n+     * <p>\n+     * The default implementation is identical to\n+     * {@link RedStoneWireBlock#shouldConnectTo(BlockState, Direction)}\n+     *\n+     * <p>\n+     * {@link RedStoneWireBlock} updates its visual connection when\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}\n+     * is called, this callback is used during the evaluation of its new shape.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     * <p>\n+     * If the return value is evaluated based on world and pos (e.g. from BlockEntity), then the implementation of\n+     * this block should notify its neighbors to update their shapes when necessary. Consider using\n+     * {@link BlockState#updateNeighbourShapes(LevelAccessor, BlockPos, int, int)} or\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}.\n+     * <p>\n+     * Example:\n+     * <p>\n+     * 1. {@code yourBlockState.updateNeighbourShapes(world, yourBlockPos, UPDATE_ALL);}\n+     * <p>\n+     * 2. {@code neighborState.updateShape(fromDirection, stateOfYourBlock, world, neighborBlockPos, yourBlockPos)},\n+     * where {@code fromDirection} is defined from the neighbor block's point of view.\n+     */\n+    default boolean canConnectRedstone(BlockState state, BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    {\n+        if (state.is(Blocks.REDSTONE_WIRE))\n+        {\n+            return true;\n+        }\n+        else if (state.is(Blocks.REPEATER))\n+        {\n+            Direction facing = state.getValue(RepeaterBlock.FACING);\n+            return facing == direction || facing.getOpposite() == direction;\n+        }\n+        else if (state.is(Blocks.OBSERVER))\n+        {\n+            return direction == state.getValue(ObserverBlock.FACING);\n+        }\n+        else\n+        {\n+            return state.isSignalSource() && direction != null;\n+        }\n+    }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 51e61be00..0dd95ac4b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -769,4 +751,43 @@ public interface IForgeBlock\n             return state.isSignalSource() && direction != null;\n         }\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link Block#skipRendering(BlockState, BlockState, Direction)} on the respective block instead\n+     * <p>\n+     * WARNING: This method is likely to be called from a worker thread! If you want to retrieve a\n+     *          {@link net.minecraft.world.level.block.entity.BlockEntity} from the given level, make sure to use\n+     *          {@link net.minecraftforge.common.extensions.IForgeBlockGetter#getExistingBlockEntity(BlockPos)} to not\n+     *          accidentally create a new or delete an old {@link net.minecraft.world.level.block.entity.BlockEntity}\n+     *          off of the main thread as this would cause a write operation to the given {@link BlockGetter} and cause\n+     *          a CME in the process. Any other direct or indirect write operation to the {@link BlockGetter} will have\n+     *          the same outcome.\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param state The blocks {@link BlockState}\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState state, BlockState neighborState, Direction dir)\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding(BlockState state)\n+    {\n+        if (FMLEnvironment.dist.isClient())\n+        {\n+            return !ForgeHooksClient.isBlockInSolidLayer(state);\n+        }\n+        return true;\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0dd95ac4b..ee83e1ee7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -790,4 +844,26 @@ public interface IForgeBlock\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param state the state of the block being hydrated\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockState state, BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return fluid.canHydrate(getter, fluidPos, state, pos);\n+    }\n }\n", "next_change": {"commit": "7e06a2105f149c49722139187738d118fdb7c0cb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex ee83e1ee7..1a6a3d49f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -866,4 +881,17 @@ public interface IForgeBlock\n     {\n         return fluid.canHydrate(getter, fluidPos, state, pos);\n     }\n+\n+    /**\n+     * Returns the {@link MaterialColor} shown on the map.\n+     *\n+     * @param state The state of this block\n+     * @param level The level this block is in\n+     * @param pos The blocks position in the level\n+     * @param defaultColor The {@code MaterialColor} configured for the given {@code BlockState} in the {@link BlockBehaviour.Properties}\n+     */\n+    default MaterialColor getMapColor(BlockState state, BlockGetter level, BlockPos pos, MaterialColor defaultColor)\n+    {\n+        return defaultColor;\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 1a6a3d49f..450f69d17 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -894,4 +923,32 @@ public interface IForgeBlock\n     {\n         return defaultColor;\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this block reports to look like on the given side, for querying by other mods.\n+     * Note: Overriding this does not change how this block renders. That must still be handled in the block's model.\n+     * <p>\n+     * Common implementors would be covers and facades, or any other mimic blocks that proxy another block's model.\n+     * Common consumers would be models with connected textures that wish to seamlessly connect to mimic blocks.\n+     * <p>\n+     * <b>Note that this method may be called on the server, or on any of the client's meshing threads.</b><br/>\n+     * As such, if you need any data from your {@link BlockEntity}, you should put it in {@link ModelData} to guarantee\n+     * safe concurrent access to it on the client.<br/>\n+     * Calling {@link BlockGetter#getModelDataManager()} will return {@code null} if in a server context, where it is\n+     * safe to query your {@link BlockEntity} directly. Otherwise, {@link ModelDataManager#getAt(BlockPos)} will return\n+     * the {@link ModelData} for the queried block, or {@code null} if none is present.\n+     *\n+     * @param state      The state of this block\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block on the given side. By default, the current state\n+     * @see IForgeBlockState#getAppearance(BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockState state, BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODQzOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058438", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:39:29Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -450,7 +448,7 @@ public class BlockEvent extends Event\n     \n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * \n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..98026ec17 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,24 +433,24 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalSize size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, PortalSize size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalSize getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n      */\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 98026ec17..d1bd1cb5c 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -449,7 +432,9 @@ public class BlockEvent extends Event\n \n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip or a shovel can path.\n+     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n+     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n      *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n", "next_change": {"commit": "b4feee8046ab50aa90aa1907d52c994bb303f0c7", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex d1bd1cb5c..45b9cc5fa 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -433,7 +431,7 @@ public class BlockEvent extends Event\n     /**\n      * Fired when when this block is right clicked by a tool to change its state.\n      * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n+     * For hoes, see {@code net.minecraft.world.item.HoeItem#TILLABLES} and\n      * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n      *\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 45b9cc5fa..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -429,65 +417,159 @@ public class BlockEvent extends Event\n     }\n \n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@code net.minecraft.world.item.HoeItem#TILLABLES} and\n-     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n-     *\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolAction toolAction;\n-        private BlockState state;\n+\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n \n         public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n             this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n+        {\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n         public Player getPlayer()\n         {\n-            return player;\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n+            return this.context.getItemInHand();\n         }\n \n-        /**Gets the action being performed.*/\n+        /**\n+         * @return the action being performed\n+         */\n         public ToolAction getToolAction()\n         {\n-            return toolAction;\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n+        {\n+            return context;\n+        }\n+\n+        /**\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 98026ec17..d1bd1cb5c 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,12 +443,12 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n         private final ToolType toolType;\n         private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolType toolType)\n         {\n             super(world, pos, originalState);\n             this.player = player;\n", "next_change": {"commit": "10b51f257fc0ea2318580f4064f4bba4d5511ab9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex d1bd1cb5c..edfc3a505 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -445,16 +443,16 @@ public class BlockEvent extends Event\n \n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n+        private final ToolAction toolAction;\n         private BlockState state;\n \n-        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n             super(world, pos, originalState);\n             this.player = player;\n             this.stack = stack;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n         }\n \n         /**Gets the player using the tool.*/\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex edfc3a505..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -429,65 +417,159 @@ public class BlockEvent extends Event\n     }\n \n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip or a shovel can path.\n-     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and\n-     * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.\n-     *\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n         private final Player player;\n         private final ItemStack stack;\n-        private final ToolAction toolAction;\n-        private BlockState state;\n+\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n \n         public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n             this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n+        {\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n         public Player getPlayer()\n         {\n-            return player;\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n+            return this.context.getItemInHand();\n         }\n \n-        /**Gets the action being performed.*/\n+        /**\n+         * @return the action being performed\n+         */\n         public ToolAction getToolAction()\n         {\n-            return toolAction;\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n+        {\n+            return context;\n+        }\n+\n+        /**\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058563", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:39:43Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,38 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -893,7 +893,7 @@ public interface IForgeBlock\n     \n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * Return null if vanilla behavior should be disabled.\n      *\n      * @param state The current state\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex dd23d2f22..148e5ff2b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -890,7 +891,7 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n-    \n+\n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 148e5ff2b..845c9c235 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -887,9 +714,9 @@ public interface IForgeBlock\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockState state, BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n     {\n-        return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n+        return state.getBlock() instanceof HalfTransparentBlock || state.getBlock() instanceof LeavesBlock;\n     }\n \n     /**\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 845c9c235..934deb239 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -709,12 +655,12 @@ public interface IForgeBlock\n      * Called to determine whether this block should use the fluid overlay texture or flowing texture when it is placed under the fluid.\n      *\n      * @param state The current state\n-     * @param world The world\n-     * @param pos Block position in world\n+     * @param level The level\n+     * @param pos Block position in level\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(BlockState state, BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockState state, BlockAndTintGetter level, BlockPos pos, FluidState fluidState)\n     {\n         return state.getBlock() instanceof HalfTransparentBlock || state.getBlock() instanceof LeavesBlock;\n     }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 934deb239..cc75d07ee 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -666,9 +663,48 @@ public interface IForgeBlock\n     }\n \n     /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * Returns {@code null} if nothing should happen.\n+     *\n+     * @param state The current state\n+     * @param context The use on context that the action was performed in\n+     * @param toolAction The action being performed by the tool\n+     * @param simulate If {@code true}, no actions that modify the world in any way should be performed. If {@code false}, the world may be modified.\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, UseOnContext context, ToolAction toolAction, boolean simulate)\n+    {\n+        BlockState toolModifiedState = getToolModifiedState(state, context.getLevel(), context.getClickedPos(),\n+                context.getPlayer(), context.getItemInHand(), toolAction);\n+\n+        if (toolModifiedState == null && ToolActions.HOE_TILL == toolAction && context.getItemInHand().canPerformAction(ToolActions.HOE_TILL))\n+        {\n+            // Logic copied from HoeItem#TILLABLES; needs to be kept in sync during updating\n+            Block block = state.getBlock();\n+            if (block == Blocks.ROOTED_DIRT)\n+            {\n+                if (!simulate && !context.getLevel().isClientSide)\n+                {\n+                    Block.popResourceFromFace(context.getLevel(), context.getClickedPos(), context.getClickedFace(), new ItemStack(Items.HANGING_ROOTS));\n+                }\n+                return Blocks.DIRT.defaultBlockState();\n+            } else if ((block == Blocks.GRASS_BLOCK || block == Blocks.DIRT_PATH || block == Blocks.DIRT || block == Blocks.COARSE_DIRT) &&\n+                    context.getLevel().getBlockState(context.getClickedPos().above()).isAir())\n+            {\n+                return block == Blocks.COARSE_DIRT ? Blocks.DIRT.defaultBlockState() : Blocks.FARMLAND.defaultBlockState();\n+            }\n+        }\n+\n+        return toolModifiedState;\n+    }\n+\n+    /**\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n+     * Returns {@code null} if nothing should happen.\n      *\n      * @param state The current state\n      * @param level The level\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex cc75d07ee..616c90984 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -698,35 +711,6 @@ public interface IForgeBlock\n             }\n         }\n \n-        return toolModifiedState;\n-    }\n-\n-    /**\n-     * Returns the state that this block should transform into when right-clicked by a tool.\n-     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n-     * Returns {@code null} if nothing should happen.\n-     *\n-     * @param state The current state\n-     * @param level The level\n-     * @param pos The block position in level\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolAction The action being performed by the tool\n-     * @return The resulting state after the action has been performed\n-     * @deprecated Override and use {@link #getToolModifiedState(BlockState, UseOnContext, ToolAction, boolean)} instead\n-     */\n-    @Nullable\n-    // TODO 1.19: Remove this and move the default impl to the newer method in 1.19. Has to stay here to preserve behavior of overrides on this method.\n-    @Deprecated(forRemoval = true, since = \"1.18.2\")\n-    default BlockState getToolModifiedState(BlockState state, Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n-    {\n-        if (!stack.canPerformAction(toolAction)) return null;\n-        if (ToolActions.AXE_STRIP == toolAction) return AxeItem.getAxeStrippingState(state);\n-        else if(ToolActions.AXE_SCRAPE == toolAction) return WeatheringCopper.getPrevious(state).orElse(null);\n-        else if(ToolActions.AXE_WAX_OFF == toolAction) return Optional.ofNullable(HoneycombItem.WAX_OFF_BY_BLOCK.get().get(state.getBlock())).map((p_150694_) -> {\n-            return p_150694_.withPropertiesOf(state);\n-        }).orElse(null);\n-        else if (ToolActions.SHOVEL_FLATTEN == toolAction) return ShovelItem.getShovelPathingState(state);\n         return null;\n     }\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 845c9c235..934deb239 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -725,31 +671,88 @@ public interface IForgeBlock\n      * Return null if vanilla behavior should be disabled.\n      *\n      * @param state The current state\n-     * @param world The world\n-     * @param pos The block position in world\n+     * @param level The level\n+     * @param pos The block position in level\n      * @param player The player clicking the block\n      * @param stack The stack being used by the player\n+     * @param toolAction The action being performed by the tool\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n-    {\n-        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n-//        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state); //TODO HoeItem bork\n-        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n+    default BlockState getToolModifiedState(BlockState state, Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n+    {\n+        if (!stack.canPerformAction(toolAction)) return null;\n+        if (ToolActions.AXE_STRIP.equals(toolAction)) return AxeItem.getAxeStrippingState(state);\n+        else if(ToolActions.AXE_SCRAPE.equals(toolAction)) return WeatheringCopper.getPrevious(state).orElse(null);\n+        else if(ToolActions.AXE_WAX_OFF.equals(toolAction)) return Optional.ofNullable(HoneycombItem.WAX_OFF_BY_BLOCK.get().get(state.getBlock())).map((p_150694_) -> {\n+            return p_150694_.withPropertiesOf(state);\n+        }).orElse(null);\n+        //else if(ToolActions.HOE_TILL.equals(toolAction)) return HoeItem.getHoeTillingState(state); //TODO HoeItem bork\n+        else if (ToolActions.SHOVEL_FLATTEN.equals(toolAction)) return ShovelItem.getShovelPathingState(state);\n+        return null;\n     }\n \n     /**\n      * Checks if a player or entity handles movement on this block like scaffolding.\n      *\n      * @param state The current state\n-     * @param world The current world\n-     * @param pos The block position in world\n+     * @param level The current level\n+     * @param pos The block position in level\n      * @param entity The entity on the scaffolding\n      * @return True if the block should act like scaffolding\n      */\n-    default boolean isScaffolding(BlockState state, LevelReader world, BlockPos pos, LivingEntity entity)\n+    default boolean isScaffolding(BlockState state, LevelReader level, BlockPos pos, LivingEntity entity)\n     {\n         return state.is(Blocks.SCAFFOLDING);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a given side\n+     * <p>\n+     * The default implementation is identical to\n+     * {@code RedStoneWireBlock#shouldConnectTo(BlockState, Direction)}\n+     *\n+     * <p>\n+     * {@link RedStoneWireBlock} updates its visual connection when\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}\n+     * is called, this callback is used during the evaluation of its new shape.\n+     *\n+     * @param state The current state\n+     * @param level The level\n+     * @param pos The block position in level\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     * <p>\n+     * If the return value is evaluated based on level and pos (e.g. from BlockEntity), then the implementation of\n+     * this block should notify its neighbors to update their shapes when necessary. Consider using\n+     * {@link BlockState#updateNeighbourShapes(LevelAccessor, BlockPos, int, int)} or\n+     * {@link BlockState#updateShape(Direction, BlockState, LevelAccessor, BlockPos, BlockPos)}.\n+     * <p>\n+     * Example:\n+     * <p>\n+     * 1. {@code yourBlockState.updateNeighbourShapes(level, yourBlockPos, UPDATE_ALL);}\n+     * <p>\n+     * 2. {@code neighborState.updateShape(fromDirection, stateOfYourBlock, level, neighborBlockPos, yourBlockPos)},\n+     * where {@code fromDirection} is defined from the neighbor block's point of view.\n+     */\n+    default boolean canConnectRedstone(BlockState state, BlockGetter level, BlockPos pos, @Nullable Direction direction)\n+    {\n+        if (state.is(Blocks.REDSTONE_WIRE))\n+        {\n+            return true;\n+        }\n+        else if (state.is(Blocks.REPEATER))\n+        {\n+            Direction facing = state.getValue(RepeaterBlock.FACING);\n+            return facing == direction || facing.getOpposite() == direction;\n+        }\n+        else if (state.is(Blocks.OBSERVER))\n+        {\n+            return direction == state.getValue(ObserverBlock.FACING);\n+        }\n+        else\n+        {\n+            return state.isSignalSource() && direction != null;\n+        }\n+    }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 934deb239..0dd95ac4b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -755,4 +751,43 @@ public interface IForgeBlock\n             return state.isSignalSource() && direction != null;\n         }\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link Block#skipRendering(BlockState, BlockState, Direction)} on the respective block instead\n+     * <p>\n+     * WARNING: This method is likely to be called from a worker thread! If you want to retrieve a\n+     *          {@link net.minecraft.world.level.block.entity.BlockEntity} from the given level, make sure to use\n+     *          {@link net.minecraftforge.common.extensions.IForgeBlockGetter#getExistingBlockEntity(BlockPos)} to not\n+     *          accidentally create a new or delete an old {@link net.minecraft.world.level.block.entity.BlockEntity}\n+     *          off of the main thread as this would cause a write operation to the given {@link BlockGetter} and cause\n+     *          a CME in the process. Any other direct or indirect write operation to the {@link BlockGetter} will have\n+     *          the same outcome.\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param state The blocks {@link BlockState}\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState state, BlockState neighborState, Direction dir)\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding(BlockState state)\n+    {\n+        if (FMLEnvironment.dist.isClient())\n+        {\n+            return !ForgeHooksClient.isBlockInSolidLayer(state);\n+        }\n+        return true;\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0dd95ac4b..ee83e1ee7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -790,4 +844,26 @@ public interface IForgeBlock\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param state the state of the block being hydrated\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockState state, BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return fluid.canHydrate(getter, fluidPos, state, pos);\n+    }\n }\n", "next_change": {"commit": "7e06a2105f149c49722139187738d118fdb7c0cb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex ee83e1ee7..1a6a3d49f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -866,4 +881,17 @@ public interface IForgeBlock\n     {\n         return fluid.canHydrate(getter, fluidPos, state, pos);\n     }\n+\n+    /**\n+     * Returns the {@link MaterialColor} shown on the map.\n+     *\n+     * @param state The state of this block\n+     * @param level The level this block is in\n+     * @param pos The blocks position in the level\n+     * @param defaultColor The {@code MaterialColor} configured for the given {@code BlockState} in the {@link BlockBehaviour.Properties}\n+     */\n+    default MaterialColor getMapColor(BlockState state, BlockGetter level, BlockPos pos, MaterialColor defaultColor)\n+    {\n+        return defaultColor;\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 1a6a3d49f..450f69d17 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -894,4 +923,32 @@ public interface IForgeBlock\n     {\n         return defaultColor;\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this block reports to look like on the given side, for querying by other mods.\n+     * Note: Overriding this does not change how this block renders. That must still be handled in the block's model.\n+     * <p>\n+     * Common implementors would be covers and facades, or any other mimic blocks that proxy another block's model.\n+     * Common consumers would be models with connected textures that wish to seamlessly connect to mimic blocks.\n+     * <p>\n+     * <b>Note that this method may be called on the server, or on any of the client's meshing threads.</b><br/>\n+     * As such, if you need any data from your {@link BlockEntity}, you should put it in {@link ModelData} to guarantee\n+     * safe concurrent access to it on the client.<br/>\n+     * Calling {@link BlockGetter#getModelDataManager()} will return {@code null} if in a server context, where it is\n+     * safe to query your {@link BlockEntity} directly. Otherwise, {@link ModelDataManager#getAt(BlockPos)} will return\n+     * the {@link ModelData} for the queried block, or {@code null} if none is present.\n+     *\n+     * @param state      The state of this block\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block on the given side. By default, the current state\n+     * @see IForgeBlockState#getAppearance(BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockState state, BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODgwMQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058801", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:40:08Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -782,24 +781,7 @@ public interface IForgeBlockState\n     \n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * Return null if vanilla behavior should be disabled.\n      *\n      * @param world The world\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 46791f24a..d548c976b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,7 +779,7 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n+\n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex d548c976b..cde9c82e3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -775,9 +630,9 @@ public interface IForgeBlockState\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n     {\n-        return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n+        return self().getBlock().shouldDisplayFluidOverlay(self(), world, pos, fluidState);\n     }\n \n     /**\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -604,35 +571,35 @@ public interface IForgeBlockState\n      * Useful for allowing the block to take into account tile entities,\n      * state, etc. when exploded, before it is removed.\n      *\n-     * @param world The current world\n-     * @param pos Block position in world\n+     * @param level The current level\n+     * @param pos Block position in level\n      * @param explosion The explosion instance affecting the block\n      */\n-    default void onBlockExploded(Level world, BlockPos pos, Explosion explosion)\n+    default void onBlockExploded(Level level, BlockPos pos, Explosion explosion)\n     {\n-        self().getBlock().onBlockExploded(self(), world, pos, explosion);\n+        self().getBlock().onBlockExploded(self(), level, pos, explosion);\n     }\n \n     /**\n      * Determines if this block's collision box should be treated as though it can extend above its block space.\n      * This can be used to replicate fence and wall behavior.\n      */\n-    default boolean collisionExtendsVertically(BlockGetter world, BlockPos pos, Entity collidingEntity)\n+    default boolean collisionExtendsVertically(BlockGetter level, BlockPos pos, Entity collidingEntity)\n     {\n-        return self().getBlock().collisionExtendsVertically(self(), world, pos, collidingEntity);\n+        return self().getBlock().collisionExtendsVertically(self(), level, pos, collidingEntity);\n     }\n \n     /**\n      * Called to determine whether this block should use the fluid overlay texture or flowing texture when it is placed under the fluid.\n      *\n-     * @param world The world\n-     * @param pos Block position in world\n+     * @param level The level\n+     * @param pos Block position in level\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter level, BlockPos pos, FluidState fluidState)\n     {\n-        return self().getBlock().shouldDisplayFluidOverlay(self(), world, pos, fluidState);\n+        return self().getBlock().shouldDisplayFluidOverlay(self(), level, pos, fluidState);\n     }\n \n     /**\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..b1857a5fe 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -603,9 +605,27 @@ public interface IForgeBlockState\n     }\n \n     /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * Returns {@code null} if nothing should happen.\n+     *\n+     * @param context The use on context that the action was performed in\n+     * @param toolAction The action being performed by the tool\n+     * @param simulate If {@code true}, no actions that modify the world in any way should be performed. If {@code false}, the world may be modified.\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(UseOnContext context, ToolAction toolAction, boolean simulate)\n+    {\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), context, toolAction, simulate);\n+        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n+    }\n+\n+    /**\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n+     * Returns {@code null} if nothing should happen.\n      *\n      * @param level The level\n      * @param pos The block position in level\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex b1857a5fe..2fcf6dcf8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -622,28 +624,6 @@ public interface IForgeBlockState\n         return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n     }\n \n-    /**\n-     * Returns the state that this block should transform into when right-clicked by a tool.\n-     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n-     * Returns {@code null} if nothing should happen.\n-     *\n-     * @param level The level\n-     * @param pos The block position in level\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolAction The tool type to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n-     */\n-    @Nullable\n-    // TODO 1.19: Remove\n-    @Deprecated(forRemoval = true, since = \"1.18.2\")\n-    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n-    {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n-    }\n-\n     /**\n      * Checks if a player or entity handles movement on this block like scaffolding.\n      *\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -640,18 +607,18 @@ public interface IForgeBlockState\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * Return null if vanilla behavior should be disabled.\n      *\n-     * @param world The world\n-     * @param pos The block position in world\n+     * @param level The level\n+     * @param pos The block position in level\n      * @param player The player clicking the block\n      * @param stack The stack being used by the player\n-     * @param toolType The tool type to be considered when performing the action\n+     * @param toolAction The tool type to be considered when performing the action\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n+    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), world, pos, player, stack, toolType);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n+        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n     }\n \n     /**\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..b1857a5fe 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -613,8 +633,11 @@ public interface IForgeBlockState\n      * @param stack The stack being used by the player\n      * @param toolAction The tool type to be considered when performing the action\n      * @return The resulting state after the action has been performed\n+     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n      */\n     @Nullable\n+    // TODO 1.19: Remove\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n     default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n         BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex b1857a5fe..2fcf6dcf8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -622,28 +624,6 @@ public interface IForgeBlockState\n         return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n     }\n \n-    /**\n-     * Returns the state that this block should transform into when right-clicked by a tool.\n-     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n-     * Returns {@code null} if nothing should happen.\n-     *\n-     * @param level The level\n-     * @param pos The block position in level\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolAction The tool type to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n-     */\n-    @Nullable\n-    // TODO 1.19: Remove\n-    @Deprecated(forRemoval = true, since = \"1.18.2\")\n-    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n-    {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n-    }\n-\n     /**\n      * Checks if a player or entity handles movement on this block like scaffolding.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODIyOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068229", "body": "This method should be removed (see my main comment for more info)", "bodyText": "This method should be removed (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">This method should be removed (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:56:40Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -782,24 +781,7 @@ public interface IForgeBlockState\n     \n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * Return null if vanilla behavior should be disabled.\n      *\n      * @param world The world\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 46791f24a..d548c976b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,7 +779,7 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n+\n     /**\n      * Returns the state that this block should transform into when right clicked by a tool.\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex d548c976b..cde9c82e3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -775,9 +630,9 @@ public interface IForgeBlockState\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n     {\n-        return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n+        return self().getBlock().shouldDisplayFluidOverlay(self(), world, pos, fluidState);\n     }\n \n     /**\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -604,35 +571,35 @@ public interface IForgeBlockState\n      * Useful for allowing the block to take into account tile entities,\n      * state, etc. when exploded, before it is removed.\n      *\n-     * @param world The current world\n-     * @param pos Block position in world\n+     * @param level The current level\n+     * @param pos Block position in level\n      * @param explosion The explosion instance affecting the block\n      */\n-    default void onBlockExploded(Level world, BlockPos pos, Explosion explosion)\n+    default void onBlockExploded(Level level, BlockPos pos, Explosion explosion)\n     {\n-        self().getBlock().onBlockExploded(self(), world, pos, explosion);\n+        self().getBlock().onBlockExploded(self(), level, pos, explosion);\n     }\n \n     /**\n      * Determines if this block's collision box should be treated as though it can extend above its block space.\n      * This can be used to replicate fence and wall behavior.\n      */\n-    default boolean collisionExtendsVertically(BlockGetter world, BlockPos pos, Entity collidingEntity)\n+    default boolean collisionExtendsVertically(BlockGetter level, BlockPos pos, Entity collidingEntity)\n     {\n-        return self().getBlock().collisionExtendsVertically(self(), world, pos, collidingEntity);\n+        return self().getBlock().collisionExtendsVertically(self(), level, pos, collidingEntity);\n     }\n \n     /**\n      * Called to determine whether this block should use the fluid overlay texture or flowing texture when it is placed under the fluid.\n      *\n-     * @param world The world\n-     * @param pos Block position in world\n+     * @param level The level\n+     * @param pos Block position in level\n      * @param fluidState The state of the fluid\n      * @return Whether the fluid overlay texture should be used\n      */\n-    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter world, BlockPos pos, FluidState fluidState)\n+    default boolean shouldDisplayFluidOverlay(BlockAndTintGetter level, BlockPos pos, FluidState fluidState)\n     {\n-        return self().getBlock().shouldDisplayFluidOverlay(self(), world, pos, fluidState);\n+        return self().getBlock().shouldDisplayFluidOverlay(self(), level, pos, fluidState);\n     }\n \n     /**\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..b1857a5fe 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -603,9 +605,27 @@ public interface IForgeBlockState\n     }\n \n     /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * Returns {@code null} if nothing should happen.\n+     *\n+     * @param context The use on context that the action was performed in\n+     * @param toolAction The action being performed by the tool\n+     * @param simulate If {@code true}, no actions that modify the world in any way should be performed. If {@code false}, the world may be modified.\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(UseOnContext context, ToolAction toolAction, boolean simulate)\n+    {\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), context, toolAction, simulate);\n+        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n+    }\n+\n+    /**\n+     * Returns the state that this block should transform into when right-clicked by a tool.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n+     * Returns {@code null} if nothing should happen.\n      *\n      * @param level The level\n      * @param pos The block position in level\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex b1857a5fe..2fcf6dcf8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -622,28 +624,6 @@ public interface IForgeBlockState\n         return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n     }\n \n-    /**\n-     * Returns the state that this block should transform into when right-clicked by a tool.\n-     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n-     * Returns {@code null} if nothing should happen.\n-     *\n-     * @param level The level\n-     * @param pos The block position in level\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolAction The tool type to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n-     */\n-    @Nullable\n-    // TODO 1.19: Remove\n-    @Deprecated(forRemoval = true, since = \"1.18.2\")\n-    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n-    {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n-    }\n-\n     /**\n      * Checks if a player or entity handles movement on this block like scaffolding.\n      *\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -640,18 +607,18 @@ public interface IForgeBlockState\n      * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n      * Return null if vanilla behavior should be disabled.\n      *\n-     * @param world The world\n-     * @param pos The block position in world\n+     * @param level The level\n+     * @param pos The block position in level\n      * @param player The player clicking the block\n      * @param stack The stack being used by the player\n-     * @param toolType The tool type to be considered when performing the action\n+     * @param toolAction The tool type to be considered when performing the action\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n+    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), world, pos, player, stack, toolType);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n+        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n     }\n \n     /**\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..b1857a5fe 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -613,8 +633,11 @@ public interface IForgeBlockState\n      * @param stack The stack being used by the player\n      * @param toolAction The tool type to be considered when performing the action\n      * @return The resulting state after the action has been performed\n+     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n      */\n     @Nullable\n+    // TODO 1.19: Remove\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n     default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n         BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex b1857a5fe..2fcf6dcf8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -622,28 +624,6 @@ public interface IForgeBlockState\n         return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), context, toolAction, simulate);\n     }\n \n-    /**\n-     * Returns the state that this block should transform into when right-clicked by a tool.\n-     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip} or {@link ToolActions#SHOVEL_FLATTEN a shovel can path}.\n-     * Returns {@code null} if nothing should happen.\n-     *\n-     * @param level The level\n-     * @param pos The block position in level\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolAction The tool type to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     * @deprecated Use {@link #getToolModifiedState(UseOnContext, ToolAction, boolean)} instead\n-     */\n-    @Nullable\n-    // TODO 1.19: Remove\n-    @Deprecated(forRemoval = true, since = \"1.18.2\")\n-    default BlockState getToolModifiedState(Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n-    {\n-        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(self(), level, pos, player, stack, toolAction);\n-        return eventState != self() ? eventState : self().getBlock().getToolModifiedState(self(), level, pos, player, stack, toolAction);\n-    }\n-\n     /**\n      * Checks if a player or entity handles movement on this block like scaffolding.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODQ5NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068494", "body": "Change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:57:09Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,9 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "15733a18e41e53961e486001b7720b36b77c20ad", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 46791f24a..424723a75 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -797,4 +798,15 @@ public interface IForgeBlockState\n         BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n         return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n+\n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(LivingEntity entity)\n+    {\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.func_233580_cy_(), entity);\n+    }\n }\n", "next_change": {"commit": "53eedb0f102bb1d8cf9432fae891730481206bce", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 424723a75..e012b6e93 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -807,6 +808,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.func_233580_cy_(), entity);\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.getPosition(), entity);\n     }\n }\n", "next_change": {"commit": "a95b968c1397a1597d4a6228d8e1abce6495570e", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex e012b6e93..f19c90a44 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -808,6 +806,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.world, entity.getPosition(), entity);\n+        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.level, entity.blockPosition(), entity);\n     }\n }\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex f19c90a44..cde9c82e3 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -806,6 +662,6 @@ public interface IForgeBlockState\n      */\n     default boolean isScaffolding(LivingEntity entity)\n     {\n-        return getBlockState().getBlock().isScaffolding(getBlockState(), entity.level, entity.blockPosition(), entity);\n+        return self().getBlock().isScaffolding(self(), entity.level, entity.blockPosition(), entity);\n     }\n }\n", "next_change": {"commit": "cd67762beeb680034d2b57c4584c5eafb4e4bead", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex cde9c82e3..8a7f7eb1f 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -664,4 +641,19 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().isScaffolding(self(), entity.level, entity.blockPosition(), entity);\n     }\n+\n+    /**\n+     * Whether redstone dust should visually connect to this block on a side.\n+     * <p>\n+     * Modded redstone wire blocks should call this function to determine visual connections.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n+     * @return True if redstone dust should visually connect on the side passed\n+     */\n+    default boolean canRedstoneConnectTo(BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    {\n+        return self().getBlock().canConnectRedstone(self(), world, pos, direction);\n+    }\n }\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 8a7f7eb1f..a5342f6a4 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -647,13 +637,13 @@ public interface IForgeBlockState\n      * <p>\n      * Modded redstone wire blocks should call this function to determine visual connections.\n      *\n-     * @param world The world\n-     * @param pos The block position in world\n+     * @param level The level\n+     * @param pos The block position in level\n      * @param direction The coming direction of the redstone dust connection (with respect to the block at pos)\n      * @return True if redstone dust should visually connect on the side passed\n      */\n-    default boolean canRedstoneConnectTo(BlockGetter world, BlockPos pos, @Nullable Direction direction)\n+    default boolean canRedstoneConnectTo(BlockGetter level, BlockPos pos, @Nullable Direction direction)\n     {\n-        return self().getBlock().canConnectRedstone(self(), world, pos, direction);\n+        return self().getBlock().canConnectRedstone(self(), level, pos, direction);\n     }\n }\n", "next_change": {"commit": "57d6f31adb5cf97028c4e3c3b3fda82d0580ecbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex a5342f6a4..30b6627a8 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -646,4 +646,31 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().canConnectRedstone(self(), level, pos, direction);\n     }\n+\n+    /**\n+     * Whether this block hides the neighbors face pointed towards by the given direction.\n+     * <p>\n+     * This method should only be used for blocks you don't control, for your own blocks override\n+     * {@link net.minecraft.world.level.block.Block#skipRendering(BlockState, BlockState, Direction)}\n+     * on the respective block instead\n+     *\n+     * @param level The world\n+     * @param pos The blocks position in the world\n+     * @param neighborState The neighboring blocks {@link BlockState}\n+     * @param dir The direction towards the neighboring block\n+     */\n+    default boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState neighborState, Direction dir)\n+    {\n+        return self().getBlock().hidesNeighborFace(level, pos, self(), neighborState, dir);\n+    }\n+\n+    /**\n+     * Whether this block allows a neighboring block to hide the face of this block it touches.\n+     * If this returns true, {@link IForgeBlockState#hidesNeighborFace(BlockGetter, BlockPos, BlockState, Direction)}\n+     * will be called on the neighboring block.\n+     */\n+    default boolean supportsExternalFaceHiding()\n+    {\n+        return self().getBlock().supportsExternalFaceHiding(self());\n+    }\n }\n", "next_change": {"commit": "2a05c7c01d593fc3ecd01c21552c5ae7698991bb", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 30b6627a8..8897c0fce 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -673,4 +687,25 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().supportsExternalFaceHiding(self());\n     }\n+\n+    /**\n+     * Returns whether the block can be hydrated by a fluid.\n+     *\n+     * <p>Hydration is an arbitrary word which depends on the block.\n+     * <ul>\n+     *     <li>A farmland has moisture</li>\n+     *     <li>A sponge can soak up the liquid</li>\n+     *     <li>A coral can live</li>\n+     * </ul>\n+     *\n+     * @param getter the getter which can get the block\n+     * @param pos the position of the block being hydrated\n+     * @param fluid the state of the fluid\n+     * @param fluidPos the position of the fluid\n+     * @return {@code true} if the block can be hydrated, {@code false} otherwise\n+     */\n+    default boolean canBeHydrated(BlockGetter getter, BlockPos pos, FluidState fluid, BlockPos fluidPos)\n+    {\n+        return self().getBlock().canBeHydrated(self(), getter, pos, fluid, fluidPos);\n+    }\n }\n", "next_change": {"commit": "f043fbbc51efa9ae4b96876b8dc1f87eacf02269", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 8897c0fce..01b218b2d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -708,4 +749,20 @@ public interface IForgeBlockState\n     {\n         return self().getBlock().canBeHydrated(self(), getter, pos, fluid, fluidPos);\n     }\n+\n+    /**\n+     * Returns the {@link BlockState} that this state reports to look like on the given side for querying by other mods.\n+     *\n+     * @param level      The level this block is in\n+     * @param pos        The block's position in the level\n+     * @param side       The side of the block that is being queried\n+     * @param queryState The state of the block that is querying the appearance, or {@code null} if not applicable\n+     * @param queryPos   The position of the block that is querying the appearance, or {@code null} if not applicable\n+     * @return The appearance of this block from the given side\n+     * @see IForgeBlock#getAppearance(BlockState, BlockAndTintGetter, BlockPos, Direction, BlockState, BlockPos)\n+     */\n+    default BlockState getAppearance(BlockAndTintGetter level, BlockPos pos, Direction side, @Nullable BlockState queryState, @Nullable BlockPos queryPos)\n+    {\n+        return self().getBlock().getAppearance(self(), level, pos, side, queryState, queryPos);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODk1MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068951", "body": "Change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:57:57Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n+    \tprivate BlockState state;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,56 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n+\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n+\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n+\t    }\n+\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"oid": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "message": "AxeStrippingMapRegistry and Example\n\nSwitched single stripping map for a stripping map registry similar to how brewing is done.\n\nImplement a system that fits into the current state of the Minecraft code.\n\nDetermine resultant state based on BlockState input and use some simple property copiers to match the data.", "committedDate": "2020-07-27T21:43:00Z", "type": "commit"}, {"oid": "a4b9b84d7f213f1c5059979411f349958abcff2d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/a4b9b84d7f213f1c5059979411f349958abcff2d", "message": "Update mods.toml", "committedDate": "2020-07-27T21:43:23Z", "type": "commit"}, {"oid": "e5ae443ea1a07a975d09ae9352198622a8c9ae2e", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e5ae443ea1a07a975d09ae9352198622a8c9ae2e", "message": "Generics fix\n\nIncorrectly ordered them such that the input could extend the output and not vice versa. Fixes this issue.", "committedDate": "2020-07-27T21:43:24Z", "type": "commit"}, {"oid": "83d614585b348ebfc12ec09f1c90e53ebd305c9d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/83d614585b348ebfc12ec09f1c90e53ebd305c9d", "message": "Fix test case", "committedDate": "2020-07-27T21:43:24Z", "type": "commit"}, {"oid": "0c9f81486f4f957b7cb4e8f66852a2b4435f451b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/0c9f81486f4f957b7cb4e8f66852a2b4435f451b", "message": "Remove Original Solution\n\nRemove stripping registry framework in place for new one", "committedDate": "2020-07-27T21:43:38Z", "type": "commit"}, {"oid": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/a5880b08911a9f6e67484e2342d2f00b0ded20e8", "message": "IForgeBlock Implementation\n\nHooks into all three tools.", "committedDate": "2020-07-27T21:43:39Z", "type": "commit"}, {"oid": "c4a1be60458009067fff7fa9ced097c52aa36756", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/c4a1be60458009067fff7fa9ced097c52aa36756", "message": "Added event hook BlockToolInteractEvent", "committedDate": "2020-07-27T21:43:39Z", "type": "commit"}, {"oid": "e5c9967874ba78aacc0af154475ad9a451263eee", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e5c9967874ba78aacc0af154475ad9a451263eee", "message": "Added Test Mod to verify event", "committedDate": "2020-07-27T21:43:57Z", "type": "commit"}, {"oid": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/83aa6ebb347772c5f2453b98565cd6b9173382cc", "message": "finalState -> state and setter/getter one line\n\nExtends BlockEvent so the other reviews are subject for review", "committedDate": "2020-07-27T21:43:58Z", "type": "commit"}, {"oid": "03258da7da7918acc457f7731f22b3f587a7efcf", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/03258da7da7918acc457f7731f22b3f587a7efcf", "message": "Added specific ToolType implementation\n\nAllows the user to specify which tooltypes to consider when using their custom tool.", "committedDate": "2020-07-27T21:43:58Z", "type": "commit"}, {"oid": "7c9621db05f97367f3571443c43458863c08367b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/7c9621db05f97367f3571443c43458863c08367b", "message": "Format Fixes and Reinventions of Static Helpers\n\nHopefully fixed all formatting errors?\n\nSet<ToolType> -> ToolType\n\nAxe, Hoe, Shovel now have static helpers\n\nUseHoeEvent now deprecated, deprecate onHoeUse?\n\nBlockToolInteractEvent needs to be either left alone to alter vanilla behavior or ported to a generic item use event somehow.", "committedDate": "2020-07-27T21:43:59Z", "type": "commit"}, {"oid": "d676a99f1034d163b194cac9f0756f9ea0289593", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/d676a99f1034d163b194cac9f0756f9ea0289593", "message": "Ternary Operator Fix\n\nUpdated ForgeEventFactory::onToolUse to include ternary operator.", "committedDate": "2020-07-27T21:44:00Z", "type": "commit"}, {"oid": "d676a99f1034d163b194cac9f0756f9ea0289593", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/d676a99f1034d163b194cac9f0756f9ea0289593", "message": "Ternary Operator Fix\n\nUpdated ForgeEventFactory::onToolUse to include ternary operator.", "committedDate": "2020-07-27T21:44:00Z", "type": "forcePushed"}, {"oid": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "message": "Merge remote-tracking branch 'upstream/1.16.x' into 1.16.x-stripping", "committedDate": "2020-07-28T17:25:43Z", "type": "commit"}, {"oid": "9441236193199acfd436dca27b5c5f34aee4fa64", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/9441236193199acfd436dca27b5c5f34aee4fa64", "message": "Update mods.toml\n\nExactly what it says to get the test mod loading.", "committedDate": "2020-07-28T17:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1ODkxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461758919", "body": "The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces", "bodyText": "The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces", "bodyHTML": "<p dir=\"auto\">The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:42:18Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +445,55 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1OTE2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461759163", "body": "Bracket should be on the next line", "bodyText": "Bracket should be on the next line", "bodyHTML": "<p dir=\"auto\">Bracket should be on the next line</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:42:42Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -359,6 +361,12 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 8eb303711..35d3b1f9d 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +365,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 35d3b1f9d..0430157d1 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +365,7 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n+\n     @Nullable\n     public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 0430157d1..cb4778fab 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -354,32 +348,32 @@ public class ForgeEventFactory\n \n     //TODO: 1.17 Remove\n     @Deprecated\n-    public static int onHoeUse(ItemUseContext context)\n+    public static int onHoeUse(UseOnContext context)\n     {\n         UseHoeEvent event = new UseHoeEvent(context);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            context.getItem().damageItem(1, context.getPlayer(), player -> player.sendBreakAnimation(context.getHand()));\n+            context.getItemInHand().hurtAndBreak(1, context.getPlayer(), player -> player.broadcastBreakEvent(context.getHand()));\n             return 1;\n         }\n         return 0;\n     }\n \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n     {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n-    public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n+    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n         BonemealEvent event = new BonemealEvent(player, world, pos, state, stack);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isRemote)\n+            if (!world.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..4f354df1f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -361,19 +359,19 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n+    public static BlockState onToolUse(BlockState originalState, Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n-        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(level, pos, originalState, player, stack, toolAction);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n-    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n+    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level level, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n-        BonemealEvent event = new BonemealEvent(player, world, pos, state, stack);\n+        BonemealEvent event = new BonemealEvent(player, level, pos, state, stack);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isClientSide)\n+            if (!level.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4f354df1f..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -379,7 +341,7 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@NotNull Player player, @NotNull Level level, @NotNull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..4f354df1f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -381,9 +379,9 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level world, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n     {\n-        FillBucketEvent event = new FillBucketEvent(player, stack, world, target);\n+        FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n \n         if (event.getResult() == Result.ALLOW)\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4f354df1f..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -379,7 +341,7 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@NotNull Player player, @NotNull Level level, @NotNull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2MDEyMA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461760120", "body": "It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.", "bodyText": "It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.", "bodyHTML": "<p dir=\"auto\">It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:44:19Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +445,55 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n+\t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n+\t\t\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": {"commit": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95a024c70..133191827 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -432,78 +402,174 @@ public class BlockEvent extends Event\n     @Cancelable\n     public static class PortalSpawnEvent extends BlockEvent\n     {\n-        private final NetherPortalBlock.Size size;\n+        private final PortalShape size;\n \n-        public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPortalBlock.Size size)\n+        public PortalSpawnEvent(LevelAccessor world, BlockPos pos, BlockState state, PortalShape size)\n         {\n             super(world, pos, state);\n             this.size = size;\n         }\n \n-        public NetherPortalBlock.Size getPortalSize()\n+        public PortalShape getPortalSize()\n         {\n             return size;\n         }\n     }\n-    \n+\n     /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * This deprecated subclass event is <i>only</i> fired when {@link #isSimulated()} is false.\n+     * To receive simulated events, use {@link BlockToolModificationEvent}.\n+     * <p>\n      * This event is {@link Cancelable}. If canceled, this will prevent the tool\n      * from changing the block's state.\n+     *\n+     * @deprecated Use {@link BlockToolModificationEvent} and put world-modifying actions behind <code>if (!event.isSimulated())</code>.\n      */\n     @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n+    @Deprecated(forRemoval = true, since = \"1.18.2\")\n+    public static class BlockToolInteractEvent extends BlockToolModificationEvent\n     {\n-\n-        private final PlayerEntity player;\n+        private final Player player;\n         private final ItemStack stack;\n-        private final ToolType toolType;\n-        private BlockState state;\n \n-        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        public BlockToolInteractEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction)\n+        {\n+            super(originalState, context, toolAction, false);\n+            this.player = context.getPlayer();\n+            this.stack = context.getItemInHand();\n+        }\n+\n+        public BlockToolInteractEvent(LevelAccessor world, BlockPos pos, BlockState originalState, Player player, ItemStack stack, ToolAction toolAction)\n         {\n-            super(world, pos, originalState);\n+            super(world, pos, originalState, toolAction);\n             this.player = player;\n             this.stack = stack;\n+        }\n+\n+        /**\n+         * @return the player using the tool, never null\n+         */\n+        @Nonnull\n+        public Player getPlayer()\n+        {\n+            return this.player;\n+        }\n+\n+        public ItemStack getHeldItemStack()\n+        {\n+            return this.stack;\n+        }\n+    }\n+\n+    /**\n+     * Fired when a block is right-clicked by a tool to change its state.\n+     * For example: Used to determine if {@link ToolActions#AXE_STRIP an axe can strip},\n+     * {@link ToolActions#SHOVEL_FLATTEN a shovel can path}, or {@link ToolActions#HOE_TILL a hoe can till}.\n+     * <p>\n+     * Care must be taken to ensure world-modifying events are only performed if {@link #isSimulated()} returns {@code true}.\n+     * <p>\n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    public static class BlockToolModificationEvent extends BlockEvent\n+    {\n+        private final UseOnContext context;\n+        private final ToolAction toolAction;\n+        private final boolean simulate;\n+        private BlockState state;\n+\n+        public BlockToolModificationEvent(BlockState originalState, @Nonnull UseOnContext context, ToolAction toolAction, boolean simulate)\n+        {\n+            super(context.getLevel(), context.getClickedPos(), originalState);\n+            this.context = context;\n             this.state = originalState;\n-            this.toolType = toolType;\n+            this.toolAction = toolAction;\n+            this.simulate = simulate;\n         }\n \n-        /**Gets the player using the tool.*/\n-        public PlayerEntity getPlayer()\n+        // TODO 1.19: Remove\n+        BlockToolModificationEvent(LevelAccessor level, BlockPos pos, BlockState originalState, ToolAction toolAction)\n         {\n-            return player;\n+            super(level, pos, originalState);\n+            this.context = null;\n+            this.state = originalState;\n+            this.toolAction = toolAction;\n+            this.simulate = false;\n+        }\n+\n+        /**\n+         * @return the player using the tool.\n+         * May be null based on what was provided by {@link #getContext() the use on context}.\n+         */\n+        @Nullable\n+        public Player getPlayer()\n+        {\n+            return this.context.getPlayer();\n         }\n \n-        /**Gets the tool being used.*/\n+        /**\n+         * @return the tool being used\n+         */\n         public ItemStack getHeldItemStack()\n         {\n-            return stack;\n-\t    }\n+            return this.context.getItemInHand();\n+        }\n+\n+        /**\n+         * @return the action being performed\n+         */\n+        public ToolAction getToolAction()\n+        {\n+            return this.toolAction;\n+        }\n+\n+        /**\n+         * Returns {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         *\n+         * @return {@code true} if this event should not perform any actions that modify the world.\n+         * If {@code false}, then world-modifying actions can be performed.\n+         */\n+        public boolean isSimulated()\n+        {\n+            return this.simulate;\n+        }\n \n-        /**Gets the current type of the tool being compared against.*/\n-        public ToolType getToolType()\n+        /**\n+         * Returns the nullable use on context that this event was performed in.\n+         * Starting in 1.19, this will never be null.\n+         *\n+         * @return the nullable use on context that this event was performed in\n+         */\n+        // TODO 1.19: Remove nullable annotation and add non-null annotation\n+        @Nullable\n+        public UseOnContext getContext()\n         {\n-            return toolType;\n+            return context;\n         }\n \n         /**\n-         * Sets the transformed state after tool use.\n-         * If not set, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n-        public void setFinalState(BlockState finalState)\n+         * Sets the state to transform the block into after tool use.\n+         *\n+         * @param finalState the state to transform the block into after tool use\n+         * @see #getFinalState()\n+         */\n+        public void setFinalState(@Nullable BlockState finalState)\n         {\n             this.state = finalState;\n         }\n \n         /**\n-         * Gets the transformed state after tool use.\n-         * If setFinalState not called, will return the original state.\n-         * This will be bypassed if canceled returning null instead.\n-         * */\n+         * Returns the state to transform the block into after tool use.\n+         * If {@link #setFinalState(BlockState)} is not called, this will return the original state.\n+         * If {@link #isCanceled()} is {@code true}, this value will be ignored and the tool action will be canceled.\n+         *\n+         * @return the state to transform the block into after tool use\n+         */\n         public BlockState getFinalState()\n         {\n             return state;\n", "next_change": null}]}}]}}, {"oid": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "message": "Statics and Formats and Restructures, Oh my!\n\nMade individual tool references public and called in IForgeBlock.\n\nMoved event call to IForgeBlockState to prevent removal.\n\nFixed a bunch of formatting errors hopefully...\n\nAdded JavaDocs for all methods in BlockToolInteractEvent.", "committedDate": "2020-07-28T19:35:49Z", "type": "commit"}, {"oid": "df0b611169de0d59770dfea53f90ae6c01397133", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/df0b611169de0d59770dfea53f90ae6c01397133", "message": "Deprecate ForgeEventFactory::onHoeUse\n\nDeprecating references of UseHoeEvent.", "committedDate": "2020-07-28T19:39:06Z", "type": "commit"}, {"oid": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/cf5eb295546d3f5ef59f699e9342b7b54728d39d", "message": "Remove useless parameters\n\nThis should've happened earlier, I forgot to...oops.\n\nAll static helpers are reduced to only the state parameter.", "committedDate": "2020-07-28T20:11:08Z", "type": "commit"}, {"oid": "2f07d5bbbb85fd57d6ded20eb5a2114693805118", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/2f07d5bbbb85fd57d6ded20eb5a2114693805118", "message": "Merge branch '1.16.x' into 1.16.x-stripping", "committedDate": "2020-08-03T23:48:41Z", "type": "commit"}]}