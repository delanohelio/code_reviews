{"pr_number": 2086, "pr_title": "[Feature] Store static code analysis configuration", "pr_author": "kloessst", "pr_createdAt": "2020-09-03T12:56:25Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2086", "merge_commit": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568561", "body": "Codacy found an issue: [The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:04Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -47,6 +52,9 @@\n @ActiveProfiles({ \"artemis\", \"bamboo\", \"bitbucket\", \"jira\", \"automaticText\", \"ldap\", \"scheduling\", \"athene\" })\n public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java b/src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java\nindex f7e4d0f35b..ea5b4f7c77 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java\n", "chunk": "@@ -50,17 +50,14 @@ import de.tum.in.www1.artemis.util.Verifiable;\n @AutoConfigureTestDatabase\n // NOTE: we use a common set of active profiles to reduce the number of application launches during testing. This significantly saves time and memory!\n @ActiveProfiles({ \"artemis\", \"bamboo\", \"bitbucket\", \"jira\", \"automaticText\", \"ldap\", \"scheduling\", \"athene\" })\n-public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest {\n-\n-    @Value(\"${server.url}\")\n-    protected String ARTEMIS_SERVER_URL;\n+public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest extends AbstractArtemisIntegrationTest {\n \n     @SpyBean\n     protected LdapUserService ldapUserService;\n \n-    // NOTE: we prefer SpyBean over MockBean, because it is more lightweight, we can mock method, but we can also invoke actual methods during testing\n+    // please only use this to verify method calls using Mockito. Do not mock methods, instead mock the communication with Bamboo using the corresponding RestTemplate.\n     @SpyBean\n-    protected LtiService ltiService;\n+    protected BitbucketBambooUpdateService continuousIntegrationUpdateService;\n \n     // please only use this to verify method calls using Mockito. Do not mock methods, instead mock the communication with Bamboo using the corresponding RestTemplate.\n     @SpyBean\n", "next_change": null}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "67dcd41fa289bf308919b73f6275da293679c914", "committedDate": "2020-10-18 21:11:21 +0200", "message": "fix flaky test and improve caching behavior of application links for concurrent operations"}, {"oid": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "committedDate": "2020-10-20 17:25:04 +0200", "message": "Improve server side git url handling and server test improvements (#2237)"}, {"oid": "bec5fb2eff514c1cf5fd55a5d9d06a13890c239c", "committedDate": "2020-10-29 10:55:34 +0100", "message": "Migrate to new Athene 2.0 (#2157)"}, {"oid": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "committedDate": "2020-10-29 21:04:54 +0100", "message": "Consistently use DTOs in Jira/Bitbucket/BambooService and improve test coverage in BitbucketService (#2247)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "75f46f9c9fdda776fabc78bcc4cc035bbffbd8a6", "committedDate": "2020-12-02 00:32:37 +0100", "message": "Import programming exercises by cloning repositories instead of forking them (#2480)"}, {"oid": "af7556a899bdad78604cfe13246718cdfb401f4a", "committedDate": "2020-12-17 14:21:15 +0100", "message": "Improve server tests and test coverage for programming exercises on Gitlab and Jenkins (#2541)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "d707cd721936372faa92073fb1e3b560d7ff9689", "committedDate": "2021-01-02 17:06:49 +0100", "message": "Add server integration tests for resume programming exercise (#2614)"}, {"oid": "cffe80054889b44b27c44682a9ae47d2e4eee69f", "committedDate": "2021-01-03 13:05:44 +0100", "message": "Add personal access token and ssh authentication against git repositories to the Artemis server (GitService: clone, pull, push, ...) (#2620)"}, {"oid": "8d3790f63acbb758c1e6c82be8777a75be379d2d", "committedDate": "2021-01-04 12:07:26 +0100", "message": "disable Hazelcast auto detection config for tests"}, {"oid": "3884ed328d4bf87428129222c0778010ac5f418d", "committedDate": "2021-01-25 22:39:35 +0100", "message": "Replace fork repository with copy Repository in version control service (#2722)"}, {"oid": "55780981c31e853e5f0c899ba00637daca87af98", "committedDate": "2021-03-15 21:18:16 +0100", "message": "Add user management capabilities and access control for Jenkins (#2959)"}, {"oid": "54601dde775f25f8c20f8acc5f867e68d65af18a", "committedDate": "2021-03-16 20:27:03 +0100", "message": "Improve server test coverage for Gitlab, Jenkins, Bamboo (#3024)"}, {"oid": "328002a8e63dbe882a027592c47c303ba64edf9c", "committedDate": "2021-03-21 18:49:07 +0100", "message": "Fix an issue with the deletion of programming exercises in case Gitlab repositories and Jenkins build plans do not exist (#3040)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "4843137aa01cfdf27ea019400c48df00df36ed45", "committedDate": "2021-04-26 11:23:38 +0200", "message": "Please avoid the use of additional SpyBeans in your server integration tests!"}, {"oid": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "committedDate": "2021-04-27 14:00:15 +0200", "message": "Improve automatic cleanup service, add configuration options batch size and waiting time for external requests (#3298)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "eade2317c0e7378b61ded68b672ded84307caee8", "committedDate": "2021-05-02 21:04:50 +0200", "message": "fix flaky test"}, {"oid": "97d9eed6fa2aba8d85ea360e95a50efa3c29344c", "committedDate": "2021-05-20 22:00:42 +0200", "message": "Add Apollon converter to create model PDFs on the server (#3062)"}, {"oid": "f7d4291d3934ce04aa12049e64be25175f0b1505", "committedDate": "2021-06-09 11:37:16 +0200", "message": "Auxiliary Repositories for Programming Exercises (#3457)"}, {"oid": "a89fe5b81b905de5d5b6c6a33cbbdcbdee2415cf", "committedDate": "2021-06-18 22:41:14 +0200", "message": "Fix an issue with URL parsing in LTI and improve tests with time mocking (#3596)"}, {"oid": "2176e2d2baf21354a96c3692437b315a9dee252b", "committedDate": "2021-06-25 16:13:24 +0200", "message": "Allow to configure the default branch directly in Artemis (#2844)"}, {"oid": "5345e67da4760a61c104aa1ee8732ac0f1d4ce78", "committedDate": "2021-07-10 00:02:00 +0200", "message": "Unlock programming exercises in exams when they are prepared shortly before the exam start (#3679)"}, {"oid": "952d9e17dcd79f773cc58614e6ff57724eb51c00", "committedDate": "2021-09-24 09:01:53 +0200", "message": "Update dependencies, update to jhipster 7.2.0, simplify build and test configuration (#4022)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "a758290e32be57cc14d37d1ebd69b00fc92981e6", "committedDate": "2022-02-15 18:25:22 +0100", "message": "Development: Improve server code quality (#4701)"}, {"oid": "a535522dcce93a5c6cd243f3c189b350fda28396", "committedDate": "2022-03-11 11:11:40 +0100", "message": "General: Forward changes to internal users to Bitbucket (#4644)"}, {"oid": "6ee62b7a7cd7540e862c6f53d14b34bf137a550b", "committedDate": "2022-03-24 20:03:46 +0100", "message": "Programming exercises: Change default branch from master to main (#4833)"}, {"oid": "1492d1a592816df1339c30ff31dcca59dab759ea", "committedDate": "2022-04-30 00:21:06 +0200", "message": "Programming exercises: Make sure to grant read permission to students when publish build plan is active (#4960)"}, {"oid": "1e93f18ff87ba1c8607ae9d9c85d9622fe1dee80", "committedDate": "2022-05-05 11:21:47 +0200", "message": "Assessment:  Fix an issue during subsequent saving of text exercise assessments (#4987)"}, {"oid": "234e74c4afc315ab7e2976825d38c17ea405a981", "committedDate": "2022-05-17 16:20:03 +0200", "message": "Development: Use isEmpty() when possible (#5090)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "8facd747908adc9db120408913db8d8800785e99", "committedDate": "2022-08-17 23:21:43 +0200", "message": "Development: Refactor server services (#5542)"}, {"oid": "d16f253951f808d9adbb5ba84f48c768b5c9994d", "committedDate": "2022-09-10 21:31:21 +0200", "message": "Programming exercises: Limit Jenkins builds to default branches (#5637)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "83c16910bf3bab39f35c6ae949895660444998ee", "committedDate": "2022-12-31 18:01:23 +0100", "message": "Development: Enforce absence of JUnit 4 (#6016)"}, {"oid": "b55c8ed14afc219285e599404b14f37e2c670382", "committedDate": "2023-01-19 23:39:09 +0100", "message": "Development: Add server tests for starting participations in programming exercises (#6111)"}, {"oid": "481127b87214d31b2d76bebaade93a9a562055f4", "committedDate": "2023-02-04 13:27:04 +0100", "message": "Development: Improve client and server tests related to grading, bonus and exam (#6142)"}, {"oid": "a29d4f79bddec50f67dd5f2c2841d1ac4e215672", "committedDate": "2023-02-19 21:50:17 +0100", "message": "Exam mode: Fix an issue when deleting exams with multiple test runs by the same instructor (#6276)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568567", "body": "Codacy found an issue: [The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:05Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..defee4396a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -108,12 +141,17 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n     @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n-        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+    void testUpdateStaticCodeAnalysisCategories(ProgrammingLanguage programmingLanguage) throws Exception {\n+        var programmingExSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories(programmingLanguage);\n+        ProgrammingExercise exerciseWithSolutionParticipation = programmingExerciseRepository\n+                .findWithTemplateAndSolutionParticipationTeamAssignmentConfigCategoriesById(programmingExSCAEnabled.getId()).get();\n+        bambooRequestMockProvider.mockTriggerBuild(exerciseWithSolutionParticipation.getSolutionParticipation());\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExSCAEnabled);\n         // Change the first category\n-        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var categoryIterator = programmingExSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n         var firstCategory = categoryIterator.next();\n         firstCategory.setState(CategoryState.GRADED);\n         firstCategory.setPenalty(33D);\n", "next_change": {"commit": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex defee4396a..e25a2fb8a4 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -149,6 +156,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         ProgrammingExercise exerciseWithSolutionParticipation = programmingExerciseRepository\n                 .findWithTemplateAndSolutionParticipationTeamAssignmentConfigCategoriesById(programmingExSCAEnabled.getId()).get();\n         bambooRequestMockProvider.mockTriggerBuild(exerciseWithSolutionParticipation.getSolutionParticipation());\n+        bambooRequestMockProvider.mockTriggerBuild(exerciseWithSolutionParticipation.getTemplateParticipation());\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExSCAEnabled);\n         // Change the first category\n         var categoryIterator = programmingExSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU3NA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568574", "body": "Codacy found an issue: [The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:06Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex c141b517de..03c12140fa 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -133,14 +135,33 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         studentTeamRepo.resetLocalRepo();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        exercise.setSequentialTestRuns(true);\n+        mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void createProgrammingExercise_validExercise_created(ExerciseMode mode) throws Exception {\n+    public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n         exercise.setMode(mode);\n         mockConnectorRequestsForSetup(exercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {\n+        exercise.setProgrammingLanguage(language);\n+        mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n \n+    private void validateProgrammingExercise(ProgrammingExercise generatedExercise) {\n         exercise.setId(generatedExercise.getId());\n         assertThat(exercise).isEqualTo(generatedExercise);\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n", "next_change": {"commit": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 03c12140fa..9e436793d5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -1,534 +1,133 @@\n package de.tum.in.www1.artemis.programmingexercise;\n \n-import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n-import static org.assertj.core.api.Assertions.assertThat;\n+import static de.tum.in.www1.artemis.util.ProgrammingExerciseTestService.studentLogin;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n-import org.eclipse.jgit.api.Git;\n-import org.eclipse.jgit.diff.DiffEntry;\n-import org.eclipse.jgit.lib.ObjectReader;\n-import org.eclipse.jgit.lib.Repository;\n-import org.eclipse.jgit.revwalk.RevCommit;\n-import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.EnumSource;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.test.context.support.WithMockUser;\n \n import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n-import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n-import de.tum.in.www1.artemis.repository.CourseRepository;\n-import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n-import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n-import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n-import de.tum.in.www1.artemis.security.SecurityUtils;\n-import de.tum.in.www1.artemis.service.ParticipationService;\n-import de.tum.in.www1.artemis.service.TeamService;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n-import de.tum.in.www1.artemis.util.*;\n-import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+import de.tum.in.www1.artemis.util.ProgrammingExerciseTestService;\n \n public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n     @Autowired\n-    private RequestUtilService request;\n-\n-    @Autowired\n-    private ProgrammingExerciseRepository programmingExerciseRepository;\n-\n-    @Autowired\n-    private TeamService teamService;\n-\n-    @Autowired\n-    private UserRepository userRepo;\n-\n-    @Autowired\n-    private CourseRepository courseRepository;\n-\n-    @Autowired\n-    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n-\n-    @Autowired\n-    private ParticipationService participationService;\n-\n-    @Autowired\n-    @Qualifier(\"staticCodeAnalysisConfiguration\")\n-    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n-\n-    private Course course;\n-\n-    private ExerciseGroup exerciseGroup;\n-\n-    private ProgrammingExercise exercise;\n-\n-    private ProgrammingExercise examExercise;\n-\n-    private final static int numberOfStudents = 2;\n-\n-    private final static String studentLogin = \"student1\";\n-\n-    private final static String teamShortName = \"team1\";\n-\n-    private final static String REPOBASEURL = \"/api/repository/\";\n-\n-    private final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n-\n-    LocalRepository exerciseRepo = new LocalRepository();\n-\n-    LocalRepository testRepo = new LocalRepository();\n-\n-    LocalRepository solutionRepo = new LocalRepository();\n-\n-    LocalRepository studentRepo = new LocalRepository();\n-\n-    LocalRepository studentTeamRepo = new LocalRepository();\n+    private ProgrammingExerciseTestService programmingExerciseTestService;\n \n     @BeforeEach\n     public void setup() throws Exception {\n-        database.addUsers(numberOfStudents, 1, 1);\n-        course = database.addEmptyCourse();\n-        exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n-        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n-        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n-        bambooRequestMockProvider.enableMockingOfRequests();\n-        bitbucketRequestMockProvider.enableMockingOfRequests();\n-\n-        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n-        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n-        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n-        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n-        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n-\n-        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n-        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n-        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+        programmingExerciseTestService.setupTestUsers(0, 0, 0);\n+        programmingExerciseTestService.setup(this, versionControlService, continuousIntegrationService);\n+        bambooRequestMockProvider.enableMockingOfRequests(true);\n+        bitbucketRequestMockProvider.enableMockingOfRequests(true);\n     }\n \n     @AfterEach\n     public void tearDown() throws IOException {\n-        database.resetDatabase();\n+        programmingExerciseTestService.tearDown();\n         bitbucketRequestMockProvider.reset();\n         bambooRequestMockProvider.reset();\n-        exerciseRepo.resetLocalRepo();\n-        testRepo.resetLocalRepo();\n-        solutionRepo.resetLocalRepo();\n-        studentRepo.resetLocalRepo();\n-        studentTeamRepo.resetLocalRepo();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n-        exercise.setSequentialTestRuns(true);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+        programmingExerciseTestService.createProgrammingExercise_sequential_validExercise_created();\n     }\n \n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n-        exercise.setMode(mode);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+        programmingExerciseTestService.createProgrammingExercise_mode_validExercise_created(mode);\n     }\n \n     @ParameterizedTest\n     @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {\n-        exercise.setProgrammingLanguage(language);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n-    }\n-\n-    private void validateProgrammingExercise(ProgrammingExercise generatedExercise) {\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExercise_programmingLanguage_validExercise_created(language);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n-        exercise.setBonusPoints(null);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n-        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n-        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_bonusPointsIsNull();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {\n-        exercise.setStaticCodeAnalysisEnabled(true);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        var staticCodeAnalysisCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(generatedExercise.getId());\n-        assertThat(staticCodeAnalysisCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .isEqualTo(staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()));\n-        staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()).forEach(config -> {\n-            config.getCategoryMappings().forEach(mapping -> {\n-                assertThat(mapping.getTool()).isNotNull();\n-                assertThat(mapping.getCategory()).isNotNull();\n-            });\n-        });\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_withStaticCodeAnalysis();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExerciseForExam_validExercise_created() throws Exception {\n-        setupRepositoryMocks(examExercise, exerciseRepo, solutionRepo, testRepo);\n-\n-        mockConnectorRequestsForSetup(examExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, examExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        examExercise.setId(generatedExercise.getId());\n-        assertThat(examExercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExerciseForExam_validExercise_created();\n     }\n \n     @ParameterizedTest\n     @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {\n-        boolean staticCodeAnalysisEnabled = programmingLanguage == ProgrammingLanguage.JAVA;\n-        // Setup exercises for import\n-        ProgrammingExercise sourceExercise = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n-        sourceExercise.setProgrammingLanguage(programmingLanguage);\n-        sourceExercise.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n-        database.addTestCasesToProgrammingExercise(sourceExercise);\n-        database.addHintsToExercise(sourceExercise);\n-        database.addHintsToProblemStatement(sourceExercise);\n-        sourceExercise = database.loadProgrammingExerciseWithEagerReferences(sourceExercise);\n-        ProgrammingExercise exerciseToBeImported = ModelFactory.generateToBeImportedProgrammingExercise(\"ImportTitle\", \"imported\", sourceExercise, database.addEmptyCourse());\n-        exerciseToBeImported.setProgrammingLanguage(programmingLanguage);\n-        exerciseToBeImported.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n-        // Mock requests\n-        List<Verifiable> verifiables = mockConnectorRequestsForImport(sourceExercise, exerciseToBeImported);\n-        setupRepositoryMocks(exerciseToBeImported, exerciseRepo, solutionRepo, testRepo);\n-\n-        // Import the exercise and load all referenced entities\n-        var importedExercise = request.postWithResponseBody(ROOT + IMPORT.replace(\"{sourceExerciseId}\", sourceExercise.getId().toString()), exerciseToBeImported,\n-                ProgrammingExercise.class, HttpStatus.OK);\n-        SecurityUtils.setAuthorizationObject();\n-        importedExercise = database.loadProgrammingExerciseWithEagerReferences(importedExercise);\n-\n-        // Assert correct creation of repos and plans\n-        for (var verifiable : verifiables) {\n-            verifiable.performVerification();\n-        }\n-        if (staticCodeAnalysisEnabled) {\n-            // Assert correct creation of static code analysis categories\n-            var importedCategoryIds = importedExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-            var sourceCategoryIds = sourceExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-            assertThat(importedCategoryIds).doesNotContainAnyElementsOf(sourceCategoryIds);\n-            assertThat(importedExercise.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                    .containsExactlyInAnyOrderElementsOf(sourceExercise.getStaticCodeAnalysisCategories());\n-        }\n-\n-        // Assert correct creation of test cases\n-        var importedTestCaseIds = importedExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        var sourceTestCaseIds = sourceExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        assertThat(importedTestCaseIds).doesNotContainAnyElementsOf(sourceTestCaseIds);\n-        assertThat(importedExercise.getTestCases()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getTestCases());\n-\n-        // Assert correct creation of hints\n-        var importedHintIds = importedExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        var sourceHintIds = sourceExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        assertThat(importedHintIds).doesNotContainAnyElementsOf(sourceHintIds);\n-        assertThat(importedExercise.getExerciseHints()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getExerciseHints());\n+        programmingExerciseTestService.importExercise_created(programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_structureOracle() throws Exception {\n-        structureOracle(exercise);\n-    }\n-\n-    private void structureOracle(ProgrammingExercise programmingExercise) throws Exception {\n-        mockConnectorRequestsForSetup(programmingExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, programmingExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-        String response = request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", String.valueOf(generatedExercise.getId())), generatedExercise, String.class,\n-                HttpStatus.OK);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n-\n-        List<RevCommit> testRepoCommits = testRepo.getAllLocalCommits();\n-        assertThat(testRepoCommits.size()).isEqualTo(2);\n-\n-        assertThat(testRepoCommits.get(0).getFullMessage()).isEqualTo(\"Update the structure oracle file.\");\n-        List<DiffEntry> changes = getChanges(testRepo.localGit.getRepository(), testRepoCommits.get(0));\n-        assertThat(changes.size()).isEqualTo(1);\n-        assertThat(changes.get(0).getChangeType()).isEqualTo(DiffEntry.ChangeType.MODIFY);\n-        assertThat(changes.get(0).getOldPath()).endsWith(\"test.json\");\n-\n-        // Second time leads to a bad request because the file did not change\n-        var expectedHeaders = new HashMap<String, String>();\n-        expectedHeaders.put(\"X-artemisApp-alert\", \"Did not update the oracle because there have not been any changes to it.\");\n-        request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", String.valueOf(generatedExercise.getId())), generatedExercise, String.class,\n-                HttpStatus.BAD_REQUEST, expectedHeaders);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_structureOracle();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_noTutors_created() throws Exception {\n-        course.setTeachingAssistantGroupName(null);\n-        courseRepository.save(course);\n-        mockConnectorRequestsForSetup(exercise);\n-\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        validateProgrammingExercise(generatedExercise);\n+        programmingExerciseTestService.createProgrammingExercise_noTutors_created();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_student_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-        final var path = ParticipationResource.Endpoints.ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId()))\n-                .replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n+        programmingExerciseTestService.startProgrammingExercise_student_correctInitializationState();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_team_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // create a team for the user (necessary condition before starting an exercise)\n-        Set<User> students = Set.of(userRepo.findOneByLogin(studentLogin).get());\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n-\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-        final var path = ParticipationResource.Endpoints.ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId()))\n-                .replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-    }\n-\n-    private Course getCourseForExercise() {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-        return course;\n-    }\n-\n-    private ProgrammingExerciseStudentParticipation createUserParticipation(Course course) throws Exception {\n-        final var path = ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId())).replace(\"{exerciseId}\",\n-                String.valueOf(exercise.getId()));\n-        return request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n+        programmingExerciseTestService.startProgrammingExercise_team_correctInitializationState();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExerciseStudentSubmissionFailedWithBuildlog() throws Exception {\n-        final var course = getCourseForExercise();\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-        final var participation = createUserParticipation(course);\n-\n-        // create a submission which fails\n-        database.createProgrammingSubmission(participation, true);\n-\n-        bambooRequestMockProvider.reset();\n-\n-        var log1 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"java.lang.AssertionError: BubbleSort does not sort correctly\");\n-        var log2 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Test\");\n-        var log3 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[WARNING]\");\n-        var log4 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] [Help 1]\");\n-        var log5 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] To see the full stack trace of the errors\\\"\");\n-        var log6 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"Unable to publish artifact\");\n-        var log7 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"NOTE: Picked up JDK_JAVA_OPTIONS\");\n-        var log8 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin\");\n-        var log9 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Downloading error\");\n-        var log10 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Downloaded error\");\n-\n-        // get the failed build log\n-        bambooRequestMockProvider.mockGetBuildLogs(participation.getBuildPlanId(), List.of(log1, log2, log3, log4, log5, log6, log7, log8, log9, log10));\n-        var buildLogs = request.get(REPOBASEURL + participation.getId() + \"/buildlogs\", HttpStatus.OK, List.class);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-        // some build logs have been filtered out\n-        assertThat(buildLogs.size()).as(\"Failed build log was created\").isEqualTo(1);\n+        programmingExerciseTestService.startProgrammingExerciseStudentSubmissionFailedWithBuildlog();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExerciseStudentRetrieveEmptyArtifactPage() throws Exception {\n-        final var course = getCourseForExercise();\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-\n-        final var participation = createUserParticipation(course);\n-\n-        // create a submission\n-        database.createProgrammingSubmission(participation, false);\n-\n-        bambooRequestMockProvider.reset();\n-\n-        // prepare the build result\n-        bambooRequestMockProvider.mockQueryLatestBuildResultFromBambooServer(participation.getBuildPlanId());\n-        // prepare the artifact to be null\n-        bambooRequestMockProvider.mockRetrieveEmptyArtifactPage();\n-\n-        var artifact = request.get(PARTICIPATIONBASEURL + participation.getId() + \"/buildArtifact\", HttpStatus.OK, byte[].class);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-        assertThat(artifact).as(\"No build artifact available for this plan\").isEmpty();\n+        programmingExerciseTestService.startProgrammingExerciseStudentRetrieveEmptyArtifactPage();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsAdded_whenStudentIsAddedToTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Add a new student to the team\n-        User newStudent = ModelFactory.generateActivatedUsers(\"new-student\", new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n-        newStudent = userRepo.save(newStudent);\n-        team.addStudents(newStudent);\n-\n-        // Mock repository write permission give call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockGiveWritePermission(exercise, repositorySlug, newStudent.getLogin());\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with new student after participation has already started\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents + 1); // new student was added\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsAdded_whenStudentIsAddedToTeam();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Remove the first student from the team\n-        User firstStudent = students.iterator().next();\n-        team.removeStudents(firstStudent);\n-\n-        // Mock repository access removal call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockRemoveMemberFromRepository(repositorySlug, exercise.getProjectKey(), firstStudent);\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with removed student\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents - 1); // first student was removed\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n-    public List<DiffEntry> getChanges(Repository repository, RevCommit commit) throws Exception {\n-\n-        try (ObjectReader reader = repository.newObjectReader()) {\n-            CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();\n-            oldTreeIter.reset(reader, commit.getParents()[0].getTree());\n-            CanonicalTreeParser newTreeIter = new CanonicalTreeParser();\n-            newTreeIter.reset(reader, commit.getTree());\n-\n-            // finally get the list of changed files\n-            try (Git git = new Git(repository)) {\n-                List<DiffEntry> diffs = git.diff().setNewTree(newTreeIter).setOldTree(oldTreeIter).call();\n-                for (DiffEntry entry : diffs) {\n-                    System.out.println(\"Entry: \" + entry);\n-                }\n-                return diffs;\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 9e436793d5..1a59d00f1c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -130,4 +132,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToIndividual() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_individual_modeChange();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n+    }\n+\n }\n", "next_change": {"commit": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 1a59d00f1c..e3f24753d3 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -144,4 +149,34 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    }\n+\n }\n", "next_change": {"commit": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex e3f24753d3..2c9a27011c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -157,26 +234,31 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testInternalServerError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    public void copyRepository_testNotCreatedError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testNotCreatedError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testConflictError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testConflictError();\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void configureRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    public void exportInstructorRepositories() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void exportInstructorRepositories_forbidden() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_forbidden();\n+    }\n }\n", "next_change": {"commit": "d20e93b929bb5181b2457029b19a9751a8a2c660", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 2c9a27011c..dbe9ab1690 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -261,4 +261,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+        programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n+    }\n }\n", "next_change": {"commit": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex dbe9ab1690..adbafa8f20 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -267,4 +279,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+        programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n+    }\n }\n", "next_change": {"commit": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex adbafa8f20..402a3f96e0 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -285,4 +284,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+        programmingExerciseTestService.automaticCleanupBuildPlans();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanupGitRepositories() {\n+        programmingExerciseTestService.automaticCleanupGitRepositories();\n+    }\n }\n", "next_change": {"commit": "3d351b700a6026d776b94881310e3fb2c26dcad2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 402a3f96e0..b7a6a3bf6b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -296,4 +376,29 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+        programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n+    }\n+\n }\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex b7a6a3bf6b..137c3c3b54 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -299,105 +310,117 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories() throws Exception {\n+    void exportInstructorRepositories() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories_forbidden() throws Exception {\n+    void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterial() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterial() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+    void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n         doThrow(IOException.class).when(zipFileService).createZipFile(any(Path.class), any(), eq(false));\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n         doThrow(GitException.class).when(fileService).getUniquePathString(anyString());\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationInterruptException() throws Exception {\n-        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationInterruptException();\n+    void testExportCourseCannotExportSingleParticipationCanceledException() throws Exception {\n+        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationCanceledException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n+    void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitApiException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotSingleParticipationGitException() throws Exception {\n+    void testExportCourseCannotSingleParticipationGitException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+    void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+    void testAutomaticCleanUpBuildPlans() throws Exception {\n         programmingExerciseTestService.automaticCleanupBuildPlans();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanupGitRepositories() {\n+    void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+    void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n+    }\n+\n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+    void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n", "next_change": {"commit": "593283a9b50a476824af052f7e3aae139262c297", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 137c3c3b54..8367aaac9b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -424,4 +424,22 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    void testBuildLogStatistics_unauthorized() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_unauthorized();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics_noStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_noStatistics();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics();\n+    }\n+\n }\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 8367aaac9b..3cce636459 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -389,57 +378,63 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, TEST_PREFIX + \"student1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, TEST_PREFIX + \"instructor1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testBuildLogStatistics_unauthorized() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_unauthorized();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics_noStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_noStatistics();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics();\n     }\n \n+    private void mockUsers(int amount, String name) throws URISyntaxException {\n+        for (int i = 1; i <= amount; i++) {\n+            bitbucketRequestMockProvider.mockUserExists(TEST_PREFIX + name + i);\n+        }\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "1a170878e8035a043b61ef473ee558af541f3d8a", "committedDate": "2020-10-06 11:45:07 +0200", "message": "Replace Adding Empty Strings by String.valueOf (#2161)"}, {"oid": "72a79dfcaa482c992ac7b05e232ef62ce933f0d3", "committedDate": "2020-10-11 15:51:13 +0200", "message": "Improve test coverage BambooService (#2187)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "67dcd41fa289bf308919b73f6275da293679c914", "committedDate": "2020-10-18 21:11:21 +0200", "message": "fix flaky test and improve caching behavior of application links for concurrent operations"}, {"oid": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "committedDate": "2020-10-20 17:25:04 +0200", "message": "Improve server side git url handling and server test improvements (#2237)"}, {"oid": "908c3e88910aa014ee7565bd95ea71536593bd5f", "committedDate": "2020-10-23 13:33:11 +0200", "message": "add Swift as programming language enum to prevent problems when testing #2191"}, {"oid": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "committedDate": "2020-10-27 22:54:21 +0100", "message": "Change team mode on exercise import. (#2268)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "committedDate": "2020-10-29 21:04:54 +0100", "message": "Consistently use DTOs in Jira/Bitbucket/BambooService and improve test coverage in BitbucketService (#2247)"}, {"oid": "d8027bf77bb83ee2ca1275af81b291616f18f1c0", "committedDate": "2020-11-10 08:43:00 +0100", "message": "Add template for Swift programming exercises (#2326)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "d707cd721936372faa92073fb1e3b560d7ff9689", "committedDate": "2021-01-02 17:06:49 +0100", "message": "Add server integration tests for resume programming exercise (#2614)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "3884ed328d4bf87428129222c0778010ac5f418d", "committedDate": "2021-01-25 22:39:35 +0100", "message": "Replace fork repository with copy Repository in version control service (#2722)"}, {"oid": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "committedDate": "2021-01-28 15:14:44 +0100", "message": "add clone & download repo button in programming details view  (#2729)"}, {"oid": "d20e93b929bb5181b2457029b19a9751a8a2c660", "committedDate": "2021-02-10 14:01:58 +0100", "message": "Add options to archive and cleanup a course (#2813)"}, {"oid": "54601dde775f25f8c20f8acc5f867e68d65af18a", "committedDate": "2021-03-16 20:27:03 +0100", "message": "Improve server test coverage for Gitlab, Jenkins, Bamboo (#3024)"}, {"oid": "fceeaef9fa01fe6daa9a2b221597634d2d2f9f2a", "committedDate": "2021-03-26 18:13:24 +0100", "message": "Reduce server service dependencies (#3079)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "committedDate": "2021-04-09 19:30:21 +0200", "message": "Improve download archive server tests (#3127)"}, {"oid": "68254adc6d02c035fa47f931855012a722df727c", "committedDate": "2021-04-19 12:43:44 +0200", "message": "Add Kotlin pipeline to Jenkins & Sequential Test Run support (#3189)"}, {"oid": "4843137aa01cfdf27ea019400c48df00df36ed45", "committedDate": "2021-04-26 11:23:38 +0200", "message": "Please avoid the use of additional SpyBeans in your server integration tests!"}, {"oid": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "committedDate": "2021-04-27 14:00:15 +0200", "message": "Improve automatic cleanup service, add configuration options batch size and waiting time for external requests (#3298)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "7e0bf653a47ce25a2df0e200590e021d235cc511", "committedDate": "2021-05-14 15:07:16 +0200", "message": "Allow instructors to export programming exercises (repos, problem statement, details) (#3273)"}, {"oid": "f7d4291d3934ce04aa12049e64be25175f0b1505", "committedDate": "2021-06-09 11:37:16 +0200", "message": "Auxiliary Repositories for Programming Exercises (#3457)"}, {"oid": "014643092dc0a504f4602beff6847b8eed0fd156", "committedDate": "2021-06-11 08:40:26 +0200", "message": "Fix course archival issues (#3549)"}, {"oid": "2176e2d2baf21354a96c3692437b315a9dee252b", "committedDate": "2021-06-25 16:13:24 +0200", "message": "Allow to configure the default branch directly in Artemis (#2844)"}, {"oid": "8863908136239c7570bcfa34e254737ad8ffdf9b", "committedDate": "2021-07-27 10:14:09 +0200", "message": "Improve server test coverage for programming exercise services (#3831)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "7ad5853f5715ebe6a0c997da9890babf140da873", "committedDate": "2021-11-22 14:28:35 +0100", "message": "Exam mode: Reject exam exercises with date attributes set (#3926)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "f8d07e2175a6587d7d242404bb218fe775226097", "committedDate": "2022-01-05 09:13:11 +0100", "message": "Development: Remove outdated client dependencies (#4571)"}, {"oid": "a535522dcce93a5c6cd243f3c189b350fda28396", "committedDate": "2022-03-11 11:11:40 +0100", "message": "General: Forward changes to internal users to Bitbucket (#4644)"}, {"oid": "6ee62b7a7cd7540e862c6f53d14b34bf137a550b", "committedDate": "2022-03-24 20:03:46 +0100", "message": "Programming exercises: Change default branch from master to main (#4833)"}, {"oid": "3d351b700a6026d776b94881310e3fb2c26dcad2", "committedDate": "2022-04-14 18:09:17 +0200", "message": "Programming exercises: Allow to publish example solutions for programming exercises on a specific date (#4795)"}, {"oid": "72dc554091906333e3bf81843edcd69fa0e1c8b3", "committedDate": "2022-04-14 23:40:34 +0200", "message": "Development: Refactor Git service (#4837)"}, {"oid": "f3d56f363e27262b8c4013d068f44ed3c82071c7", "committedDate": "2022-05-26 18:50:53 -0400", "message": "Development: Validate example solution publication date (#4983)"}, {"oid": "a7c414b09dc7721d8ec859a6e28b90b4876faf81", "committedDate": "2022-06-23 14:22:12 +0200", "message": "Programming exercises: Fix an issue with excess submissions with Gitlab (#5258)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "593283a9b50a476824af052f7e3aae139262c297", "committedDate": "2022-09-23 10:25:28 +0200", "message": "Programming exercises: Add build log analytics (#5337)"}, {"oid": "fa2f71d8d5da908f447f6064941d734279dae43b", "committedDate": "2022-12-02 14:49:51 +0100", "message": "Programming exercises: Allow students to download tests after due date (#5762)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "598249d89dc3b4c6ac0f76cf63c0c3ae9b285115", "committedDate": "2023-01-05 11:40:40 +0100", "message": "Exam mode: Allow instructors to publish example solutions for exam exercises (#5831)"}, {"oid": "cc924340826eee8bae263c4c3a763724e9b94d77", "committedDate": "2023-01-21 21:31:32 +0100", "message": "Programming exercises: Always give students read permissions for their repository (#5901)"}, {"oid": "a29d4f79bddec50f67dd5f2c2841d1ac4e215672", "committedDate": "2023-02-19 21:50:17 +0100", "message": "Exam mode: Fix an issue when deleting exams with multiple test runs by the same instructor (#6276)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4MA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568580", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:07Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..defee4396a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -122,19 +160,19 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         var removedCategory = categoryIterator.next();\n         categoryIterator.remove();\n \n-        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExSCAEnabled.getStaticCodeAnalysisCategories(),\n                 new TypeReference<List<StaticCodeAnalysisCategory>>() {\n                 }, HttpStatus.OK);\n-        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExSCAEnabled.getId());\n \n         // The removed category should not be deleted\n-        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        programmingExSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n         assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n                 .containsExactlyInAnyOrderElementsOf(savedCategories);\n         assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+                .containsExactlyInAnyOrderElementsOf(programmingExSCAEnabled.getStaticCodeAnalysisCategories());\n         assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+                .containsExactlyInAnyOrderElementsOf(programmingExSCAEnabled.getStaticCodeAnalysisCategories());\n     }\n \n     @Test\n", "next_change": {"commit": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex defee4396a..cabc73ad57 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -175,6 +182,52 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n                 .containsExactlyInAnyOrderElementsOf(programmingExSCAEnabled.getStaticCodeAnalysisCategories());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testResetCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, programmingExercise);\n+        request.patch(endpoint, \"{}\", HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-instructor1\", roles = \"INSTRUCTOR\")\n+    public void testResetCategories_instructorInWrongCourse_forbidden() throws Exception {\n+        database.addInstructor(\"other-instructors\", \"other-instructor\");\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, \"{}\", HttpStatus.FORBIDDEN);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testResetCategories(ProgrammingLanguage programmingLanguage) throws Exception {\n+        // Create a programming exercise with real categories\n+        var course = database.addCourseWithOneProgrammingExercise(true, programmingLanguage);\n+        ProgrammingExercise exercise = programmingExerciseRepository\n+                .findWithTemplateAndSolutionParticipationTeamAssignmentConfigCategoriesById(course.getExercises().iterator().next().getId()).get();\n+        bambooRequestMockProvider.mockTriggerBuild(exercise.getSolutionParticipation());\n+        staticCodeAnalysisService.createDefaultCategories(exercise);\n+        var originalCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId());\n+\n+        // Alter the categories\n+        var alteredCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId()).stream().peek(category -> {\n+            category.setPenalty(5D);\n+            category.setMaxPenalty(15D);\n+            category.setState(CategoryState.GRADED);\n+        }).collect(Collectors.toList());\n+        staticCodeAnalysisCategoryRepository.saveAll(alteredCategories);\n+\n+        // Perform the request and assert that the original state was restored\n+        final var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, exercise);\n+        final var categoriesResponse = request.patchWithResponseBody(endpoint, \"{}\", new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        }, HttpStatus.OK);\n+        final var categoriesInDB = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId());\n+\n+        assertThat(categoriesResponse).usingElementComparatorIgnoringFields(\"exercise\").containsExactlyInAnyOrderElementsOf(categoriesInDB);\n+        assertThat(categoriesInDB).usingElementComparatorIgnoringFields(\"exercise\").containsExactlyInAnyOrderElementsOf(originalCategories);\n+        assertThat(categoriesInDB).usingElementComparatorIgnoringFields(\"id\", \"exercise\").isEqualTo(staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()));\n+    }\n+\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n", "next_change": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex cabc73ad57..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -229,7 +221,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -221,29 +221,29 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568586", "body": "Codacy found an issue: [Avoid unnecessary constructors - the compiler will generate these for you](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: Avoid unnecessary constructors - the compiler will generate these for you", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">Avoid unnecessary constructors - the compiler will generate these for you</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:08Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex f9fb2899ef..2a00ee67cb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,7 +30,7 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava());\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n         log.debug(\"Initialized default static code analysis categories for JAVA\");\n     }\n \n", "next_change": {"commit": "e106619e18b6105cfacdd4de7b7369b62d807897", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex 2a00ee67cb..49e0f93e07 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,8 +30,10 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n-        log.debug(\"Initialized default static code analysis categories for JAVA\");\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift(),\n+                ProgrammingLanguage.C, createDefaultCategoriesForC());\n+\n+        log.debug(\"Initialized default static code analysis categories for: {}\", languageToDefaultCategories.keySet());\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "07f908c138467189727b476009e52a247517307a", "committedDate": "2020-11-06 00:19:08 +0100", "message": "Support for static code analysis copy and paste detection using PMD (#2292)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "c11d2a2093bebe4ff6c73e9479433c2858d4702e", "committedDate": "2021-06-30 21:44:47 +0200", "message": "Add static analysis tools to misc category (#3629)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568589", "body": "Codacy found an issue: [Document empty constructor](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: Document empty constructor", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">Document empty constructor</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:09Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex f9fb2899ef..2a00ee67cb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,7 +30,7 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava());\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n         log.debug(\"Initialized default static code analysis categories for JAVA\");\n     }\n \n", "next_change": {"commit": "e106619e18b6105cfacdd4de7b7369b62d807897", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex 2a00ee67cb..49e0f93e07 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,8 +30,10 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n-        log.debug(\"Initialized default static code analysis categories for JAVA\");\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift(),\n+                ProgrammingLanguage.C, createDefaultCategoriesForC());\n+\n+        log.debug(\"Initialized default static code analysis categories for: {}\", languageToDefaultCategories.keySet());\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "07f908c138467189727b476009e52a247517307a", "committedDate": "2020-11-06 00:19:08 +0100", "message": "Support for static code analysis copy and paste detection using PMD (#2292)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "c11d2a2093bebe4ff6c73e9479433c2858d4702e", "committedDate": "2021-06-30 21:44:47 +0200", "message": "Add static analysis tools to misc category (#3629)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568592", "body": "Codacy found an issue: [The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:10Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..bb68cf405b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -51,16 +65,18 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n \n     @BeforeEach\n     void initTestCase() {\n-        database.addUsers(1, 1, 1);\n+        database.addUsers(2, 1, 1);\n         programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n         var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n                 programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n         programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+        bambooRequestMockProvider.enableMockingOfRequests();\n     }\n \n     @AfterEach\n     void tearDown() {\n         database.resetDatabase();\n+        bambooRequestMockProvider.reset();\n     }\n \n     private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex bb68cf405b..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -75,7 +66,6 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n \n     @AfterEach\n     void tearDown() {\n-        database.resetDatabase();\n         bambooRequestMockProvider.reset();\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568596", "body": "Codacy found an issue: [The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:11Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -64,25 +50,27 @@\n     public void setUp() {\n         bambooRequestMockProvider.enableMockingOfRequests();\n         bitbucketRequestMockProvider.enableMockingOfRequests();\n-        databse.addUsers(1, 1, 1);\n-        databse.addInstructor(\"other-instructors\", \"instructorother\");\n-        databse.addCourseWithOneProgrammingExerciseAndTestCases();\n-        additionalEmptyCourse = databse.addEmptyCourse();\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n-        databse.addHintsToExercise(programmingExercise);\n-        databse.addHintsToProblemStatement(programmingExercise);\n+        database.addUsers(1, 1, 1);\n+        database.addInstructor(\"other-instructors\", \"instructorother\");\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        additionalEmptyCourse = database.addEmptyCourse();\n+        programmingExercise = programmingExerciseRepository.findAll().get(0);\n+        database.addHintsToExercise(programmingExercise);\n+        database.addHintsToProblemStatement(programmingExercise);\n+        database.addStaticCodeAnalysisCategoriesToProgrammingExercise(programmingExercise);\n \n         // Load again to fetch changes to statement and hints while keeping eager refs\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n+        programmingExercise = database.loadProgrammingExerciseWithEagerReferences(programmingExercise);\n     }\n \n     @AfterEach\n     public void tearDown() {\n-        databse.resetDatabase();\n+        database.resetDatabase();\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_baseReferencesGotCloned() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0c10366da34de281385b85e46c5481be61594d93", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 59a9d31c64..8458cb4c7e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -74,7 +66,7 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n         final var newlyImported = importExerciseBase();\n \n         assertThat(newlyImported.getId()).isNotEqualTo(programmingExercise.getId());\n-        assertThat(newlyImported != programmingExercise).isTrue();\n+        assertThat(newlyImported).isNotSameAs(programmingExercise);\n         assertThat(newlyImported.getTemplateParticipation().getId()).isNotEqualTo(programmingExercise.getTemplateParticipation().getId());\n         assertThat(newlyImported.getSolutionParticipation().getId()).isNotEqualTo(programmingExercise.getSolutionParticipation().getId());\n         assertThat(newlyImported.getProgrammingLanguage()).isEqualTo(programmingExercise.getProgrammingLanguage());\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 8458cb4c7e..d9e6414224 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -56,13 +65,13 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n     }\n \n     @AfterEach\n-    public void tearDown() {\n+    void tearDown() {\n         database.resetDatabase();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseBasis_baseReferencesGotCloned() {\n+    void importProgrammingExerciseBasis_baseReferencesGotCloned() {\n         final var newlyImported = importExerciseBase();\n \n         assertThat(newlyImported.getId()).isNotEqualTo(programmingExercise.getId());\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex d9e6414224..b8321ea973 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -64,13 +72,8 @@ class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringIntegratio\n         programmingExercise = database.loadProgrammingExerciseWithEagerReferences(programmingExercise);\n     }\n \n-    @AfterEach\n-    void tearDown() {\n-        database.resetDatabase();\n-    }\n-\n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void importProgrammingExerciseBasis_baseReferencesGotCloned() {\n         final var newlyImported = importExerciseBase();\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "02e93e4eed509fd7fdcac3918f7f88e77adfdf60", "committedDate": "2020-12-31 15:39:39 +0100", "message": "Prepare 2nd correction in exams: database + client views (#2594)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "8620b9151ae67f3264b9babe8e53cee622c72aab", "committedDate": "2021-03-16 20:11:46 +0100", "message": "Show an error message to instructors in case duplicated tests occur in programming exercises (#3009)"}, {"oid": "0f9ff0b92baccc06a9094841ce676195e45d704d", "committedDate": "2021-03-28 19:13:19 +0200", "message": "Improve code quality (#3087)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "2d0fc6013fac9001f2bc2d4aebd1fb789dcf8896", "committedDate": "2021-06-03 08:18:38 +0200", "message": "[Refactoring] Q&A to Metis Refactoring (#3490)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "6a6bccf6dd568fd3edd31581105c519f294aafd8", "committedDate": "2022-01-08 16:44:43 +0100", "message": "Development: Split ProgrammingExerciseResource into multiple resources"}, {"oid": "b01799aa9ac5cf87ac6fa592e30443164b0e6e0d", "committedDate": "2022-02-25 12:43:06 +0100", "message": "Programming exercises: Add general structure for code hints (#4642)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "2435446716408f7841a51de80d448a21e4562317", "committedDate": "2022-04-22 11:14:51 +0200", "message": "Lectures: Allow instructors to import existing lectures into courses (#4931)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "78447e46c350ee3cd04caa7773ee8bc849f8da10", "committedDate": "2022-05-17 18:24:25 +0200", "message": "Programming exercises: Generate code hints from solution entries (#4976)"}, {"oid": "5d972b619bd2160bb7c9ac0726a3399ef21e15d5", "committedDate": "2022-06-05 00:01:21 +0200", "message": "Programming exercises: Display code hints dynamically (#5136)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "7452a5dd5896cd3afdf5289685b259042ec195c3", "committedDate": "2022-08-03 15:41:40 +0200", "message": "General: Allow to search by id in exercise and exam import dialog (#5484)"}, {"oid": "c8aa9a065b38b41844c26f410784af6288b7b57d", "committedDate": "2022-08-03 17:20:30 +0200", "message": "General: Allow to restrict exercise import search to courses / exercises (#5491)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568600", "body": "Codacy found an issue: [The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:12Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..0a92778bda 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -84,6 +84,10 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         });\n         assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n                 .containsExactlyInAnyOrderElementsOf(categories);\n+        // also test toString method\n+        categories.forEach(category -> {\n+            System.out.println(category.toString());\n+        });\n     }\n \n     @Test\n", "next_change": {"commit": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 0a92778bda..8e6c20d1c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -84,10 +84,6 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         });\n         assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n                 .containsExactlyInAnyOrderElementsOf(categories);\n-        // also test toString method\n-        categories.forEach(category -> {\n-            System.out.println(category.toString());\n-        });\n     }\n \n     @Test\n", "next_change": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..defee4396a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -86,6 +99,26 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n                 .containsExactlyInAnyOrderElementsOf(categories);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testCreateDefaultCategories(ProgrammingLanguage programmingLanguage) {\n+        var testExercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember(), programmingLanguage);\n+        testExercise = programmingExerciseRepository.save(testExercise);\n+        staticCodeAnalysisService.createDefaultCategories(testExercise);\n+        // Swift has only one default category at the time of creation of this test\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(testExercise.getId());\n+        if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n+            assertThat(categories.size()).isEqualTo(6);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(1);\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n+            assertThat(categories.size()).isEqualTo(11);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(7);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n     void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n", "next_change": {"commit": "e106619e18b6105cfacdd4de7b7369b62d807897", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex defee4396a..3f7e446678 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -117,6 +110,10 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n             assertThat(categories.size()).isEqualTo(11);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(7);\n         }\n+        else if (programmingLanguage == ProgrammingLanguage.C) {\n+            assertThat(categories.size()).isEqualTo(5);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(4);\n+        }\n     }\n \n     @Test\n", "next_change": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 3f7e446678..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -117,7 +117,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n     void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -103,36 +103,36 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         // Swift has only one default category at the time of creation of this test\n         var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(testExercise.getId());\n         if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n-            assertThat(categories.size()).isEqualTo(6);\n+            assertThat(categories).hasSize(6);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(1);\n         }\n         else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n-            assertThat(categories.size()).isEqualTo(11);\n+            assertThat(categories).hasSize(11);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(7);\n         }\n         else if (programmingLanguage == ProgrammingLanguage.C) {\n-            assertThat(categories.size()).isEqualTo(5);\n+            assertThat(categories).hasSize(5);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(4);\n         }\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568611", "body": "Codacy found an issue: [The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:13Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -86,8 +92,32 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n                 .containsExactlyInAnyOrderElementsOf(categories);\n     }\n \n+    @ParameterizedTest(name = \"{displayName} [{index}] {argumentsWithNames}\")\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\", \"C\" })\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testCreateDefaultCategories(ProgrammingLanguage programmingLanguage) {\n+        var testExercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember(), programmingLanguage);\n+        testExercise = programmingExerciseRepository.save(testExercise);\n+        staticCodeAnalysisService.createDefaultCategories(testExercise);\n+        // Swift has only one default category at the time of creation of this test\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(testExercise.getId());\n+        if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n+            assertThat(categories.size()).isEqualTo(6);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(1);\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n+            assertThat(categories.size()).isEqualTo(11);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(7);\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.C) {\n+            assertThat(categories.size()).isEqualTo(5);\n+            assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(4);\n+        }\n+    }\n+\n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n     void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -103,36 +103,36 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         // Swift has only one default category at the time of creation of this test\n         var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(testExercise.getId());\n         if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n-            assertThat(categories.size()).isEqualTo(6);\n+            assertThat(categories).hasSize(6);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(1);\n         }\n         else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n-            assertThat(categories.size()).isEqualTo(11);\n+            assertThat(categories).hasSize(11);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(7);\n         }\n         else if (programmingLanguage == ProgrammingLanguage.C) {\n-            assertThat(categories.size()).isEqualTo(5);\n+            assertThat(categories).hasSize(5);\n             assertThat(categories.stream().filter(c -> c.getState() == CategoryState.FEEDBACK).count()).isEqualTo(4);\n         }\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568619", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:14Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -178,7 +261,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -261,7 +261,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568622", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:15Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -122,23 +158,70 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n         var removedCategory = categoryIterator.next();\n         categoryIterator.remove();\n \n-        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExSCAEnabled.getStaticCodeAnalysisCategories(),\n                 new TypeReference<List<StaticCodeAnalysisCategory>>() {\n                 }, HttpStatus.OK);\n-        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExSCAEnabled.getId());\n \n         // The removed category should not be deleted\n-        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        programmingExSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n         assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n                 .containsExactlyInAnyOrderElementsOf(savedCategories);\n         assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+                .containsExactlyInAnyOrderElementsOf(programmingExSCAEnabled.getStaticCodeAnalysisCategories());\n         assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+                .containsExactlyInAnyOrderElementsOf(programmingExSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testResetCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, programmingExercise);\n+        request.patch(endpoint, \"{}\", HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-instructor1\", roles = \"INSTRUCTOR\")\n+    public void testResetCategories_instructorInWrongCourse_forbidden() throws Exception {\n+        database.addInstructor(\"other-instructors\", \"other-instructor\");\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, \"{}\", HttpStatus.FORBIDDEN);\n+    }\n+\n+    @ParameterizedTest(name = \"{displayName} [{index}] {argumentsWithNames}\")\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\", \"C\" })\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testResetCategories(ProgrammingLanguage programmingLanguage) throws Exception {\n+        // Create a programming exercise with real categories\n+        var course = database.addCourseWithOneProgrammingExercise(true, programmingLanguage);\n+        ProgrammingExercise exercise = programmingExerciseRepository\n+                .findWithTemplateAndSolutionParticipationTeamAssignmentConfigCategoriesById(course.getExercises().iterator().next().getId()).get();\n+        bambooRequestMockProvider.mockTriggerBuild(exercise.getSolutionParticipation());\n+        bambooRequestMockProvider.mockTriggerBuild(exercise.getTemplateParticipation());\n+        staticCodeAnalysisService.createDefaultCategories(exercise);\n+        var originalCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId());\n+\n+        // Alter the categories\n+        var alteredCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId()).stream().peek(category -> {\n+            category.setPenalty(5D);\n+            category.setMaxPenalty(15D);\n+            category.setState(CategoryState.GRADED);\n+        }).collect(Collectors.toList());\n+        staticCodeAnalysisCategoryRepository.saveAll(alteredCategories);\n+\n+        // Perform the request and assert that the original state was restored\n+        final var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.RESET, exercise);\n+        final var categoriesResponse = request.patchWithResponseBody(endpoint, \"{}\", new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        }, HttpStatus.OK);\n+        final var categoriesInDB = staticCodeAnalysisCategoryRepository.findByExerciseId(exercise.getId());\n+\n+        assertThat(categoriesResponse).usingElementComparatorIgnoringFields(\"exercise\").containsExactlyInAnyOrderElementsOf(categoriesInDB);\n+        assertThat(categoriesInDB).usingElementComparatorIgnoringFields(\"exercise\").containsExactlyInAnyOrderElementsOf(originalCategories);\n+        assertThat(categoriesInDB).usingElementComparatorIgnoringFields(\"id\", \"exercise\").isEqualTo(staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()));\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -221,29 +221,29 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568627", "body": "Codacy found an issue: [Missing a Javadoc comment.](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">Missing a Javadoc comment.</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:16Z", "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "diffHunk": "@@ -239,6 +239,16 @@ public File postWithResponseBodyFile(String path, Object body, HttpStatus expect\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java b/src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java\nindex 0e126356b7..2a1a775cb5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java\n", "chunk": "@@ -239,6 +369,14 @@ public class RequestUtilService {\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public <T, R> List<R> patchWithResponseBodyList(String path, T body, Class<R> listElementType, HttpStatus expectedStatus) throws Exception {\n+        String jsonBody = mapper.writeValueAsString(body);\n+        MvcResult res = mvc.perform(MockMvcRequestBuilders.patch(new URI(path)).contentType(MediaType.APPLICATION_JSON).content(jsonBody))\n+                .andExpect(status().is(expectedStatus.value())).andReturn();\n+        restoreSecurityContext();\n+        return mapper.readValue(res.getResponse().getContentAsString(), mapper.getTypeFactory().constructCollectionType(List.class, listElementType));\n+    }\n+\n     public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {\n         String jsonBody = body != null ? mapper.writeValueAsString(body) : null;\n         var requestBuilder = MockMvcRequestBuilders.patch(new URI(path)).contentType(MediaType.APPLICATION_JSON);\n", "next_change": null}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "861e91ca90feaef3f2fec76ef2d59def0fe3ce94", "committedDate": "2021-01-14 22:38:50 +0100", "message": "Disable csrf as it is not needed any more (#2689)"}, {"oid": "650757ba34d6c6b8ddf637ac8898f510186f0378", "committedDate": "2021-01-18 21:20:08 +0100", "message": "remove unusef method in tests"}, {"oid": "d8369b199b94e504ffbd320f97de2a65bb31e9e9", "committedDate": "2021-03-11 13:00:16 +0100", "message": "Add result listener to improve the performance of the score calculation (#2741)"}, {"oid": "c84d8048f1c54169fddc016997d0bdd5e4e7c141", "committedDate": "2021-03-31 22:06:08 +0200", "message": "improve code and test quality / coverage for plagiarism checks"}, {"oid": "9fb9affbfa01120e88b2183d05b4f183b2727758", "committedDate": "2021-04-01 00:18:53 +0200", "message": "fix more issues in tests"}, {"oid": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "committedDate": "2021-04-09 19:30:21 +0200", "message": "Improve download archive server tests (#3127)"}, {"oid": "ac4fabaed7fade8021c8af352df44a87c4948271", "committedDate": "2021-04-30 10:14:18 +0200", "message": "Validate programming exercise test case settings (#3227)"}, {"oid": "97d9eed6fa2aba8d85ea360e95a50efa3c29344c", "committedDate": "2021-05-20 22:00:42 +0200", "message": "Add Apollon converter to create model PDFs on the server (#3062)"}, {"oid": "338ba8706ac8d6631835cd63b5f655464f8ea727", "committedDate": "2021-06-15 09:26:12 +0200", "message": "Adopt Athene Client to communicate using Protobufs"}, {"oid": "a0d919408a4c95015ac4ce77d4f59b60afa41885", "committedDate": "2021-09-09 09:07:20 +0200", "message": "Show the correct build logs for specific programming exercise results (#3923)"}, {"oid": "8097e524359bd7351b9828c80bdd115a1cd33bf4", "committedDate": "2021-11-15 16:17:26 +0100", "message": "Development: Fix wrong usages of assertThat() in server tests (#4305)"}, {"oid": "ca0ccb6a3c14ebe169099593ef84941bc92f49c7", "committedDate": "2021-12-01 17:50:36 +0100", "message": "Assessment: Hide example submissions without assessments in tutor training (#4399)"}, {"oid": "d46875024e82f18af7613ba2735d70e640490ace", "committedDate": "2021-12-11 12:02:26 +0100", "message": "Development: Improve server code quality for Compass (#4492)"}, {"oid": "234e74c4afc315ab7e2976825d38c17ea405a981", "committedDate": "2022-05-17 16:20:03 +0200", "message": "Development: Use isEmpty() when possible (#5090)"}, {"oid": "75baaebc28a5d2565edff1fc34f18d09afe6c0aa", "committedDate": "2022-07-22 22:47:27 +0200", "message": "Programming exercises: Provide an overview to editors to generate code hints automatically (#5331)"}, {"oid": "b7eb6381696aece84cb4d99f4130761d41cc55e1", "committedDate": "2022-10-10 13:22:28 +0200", "message": "Programming exercises: Add manual feedback requests (#5670)"}, {"oid": "3f35f641985e09448b8ea4bf8b43a39e600ee634", "committedDate": "2022-10-21 12:51:03 +0200", "message": "General: Fix SAML2 Login (#5721)"}, {"oid": "ed8b2a4668f25754d81d5302ed82acd93db6937b", "committedDate": "2022-11-12 17:56:15 +0100", "message": "General: Add capability to remove course icon (#5691)"}, {"oid": "0e2d18561dea8296bc014ca10ed04941b9f39bb7", "committedDate": "2022-11-14 09:20:30 +0100", "message": "General: Add support for external learning platforms connecting over LTI 1.3 to Artemis (#5693)"}, {"oid": "2ed05356330215b73f06f57bb1694f077153f4fd", "committedDate": "2022-11-25 13:44:01 +0100", "message": "General: Improve authentication of users by storing JWT in the cookie instead of local storage (#5723)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "8ef120f04381f485ec6cd8a3e91fccbb5da5472f", "committedDate": "2023-02-01 23:47:45 +0100", "message": "Development: Automatically format JavaDoc comments via Spotless (#6151)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"oid": "88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "url": "https://github.com/ls1intum/Artemis/commit/88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "message": "Create codeql-analysis.yml", "committedDate": "2020-07-16T19:37:39Z", "type": "commit"}, {"oid": "265444e72d1b81ed00f27d93722c915ae47b41d1", "url": "https://github.com/ls1intum/Artemis/commit/265444e72d1b81ed00f27d93722c915ae47b41d1", "message": "Update .github/workflows/codeql-analysis.yml", "committedDate": "2020-07-23T16:58:27Z", "type": "commit"}, {"oid": "cdba0f4b68a509b81217034c5f0b649378fb4ed8", "url": "https://github.com/ls1intum/Artemis/commit/cdba0f4b68a509b81217034c5f0b649378fb4ed8", "message": "Compile Manually", "committedDate": "2020-07-28T08:13:33Z", "type": "commit"}, {"oid": "77578628d680e5bf7c48020725921884be81b7a7", "url": "https://github.com/ls1intum/Artemis/commit/77578628d680e5bf7c48020725921884be81b7a7", "message": "Install Java 14", "committedDate": "2020-07-28T08:27:42Z", "type": "commit"}, {"oid": "b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "url": "https://github.com/ls1intum/Artemis/commit/b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "message": "Also update to used Node Version", "committedDate": "2020-07-28T08:38:01Z", "type": "commit"}, {"oid": "355ed91606d41a40288c440218d33a1d23739460", "url": "https://github.com/ls1intum/Artemis/commit/355ed91606d41a40288c440218d33a1d23739460", "message": "Merge branch 'develop' into codeql-analysis", "committedDate": "2020-07-28T08:41:36Z", "type": "commit"}, {"oid": "b38a2051ac536ab1df3566f8337b45ef14da60ea", "url": "https://github.com/ls1intum/Artemis/commit/b38a2051ac536ab1df3566f8337b45ef14da60ea", "message": "Add entities for static code analysis configuration", "committedDate": "2020-09-01T16:48:38Z", "type": "commit"}, {"oid": "cb10a04f30845357e32688895d4e37afb6a2cfba", "url": "https://github.com/ls1intum/Artemis/commit/cb10a04f30845357e32688895d4e37afb6a2cfba", "message": "Database changes", "committedDate": "2020-09-03T12:53:08Z", "type": "commit"}, {"oid": "7f5d90fbf5b71f667213ceecde08779ee29d7c61", "url": "https://github.com/ls1intum/Artemis/commit/7f5d90fbf5b71f667213ceecde08779ee29d7c61", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-03T12:57:05Z", "type": "commit"}, {"oid": "2daedd73ea279072beb78dbdcf3517f5f68cdc36", "url": "https://github.com/ls1intum/Artemis/commit/2daedd73ea279072beb78dbdcf3517f5f68cdc36", "message": "Remove dead code", "committedDate": "2020-09-03T13:36:59Z", "type": "commit"}, {"oid": "cb01a28704224ebbf21928d96fe4451963de61dc", "url": "https://github.com/ls1intum/Artemis/commit/cb01a28704224ebbf21928d96fe4451963de61dc", "message": "Add repo, service, repository and first integration test", "committedDate": "2020-09-03T18:06:14Z", "type": "commit"}, {"oid": "15107d5101c5982f3d21f836c8c8c1347eb893e8", "url": "https://github.com/ls1intum/Artemis/commit/15107d5101c5982f3d21f836c8c8c1347eb893e8", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-03T18:06:38Z", "type": "commit"}, {"oid": "d1eaaa38185e04f3d642d56c53c4b0919d79966b", "url": "https://github.com/ls1intum/Artemis/commit/d1eaaa38185e04f3d642d56c53c4b0919d79966b", "message": "Fix format", "committedDate": "2020-09-07T11:17:30Z", "type": "commit"}, {"oid": "171c5102c02ab0a1d2692ec097861fc19ce62931", "url": "https://github.com/ls1intum/Artemis/commit/171c5102c02ab0a1d2692ec097861fc19ce62931", "message": "Remove unused var", "committedDate": "2020-09-07T11:17:56Z", "type": "commit"}, {"oid": "0e8cc6073beb0ba05be672748be080f69388c6c5", "url": "https://github.com/ls1intum/Artemis/commit/0e8cc6073beb0ba05be672748be080f69388c6c5", "message": "Fix codacy issue", "committedDate": "2020-09-07T11:19:00Z", "type": "commit"}, {"oid": "4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "url": "https://github.com/ls1intum/Artemis/commit/4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "message": "Implement update of static code analysis categories", "committedDate": "2020-09-07T13:58:32Z", "type": "commit"}, {"oid": "1464eb5a87498ffb78d0a380ec99b89e668f54c2", "url": "https://github.com/ls1intum/Artemis/commit/1464eb5a87498ffb78d0a380ec99b89e668f54c2", "message": "Refactor and extend static code analysis setting validation", "committedDate": "2020-09-07T17:49:48Z", "type": "commit"}, {"oid": "b6c26bbc02ee29152907665843701cdcd6dbaf32", "url": "https://github.com/ls1intum/Artemis/commit/b6c26bbc02ee29152907665843701cdcd6dbaf32", "message": "Fix comment", "committedDate": "2020-09-07T17:50:40Z", "type": "commit"}, {"oid": "85c9b5afe478faf544d93a64cda68452d316ceea", "url": "https://github.com/ls1intum/Artemis/commit/85c9b5afe478faf544d93a64cda68452d316ceea", "message": "Adjust tests", "committedDate": "2020-09-08T15:37:09Z", "type": "commit"}, {"oid": "85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "url": "https://github.com/ls1intum/Artemis/commit/85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "message": "Add bonus pint integration test", "committedDate": "2020-09-08T16:26:47Z", "type": "commit"}, {"oid": "3985ab2cd1e4a869d495bd98560243d7439bf453", "url": "https://github.com/ls1intum/Artemis/commit/3985ab2cd1e4a869d495bd98560243d7439bf453", "message": "Fix test", "committedDate": "2020-09-09T09:57:09Z", "type": "commit"}, {"oid": "e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "url": "https://github.com/ls1intum/Artemis/commit/e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "message": "Fix tests", "committedDate": "2020-09-09T11:10:50Z", "type": "commit"}, {"oid": "ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "url": "https://github.com/ls1intum/Artemis/commit/ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "message": "Validate static code analysis settings", "committedDate": "2020-09-09T12:20:19Z", "type": "commit"}, {"oid": "fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "url": "https://github.com/ls1intum/Artemis/commit/fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "message": "Add category mapping as JSON", "committedDate": "2020-09-09T18:29:19Z", "type": "commit"}, {"oid": "e06d38962159248434f21bca5bf65e0c3053b2a2", "url": "https://github.com/ls1intum/Artemis/commit/e06d38962159248434f21bca5bf65e0c3053b2a2", "message": "Read in the default configuration for static code analysis on application startup", "committedDate": "2020-09-14T12:29:00Z", "type": "commit"}, {"oid": "1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "url": "https://github.com/ls1intum/Artemis/commit/1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "message": "Fix json file", "committedDate": "2020-09-14T13:09:46Z", "type": "commit"}, {"oid": "c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "url": "https://github.com/ls1intum/Artemis/commit/c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "message": "D", "committedDate": "2020-09-14T15:47:03Z", "type": "commit"}, {"oid": "67ed57602e16bc282457f7f16856edc9725e333d", "url": "https://github.com/ls1intum/Artemis/commit/67ed57602e16bc282457f7f16856edc9725e333d", "message": "Add integration realistic integration test with static code analysis", "committedDate": "2020-09-15T10:43:01Z", "type": "commit"}, {"oid": "237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "url": "https://github.com/ls1intum/Artemis/commit/237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "message": "More integration tests for update functionality", "committedDate": "2020-09-15T12:10:31Z", "type": "commit"}, {"oid": "09b1122ab70fc0c0f365b45296d900ca2784c33d", "url": "https://github.com/ls1intum/Artemis/commit/09b1122ab70fc0c0f365b45296d900ca2784c33d", "message": "Add more integration tests", "committedDate": "2020-09-15T19:43:31Z", "type": "commit"}, {"oid": "a937254601fba6c24815d3ce01ce951315bded40", "url": "https://github.com/ls1intum/Artemis/commit/a937254601fba6c24815d3ce01ce951315bded40", "message": "Copy categories on import", "committedDate": "2020-09-16T10:45:00Z", "type": "commit"}, {"oid": "2547f06d8c5a939553d14c36683029fd9c2f0c65", "url": "https://github.com/ls1intum/Artemis/commit/2547f06d8c5a939553d14c36683029fd9c2f0c65", "message": "Improve toString for TestCases, StaticCodeAnalysisCategory", "committedDate": "2020-09-16T18:38:12Z", "type": "commit"}, {"oid": "a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "url": "https://github.com/ls1intum/Artemis/commit/a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "message": "Fix import for test cases and categories", "committedDate": "2020-09-16T18:49:43Z", "type": "commit"}, {"oid": "92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "url": "https://github.com/ls1intum/Artemis/commit/92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "message": "Refactor and improve integration tests for import", "committedDate": "2020-09-16T18:54:01Z", "type": "commit"}, {"oid": "39d89124c619747c14f7cf9d74e267b27baecd55", "url": "https://github.com/ls1intum/Artemis/commit/39d89124c619747c14f7cf9d74e267b27baecd55", "message": "Rename default category properties", "committedDate": "2020-09-16T20:34:22Z", "type": "commit"}, {"oid": "cb47b459e16cfbac782daeba4c046609720b671d", "url": "https://github.com/ls1intum/Artemis/commit/cb47b459e16cfbac782daeba4c046609720b671d", "message": "Fix integration tests", "committedDate": "2020-09-16T20:34:58Z", "type": "commit"}, {"oid": "8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "url": "https://github.com/ls1intum/Artemis/commit/8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "message": "Improve coverage", "committedDate": "2020-09-16T22:16:26Z", "type": "commit"}, {"oid": "0386a8a13b53ce55845653251c4f4785f77ed23f", "url": "https://github.com/ls1intum/Artemis/commit/0386a8a13b53ce55845653251c4f4785f77ed23f", "message": "Improve code quality", "committedDate": "2020-09-16T22:28:46Z", "type": "commit"}, {"oid": "ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "url": "https://github.com/ls1intum/Artemis/commit/ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-16T22:29:17Z", "type": "commit"}, {"oid": "727e84a56c791843b0446a0d67c60600aa2ab018", "url": "https://github.com/ls1intum/Artemis/commit/727e84a56c791843b0446a0d67c60600aa2ab018", "message": "Remove unused code", "committedDate": "2020-09-16T22:36:19Z", "type": "commit"}, {"oid": "b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "url": "https://github.com/ls1intum/Artemis/commit/b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-16T22:37:27Z", "type": "commit"}, {"oid": "0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "url": "https://github.com/ls1intum/Artemis/commit/0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "message": "Use floating point numbers for penalties to allow fine grained control", "committedDate": "2020-09-17T12:50:43Z", "type": "commit"}, {"oid": "314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "url": "https://github.com/ls1intum/Artemis/commit/314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "message": "Max penalty for exercises should be integers", "committedDate": "2020-09-17T13:17:06Z", "type": "commit"}, {"oid": "6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "url": "https://github.com/ls1intum/Artemis/commit/6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "message": "Create input for max static code analysis penalty", "committedDate": "2020-09-17T22:34:22Z", "type": "commit"}, {"oid": "851f439904e1f9b7e85aa6182d937468f882ce95", "url": "https://github.com/ls1intum/Artemis/commit/851f439904e1f9b7e85aa6182d937468f882ce95", "message": "Show the max penalty in exercise details", "committedDate": "2020-09-17T23:04:06Z", "type": "commit"}, {"oid": "55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "url": "https://github.com/ls1intum/Artemis/commit/55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "message": "Fix tests", "committedDate": "2020-09-17T23:23:58Z", "type": "commit"}, {"oid": "26b2fdda8cd908260807dc4b9c892aa0b478712a", "url": "https://github.com/ls1intum/Artemis/commit/26b2fdda8cd908260807dc4b9c892aa0b478712a", "message": "Complete default java static code configuration", "committedDate": "2020-09-18T17:22:38Z", "type": "commit"}, {"oid": "05586727d739480b42a57765629f0580b602d48c", "url": "https://github.com/ls1intum/Artemis/commit/05586727d739480b42a57765629f0580b602d48c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-19T19:30:58Z", "type": "commit"}, {"oid": "dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "url": "https://github.com/ls1intum/Artemis/commit/dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-20T10:48:41Z", "type": "commit"}, {"oid": "b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "url": "https://github.com/ls1intum/Artemis/commit/b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-22T08:00:38Z", "type": "commit"}, {"oid": "859f54511de107317c0374ddbcabc2358c3018bf", "url": "https://github.com/ls1intum/Artemis/commit/859f54511de107317c0374ddbcabc2358c3018bf", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-22T22:06:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzOTExNg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493439116", "body": "```suggestion\r\n                staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\r\n```\r\nUse the correct exercise here.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n          \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n          \n      \n    \n    \n  \n\nUse the correct exercise here.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                staticCodeAnalysisService<span class=\"pl-k\">.</span>createDefaultCategories(<span class=\"x x-first x-last\">programmingExercise</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                staticCodeAnalysisService<span class=\"pl-k\">.</span>createDefaultCategories(<span class=\"x x-first x-last\">newProgrammingExercise</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Use the correct exercise here.</p>", "author": "schultek", "createdAt": "2020-09-23T10:45:30Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -313,6 +348,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n         try {\n             // Setup all repositories etc\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n+            // Create default static code analysis categories\n+            if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+                staticCodeAnalysisService.createDefaultCategories(programmingExercise);", "originalCommit": "859f54511de107317c0374ddbcabc2358c3018bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex e9789ab927..d8d0bf780b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n", "chunk": "@@ -350,7 +350,7 @@ public class ProgrammingExerciseResource {\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n             // Create default static code analysis categories\n             if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-                staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+                staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n             }\n             return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n                     .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex e9789ab927..596b4cb9fe 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n", "chunk": "@@ -350,7 +350,7 @@ public class ProgrammingExerciseResource {\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n             // Create default static code analysis categories\n             if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-                staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+                staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n             }\n             return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n                     .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n", "next_change": {"commit": "54601dde775f25f8c20f8acc5f867e68d65af18a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 596b4cb9fe..1ad07aea70 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n", "chunk": "@@ -355,7 +462,7 @@ public class ProgrammingExerciseResource {\n             return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n                     .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n         }\n-        catch (IOException | URISyntaxException | InterruptedException | GitAPIException e) {\n+        catch (IOException | URISyntaxException | InterruptedException | GitAPIException | ContinuousIntegrationException e) {\n             log.error(\"Error while setting up programming exercise\", e);\n             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                     .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while setting up the exercise: \" + e.getMessage(), \"errorProgrammingExercise\")).body(null);\n", "next_change": {"commit": "6a6bccf6dd568fd3edd31581105c519f294aafd8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 1ad07aea70..ce9daa5dd8 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n", "chunk": "@@ -469,157 +269,6 @@ public class ProgrammingExerciseResource {\n         }\n     }\n \n-    /**\n-     * Checks if the project for the given programming exercise already exists in the version control system (VCS) and in the continuous integration system (CIS).\n-     * The check is done based on the project key (course short name + exercise short name) and the project name (course short name + exercise title).\n-     * This prevents errors then the actual projects will be generated later on.\n-     * An error response is returned in case the project does already exist. This will then e.g. stop the generation (or import) of the programming exercise.\n-     *\n-     * @param programmingExercise a typically new programming exercise for which the corresponding VCS and CIS projects should not yet exist.\n-     * @return an error response in case the project already exists or an empty optional in case it does not exist yet (which means the setup can continue as usual)\n-     */\n-    public Optional<ResponseEntity<ProgrammingExercise>> checkIfProjectExists(ProgrammingExercise programmingExercise) {\n-        String projectKey = programmingExercise.getProjectKey();\n-        String projectName = programmingExercise.getProjectName();\n-        boolean projectExists = versionControlService.get().checkIfProjectExists(projectKey, projectName);\n-        if (projectExists) {\n-            return Optional.of(ResponseEntity.badRequest()\n-                    .headers(HeaderUtil.createAlert(applicationName,\n-                            \"Project already exists on the Version Control Server: \" + projectName + \". Please choose a different title and short name!\", \"vcsProjectExists\"))\n-                    .body(null));\n-        }\n-\n-        String errorMessageCI = continuousIntegrationService.get().checkIfProjectExists(projectKey, projectName);\n-        if (errorMessageCI != null) {\n-            return Optional.of(ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, errorMessageCI, \"ciProjectExists\")).body(null));\n-        }\n-        // means the project does not exist in version control server and does not exist in continuous integration server\n-        return Optional.empty();\n-    }\n-\n-    /**\n-     * POST /programming-exercises/import: Imports an existing programming exercise into an existing course\n-     * <p>\n-     * This will import the whole exercise, including all base build plans (template, solution) and repositories\n-     * (template, solution, test). Referenced entities, s.a. the test cases or the hints will get cloned and assigned\n-     * a new id. For a concrete list of what gets copied and what not have a look\n-     * at {@link ProgrammingExerciseImportService#importProgrammingExerciseBasis(ProgrammingExercise, ProgrammingExercise)}\n-     *\n-     * @param sourceExerciseId   The ID of the original exercise which should get imported\n-     * @param newExercise        The new exercise containing values that should get overwritten in the imported exercise, s.a. the title or difficulty\n-     * @param recreateBuildPlans Option determining whether the build plans should be copied or re-created from scratch\n-     * @param updateTemplate     Option determining whether the template files should be updated with the most recent template version\n-     * @return The imported exercise (200), a not found error (404) if the template does not exist, or a forbidden error\n-     * (403) if the user is not at least an instructor in the target course.\n-     * @see ProgrammingExerciseImportService#importProgrammingExerciseBasis(ProgrammingExercise, ProgrammingExercise)\n-     * @see ProgrammingExerciseImportService#importBuildPlans(ProgrammingExercise, ProgrammingExercise)\n-     * @see ProgrammingExerciseImportService#importRepositories(ProgrammingExercise, ProgrammingExercise)\n-     */\n-    @PostMapping(Endpoints.IMPORT)\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<ProgrammingExercise> importProgrammingExercise(@PathVariable long sourceExerciseId, @RequestBody ProgrammingExercise newExercise,\n-            @RequestParam(defaultValue = \"false\") boolean recreateBuildPlans, @RequestParam(defaultValue = \"false\") boolean updateTemplate) {\n-        if (sourceExerciseId < 0) {\n-            return badRequest();\n-        }\n-\n-        // Valid exercises have set either a course or an exerciseGroup\n-        newExercise.checkCourseAndExerciseGroupExclusivity(ENTITY_NAME);\n-\n-        log.debug(\"REST request to import programming exercise {} into course {}\", sourceExerciseId, newExercise.getCourseViaExerciseGroupOrCourseMember().getId());\n-\n-        // Validate general programming exercise settings\n-        Optional<ResponseEntity<ProgrammingExercise>> optionalGeneralError = validateGeneralSettings(newExercise);\n-        if (optionalGeneralError.isPresent()) {\n-            return optionalGeneralError.get();\n-        }\n-\n-        // Validate static code analysis settings\n-        Optional<ResponseEntity<ProgrammingExercise>> optionalStaticCodeAnalysisError = validateStaticCodeAnalysisSettings(newExercise);\n-        if (optionalStaticCodeAnalysisError.isPresent()) {\n-            return optionalStaticCodeAnalysisError.get();\n-        }\n-\n-        Course course = courseService.retrieveCourseOverExerciseGroupOrCourseId(newExercise);\n-        final var user = userRepository.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            log.debug(\"User {} is not allowed to import exercises for course {}\", user.getId(), course.getId());\n-            return forbidden();\n-        }\n-\n-        // Validate course settings\n-        Optional<ResponseEntity<ProgrammingExercise>> optionalCourseError = validateCourseSettings(newExercise, course);\n-        if (optionalCourseError.isPresent()) {\n-            return optionalCourseError.get();\n-        }\n-\n-        final var optionalOriginalProgrammingExercise = programmingExerciseRepository\n-                .findByIdWithEagerTestCasesStaticCodeAnalysisCategoriesHintsAndTemplateAndSolutionParticipations(sourceExerciseId);\n-        if (optionalOriginalProgrammingExercise.isEmpty()) {\n-            return notFound();\n-        }\n-        final var originalProgrammingExercise = optionalOriginalProgrammingExercise.get();\n-\n-        // The static code analysis flag can only change, if the build plans are recreated and the template is upgraded\n-        if (newExercise.isStaticCodeAnalysisEnabled() != originalProgrammingExercise.isStaticCodeAnalysisEnabled() && !(recreateBuildPlans && updateTemplate)) {\n-            throw new BadRequestAlertException(\"Static code analysis can only change, if the recreation of build plans and update of template files is activated\", ENTITY_NAME,\n-                    \"staticCodeAnalysisCannotChange\");\n-        }\n-\n-        // Check if the user has the rights to access the original programming exercise\n-        Course originalCourse = courseService.retrieveCourseOverExerciseGroupOrCourseId(originalProgrammingExercise);\n-        if (!authCheckService.isAtLeastInstructorInCourse(originalCourse, user)) {\n-            log.debug(\"User {} is not authorized to import the original exercise in course {}\", user.getId(), originalCourse.getId());\n-            return forbidden();\n-        }\n-\n-        newExercise.generateAndSetProjectKey();\n-        Optional<ResponseEntity<ProgrammingExercise>> projectExistsError = checkIfProjectExists(newExercise);\n-        if (projectExistsError.isPresent()) {\n-            return projectExistsError.get();\n-        }\n-\n-        final var importedProgrammingExercise = programmingExerciseImportService.importProgrammingExerciseBasis(originalProgrammingExercise, newExercise);\n-        HttpHeaders responseHeaders;\n-        programmingExerciseImportService.importRepositories(originalProgrammingExercise, importedProgrammingExercise);\n-\n-        // Update the template files\n-        if (updateTemplate) {\n-            TemplateUpgradeService upgradeService = templateUpgradePolicy.getUpgradeService(importedProgrammingExercise.getProgrammingLanguage());\n-            upgradeService.upgradeTemplate(importedProgrammingExercise);\n-        }\n-\n-        // Copy or recreate the build plans\n-        try {\n-            if (recreateBuildPlans) {\n-                // Create completely new build plans for the exercise\n-                programmingExerciseService.setupBuildPlansForNewExercise(importedProgrammingExercise);\n-            }\n-            else {\n-                // We have removed the automatic build trigger from test to base for new programming exercises.\n-                // We also remove this build trigger in the case of an import as the source exercise might still have this trigger.\n-                // The importBuildPlans method includes this process\n-                programmingExerciseImportService.importBuildPlans(originalProgrammingExercise, importedProgrammingExercise);\n-            }\n-            responseHeaders = HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, importedProgrammingExercise.getTitle());\n-        }\n-        catch (Exception e) {\n-            responseHeaders = HeaderUtil.createFailureAlert(applicationName, true, ENTITY_NAME, \"importExerciseTriggerPlanFail\", \"Unable to trigger imported build plans\");\n-        }\n-\n-        programmingExerciseService.scheduleOperations(importedProgrammingExercise.getId());\n-\n-        // Remove unnecessary fields\n-        importedProgrammingExercise.setTestCases(null);\n-        importedProgrammingExercise.setStaticCodeAnalysisCategories(null);\n-        importedProgrammingExercise.setTemplateParticipation(null);\n-        importedProgrammingExercise.setSolutionParticipation(null);\n-        importedProgrammingExercise.setExerciseHints(null);\n-\n-        return ResponseEntity.ok().headers(responseHeaders).body(importedProgrammingExercise);\n-    }\n-\n     /**\n      * PUT /programming-exercises : Updates an existing updatedProgrammingExercise.\n      *\n", "next_change": {"commit": "8ef120f04381f485ec6cd8a3e91fccbb5da5472f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex ce9daa5dd8..6108ed9033 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n", "chunk": "@@ -275,11 +293,11 @@ public class ProgrammingExerciseResource {\n      * @param updatedProgrammingExercise the programmingExercise that has been updated on the client\n      * @param notificationText           to notify the student group about the update on the programming exercise\n      * @return the ResponseEntity with status 200 (OK) and with body the updated ProgrammingExercise, or with status 400 (Bad Request) if the updated ProgrammingExercise\n-     * is not valid, or with status 500 (Internal Server Error) if the updated ProgrammingExercise couldn't be saved to the database\n+     *         is not valid, or with status 500 (Internal Server Error) if the updated ProgrammingExercise couldn't be saved to the database\n      */\n     @PutMapping(PROGRAMMING_EXERCISES)\n     @PreAuthorize(\"hasRole('EDITOR')\")\n-    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    @FeatureToggle(Feature.ProgrammingExercises)\n     public ResponseEntity<ProgrammingExercise> updateProgrammingExercise(@RequestBody ProgrammingExercise updatedProgrammingExercise,\n             @RequestParam(value = \"notificationText\", required = false) String notificationText) {\n         log.debug(\"REST request to update ProgrammingExercise : {}\", updatedProgrammingExercise);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "de664eefc3f2e69e3020538ea204aa3e87915505", "committedDate": "2020-10-20 01:36:05 +0200", "message": "Add option to checkout solution repository for Haskell exercises. (#2216)"}, {"oid": "8aa73283089fcb3c6cba833e36fb55faec7c128a", "committedDate": "2020-10-20 02:18:45 +0200", "message": "Add Kotlin, VHDL, Assember Programming Language Templates. (#2211)"}, {"oid": "c1589448351cb962f477e5b3da68dfa12a0abe73", "committedDate": "2020-10-20 21:00:21 +0200", "message": "Add structured grading instructions for programming exercises (#2222)"}, {"oid": "276d2c064a0029acc023554a6b4cf67f79b5f5f2", "committedDate": "2020-10-23 01:35:32 +0200", "message": "Update C template and introduce programming language features (#2150)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "d8027bf77bb83ee2ca1275af81b291616f18f1c0", "committedDate": "2020-11-10 08:43:00 +0100", "message": "Add template for Swift programming exercises (#2326)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "e62432d23df1581e7509b2ea7660f7a47bd6b4d8", "committedDate": "2020-11-17 20:34:18 +0100", "message": "Do not allow static code analysis and sequential test runs active at the same time (#2419)"}, {"oid": "6f0096fab51843a1e709c3af28f2b5f65c58fe80", "committedDate": "2020-11-23 22:45:34 +0100", "message": "Add an option to update the test repository when importing programming exercises (#2414)"}, {"oid": "3a86668dfe3e732ac6df917563907d53fd5996fb", "committedDate": "2020-12-17 11:01:22 +0100", "message": "Improve plagiarism detection for programming exercises (#2522)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "cffe80054889b44b27c44682a9ae47d2e4eee69f", "committedDate": "2021-01-03 13:05:44 +0100", "message": "Add personal access token and ssh authentication against git repositories to the Artemis server (GitService: clone, pull, push, ...) (#2620)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "487bea51dc2561c0ff0ba58fb5e7e7b3dcaca113", "committedDate": "2021-01-14 13:16:48 +0100", "message": "Allow to configure the plagiarism detection (#2664)"}, {"oid": "104cd014406d0f9daf97f71803e9dcc7385adbde", "committedDate": "2021-01-16 09:46:24 +0100", "message": "Allow instructors to manually lock and unlock all student repositories in programming exercises (#2685)"}, {"oid": "14f1004d82b573aa72237aa21080d0a2d7c394d9", "committedDate": "2021-01-18 13:52:41 +0100", "message": "Finish first iteration of the second exam correction feature (#2662)"}, {"oid": "8ded10c11dd2ea1920d3e4c97139798dd1553f47", "committedDate": "2021-01-22 16:22:12 +0100", "message": "Fixes code line highlighting for tutors and wrongly invoked method for students during manual assessments of programming exercises (#2726)"}, {"oid": "fef8e41208b355cac16c6b98e6148a157a3b9aca", "committedDate": "2021-01-25 21:42:23 +0100", "message": "Allow to categorize exercises into included into score, as bonus exercises or as optional exercises (#2651)"}, {"oid": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "committedDate": "2021-01-28 15:14:44 +0100", "message": "add clone & download repo button in programming details view  (#2729)"}, {"oid": "92687bafd9625362bf620bd8b0294a4e9f96b1b6", "committedDate": "2021-01-30 09:42:34 +0100", "message": "Improve bulk editing programming exercises (#2770)"}, {"oid": "d20e93b929bb5181b2457029b19a9751a8a2c660", "committedDate": "2021-02-10 14:01:58 +0100", "message": "Add options to archive and cleanup a course (#2813)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "acd76a0f578579c76dc46f6de9d0aa33a036ab1e", "committedDate": "2021-02-17 15:50:05 +0100", "message": "Show template and solution submission history with commit hash links (#2864)"}, {"oid": "5f7d7b04d6e93b2260ddb191e21e4358bbc57a17", "committedDate": "2021-02-19 12:06:09 +0100", "message": "Additional server service refactoring (#2878)"}, {"oid": "be736dbb5fc4d6351bea2b76d511916dd4f891e7", "committedDate": "2021-03-07 16:02:09 +0100", "message": "Do not unlock exam programming exercises on edit (#2975)"}, {"oid": "d8369b199b94e504ffbd320f97de2a65bb31e9e9", "committedDate": "2021-03-11 13:00:16 +0100", "message": "Add result listener to improve the performance of the score calculation (#2741)"}, {"oid": "54601dde775f25f8c20f8acc5f867e68d65af18a", "committedDate": "2021-03-16 20:27:03 +0100", "message": "Improve server test coverage for Gitlab, Jenkins, Bamboo (#3024)"}, {"oid": "64136461c3403ffb6697faf448fd46bbb61271da", "committedDate": "2021-03-22 15:40:21 +0100", "message": "Reduce dependencies between server services (#3069)"}, {"oid": "fceeaef9fa01fe6daa9a2b221597634d2d2f9f2a", "committedDate": "2021-03-26 18:13:24 +0100", "message": "Reduce server service dependencies (#3079)"}, {"oid": "d72e0f551bed01115c385e9ddd249b602bf62181", "committedDate": "2021-03-30 14:18:17 +0200", "message": "Persist plagiarism results (#2796)"}, {"oid": "1c4d1f749a903b711afa7ab42bf57fbf8054dd33", "committedDate": "2021-03-31 20:29:19 +0200", "message": "Automatically combine template commits for programming exercises (#3074)"}, {"oid": "c84d8048f1c54169fddc016997d0bdd5e4e7c141", "committedDate": "2021-03-31 22:06:08 +0200", "message": "improve code and test quality / coverage for plagiarism checks"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "2f681695b4a000395d4dedafc5ba691f4e8cc4dc", "committedDate": "2021-04-08 21:09:33 +0200", "message": "Handle illegal exam programming submissions (#3120)"}, {"oid": "12ec85c35d04a4ad4ac883b060c620039a51164c", "committedDate": "2021-04-12 23:31:39 +0200", "message": "Improve REST API and improve code quality (#3175)"}, {"oid": "56d353e4c9634c6087c18112ce0b4afb82503632", "committedDate": "2021-04-18 20:55:51 +0200", "message": "Improve plagiarism performance by limiting comparisons to 500 with highest similarity (#3234)"}, {"oid": "234b3244ccdb8a954b45eb9a9ec52c237e08772a", "committedDate": "2021-04-29 19:44:41 +0200", "message": "Fix issues in plagiarism checks for exercises with too many submissions (#3319)"}, {"oid": "94a1cb26472a325e9bf3b61ef86a267ec20ae2bd", "committedDate": "2021-04-30 17:45:53 +0200", "message": "Show the progress of plagiarism checks for programming exercises (#3323)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "7e952f924f3e4998e173c60f2947f3396d2900bc", "committedDate": "2021-05-03 19:25:43 +0200", "message": "Extend editor access rights (#3344)"}, {"oid": "6bdd15b08211dfa171c32a4ec1860348dc495f33", "committedDate": "2021-05-04 08:31:53 +0200", "message": "Deactivate compass for now due to issues in multi node environments (#3353)"}, {"oid": "7e0bf653a47ce25a2df0e200590e021d235cc511", "committedDate": "2021-05-14 15:07:16 +0200", "message": "Allow instructors to export programming exercises (repos, problem statement, details) (#3273)"}, {"oid": "e1c7100eff0432a6b56e81dcbb4599bf8a72fc00", "committedDate": "2021-05-20 18:42:08 +0200", "message": "Allow to edit structured grading instructions after first usage (#3294)"}, {"oid": "b94a1465702a5fd0607aafd7a82b34c4bef07f6f", "committedDate": "2021-05-21 17:46:11 +0200", "message": "Show grades in course and exam Scores (#3437)"}, {"oid": "78f3ec52ea815659f981e5f19851e1c14850ee69", "committedDate": "2021-06-04 09:24:41 +0200", "message": "[Feature] anonymize submissions (#3477)"}, {"oid": "f7d4291d3934ce04aa12049e64be25175f0b1505", "committedDate": "2021-06-09 11:37:16 +0200", "message": "Auxiliary Repositories for Programming Exercises (#3457)"}, {"oid": "7d45190cd9e315ed7ef18a740c5df4cfebaaf99a", "committedDate": "2021-06-19 11:05:18 +0200", "message": "Improve exercise date validation (#3510)"}, {"oid": "da641de835eaebe8e9086d75b5fd9891239d9c1a", "committedDate": "2021-06-24 20:06:20 +0200", "message": "Re-evaluate feedback and result after structured grading instructions update (#3521)"}, {"oid": "6a7b15dc49cda4477cee17cfe622f2ec352f786a", "committedDate": "2021-07-05 19:40:20 +0200", "message": "Integrate a minimal Xcode (SwiftUI) template to Artemis (#3618)"}, {"oid": "838c32e18d0390a6545ddf5839799911a81d709e", "committedDate": "2021-07-10 21:17:13 +0200", "message": "Fix an issue when importing programming exercises with manual assessment (#3718)"}, {"oid": "af82ac71911891a4efd91b1f49c77fd4e356c39e", "committedDate": "2021-07-12 18:56:30 +0200", "message": "Fix an issue in the programming exercise details page for instructors (#3731)"}, {"oid": "e29268dbc6dfa9ab0ee9ea20bec6597dd36997ae", "committedDate": "2021-08-24 12:11:57 +0200", "message": "Check course id when updating exercises (#3769)"}, {"oid": "7770e8a9585b60b42ac7bf26eb3a8d617b5d7568", "committedDate": "2021-10-08 17:49:09 +0200", "message": "Programming exercises: Allow editing of auxiliary repositories (#4018)"}, {"oid": "5300eb0b9ed1d49c84a9409f5fb96fb2dfb5a4db", "committedDate": "2021-10-14 22:30:55 +0200", "message": "Programming exercises: Upgrade ocaml template (#4068)"}, {"oid": "ab1368d7fceef5dfb4dbc28f13274a69a84d62b7", "committedDate": "2021-10-31 21:13:16 +0100", "message": "Programming exercises: Add submission policies for programming exercises (#4073)"}, {"oid": "9770c07d4bf8388fb5249082aeaa2b9f88946a35", "committedDate": "2021-11-10 08:44:25 +0100", "message": "Programming exercises: Allow test weights to be all zero if manual feedback is enabled (#4109)"}, {"oid": "4f389387c6f71227ed2692325360f446c9b595f4", "committedDate": "2021-11-12 14:19:02 +0100", "message": "General: Refine editor access rights (#4201)"}, {"oid": "fd41d5c4869c6736191fc2117d86f0fda4726d43", "committedDate": "2021-11-25 21:52:34 +0100", "message": "Development: Update server dependencies (#4342)"}, {"oid": "811cae4fc9ece781e492a1087db16ca994f6fa99", "committedDate": "2021-12-15 09:56:22 +0100", "message": "Programming exercises: Fix issues with plagiarism checks (#4453)"}, {"oid": "3537a6aa62a835dd473709a2e8191b68e42e6f4d", "committedDate": "2021-12-20 17:37:53 +0100", "message": "General: Allow instructors to define individual due dates for students in course exercises (#4416)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "2ade7c2f572ee2b07efe77ac85e8521f05e1358e", "committedDate": "2022-01-05 23:37:33 +0100", "message": "Development: Improve server code quality by extracting duplicated code and by fixing code typos"}, {"oid": "088d74bb8e476b561bbed71d11f275c64219026d", "committedDate": "2022-01-07 11:35:56 +0100", "message": "Development: Improve server code quality"}, {"oid": "6a6bccf6dd568fd3edd31581105c519f294aafd8", "committedDate": "2022-01-08 16:44:43 +0100", "message": "Development: Split ProgrammingExerciseResource into multiple resources"}, {"oid": "73ab1126efab5d6efd5654410ebfa07302f4640b", "committedDate": "2022-01-21 20:32:20 +0100", "message": "Plagiarism checks: Fix memory issues with large comparisons and add feature toggle (#4621)"}, {"oid": "b01799aa9ac5cf87ac6fa592e30443164b0e6e0d", "committedDate": "2022-02-25 12:43:06 +0100", "message": "Programming exercises: Add general structure for code hints (#4642)"}, {"oid": "72dc554091906333e3bf81843edcd69fa0e1c8b3", "committedDate": "2022-04-14 23:40:34 +0200", "message": "Development: Refactor Git service (#4837)"}, {"oid": "d5857060f1d403e725b3f7c49d45a69b4ebbb786", "committedDate": "2022-04-22 10:50:33 +0200", "message": "Development: Make ProgrammingLanguageFeatureService optional to allow deployments without version control and continuous integration (#4949)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "3e06e33261cdbd754a87941218c3fe90c055afbd", "committedDate": "2022-04-28 17:19:19 +0200", "message": "Development: Replace Paths.get() with Path.of() (#4978)"}, {"oid": "3d640be969162f1fa20291c6891fac8324873209", "committedDate": "2022-05-05 21:45:37 +0200", "message": "Development: Improve server code"}, {"oid": "234e74c4afc315ab7e2976825d38c17ea405a981", "committedDate": "2022-05-17 16:20:03 +0200", "message": "Development: Use isEmpty() when possible (#5090)"}, {"oid": "f3d56f363e27262b8c4013d068f44ed3c82071c7", "committedDate": "2022-05-26 18:50:53 -0400", "message": "Development: Validate example solution publication date (#4983)"}, {"oid": "c85092a5bf9cef57b67faaab4cfb53b6f902babd", "committedDate": "2022-07-16 20:08:05 +0200", "message": "Programming exercises: Disable changing option to record coverage when editing programming exercises (#5412)"}, {"oid": "75baaebc28a5d2565edff1fc34f18d09afe6c0aa", "committedDate": "2022-07-22 22:47:27 +0200", "message": "Programming exercises: Provide an overview to editors to generate code hints automatically (#5331)"}, {"oid": "7150877c104111c1343bec468a6951c27a5c7d83", "committedDate": "2022-07-26 21:29:12 +0200", "message": "General: Automatically navigate to the details page when instructors create or update data (#5382)"}, {"oid": "586ec8b53219cc99a17734221f293bad72585357", "committedDate": "2022-07-29 20:42:44 +0200", "message": "General: Remove most update success alerts (#5514)"}, {"oid": "7452a5dd5896cd3afdf5289685b259042ec195c3", "committedDate": "2022-08-03 15:41:40 +0200", "message": "General: Allow to search by id in exercise and exam import dialog (#5484)"}, {"oid": "c8aa9a065b38b41844c26f410784af6288b7b57d", "committedDate": "2022-08-03 17:20:30 +0200", "message": "General: Allow to restrict exercise import search to courses / exercises (#5491)"}, {"oid": "edee8b4bbefbf5f6a3373fe47475c516139a7e1e", "committedDate": "2022-08-30 14:40:05 +0200", "message": "Development: Move translation keys for error messages into error.json (#5296)"}, {"oid": "da2a50180ecc1cbc7230361d40e42cb3f51c03f6", "committedDate": "2022-09-07 22:03:50 +0200", "message": "Programming exercises: Improve the template/solution diff view (#5545)"}, {"oid": "593283a9b50a476824af052f7e3aae139262c297", "committedDate": "2022-09-23 10:25:28 +0200", "message": "Programming exercises: Add build log analytics (#5337)"}, {"oid": "ec8c277896ee311c06a90d523ba91492d4dfd287", "committedDate": "2022-09-30 19:56:04 +0200", "message": "Programming exercises: Add practice mode (#5370)"}, {"oid": "b7eb6381696aece84cb4d99f4130761d41cc55e1", "committedDate": "2022-10-10 13:22:28 +0200", "message": "Programming exercises: Add manual feedback requests (#5670)"}, {"oid": "be77abe0235d47e2bc6c3e0e26da8cab6260d21d", "committedDate": "2022-10-18 00:07:06 +0200", "message": "Programming exercises: Fix internal server error when creating oracle error alerts (#5738)"}, {"oid": "3027f6410004422fb275e8be79853616c3a86a2f", "committedDate": "2022-10-22 09:47:31 +0200", "message": "Development: Fix naming of programming exercise endpoints (#5523)"}, {"oid": "5841a1ebfb1c239e09788ac1520b1c59e20f7a54", "committedDate": "2022-11-13 09:46:56 +0100", "message": "Programming exercises: Synchronize repository locks after exercise update (#5799)"}, {"oid": "c07647da8348238c5ee09703927b2868e009ec9a", "committedDate": "2022-12-24 16:46:29 +0100", "message": "Programming exercises: Fix auxiliary repositories not visible on exercise detail page (#5980)"}, {"oid": "a0eff86544ecd5a84347bec2305fbb6209af9cc1", "committedDate": "2023-01-18 13:09:19 +0100", "message": "General: Redesign learning goals and store progress (#6050)"}, {"oid": "c201db4e08a59609fee64254eb1a0f2f8869c317", "committedDate": "2023-01-18 13:40:21 +0100", "message": "Programming Exercises: Experimental support for GitLab CI (#6044)"}, {"oid": "30185fe01233bd621d976395ff5bde1f774d124f", "committedDate": "2023-01-19 08:43:22 +0100", "message": "Development: Improve build plan relationship (#6099)"}, {"oid": "8ef120f04381f485ec6cd8a3e91fccbb5da5472f", "committedDate": "2023-02-01 23:47:45 +0100", "message": "Development: Automatically format JavaDoc comments via Spotless (#6151)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}, {"oid": "fe46a04250425d3b060f20f65c19c48c32f14615", "committedDate": "2023-02-19 09:44:29 +0100", "message": "Programming exercises: Allow automatically graded exercises where all test cases give 0 points (#6101)"}, {"oid": "16b29e0daeda3d604e967578a15ff82727209cc5", "committedDate": "2023-03-05 21:50:59 +0100", "message": "Development: Move programming exercise repository actions into separate service (#6273)"}]}, {"oid": "cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "url": "https://github.com/ls1intum/Artemis/commit/cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "message": "use correct exercise on category creation", "committedDate": "2020-09-23T10:48:21Z", "type": "commit"}, {"oid": "b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "url": "https://github.com/ls1intum/Artemis/commit/b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T10:48:38Z", "type": "commit"}, {"oid": "8cf30344582f4ad6da90a7fc4964d774ffccd296", "url": "https://github.com/ls1intum/Artemis/commit/8cf30344582f4ad6da90a7fc4964d774ffccd296", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T11:48:41Z", "type": "commit"}, {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "url": "https://github.com/ls1intum/Artemis/commit/4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T16:31:14Z", "type": "commit"}, {"oid": "3aea10933bc8ca738f34d658f9031fc66a2c728d", "url": "https://github.com/ls1intum/Artemis/commit/3aea10933bc8ca738f34d658f9031fc66a2c728d", "message": "Fix duplicate in configuration", "committedDate": "2020-09-24T11:57:06Z", "type": "commit"}, {"oid": "5c7b232880858f432ee905cd69abec42d71248e7", "url": "https://github.com/ls1intum/Artemis/commit/5c7b232880858f432ee905cd69abec42d71248e7", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml\n#\tsrc/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "committedDate": "2020-09-24T12:09:20Z", "type": "commit"}, {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed", "url": "https://github.com/ls1intum/Artemis/commit/ebed138ae3bf043be047bd51f131ed3cbe085bed", "message": "spotless", "committedDate": "2020-09-24T12:14:58Z", "type": "commit"}, {"oid": "bdd7a9935ee46faa4622b411a79cf8ea47e64654", "url": "https://github.com/ls1intum/Artemis/commit/bdd7a9935ee46faa4622b411a79cf8ea47e64654", "message": "Fix merge conflict", "committedDate": "2020-09-24T15:40:49Z", "type": "commit"}, {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628", "url": "https://github.com/ls1intum/Artemis/commit/5c6477ed578473a2c849b827164a85d0f97ea628", "message": "Improve translation", "committedDate": "2020-09-24T15:45:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494441653", "body": "Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.", "bodyText": "Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.", "bodyHTML": "<p dir=\"auto\">Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.</p>", "author": "sleiss", "createdAt": "2020-09-24T16:10:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // Validate the category updates\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+            }", "originalCommit": "5c6477ed578473a2c849b827164a85d0f97ea628", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1ODAxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494458015", "bodyText": "Created a own method for the validation.", "author": "kloessst", "createdAt": "2020-09-24T16:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af6572d1ac62b64b51e7bbd572280f54a358a39a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 93b3703a3d..12de70231f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -98,40 +99,54 @@ public class StaticCodeAnalysisResource {\n             return forbidden();\n         }\n \n-        // Validate the category updates\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n         for (var category : categories) {\n             // Each categories must have an id\n             if (category.getId() == null) {\n-                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n             }\n \n             // Penalty must not be null or negative\n             if (category.getPenalty() == null || category.getPenalty() < 0) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n-                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n             }\n \n             // MaxPenalty must not be smaller than penalty\n             if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n             }\n \n             // Category state must not be null\n             if (category.getState() == null) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n             }\n \n             // Exercise id of the request path must match the exerciseId in the request body if present\n             if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n-                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n-                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n             }\n         }\n-\n-        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n-        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+        return Optional.empty();\n     }\n \n     public static final class Endpoints {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 93b3703a3d..dc8c3cfd14 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -98,40 +98,54 @@ public class StaticCodeAnalysisResource {\n             return forbidden();\n         }\n \n-        // Validate the category updates\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n         for (var category : categories) {\n             // Each categories must have an id\n             if (category.getId() == null) {\n-                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n             }\n \n             // Penalty must not be null or negative\n             if (category.getPenalty() == null || category.getPenalty() < 0) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n-                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n             }\n \n             // MaxPenalty must not be smaller than penalty\n             if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n             }\n \n             // Category state must not be null\n             if (category.getState() == null) {\n-                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n             }\n \n             // Exercise id of the request path must match the exerciseId in the request body if present\n             if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n-                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n-                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n             }\n         }\n-\n-        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n-        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+        return Optional.empty();\n     }\n \n     public static final class Endpoints {\n", "next_change": {"commit": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex dc8c3cfd14..8c73adccf6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -154,6 +179,8 @@ public class StaticCodeAnalysisResource {\n \n         public static final String CATEGORIES = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories\";\n \n+        public static final String RESET = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories/reset\";\n+\n         private Endpoints() {\n         }\n     }\n", "next_change": {"commit": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 8c73adccf6..97fc3bbbd5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -110,77 +90,106 @@ public class StaticCodeAnalysisResource {\n     /**\n      * Reset the static code analysis categories of the given exercise to their default configuration.\n      *\n-     * @param exerciseId if of the exercise for which the categories should be reseted\n+     * @param exerciseId if of the exercise for which the categories should be reset\n      * @return static code analysis categories with the default configuration\n      */\n     @PatchMapping(Endpoints.RESET)\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n     public ResponseEntity<Set<StaticCodeAnalysisCategory>> resetStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n         log.debug(\"REST request to reset static code analysis categories for programming exercise {}\", exerciseId);\n \n-        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n+        checkSCAEnabledForExerciseElseThrow(programmingExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n \n-        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-            return badRequest();\n-        }\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.resetCategories(programmingExercise);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * PATCH /programming-exercises/:exerciseId/static-code-analysis-categories/import\n+     *\n+     * @param exerciseId       The exercise to copy the configuration into\n+     * @param sourceExerciseId The exercise to take the existing configuration from\n+     * @return The newly created SCA configuration\n+     * @see StaticCodeAnalysisService#importCategoriesFromExercise(ProgrammingExercise, ProgrammingExercise)\n+     */\n+    @PatchMapping(Endpoints.IMPORT)\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> importStaticCodeAnalysisCategoriesFromExercise(@PathVariable Long exerciseId, @RequestParam Long sourceExerciseId) {\n+        log.debug(\"REST request to import static code analysis categories to programming exercise {} from exercise {}\", exerciseId, sourceExerciseId);\n+\n+        ProgrammingExercise targetExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n+        checkSCAEnabledForExerciseElseThrow(targetExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, targetExercise, null);\n \n-        if (!authCheckService.isAtLeastInstructorForExercise(programmingExercise)) {\n-            return forbidden();\n+        ProgrammingExercise sourceExercise = programmingExerciseRepository.findByIdElseThrow(sourceExerciseId);\n+        checkSCAEnabledForExerciseElseThrow(sourceExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, sourceExercise, null);\n+\n+        if (targetExercise.getProgrammingLanguage() != sourceExercise.getProgrammingLanguage()) {\n+            throw new ConflictException(\"SCA configurations can only be imported from exercises with the same programming language\", ENTITY_NAME, \"programmingLanguageMismatch\");\n         }\n \n-        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.resetCategories(programmingExercise);\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.importCategoriesFromExercise(sourceExercise, targetExercise);\n         return ResponseEntity.ok(staticCodeAnalysisCategories);\n     }\n \n+    private void checkSCAEnabledForExerciseElseThrow(ProgrammingExercise programmingExercise) {\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            throw new BadRequestAlertException(\"Static code analysis is not enabled\", ENTITY_NAME, \"staticCodeAnalysisNotEnabled\");\n+        }\n+    }\n+\n     /**\n      * Validates static code analysis categories\n      *\n      * @param categories to be validated\n      * @param exerciseId path variable\n-     * @return empty optional if no error was found otherwise optional with an error response\n      */\n-    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+    private void validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n         for (var category : categories) {\n-            // Each categories must have an id\n+            // Each category must have an id\n             if (category.getId() == null) {\n-                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+                throw new BadRequestAlertException(\"Static code analysis category id is missing.\", ENTITY_NAME, \"scaCategoryIdError\");\n             }\n \n             // Penalty must not be null or negative\n             if (category.getPenalty() == null || category.getPenalty() < 0) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n-                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+                throw new BadRequestAlertException(\"Penalty for static code analysis category \" + category.getName() + \" must be a non-negative integer.\", ENTITY_NAME,\n+                        \"scaCategoryPenaltyError\");\n             }\n \n             // MaxPenalty must not be smaller than penalty\n             if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+                throw new BadRequestAlertException(\"Max Penalty for static code analysis category \" + category.getName() + \" must not be smaller than the penalty.\", ENTITY_NAME,\n+                        \"scaCategoryMaxPenaltyError\");\n             }\n \n             // Category state must not be null\n             if (category.getState() == null) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+                throw new BadRequestAlertException(\"Max Penalty for static code analysis category \" + category.getName() + \" must not be smaller than the penalty.\", ENTITY_NAME,\n+                        \"scaCategoryStateError\");\n             }\n \n             // Exercise id of the request path must match the exerciseId in the request body if present\n             if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n-                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n-                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+                throw new ConflictException(\"Exercise id path variable does not match exercise id of static code analysis category \" + category.getName(), ENTITY_NAME,\n+                        \"scaCategoryExerciseIdError\");\n             }\n         }\n-        return Optional.empty();\n     }\n \n     public static final class Endpoints {\n \n-        private static final String PROGRAMMING_EXERCISE = \"/programming-exercise/{exerciseId}\";\n+        private static final String PROGRAMMING_EXERCISE = \"/programming-exercises/{exerciseId}\";\n \n         public static final String CATEGORIES = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories\";\n \n         public static final String RESET = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories/reset\";\n \n+        public static final String IMPORT = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories/import\";\n+\n         private Endpoints() {\n         }\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "cd4106917f5283659b889c36a47f82ad82d1a477", "committedDate": "2021-05-07 16:20:14 +0200", "message": "Improve the editor role based on first feedback round (#3376)"}, {"oid": "779a0fe55f9eb666ed98ad7b0efaae30c809af2f", "committedDate": "2022-01-29 14:25:59 +0100", "message": "Development: Remove use of deprecated methods (#4637)"}, {"oid": "3d640be969162f1fa20291c6891fac8324873209", "committedDate": "2022-05-05 21:45:37 +0200", "message": "Development: Improve server code"}, {"oid": "1a0a647ffb7d70ade81bc4f2330e54a0163d904c", "committedDate": "2022-06-04 23:33:59 +0200", "message": "Development: Fix typos in code comments (#5007)"}, {"oid": "3027f6410004422fb275e8be79853616c3a86a2f", "committedDate": "2022-10-22 09:47:31 +0200", "message": "Development: Fix naming of programming exercise endpoints (#5523)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"oid": "af6572d1ac62b64b51e7bbd572280f54a358a39a", "url": "https://github.com/ls1intum/Artemis/commit/af6572d1ac62b64b51e7bbd572280f54a358a39a", "message": "Create validation method", "committedDate": "2020-09-24T16:35:03Z", "type": "commit"}, {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "url": "https://github.com/ls1intum/Artemis/commit/c83e59f4145dea33ff66d559f72e08c11b9cf828", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-24T16:38:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494947924", "body": "Should TAs be allowed to update the categories or is this a task that only instructors should perform?", "bodyText": "Should TAs be allowed to update the categories or is this a task that only instructors should perform?", "bodyHTML": "<p dir=\"auto\">Should TAs be allowed to update the categories or is this a task that only instructors should perform?</p>", "author": "sleiss", "createdAt": "2020-09-25T12:18:10Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {", "originalCommit": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2ODI3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495268271", "bodyText": "At the moment test cases can be changed also by TA. As the categories will be changed in the same view, I've chosen to use the same settings.", "author": "kloessst", "createdAt": "2020-09-25T22:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 12de70231f..8c73adccf6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -95,7 +94,7 @@ public class StaticCodeAnalysisResource {\n             return badRequest();\n         }\n \n-        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+        if (!authCheckService.isAtLeastInstructorForExercise(programmingExercise)) {\n             return forbidden();\n         }\n \n", "next_change": {"commit": "cd4106917f5283659b889c36a47f82ad82d1a477", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 8c73adccf6..551187d217 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -83,18 +78,18 @@ public class StaticCodeAnalysisResource {\n      * @return the updated static code analysis categories\n      */\n     @PatchMapping(Endpoints.CATEGORIES)\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n     public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n             @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n         log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n \n-        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n \n         if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n             return badRequest();\n         }\n \n-        if (!authCheckService.isAtLeastInstructorForExercise(programmingExercise)) {\n+        if (!authCheckService.isAtLeastEditorForExercise(programmingExercise)) {\n             return forbidden();\n         }\n \n", "next_change": {"commit": "779a0fe55f9eb666ed98ad7b0efaae30c809af2f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 551187d217..603d0f7fa4 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -86,18 +83,12 @@ public class StaticCodeAnalysisResource {\n         ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n \n         if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-            return badRequest();\n+            throw new BadRequestAlertException(\"Static code analysis is not enabled\", ENTITY_NAME, \"staticCodeAnalysisNotEnabled\");\n         }\n \n-        if (!authCheckService.isAtLeastEditorForExercise(programmingExercise)) {\n-            return forbidden();\n-        }\n-\n-        var optionalError = validateCategories(categories, exerciseId);\n-        if (optionalError.isPresent()) {\n-            return optionalError.get();\n-        }\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n \n+        validateCategories(categories, exerciseId);\n         Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n         return ResponseEntity.ok(staticCodeAnalysisCategories);\n     }\n", "next_change": {"commit": "3d640be969162f1fa20291c6891fac8324873209", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 603d0f7fa4..7f4bfc483a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -96,7 +96,7 @@ public class StaticCodeAnalysisResource {\n     /**\n      * Reset the static code analysis categories of the given exercise to their default configuration.\n      *\n-     * @param exerciseId if of the exercise for which the categories should be reseted\n+     * @param exerciseId if of the exercise for which the categories should be reset\n      * @return static code analysis categories with the default configuration\n      */\n     @PatchMapping(Endpoints.RESET)\n", "next_change": {"commit": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 7f4bfc483a..97fc3bbbd5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -105,13 +99,46 @@ public class StaticCodeAnalysisResource {\n         log.debug(\"REST request to reset static code analysis categories for programming exercise {}\", exerciseId);\n \n         ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n+        checkSCAEnabledForExerciseElseThrow(programmingExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.resetCategories(programmingExercise);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n \n+    /**\n+     * PATCH /programming-exercises/:exerciseId/static-code-analysis-categories/import\n+     *\n+     * @param exerciseId       The exercise to copy the configuration into\n+     * @param sourceExerciseId The exercise to take the existing configuration from\n+     * @return The newly created SCA configuration\n+     * @see StaticCodeAnalysisService#importCategoriesFromExercise(ProgrammingExercise, ProgrammingExercise)\n+     */\n+    @PatchMapping(Endpoints.IMPORT)\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> importStaticCodeAnalysisCategoriesFromExercise(@PathVariable Long exerciseId, @RequestParam Long sourceExerciseId) {\n+        log.debug(\"REST request to import static code analysis categories to programming exercise {} from exercise {}\", exerciseId, sourceExerciseId);\n+\n+        ProgrammingExercise targetExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n+        checkSCAEnabledForExerciseElseThrow(targetExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, targetExercise, null);\n+\n+        ProgrammingExercise sourceExercise = programmingExerciseRepository.findByIdElseThrow(sourceExerciseId);\n+        checkSCAEnabledForExerciseElseThrow(sourceExercise);\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, sourceExercise, null);\n+\n+        if (targetExercise.getProgrammingLanguage() != sourceExercise.getProgrammingLanguage()) {\n+            throw new ConflictException(\"SCA configurations can only be imported from exercises with the same programming language\", ENTITY_NAME, \"programmingLanguageMismatch\");\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.importCategoriesFromExercise(sourceExercise, targetExercise);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    private void checkSCAEnabledForExerciseElseThrow(ProgrammingExercise programmingExercise) {\n         if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n             throw new BadRequestAlertException(\"Static code analysis is not enabled\", ENTITY_NAME, \"staticCodeAnalysisNotEnabled\");\n         }\n-        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n-        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.resetCategories(programmingExercise);\n-        return ResponseEntity.ok(staticCodeAnalysisCategories);\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "cd4106917f5283659b889c36a47f82ad82d1a477", "committedDate": "2021-05-07 16:20:14 +0200", "message": "Improve the editor role based on first feedback round (#3376)"}, {"oid": "779a0fe55f9eb666ed98ad7b0efaae30c809af2f", "committedDate": "2022-01-29 14:25:59 +0100", "message": "Development: Remove use of deprecated methods (#4637)"}, {"oid": "3d640be969162f1fa20291c6891fac8324873209", "committedDate": "2022-05-05 21:45:37 +0200", "message": "Development: Improve server code"}, {"oid": "1a0a647ffb7d70ade81bc4f2330e54a0163d904c", "committedDate": "2022-06-04 23:33:59 +0200", "message": "Development: Fix typos in code comments (#5007)"}, {"oid": "3027f6410004422fb275e8be79853616c3a86a2f", "committedDate": "2022-10-22 09:47:31 +0200", "message": "Development: Fix naming of programming exercise endpoints (#5523)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494953306", "body": "Just to make sure: The `@Transactional` annotation ensures that the imported SCA categories get saved into the DB although `programmingExerciseRepository.save(newExercise);` is only called before setting the categories, right?", "bodyText": "Just to make sure: The @Transactional annotation ensures that the imported SCA categories get saved into the DB although programmingExerciseRepository.save(newExercise); is only called before setting the categories, right?", "bodyHTML": "<p dir=\"auto\">Just to make sure: The <code>@Transactional</code> annotation ensures that the imported SCA categories get saved into the DB although <code>programmingExerciseRepository.save(newExercise);</code> is only called before setting the categories, right?</p>", "author": "sleiss", "createdAt": "2020-09-25T12:28:29Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "diffHunk": "@@ -89,10 +94,13 @@ public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExerc\n         setupTestRepository(newExercise, projectKey);\n         programmingExerciseService.initParticipations(newExercise);\n \n-        // Hints and test cases\n+        // Hints, test cases and static code analysis categories\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n+        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            importStaticCodeAnalysisCategories(templateExercise, newExercise);", "originalCommit": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3MzM5MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495273391", "bodyText": "I honestly don't know why we use a Transactional here. From a DB perspective, the table storing the programming exercise doesn't have information about the categories. The reference (exercise_id) resides in the category table as usual in a 1:n relationship. The importStaticCodeAnalysisCategories uses newExercise which already contains the exercise_id after programmingExerciseRepository.save(newExercise) was called to create new categories with the right relation.", "author": "kloessst", "createdAt": "2020-09-25T22:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\nindex 2688e43ed0..6ca3a8f959 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n", "chunk": "@@ -85,13 +95,10 @@ public class ProgrammingExerciseImportService {\n     public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExercise templateExercise, final ProgrammingExercise newExercise) {\n         // Set values we don't want to copy to null\n         setupExerciseForImport(newExercise);\n-        final var projectKey = newExercise.getProjectKey();\n-        final var templatePlanName = BuildPlanType.TEMPLATE.getName();\n-        final var solutionPlanName = BuildPlanType.SOLUTION.getName();\n \n-        programmingExerciseParticipationService.setupInitialSolutionParticipation(newExercise, projectKey, solutionPlanName);\n-        programmingExerciseParticipationService.setupInitalTemplateParticipation(newExercise, projectKey, templatePlanName);\n-        setupTestRepository(newExercise, projectKey);\n+        programmingExerciseParticipationService.setupInitialSolutionParticipation(newExercise);\n+        programmingExerciseParticipationService.setupInitalTemplateParticipation(newExercise);\n+        setupTestRepository(newExercise);\n         programmingExerciseService.initParticipations(newExercise);\n \n         // Hints, test cases and static code analysis categories\n", "next_change": {"commit": "8769ab8304cb5597a4df036dab57e60d0afb5107", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\nindex 6ca3a8f959..8a322dd51e 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n", "chunk": "@@ -105,9 +115,15 @@ public class ProgrammingExerciseImportService {\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n-        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+\n+        // Copy or create SCA categories\n+        if (Boolean.TRUE.equals(newExercise.isStaticCodeAnalysisEnabled() && Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled()))) {\n             importStaticCodeAnalysisCategories(templateExercise, newExercise);\n         }\n+        else if (Boolean.TRUE.equals(newExercise.isStaticCodeAnalysisEnabled()) && !Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            staticCodeAnalysisService.createDefaultCategories(newExercise);\n+        }\n+\n         // An exam exercise can only be in individual mode\n         if (!newExercise.hasCourse()) {\n             newExercise.setMode(ExerciseMode.INDIVIDUAL);\n", "next_change": {"commit": "14f1004d82b573aa72237aa21080d0a2d7c394d9", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\nindex 8a322dd51e..af4db349e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java\n", "chunk": "@@ -125,7 +127,7 @@ public class ProgrammingExerciseImportService {\n         }\n \n         // An exam exercise can only be in individual mode\n-        if (!newExercise.hasCourse()) {\n+        if (!newExercise.isCourseExercise()) {\n             newExercise.setMode(ExerciseMode.INDIVIDUAL);\n             newExercise.setTeamAssignmentConfig(null);\n         }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "48a81367f107824e04ba674aa6527c17f9723c21", "committedDate": "2020-10-08 20:59:04 +0200", "message": "improve code documentation of BitbucketBambooUpdateService"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "0e07f4c1de3745087881e9c3403c1d4f7d0cb7b5", "committedDate": "2020-10-24 22:20:49 +0200", "message": "Replace placeholders during import of Programming Exercise. (#2242)"}, {"oid": "80edddb1244053d1230acdc0290999e9d49778da", "committedDate": "2020-11-10 17:41:37 +0100", "message": "Move Jenkins build process to pipelines & make templates configurable. (#2306)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "ca9b376389b08036949e3ed9b3ee5fc94ec085a7", "committedDate": "2020-12-12 02:54:56 +0100", "message": "Fix combining template commits in Gitlab (#2499)"}, {"oid": "97fdaae27484a185fa06d17864a23473188ecde1", "committedDate": "2020-12-17 12:05:09 +0100", "message": "Make download repos for programming exercises more robust (#2550)"}, {"oid": "af8b44738df53e6881cc4e1d84173306add93d9a", "committedDate": "2020-12-29 16:53:07 +0100", "message": "Remove further uses of transactional in UserService, CustomAuditEventRepository and ComplaintService (#2605)"}, {"oid": "02e93e4eed509fd7fdcac3918f7f88e77adfdf60", "committedDate": "2020-12-31 15:39:39 +0100", "message": "Prepare 2nd correction in exams: database + client views (#2594)"}, {"oid": "cffe80054889b44b27c44682a9ae47d2e4eee69f", "committedDate": "2021-01-03 13:05:44 +0100", "message": "Add personal access token and ssh authentication against git repositories to the Artemis server (GitService: clone, pull, push, ...) (#2620)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "60faa22419ce564b4d44f0e404dd94b7796b216e", "committedDate": "2021-01-13 10:07:06 +0100", "message": "Update legacy template test files during programming exercise import and fix local repo deletion (#2675)"}, {"oid": "14f1004d82b573aa72237aa21080d0a2d7c394d9", "committedDate": "2021-01-18 13:52:41 +0100", "message": "Finish first iteration of the second exam correction feature (#2662)"}, {"oid": "3884ed328d4bf87428129222c0778010ac5f418d", "committedDate": "2021-01-25 22:39:35 +0100", "message": "Replace fork repository with copy Repository in version control service (#2722)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}]}, {"oid": "cf95d44dc783378ac3e5854dce89525dc7054f4f", "url": "https://github.com/ls1intum/Artemis/commit/cf95d44dc783378ac3e5854dce89525dc7054f4f", "message": "Merge develop", "committedDate": "2020-09-28T23:19:52Z", "type": "commit"}, {"oid": "fb5e2eaf5a44662241ea1834af78129137e8ae86", "url": "https://github.com/ls1intum/Artemis/commit/fb5e2eaf5a44662241ea1834af78129137e8ae86", "message": "Revert \"Merge develop\"\n\nThis reverts commit cf95d44d", "committedDate": "2020-09-28T23:25:46Z", "type": "commit"}, {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929", "url": "https://github.com/ls1intum/Artemis/commit/0655281d8f94c348d618c7aeefc8fa833c2bf929", "message": "Revert \"Revert \"Merge develop\"\"\n\nThis reverts commit fb5e2eaf5a44662241ea1834af78129137e8ae86, reversing\nchanges made to cf95d44dc783378ac3e5854dce89525dc7054f4f.", "committedDate": "2020-09-28T23:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMDEzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r496630135", "body": "move everything into the try block and catch the generic Exception so that this code can never break the application start", "bodyText": "move everything into the try block and catch the generic Exception so that this code can never break the application start", "bodyHTML": "<p dir=\"auto\">move everything into the try block and catch the generic Exception so that this code can never break the application start</p>", "author": "krusche", "createdAt": "2020-09-29T11:05:32Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+\n+/**\n+ * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n+ * programming language specific default categories.\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private final ResourceLoader resourceLoader;\n+\n+    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+\n+    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n+        this.resourceLoader = resourceLoader;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n+        Resource[] jsonConfigurations;\n+\n+        try {\n+            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n+        }\n+        catch (IOException e) {\n+            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n+            return;\n+        }\n+\n+        for (var jsonConfiguration : jsonConfigurations) {", "originalCommit": "0655281d8f94c348d618c7aeefc8fa833c2bf929", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8365245ea485bf44e73ab3b1c5b1c93143b057e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex c8f6377ca8..f9fb2899ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -11,80 +9,71 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n-import org.springframework.core.io.support.ResourcePatternUtils;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n \n /**\n- * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n- * programming language specific default categories.\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n  */\n @Configuration\n public class StaticCodeAnalysisConfigurer {\n \n     private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n \n-    private final ResourceLoader resourceLoader;\n-\n-    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n \n-    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n-        this.resourceLoader = resourceLoader;\n+    public StaticCodeAnalysisConfigurer() {\n     }\n \n     @PostConstruct\n     private void init() {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n-        Resource[] jsonConfigurations;\n-\n-        try {\n-            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n-        }\n-        catch (IOException e) {\n-            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n-            return;\n-        }\n-\n-        for (var jsonConfiguration : jsonConfigurations) {\n-            Optional<ProgrammingLanguage> optionalLanguage = getProgrammingLanguageFromFileName(jsonConfiguration.getFilename());\n-            if (optionalLanguage.isEmpty()) {\n-                log.debug(\"Could not determine programming language for file name \" + jsonConfiguration.getFilename());\n-                continue;\n-            }\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava());\n+        log.debug(\"Initialized default static code analysis categories for JAVA\");\n+    }\n \n-            // Catch possible errors here as well so that configurations for other programming languages can still be loaded\n-            try {\n-                StaticCodeAnalysisConfiguration configuration = objectMapper.readValue(jsonConfiguration.getFile(), StaticCodeAnalysisConfiguration.class);\n-                languageToConfiguration.put(optionalLanguage.get(), configuration);\n-            }\n-            catch (IOException e) {\n-                log.debug(\"Could not deserialize static code analysis configuration \" + jsonConfiguration.getFilename() + e);\n-            }\n-        }\n-        log.debug(\"Successfully initialized static code analysis configuration\");\n+    /**\n+     * Create an unmodifiable List of default static code analysis categories for Java\n+     *\n+     * @return unmodifiable static code analysis categories\n+     */\n+    private List<StaticCodeAnalysisDefaultCategory> createDefaultCategoriesForJava() {\n+        return List.of(\n+                new StaticCodeAnalysisDefaultCategory(\"Bad Practice\", 0.5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"BAD_PRACTICE\"), createMapping(StaticCodeAnalysisTool.PMD, \"Best-Practices\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Code Style\", 0.2D, 2D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"STYLE\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"blocks\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"coding\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"modifier\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Code-Style\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Potential Bugs\", 0.5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"CORRECTNESS\"), createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"MT_CORRECTNESS\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Error Prone\"), createMapping(StaticCodeAnalysisTool.PMD, \"Multithreading\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Security\", 2.5D, 10D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"MALICIOUS_CODE\"), createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"SECURITY\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Security\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Performance\", 1D, 2D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"PERFORMANCE\"), createMapping(StaticCodeAnalysisTool.PMD, \"Performance\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Design\", 5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"design\"), createMapping(StaticCodeAnalysisTool.PMD, \"Design\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Code Metrics\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"metrics\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"sizes\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Documentation\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"I18N\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"javadoc\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"annotation\"), createMapping(StaticCodeAnalysisTool.PMD, \"Documentation\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Naming & Formatting\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"imports\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"indentation\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"naming\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"whitespaces\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Miscellaneous\", 0D, 0D, CategoryState.INACTIVE, List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"miscellaneous\"))));\n     }\n \n     @Bean(name = \"staticCodeAnalysisConfiguration\")\n-    public Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> staticCodeAnalysisConfiguration() {\n-        return languageToConfiguration;\n+    public Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisConfiguration() {\n+        return languageToDefaultCategories;\n     }\n \n-    private Optional<ProgrammingLanguage> getProgrammingLanguageFromFileName(String fileName) {\n-        if (fileName == null || fileName.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        for (var language : ProgrammingLanguage.values()) {\n-            if (fileName.toLowerCase().contains(language.toString().toLowerCase())) {\n-                return Optional.of(language);\n-            }\n-        }\n-        return Optional.empty();\n+    private StaticCodeAnalysisDefaultCategory.CategoryMapping createMapping(StaticCodeAnalysisTool tool, String category) {\n+        return new StaticCodeAnalysisDefaultCategory.CategoryMapping(tool, category);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex c8f6377ca8..f9fb2899ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -11,80 +9,71 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n-import org.springframework.core.io.support.ResourcePatternUtils;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n \n /**\n- * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n- * programming language specific default categories.\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n  */\n @Configuration\n public class StaticCodeAnalysisConfigurer {\n \n     private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n \n-    private final ResourceLoader resourceLoader;\n-\n-    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n \n-    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n-        this.resourceLoader = resourceLoader;\n+    public StaticCodeAnalysisConfigurer() {\n     }\n \n     @PostConstruct\n     private void init() {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n-        Resource[] jsonConfigurations;\n-\n-        try {\n-            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n-        }\n-        catch (IOException e) {\n-            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n-            return;\n-        }\n-\n-        for (var jsonConfiguration : jsonConfigurations) {\n-            Optional<ProgrammingLanguage> optionalLanguage = getProgrammingLanguageFromFileName(jsonConfiguration.getFilename());\n-            if (optionalLanguage.isEmpty()) {\n-                log.debug(\"Could not determine programming language for file name \" + jsonConfiguration.getFilename());\n-                continue;\n-            }\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava());\n+        log.debug(\"Initialized default static code analysis categories for JAVA\");\n+    }\n \n-            // Catch possible errors here as well so that configurations for other programming languages can still be loaded\n-            try {\n-                StaticCodeAnalysisConfiguration configuration = objectMapper.readValue(jsonConfiguration.getFile(), StaticCodeAnalysisConfiguration.class);\n-                languageToConfiguration.put(optionalLanguage.get(), configuration);\n-            }\n-            catch (IOException e) {\n-                log.debug(\"Could not deserialize static code analysis configuration \" + jsonConfiguration.getFilename() + e);\n-            }\n-        }\n-        log.debug(\"Successfully initialized static code analysis configuration\");\n+    /**\n+     * Create an unmodifiable List of default static code analysis categories for Java\n+     *\n+     * @return unmodifiable static code analysis categories\n+     */\n+    private List<StaticCodeAnalysisDefaultCategory> createDefaultCategoriesForJava() {\n+        return List.of(\n+                new StaticCodeAnalysisDefaultCategory(\"Bad Practice\", 0.5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"BAD_PRACTICE\"), createMapping(StaticCodeAnalysisTool.PMD, \"Best-Practices\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Code Style\", 0.2D, 2D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"STYLE\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"blocks\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"coding\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"modifier\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Code-Style\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Potential Bugs\", 0.5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"CORRECTNESS\"), createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"MT_CORRECTNESS\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Error Prone\"), createMapping(StaticCodeAnalysisTool.PMD, \"Multithreading\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Security\", 2.5D, 10D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"MALICIOUS_CODE\"), createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"SECURITY\"),\n+                                createMapping(StaticCodeAnalysisTool.PMD, \"Security\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Performance\", 1D, 2D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"PERFORMANCE\"), createMapping(StaticCodeAnalysisTool.PMD, \"Performance\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Design\", 5D, 5D, CategoryState.VISIBLE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"design\"), createMapping(StaticCodeAnalysisTool.PMD, \"Design\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Code Metrics\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"metrics\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"sizes\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Documentation\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.SPOTBUGS, \"I18N\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"javadoc\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"annotation\"), createMapping(StaticCodeAnalysisTool.PMD, \"Documentation\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Naming & Formatting\", 0D, 0D, CategoryState.INACTIVE,\n+                        List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"imports\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"indentation\"),\n+                                createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"naming\"), createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"whitespaces\"))),\n+                new StaticCodeAnalysisDefaultCategory(\"Miscellaneous\", 0D, 0D, CategoryState.INACTIVE, List.of(createMapping(StaticCodeAnalysisTool.CHECKSTYLE, \"miscellaneous\"))));\n     }\n \n     @Bean(name = \"staticCodeAnalysisConfiguration\")\n-    public Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> staticCodeAnalysisConfiguration() {\n-        return languageToConfiguration;\n+    public Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisConfiguration() {\n+        return languageToDefaultCategories;\n     }\n \n-    private Optional<ProgrammingLanguage> getProgrammingLanguageFromFileName(String fileName) {\n-        if (fileName == null || fileName.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        for (var language : ProgrammingLanguage.values()) {\n-            if (fileName.toLowerCase().contains(language.toString().toLowerCase())) {\n-                return Optional.of(language);\n-            }\n-        }\n-        return Optional.empty();\n+    private StaticCodeAnalysisDefaultCategory.CategoryMapping createMapping(StaticCodeAnalysisTool tool, String category) {\n+        return new StaticCodeAnalysisDefaultCategory.CategoryMapping(tool, category);\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "07f908c138467189727b476009e52a247517307a", "committedDate": "2020-11-06 00:19:08 +0100", "message": "Support for static code analysis copy and paste detection using PMD (#2292)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "c11d2a2093bebe4ff6c73e9479433c2858d4702e", "committedDate": "2021-06-30 21:44:47 +0200", "message": "Add static analysis tools to misc category (#3629)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}]}, {"oid": "fe2d7af1de31a3212501215fee08f78b040adffd", "url": "https://github.com/ls1intum/Artemis/commit/fe2d7af1de31a3212501215fee08f78b040adffd", "message": "Merge remote-tracking branch 'origin/codeql-analysis' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\t.github/workflows/codeql-analysis.yml", "committedDate": "2020-09-29T16:26:45Z", "type": "commit"}, {"oid": "c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "url": "https://github.com/ls1intum/Artemis/commit/c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/enumeration/StaticCodeAnalysisTool.java\n#\tsrc/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "committedDate": "2020-09-29T16:31:45Z", "type": "commit"}, {"oid": "bd3009cb8b8b5d963cf119d030777641a61d4077", "url": "https://github.com/ls1intum/Artemis/commit/bd3009cb8b8b5d963cf119d030777641a61d4077", "message": "Add missing import", "committedDate": "2020-09-29T16:34:40Z", "type": "commit"}, {"oid": "b8365245ea485bf44e73ab3b1c5b1c93143b057e", "url": "https://github.com/ls1intum/Artemis/commit/b8365245ea485bf44e73ab3b1c5b1c93143b057e", "message": "Hard code categories in Java", "committedDate": "2020-09-29T23:07:53Z", "type": "commit"}, {"oid": "27de7a4506ad4ee043674fd029781d61b2ea43b3", "url": "https://github.com/ls1intum/Artemis/commit/27de7a4506ad4ee043674fd029781d61b2ea43b3", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-29T23:12:46Z", "type": "commit"}, {"oid": "9434946f4463cac11511f234a186cac84bc85526", "url": "https://github.com/ls1intum/Artemis/commit/9434946f4463cac11511f234a186cac84bc85526", "message": "Fix bean type", "committedDate": "2020-09-29T23:18:26Z", "type": "commit"}, {"oid": "b29803bffcc0333882e3ed292edb6363edacc1ba", "url": "https://github.com/ls1intum/Artemis/commit/b29803bffcc0333882e3ed292edb6363edacc1ba", "message": "Fix bean type for tests", "committedDate": "2020-09-29T23:21:41Z", "type": "commit"}, {"oid": "d403d0f10b3b2335835c596f39a953109215f832", "url": "https://github.com/ls1intum/Artemis/commit/d403d0f10b3b2335835c596f39a953109215f832", "message": "Remove json file", "committedDate": "2020-09-30T00:20:20Z", "type": "commit"}, {"oid": "7343689f90d0cd90e36c4a668038aeb9527f4612", "url": "https://github.com/ls1intum/Artemis/commit/7343689f90d0cd90e36c4a668038aeb9527f4612", "message": "Revert code-ql change", "committedDate": "2020-09-30T00:28:26Z", "type": "commit"}, {"oid": "f484f63211f802420b40308455ef935db2de2156", "url": "https://github.com/ls1intum/Artemis/commit/f484f63211f802420b40308455ef935db2de2156", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/webapp/app/entities/programming-exercise.model.ts", "committedDate": "2020-10-01T12:14:08Z", "type": "commit"}, {"oid": "18d83c443d250e9bbf8469a65bc559be1ac1670e", "url": "https://github.com/ls1intum/Artemis/commit/18d83c443d250e9bbf8469a65bc559be1ac1670e", "message": "Move away from null types", "committedDate": "2020-10-01T12:17:06Z", "type": "commit"}, {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "url": "https://github.com/ls1intum/Artemis/commit/d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "message": "Improve max penalty field explanation", "committedDate": "2020-10-02T00:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwMw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568503", "body": "Codacy found an issue: [The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:50Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -146,6 +184,51 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importExercise_created() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex c141b517de..03c12140fa 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -184,17 +211,22 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importExercise_created() throws Exception {\n+    public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {\n+        boolean staticCodeAnalysisEnabled = programmingLanguage == ProgrammingLanguage.JAVA;\n         // Setup exercises for import\n         ProgrammingExercise sourceExercise = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        sourceExercise.setProgrammingLanguage(programmingLanguage);\n+        sourceExercise.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n         database.addTestCasesToProgrammingExercise(sourceExercise);\n         database.addHintsToExercise(sourceExercise);\n         database.addHintsToProblemStatement(sourceExercise);\n         sourceExercise = database.loadProgrammingExerciseWithEagerReferences(sourceExercise);\n         ProgrammingExercise exerciseToBeImported = ModelFactory.generateToBeImportedProgrammingExercise(\"ImportTitle\", \"imported\", sourceExercise, database.addEmptyCourse());\n-\n+        exerciseToBeImported.setProgrammingLanguage(programmingLanguage);\n+        exerciseToBeImported.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n         // Mock requests\n         List<Verifiable> verifiables = mockConnectorRequestsForImport(sourceExercise, exerciseToBeImported);\n         setupRepositoryMocks(exerciseToBeImported, exerciseRepo, solutionRepo, testRepo);\n", "next_change": {"commit": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 03c12140fa..9e436793d5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -1,534 +1,133 @@\n package de.tum.in.www1.artemis.programmingexercise;\n \n-import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n-import static org.assertj.core.api.Assertions.assertThat;\n+import static de.tum.in.www1.artemis.util.ProgrammingExerciseTestService.studentLogin;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n-import org.eclipse.jgit.api.Git;\n-import org.eclipse.jgit.diff.DiffEntry;\n-import org.eclipse.jgit.lib.ObjectReader;\n-import org.eclipse.jgit.lib.Repository;\n-import org.eclipse.jgit.revwalk.RevCommit;\n-import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.EnumSource;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.test.context.support.WithMockUser;\n \n import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n-import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n-import de.tum.in.www1.artemis.repository.CourseRepository;\n-import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n-import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n-import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n-import de.tum.in.www1.artemis.security.SecurityUtils;\n-import de.tum.in.www1.artemis.service.ParticipationService;\n-import de.tum.in.www1.artemis.service.TeamService;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n-import de.tum.in.www1.artemis.util.*;\n-import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+import de.tum.in.www1.artemis.util.ProgrammingExerciseTestService;\n \n public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n     @Autowired\n-    private RequestUtilService request;\n-\n-    @Autowired\n-    private ProgrammingExerciseRepository programmingExerciseRepository;\n-\n-    @Autowired\n-    private TeamService teamService;\n-\n-    @Autowired\n-    private UserRepository userRepo;\n-\n-    @Autowired\n-    private CourseRepository courseRepository;\n-\n-    @Autowired\n-    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n-\n-    @Autowired\n-    private ParticipationService participationService;\n-\n-    @Autowired\n-    @Qualifier(\"staticCodeAnalysisConfiguration\")\n-    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n-\n-    private Course course;\n-\n-    private ExerciseGroup exerciseGroup;\n-\n-    private ProgrammingExercise exercise;\n-\n-    private ProgrammingExercise examExercise;\n-\n-    private final static int numberOfStudents = 2;\n-\n-    private final static String studentLogin = \"student1\";\n-\n-    private final static String teamShortName = \"team1\";\n-\n-    private final static String REPOBASEURL = \"/api/repository/\";\n-\n-    private final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n-\n-    LocalRepository exerciseRepo = new LocalRepository();\n-\n-    LocalRepository testRepo = new LocalRepository();\n-\n-    LocalRepository solutionRepo = new LocalRepository();\n-\n-    LocalRepository studentRepo = new LocalRepository();\n-\n-    LocalRepository studentTeamRepo = new LocalRepository();\n+    private ProgrammingExerciseTestService programmingExerciseTestService;\n \n     @BeforeEach\n     public void setup() throws Exception {\n-        database.addUsers(numberOfStudents, 1, 1);\n-        course = database.addEmptyCourse();\n-        exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n-        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n-        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n-        bambooRequestMockProvider.enableMockingOfRequests();\n-        bitbucketRequestMockProvider.enableMockingOfRequests();\n-\n-        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n-        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n-        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n-        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n-        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n-\n-        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n-        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n-        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+        programmingExerciseTestService.setupTestUsers(0, 0, 0);\n+        programmingExerciseTestService.setup(this, versionControlService, continuousIntegrationService);\n+        bambooRequestMockProvider.enableMockingOfRequests(true);\n+        bitbucketRequestMockProvider.enableMockingOfRequests(true);\n     }\n \n     @AfterEach\n     public void tearDown() throws IOException {\n-        database.resetDatabase();\n+        programmingExerciseTestService.tearDown();\n         bitbucketRequestMockProvider.reset();\n         bambooRequestMockProvider.reset();\n-        exerciseRepo.resetLocalRepo();\n-        testRepo.resetLocalRepo();\n-        solutionRepo.resetLocalRepo();\n-        studentRepo.resetLocalRepo();\n-        studentTeamRepo.resetLocalRepo();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n-        exercise.setSequentialTestRuns(true);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+        programmingExerciseTestService.createProgrammingExercise_sequential_validExercise_created();\n     }\n \n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n-        exercise.setMode(mode);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+        programmingExerciseTestService.createProgrammingExercise_mode_validExercise_created(mode);\n     }\n \n     @ParameterizedTest\n     @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {\n-        exercise.setProgrammingLanguage(language);\n-        mockConnectorRequestsForSetup(exercise);\n-        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n-    }\n-\n-    private void validateProgrammingExercise(ProgrammingExercise generatedExercise) {\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExercise_programmingLanguage_validExercise_created(language);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n-        exercise.setBonusPoints(null);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n-        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n-        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_bonusPointsIsNull();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {\n-        exercise.setStaticCodeAnalysisEnabled(true);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        var staticCodeAnalysisCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(generatedExercise.getId());\n-        assertThat(staticCodeAnalysisCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .isEqualTo(staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()));\n-        staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()).forEach(config -> {\n-            config.getCategoryMappings().forEach(mapping -> {\n-                assertThat(mapping.getTool()).isNotNull();\n-                assertThat(mapping.getCategory()).isNotNull();\n-            });\n-        });\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_withStaticCodeAnalysis();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExerciseForExam_validExercise_created() throws Exception {\n-        setupRepositoryMocks(examExercise, exerciseRepo, solutionRepo, testRepo);\n-\n-        mockConnectorRequestsForSetup(examExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, examExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        examExercise.setId(generatedExercise.getId());\n-        assertThat(examExercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExerciseForExam_validExercise_created();\n     }\n \n     @ParameterizedTest\n     @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {\n-        boolean staticCodeAnalysisEnabled = programmingLanguage == ProgrammingLanguage.JAVA;\n-        // Setup exercises for import\n-        ProgrammingExercise sourceExercise = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n-        sourceExercise.setProgrammingLanguage(programmingLanguage);\n-        sourceExercise.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n-        database.addTestCasesToProgrammingExercise(sourceExercise);\n-        database.addHintsToExercise(sourceExercise);\n-        database.addHintsToProblemStatement(sourceExercise);\n-        sourceExercise = database.loadProgrammingExerciseWithEagerReferences(sourceExercise);\n-        ProgrammingExercise exerciseToBeImported = ModelFactory.generateToBeImportedProgrammingExercise(\"ImportTitle\", \"imported\", sourceExercise, database.addEmptyCourse());\n-        exerciseToBeImported.setProgrammingLanguage(programmingLanguage);\n-        exerciseToBeImported.setStaticCodeAnalysisEnabled(staticCodeAnalysisEnabled);\n-        // Mock requests\n-        List<Verifiable> verifiables = mockConnectorRequestsForImport(sourceExercise, exerciseToBeImported);\n-        setupRepositoryMocks(exerciseToBeImported, exerciseRepo, solutionRepo, testRepo);\n-\n-        // Import the exercise and load all referenced entities\n-        var importedExercise = request.postWithResponseBody(ROOT + IMPORT.replace(\"{sourceExerciseId}\", sourceExercise.getId().toString()), exerciseToBeImported,\n-                ProgrammingExercise.class, HttpStatus.OK);\n-        SecurityUtils.setAuthorizationObject();\n-        importedExercise = database.loadProgrammingExerciseWithEagerReferences(importedExercise);\n-\n-        // Assert correct creation of repos and plans\n-        for (var verifiable : verifiables) {\n-            verifiable.performVerification();\n-        }\n-        if (staticCodeAnalysisEnabled) {\n-            // Assert correct creation of static code analysis categories\n-            var importedCategoryIds = importedExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-            var sourceCategoryIds = sourceExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-            assertThat(importedCategoryIds).doesNotContainAnyElementsOf(sourceCategoryIds);\n-            assertThat(importedExercise.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                    .containsExactlyInAnyOrderElementsOf(sourceExercise.getStaticCodeAnalysisCategories());\n-        }\n-\n-        // Assert correct creation of test cases\n-        var importedTestCaseIds = importedExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        var sourceTestCaseIds = sourceExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        assertThat(importedTestCaseIds).doesNotContainAnyElementsOf(sourceTestCaseIds);\n-        assertThat(importedExercise.getTestCases()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getTestCases());\n-\n-        // Assert correct creation of hints\n-        var importedHintIds = importedExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        var sourceHintIds = sourceExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        assertThat(importedHintIds).doesNotContainAnyElementsOf(sourceHintIds);\n-        assertThat(importedExercise.getExerciseHints()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getExerciseHints());\n+        programmingExerciseTestService.importExercise_created(programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_structureOracle() throws Exception {\n-        structureOracle(exercise);\n-    }\n-\n-    private void structureOracle(ProgrammingExercise programmingExercise) throws Exception {\n-        mockConnectorRequestsForSetup(programmingExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, programmingExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-        String response = request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", String.valueOf(generatedExercise.getId())), generatedExercise, String.class,\n-                HttpStatus.OK);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n-\n-        List<RevCommit> testRepoCommits = testRepo.getAllLocalCommits();\n-        assertThat(testRepoCommits.size()).isEqualTo(2);\n-\n-        assertThat(testRepoCommits.get(0).getFullMessage()).isEqualTo(\"Update the structure oracle file.\");\n-        List<DiffEntry> changes = getChanges(testRepo.localGit.getRepository(), testRepoCommits.get(0));\n-        assertThat(changes.size()).isEqualTo(1);\n-        assertThat(changes.get(0).getChangeType()).isEqualTo(DiffEntry.ChangeType.MODIFY);\n-        assertThat(changes.get(0).getOldPath()).endsWith(\"test.json\");\n-\n-        // Second time leads to a bad request because the file did not change\n-        var expectedHeaders = new HashMap<String, String>();\n-        expectedHeaders.put(\"X-artemisApp-alert\", \"Did not update the oracle because there have not been any changes to it.\");\n-        request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", String.valueOf(generatedExercise.getId())), generatedExercise, String.class,\n-                HttpStatus.BAD_REQUEST, expectedHeaders);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_structureOracle();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_noTutors_created() throws Exception {\n-        course.setTeachingAssistantGroupName(null);\n-        courseRepository.save(course);\n-        mockConnectorRequestsForSetup(exercise);\n-\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        validateProgrammingExercise(generatedExercise);\n+        programmingExerciseTestService.createProgrammingExercise_noTutors_created();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_student_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-        final var path = ParticipationResource.Endpoints.ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId()))\n-                .replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n+        programmingExerciseTestService.startProgrammingExercise_student_correctInitializationState();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_team_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // create a team for the user (necessary condition before starting an exercise)\n-        Set<User> students = Set.of(userRepo.findOneByLogin(studentLogin).get());\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n-\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-        final var path = ParticipationResource.Endpoints.ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId()))\n-                .replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-    }\n-\n-    private Course getCourseForExercise() {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-        return course;\n-    }\n-\n-    private ProgrammingExerciseStudentParticipation createUserParticipation(Course course) throws Exception {\n-        final var path = ROOT + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", String.valueOf(course.getId())).replace(\"{exerciseId}\",\n-                String.valueOf(exercise.getId()));\n-        return request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n+        programmingExerciseTestService.startProgrammingExercise_team_correctInitializationState();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExerciseStudentSubmissionFailedWithBuildlog() throws Exception {\n-        final var course = getCourseForExercise();\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-        final var participation = createUserParticipation(course);\n-\n-        // create a submission which fails\n-        database.createProgrammingSubmission(participation, true);\n-\n-        bambooRequestMockProvider.reset();\n-\n-        var log1 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"java.lang.AssertionError: BubbleSort does not sort correctly\");\n-        var log2 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Test\");\n-        var log3 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[WARNING]\");\n-        var log4 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] [Help 1]\");\n-        var log5 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] To see the full stack trace of the errors\\\"\");\n-        var log6 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"Unable to publish artifact\");\n-        var log7 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"NOTE: Picked up JDK_JAVA_OPTIONS\");\n-        var log8 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin\");\n-        var log9 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Downloading error\");\n-        var log10 = new BambooBuildResultDTO.BambooBuildLogEntryDTO(ZonedDateTime.now(), \"[INFO] Downloaded error\");\n-\n-        // get the failed build log\n-        bambooRequestMockProvider.mockGetBuildLogs(participation.getBuildPlanId(), List.of(log1, log2, log3, log4, log5, log6, log7, log8, log9, log10));\n-        var buildLogs = request.get(REPOBASEURL + participation.getId() + \"/buildlogs\", HttpStatus.OK, List.class);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-        // some build logs have been filtered out\n-        assertThat(buildLogs.size()).as(\"Failed build log was created\").isEqualTo(1);\n+        programmingExerciseTestService.startProgrammingExerciseStudentSubmissionFailedWithBuildlog();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExerciseStudentRetrieveEmptyArtifactPage() throws Exception {\n-        final var course = getCourseForExercise();\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-\n-        final var participation = createUserParticipation(course);\n-\n-        // create a submission\n-        database.createProgrammingSubmission(participation, false);\n-\n-        bambooRequestMockProvider.reset();\n-\n-        // prepare the build result\n-        bambooRequestMockProvider.mockQueryLatestBuildResultFromBambooServer(participation.getBuildPlanId());\n-        // prepare the artifact to be null\n-        bambooRequestMockProvider.mockRetrieveEmptyArtifactPage();\n-\n-        var artifact = request.get(PARTICIPATIONBASEURL + participation.getId() + \"/buildArtifact\", HttpStatus.OK, byte[].class);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n-        assertThat(artifact).as(\"No build artifact available for this plan\").isEmpty();\n+        programmingExerciseTestService.startProgrammingExerciseStudentRetrieveEmptyArtifactPage();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsAdded_whenStudentIsAddedToTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Add a new student to the team\n-        User newStudent = ModelFactory.generateActivatedUsers(\"new-student\", new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n-        newStudent = userRepo.save(newStudent);\n-        team.addStudents(newStudent);\n-\n-        // Mock repository write permission give call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockGiveWritePermission(exercise, repositorySlug, newStudent.getLogin());\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with new student after participation has already started\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents + 1); // new student was added\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsAdded_whenStudentIsAddedToTeam();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Remove the first student from the team\n-        User firstStudent = students.iterator().next();\n-        team.removeStudents(firstStudent);\n-\n-        // Mock repository access removal call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockRemoveMemberFromRepository(repositorySlug, exercise.getProjectKey(), firstStudent);\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with removed student\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents - 1); // first student was removed\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n-    public List<DiffEntry> getChanges(Repository repository, RevCommit commit) throws Exception {\n-\n-        try (ObjectReader reader = repository.newObjectReader()) {\n-            CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();\n-            oldTreeIter.reset(reader, commit.getParents()[0].getTree());\n-            CanonicalTreeParser newTreeIter = new CanonicalTreeParser();\n-            newTreeIter.reset(reader, commit.getTree());\n-\n-            // finally get the list of changed files\n-            try (Git git = new Git(repository)) {\n-                List<DiffEntry> diffs = git.diff().setNewTree(newTreeIter).setOldTree(oldTreeIter).call();\n-                for (DiffEntry entry : diffs) {\n-                    System.out.println(\"Entry: \" + entry);\n-                }\n-                return diffs;\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 9e436793d5..1a59d00f1c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -130,4 +132,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToIndividual() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_individual_modeChange();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n+    }\n+\n }\n", "next_change": {"commit": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 1a59d00f1c..e3f24753d3 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -144,4 +149,34 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    }\n+\n }\n", "next_change": {"commit": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex e3f24753d3..2c9a27011c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -157,26 +234,31 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testInternalServerError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    public void copyRepository_testNotCreatedError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testNotCreatedError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testConflictError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testConflictError();\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void configureRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    public void exportInstructorRepositories() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void exportInstructorRepositories_forbidden() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_forbidden();\n+    }\n }\n", "next_change": {"commit": "d20e93b929bb5181b2457029b19a9751a8a2c660", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 2c9a27011c..dbe9ab1690 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -261,4 +261,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+        programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n+    }\n }\n", "next_change": {"commit": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex dbe9ab1690..adbafa8f20 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -267,4 +279,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+        programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n+    }\n }\n", "next_change": {"commit": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex adbafa8f20..402a3f96e0 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -285,4 +284,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+        programmingExerciseTestService.automaticCleanupBuildPlans();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanupGitRepositories() {\n+        programmingExerciseTestService.automaticCleanupGitRepositories();\n+    }\n }\n", "next_change": {"commit": "3d351b700a6026d776b94881310e3fb2c26dcad2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 402a3f96e0..b7a6a3bf6b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -296,4 +376,29 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+        programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n+    }\n+\n }\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex b7a6a3bf6b..137c3c3b54 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -299,105 +310,117 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories() throws Exception {\n+    void exportInstructorRepositories() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories_forbidden() throws Exception {\n+    void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterial() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterial() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+    void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n         doThrow(IOException.class).when(zipFileService).createZipFile(any(Path.class), any(), eq(false));\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n         doThrow(GitException.class).when(fileService).getUniquePathString(anyString());\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationInterruptException() throws Exception {\n-        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationInterruptException();\n+    void testExportCourseCannotExportSingleParticipationCanceledException() throws Exception {\n+        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationCanceledException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n+    void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitApiException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotSingleParticipationGitException() throws Exception {\n+    void testExportCourseCannotSingleParticipationGitException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+    void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+    void testAutomaticCleanUpBuildPlans() throws Exception {\n         programmingExerciseTestService.automaticCleanupBuildPlans();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanupGitRepositories() {\n+    void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+    void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n+    }\n+\n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+    void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n", "next_change": {"commit": "593283a9b50a476824af052f7e3aae139262c297", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 137c3c3b54..8367aaac9b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -424,4 +424,22 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    void testBuildLogStatistics_unauthorized() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_unauthorized();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics_noStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_noStatistics();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics();\n+    }\n+\n }\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 8367aaac9b..3cce636459 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -389,57 +378,63 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, TEST_PREFIX + \"student1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, TEST_PREFIX + \"instructor1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testBuildLogStatistics_unauthorized() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_unauthorized();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics_noStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_noStatistics();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics();\n     }\n \n+    private void mockUsers(int amount, String name) throws URISyntaxException {\n+        for (int i = 1; i <= amount; i++) {\n+            bitbucketRequestMockProvider.mockUserExists(TEST_PREFIX + name + i);\n+        }\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "1a170878e8035a043b61ef473ee558af541f3d8a", "committedDate": "2020-10-06 11:45:07 +0200", "message": "Replace Adding Empty Strings by String.valueOf (#2161)"}, {"oid": "72a79dfcaa482c992ac7b05e232ef62ce933f0d3", "committedDate": "2020-10-11 15:51:13 +0200", "message": "Improve test coverage BambooService (#2187)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "67dcd41fa289bf308919b73f6275da293679c914", "committedDate": "2020-10-18 21:11:21 +0200", "message": "fix flaky test and improve caching behavior of application links for concurrent operations"}, {"oid": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "committedDate": "2020-10-20 17:25:04 +0200", "message": "Improve server side git url handling and server test improvements (#2237)"}, {"oid": "908c3e88910aa014ee7565bd95ea71536593bd5f", "committedDate": "2020-10-23 13:33:11 +0200", "message": "add Swift as programming language enum to prevent problems when testing #2191"}, {"oid": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "committedDate": "2020-10-27 22:54:21 +0100", "message": "Change team mode on exercise import. (#2268)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "committedDate": "2020-10-29 21:04:54 +0100", "message": "Consistently use DTOs in Jira/Bitbucket/BambooService and improve test coverage in BitbucketService (#2247)"}, {"oid": "d8027bf77bb83ee2ca1275af81b291616f18f1c0", "committedDate": "2020-11-10 08:43:00 +0100", "message": "Add template for Swift programming exercises (#2326)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "d707cd721936372faa92073fb1e3b560d7ff9689", "committedDate": "2021-01-02 17:06:49 +0100", "message": "Add server integration tests for resume programming exercise (#2614)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "3884ed328d4bf87428129222c0778010ac5f418d", "committedDate": "2021-01-25 22:39:35 +0100", "message": "Replace fork repository with copy Repository in version control service (#2722)"}, {"oid": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "committedDate": "2021-01-28 15:14:44 +0100", "message": "add clone & download repo button in programming details view  (#2729)"}, {"oid": "d20e93b929bb5181b2457029b19a9751a8a2c660", "committedDate": "2021-02-10 14:01:58 +0100", "message": "Add options to archive and cleanup a course (#2813)"}, {"oid": "54601dde775f25f8c20f8acc5f867e68d65af18a", "committedDate": "2021-03-16 20:27:03 +0100", "message": "Improve server test coverage for Gitlab, Jenkins, Bamboo (#3024)"}, {"oid": "fceeaef9fa01fe6daa9a2b221597634d2d2f9f2a", "committedDate": "2021-03-26 18:13:24 +0100", "message": "Reduce server service dependencies (#3079)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "committedDate": "2021-04-09 19:30:21 +0200", "message": "Improve download archive server tests (#3127)"}, {"oid": "68254adc6d02c035fa47f931855012a722df727c", "committedDate": "2021-04-19 12:43:44 +0200", "message": "Add Kotlin pipeline to Jenkins & Sequential Test Run support (#3189)"}, {"oid": "4843137aa01cfdf27ea019400c48df00df36ed45", "committedDate": "2021-04-26 11:23:38 +0200", "message": "Please avoid the use of additional SpyBeans in your server integration tests!"}, {"oid": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "committedDate": "2021-04-27 14:00:15 +0200", "message": "Improve automatic cleanup service, add configuration options batch size and waiting time for external requests (#3298)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "7e0bf653a47ce25a2df0e200590e021d235cc511", "committedDate": "2021-05-14 15:07:16 +0200", "message": "Allow instructors to export programming exercises (repos, problem statement, details) (#3273)"}, {"oid": "f7d4291d3934ce04aa12049e64be25175f0b1505", "committedDate": "2021-06-09 11:37:16 +0200", "message": "Auxiliary Repositories for Programming Exercises (#3457)"}, {"oid": "014643092dc0a504f4602beff6847b8eed0fd156", "committedDate": "2021-06-11 08:40:26 +0200", "message": "Fix course archival issues (#3549)"}, {"oid": "2176e2d2baf21354a96c3692437b315a9dee252b", "committedDate": "2021-06-25 16:13:24 +0200", "message": "Allow to configure the default branch directly in Artemis (#2844)"}, {"oid": "8863908136239c7570bcfa34e254737ad8ffdf9b", "committedDate": "2021-07-27 10:14:09 +0200", "message": "Improve server test coverage for programming exercise services (#3831)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "7ad5853f5715ebe6a0c997da9890babf140da873", "committedDate": "2021-11-22 14:28:35 +0100", "message": "Exam mode: Reject exam exercises with date attributes set (#3926)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "f8d07e2175a6587d7d242404bb218fe775226097", "committedDate": "2022-01-05 09:13:11 +0100", "message": "Development: Remove outdated client dependencies (#4571)"}, {"oid": "a535522dcce93a5c6cd243f3c189b350fda28396", "committedDate": "2022-03-11 11:11:40 +0100", "message": "General: Forward changes to internal users to Bitbucket (#4644)"}, {"oid": "6ee62b7a7cd7540e862c6f53d14b34bf137a550b", "committedDate": "2022-03-24 20:03:46 +0100", "message": "Programming exercises: Change default branch from master to main (#4833)"}, {"oid": "3d351b700a6026d776b94881310e3fb2c26dcad2", "committedDate": "2022-04-14 18:09:17 +0200", "message": "Programming exercises: Allow to publish example solutions for programming exercises on a specific date (#4795)"}, {"oid": "72dc554091906333e3bf81843edcd69fa0e1c8b3", "committedDate": "2022-04-14 23:40:34 +0200", "message": "Development: Refactor Git service (#4837)"}, {"oid": "f3d56f363e27262b8c4013d068f44ed3c82071c7", "committedDate": "2022-05-26 18:50:53 -0400", "message": "Development: Validate example solution publication date (#4983)"}, {"oid": "a7c414b09dc7721d8ec859a6e28b90b4876faf81", "committedDate": "2022-06-23 14:22:12 +0200", "message": "Programming exercises: Fix an issue with excess submissions with Gitlab (#5258)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "593283a9b50a476824af052f7e3aae139262c297", "committedDate": "2022-09-23 10:25:28 +0200", "message": "Programming exercises: Add build log analytics (#5337)"}, {"oid": "fa2f71d8d5da908f447f6064941d734279dae43b", "committedDate": "2022-12-02 14:49:51 +0100", "message": "Programming exercises: Allow students to download tests after due date (#5762)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "598249d89dc3b4c6ac0f76cf63c0c3ae9b285115", "committedDate": "2023-01-05 11:40:40 +0100", "message": "Exam mode: Allow instructors to publish example solutions for exam exercises (#5831)"}, {"oid": "cc924340826eee8bae263c4c3a763724e9b94d77", "committedDate": "2023-01-21 21:31:32 +0100", "message": "Programming exercises: Always give students read permissions for their repository (#5901)"}, {"oid": "a29d4f79bddec50f67dd5f2c2841d1ac4e215672", "committedDate": "2023-02-19 21:50:17 +0100", "message": "Exam mode: Fix an issue when deleting exams with multiple test runs by the same instructor (#6276)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568509", "body": "Codacy found an issue: [The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:52Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static final class Endpoints {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "779a0fe55f9eb666ed98ad7b0efaae30c809af2f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex dc8c3cfd14..603d0f7fa4 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -83,69 +75,82 @@ public class StaticCodeAnalysisResource {\n      * @return the updated static code analysis categories\n      */\n     @PatchMapping(Endpoints.CATEGORIES)\n-    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n     public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n             @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n         log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n \n-        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n \n         if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-            return badRequest();\n+            throw new BadRequestAlertException(\"Static code analysis is not enabled\", ENTITY_NAME, \"staticCodeAnalysisNotEnabled\");\n         }\n \n-        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n-            return forbidden();\n-        }\n-\n-        var optionalError = validateCategories(categories, exerciseId);\n-        if (optionalError.isPresent()) {\n-            return optionalError.get();\n-        }\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n \n+        validateCategories(categories, exerciseId);\n         Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n         return ResponseEntity.ok(staticCodeAnalysisCategories);\n     }\n \n+    /**\n+     * Reset the static code analysis categories of the given exercise to their default configuration.\n+     *\n+     * @param exerciseId if of the exercise for which the categories should be reseted\n+     * @return static code analysis categories with the default configuration\n+     */\n+    @PatchMapping(Endpoints.RESET)\n+    @PreAuthorize(\"hasRole('EDITOR')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> resetStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to reset static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findByIdElseThrow(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            throw new BadRequestAlertException(\"Static code analysis is not enabled\", ENTITY_NAME, \"staticCodeAnalysisNotEnabled\");\n+        }\n+        authCheckService.checkHasAtLeastRoleForExerciseElseThrow(Role.EDITOR, programmingExercise, null);\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.resetCategories(programmingExercise);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n     /**\n      * Validates static code analysis categories\n      *\n      * @param categories to be validated\n      * @param exerciseId path variable\n-     * @return empty optional if no error was found otherwise optional with an error response\n      */\n-    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+    private void validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n         for (var category : categories) {\n             // Each categories must have an id\n             if (category.getId() == null) {\n-                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+                throw new BadRequestAlertException(\"Static code analysis category id is missing.\", ENTITY_NAME, \"scaCategoryIdError\");\n             }\n \n             // Penalty must not be null or negative\n             if (category.getPenalty() == null || category.getPenalty() < 0) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n-                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+                throw new BadRequestAlertException(\"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\", ENTITY_NAME,\n+                        \"scaCategoryPenaltyError\");\n             }\n \n             // MaxPenalty must not be smaller than penalty\n             if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+                throw new BadRequestAlertException(\"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\", ENTITY_NAME,\n+                        \"scaCategoryMaxPenaltyError\");\n             }\n \n             // Category state must not be null\n             if (category.getState() == null) {\n-                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n-                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+                throw new BadRequestAlertException(\"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\", ENTITY_NAME,\n+                        \"scaCategoryStateError\");\n             }\n \n             // Exercise id of the request path must match the exerciseId in the request body if present\n             if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n-                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n-                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+                throw new ConflictException(\"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId(), ENTITY_NAME,\n+                        \"scaCategoryExerciseIdError\");\n             }\n         }\n-        return Optional.empty();\n     }\n \n     public static final class Endpoints {\n", "next_change": {"commit": "3027f6410004422fb275e8be79853616c3a86a2f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 603d0f7fa4..8e8477bb43 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -155,7 +155,7 @@ public class StaticCodeAnalysisResource {\n \n     public static final class Endpoints {\n \n-        private static final String PROGRAMMING_EXERCISE = \"/programming-exercise/{exerciseId}\";\n+        private static final String PROGRAMMING_EXERCISE = \"/programming-exercises/{exerciseId}\";\n \n         public static final String CATEGORIES = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories\";\n \n", "next_change": {"commit": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 8e8477bb43..97fc3bbbd5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n", "chunk": "@@ -161,6 +188,8 @@ public class StaticCodeAnalysisResource {\n \n         public static final String RESET = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories/reset\";\n \n+        public static final String IMPORT = PROGRAMMING_EXERCISE + \"/static-code-analysis-categories/import\";\n+\n         private Endpoints() {\n         }\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "cd4106917f5283659b889c36a47f82ad82d1a477", "committedDate": "2021-05-07 16:20:14 +0200", "message": "Improve the editor role based on first feedback round (#3376)"}, {"oid": "779a0fe55f9eb666ed98ad7b0efaae30c809af2f", "committedDate": "2022-01-29 14:25:59 +0100", "message": "Development: Remove use of deprecated methods (#4637)"}, {"oid": "3d640be969162f1fa20291c6891fac8324873209", "committedDate": "2022-05-05 21:45:37 +0200", "message": "Development: Improve server code"}, {"oid": "1a0a647ffb7d70ade81bc4f2330e54a0163d904c", "committedDate": "2022-06-04 23:33:59 +0200", "message": "Development: Fix typos in code comments (#5007)"}, {"oid": "3027f6410004422fb275e8be79853616c3a86a2f", "committedDate": "2022-10-22 09:47:31 +0200", "message": "Development: Fix naming of programming exercise endpoints (#5523)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568514", "body": "Codacy found an issue: [The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:53Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -126,7 +118,8 @@ public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "b01799aa9ac5cf87ac6fa592e30443164b0e6e0d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 59a9d31c64..a8eb4200ea 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -122,11 +115,11 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n     public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {\n         final var imported = importExerciseBase();\n \n-        // All copied hints/tests have the same content are are referenced to the new exercise\n+        // All copied hints/tests have the same content are referenced to the new exercise\n         assertThat(imported.getExerciseHints()).allMatch(hint -> programmingExercise.getExerciseHints().stream().anyMatch(\n                 oldHint -> oldHint.getContent().equals(hint.getContent()) && oldHint.getTitle().equals(hint.getTitle()) && hint.getExercise().getId().equals(imported.getId())));\n         assertThat(imported.getTestCases()).allMatch(test -> programmingExercise.getTestCases().stream().anyMatch(oldTest -> test.getExercise().getId().equals(imported.getId())\n-                && oldTest.getTestName().equals(test.getTestName()) && oldTest.getWeight().equals(test.getWeight())));\n+                && oldTest.getTestName().equalsIgnoreCase(test.getTestName()) && oldTest.getWeight().equals(test.getWeight())));\n     }\n \n     @Test\n", "next_change": {"commit": "78447e46c350ee3cd04caa7773ee8bc849f8da10", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex a8eb4200ea..552083fbb1 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -118,8 +128,16 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n         // All copied hints/tests have the same content are referenced to the new exercise\n         assertThat(imported.getExerciseHints()).allMatch(hint -> programmingExercise.getExerciseHints().stream().anyMatch(\n                 oldHint -> oldHint.getContent().equals(hint.getContent()) && oldHint.getTitle().equals(hint.getTitle()) && hint.getExercise().getId().equals(imported.getId())));\n+        assertThat(imported.getExerciseHints().stream().filter(eh -> eh instanceof CodeHint).map(eh -> (CodeHint) eh).collect(Collectors.toSet()))\n+                .allMatch(codeHint -> programmingExercise.getExerciseHints().stream().filter(eh -> eh instanceof CodeHint).map(eh -> (CodeHint) eh)\n+                        .anyMatch(oldHint -> oldHint.getTitle().equals(codeHint.getTitle())\n+                                && oldHint.getProgrammingExerciseTask().getTaskName().equals(codeHint.getProgrammingExerciseTask().getTaskName())\n+                                && codeHint.getSolutionEntries().size() == 1 && oldHint.getSolutionEntries().stream().findFirst().orElseThrow().getCode()\n+                                        .equals(codeHint.getSolutionEntries().stream().findFirst().orElseThrow().getCode())));\n+\n         assertThat(imported.getTestCases()).allMatch(test -> programmingExercise.getTestCases().stream().anyMatch(oldTest -> test.getExercise().getId().equals(imported.getId())\n-                && oldTest.getTestName().equalsIgnoreCase(test.getTestName()) && oldTest.getWeight().equals(test.getWeight())));\n+                && oldTest.getTestName().equalsIgnoreCase(test.getTestName()) && oldTest.getWeight().equals(test.getWeight()) && test.getSolutionEntries().size() == 1\n+                && oldTest.getSolutionEntries().stream().findFirst().orElseThrow().getCode().equals(test.getSolutionEntries().stream().findFirst().orElseThrow().getCode())));\n     }\n \n     @Test\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 552083fbb1..d9e6414224 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -142,21 +128,21 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n \n     @Test\n     @WithMockUser(username = \"tutor1\", roles = \"TA\")\n-    public void importExercise_tutor_forbidden() throws Exception {\n+    void importExercise_tutor_forbidden() throws Exception {\n         final var toBeImported = createToBeImported();\n         request.post(ROOT + IMPORT.replace(\"{sourceExerciseId}\", programmingExercise.getId().toString()), toBeImported, HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n     @WithMockUser(username = \"user1\", roles = \"USER\")\n-    public void importExercise_user_forbidden() throws Exception {\n+    void importExercise_user_forbidden() throws Exception {\n         final var toBeImported = createToBeImported();\n         request.post(ROOT + IMPORT.replace(\"{sourceExerciseId}\", programmingExercise.getId().toString()), toBeImported, HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructorother1\", roles = \"INSTRUCTOR\")\n-    public void testInstructorGetsResultsOnlyFromOwningCourses() throws Exception {\n+    void testInstructorGetsResultsOnlyFromOwningCourses() throws Exception {\n         final var search = database.configureSearch(\"\");\n         final var result = request.get(BASE_RESOURCE, HttpStatus.OK, SearchResultPageDTO.class, database.searchMapping(search));\n         assertThat(result.getResultsOnPage()).isNullOrEmpty();\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex d9e6414224..b8321ea973 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -127,21 +130,21 @@ class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringIntegratio\n     }\n \n     @Test\n-    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"tutor1\", roles = \"TA\")\n     void importExercise_tutor_forbidden() throws Exception {\n         final var toBeImported = createToBeImported();\n         request.post(ROOT + IMPORT.replace(\"{sourceExerciseId}\", programmingExercise.getId().toString()), toBeImported, HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"user1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"user1\", roles = \"USER\")\n     void importExercise_user_forbidden() throws Exception {\n         final var toBeImported = createToBeImported();\n         request.post(ROOT + IMPORT.replace(\"{sourceExerciseId}\", programmingExercise.getId().toString()), toBeImported, HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructorother1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructorother1\", roles = \"INSTRUCTOR\")\n     void testInstructorGetsResultsOnlyFromOwningCourses() throws Exception {\n         final var search = database.configureSearch(\"\");\n         final var result = request.get(BASE_RESOURCE, HttpStatus.OK, SearchResultPageDTO.class, database.searchMapping(search));\n", "next_change": null}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex d9e6414224..b8321ea973 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -149,15 +152,60 @@ class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringIntegratio\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testInstructorGetsResultsFromOwningCoursesNotEmpty() throws Exception {\n         final var search = database.configureSearch(\"Programming\");\n         final var result = request.get(BASE_RESOURCE, HttpStatus.OK, SearchResultPageDTO.class, database.searchMapping(search));\n-        assertThat(result.getResultsOnPage()).hasSize(1);\n+        assertThat(result.getResultsOnPage()).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testInstructorSearchTermMatchesId() throws Exception {\n+        database.addUsers(TEST_PREFIX, 1, 1, 0, 1);\n+        testSearchTermMatchesId();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    void testAdminSearchTermMatchesId() throws Exception {\n+        database.addUsers(TEST_PREFIX, 1, 1, 0, 1);\n+        testSearchTermMatchesId();\n+    }\n+\n+    private void testSearchTermMatchesId() throws Exception {\n+        final Course course = database.addEmptyCourse();\n+        final var now = ZonedDateTime.now();\n+        ProgrammingExercise exercise = ModelFactory.generateProgrammingExercise(now.minusDays(1), now.minusHours(2), course);\n+        exercise.setTitle(\"LoremIpsum\");\n+        exercise = programmingExerciseRepository.save(exercise);\n+        var exerciseId = exercise.getId();\n+\n+        final var searchTerm = database.configureSearch(exerciseId.toString());\n+        final var searchResult = request.get(BASE_RESOURCE, HttpStatus.OK, SearchResultPageDTO.class, database.searchMapping(searchTerm));\n+        assertThat(searchResult.getResultsOnPage().stream().filter(result -> ((int) ((LinkedHashMap<String, ?>) result).get(\"id\")) == exerciseId.intValue())).hasSize(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testCourseAndExamFiltersAsInstructor() throws Exception {\n+        String randomString = UUID.randomUUID().toString();\n+        database.addCourseWithNamedProgrammingExerciseAndTestCases(randomString);\n+        database.addCourseExamExerciseGroupWithOneProgrammingExercise(randomString + \"-Morpork\", randomString + \"Morpork\");\n+        exerciseIntegrationTestUtils.testCourseAndExamFilters(\"/api/programming-exercises/\", randomString);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    void testCourseAndExamFiltersAsAdmin() throws Exception {\n+        String randomString = UUID.randomUUID().toString();\n+        database.addCourseWithNamedProgrammingExerciseAndTestCases(randomString);\n+        database.addCourseExamExerciseGroupWithOneProgrammingExercise(randomString + \"-Morpork\", randomString + \"Morpork\");\n+        exerciseIntegrationTestUtils.testCourseAndExamFilters(\"/api/programming-exercises/\", randomString);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testSearchProgrammingExercisesWithProperSearchTerm() throws Exception {\n         database.addCourseWithNamedProgrammingExerciseAndTestCases(\"Java JDK13\");\n         database.addCourseWithNamedProgrammingExerciseAndTestCases(\"Python\");\n", "next_change": {"commit": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex b8321ea973..2271e28304 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -186,22 +188,43 @@ class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringIntegratio\n         assertThat(searchResult.getResultsOnPage().stream().filter(result -> ((int) ((LinkedHashMap<String, ?>) result).get(\"id\")) == exerciseId.intValue())).hasSize(1);\n     }\n \n-    @Test\n+    @ParameterizedTest(name = \"{displayName} [{index}] {argumentsWithNames}\")\n+    @ValueSource(booleans = { false, true })\n     @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n-    void testCourseAndExamFiltersAsInstructor() throws Exception {\n-        String randomString = UUID.randomUUID().toString();\n-        database.addCourseWithNamedProgrammingExerciseAndTestCases(randomString);\n-        database.addCourseExamExerciseGroupWithOneProgrammingExercise(randomString + \"-Morpork\", randomString + \"Morpork\");\n-        exerciseIntegrationTestUtils.testCourseAndExamFilters(\"/api/programming-exercises/\", randomString);\n+    void testCourseAndExamFiltersAsInstructor(boolean withSCA) throws Exception {\n+        testCourseAndExamFilters(withSCA);\n     }\n \n-    @Test\n+    @ParameterizedTest(name = \"{displayName} [{index}] {argumentsWithNames}\")\n+    @ValueSource(booleans = { false, true })\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    void testCourseAndExamFiltersAsAdmin() throws Exception {\n+    void testCourseAndExamFiltersAsAdmin(boolean withSCA) throws Exception {\n+        testCourseAndExamFilters(withSCA);\n+    }\n+\n+    private void testCourseAndExamFilters(boolean withSCA) throws Exception {\n         String randomString = UUID.randomUUID().toString();\n-        database.addCourseWithNamedProgrammingExerciseAndTestCases(randomString);\n+        database.addCourseWithNamedProgrammingExerciseAndTestCases(randomString, withSCA);\n         database.addCourseExamExerciseGroupWithOneProgrammingExercise(randomString + \"-Morpork\", randomString + \"Morpork\");\n         exerciseIntegrationTestUtils.testCourseAndExamFilters(\"/api/programming-exercises/\", randomString);\n+        testSCAFilter(randomString, withSCA);\n+    }\n+\n+    private void testSCAFilter(String searchTerm, boolean expectSca) throws Exception {\n+        var search = database.configureSearch(searchTerm);\n+        var filters = database.searchMapping(search);\n+\n+        // We should get both exercises when we don't filter for SCA only (other endpoint)\n+        var result = request.get(\"/api/programming-exercises\", HttpStatus.OK, SearchResultPageDTO.class, filters);\n+        assertThat(result.getResultsOnPage()).hasSize(2);\n+\n+        filters = database.searchMapping(search);\n+        filters.add(\"programmingLanguage\", \"JAVA\");\n+\n+        // The exam exercise is always created with SCA deactivated\n+        // expectSca true -> 1 result, false -> 0 results\n+        result = request.get(\"/api/programming-exercises/with-sca\", HttpStatus.OK, SearchResultPageDTO.class, filters);\n+        assertThat(result.getResultsOnPage()).hasSize(expectSca ? 1 : 0);\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "02e93e4eed509fd7fdcac3918f7f88e77adfdf60", "committedDate": "2020-12-31 15:39:39 +0100", "message": "Prepare 2nd correction in exams: database + client views (#2594)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "8620b9151ae67f3264b9babe8e53cee622c72aab", "committedDate": "2021-03-16 20:11:46 +0100", "message": "Show an error message to instructors in case duplicated tests occur in programming exercises (#3009)"}, {"oid": "0f9ff0b92baccc06a9094841ce676195e45d704d", "committedDate": "2021-03-28 19:13:19 +0200", "message": "Improve code quality (#3087)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "2d0fc6013fac9001f2bc2d4aebd1fb789dcf8896", "committedDate": "2021-06-03 08:18:38 +0200", "message": "[Refactoring] Q&A to Metis Refactoring (#3490)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "6a6bccf6dd568fd3edd31581105c519f294aafd8", "committedDate": "2022-01-08 16:44:43 +0100", "message": "Development: Split ProgrammingExerciseResource into multiple resources"}, {"oid": "b01799aa9ac5cf87ac6fa592e30443164b0e6e0d", "committedDate": "2022-02-25 12:43:06 +0100", "message": "Programming exercises: Add general structure for code hints (#4642)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "2435446716408f7841a51de80d448a21e4562317", "committedDate": "2022-04-22 11:14:51 +0200", "message": "Lectures: Allow instructors to import existing lectures into courses (#4931)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "78447e46c350ee3cd04caa7773ee8bc849f8da10", "committedDate": "2022-05-17 18:24:25 +0200", "message": "Programming exercises: Generate code hints from solution entries (#4976)"}, {"oid": "5d972b619bd2160bb7c9ac0726a3399ef21e15d5", "committedDate": "2022-06-05 00:01:21 +0200", "message": "Programming exercises: Display code hints dynamically (#5136)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "7452a5dd5896cd3afdf5289685b259042ec195c3", "committedDate": "2022-08-03 15:41:40 +0200", "message": "General: Allow to search by id in exercise and exam import dialog (#5484)"}, {"oid": "c8aa9a065b38b41844c26f410784af6288b7b57d", "committedDate": "2022-08-03 17:20:30 +0200", "message": "General: Allow to restrict exercise import search to courses / exercises (#5491)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568515", "body": "Codacy found an issue: [Avoid unused private methods such as 'init()'.](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'init()'.", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">Avoid unused private methods such as 'init()'.</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:54Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {\n+    }\n+\n+    @PostConstruct\n+    private void init() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex f9fb2899ef..2a00ee67cb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,7 +30,7 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava());\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n         log.debug(\"Initialized default static code analysis categories for JAVA\");\n     }\n \n", "next_change": {"commit": "e106619e18b6105cfacdd4de7b7369b62d807897", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex 2a00ee67cb..49e0f93e07 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n", "chunk": "@@ -30,8 +30,10 @@ public class StaticCodeAnalysisConfigurer {\n \n     @PostConstruct\n     private void init() {\n-        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift());\n-        log.debug(\"Initialized default static code analysis categories for JAVA\");\n+        languageToDefaultCategories = Map.of(ProgrammingLanguage.JAVA, createDefaultCategoriesForJava(), ProgrammingLanguage.SWIFT, createDefaultCategoriesForSwift(),\n+                ProgrammingLanguage.C, createDefaultCategoriesForC());\n+\n+        log.debug(\"Initialized default static code analysis categories for: {}\", languageToDefaultCategories.keySet());\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "07f908c138467189727b476009e52a247517307a", "committedDate": "2020-11-06 00:19:08 +0100", "message": "Support for static code analysis copy and paste detection using PMD (#2292)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "c11d2a2093bebe4ff6c73e9479433c2858d4702e", "committedDate": "2021-06-30 21:44:47 +0200", "message": "Add static analysis tools to misc category (#3629)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568522", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:55Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n+        category.setMaxPenalty(3D);\n+        category.setPenalty(5D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_stateIsNull_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setState(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -196,7 +279,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().getExercise().setId(1234L);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -279,7 +279,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().getExercise().setId(1234L);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568527", "body": "Codacy found an issue: [Missing a Javadoc comment.](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">Missing a Javadoc comment.</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:56Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -683,6 +684,16 @@ private static StaticCodeAnalysisReportDTO generateStaticCodeAnalysisReport(Stat\n         return issue;\n     }\n \n+    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise) {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\nindex 18f8eca1e4..a5cbfba17e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n", "chunk": "@@ -684,12 +684,13 @@ public class ModelFactory {\n         return issue;\n     }\n \n-    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise) {\n+    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise, String name, CategoryState state, Double penalty,\n+            Double maxPenalty) {\n         var category = new StaticCodeAnalysisCategory();\n-        category.setName(\"Bad practice\");\n-        category.setPenalty(2D);\n-        category.setMaxPenalty(10D);\n-        category.setState(CategoryState.VISIBLE);\n+        category.setName(name);\n+        category.setPenalty(penalty);\n+        category.setMaxPenalty(maxPenalty);\n+        category.setState(state);\n         category.setProgrammingExercise(programmingExercise);\n         return category;\n     }\n", "next_change": {"commit": "d16f253951f808d9adbb5ba84f48c768b5c9994d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\nindex a5cbfba17e..55e9e1eb5d 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n", "chunk": "@@ -696,12 +1195,63 @@ public class ModelFactory {\n     }\n \n     private static BambooBuildResultNotificationDTO.BambooTestJobDTO generateBambooTestJob(String name, boolean successful) {\n-        final var test = new BambooBuildResultNotificationDTO.BambooTestJobDTO();\n-        test.setErrors(successful ? List.of() : List.of(\"bad solution, did not work\"));\n-        test.setMethodName(name);\n-        test.setClassName(\"SpringTestClass\");\n-        test.setName(name);\n+        return new BambooBuildResultNotificationDTO.BambooTestJobDTO(name, name, \"SpringTestClass\", successful ? List.of() : List.of(\"bad solution, did not work\"));\n+    }\n+\n+    /**\n+     * Generates example TextSubmissions\n+     *\n+     * @param count How many submissions should be generated (max. 10)\n+     * @return A list containing the generated TextSubmissions\n+     */\n+    public static List<TextSubmission> generateTextSubmissions(int count) {\n+        if (count > 10) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        // Example texts for submissions\n+        String[] submissionTexts = {\n+                \"Differences: \\nAntipatterns: \\n-Have one problem and two solutions(one problematic and one refactored)\\n-Antipatterns are a sign of bad architecture and bad coding \\nPattern:\\n-Have one problem and one solution\\n-Patterns are a sign of elaborated architecutre and coding\",\n+                \"The main difference between patterns and antipatterns is, that patterns show you a good way to do something and antipatterns show a bad way to do something. Nevertheless patterns may become antipatterns in the course of changing understanding of how good software engineering looks like. One example for that is functional decomposition, which used to be a pattern and \\\"good practice\\\". Over the time it turned out that it is not a goog way to solve problems, so it became a antipattern.\\n\\nA pattern itsself is a proposed solution to a problem that occurs often and in different situations.\\nIn contrast to that a antipattern shows commonly made mistakes when dealing with a certain problem. Nevertheless a refactored solution is aswell proposed.\",\n+                \"1.Patterns can evolve into Antipatterns when change occurs\\\\n2. Pattern has one solution, whereas anti pattern can have subtypes of solution\\\\n3. Antipattern has negative consequences and symptom, where as patterns looks only into benefits and consequences\",\n+                \"Patterns: A way to Model code in differents ways \\nAntipattern: A way of how Not to Model code\",\n+                \"Antipatterns are used when there are common mistakes in software management and development to find these, while patterns by themselves are used to build software systems in the context of frequent change by reducing complexity and isolating the change.\\nAnother difference is that the antipatterns have problematic solution and then refactored solution, while patterns only have a solution.\",\n+                \"- In patterns we have a problem and a solution, in antipatterns we have a problematic solution and a refactored solution instead\\n- patterns represent best practices from the industry etc. so proven concepts, whereas antipatterns shed a light on common mistakes during software development etc.\",\n+                \"1) Patterns have one solution, antipatterns have to solutions (one problematic and one refactored).\\n2) for the coice of patterns code has to be written; for antipatterns, the bad smell code already exists\",\n+                \"Design Patterns:\\n\\nSolutions which are productive and efficient and are developed by Software Engineers over the years of practice and solving problems.\\n\\nAnti Patterns:\\n\\nKnown solutions which are actually bad or defective to certain kind of problems.\",\n+                \"Patterns has one problem and one solution.\\nAntipatterns have one problematic solution and a solution for that. The antipattern happens when  a solution that is been used for a long time can not apply anymore. \",\n+                \"Patterns identify problems and present solutions.\\nAntipatterns identify problems but two kinds of solutions. One problematic solution and a better \\\"refactored\\\" version of the solution. Problematic solutions are suggested not to be used because they results in smells or hinder future work.\" };\n+\n+        // Create Submissions with id's 0 - count\n+        List<TextSubmission> textSubmissions = new ArrayList<>();\n+        for (int i = 0; i < count; i++) {\n+            TextSubmission textSubmission = new TextSubmission((long) i).text(submissionTexts[i]);\n+            textSubmission.setLanguage(Language.ENGLISH);\n+            textSubmissions.add(textSubmission);\n+        }\n+\n+        return textSubmissions;\n+    }\n \n-        return test;\n+    /**\n+     * Generate an example organization entity\n+     *\n+     * @param name of organization\n+     * @param shortName of organization\n+     * @param url of organization\n+     * @param description of organization\n+     * @param logoUrl of organization\n+     * @param emailPattern of organization\n+     * @return An organization entity\n+     */\n+    public static Organization generateOrganization(String name, String shortName, String url, String description, String logoUrl, String emailPattern) {\n+        Organization organization = new Organization();\n+        organization.setName(name);\n+        organization.setShortName(shortName);\n+        organization.setUrl(url);\n+        organization.setDescription(description);\n+        organization.setLogoUrl(logoUrl);\n+        organization.setEmailPattern(emailPattern);\n+        return organization;\n     }\n }\n", "next_change": {"commit": "14df0c0ad1e15448dd01f0d9d39e04912cce4b43", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\nindex 55e9e1eb5d..57e09f83de 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java\n", "chunk": "@@ -1254,4 +1256,31 @@ public class ModelFactory {\n         organization.setEmailPattern(emailPattern);\n         return organization;\n     }\n+\n+    /**\n+     * Generates a Bonus instance with given arguments.\n+     *\n+     * @param bonusStrategy       of bonus\n+     * @param weight              of bonus\n+     * @param sourceGradingScaleId  of sourceGradingScale of bonus\n+     * @param bonusToGradingScaleId of bonusToGradingScale bonus\n+     * @return a new Bonus instance associated with the gradins scales corresonding to ids bonusToGradingScaleId and bonusToGradingScaleId.\n+     */\n+    public static Bonus generateBonus(BonusStrategy bonusStrategy, Double weight, long sourceGradingScaleId, long bonusToGradingScaleId) {\n+        Bonus bonus = new Bonus();\n+        bonus.setBonusStrategy(bonusStrategy);\n+        bonus.setWeight(weight);\n+        // New object is created to avoid circular dependency on json serialization.\n+        var sourceGradingScale = new GradingScale();\n+        sourceGradingScale.setId(sourceGradingScaleId);\n+        bonus.setSourceGradingScale(sourceGradingScale);\n+\n+        // New object is created to avoid circular dependency on json serialization.\n+        var bonusToGradingScale = new GradingScale();\n+        bonusToGradingScale.setId(bonusToGradingScaleId);\n+        bonus.setBonusToGradingScale(bonusToGradingScale);\n+\n+        return bonus;\n+\n+    }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "f8f19039c3204b59d5298659082769fadbd79030", "committedDate": "2020-10-07 00:19:52 +0200", "message": "Properly use assessment due date for programming exercises (#2137)"}, {"oid": "68e37c4c10d9eb604711e530202b4699239203ac", "committedDate": "2020-10-13 17:42:04 +0200", "message": "Truncate build logs (#2184)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "3f6d2e80a8b905885eba978656d7404c0c736568", "committedDate": "2020-10-20 12:36:08 +0200", "message": "Enable static code analysis for GitLab + Jenkins (#2226)"}, {"oid": "fab79b9884f27627edd5c3cae7aa519865daed0e", "committedDate": "2020-10-20 22:49:48 +0200", "message": "UI for Text Assessment Inconsistencies (#2132)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "ddc00366ee8b3f5d46c69974b1b28cb62e185296", "committedDate": "2020-10-24 23:58:42 +0200", "message": "Manual Result based on Automatic Result for programming exercises + Enable Result score > 100% for all Exercises types (#2223)"}, {"oid": "bec5fb2eff514c1cf5fd55a5d9d06a13890c239c", "committedDate": "2020-10-29 10:55:34 +0100", "message": "Migrate to new Athene 2.0 (#2157)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "committedDate": "2020-10-29 21:04:54 +0100", "message": "Consistently use DTOs in Jira/Bitbucket/BambooService and improve test coverage in BitbucketService (#2247)"}, {"oid": "7fedc21f84e2934e7b78ef837cb2fd02561f83f7", "committedDate": "2020-10-29 22:44:40 +0100", "message": "Use JUnit 5 for the Java Programming Exercises Template (#2281)"}, {"oid": "07f908c138467189727b476009e52a247517307a", "committedDate": "2020-11-06 00:19:08 +0100", "message": "Support for static code analysis copy and paste detection using PMD (#2292)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "52dfe7ea588591b7ed5634f9c886b3cc5eefd4ee", "committedDate": "2020-11-20 17:19:56 +0100", "message": "Add option to enable / disable more feedback requests in courses (#2432)"}, {"oid": "4be3b3ee8dbb4c2a55370584225fbcbfc920bf55", "committedDate": "2020-12-08 16:28:08 +0100", "message": "Add importing and exporting teams using JSON (#2476)"}, {"oid": "9a3454e2b7e1a12f9ddd6b46ea64ae373d438857", "committedDate": "2020-12-23 20:34:57 +0100", "message": "Handle manual results on trigger-all (#2482)"}, {"oid": "243eb3a86411bdef1df7adb0e95951d31a5d7014", "committedDate": "2020-12-29 16:56:23 +0100", "message": "Add Learning Goal Instructor View (#2590)"}, {"oid": "02e93e4eed509fd7fdcac3918f7f88e77adfdf60", "committedDate": "2020-12-31 15:39:39 +0100", "message": "Prepare 2nd correction in exams: database + client views (#2594)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "52b2e474578445483ea81128a9bd12e89cfd8c45", "committedDate": "2021-01-08 00:23:15 +0100", "message": "Fix random issue with saving build logs in the database for Bamboo and Jenkins (#2644)"}, {"oid": "22c0d943ee63b5242df1069d4fe120725a633458", "committedDate": "2021-01-24 22:39:04 +0100", "message": "Avoid duplicating programming submissions (#2696)"}, {"oid": "1932bb7fe086ad071fb283f5a0eaa4cf7832e454", "committedDate": "2021-01-27 09:56:08 +0100", "message": "Fix issues in the exam mode test runs (#2738)"}, {"oid": "9caa774f8bcb709245fcbe152b327e7dc6cb38bf", "committedDate": "2021-02-02 11:25:19 +0100", "message": "Change score to the correct noun: points (#2797)"}, {"oid": "1fe9699b8678c42ca40190514412ea1c0868992c", "committedDate": "2021-03-08 23:19:05 +0100", "message": "Improve result score accuracy (#2976)"}, {"oid": "fceeaef9fa01fe6daa9a2b221597634d2d2f9f2a", "committedDate": "2021-03-26 18:13:24 +0100", "message": "Reduce server service dependencies (#3079)"}, {"oid": "a792f182702f4deacb85b6a8f9a0090860a93483", "committedDate": "2021-03-29 14:08:33 +0200", "message": "Add organizations (#2748)"}, {"oid": "6decb6d604572af38f3af7aabcfadaa0ae5b42e8", "committedDate": "2021-03-31 09:54:29 +0200", "message": "More Flexible Format for the transmission of test results from Jenkins (#2881)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "12ec85c35d04a4ad4ac883b060c620039a51164c", "committedDate": "2021-04-12 23:31:39 +0200", "message": "Improve REST API and improve code quality (#3175)"}, {"oid": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "committedDate": "2021-04-27 14:00:15 +0200", "message": "Improve automatic cleanup service, add configuration options batch size and waiting time for external requests (#3298)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "9ec8ac8766d1a7311aeef6b802a7d00c74684096", "committedDate": "2021-05-07 13:35:19 +0200", "message": "Add statistics to course management detail view (#3259)"}, {"oid": "c87f8ed4acf3e2ef4cdd649988258169fe294d17", "committedDate": "2021-05-25 12:01:45 +0200", "message": "Add build logs on new result for Jenkins (#3462)"}, {"oid": "2d0fc6013fac9001f2bc2d4aebd1fb789dcf8896", "committedDate": "2021-06-03 08:18:38 +0200", "message": "[Refactoring] Q&A to Metis Refactoring (#3490)"}, {"oid": "98a541d2b3c9f4f9956cb56df2e75f903afb8c1d", "committedDate": "2021-06-25 09:19:07 +0200", "message": "Merge lecture pdfs (#3571)"}, {"oid": "6a7b15dc49cda4477cee17cfe622f2ec352f786a", "committedDate": "2021-07-05 19:40:20 +0200", "message": "Integrate a minimal Xcode (SwiftUI) template to Artemis (#3618)"}, {"oid": "3e88dbbad99b867b9047b0d54ccf3d80713dea40", "committedDate": "2021-07-12 09:40:10 +0200", "message": "Track user interactions in assessment of text exercise (#3704)"}, {"oid": "c5906ee01ab1a08c470e6bd4edc20236699fb530", "committedDate": "2021-07-12 12:18:10 +0200", "message": "Revert \"Track user interactions in assessment of text exercise (#3704)\""}, {"oid": "08ecd0ae7882453ab1f3cb9e47d9c09615504773", "committedDate": "2021-07-18 23:11:15 +0200", "message": "Text Assessment: Track User Interactions (#3737)"}, {"oid": "c4d96352b90ef98ba485cb13b678cc2cdc54d70f", "committedDate": "2021-09-09 08:53:51 +0200", "message": "Improve feedback in tutor training for text exercises (#3867)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "4a0b22a0ba060b299200128c604cbfc4d4e85e1b", "committedDate": "2021-10-16 12:40:57 +0200", "message": "General: Unify rounding of scores, allow rounding customizations in courses and enable more grade step configurations (#4071)"}, {"oid": "ab1368d7fceef5dfb4dbc28f13274a69a84d62b7", "committedDate": "2021-10-31 21:13:16 +0100", "message": "Programming exercises: Add submission policies for programming exercises (#4073)"}, {"oid": "0c9ec01520e15088cf4c11d49b937e8f2def9fd8", "committedDate": "2021-11-12 20:54:09 +0100", "message": "Development: Fix server tests related to new password length requirement (#4293)"}, {"oid": "e6c27755f186e6bf3ba12811ab807777c55407c9", "committedDate": "2021-11-27 09:19:08 +0100", "message": "General: Enable score export with points per grading criterion into a CSV file (#4135)"}, {"oid": "d46875024e82f18af7613ba2735d70e640490ace", "committedDate": "2021-12-11 12:02:26 +0100", "message": "Development: Improve server code quality for Compass (#4492)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "126c2f5104f2098ee62f41c1b804a5803eb7c92e", "committedDate": "2022-01-08 19:10:42 +0100", "message": "Development: Split Exercise into multiple classes"}, {"oid": "2a02c74b28f91368d6214d0d1f6df0e0449fdc78", "committedDate": "2022-02-15 13:58:18 +0100", "message": "Exam mode: Improve filtering of exercise information"}, {"oid": "d0027393e7c851c97105fde0158235ffd201cdbc", "committedDate": "2022-02-25 18:38:29 +0100", "message": "General: Allow to publish example solutions for modeling, text and file upload exercises on a specific date (#4328)"}, {"oid": "b066744ffd91f0d412bc27fb2606ee982016fa31", "committedDate": "2022-03-10 15:52:49 +0100", "message": "Programming exercises: Rename Java project types (#4785)"}, {"oid": "a535522dcce93a5c6cd243f3c189b350fda28396", "committedDate": "2022-03-11 11:11:40 +0100", "message": "General: Forward changes to internal users to Bitbucket (#4644)"}, {"oid": "befd4046db049c540de32030839b2a8ee232bf91", "committedDate": "2022-03-28 12:54:39 +0200", "message": "General: Change password handling for internal users (#4768)"}, {"oid": "fe9f7aeafa35a2dc8bc2b210a0fb64ad8bfac39a", "committedDate": "2022-04-07 21:44:00 +0200", "message": "General: Allow instructors to configure variable complaint text limits per course (#4810)"}, {"oid": "59261866899225a1e0320f557910411f5d397a2c", "committedDate": "2022-04-14 16:59:00 +0200", "message": "Programming exercises: Set precise git commit push date as submission date (#4830)"}, {"oid": "ce289f5583388a649f7d6e566ea80e678cdd51b2", "committedDate": "2022-04-14 17:02:40 +0200", "message": "Exam mode: Add basic structure for test exams and refactor exam creation dialog (#4892)"}, {"oid": "3d351b700a6026d776b94881310e3fb2c26dcad2", "committedDate": "2022-04-14 18:09:17 +0200", "message": "Programming exercises: Allow to publish example solutions for programming exercises on a specific date (#4795)"}, {"oid": "2435446716408f7841a51de80d448a21e4562317", "committedDate": "2022-04-22 11:14:51 +0200", "message": "Lectures: Allow instructors to import existing lectures into courses (#4931)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "3e06e33261cdbd754a87941218c3fe90c055afbd", "committedDate": "2022-04-28 17:19:19 +0200", "message": "Development: Replace Paths.get() with Path.of() (#4978)"}, {"oid": "67ecbeecd4c2e658323efe665075d906fa817508", "committedDate": "2022-05-05 19:47:10 +0200", "message": "Quiz exercises: Add non-synchronized quiz modes (#4936)"}, {"oid": "a5786accc22668ecb706977529fc003dee8c8366", "committedDate": "2022-06-04 23:33:17 +0200", "message": "Lectures: Allow students to view learning goals and prerequisites (#5074)"}, {"oid": "1a0a647ffb7d70ade81bc4f2330e54a0163d904c", "committedDate": "2022-06-04 23:33:59 +0200", "message": "Development: Fix typos in code comments (#5007)"}, {"oid": "5cc95a09c02220de2f70e556ffd7c17744d4b48e", "committedDate": "2022-07-15 16:16:36 +0200", "message": "Exam mode: Improve management for test exams (#5204)"}, {"oid": "7e4fee4866eed6b5fff2614286084c26158a858c", "committedDate": "2022-07-18 20:04:20 +0200", "message": "Exam mode: Conduct test exams (#5194)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "d16f253951f808d9adbb5ba84f48c768b5c9994d", "committedDate": "2022-09-10 21:31:21 +0200", "message": "Programming exercises: Limit Jenkins builds to default branches (#5637)"}, {"oid": "14df0c0ad1e15448dd01f0d9d39e04912cce4b43", "committedDate": "2022-09-16 17:02:56 +0200", "message": "Assessment: Map bonus to exam grades (#5222)"}, {"oid": "2a17f53693141a23d138a4531e16510339d4f89e", "committedDate": "2022-09-16 17:05:40 +0200", "message": "Lectures: Improve the file upload for attachments (#5427)"}, {"oid": "a907434876d228081f8a962d6080a75ee70151bc", "committedDate": "2022-09-16 17:13:35 +0200", "message": "Programming exercises: Fix result creation for exercises using different default branches (#5664)"}, {"oid": "593283a9b50a476824af052f7e3aae139262c297", "committedDate": "2022-09-23 10:25:28 +0200", "message": "Programming exercises: Add build log analytics (#5337)"}, {"oid": "8871e554582d2807f00600f9dd26f112ed3eab70", "committedDate": "2022-10-17 22:52:28 +0200", "message": "General: Extend LTI support for Moodle (#5558)"}, {"oid": "aff7159a522d24d1a8ea04a25dc3e678a4de17e6", "committedDate": "2022-11-14 12:45:22 +0100", "message": "Tutorial groups: Allow management of tutorial group sessions (#5666)"}, {"oid": "c8bfe570a2e2696fe8b6ba043971d26a9821ff70", "committedDate": "2022-11-17 20:43:29 +0100", "message": "Development: Refactor feedback generation for programming exercises (#5758)"}, {"oid": "b62b51103584c4abe00a95af4eeba5e362b1b37b", "committedDate": "2022-11-22 21:47:54 +0100", "message": "General: Simplify LTI configuration for instructors (#5812)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "c201db4e08a59609fee64254eb1a0f2f8869c317", "committedDate": "2023-01-18 13:40:21 +0100", "message": "Programming Exercises: Experimental support for GitLab CI (#6044)"}, {"oid": "f59a9d32001482c705c7a0491db47aa1f16c3cc0", "committedDate": "2023-01-20 22:29:33 +0100", "message": "Lectures: Allow instructors to automatically split lecture file units (#5928)"}, {"oid": "8ef120f04381f485ec6cd8a3e91fccbb5da5472f", "committedDate": "2023-02-01 23:47:45 +0100", "message": "Development: Automatically format JavaDoc comments via Spotless (#6151)"}, {"oid": "4bdeb258991bf3829fe7aa081679b0a976907463", "committedDate": "2023-02-26 10:38:27 +0100", "message": "Tutorial groups: Automatically create messages channel for each tutorial group (#6206)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568529", "body": "Codacy found an issue: [The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:57Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -111,10 +99,14 @@ public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws Malf\n         final var newHintIDs = newlyImported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n         assertThat(newlyImported.getExerciseHints().size()).isEqualTo(programmingExercise.getExerciseHints().size());\n         assertThat(programmingExercise.getExerciseHints()).noneMatch(hint -> newHintIDs.contains(hint.getId()));\n+        final var newStaticCodeAnalysisCategoriesIDs = newlyImported.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toSet());\n+        assertThat(newlyImported.getStaticCodeAnalysisCategories().size()).isEqualTo(programmingExercise.getStaticCodeAnalysisCategories().size());\n+        assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0c10366da34de281385b85e46c5481be61594d93", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 59a9d31c64..8458cb4c7e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -83,24 +75,25 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n         assertThat(newlyImported.getTemplateBuildPlanId()).isNotEqualTo(programmingExercise.getTemplateBuildPlanId());\n         assertThat(newlyImported.hasSequentialTestRuns()).isEqualTo(programmingExercise.hasSequentialTestRuns());\n         assertThat(newlyImported.isAllowOnlineEditor()).isEqualTo(programmingExercise.isAllowOnlineEditor());\n-        assertThat(newlyImported.getNumberOfAssessments()).isNull();\n+        assertThat(newlyImported.getTotalNumberOfAssessments()).isNull();\n         assertThat(newlyImported.getNumberOfComplaints()).isNull();\n         assertThat(newlyImported.getNumberOfMoreFeedbackRequests()).isNull();\n         assertThat(newlyImported.getNumberOfSubmissions()).isNull();\n         assertThat(newlyImported.getAttachments()).isNull();\n         assertThat(newlyImported.getTutorParticipations()).isNull();\n         assertThat(newlyImported.getExampleSubmissions()).isNull();\n-        assertThat(newlyImported.getStudentQuestions()).isNull();\n+        assertThat(newlyImported.getPosts()).isNull();\n         assertThat(newlyImported.getStudentParticipations()).isNull();\n         final var newTestCaseIDs = newlyImported.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toSet());\n-        assertThat(newlyImported.getTestCases().size()).isEqualTo(programmingExercise.getTestCases().size());\n+        assertThat(newlyImported.getTestCases()).hasSameSizeAs(programmingExercise.getTestCases());\n         assertThat(programmingExercise.getTestCases()).noneMatch(testCase -> newTestCaseIDs.contains(testCase.getId()));\n-        assertThat(programmingExercise.getTestCases()).usingElementComparatorIgnoringFields(\"id\", \"exercise\").containsExactlyInAnyOrderElementsOf(newlyImported.getTestCases());\n+        assertThat(programmingExercise.getTestCases()).usingElementComparatorIgnoringFields(\"id\", \"exercise\", \"tasks\", \"solutionEntries\")\n+                .containsExactlyInAnyOrderElementsOf(newlyImported.getTestCases());\n         final var newHintIDs = newlyImported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n-        assertThat(newlyImported.getExerciseHints().size()).isEqualTo(programmingExercise.getExerciseHints().size());\n+        assertThat(newlyImported.getExerciseHints()).hasSameSizeAs(programmingExercise.getExerciseHints());\n         assertThat(programmingExercise.getExerciseHints()).noneMatch(hint -> newHintIDs.contains(hint.getId()));\n         final var newStaticCodeAnalysisCategoriesIDs = newlyImported.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toSet());\n-        assertThat(newlyImported.getStaticCodeAnalysisCategories().size()).isEqualTo(programmingExercise.getStaticCodeAnalysisCategories().size());\n+        assertThat(newlyImported.getStaticCodeAnalysisCategories()).hasSameSizeAs(programmingExercise.getStaticCodeAnalysisCategories());\n         assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n", "next_change": {"commit": "5d972b619bd2160bb7c9ac0726a3399ef21e15d5", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 8458cb4c7e..9d6ada5407 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -97,19 +106,6 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n         assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n-    @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() {\n-        final var imported = importExerciseBase();\n-\n-        final var oldHintIDs = programmingExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n-        final var newHintIDs = imported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n-        final var matchString = \".*\\\\{[^{}]*%d[^{}]*\\\\}.*\";\n-        final var importedStatement = imported.getProblemStatement();\n-        assertThat(oldHintIDs).noneMatch(hint -> importedStatement.matches(String.format(matchString, hint)));\n-        assertThat(newHintIDs).allMatch(hint -> importedStatement.matches(String.format(matchString, hint)));\n-    }\n-\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex 9d6ada5407..d9e6414224 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringInt\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {\n+    void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {\n         final var imported = importExerciseBase();\n \n         // All copied hints/tests have the same content are referenced to the new exercise\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\nindex d9e6414224..b8321ea973 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java\n", "chunk": "@@ -107,7 +110,7 @@ class ProgrammingExerciseServiceIntegrationTest extends AbstractSpringIntegratio\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {\n         final var imported = importExerciseBase();\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "02e93e4eed509fd7fdcac3918f7f88e77adfdf60", "committedDate": "2020-12-31 15:39:39 +0100", "message": "Prepare 2nd correction in exams: database + client views (#2594)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "8620b9151ae67f3264b9babe8e53cee622c72aab", "committedDate": "2021-03-16 20:11:46 +0100", "message": "Show an error message to instructors in case duplicated tests occur in programming exercises (#3009)"}, {"oid": "0f9ff0b92baccc06a9094841ce676195e45d704d", "committedDate": "2021-03-28 19:13:19 +0200", "message": "Improve code quality (#3087)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "2d0fc6013fac9001f2bc2d4aebd1fb789dcf8896", "committedDate": "2021-06-03 08:18:38 +0200", "message": "[Refactoring] Q&A to Metis Refactoring (#3490)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "6a6bccf6dd568fd3edd31581105c519f294aafd8", "committedDate": "2022-01-08 16:44:43 +0100", "message": "Development: Split ProgrammingExerciseResource into multiple resources"}, {"oid": "b01799aa9ac5cf87ac6fa592e30443164b0e6e0d", "committedDate": "2022-02-25 12:43:06 +0100", "message": "Programming exercises: Add general structure for code hints (#4642)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "2435446716408f7841a51de80d448a21e4562317", "committedDate": "2022-04-22 11:14:51 +0200", "message": "Lectures: Allow instructors to import existing lectures into courses (#4931)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "78447e46c350ee3cd04caa7773ee8bc849f8da10", "committedDate": "2022-05-17 18:24:25 +0200", "message": "Programming exercises: Generate code hints from solution entries (#4976)"}, {"oid": "5d972b619bd2160bb7c9ac0726a3399ef21e15d5", "committedDate": "2022-06-05 00:01:21 +0200", "message": "Programming exercises: Display code hints dynamically (#5136)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "7452a5dd5896cd3afdf5289685b259042ec195c3", "committedDate": "2022-08-03 15:41:40 +0200", "message": "General: Allow to search by id in exercise and exam import dialog (#5484)"}, {"oid": "c8aa9a065b38b41844c26f410784af6288b7b57d", "committedDate": "2022-08-03 17:20:30 +0200", "message": "General: Allow to restrict exercise import search to courses / exercises (#5491)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUzNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568534", "body": "Codacy found an issue: [The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:58Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n+        exercise.setBonusPoints(null);\n+        mockConnectorRequestsForSetup(exercise);\n+        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n+        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n+        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n+        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex c141b517de..9e436793d5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -1,420 +1,133 @@\n package de.tum.in.www1.artemis.programmingexercise;\n \n-import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n-import static org.assertj.core.api.Assertions.assertThat;\n+import static de.tum.in.www1.artemis.util.ProgrammingExerciseTestService.studentLogin;\n \n import java.io.IOException;\n-import java.time.ZonedDateTime;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n-import org.eclipse.jgit.api.Git;\n-import org.eclipse.jgit.diff.DiffEntry;\n-import org.eclipse.jgit.lib.ObjectReader;\n-import org.eclipse.jgit.lib.Repository;\n-import org.eclipse.jgit.revwalk.RevCommit;\n-import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.EnumSource;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.test.context.support.WithMockUser;\n \n import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n-import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n-import de.tum.in.www1.artemis.repository.CourseRepository;\n-import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n-import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n-import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n-import de.tum.in.www1.artemis.security.SecurityUtils;\n-import de.tum.in.www1.artemis.service.ParticipationService;\n-import de.tum.in.www1.artemis.service.TeamService;\n-import de.tum.in.www1.artemis.util.*;\n-import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+import de.tum.in.www1.artemis.util.ProgrammingExerciseTestService;\n \n public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n     @Autowired\n-    private DatabaseUtilService database;\n-\n-    @Autowired\n-    private RequestUtilService request;\n-\n-    @Autowired\n-    private ProgrammingExerciseRepository programmingExerciseRepository;\n-\n-    @Autowired\n-    private TeamService teamService;\n-\n-    @Autowired\n-    private UserRepository userRepo;\n-\n-    @Autowired\n-    private CourseRepository courseRepository;\n-\n-    @Autowired\n-    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n-\n-    @Autowired\n-    private ParticipationService participationService;\n-\n-    @Autowired\n-    @Qualifier(\"staticCodeAnalysisConfiguration\")\n-    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n-\n-    private Course course;\n-\n-    private ExerciseGroup exerciseGroup;\n-\n-    private ProgrammingExercise exercise;\n-\n-    private ProgrammingExercise examExercise;\n-\n-    private final static int numberOfStudents = 2;\n-\n-    private final static String studentLogin = \"student1\";\n-\n-    private final static String teamShortName = \"team1\";\n-\n-    LocalRepository exerciseRepo = new LocalRepository();\n-\n-    LocalRepository testRepo = new LocalRepository();\n-\n-    LocalRepository solutionRepo = new LocalRepository();\n-\n-    LocalRepository studentRepo = new LocalRepository();\n-\n-    LocalRepository studentTeamRepo = new LocalRepository();\n+    private ProgrammingExerciseTestService programmingExerciseTestService;\n \n     @BeforeEach\n     public void setup() throws Exception {\n-        database.addUsers(numberOfStudents, 1, 1);\n-        course = database.addEmptyCourse();\n-        exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n-        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n-        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n-        bambooRequestMockProvider.enableMockingOfRequests();\n-        bitbucketRequestMockProvider.enableMockingOfRequests();\n-\n-        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n-        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n-        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n-        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n-        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n-\n-        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n-        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n-        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+        programmingExerciseTestService.setupTestUsers(0, 0, 0);\n+        programmingExerciseTestService.setup(this, versionControlService, continuousIntegrationService);\n+        bambooRequestMockProvider.enableMockingOfRequests(true);\n+        bitbucketRequestMockProvider.enableMockingOfRequests(true);\n     }\n \n     @AfterEach\n     public void tearDown() throws IOException {\n-        database.resetDatabase();\n+        programmingExerciseTestService.tearDown();\n         bitbucketRequestMockProvider.reset();\n         bambooRequestMockProvider.reset();\n-        exerciseRepo.resetLocalRepo();\n-        testRepo.resetLocalRepo();\n-        solutionRepo.resetLocalRepo();\n-        studentRepo.resetLocalRepo();\n-        studentTeamRepo.resetLocalRepo();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_sequential_validExercise_created();\n     }\n \n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void createProgrammingExercise_validExercise_created(ExerciseMode mode) throws Exception {\n-        exercise.setMode(mode);\n-        mockConnectorRequestsForSetup(exercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n+    public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_mode_validExercise_created(mode);\n+    }\n \n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_programmingLanguage_validExercise_created(language);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n-        exercise.setBonusPoints(null);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n-        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n-        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_bonusPointsIsNull();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {\n-        exercise.setStaticCodeAnalysisEnabled(true);\n-        mockConnectorRequestsForSetup(exercise);\n-        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n-\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        var staticCodeAnalysisCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(generatedExercise.getId());\n-        assertThat(staticCodeAnalysisCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .isEqualTo(staticCodeAnalysisDefaultConfigurations.get(exercise.getProgrammingLanguage()));\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_withStaticCodeAnalysis();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExerciseForExam_validExercise_created() throws Exception {\n-        setupRepositoryMocks(examExercise, exerciseRepo, solutionRepo, testRepo);\n-\n-        mockConnectorRequestsForSetup(examExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, examExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        examExercise.setId(generatedExercise.getId());\n-        assertThat(examExercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExerciseForExam_validExercise_created();\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importExercise_created() throws Exception {\n-        // Setup exercises for import\n-        ProgrammingExercise sourceExercise = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n-        database.addTestCasesToProgrammingExercise(sourceExercise);\n-        database.addHintsToExercise(sourceExercise);\n-        database.addHintsToProblemStatement(sourceExercise);\n-        sourceExercise = database.loadProgrammingExerciseWithEagerReferences(sourceExercise);\n-        ProgrammingExercise exerciseToBeImported = ModelFactory.generateToBeImportedProgrammingExercise(\"ImportTitle\", \"imported\", sourceExercise, database.addEmptyCourse());\n-\n-        // Mock requests\n-        List<Verifiable> verifiables = mockConnectorRequestsForImport(sourceExercise, exerciseToBeImported);\n-        setupRepositoryMocks(exerciseToBeImported, exerciseRepo, solutionRepo, testRepo);\n-\n-        // Import the exercise and load all referenced entities\n-        var importedExercise = request.postWithResponseBody(ROOT + IMPORT.replace(\"{sourceExerciseId}\", sourceExercise.getId().toString()), exerciseToBeImported,\n-                ProgrammingExercise.class, HttpStatus.OK);\n-        SecurityUtils.setAuthorizationObject();\n-        importedExercise = database.loadProgrammingExerciseWithEagerReferences(importedExercise);\n-\n-        // Assert correct creation of repos and plans\n-        for (var verifiable : verifiables) {\n-            verifiable.performVerification();\n-        }\n-        // Assert correct creation of static code analysis categories\n-        var importedCategoryIds = importedExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-        var sourceCategoryIds = sourceExercise.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toList());\n-        assertThat(importedCategoryIds).doesNotContainAnyElementsOf(sourceCategoryIds);\n-        assertThat(importedExercise.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getStaticCodeAnalysisCategories());\n-        // Assert correct creation of test cases\n-        var importedTestCaseIds = importedExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        var sourceTestCaseIds = sourceExercise.getTestCases().stream().map(ProgrammingExerciseTestCase::getId).collect(Collectors.toList());\n-        assertThat(importedTestCaseIds).doesNotContainAnyElementsOf(sourceTestCaseIds);\n-        assertThat(importedExercise.getTestCases()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getTestCases());\n-        // Assert correct creation of hints\n-        var importedHintIds = importedExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        var sourceHintIds = sourceExercise.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toList());\n-        assertThat(importedHintIds).doesNotContainAnyElementsOf(sourceHintIds);\n-        assertThat(importedExercise.getExerciseHints()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"id\", \"exercise\")\n-                .containsExactlyInAnyOrderElementsOf(sourceExercise.getExerciseHints());\n+    public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {\n+        programmingExerciseTestService.importExercise_created(programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_validExercise_structureOracle() throws Exception {\n-        structureOracle(exercise);\n-    }\n-\n-    private void structureOracle(ProgrammingExercise programmingExercise) throws Exception {\n-        mockConnectorRequestsForSetup(programmingExercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, programmingExercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-        String response = request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", generatedExercise.getId() + \"\"), generatedExercise, String.class,\n-                HttpStatus.OK);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n-\n-        List<RevCommit> testRepoCommits = testRepo.getAllLocalCommits();\n-        assertThat(testRepoCommits.size()).isEqualTo(2);\n-\n-        assertThat(testRepoCommits.get(0).getFullMessage()).isEqualTo(\"Update the structure oracle file.\");\n-        List<DiffEntry> changes = getChanges(testRepo.localGit.getRepository(), testRepoCommits.get(0));\n-        assertThat(changes.size()).isEqualTo(1);\n-        assertThat(changes.get(0).getChangeType()).isEqualTo(DiffEntry.ChangeType.MODIFY);\n-        assertThat(changes.get(0).getOldPath()).endsWith(\"test.json\");\n-\n-        // Second time leads to a bad request because the file did not change\n-        var expectedHeaders = new HashMap<String, String>();\n-        expectedHeaders.put(\"X-artemisApp-alert\", \"Did not update the oracle because there have not been any changes to it.\");\n-        request.putWithResponseBody(ROOT + GENERATE_TESTS.replace(\"{exerciseId}\", generatedExercise.getId() + \"\"), generatedExercise, String.class, HttpStatus.BAD_REQUEST,\n-                expectedHeaders);\n-        assertThat(response).startsWith(\"Successfully generated the structure oracle\");\n+        programmingExerciseTestService.createProgrammingExercise_validExercise_structureOracle();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_noTutors_created() throws Exception {\n-        course.setTeachingAssistantGroupName(null);\n-        courseRepository.save(course);\n-        mockConnectorRequestsForSetup(exercise);\n-\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n-        assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n+        programmingExerciseTestService.createProgrammingExercise_noTutors_created();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_student_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        User user = userRepo.findOneByLogin(studentLogin).orElseThrow();\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, user.getParticipantIdentifier(), Set.of(user));\n-        final var path = ParticipationResource.Endpoints.ROOT\n-                + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", \"\" + course.getId()).replace(\"{exerciseId}\", \"\" + exercise.getId());\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n-\n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n+        programmingExerciseTestService.startProgrammingExercise_student_correctInitializationState();\n     }\n \n     @Test\n     @WithMockUser(username = studentLogin, roles = \"USER\")\n     public void startProgrammingExercise_team_correctInitializationState() throws Exception {\n-        final var course = exercise.getCourseViaExerciseGroupOrCourseMember();\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // create a team for the user (necessary condition before starting an exercise)\n-        Set<User> students = Set.of(userRepo.findOneByLogin(studentLogin).get());\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n-\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-        final var path = ParticipationResource.Endpoints.ROOT\n-                + ParticipationResource.Endpoints.START_PARTICIPATION.replace(\"{courseId}\", \"\" + course.getId()).replace(\"{exerciseId}\", \"\" + exercise.getId());\n-        final var participation = request.postWithResponseBody(path, null, ProgrammingExerciseStudentParticipation.class, HttpStatus.CREATED);\n+        programmingExerciseTestService.startProgrammingExercise_team_correctInitializationState();\n+    }\n \n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+    @Test\n+    @WithMockUser(username = studentLogin, roles = \"USER\")\n+    public void startProgrammingExerciseStudentSubmissionFailedWithBuildlog() throws Exception {\n+        programmingExerciseTestService.startProgrammingExerciseStudentSubmissionFailedWithBuildlog();\n+    }\n \n-        assertThat(participation.getInitializationState()).as(\"Participation should be initialized\").isEqualTo(InitializationState.INITIALIZED);\n+    @Test\n+    @WithMockUser(username = studentLogin, roles = \"USER\")\n+    public void startProgrammingExerciseStudentRetrieveEmptyArtifactPage() throws Exception {\n+        programmingExerciseTestService.startProgrammingExerciseStudentRetrieveEmptyArtifactPage();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsAdded_whenStudentIsAddedToTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Add a new student to the team\n-        User newStudent = ModelFactory.generateActivatedUsers(\"new-student\", new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n-        newStudent = userRepo.save(newStudent);\n-        team.addStudents(newStudent);\n-\n-        // Mock repository write permission give call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockGiveWritePermission(exercise, repositorySlug, newStudent.getLogin());\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with new student after participation has already started\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents + 1); // new student was added\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsAdded_whenStudentIsAddedToTeam();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exception {\n-        exercise.setMode(ExerciseMode.TEAM);\n-        programmingExerciseRepository.save(exercise);\n-        database.addTemplateParticipationForProgrammingExercise(exercise);\n-        database.addSolutionParticipationForProgrammingExercise(exercise);\n-\n-        // Create a team with students\n-        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n-        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n-        team = teamService.save(exercise, team);\n-\n-        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n-\n-        // Set up mock requests for start participation\n-        final var verifications = mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents());\n-\n-        // Remove the first student from the team\n-        User firstStudent = students.iterator().next();\n-        team.removeStudents(firstStudent);\n-\n-        // Mock repository access removal call\n-        final var repositorySlug = (exercise.getProjectKey() + \"-\" + team.getParticipantIdentifier()).toLowerCase();\n-        bitbucketRequestMockProvider.mockRemoveMemberFromRepository(repositorySlug, exercise.getProjectKey(), firstStudent);\n-\n-        // Start participation with original team\n-        participationService.startExercise(exercise, team, false);\n-\n-        // Update team with removed student\n-        Team serverTeam = request.putWithResponseBody(\"/api/exercises/\" + exercise.getId() + \"/teams/\" + team.getId(), team, Team.class, HttpStatus.OK);\n-        assertThat(serverTeam.getStudents()).as(\"Team students were updated correctly\").hasSize(numberOfStudents - 1); // first student was removed\n-\n-        for (final var verification : verifications) {\n-            verification.performVerification();\n-        }\n+        programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n-    public List<DiffEntry> getChanges(Repository repository, RevCommit commit) throws Exception {\n-\n-        try (ObjectReader reader = repository.newObjectReader()) {\n-            CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();\n-            oldTreeIter.reset(reader, commit.getParents()[0].getTree());\n-            CanonicalTreeParser newTreeIter = new CanonicalTreeParser();\n-            newTreeIter.reset(reader, commit.getTree());\n-\n-            // finally get the list of changed files\n-            try (Git git = new Git(repository)) {\n-                List<DiffEntry> diffs = git.diff().setNewTree(newTreeIter).setOldTree(oldTreeIter).call();\n-                for (DiffEntry entry : diffs) {\n-                    System.out.println(\"Entry: \" + entry);\n-                }\n-                return diffs;\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 9e436793d5..1a59d00f1c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -130,4 +132,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam();\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToIndividual() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_individual_modeChange();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n+        programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n+    }\n+\n }\n", "next_change": {"commit": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 1a59d00f1c..e3f24753d3 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -144,4 +149,34 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    }\n+\n }\n", "next_change": {"commit": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex e3f24753d3..2c9a27011c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -157,26 +234,31 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testInternalServerError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    public void copyRepository_testNotCreatedError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testNotCreatedError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void copyRepository_testConflictError() throws Exception {\n-        programmingExerciseTestService.copyRepository_testConflictError();\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.configureRepository_testBadRequestError();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void configureRepository_testBadRequestError() throws Exception {\n-        programmingExerciseTestService.configureRepository_testBadRequestError();\n+    public void exportInstructorRepositories() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void exportInstructorRepositories_forbidden() throws Exception {\n+        programmingExerciseTestService.exportInstructorRepositories_forbidden();\n+    }\n }\n", "next_change": {"commit": "d20e93b929bb5181b2457029b19a9751a8a2c660", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 2c9a27011c..dbe9ab1690 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -261,4 +261,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+        programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n+    }\n }\n", "next_change": {"commit": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex dbe9ab1690..adbafa8f20 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -267,4 +279,10 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+        programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n+    }\n }\n", "next_change": {"commit": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex adbafa8f20..402a3f96e0 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -285,4 +284,16 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+        programmingExerciseTestService.automaticCleanupBuildPlans();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testAutomaticCleanupGitRepositories() {\n+        programmingExerciseTestService.automaticCleanupGitRepositories();\n+    }\n }\n", "next_change": {"commit": "3d351b700a6026d776b94881310e3fb2c26dcad2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 402a3f96e0..b7a6a3bf6b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -296,4 +376,29 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     public void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+        programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n+    }\n+\n }\n", "next_change": {"commit": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex b7a6a3bf6b..137c3c3b54 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -299,105 +310,117 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories() throws Exception {\n+    void exportInstructorRepositories() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportInstructorRepositories_forbidden() throws Exception {\n+    void exportInstructorRepositories_forbidden() throws Exception {\n         programmingExerciseTestService.exportInstructorRepositories_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterial() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterial() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_shouldReturnFile();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n+    void exportProgrammingExerciseInstructorMaterialAsTutor_forbidden() throws Exception {\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial_forbidden();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testArchiveCourseWithProgrammingExercise() throws Exception {\n+    void testArchiveCourseWithProgrammingExercise() throws Exception {\n         programmingExerciseTestService.testArchiveCourseWithProgrammingExercise();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToCreateZip() throws Exception {\n         doThrow(IOException.class).when(zipFileService).createZipFile(any(Path.class), any(), eq(false));\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n+    void testExportProgrammingExerciseInstructorMaterial_failToExportRepository() throws Exception {\n         doThrow(GitException.class).when(fileService).getUniquePathString(anyString());\n         programmingExerciseTestService.exportProgrammingExerciseInstructorMaterial(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationInterruptException() throws Exception {\n-        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationInterruptException();\n+    void testExportCourseCannotExportSingleParticipationCanceledException() throws Exception {\n+        programmingExerciseTestService.testExportCourseCannotExportSingleParticipationCanceledException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n+    void testExportCourseCannotExportSingleParticipationGitApiException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitApiException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testExportCourseCannotSingleParticipationGitException() throws Exception {\n+    void testExportCourseCannotSingleParticipationGitException() throws Exception {\n         programmingExerciseTestService.testExportCourseCannotExportSingleParticipationGitException();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDownloadCourseArchiveAsInstructor() throws Exception {\n+    void testDownloadCourseArchiveAsInstructor() throws Exception {\n         programmingExerciseTestService.testDownloadCourseArchiveAsInstructor();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanUpBuildPlans() throws Exception {\n+    void testAutomaticCleanUpBuildPlans() throws Exception {\n         programmingExerciseTestService.automaticCleanupBuildPlans();\n     }\n \n     @Test\n     @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n-    public void testAutomaticCleanupGitRepositories() {\n+    void testAutomaticCleanupGitRepositories() {\n         programmingExerciseTestService.automaticCleanupGitRepositories();\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n+    void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n+        programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n+    }\n+\n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n+    void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n         programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n     }\n \n     @Test\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n+    void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n", "next_change": {"commit": "593283a9b50a476824af052f7e3aae139262c297", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 137c3c3b54..8367aaac9b 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -424,4 +424,22 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    void testBuildLogStatistics_unauthorized() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_unauthorized();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics_noStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics_noStatistics();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testBuildLogStatistics() throws Exception {\n+        programmingExerciseTestService.buildLogStatistics();\n+    }\n+\n }\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 8367aaac9b..3cce636459 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n", "chunk": "@@ -389,57 +378,63 @@ class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractSpringIn\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.importProgrammingExerciseFromCourseToCourse_exampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setInvalidExampleSolutionPublicationDate_badRequest();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void createProgrammingExercise_setValidExampleSolutionPublicationDate() throws Exception {\n         programmingExerciseTestService.createProgrammingExercise_setValidExampleSolutionPublicationDate();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testGetProgrammingExercise_asStudent_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, \"student1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(true, TEST_PREFIX + \"student1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testGetProgrammingExercise_asInstructor_exampleSolutionVisibility() throws Exception {\n-        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, \"instructor1\");\n+        programmingExerciseTestService.testGetProgrammingExercise_exampleSolutionVisibility(false, TEST_PREFIX + \"instructor1\");\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testExportSolutionRepository_shouldReturnFileOrForbidden() throws Exception {\n         programmingExerciseTestService.exportSolutionRepository_shouldReturnFileOrForbidden();\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"USER\")\n     void testBuildLogStatistics_unauthorized() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_unauthorized();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics_noStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics_noStatistics();\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testBuildLogStatistics() throws Exception {\n         programmingExerciseTestService.buildLogStatistics();\n     }\n \n+    private void mockUsers(int amount, String name) throws URISyntaxException {\n+        for (int i = 1; i <= amount; i++) {\n+            bitbucketRequestMockProvider.mockUserExists(TEST_PREFIX + name + i);\n+        }\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "1a170878e8035a043b61ef473ee558af541f3d8a", "committedDate": "2020-10-06 11:45:07 +0200", "message": "Replace Adding Empty Strings by String.valueOf (#2161)"}, {"oid": "72a79dfcaa482c992ac7b05e232ef62ce933f0d3", "committedDate": "2020-10-11 15:51:13 +0200", "message": "Improve test coverage BambooService (#2187)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "67dcd41fa289bf308919b73f6275da293679c914", "committedDate": "2020-10-18 21:11:21 +0200", "message": "fix flaky test and improve caching behavior of application links for concurrent operations"}, {"oid": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc", "committedDate": "2020-10-20 17:25:04 +0200", "message": "Improve server side git url handling and server test improvements (#2237)"}, {"oid": "908c3e88910aa014ee7565bd95ea71536593bd5f", "committedDate": "2020-10-23 13:33:11 +0200", "message": "add Swift as programming language enum to prevent problems when testing #2191"}, {"oid": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "committedDate": "2020-10-27 22:54:21 +0100", "message": "Change team mode on exercise import. (#2268)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "73eda02bcc2afbfa78bfb5c34cbff8fa64118cb3", "committedDate": "2020-10-29 21:04:54 +0100", "message": "Consistently use DTOs in Jira/Bitbucket/BambooService and improve test coverage in BitbucketService (#2247)"}, {"oid": "d8027bf77bb83ee2ca1275af81b291616f18f1c0", "committedDate": "2020-11-10 08:43:00 +0100", "message": "Add template for Swift programming exercises (#2326)"}, {"oid": "4daa1ecc2c7581e96d942a28047aacf5b32267cb", "committedDate": "2020-11-10 22:59:39 +0100", "message": "Add option to recreate build plans when importing programming exercises (#2330)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "d707cd721936372faa92073fb1e3b560d7ff9689", "committedDate": "2021-01-02 17:06:49 +0100", "message": "Add server integration tests for resume programming exercise (#2614)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "3884ed328d4bf87428129222c0778010ac5f418d", "committedDate": "2021-01-25 22:39:35 +0100", "message": "Replace fork repository with copy Repository in version control service (#2722)"}, {"oid": "5b6001738c9a79d85e5b1c754ef6c9e80984bee7", "committedDate": "2021-01-28 15:14:44 +0100", "message": "add clone & download repo button in programming details view  (#2729)"}, {"oid": "d20e93b929bb5181b2457029b19a9751a8a2c660", "committedDate": "2021-02-10 14:01:58 +0100", "message": "Add options to archive and cleanup a course (#2813)"}, {"oid": "54601dde775f25f8c20f8acc5f867e68d65af18a", "committedDate": "2021-03-16 20:27:03 +0100", "message": "Improve server test coverage for Gitlab, Jenkins, Bamboo (#3024)"}, {"oid": "fceeaef9fa01fe6daa9a2b221597634d2d2f9f2a", "committedDate": "2021-03-26 18:13:24 +0100", "message": "Reduce server service dependencies (#3079)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "75d1c59d75078f62cb0efe90b16ec717cdbac4e9", "committedDate": "2021-04-09 19:30:21 +0200", "message": "Improve download archive server tests (#3127)"}, {"oid": "68254adc6d02c035fa47f931855012a722df727c", "committedDate": "2021-04-19 12:43:44 +0200", "message": "Add Kotlin pipeline to Jenkins & Sequential Test Run support (#3189)"}, {"oid": "4843137aa01cfdf27ea019400c48df00df36ed45", "committedDate": "2021-04-26 11:23:38 +0200", "message": "Please avoid the use of additional SpyBeans in your server integration tests!"}, {"oid": "aafbdeceb25f4a867ed38c63e857be60a6f8465d", "committedDate": "2021-04-27 14:00:15 +0200", "message": "Improve automatic cleanup service, add configuration options batch size and waiting time for external requests (#3298)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "7e0bf653a47ce25a2df0e200590e021d235cc511", "committedDate": "2021-05-14 15:07:16 +0200", "message": "Allow instructors to export programming exercises (repos, problem statement, details) (#3273)"}, {"oid": "f7d4291d3934ce04aa12049e64be25175f0b1505", "committedDate": "2021-06-09 11:37:16 +0200", "message": "Auxiliary Repositories for Programming Exercises (#3457)"}, {"oid": "014643092dc0a504f4602beff6847b8eed0fd156", "committedDate": "2021-06-11 08:40:26 +0200", "message": "Fix course archival issues (#3549)"}, {"oid": "2176e2d2baf21354a96c3692437b315a9dee252b", "committedDate": "2021-06-25 16:13:24 +0200", "message": "Allow to configure the default branch directly in Artemis (#2844)"}, {"oid": "8863908136239c7570bcfa34e254737ad8ffdf9b", "committedDate": "2021-07-27 10:14:09 +0200", "message": "Improve server test coverage for programming exercise services (#3831)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "7ad5853f5715ebe6a0c997da9890babf140da873", "committedDate": "2021-11-22 14:28:35 +0100", "message": "Exam mode: Reject exam exercises with date attributes set (#3926)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "f8d07e2175a6587d7d242404bb218fe775226097", "committedDate": "2022-01-05 09:13:11 +0100", "message": "Development: Remove outdated client dependencies (#4571)"}, {"oid": "a535522dcce93a5c6cd243f3c189b350fda28396", "committedDate": "2022-03-11 11:11:40 +0100", "message": "General: Forward changes to internal users to Bitbucket (#4644)"}, {"oid": "6ee62b7a7cd7540e862c6f53d14b34bf137a550b", "committedDate": "2022-03-24 20:03:46 +0100", "message": "Programming exercises: Change default branch from master to main (#4833)"}, {"oid": "3d351b700a6026d776b94881310e3fb2c26dcad2", "committedDate": "2022-04-14 18:09:17 +0200", "message": "Programming exercises: Allow to publish example solutions for programming exercises on a specific date (#4795)"}, {"oid": "72dc554091906333e3bf81843edcd69fa0e1c8b3", "committedDate": "2022-04-14 23:40:34 +0200", "message": "Development: Refactor Git service (#4837)"}, {"oid": "f3d56f363e27262b8c4013d068f44ed3c82071c7", "committedDate": "2022-05-26 18:50:53 -0400", "message": "Development: Validate example solution publication date (#4983)"}, {"oid": "a7c414b09dc7721d8ec859a6e28b90b4876faf81", "committedDate": "2022-06-23 14:22:12 +0200", "message": "Programming exercises: Fix an issue with excess submissions with Gitlab (#5258)"}, {"oid": "4675281bc2829b7b44abaf6e02196537123f2d50", "committedDate": "2022-07-20 13:24:51 +0200", "message": "Exam mode: Allow instructors to import exams (#5330)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "593283a9b50a476824af052f7e3aae139262c297", "committedDate": "2022-09-23 10:25:28 +0200", "message": "Programming exercises: Add build log analytics (#5337)"}, {"oid": "fa2f71d8d5da908f447f6064941d734279dae43b", "committedDate": "2022-12-02 14:49:51 +0100", "message": "Programming exercises: Allow students to download tests after due date (#5762)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "598249d89dc3b4c6ac0f76cf63c0c3ae9b285115", "committedDate": "2023-01-05 11:40:40 +0100", "message": "Exam mode: Allow instructors to publish example solutions for exam exercises (#5831)"}, {"oid": "cc924340826eee8bae263c4c3a763724e9b94d77", "committedDate": "2023-01-21 21:31:32 +0100", "message": "Programming exercises: Always give students read permissions for their repository (#5901)"}, {"oid": "a29d4f79bddec50f67dd5f2c2841d1ac4e215672", "committedDate": "2023-02-19 21:50:17 +0100", "message": "Exam mode: Fix an issue when deleting exams with multiple test runs by the same instructor (#6276)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568541", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:00Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -153,14 +236,14 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -221,29 +221,29 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": null}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -251,7 +251,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568549", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:01Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -168,7 +251,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -251,7 +251,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568557", "body": "Codacy found an issue: [The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:02Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "diffHunk": "@@ -409,13 +419,26 @@ public void updateProgrammingExercise_eitherCourseOrExerciseGroupSet_badRequest(\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExerciseInExam, HttpStatus.BAD_REQUEST);\n     }\n \n+    private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getTemplateBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getSolutionBuildPlanId(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_badRequest() throws Exception {\n-        // false -> true\n+    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\nindex 740993f589..f24f28134e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\n", "chunk": "@@ -413,15 +406,17 @@ class ProgrammingExerciseIntegrationTest extends AbstractSpringIntegrationBamboo\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void updateProgrammingExercise_eitherCourseOrExerciseGroupSet_badRequest() throws Exception {\n+        // both values are not set --> bad request\n         programmingExercise.setCourse(null);\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExercise, HttpStatus.BAD_REQUEST);\n-        programmingExerciseInExam.setCourse(programmingExercise.getCourseViaExerciseGroupOrCourseMember());\n+        // both values are set --> bad request\n+        programmingExerciseInExam.setCourse(course);\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExerciseInExam, HttpStatus.BAD_REQUEST);\n     }\n \n     private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n-        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getTemplateBuildPlanId(), true);\n-        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getSolutionBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getTemplateBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getSolutionBuildPlanId(), true);\n         bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n         bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n     }\n", "next_change": {"commit": "cffe80054889b44b27c44682a9ae47d2e4eee69f", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\nindex f24f28134e..579ed38146 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\n", "chunk": "@@ -417,8 +436,8 @@ class ProgrammingExerciseIntegrationTest extends AbstractSpringIntegrationBamboo\n     private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n         bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getTemplateBuildPlanId(), true);\n         bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getSolutionBuildPlanId(), true);\n-        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n-        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getVcsTemplateRepositoryUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getVcsSolutionRepositoryUrl(), programmingExercise.getProjectKey(), true);\n     }\n \n     @Test\n", "next_change": {"commit": "55780981c31e853e5f0c899ba00637daca87af98", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/service/ProgrammingExerciseIntegrationServiceTest.java\nsimilarity index 74%\nrename from src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\nrename to src/test/java/de/tum/in/www1/artemis/service/ProgrammingExerciseIntegrationServiceTest.java\nindex 579ed38146..c1878f8640 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/service/ProgrammingExerciseIntegrationServiceTest.java\n", "chunk": "@@ -434,22 +410,18 @@ class ProgrammingExerciseIntegrationTest extends AbstractSpringIntegrationBamboo\n     }\n \n     private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n-        bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getTemplateBuildPlanId(), true);\n-        bambooRequestMockProvider.mockBuildPlanExists(programmingExercise.getSolutionBuildPlanId(), true);\n-        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getVcsTemplateRepositoryUrl(), programmingExercise.getProjectKey(), true);\n-        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getVcsSolutionRepositoryUrl(), programmingExercise.getProjectKey(), true);\n+        mockDelegate.mockCheckIfBuildPlanExists(programmingExercise.getProjectKey(), programmingExercise.getTemplateBuildPlanId(), true);\n+        mockDelegate.mockCheckIfBuildPlanExists(programmingExercise.getProjectKey(), programmingExercise.getSolutionBuildPlanId(), true);\n+        mockDelegate.mockRepositoryUrlIsValid(programmingExercise.getVcsTemplateRepositoryUrl(), programmingExercise.getProjectKey(), true);\n+        mockDelegate.mockRepositoryUrlIsValid(programmingExercise.getVcsSolutionRepositoryUrl(), programmingExercise.getProjectKey(), true);\n     }\n \n-    @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest() throws Exception {\n         mockBuildPlanAndRepositoryCheck(programmingExercise);\n         programmingExercise.setStaticCodeAnalysisEnabled(true);\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExercise, HttpStatus.BAD_REQUEST);\n     }\n \n-    @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_trueToFalse_badRequest() throws Exception {\n         mockBuildPlanAndRepositoryCheck(programmingExercise);\n         programmingExercise.setStaticCodeAnalysisEnabled(true);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "805d76665269b039dd8442e56edfc05e901a5ecd", "committedDate": "2020-10-03 08:16:14 +0200", "message": "Improve feedback and grading generation (#2105)"}, {"oid": "44a27afa7a715f1d835546f1ef39e5d924f5c26d", "committedDate": "2020-10-04 00:01:57 +0200", "message": "Fix the Quiz Exercise Re-evaluate Integration Test (#2152)"}, {"oid": "1a170878e8035a043b61ef473ee558af541f3d8a", "committedDate": "2020-10-06 11:45:07 +0200", "message": "Replace Adding Empty Strings by String.valueOf (#2161)"}, {"oid": "f8f19039c3204b59d5298659082769fadbd79030", "committedDate": "2020-10-07 00:19:52 +0200", "message": "Properly use assessment due date for programming exercises (#2137)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "de664eefc3f2e69e3020538ea204aa3e87915505", "committedDate": "2020-10-20 01:36:05 +0200", "message": "Add option to checkout solution repository for Haskell exercises. (#2216)"}, {"oid": "c1589448351cb962f477e5b3da68dfa12a0abe73", "committedDate": "2020-10-20 21:00:21 +0200", "message": "Add structured grading instructions for programming exercises (#2222)"}, {"oid": "908c3e88910aa014ee7565bd95ea71536593bd5f", "committedDate": "2020-10-23 13:33:11 +0200", "message": "add Swift as programming language enum to prevent problems when testing #2191"}, {"oid": "d2ae64ff572ce1b37375f8703103eeefe599b4b3", "committedDate": "2020-10-24 16:28:40 +0200", "message": "fix flaky tests that led to exceptions due to the wrong use of Result <\u2014> Feedback"}, {"oid": "3b73d629d5f2e07780f19afcee14090e9695e1f9", "committedDate": "2020-10-27 22:54:21 +0100", "message": "Change team mode on exercise import. (#2268)"}, {"oid": "4a8b1f9387c747a186e96fa74bada843295c1713", "committedDate": "2020-10-29 15:36:12 +0100", "message": "Allow instructors to choose between Maven and Eclipse template for the Java programming language (#2278)"}, {"oid": "d8027bf77bb83ee2ca1275af81b291616f18f1c0", "committedDate": "2020-11-10 08:43:00 +0100", "message": "Add template for Swift programming exercises (#2326)"}, {"oid": "e62432d23df1581e7509b2ea7660f7a47bd6b4d8", "committedDate": "2020-11-17 20:34:18 +0100", "message": "Do not allow static code analysis and sequential test runs active at the same time (#2419)"}, {"oid": "a93ed64f851a4e52fb11523d5bde6849cd48d7f4", "committedDate": "2020-11-17 21:23:08 +0100", "message": "Improve user service (#2379)"}, {"oid": "511bd214c0efc93327f40d99e87e064a49f8307d", "committedDate": "2020-12-10 16:10:45 +0100", "message": "Fix grading configuration sum of test case weights is 0 or smaller (#2520)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "cffe80054889b44b27c44682a9ae47d2e4eee69f", "committedDate": "2021-01-03 13:05:44 +0100", "message": "Add personal access token and ssh authentication against git repositories to the Artemis server (GitService: clone, pull, push, ...) (#2620)"}, {"oid": "8769ab8304cb5597a4df036dab57e60d0afb5107", "committedDate": "2021-01-04 23:31:43 +0100", "message": "Allow to activate deactivate static code analysis when import programming exercises (#2599)"}, {"oid": "104cd014406d0f9daf97f71803e9dcc7385adbde", "committedDate": "2021-01-16 09:46:24 +0100", "message": "Allow instructors to manually lock and unlock all student repositories in programming exercises (#2685)"}, {"oid": "8ded10c11dd2ea1920d3e4c97139798dd1553f47", "committedDate": "2021-01-22 16:22:12 +0100", "message": "Fixes code line highlighting for tutors and wrongly invoked method for students during manual assessments of programming exercises (#2726)"}, {"oid": "fef8e41208b355cac16c6b98e6148a157a3b9aca", "committedDate": "2021-01-25 21:42:23 +0100", "message": "Allow to categorize exercises into included into score, as bonus exercises or as optional exercises (#2651)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "92687bafd9625362bf620bd8b0294a4e9f96b1b6", "committedDate": "2021-01-30 09:42:34 +0100", "message": "Improve bulk editing programming exercises (#2770)"}, {"oid": "9caa774f8bcb709245fcbe152b327e7dc6cb38bf", "committedDate": "2021-02-02 11:25:19 +0100", "message": "Change score to the correct noun: points (#2797)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "55780981c31e853e5f0c899ba00637daca87af98", "committedDate": "2021-03-15 21:18:16 +0100", "message": "Add user management capabilities and access control for Jenkins (#2959)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568560", "body": "Codacy found an issue: [The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756)", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=6118756\" rel=\"nofollow\">The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'</a></p>", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:03Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be271aa14f727f9754d1366bb8efc498f748f512", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 8e6c20d1c6..93411fe0f5 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -153,14 +236,14 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": {"commit": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -221,29 +221,29 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"student1\", roles = \"STUDENT\")\n+    @WithMockUser(username = TEST_PREFIX + \"student1\", roles = \"STUDENT\")\n     void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    @WithMockUser(username = TEST_PREFIX + \"other-ta1\", roles = \"TA\")\n     void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n-        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        database.addTeachingAssistant(\"other-tas\", TEST_PREFIX + \"other-ta\");\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n         request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n", "next_change": null}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\nindex 93411fe0f5..f92d5e7113 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java\n", "chunk": "@@ -251,7 +251,7 @@ class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(username = TEST_PREFIX + \"instructor1\", roles = \"INSTRUCTOR\")\n     void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n         var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n         programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8", "message": "Merge commit", "committedDate": null}, {"oid": "052ff97b20f2689feb4434a1062dbb3fe5a03f53", "committedDate": "2020-10-04 21:58:48 +0200", "message": "increase test coverage of domain classes and remove unused code"}, {"oid": "096066d12b9ddd004db89f93ddad199b1c2f0bc7", "committedDate": "2020-10-06 11:49:42 +0200", "message": "Add Dynamic Tests for the Artemis Domain Classes (#2155)"}, {"oid": "b70cffe8c5f0114f190a6d644ba5b68e590b9f73", "committedDate": "2020-10-06 23:45:00 +0200", "message": "Grading with Static Code Analysis (#2107)"}, {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285", "committedDate": "2020-10-15 16:38:38 +0200", "message": "Improvements to BambooService (#2199)"}, {"oid": "6a28744bc473a22b9bcfe36555b80f83a26f5dfa", "committedDate": "2020-10-23 01:39:36 +0200", "message": "Fix SCA categorization when build fails (#2253)"}, {"oid": "c29f1b58434e571a028f8029775e3106e22294be", "committedDate": "2020-11-24 22:17:26 +0100", "message": "Show capped penalty of static code analysis issues in feedback view for programming exercises (#2407)"}, {"oid": "43e8acbbd6bd1534b66b91ba217094883a570afc", "committedDate": "2020-12-29 11:11:40 +0100", "message": "Fix null pointer exception in resume exercise on Jenkins setup (#2607)"}, {"oid": "991cbd3dc82d8caf79e0ca7a5beb44c54a97c26a", "committedDate": "2021-01-02 17:08:50 +0100", "message": "Add static code analysis to Swift programming exercises (#2512)"}, {"oid": "e20c63a062cf1e819ca629c1f543334a4f5a73ea", "committedDate": "2021-01-30 09:37:23 +0100", "message": "Allow instructors to reset static code analysis categories (#2747)"}, {"oid": "4e8210f3b20c3d03b52d20b9c68c2e8877768dde", "committedDate": "2021-02-10 14:42:13 +0100", "message": "Fix submission result issue with template and solution participation of programming exercises (#2843)"}, {"oid": "749fa50c416ba1e5a9b8cc739a4fe32dca8c27e8", "committedDate": "2021-02-15 15:44:55 +0100", "message": "Refactor services on the server (#2869)"}, {"oid": "5f09c792d47a74a7215bd05bd3c909ceecfcc429", "committedDate": "2021-04-06 12:39:33 +0200", "message": "Improve server code and test code quality (#3126)"}, {"oid": "13d2d77403de15270a7c6ffbd6210ed2c169551d", "committedDate": "2021-04-30 20:43:34 +0200", "message": "Add a new editor role between instructor and tutor (#3256)"}, {"oid": "e106619e18b6105cfacdd4de7b7369b62d807897", "committedDate": "2021-10-09 15:42:45 +0200", "message": "Programming exercises: Add static analysis for C (#3957)"}, {"oid": "be271aa14f727f9754d1366bb8efc498f748f512", "committedDate": "2021-12-22 22:12:23 +0100", "message": "Development: Improve server test coverage and code quality (#4537)"}, {"oid": "0c10366da34de281385b85e46c5481be61594d93", "committedDate": "2022-03-20 20:43:02 +0100", "message": "Development: Improve server test assertions (#4826)"}, {"oid": "7b16c27071cedefbff745c7e1b405deb6288fd3b", "committedDate": "2022-04-22 16:58:23 +0200", "message": "Programming exercises: Add the option to record the testwise coverage for Java gradle programming exercises (#4889)"}, {"oid": "19e0c0e2bdb6971e30dc3f52c60360431c9eecde", "committedDate": "2022-07-20 15:24:28 +0200", "message": "Development: Replace .collect(Collectors.toList()) with .toList() or Collectors.toCollection() (#5312)"}, {"oid": "70fe468c9aad71680d9f1cffd30b6de32c642a94", "committedDate": "2022-07-21 07:50:56 +0200", "message": "Development: Remove public modifier from server test cases (#5324)"}, {"oid": "ed4696bcb3c1d90712e55e3f032494f1cd74b537", "committedDate": "2022-12-23 21:16:26 +0100", "message": "Development: Add PostgreSQL and test container support and cleanup change logs with migration paths (#5661)"}, {"oid": "dc7d763cdf43341cb4ea5ccbcdf591a63527cf8f", "committedDate": "2022-12-31 15:11:14 +0100", "message": "Development: Re-enable server tests and fix tests for PostgreSQL (#6002)"}, {"oid": "c89feaf14b64a7674987eebaeae82c2740a2ec15", "committedDate": "2023-02-01 23:53:18 +0100", "message": "Programming exercises: Add possibility to import existing static code analysis configurations (#6043)"}]}]}