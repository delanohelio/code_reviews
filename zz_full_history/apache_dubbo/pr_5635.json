{"pr_number": 5635, "pr_title": "allow user to pass AsyncMethodInfo at runtime.", "pr_author": "beiwei30", "pr_createdAt": "2020-01-10T11:39:17Z", "pr_url": "https://github.com/apache/dubbo/pull/5635", "timeline": [{"oid": "b74507b582ba90f4f2d4806c25f5c7952ca1846b", "url": "https://github.com/apache/dubbo/commit/b74507b582ba90f4f2d4806c25f5c7952ca1846b", "message": "allow AsyncMethodInfo on Invocation to override the configured AsyncMethodInfo, to give user a chance to change AsyncMethodInfo on the fly", "committedDate": "2020-01-10T11:35:54Z", "type": "commit"}, {"oid": "587b870ad7e23eb616a6f1cf70b984bafb4a50da", "url": "https://github.com/apache/dubbo/commit/587b870ad7e23eb616a6f1cf70b984bafb4a50da", "message": "avoid NPE when return type is primitive", "committedDate": "2020-01-13T08:55:12Z", "type": "commit"}, {"oid": "8c05550d233def81a22784bac5d5af21369b77d0", "url": "https://github.com/apache/dubbo/commit/8c05550d233def81a22784bac5d5af21369b77d0", "message": "allow find consumer-model from invocation", "committedDate": "2020-01-13T13:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213000", "body": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "bodyText": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "bodyHTML": "<p dir=\"auto\">I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:15:45Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "diffHunk": "@@ -55,7 +57,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n-        rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n+        String serviceKey = invoker.getUrl().getServiceKey();\n+        if (serviceKey != null) {\n+            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDIzNQ==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367244235", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex b464f262c..fc0f8b333 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -58,10 +64,10 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n-        if (serviceKey != null) {\n-            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n-            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);\n-            rpcInvocation.put(\"consumerModel\", consumerModel);\n+        rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+        if (consumerModel != null) {\n+            rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n+            rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n         }\n \n         return invoker.invoke(rpcInvocation).recreate();\n", "next_change": {"commit": "ce8b6e8972ddf8a78652d49f3ecde546420f46fa", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex fc0f8b333..904197534 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -65,6 +65,7 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+      \n         if (consumerModel != null) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n             rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n", "next_change": {"commit": "c572c2cd2e5dd2d11a81825f50d22a1363eee1fb", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 904197534..b5c9e6716 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -65,7 +66,9 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n-      \n+\n+        RpcContext.setRpcContext(invoker.getUrl());\n+\n         if (consumerModel != null) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n             rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n", "next_change": {"commit": "71189cbe4bf6abae73771c94a4a2fd9500428b50", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex b5c9e6716..0eae664e6 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -67,6 +67,7 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         String serviceKey = invoker.getUrl().getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n \n+        // invoker.getUrl() returns consumer url.\n         RpcContext.setRpcContext(invoker.getUrl());\n \n         if (consumerModel != null) {\n", "next_change": {"commit": "a001f983b31b7174f01d9781b7921dddd6115c77", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 0eae664e6..69f1d0694 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -63,7 +68,7 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         } else if (parameterTypes.length == 1 && \"equals\".equals(methodName)) {\n             return invoker.equals(args[0]);\n         }\n-        RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n+        RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), protocolServiceKey, args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n \n", "next_change": {"commit": "81890a85fa9b7f8ac02dc93072697c8f704970e9", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 69f1d0694..fb7ec5177 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -69,11 +69,11 @@ public class InvokerInvocationHandler implements InvocationHandler {\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), protocolServiceKey, args);\n-        String serviceKey = invoker.getUrl().getServiceKey();\n+        String serviceKey = url.getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n \n         // invoker.getUrl() returns consumer url.\n-        RpcContext.setRpcContext(invoker.getUrl());\n+        RpcContext.setRpcContext(url);\n \n         if (consumerModel != null) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n", "next_change": {"commit": "60c55b83bc27282dabb93a31ccb3e35e29ae087e", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex fb7ec5177..e3df54faa 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -73,7 +73,7 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n \n         // invoker.getUrl() returns consumer url.\n-        RpcContext.setRpcContext(url);\n+        RpcServiceContext.setRpcContext(url);\n \n         if (consumerModel != null) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n", "next_change": {"commit": "ff39bf36c35316061e7e028abd28dd392405e7f0", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex e3df54faa..70e8b8329 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -68,16 +77,16 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         } else if (parameterTypes.length == 1 && \"equals\".equals(methodName)) {\n             return invoker.equals(args[0]);\n         }\n-        RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), protocolServiceKey, args);\n+        RpcInvocation rpcInvocation = new RpcInvocation(serviceModel, method, invoker.getInterface().getName(), protocolServiceKey, args);\n         String serviceKey = url.getServiceKey();\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n \n         // invoker.getUrl() returns consumer url.\n         RpcServiceContext.setRpcContext(url);\n \n-        if (consumerModel != null) {\n-            rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n-            rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n+        if (serviceModel instanceof ConsumerModel) {\n+            rpcInvocation.put(Constants.CONSUMER_MODEL, serviceModel);\n+            rpcInvocation.put(Constants.METHOD_MODEL, ((ConsumerModel) serviceModel).getMethodModel(method));\n         }\n \n         return invoker.invoke(rpcInvocation).recreate();\n", "next_change": {"commit": "798840e8577650fa6ad24776b2028f0eb5c7c8a2", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 70e8b8329..1b440b578 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -89,6 +84,46 @@ public class InvokerInvocationHandler implements InvocationHandler {\n             rpcInvocation.put(Constants.METHOD_MODEL, ((ConsumerModel) serviceModel).getMethodModel(method));\n         }\n \n+        if (ProfilerSwitch.isEnableSimpleProfiler()) {\n+            ProfilerEntry parentProfiler = Profiler.getBizProfiler();\n+            ProfilerEntry bizProfiler;\n+            boolean containsBizProfiler = false;\n+            if (parentProfiler != null) {\n+                containsBizProfiler = true;\n+                bizProfiler = Profiler.enter(parentProfiler, \"Receive request. Client invoke begin.\");\n+            } else {\n+                bizProfiler = Profiler.start(\"Receive request. Client invoke begin.\");\n+            }\n+            rpcInvocation.put(Profiler.PROFILER_KEY, bizProfiler);\n+            try {\n+                return invoker.invoke(rpcInvocation).recreate();\n+            } finally {\n+                Profiler.release(bizProfiler);\n+                if (!containsBizProfiler) {\n+                    int timeout;\n+                    Object timeoutKey = rpcInvocation.getObjectAttachment(TIMEOUT_KEY);\n+                    if (timeoutKey instanceof Integer) {\n+                        timeout = (Integer) timeoutKey;\n+                    } else {\n+                        timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);\n+                    }\n+                    long usage = bizProfiler.getEndTime() - bizProfiler.getStartTime();\n+                    if (usage > (timeout * 1000_000 * ProfilerSwitch.getWarnPercent())) {\n+                        StringBuilder attachment = new StringBuilder();\n+                        for (Map.Entry<String, Object> entry : rpcInvocation.getObjectAttachments().entrySet()) {\n+                            attachment.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\";\\n\");\n+                        }\n+\n+                        logger.warn(String.format(\"[Dubbo-Consumer] execute service %s#%s cost %d.%06d ms, this invocation almost (maybe already) timeout\\n\" +\n+                                \"invocation context:\\n%s\" +\n+                                \"thread info: \\n%s\",\n+                            protocolServiceKey, methodName, usage / 1000_000, usage % 1000_000,\n+                            attachment, Profiler.buildDetail(bizProfiler)));\n+                    }\n+                }\n+            }\n+        }\n+\n         return invoker.invoke(rpcInvocation).recreate();\n     }\n }\n", "next_change": {"commit": "2fca4677825ac4ee4449176783cdba9d81c545e0", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 1b440b578..0672e02fa 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -87,39 +87,35 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         if (ProfilerSwitch.isEnableSimpleProfiler()) {\n             ProfilerEntry parentProfiler = Profiler.getBizProfiler();\n             ProfilerEntry bizProfiler;\n-            boolean containsBizProfiler = false;\n             if (parentProfiler != null) {\n-                containsBizProfiler = true;\n-                bizProfiler = Profiler.enter(parentProfiler, \"Receive request. Client invoke begin.\");\n+                bizProfiler = Profiler.enter(parentProfiler, \"Receive request. Client invoke begin. ServiceKey: \" + serviceKey + \" MethodName:\" + methodName);\n             } else {\n-                bizProfiler = Profiler.start(\"Receive request. Client invoke begin.\");\n+                bizProfiler = Profiler.start(\"Receive request. Client invoke begin. ServiceKey: \" + serviceKey + \" MethodName:\" + methodName);\n             }\n             rpcInvocation.put(Profiler.PROFILER_KEY, bizProfiler);\n             try {\n                 return invoker.invoke(rpcInvocation).recreate();\n             } finally {\n                 Profiler.release(bizProfiler);\n-                if (!containsBizProfiler) {\n-                    int timeout;\n-                    Object timeoutKey = rpcInvocation.getObjectAttachment(TIMEOUT_KEY);\n-                    if (timeoutKey instanceof Integer) {\n-                        timeout = (Integer) timeoutKey;\n-                    } else {\n-                        timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);\n+                int timeout;\n+                Object timeoutKey = rpcInvocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY);\n+                if (timeoutKey instanceof Integer) {\n+                    timeout = (Integer) timeoutKey;\n+                } else {\n+                    timeout = url.getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);\n+                }\n+                long usage = bizProfiler.getEndTime() - bizProfiler.getStartTime();\n+                if ((usage / (1000_000L * ProfilerSwitch.getWarnPercent())) > timeout) {\n+                    StringBuilder attachment = new StringBuilder();\n+                    for (Map.Entry<String, Object> entry : rpcInvocation.getObjectAttachments().entrySet()) {\n+                        attachment.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\";\\n\");\n                     }\n-                    long usage = bizProfiler.getEndTime() - bizProfiler.getStartTime();\n-                    if (usage > (timeout * 1000_000 * ProfilerSwitch.getWarnPercent())) {\n-                        StringBuilder attachment = new StringBuilder();\n-                        for (Map.Entry<String, Object> entry : rpcInvocation.getObjectAttachments().entrySet()) {\n-                            attachment.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\";\\n\");\n-                        }\n \n-                        logger.warn(String.format(\"[Dubbo-Consumer] execute service %s#%s cost %d.%06d ms, this invocation almost (maybe already) timeout\\n\" +\n-                                \"invocation context:\\n%s\" +\n-                                \"thread info: \\n%s\",\n-                            protocolServiceKey, methodName, usage / 1000_000, usage % 1000_000,\n-                            attachment, Profiler.buildDetail(bizProfiler)));\n-                    }\n+                    logger.warn(String.format(\"[Dubbo-Consumer] execute service %s#%s cost %d.%06d ms, this invocation almost (maybe already) timeout. Timeout: %dms\\n\" +\n+                            \"invocation context:\\n%s\" +\n+                            \"thread info: \\n%s\",\n+                        protocolServiceKey, methodName, usage / 1000_000, usage % 1000_000, timeout,\n+                        attachment, Profiler.buildDetail(bizProfiler)));\n                 }\n             }\n         }\n", "next_change": {"commit": "7c136268724d63686f0305b3d480a2904b413119", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex 0672e02fa..a28314447 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -73,53 +65,11 @@ public class InvokerInvocationHandler implements InvocationHandler {\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(serviceModel, method, invoker.getInterface().getName(), protocolServiceKey, args);\n-        String serviceKey = url.getServiceKey();\n-        rpcInvocation.setTargetServiceUniqueName(serviceKey);\n-\n-        // invoker.getUrl() returns consumer url.\n-        RpcServiceContext.setRpcContext(url);\n \n         if (serviceModel instanceof ConsumerModel) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, serviceModel);\n             rpcInvocation.put(Constants.METHOD_MODEL, ((ConsumerModel) serviceModel).getMethodModel(method));\n         }\n-\n-        if (ProfilerSwitch.isEnableSimpleProfiler()) {\n-            ProfilerEntry parentProfiler = Profiler.getBizProfiler();\n-            ProfilerEntry bizProfiler;\n-            if (parentProfiler != null) {\n-                bizProfiler = Profiler.enter(parentProfiler, \"Receive request. Client invoke begin. ServiceKey: \" + serviceKey + \" MethodName:\" + methodName);\n-            } else {\n-                bizProfiler = Profiler.start(\"Receive request. Client invoke begin. ServiceKey: \" + serviceKey + \" MethodName:\" + methodName);\n-            }\n-            rpcInvocation.put(Profiler.PROFILER_KEY, bizProfiler);\n-            try {\n-                return invoker.invoke(rpcInvocation).recreate();\n-            } finally {\n-                Profiler.release(bizProfiler);\n-                int timeout;\n-                Object timeoutKey = rpcInvocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY);\n-                if (timeoutKey instanceof Integer) {\n-                    timeout = (Integer) timeoutKey;\n-                } else {\n-                    timeout = url.getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);\n-                }\n-                long usage = bizProfiler.getEndTime() - bizProfiler.getStartTime();\n-                if ((usage / (1000_000L * ProfilerSwitch.getWarnPercent())) > timeout) {\n-                    StringBuilder attachment = new StringBuilder();\n-                    for (Map.Entry<String, Object> entry : rpcInvocation.getObjectAttachments().entrySet()) {\n-                        attachment.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\";\\n\");\n-                    }\n-\n-                    logger.warn(String.format(\"[Dubbo-Consumer] execute service %s#%s cost %d.%06d ms, this invocation almost (maybe already) timeout. Timeout: %dms\\n\" +\n-                            \"invocation context:\\n%s\" +\n-                            \"thread info: \\n%s\",\n-                        protocolServiceKey, methodName, usage / 1000_000, usage % 1000_000, timeout,\n-                        attachment, Profiler.buildDetail(bizProfiler)));\n-                }\n-            }\n-        }\n-\n-        return invoker.invoke(rpcInvocation).recreate();\n+        return InvocationUtil.invoke(invoker, rpcInvocation);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213587", "body": "I think you could get  consumerModel directly from invocation attributes ", "bodyText": "I think you could get  consumerModel directly from invocation attributes", "bodyHTML": "<p dir=\"auto\">I think you could get  consumerModel directly from invocation attributes</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:19:00Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTk0Ng==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367245946", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..751715b4e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n", "next_change": {"commit": "c783e55ec955beb93916d1cdd5dbdf0ef1451796", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 751715b4e..5daf5cb01 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -144,8 +146,9 @@ public class AsyncRpcResult implements Result {\n                 return responseFuture.get();\n             }\n         } catch (Exception e) {\n-            // This should never happen;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n+            // This should not happen in normal request process;\n+            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            throw new RpcException(e);\n         }\n \n         return createDefaultValue(invocation);\n", "next_change": {"commit": "6ed4cc2457fbcb2380d11d9f6d6c885e723bc08b", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 5daf5cb01..4814ce0ac 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -147,7 +162,7 @@ public class AsyncRpcResult implements Result {\n             }\n         } catch (Exception e) {\n             // This should not happen in normal request process;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            logger.error(PROXY_ERROR_ASYNC_RESPONSE, \"\", \"\", \"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n             throw new RpcException(e);\n         }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367216302", "body": "why do you need a default value? just null is it ok?", "bodyText": "why do you need a default value? just null is it ok?", "bodyHTML": "<p dir=\"auto\">why do you need a default value? just null is it ok?</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:33:19Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();\n+        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n+        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n+        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MzE5OA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367243198", "bodyText": "when the return type is primitive type, it will cause class cast exception in proxy object.", "author": "beiwei30", "createdAt": "2020-01-16T05:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..751715b4e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n", "next_change": {"commit": "c783e55ec955beb93916d1cdd5dbdf0ef1451796", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 751715b4e..5daf5cb01 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -144,8 +146,9 @@ public class AsyncRpcResult implements Result {\n                 return responseFuture.get();\n             }\n         } catch (Exception e) {\n-            // This should never happen;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n+            // This should not happen in normal request process;\n+            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            throw new RpcException(e);\n         }\n \n         return createDefaultValue(invocation);\n", "next_change": {"commit": "6ed4cc2457fbcb2380d11d9f6d6c885e723bc08b", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 5daf5cb01..4814ce0ac 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -147,7 +162,7 @@ public class AsyncRpcResult implements Result {\n             }\n         } catch (Exception e) {\n             // This should not happen in normal request process;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            logger.error(PROXY_ERROR_ASYNC_RESPONSE, \"\", \"\", \"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n             throw new RpcException(e);\n         }\n \n", "next_change": null}]}}]}}]}}, {"oid": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "url": "https://github.com/apache/dubbo/commit/5bc85f15b2d6bc7893238369a392d74c54e0866a", "message": "enhance consumer model logic", "committedDate": "2020-01-16T06:11:24Z", "type": "commit"}, {"oid": "2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "url": "https://github.com/apache/dubbo/commit/2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "message": "introduce method model in rpc invocation", "committedDate": "2020-01-16T06:39:32Z", "type": "commit"}, {"oid": "812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "url": "https://github.com/apache/dubbo/commit/812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "message": "fix unit test failure", "committedDate": "2020-01-16T08:10:36Z", "type": "commit"}]}