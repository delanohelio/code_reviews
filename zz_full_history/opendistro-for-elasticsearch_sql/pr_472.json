{"pr_number": 472, "pr_title": "[PPL] Add support for fields command", "pr_author": "penghuo", "pr_createdAt": "2020-05-19T16:23:20Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472", "timeline": [{"oid": "06c761c4a3e6b506fe7653e4e918e7e8818ada4e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/06c761c4a3e6b506fe7653e4e918e7e8818ada4e", "message": "add LogicalProject and LogicalRemove", "committedDate": "2020-05-19T04:25:03Z", "type": "commit"}, {"oid": "49da37f2e3f5de486ca8b83118e3283bacf99bfb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/49da37f2e3f5de486ca8b83118e3283bacf99bfb", "message": "add todo comments", "committedDate": "2020-05-19T04:32:07Z", "type": "commit"}, {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dc02bb923318eb04f6d8661050b52ab4455bfd5e", "message": "add physical project and remove operator", "committedDate": "2020-05-19T16:16:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428220137", "body": "The indent is changed to 2 spaces in this file and some other files?", "bodyText": "The indent is changed to 2 spaces in this file and some other files?", "bodyHTML": "<p dir=\"auto\">The indent is changed to 2 spaces in this file and some other files?</p>", "author": "dai-chen", "createdAt": "2020-05-20T18:27:44Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java", "diffHunk": "@@ -18,30 +18,39 @@\n import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Arrays;\n import lombok.experimental.UtilityClass;\n \n import java.util.List;\n import java.util.Map;\n \n-/**\n- * Logical Plan DSL.\n- */\n+/** Logical Plan DSL. */\n @UtilityClass\n public class LogicalPlanDSL {\n-    public static LogicalPlan aggregation(LogicalPlan input, List<Aggregator> aggregatorList,\n-                                          List<Expression> groupByList) {\n-        return new LogicalAggregation(input, aggregatorList, groupByList);\n-    }\n-\n-    public static LogicalPlan filter(LogicalPlan input, Expression expression) {\n-        return new LogicalFilter(input, expression);\n-    }\n-\n-    public static LogicalPlan relation(String tableName) {\n-        return new LogicalRelation(tableName);\n-    }\n-\n-    public static LogicalPlan rename(LogicalPlan input, Map<ReferenceExpression, ReferenceExpression> renameMap) {\n-        return new LogicalRename(input, renameMap);\n-    }\n+  public static LogicalPlan aggregation(", "originalCommit": "dc02bb923318eb04f6d8661050b52ab4455bfd5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MDcyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428280725", "bodyText": "yes, enable https://plugins.jetbrains.com/plugin/8527-google-java-format.\nlet's talk whether we should enable for the project.", "author": "penghuo", "createdAt": "2020-05-20T20:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4ODcwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428288703", "bodyText": "Sure.", "author": "dai-chen", "createdAt": "2020-05-20T20:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "8274edd1187a3f158301fa1ca2ba3e09233adc79", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\nindex a8facc14..f675151c 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n", "chunk": "@@ -24,6 +24,7 @@ import lombok.experimental.UtilityClass;\n \n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n \n /** Logical Plan DSL. */\n @UtilityClass\n", "next_change": {"commit": "d5f0e9616e111acae645d7a3db60d41d49fc3163", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\nindex f675151c..98df7dac 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n", "chunk": "@@ -15,18 +15,20 @@\n \n package com.amazon.opendistroforelasticsearch.sql.planner.logical;\n \n+import com.amazon.opendistroforelasticsearch.sql.ast.tree.Sort.SortOption;\n import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n import com.google.common.collect.ImmutableSet;\n import java.util.Arrays;\n-import lombok.experimental.UtilityClass;\n-\n import java.util.List;\n import java.util.Map;\n+import lombok.experimental.UtilityClass;\n import org.apache.commons.lang3.tuple.Pair;\n \n-/** Logical Plan DSL. */\n+/**\n+ * Logical Plan DSL.\n+ */\n @UtilityClass\n public class LogicalPlanDSL {\n   public static LogicalPlan aggregation(\n", "next_change": {"commit": "94f2d3252e4ed2db78cb9d76a0747f25d28f1723", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\nindex 98df7dac..99cd7075 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n", "chunk": "@@ -31,6 +34,7 @@ import org.apache.commons.lang3.tuple.Pair;\n  */\n @UtilityClass\n public class LogicalPlanDSL {\n+\n   public static LogicalPlan aggregation(\n       LogicalPlan input, List<Aggregator> aggregatorList, List<Expression> groupByList) {\n     return new LogicalAggregation(input, aggregatorList, groupByList);\n", "next_change": {"commit": "e56d7ff96db6b66e4c11a7ac1cd721702a8cb428", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\nindex 99cd7075..af6ce726 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java\n", "chunk": "@@ -36,7 +37,7 @@ import org.apache.commons.lang3.tuple.Pair;\n public class LogicalPlanDSL {\n \n   public static LogicalPlan aggregation(\n-      LogicalPlan input, List<Aggregator> aggregatorList, List<Expression> groupByList) {\n+      LogicalPlan input, List<NamedAggregator> aggregatorList, List<NamedExpression> groupByList) {\n     return new LogicalAggregation(input, aggregatorList, groupByList);\n   }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNjU4NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428236584", "body": "Use `exprValue` directly?", "bodyText": "Use exprValue directly?", "bodyHTML": "<p dir=\"auto\">Use <code>exprValue</code> directly?</p>", "author": "dai-chen", "createdAt": "2020-05-20T18:50:51Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/** Project the fields specified in {@link ProjectOperator#projectList} from input. */\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class ProjectOperator extends PhysicalPlan {\n+  private final PhysicalPlan input;\n+  private final List<ReferenceExpression> projectList;\n+\n+  @Override\n+  public <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context) {\n+    return visitor.visitProject(this, context);\n+  }\n+\n+  @Override\n+  public List<PhysicalPlan> getChild() {\n+    return Collections.singletonList(input);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return input.hasNext();\n+  }\n+\n+  @Override\n+  public ExprValue next() {\n+    ExprValue inputValue = input.next();\n+    ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n+    for (ReferenceExpression ref : projectList) {\n+      ExprValue exprValue = ref.valueOf(inputValue.bindingTuples());\n+      // missing value is ignored.\n+      if (!exprValue.isMissing()) {\n+        mapBuilder.put(ref.toString(), ref.valueOf(inputValue.bindingTuples()));", "originalCommit": "dc02bb923318eb04f6d8661050b52ab4455bfd5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MzU2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428283569", "bodyText": "done.", "author": "penghuo", "createdAt": "2020-05-20T20:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNjU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8e4453f70ef15789ae61d71eac1e21c30fe12a23", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\nindex cfd16ea5..30928bd1 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n", "chunk": "@@ -57,7 +57,7 @@ public class ProjectOperator extends PhysicalPlan {\n       ExprValue exprValue = ref.valueOf(inputValue.bindingTuples());\n       // missing value is ignored.\n       if (!exprValue.isMissing()) {\n-        mapBuilder.put(ref.toString(), ref.valueOf(inputValue.bindingTuples()));\n+        mapBuilder.put(ref.toString(), exprValue);\n       }\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n", "next_change": {"commit": "087da8871ff9e8f6e00228fc45b5576b17f6bab7", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\nindex 30928bd1..edb7c973 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n", "chunk": "@@ -53,11 +55,11 @@ public class ProjectOperator extends PhysicalPlan {\n   public ExprValue next() {\n     ExprValue inputValue = input.next();\n     ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n-    for (ReferenceExpression ref : projectList) {\n-      ExprValue exprValue = ref.valueOf(inputValue.bindingTuples());\n+    for (Expression expr : projectList) {\n+      ExprValue exprValue = expr.valueOf(inputValue.bindingTuples());\n       // missing value is ignored.\n       if (!exprValue.isMissing()) {\n-        mapBuilder.put(ref.toString(), exprValue);\n+        mapBuilder.put(expr.toString(), exprValue);\n       }\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n", "next_change": {"commit": "dee4aec709a6b73817685b91b7d9619d3cf581bf", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\nindex edb7c973..28c1de18 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n", "chunk": "@@ -55,11 +58,11 @@ public class ProjectOperator extends PhysicalPlan {\n   public ExprValue next() {\n     ExprValue inputValue = input.next();\n     ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n-    for (Expression expr : projectList) {\n+    for (NamedExpression expr : projectList) {\n       ExprValue exprValue = expr.valueOf(inputValue.bindingTuples());\n       // missing value is ignored.\n       if (!exprValue.isMissing()) {\n-        mapBuilder.put(expr.toString(), exprValue);\n+        mapBuilder.put(expr.getName(), exprValue);\n       }\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n", "next_change": {"commit": "6021470092cdc77b5b6e2a6f0a99ee2f820394b5", "changed_code": [{"header": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\nindex 28c1de18..32a69062 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java\n", "chunk": "@@ -60,11 +62,15 @@ public class ProjectOperator extends PhysicalPlan {\n     ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n     for (NamedExpression expr : projectList) {\n       ExprValue exprValue = expr.valueOf(inputValue.bindingTuples());\n-      // missing value is ignored.\n-      if (!exprValue.isMissing()) {\n-        mapBuilder.put(expr.getName(), exprValue);\n-      }\n+      mapBuilder.put(expr.getName(), exprValue);\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n   }\n+\n+  @Override\n+  public ExecutionEngine.Schema schema() {\n+    return new ExecutionEngine.Schema(getProjectList().stream()\n+        .map(expr -> new ExecutionEngine.Schema.Column(expr.getName(),\n+            expr.getAlias(), expr.type())).collect(Collectors.toList()));\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "7acf764d82eac3941b985766e272e0a50cd6b82f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7acf764d82eac3941b985766e272e0a50cd6b82f", "message": "update", "committedDate": "2020-05-20T20:18:38Z", "type": "commit"}]}