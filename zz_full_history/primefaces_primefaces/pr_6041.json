{"pr_number": 6041, "pr_title": "Missing Secure Attribute in Encrypted Session (SSL) Cookie ", "pr_author": "ravihariharan", "pr_createdAt": "2020-06-17T01:58:21Z", "pr_url": "https://github.com/primefaces/primefaces/pull/6041", "timeline": [{"oid": "7c7a433802a2e39f1f2e43d0d1e9632619ac7cb6", "url": "https://github.com/primefaces/primefaces/commit/7c7a433802a2e39f1f2e43d0d1e9632619ac7cb6", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T01:49:31Z", "type": "commit"}, {"oid": "97c5d8af6820d74485147bc75e24098e60b5c38b", "url": "https://github.com/primefaces/primefaces/commit/97c5d8af6820d74485147bc75e24098e60b5c38b", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T01:55:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NzA2NQ==", "url": "https://github.com/primefaces/primefaces/pull/6041#discussion_r441477065", "body": "I think a better way to write this method is:\r\n```java\r\n        protected void addResponseCookie(ExternalContext externalContext) {\r\n            final boolean secure = ((HttpServletRequest) externalContext.getRequest()).isSecure();\r\n            Map<String, Object> map;\r\n            if (secure) {\r\n                map = new HashMap<>(2);\r\n                map.put(\"secure\", secure);\r\n                map.put(\"sameSite\", \"Strict\");\r\n            }\r\n            else {\r\n                map = Collections.emptyMap();\r\n            }\r\n            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\r\n        }\r\n```\r\n\r\nI also future proofed it by adding `sameSite=Strict` even though JSF and Servlet spec does not support it yet it hopefully will in the future as this is becoming a requirement of most browsers. ", "bodyText": "I think a better way to write this method is:\n        protected void addResponseCookie(ExternalContext externalContext) {\n            final boolean secure = ((HttpServletRequest) externalContext.getRequest()).isSecure();\n            Map<String, Object> map;\n            if (secure) {\n                map = new HashMap<>(2);\n                map.put(\"secure\", secure);\n                map.put(\"sameSite\", \"Strict\");\n            }\n            else {\n                map = Collections.emptyMap();\n            }\n            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n        }\nI also future proofed it by adding sameSite=Strict even though JSF and Servlet spec does not support it yet it hopefully will in the future as this is becoming a requirement of most browsers.", "bodyHTML": "<p dir=\"auto\">I think a better way to write this method is:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        protected void addResponseCookie(ExternalContext externalContext) {\n            final boolean secure = ((HttpServletRequest) externalContext.getRequest()).isSecure();\n            Map&lt;String, Object&gt; map;\n            if (secure) {\n                map = new HashMap&lt;&gt;(2);\n                map.put(&quot;secure&quot;, secure);\n                map.put(&quot;sameSite&quot;, &quot;Strict&quot;);\n            }\n            else {\n                map = Collections.emptyMap();\n            }\n            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, &quot;true&quot;, map);\n        }\n\"><pre>        <span class=\"pl-k\">protected</span> <span class=\"pl-k\">void</span> addResponseCookie(<span class=\"pl-smi\">ExternalContext</span> externalContext) {\n            <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> secure <span class=\"pl-k\">=</span> ((<span class=\"pl-smi\">HttpServletRequest</span>) externalContext<span class=\"pl-k\">.</span>getRequest())<span class=\"pl-k\">.</span>isSecure();\n            <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> map;\n            <span class=\"pl-k\">if</span> (secure) {\n                map <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>(<span class=\"pl-c1\">2</span>);\n                map<span class=\"pl-k\">.</span>put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secure<span class=\"pl-pds\">\"</span></span>, secure);\n                map<span class=\"pl-k\">.</span>put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sameSite<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Strict<span class=\"pl-pds\">\"</span></span>);\n            }\n            <span class=\"pl-k\">else</span> {\n                map <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptyMap();\n            }\n            externalContext<span class=\"pl-k\">.</span>addResponseCookie(<span class=\"pl-smi\">Constants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DOWNLOAD_COOKIE</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>, map);\n        }</pre></div>\n<p dir=\"auto\">I also future proofed it by adding <code>sameSite=Strict</code> even though JSF and Servlet spec does not support it yet it hopefully will in the future as this is becoming a requirement of most browsers.</p>", "author": "melloware", "createdAt": "2020-06-17T11:32:04Z", "path": "src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java", "diffHunk": "@@ -379,4 +384,24 @@ public int invoke(FacesContext context) {\n             return counter;\n         }\n     }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(ExternalContext externalContext) {\n+        final boolean secure = ((HttpServletRequest) externalContext.getRequest()).isSecure();\n+        if (secure) {\n+            Map<String, Object> map = new HashMap<String, Object>();\n+            map.put(\"secure\", secure);\n+            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+        }\n+        else {\n+            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", Collections.<String, Object>emptyMap());\n+        }\n+    }\n+", "originalCommit": "97c5d8af6820d74485147bc75e24098e60b5c38b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNzgxNQ==", "url": "https://github.com/primefaces/primefaces/pull/6041#discussion_r441537815", "bodyText": "you must also take care of PortletRequest. We already have this check somewhere and reuseable.\n\n\nHad to make a minor refactor to support passing an ExternalContext\n\n\nAFAIR the Cookie is also created/removed on clientside", "author": "ravihariharan", "createdAt": "2020-06-17T13:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NzA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5f399a8e416df8706d2ced86a44c69a04a3e479", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex 0add76c9d..4b01e8eae 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -393,15 +393,17 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n     }\n \n     protected void addResponseCookie(ExternalContext externalContext) {\n-        final boolean secure = ((HttpServletRequest) externalContext.getRequest()).isSecure();\n+        final boolean secure = PrimeRequestContext.isSecure(externalContext);\n+        Map<String, Object> map = null;\n         if (secure) {\n-            Map<String, Object> map = new HashMap<String, Object>();\n+            map = new HashMap<String, Object>();\n             map.put(\"secure\", secure);\n             externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n         }\n         else {\n-            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", Collections.<String, Object>emptyMap());\n+            map = Collections.<String, Object>emptyMap();\n         }\n+        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n     }\n \n }\n", "next_change": {"commit": "b1f6aa027b6addcb1acd84c9331da0ba218db356", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex 4b01e8eae..7089ec13b 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -1,409 +1,410 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2009-2020 PrimeTek\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.primefaces.component.datatable.export;\n-\n-import org.primefaces.component.celleditor.CellEditor;\n-import org.primefaces.component.datatable.DataTable;\n-import org.primefaces.component.export.ExportConfiguration;\n-import org.primefaces.component.export.Exporter;\n-import org.primefaces.component.overlaypanel.OverlayPanel;\n-import org.primefaces.context.PrimeRequestContext;\n-import org.primefaces.model.LazyDataModel;\n-import org.primefaces.util.ComponentUtils;\n-import org.primefaces.util.Constants;\n-\n-import javax.el.MethodExpression;\n-import javax.faces.FacesException;\n-import javax.faces.component.*;\n-import javax.faces.component.html.HtmlCommandLink;\n-import javax.faces.component.html.HtmlGraphicImage;\n-import javax.faces.component.visit.VisitCallback;\n-import javax.faces.component.visit.VisitContext;\n-import javax.faces.component.visit.VisitResult;\n-import javax.faces.context.ExternalContext;\n-import javax.faces.context.FacesContext;\n-import javax.faces.convert.Converter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public abstract class DataTableExporter implements Exporter<DataTable> {\n-\n-    protected enum ColumnType {\n-        HEADER(\"header\"),\n-        FOOTER(\"footer\");\n-\n-        private final String facet;\n-\n-        ColumnType(String facet) {\n-            this.facet = facet;\n-        }\n-\n-        public String facet() {\n-            return facet;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return facet;\n-        }\n-    }\n-\n-    protected List<UIColumn> getColumnsToExport(UIData table) {\n-        return table.getChildren().stream()\n-                .filter(UIColumn.class::isInstance)\n-                .map(UIColumn.class::cast)\n-                .collect(Collectors.toList());\n-    }\n-\n-    protected boolean hasColumnFooter(List<UIColumn> columns) {\n-        return columns.stream().anyMatch(c -> c.getFooter() != null);\n-    }\n-\n-    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n-        MethodExpression exportFunction = column.getExportFunction();\n-\n-        if (exportFunction != null) {\n-            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n-        }\n-\n-        return Constants.EMPTY_STRING;\n-    }\n-\n-    public String exportValue(FacesContext context, UIComponent component) {\n-\n-        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n-            HtmlCommandLink link = (HtmlCommandLink) component;\n-            Object value = link.getValue();\n-\n-            if (value != null) {\n-                return String.valueOf(value);\n-            }\n-            else {\n-                //export first value holder\n-                for (UIComponent child : link.getChildren()) {\n-                    if (child instanceof ValueHolder) {\n-                        return exportValue(context, child);\n-                    }\n-                }\n-\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-        else if (component instanceof ValueHolder) {\n-            if (component instanceof EditableValueHolder) {\n-                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n-                if (submittedValue != null) {\n-                    return submittedValue.toString();\n-                }\n-            }\n-\n-            ValueHolder valueHolder = (ValueHolder) component;\n-            Object value = valueHolder.getValue();\n-            if (value == null) {\n-                return Constants.EMPTY_STRING;\n-            }\n-\n-            Converter converter = valueHolder.getConverter();\n-            if (converter == null) {\n-                Class valueType = value.getClass();\n-                converter = context.getApplication().createConverter(valueType);\n-            }\n-\n-            if (converter != null) {\n-                if (component instanceof UISelectMany) {\n-                    StringBuilder builder = new StringBuilder();\n-                    List collection = null;\n-\n-                    if (value instanceof List) {\n-                        collection = (List) value;\n-                    }\n-                    else if (value.getClass().isArray()) {\n-                        collection = Arrays.asList(value);\n-                    }\n-                    else {\n-                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n-                    }\n-\n-                    int collectionSize = collection.size();\n-                    for (int i = 0; i < collectionSize; i++) {\n-                        Object object = collection.get(i);\n-                        builder.append(converter.getAsString(context, component, object));\n-\n-                        if (i < (collectionSize - 1)) {\n-                            builder.append(\",\");\n-                        }\n-                    }\n-\n-                    String valuesAsString = builder.toString();\n-                    builder.setLength(0);\n-\n-                    return valuesAsString;\n-                }\n-                else {\n-                    return converter.getAsString(context, component, value);\n-                }\n-            }\n-            else {\n-                return value.toString();\n-            }\n-        }\n-        else if (component instanceof CellEditor) {\n-            return exportValue(context, component.getFacet(\"output\"));\n-        }\n-        else if (component instanceof HtmlGraphicImage) {\n-            return (String) component.getAttributes().get(\"alt\");\n-        }\n-        else if (component instanceof OverlayPanel) {\n-            return Constants.EMPTY_STRING;\n-        }\n-        else {\n-            //This would get the plain texts on UIInstructions when using Facelets\n-            String value = component.toString();\n-\n-            if (value != null) {\n-                return value.trim();\n-            }\n-            else {\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-    }\n-\n-    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rows = table.getRows();\n-        if (rows == 0) {\n-            rows = table.getRowCount();\n-        }\n-\n-        int rowsToExport = first + rows;\n-\n-        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n-            exportRow(table, document, rowIndex);\n-        }\n-    }\n-\n-    protected void exportAll(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rowCount = table.getRowCount();\n-        int rows = table.getRows();\n-        boolean lazy = table.isLazy();\n-\n-        if (lazy) {\n-            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n-            List<?> wrappedData = lazyDataModel.getWrappedData();\n-\n-            if (rowCount > 0) {\n-                table.setFirst(0);\n-                table.setRows(rowCount);\n-                table.clearLazyCache();\n-                table.loadLazyData();\n-            }\n-\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-            table.setRows(rows);\n-            table.setRowIndex(-1);\n-            table.clearLazyCache();\n-            lazyDataModel.setWrappedData(wrappedData);\n-            lazyDataModel.setPageSize(rows);\n-            lazyDataModel.setRowIndex(-1);\n-        }\n-        else {\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-        }\n-    }\n-\n-    protected void exportRow(DataTable table, Object document, int rowIndex) {\n-        table.setRowIndex(rowIndex);\n-        if (!table.isRowAvailable()) {\n-            return;\n-        }\n-\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportRow(DataTable table, Object document) {\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n-        Object selection = table.getSelection();\n-        String var = table.getVar();\n-\n-        if (selection != null) {\n-            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-\n-            if (selection.getClass().isArray()) {\n-                int size = Array.getLength(selection);\n-\n-                for (int i = 0; i < size; i++) {\n-                    requestMap.put(var, Array.get(selection, i));\n-                    exportRow(table, document);\n-                }\n-            }\n-            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n-                for (Object obj : (Collection) selection) {\n-                    requestMap.put(var, obj);\n-                    exportRow(table, document);\n-                }\n-            }\n-            else {\n-                requestMap.put(var, selection);\n-                exportCells(table, document);\n-            }\n-        }\n-    }\n-\n-    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void preRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected void postRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected abstract void exportCells(DataTable table, Object document);\n-\n-    @Override\n-    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n-        preExport(context,  config);\n-\n-        int index = 0;\n-        for (DataTable table : tables) {\n-            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n-            int nbTables = visitCallback.invoke(context);\n-            index += nbTables;\n-        }\n-\n-        postExport(context, config);\n-    }\n-\n-    /**\n-     * Export datatable\n-     * @param facesContext faces context\n-     * @param table datatable to export\n-     * @param config export configuration\n-     * @param index datatable current index during export process\n-     * @throws IOException\n-     */\n-    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n-\n-    private class DataTableVisitCallBack implements VisitCallback {\n-\n-        private ExportConfiguration config;\n-\n-        private DataTable target;\n-\n-        private int index = 0;\n-\n-        private int counter = 0;\n-\n-        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n-            this.target = target;\n-            this.config = config;\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public VisitResult visit(VisitContext context, UIComponent component) {\n-            if (target == component) {\n-                try {\n-                    doExport(context.getFacesContext(), target, config, index);\n-                    index++;\n-                    counter++;\n-                }\n-                catch (IOException e) {\n-                    throw new FacesException(e);\n-                }\n-            }\n-            return VisitResult.ACCEPT;\n-        }\n-\n-        /**\n-         * Returns number of tables exported\n-         * @param context faces context\n-         * @return number of tables exported\n-         */\n-        public int invoke(FacesContext context) {\n-            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n-                VisitContext visitContext = VisitContext.createVisitContext(context);\n-                p.visitTree(visitContext, this);\n-            }, true);\n-\n-            return counter;\n-        }\n-    }\n-\n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(ExternalContext externalContext) {\n-        final boolean secure = PrimeRequestContext.isSecure(externalContext);\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<String, Object>();\n-            map.put(\"secure\", secure);\n-            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n-    }\n-\n-}\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.datatable.export;\n+\n+import org.primefaces.component.celleditor.CellEditor;\n+import org.primefaces.component.datatable.DataTable;\n+import org.primefaces.component.export.ExportConfiguration;\n+import org.primefaces.component.export.Exporter;\n+import org.primefaces.component.overlaypanel.OverlayPanel;\n+import org.primefaces.context.PrimeRequestContext;\n+import org.primefaces.model.LazyDataModel;\n+import org.primefaces.util.ComponentUtils;\n+import org.primefaces.util.Constants;\n+\n+import javax.el.MethodExpression;\n+import javax.faces.FacesException;\n+import javax.faces.component.*;\n+import javax.faces.component.html.HtmlCommandLink;\n+import javax.faces.component.html.HtmlGraphicImage;\n+import javax.faces.component.visit.VisitCallback;\n+import javax.faces.component.visit.VisitContext;\n+import javax.faces.component.visit.VisitResult;\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import javax.faces.convert.Converter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public abstract class DataTableExporter implements Exporter<DataTable> {\n+\n+    protected enum ColumnType {\n+        HEADER(\"header\"),\n+        FOOTER(\"footer\");\n+\n+        private final String facet;\n+\n+        ColumnType(String facet) {\n+            this.facet = facet;\n+        }\n+\n+        public String facet() {\n+            return facet;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return facet;\n+        }\n+    }\n+\n+    protected List<UIColumn> getColumnsToExport(UIData table) {\n+        return table.getChildren().stream()\n+                .filter(UIColumn.class::isInstance)\n+                .map(UIColumn.class::cast)\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected boolean hasColumnFooter(List<UIColumn> columns) {\n+        return columns.stream().anyMatch(c -> c.getFooter() != null);\n+    }\n+\n+    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n+        MethodExpression exportFunction = column.getExportFunction();\n+\n+        if (exportFunction != null) {\n+            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n+        }\n+\n+        return Constants.EMPTY_STRING;\n+    }\n+\n+    public String exportValue(FacesContext context, UIComponent component) {\n+\n+        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n+            HtmlCommandLink link = (HtmlCommandLink) component;\n+            Object value = link.getValue();\n+\n+            if (value != null) {\n+                return String.valueOf(value);\n+            }\n+            else {\n+                //export first value holder\n+                for (UIComponent child : link.getChildren()) {\n+                    if (child instanceof ValueHolder) {\n+                        return exportValue(context, child);\n+                    }\n+                }\n+\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+        else if (component instanceof ValueHolder) {\n+            if (component instanceof EditableValueHolder) {\n+                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n+                if (submittedValue != null) {\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            ValueHolder valueHolder = (ValueHolder) component;\n+            Object value = valueHolder.getValue();\n+            if (value == null) {\n+                return Constants.EMPTY_STRING;\n+            }\n+\n+            Converter converter = valueHolder.getConverter();\n+            if (converter == null) {\n+                Class valueType = value.getClass();\n+                converter = context.getApplication().createConverter(valueType);\n+            }\n+\n+            if (converter != null) {\n+                if (component instanceof UISelectMany) {\n+                    StringBuilder builder = new StringBuilder();\n+                    List collection = null;\n+\n+                    if (value instanceof List) {\n+                        collection = (List) value;\n+                    }\n+                    else if (value.getClass().isArray()) {\n+                        collection = Arrays.asList(value);\n+                    }\n+                    else {\n+                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n+                    }\n+\n+                    int collectionSize = collection.size();\n+                    for (int i = 0; i < collectionSize; i++) {\n+                        Object object = collection.get(i);\n+                        builder.append(converter.getAsString(context, component, object));\n+\n+                        if (i < (collectionSize - 1)) {\n+                            builder.append(\",\");\n+                        }\n+                    }\n+\n+                    String valuesAsString = builder.toString();\n+                    builder.setLength(0);\n+\n+                    return valuesAsString;\n+                }\n+                else {\n+                    return converter.getAsString(context, component, value);\n+                }\n+            }\n+            else {\n+                return value.toString();\n+            }\n+        }\n+        else if (component instanceof CellEditor) {\n+            return exportValue(context, component.getFacet(\"output\"));\n+        }\n+        else if (component instanceof HtmlGraphicImage) {\n+            return (String) component.getAttributes().get(\"alt\");\n+        }\n+        else if (component instanceof OverlayPanel) {\n+            return Constants.EMPTY_STRING;\n+        }\n+        else {\n+            //This would get the plain texts on UIInstructions when using Facelets\n+            String value = component.toString();\n+\n+            if (value != null) {\n+                return value.trim();\n+            }\n+            else {\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+    }\n+\n+    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rows = table.getRows();\n+        if (rows == 0) {\n+            rows = table.getRowCount();\n+        }\n+\n+        int rowsToExport = first + rows;\n+\n+        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n+            exportRow(table, document, rowIndex);\n+        }\n+    }\n+\n+    protected void exportAll(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rowCount = table.getRowCount();\n+        int rows = table.getRows();\n+        boolean lazy = table.isLazy();\n+\n+        if (lazy) {\n+            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n+            List<?> wrappedData = lazyDataModel.getWrappedData();\n+\n+            if (rowCount > 0) {\n+                table.setFirst(0);\n+                table.setRows(rowCount);\n+                table.clearLazyCache();\n+                table.loadLazyData();\n+            }\n+\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+            table.setRows(rows);\n+            table.setRowIndex(-1);\n+            table.clearLazyCache();\n+            lazyDataModel.setWrappedData(wrappedData);\n+            lazyDataModel.setPageSize(rows);\n+            lazyDataModel.setRowIndex(-1);\n+        }\n+        else {\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+        }\n+    }\n+\n+    protected void exportRow(DataTable table, Object document, int rowIndex) {\n+        table.setRowIndex(rowIndex);\n+        if (!table.isRowAvailable()) {\n+            return;\n+        }\n+\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportRow(DataTable table, Object document) {\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n+        Object selection = table.getSelection();\n+        String var = table.getVar();\n+\n+        if (selection != null) {\n+            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n+\n+            if (selection.getClass().isArray()) {\n+                int size = Array.getLength(selection);\n+\n+                for (int i = 0; i < size; i++) {\n+                    requestMap.put(var, Array.get(selection, i));\n+                    exportRow(table, document);\n+                }\n+            }\n+            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n+                for (Object obj : (Collection) selection) {\n+                    requestMap.put(var, obj);\n+                    exportRow(table, document);\n+                }\n+            }\n+            else {\n+                requestMap.put(var, selection);\n+                exportCells(table, document);\n+            }\n+        }\n+    }\n+\n+    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void preRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected void postRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected abstract void exportCells(DataTable table, Object document);\n+\n+    @Override\n+    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n+        preExport(context,  config);\n+\n+        int index = 0;\n+        for (DataTable table : tables) {\n+            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n+            int nbTables = visitCallback.invoke(context);\n+            index += nbTables;\n+        }\n+\n+        postExport(context, config);\n+    }\n+\n+    /**\n+     * Export datatable\n+     * @param facesContext faces context\n+     * @param table datatable to export\n+     * @param config export configuration\n+     * @param index datatable current index during export process\n+     * @throws IOException\n+     */\n+    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n+\n+    private class DataTableVisitCallBack implements VisitCallback {\n+\n+        private ExportConfiguration config;\n+\n+        private DataTable target;\n+\n+        private int index = 0;\n+\n+        private int counter = 0;\n+\n+        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n+            this.target = target;\n+            this.config = config;\n+            this.index = index;\n+        }\n+\n+        @Override\n+        public VisitResult visit(VisitContext context, UIComponent component) {\n+            if (target == component) {\n+                try {\n+                    doExport(context.getFacesContext(), target, config, index);\n+                    index++;\n+                    counter++;\n+                }\n+                catch (IOException e) {\n+                    throw new FacesException(e);\n+                }\n+            }\n+            return VisitResult.ACCEPT;\n+        }\n+\n+        /**\n+         * Returns number of tables exported\n+         * @param context faces context\n+         * @return number of tables exported\n+         */\n+        public int invoke(FacesContext context) {\n+            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n+                VisitContext visitContext = VisitContext.createVisitContext(context);\n+                p.visitTree(visitContext, this);\n+            }, true);\n+\n+            return counter;\n+        }\n+    }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(FacesContext context) {\n+        ExternalContext externalContext = context.getExternalContext();\n+        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n+        Map<String, Object> map = null;\n+        if (secure) {\n+            map = new HashMap<>(2);\n+            map.put(\"secure\", secure);\n+            map.put(\"sameSite\", \"Strict\");\n+        }\n+        else {\n+            map = Collections.<String, Object>emptyMap();\n+        }\n+        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+    }\n+\n+}\n", "next_change": {"commit": "b53ea05f6645d36b8d82e9bcc4e828a2dffcc484", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex 7089ec13b..b54f008f6 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -1,410 +1,410 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2009-2020 PrimeTek\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.primefaces.component.datatable.export;\n-\n-import org.primefaces.component.celleditor.CellEditor;\n-import org.primefaces.component.datatable.DataTable;\n-import org.primefaces.component.export.ExportConfiguration;\n-import org.primefaces.component.export.Exporter;\n-import org.primefaces.component.overlaypanel.OverlayPanel;\n-import org.primefaces.context.PrimeRequestContext;\n-import org.primefaces.model.LazyDataModel;\n-import org.primefaces.util.ComponentUtils;\n-import org.primefaces.util.Constants;\n-\n-import javax.el.MethodExpression;\n-import javax.faces.FacesException;\n-import javax.faces.component.*;\n-import javax.faces.component.html.HtmlCommandLink;\n-import javax.faces.component.html.HtmlGraphicImage;\n-import javax.faces.component.visit.VisitCallback;\n-import javax.faces.component.visit.VisitContext;\n-import javax.faces.component.visit.VisitResult;\n-import javax.faces.context.ExternalContext;\n-import javax.faces.context.FacesContext;\n-import javax.faces.convert.Converter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public abstract class DataTableExporter implements Exporter<DataTable> {\n-\n-    protected enum ColumnType {\n-        HEADER(\"header\"),\n-        FOOTER(\"footer\");\n-\n-        private final String facet;\n-\n-        ColumnType(String facet) {\n-            this.facet = facet;\n-        }\n-\n-        public String facet() {\n-            return facet;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return facet;\n-        }\n-    }\n-\n-    protected List<UIColumn> getColumnsToExport(UIData table) {\n-        return table.getChildren().stream()\n-                .filter(UIColumn.class::isInstance)\n-                .map(UIColumn.class::cast)\n-                .collect(Collectors.toList());\n-    }\n-\n-    protected boolean hasColumnFooter(List<UIColumn> columns) {\n-        return columns.stream().anyMatch(c -> c.getFooter() != null);\n-    }\n-\n-    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n-        MethodExpression exportFunction = column.getExportFunction();\n-\n-        if (exportFunction != null) {\n-            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n-        }\n-\n-        return Constants.EMPTY_STRING;\n-    }\n-\n-    public String exportValue(FacesContext context, UIComponent component) {\n-\n-        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n-            HtmlCommandLink link = (HtmlCommandLink) component;\n-            Object value = link.getValue();\n-\n-            if (value != null) {\n-                return String.valueOf(value);\n-            }\n-            else {\n-                //export first value holder\n-                for (UIComponent child : link.getChildren()) {\n-                    if (child instanceof ValueHolder) {\n-                        return exportValue(context, child);\n-                    }\n-                }\n-\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-        else if (component instanceof ValueHolder) {\n-            if (component instanceof EditableValueHolder) {\n-                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n-                if (submittedValue != null) {\n-                    return submittedValue.toString();\n-                }\n-            }\n-\n-            ValueHolder valueHolder = (ValueHolder) component;\n-            Object value = valueHolder.getValue();\n-            if (value == null) {\n-                return Constants.EMPTY_STRING;\n-            }\n-\n-            Converter converter = valueHolder.getConverter();\n-            if (converter == null) {\n-                Class valueType = value.getClass();\n-                converter = context.getApplication().createConverter(valueType);\n-            }\n-\n-            if (converter != null) {\n-                if (component instanceof UISelectMany) {\n-                    StringBuilder builder = new StringBuilder();\n-                    List collection = null;\n-\n-                    if (value instanceof List) {\n-                        collection = (List) value;\n-                    }\n-                    else if (value.getClass().isArray()) {\n-                        collection = Arrays.asList(value);\n-                    }\n-                    else {\n-                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n-                    }\n-\n-                    int collectionSize = collection.size();\n-                    for (int i = 0; i < collectionSize; i++) {\n-                        Object object = collection.get(i);\n-                        builder.append(converter.getAsString(context, component, object));\n-\n-                        if (i < (collectionSize - 1)) {\n-                            builder.append(\",\");\n-                        }\n-                    }\n-\n-                    String valuesAsString = builder.toString();\n-                    builder.setLength(0);\n-\n-                    return valuesAsString;\n-                }\n-                else {\n-                    return converter.getAsString(context, component, value);\n-                }\n-            }\n-            else {\n-                return value.toString();\n-            }\n-        }\n-        else if (component instanceof CellEditor) {\n-            return exportValue(context, component.getFacet(\"output\"));\n-        }\n-        else if (component instanceof HtmlGraphicImage) {\n-            return (String) component.getAttributes().get(\"alt\");\n-        }\n-        else if (component instanceof OverlayPanel) {\n-            return Constants.EMPTY_STRING;\n-        }\n-        else {\n-            //This would get the plain texts on UIInstructions when using Facelets\n-            String value = component.toString();\n-\n-            if (value != null) {\n-                return value.trim();\n-            }\n-            else {\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-    }\n-\n-    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rows = table.getRows();\n-        if (rows == 0) {\n-            rows = table.getRowCount();\n-        }\n-\n-        int rowsToExport = first + rows;\n-\n-        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n-            exportRow(table, document, rowIndex);\n-        }\n-    }\n-\n-    protected void exportAll(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rowCount = table.getRowCount();\n-        int rows = table.getRows();\n-        boolean lazy = table.isLazy();\n-\n-        if (lazy) {\n-            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n-            List<?> wrappedData = lazyDataModel.getWrappedData();\n-\n-            if (rowCount > 0) {\n-                table.setFirst(0);\n-                table.setRows(rowCount);\n-                table.clearLazyCache();\n-                table.loadLazyData();\n-            }\n-\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-            table.setRows(rows);\n-            table.setRowIndex(-1);\n-            table.clearLazyCache();\n-            lazyDataModel.setWrappedData(wrappedData);\n-            lazyDataModel.setPageSize(rows);\n-            lazyDataModel.setRowIndex(-1);\n-        }\n-        else {\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-        }\n-    }\n-\n-    protected void exportRow(DataTable table, Object document, int rowIndex) {\n-        table.setRowIndex(rowIndex);\n-        if (!table.isRowAvailable()) {\n-            return;\n-        }\n-\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportRow(DataTable table, Object document) {\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n-        Object selection = table.getSelection();\n-        String var = table.getVar();\n-\n-        if (selection != null) {\n-            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-\n-            if (selection.getClass().isArray()) {\n-                int size = Array.getLength(selection);\n-\n-                for (int i = 0; i < size; i++) {\n-                    requestMap.put(var, Array.get(selection, i));\n-                    exportRow(table, document);\n-                }\n-            }\n-            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n-                for (Object obj : (Collection) selection) {\n-                    requestMap.put(var, obj);\n-                    exportRow(table, document);\n-                }\n-            }\n-            else {\n-                requestMap.put(var, selection);\n-                exportCells(table, document);\n-            }\n-        }\n-    }\n-\n-    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void preRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected void postRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected abstract void exportCells(DataTable table, Object document);\n-\n-    @Override\n-    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n-        preExport(context,  config);\n-\n-        int index = 0;\n-        for (DataTable table : tables) {\n-            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n-            int nbTables = visitCallback.invoke(context);\n-            index += nbTables;\n-        }\n-\n-        postExport(context, config);\n-    }\n-\n-    /**\n-     * Export datatable\n-     * @param facesContext faces context\n-     * @param table datatable to export\n-     * @param config export configuration\n-     * @param index datatable current index during export process\n-     * @throws IOException\n-     */\n-    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n-\n-    private class DataTableVisitCallBack implements VisitCallback {\n-\n-        private ExportConfiguration config;\n-\n-        private DataTable target;\n-\n-        private int index = 0;\n-\n-        private int counter = 0;\n-\n-        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n-            this.target = target;\n-            this.config = config;\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public VisitResult visit(VisitContext context, UIComponent component) {\n-            if (target == component) {\n-                try {\n-                    doExport(context.getFacesContext(), target, config, index);\n-                    index++;\n-                    counter++;\n-                }\n-                catch (IOException e) {\n-                    throw new FacesException(e);\n-                }\n-            }\n-            return VisitResult.ACCEPT;\n-        }\n-\n-        /**\n-         * Returns number of tables exported\n-         * @param context faces context\n-         * @return number of tables exported\n-         */\n-        public int invoke(FacesContext context) {\n-            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n-                VisitContext visitContext = VisitContext.createVisitContext(context);\n-                p.visitTree(visitContext, this);\n-            }, true);\n-\n-            return counter;\n-        }\n-    }\n-\n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(FacesContext context) {\n-        ExternalContext externalContext = context.getExternalContext();\n-        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<>(2);\n-            map.put(\"secure\", secure);\n-            map.put(\"sameSite\", \"Strict\");\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n-    }\n-\n-}\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.datatable.export;\n+\n+import org.primefaces.component.celleditor.CellEditor;\n+import org.primefaces.component.datatable.DataTable;\n+import org.primefaces.component.export.ExportConfiguration;\n+import org.primefaces.component.export.Exporter;\n+import org.primefaces.component.overlaypanel.OverlayPanel;\n+import org.primefaces.context.PrimeRequestContext;\n+import org.primefaces.model.LazyDataModel;\n+import org.primefaces.util.ComponentUtils;\n+import org.primefaces.util.Constants;\n+\n+import javax.el.MethodExpression;\n+import javax.faces.FacesException;\n+import javax.faces.component.*;\n+import javax.faces.component.html.HtmlCommandLink;\n+import javax.faces.component.html.HtmlGraphicImage;\n+import javax.faces.component.visit.VisitCallback;\n+import javax.faces.component.visit.VisitContext;\n+import javax.faces.component.visit.VisitResult;\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import javax.faces.convert.Converter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public abstract class DataTableExporter implements Exporter<DataTable> {\n+\n+    protected enum ColumnType {\n+        HEADER(\"header\"),\n+        FOOTER(\"footer\");\n+\n+        private final String facet;\n+\n+        ColumnType(String facet) {\n+            this.facet = facet;\n+        }\n+\n+        public String facet() {\n+            return facet;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return facet;\n+        }\n+    }\n+\n+    protected List<UIColumn> getColumnsToExport(UIData table) {\n+        return table.getChildren().stream()\n+                .filter(UIColumn.class::isInstance)\n+                .map(UIColumn.class::cast)\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected boolean hasColumnFooter(List<UIColumn> columns) {\n+        return columns.stream().anyMatch(c -> c.getFooter() != null);\n+    }\n+\n+    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n+        MethodExpression exportFunction = column.getExportFunction();\n+\n+        if (exportFunction != null) {\n+            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n+        }\n+\n+        return Constants.EMPTY_STRING;\n+    }\n+\n+    public String exportValue(FacesContext context, UIComponent component) {\n+\n+        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n+            HtmlCommandLink link = (HtmlCommandLink) component;\n+            Object value = link.getValue();\n+\n+            if (value != null) {\n+                return String.valueOf(value);\n+            }\n+            else {\n+                //export first value holder\n+                for (UIComponent child : link.getChildren()) {\n+                    if (child instanceof ValueHolder) {\n+                        return exportValue(context, child);\n+                    }\n+                }\n+\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+        else if (component instanceof ValueHolder) {\n+            if (component instanceof EditableValueHolder) {\n+                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n+                if (submittedValue != null) {\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            ValueHolder valueHolder = (ValueHolder) component;\n+            Object value = valueHolder.getValue();\n+            if (value == null) {\n+                return Constants.EMPTY_STRING;\n+            }\n+\n+            Converter converter = valueHolder.getConverter();\n+            if (converter == null) {\n+                Class valueType = value.getClass();\n+                converter = context.getApplication().createConverter(valueType);\n+            }\n+\n+            if (converter != null) {\n+                if (component instanceof UISelectMany) {\n+                    StringBuilder builder = new StringBuilder();\n+                    List collection = null;\n+\n+                    if (value instanceof List) {\n+                        collection = (List) value;\n+                    }\n+                    else if (value.getClass().isArray()) {\n+                        collection = Arrays.asList(value);\n+                    }\n+                    else {\n+                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n+                    }\n+\n+                    int collectionSize = collection.size();\n+                    for (int i = 0; i < collectionSize; i++) {\n+                        Object object = collection.get(i);\n+                        builder.append(converter.getAsString(context, component, object));\n+\n+                        if (i < (collectionSize - 1)) {\n+                            builder.append(\",\");\n+                        }\n+                    }\n+\n+                    String valuesAsString = builder.toString();\n+                    builder.setLength(0);\n+\n+                    return valuesAsString;\n+                }\n+                else {\n+                    return converter.getAsString(context, component, value);\n+                }\n+            }\n+            else {\n+                return value.toString();\n+            }\n+        }\n+        else if (component instanceof CellEditor) {\n+            return exportValue(context, component.getFacet(\"output\"));\n+        }\n+        else if (component instanceof HtmlGraphicImage) {\n+            return (String) component.getAttributes().get(\"alt\");\n+        }\n+        else if (component instanceof OverlayPanel) {\n+            return Constants.EMPTY_STRING;\n+        }\n+        else {\n+            //This would get the plain texts on UIInstructions when using Facelets\n+            String value = component.toString();\n+\n+            if (value != null) {\n+                return value.trim();\n+            }\n+            else {\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+    }\n+\n+    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rows = table.getRows();\n+        if (rows == 0) {\n+            rows = table.getRowCount();\n+        }\n+\n+        int rowsToExport = first + rows;\n+\n+        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n+            exportRow(table, document, rowIndex);\n+        }\n+    }\n+\n+    protected void exportAll(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rowCount = table.getRowCount();\n+        int rows = table.getRows();\n+        boolean lazy = table.isLazy();\n+\n+        if (lazy) {\n+            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n+            List<?> wrappedData = lazyDataModel.getWrappedData();\n+\n+            if (rowCount > 0) {\n+                table.setFirst(0);\n+                table.setRows(rowCount);\n+                table.clearLazyCache();\n+                table.loadLazyData();\n+            }\n+\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+            table.setRows(rows);\n+            table.setRowIndex(-1);\n+            table.clearLazyCache();\n+            lazyDataModel.setWrappedData(wrappedData);\n+            lazyDataModel.setPageSize(rows);\n+            lazyDataModel.setRowIndex(-1);\n+        }\n+        else {\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+        }\n+    }\n+\n+    protected void exportRow(DataTable table, Object document, int rowIndex) {\n+        table.setRowIndex(rowIndex);\n+        if (!table.isRowAvailable()) {\n+            return;\n+        }\n+\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportRow(DataTable table, Object document) {\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n+        Object selection = table.getSelection();\n+        String var = table.getVar();\n+\n+        if (selection != null) {\n+            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n+\n+            if (selection.getClass().isArray()) {\n+                int size = Array.getLength(selection);\n+\n+                for (int i = 0; i < size; i++) {\n+                    requestMap.put(var, Array.get(selection, i));\n+                    exportRow(table, document);\n+                }\n+            }\n+            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n+                for (Object obj : (Collection) selection) {\n+                    requestMap.put(var, obj);\n+                    exportRow(table, document);\n+                }\n+            }\n+            else {\n+                requestMap.put(var, selection);\n+                exportCells(table, document);\n+            }\n+        }\n+    }\n+\n+    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void preRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected void postRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected abstract void exportCells(DataTable table, Object document);\n+\n+    @Override\n+    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n+        preExport(context,  config);\n+\n+        int index = 0;\n+        for (DataTable table : tables) {\n+            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n+            int nbTables = visitCallback.invoke(context);\n+            index += nbTables;\n+        }\n+\n+        postExport(context, config);\n+    }\n+\n+    /**\n+     * Export datatable\n+     * @param facesContext faces context\n+     * @param table datatable to export\n+     * @param config export configuration\n+     * @param index datatable current index during export process\n+     * @throws IOException\n+     */\n+    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n+\n+    private class DataTableVisitCallBack implements VisitCallback {\n+\n+        private ExportConfiguration config;\n+\n+        private DataTable target;\n+\n+        private int index = 0;\n+\n+        private int counter = 0;\n+\n+        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n+            this.target = target;\n+            this.config = config;\n+            this.index = index;\n+        }\n+\n+        @Override\n+        public VisitResult visit(VisitContext context, UIComponent component) {\n+            if (target == component) {\n+                try {\n+                    doExport(context.getFacesContext(), target, config, index);\n+                    index++;\n+                    counter++;\n+                }\n+                catch (IOException e) {\n+                    throw new FacesException(e);\n+                }\n+            }\n+            return VisitResult.ACCEPT;\n+        }\n+\n+        /**\n+         * Returns number of tables exported\n+         * @param context faces context\n+         * @return number of tables exported\n+         */\n+        public int invoke(FacesContext context) {\n+            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n+                VisitContext visitContext = VisitContext.createVisitContext(context);\n+                p.visitTree(visitContext, this);\n+            }, true);\n+\n+            return counter;\n+        }\n+    }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(FacesContext context) {\n+        ExternalContext externalContext = context.getExternalContext();\n+        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n+        Map<String, Object> map = null;\n+        if (secure) {\n+            map = new HashMap<>(2);\n+            map.put(\"secure\", secure);\n+            map.put(\"sameSite\", \"Strict\");\n+        }\n+        else {\n+            map = Collections.<String, Object>emptyMap();\n+        }\n+        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+    }\n+\n+}\n", "next_change": {"commit": "54046f7fc16829c04348ac5f2e7db494e0cdf4d3", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex b54f008f6..dd4c11b0c 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -393,18 +391,7 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n     }\n \n     protected void addResponseCookie(FacesContext context) {\n-        ExternalContext externalContext = context.getExternalContext();\n-        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<>(2);\n-            map.put(\"secure\", secure);\n-            map.put(\"sameSite\", \"Strict\");\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+        ResourceUtils.addResponseCookie(context, Constants.DOWNLOAD_COOKIE, \"true\", null);\n     }\n \n }\n", "next_change": {"commit": "252a4d8228b37daeb4a05644bf29d9ca82325127", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex dd4c11b0c..000b3b15f 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -383,15 +385,8 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n         }\n     }\n \n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(FacesContext context) {\n-        ResourceUtils.addResponseCookie(context, Constants.DOWNLOAD_COOKIE, \"true\", null);\n+    protected OutputStream getOutputStream() {\n+        return outputStream;\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "f5f399a8e416df8706d2ced86a44c69a04a3e479", "url": "https://github.com/primefaces/primefaces/commit/f5f399a8e416df8706d2ced86a44c69a04a3e479", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T13:03:27Z", "type": "commit"}, {"oid": "5980e065d9e0550b6dc855d7f0c30455944589ca", "url": "https://github.com/primefaces/primefaces/commit/5980e065d9e0550b6dc855d7f0c30455944589ca", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T13:17:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzOTE4NA==", "url": "https://github.com/primefaces/primefaces/pull/6041#discussion_r441539184", "body": "You can remove this line you are adding it below", "bodyText": "You can remove this line you are adding it below", "bodyHTML": "<p dir=\"auto\">You can remove this line you are adding it below</p>", "author": "melloware", "createdAt": "2020-06-17T13:21:10Z", "path": "src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java", "diffHunk": "@@ -379,4 +384,27 @@ public int invoke(FacesContext context) {\n             return counter;\n         }\n     }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(ExternalContext externalContext) {\n+        final boolean secure = PrimeRequestContext.isSecure(externalContext);\n+        Map<String, Object> map = null;\n+        if (secure) {\n+            map = new HashMap<String, Object>(2);\n+            map.put(\"secure\", secure);\n+            map.put(\"sameSite\", \"Strict\");\n+            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);", "originalCommit": "5980e065d9e0550b6dc855d7f0c30455944589ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2aa97314b2522345c2047f3263c45b2836cf7f9f", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex c86fa3154..728054934 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -399,7 +399,6 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n             map = new HashMap<String, Object>(2);\n             map.put(\"secure\", secure);\n             map.put(\"sameSite\", \"Strict\");\n-            externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n         }\n         else {\n             map = Collections.<String, Object>emptyMap();\n", "next_change": {"commit": "b1f6aa027b6addcb1acd84c9331da0ba218db356", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex 728054934..7089ec13b 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -1,409 +1,410 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2009-2020 PrimeTek\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.primefaces.component.datatable.export;\n-\n-import org.primefaces.component.celleditor.CellEditor;\n-import org.primefaces.component.datatable.DataTable;\n-import org.primefaces.component.export.ExportConfiguration;\n-import org.primefaces.component.export.Exporter;\n-import org.primefaces.component.overlaypanel.OverlayPanel;\n-import org.primefaces.context.PrimeRequestContext;\n-import org.primefaces.model.LazyDataModel;\n-import org.primefaces.util.ComponentUtils;\n-import org.primefaces.util.Constants;\n-\n-import javax.el.MethodExpression;\n-import javax.faces.FacesException;\n-import javax.faces.component.*;\n-import javax.faces.component.html.HtmlCommandLink;\n-import javax.faces.component.html.HtmlGraphicImage;\n-import javax.faces.component.visit.VisitCallback;\n-import javax.faces.component.visit.VisitContext;\n-import javax.faces.component.visit.VisitResult;\n-import javax.faces.context.ExternalContext;\n-import javax.faces.context.FacesContext;\n-import javax.faces.convert.Converter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public abstract class DataTableExporter implements Exporter<DataTable> {\n-\n-    protected enum ColumnType {\n-        HEADER(\"header\"),\n-        FOOTER(\"footer\");\n-\n-        private final String facet;\n-\n-        ColumnType(String facet) {\n-            this.facet = facet;\n-        }\n-\n-        public String facet() {\n-            return facet;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return facet;\n-        }\n-    }\n-\n-    protected List<UIColumn> getColumnsToExport(UIData table) {\n-        return table.getChildren().stream()\n-                .filter(UIColumn.class::isInstance)\n-                .map(UIColumn.class::cast)\n-                .collect(Collectors.toList());\n-    }\n-\n-    protected boolean hasColumnFooter(List<UIColumn> columns) {\n-        return columns.stream().anyMatch(c -> c.getFooter() != null);\n-    }\n-\n-    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n-        MethodExpression exportFunction = column.getExportFunction();\n-\n-        if (exportFunction != null) {\n-            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n-        }\n-\n-        return Constants.EMPTY_STRING;\n-    }\n-\n-    public String exportValue(FacesContext context, UIComponent component) {\n-\n-        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n-            HtmlCommandLink link = (HtmlCommandLink) component;\n-            Object value = link.getValue();\n-\n-            if (value != null) {\n-                return String.valueOf(value);\n-            }\n-            else {\n-                //export first value holder\n-                for (UIComponent child : link.getChildren()) {\n-                    if (child instanceof ValueHolder) {\n-                        return exportValue(context, child);\n-                    }\n-                }\n-\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-        else if (component instanceof ValueHolder) {\n-            if (component instanceof EditableValueHolder) {\n-                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n-                if (submittedValue != null) {\n-                    return submittedValue.toString();\n-                }\n-            }\n-\n-            ValueHolder valueHolder = (ValueHolder) component;\n-            Object value = valueHolder.getValue();\n-            if (value == null) {\n-                return Constants.EMPTY_STRING;\n-            }\n-\n-            Converter converter = valueHolder.getConverter();\n-            if (converter == null) {\n-                Class valueType = value.getClass();\n-                converter = context.getApplication().createConverter(valueType);\n-            }\n-\n-            if (converter != null) {\n-                if (component instanceof UISelectMany) {\n-                    StringBuilder builder = new StringBuilder();\n-                    List collection = null;\n-\n-                    if (value instanceof List) {\n-                        collection = (List) value;\n-                    }\n-                    else if (value.getClass().isArray()) {\n-                        collection = Arrays.asList(value);\n-                    }\n-                    else {\n-                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n-                    }\n-\n-                    int collectionSize = collection.size();\n-                    for (int i = 0; i < collectionSize; i++) {\n-                        Object object = collection.get(i);\n-                        builder.append(converter.getAsString(context, component, object));\n-\n-                        if (i < (collectionSize - 1)) {\n-                            builder.append(\",\");\n-                        }\n-                    }\n-\n-                    String valuesAsString = builder.toString();\n-                    builder.setLength(0);\n-\n-                    return valuesAsString;\n-                }\n-                else {\n-                    return converter.getAsString(context, component, value);\n-                }\n-            }\n-            else {\n-                return value.toString();\n-            }\n-        }\n-        else if (component instanceof CellEditor) {\n-            return exportValue(context, component.getFacet(\"output\"));\n-        }\n-        else if (component instanceof HtmlGraphicImage) {\n-            return (String) component.getAttributes().get(\"alt\");\n-        }\n-        else if (component instanceof OverlayPanel) {\n-            return Constants.EMPTY_STRING;\n-        }\n-        else {\n-            //This would get the plain texts on UIInstructions when using Facelets\n-            String value = component.toString();\n-\n-            if (value != null) {\n-                return value.trim();\n-            }\n-            else {\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-    }\n-\n-    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rows = table.getRows();\n-        if (rows == 0) {\n-            rows = table.getRowCount();\n-        }\n-\n-        int rowsToExport = first + rows;\n-\n-        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n-            exportRow(table, document, rowIndex);\n-        }\n-    }\n-\n-    protected void exportAll(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rowCount = table.getRowCount();\n-        int rows = table.getRows();\n-        boolean lazy = table.isLazy();\n-\n-        if (lazy) {\n-            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n-            List<?> wrappedData = lazyDataModel.getWrappedData();\n-\n-            if (rowCount > 0) {\n-                table.setFirst(0);\n-                table.setRows(rowCount);\n-                table.clearLazyCache();\n-                table.loadLazyData();\n-            }\n-\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-            table.setRows(rows);\n-            table.setRowIndex(-1);\n-            table.clearLazyCache();\n-            lazyDataModel.setWrappedData(wrappedData);\n-            lazyDataModel.setPageSize(rows);\n-            lazyDataModel.setRowIndex(-1);\n-        }\n-        else {\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-        }\n-    }\n-\n-    protected void exportRow(DataTable table, Object document, int rowIndex) {\n-        table.setRowIndex(rowIndex);\n-        if (!table.isRowAvailable()) {\n-            return;\n-        }\n-\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportRow(DataTable table, Object document) {\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n-        Object selection = table.getSelection();\n-        String var = table.getVar();\n-\n-        if (selection != null) {\n-            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-\n-            if (selection.getClass().isArray()) {\n-                int size = Array.getLength(selection);\n-\n-                for (int i = 0; i < size; i++) {\n-                    requestMap.put(var, Array.get(selection, i));\n-                    exportRow(table, document);\n-                }\n-            }\n-            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n-                for (Object obj : (Collection) selection) {\n-                    requestMap.put(var, obj);\n-                    exportRow(table, document);\n-                }\n-            }\n-            else {\n-                requestMap.put(var, selection);\n-                exportCells(table, document);\n-            }\n-        }\n-    }\n-\n-    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void preRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected void postRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected abstract void exportCells(DataTable table, Object document);\n-\n-    @Override\n-    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n-        preExport(context,  config);\n-\n-        int index = 0;\n-        for (DataTable table : tables) {\n-            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n-            int nbTables = visitCallback.invoke(context);\n-            index += nbTables;\n-        }\n-\n-        postExport(context, config);\n-    }\n-\n-    /**\n-     * Export datatable\n-     * @param facesContext faces context\n-     * @param table datatable to export\n-     * @param config export configuration\n-     * @param index datatable current index during export process\n-     * @throws IOException\n-     */\n-    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n-\n-    private class DataTableVisitCallBack implements VisitCallback {\n-\n-        private ExportConfiguration config;\n-\n-        private DataTable target;\n-\n-        private int index = 0;\n-\n-        private int counter = 0;\n-\n-        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n-            this.target = target;\n-            this.config = config;\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public VisitResult visit(VisitContext context, UIComponent component) {\n-            if (target == component) {\n-                try {\n-                    doExport(context.getFacesContext(), target, config, index);\n-                    index++;\n-                    counter++;\n-                }\n-                catch (IOException e) {\n-                    throw new FacesException(e);\n-                }\n-            }\n-            return VisitResult.ACCEPT;\n-        }\n-\n-        /**\n-         * Returns number of tables exported\n-         * @param context faces context\n-         * @return number of tables exported\n-         */\n-        public int invoke(FacesContext context) {\n-            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n-                VisitContext visitContext = VisitContext.createVisitContext(context);\n-                p.visitTree(visitContext, this);\n-            }, true);\n-\n-            return counter;\n-        }\n-    }\n-\n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(ExternalContext externalContext) {\n-        final boolean secure = PrimeRequestContext.isSecure(externalContext);\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<String, Object>(2);\n-            map.put(\"secure\", secure);\n-            map.put(\"sameSite\", \"Strict\");\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n-    }\n-\n-}\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.datatable.export;\n+\n+import org.primefaces.component.celleditor.CellEditor;\n+import org.primefaces.component.datatable.DataTable;\n+import org.primefaces.component.export.ExportConfiguration;\n+import org.primefaces.component.export.Exporter;\n+import org.primefaces.component.overlaypanel.OverlayPanel;\n+import org.primefaces.context.PrimeRequestContext;\n+import org.primefaces.model.LazyDataModel;\n+import org.primefaces.util.ComponentUtils;\n+import org.primefaces.util.Constants;\n+\n+import javax.el.MethodExpression;\n+import javax.faces.FacesException;\n+import javax.faces.component.*;\n+import javax.faces.component.html.HtmlCommandLink;\n+import javax.faces.component.html.HtmlGraphicImage;\n+import javax.faces.component.visit.VisitCallback;\n+import javax.faces.component.visit.VisitContext;\n+import javax.faces.component.visit.VisitResult;\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import javax.faces.convert.Converter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public abstract class DataTableExporter implements Exporter<DataTable> {\n+\n+    protected enum ColumnType {\n+        HEADER(\"header\"),\n+        FOOTER(\"footer\");\n+\n+        private final String facet;\n+\n+        ColumnType(String facet) {\n+            this.facet = facet;\n+        }\n+\n+        public String facet() {\n+            return facet;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return facet;\n+        }\n+    }\n+\n+    protected List<UIColumn> getColumnsToExport(UIData table) {\n+        return table.getChildren().stream()\n+                .filter(UIColumn.class::isInstance)\n+                .map(UIColumn.class::cast)\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected boolean hasColumnFooter(List<UIColumn> columns) {\n+        return columns.stream().anyMatch(c -> c.getFooter() != null);\n+    }\n+\n+    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n+        MethodExpression exportFunction = column.getExportFunction();\n+\n+        if (exportFunction != null) {\n+            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n+        }\n+\n+        return Constants.EMPTY_STRING;\n+    }\n+\n+    public String exportValue(FacesContext context, UIComponent component) {\n+\n+        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n+            HtmlCommandLink link = (HtmlCommandLink) component;\n+            Object value = link.getValue();\n+\n+            if (value != null) {\n+                return String.valueOf(value);\n+            }\n+            else {\n+                //export first value holder\n+                for (UIComponent child : link.getChildren()) {\n+                    if (child instanceof ValueHolder) {\n+                        return exportValue(context, child);\n+                    }\n+                }\n+\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+        else if (component instanceof ValueHolder) {\n+            if (component instanceof EditableValueHolder) {\n+                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n+                if (submittedValue != null) {\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            ValueHolder valueHolder = (ValueHolder) component;\n+            Object value = valueHolder.getValue();\n+            if (value == null) {\n+                return Constants.EMPTY_STRING;\n+            }\n+\n+            Converter converter = valueHolder.getConverter();\n+            if (converter == null) {\n+                Class valueType = value.getClass();\n+                converter = context.getApplication().createConverter(valueType);\n+            }\n+\n+            if (converter != null) {\n+                if (component instanceof UISelectMany) {\n+                    StringBuilder builder = new StringBuilder();\n+                    List collection = null;\n+\n+                    if (value instanceof List) {\n+                        collection = (List) value;\n+                    }\n+                    else if (value.getClass().isArray()) {\n+                        collection = Arrays.asList(value);\n+                    }\n+                    else {\n+                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n+                    }\n+\n+                    int collectionSize = collection.size();\n+                    for (int i = 0; i < collectionSize; i++) {\n+                        Object object = collection.get(i);\n+                        builder.append(converter.getAsString(context, component, object));\n+\n+                        if (i < (collectionSize - 1)) {\n+                            builder.append(\",\");\n+                        }\n+                    }\n+\n+                    String valuesAsString = builder.toString();\n+                    builder.setLength(0);\n+\n+                    return valuesAsString;\n+                }\n+                else {\n+                    return converter.getAsString(context, component, value);\n+                }\n+            }\n+            else {\n+                return value.toString();\n+            }\n+        }\n+        else if (component instanceof CellEditor) {\n+            return exportValue(context, component.getFacet(\"output\"));\n+        }\n+        else if (component instanceof HtmlGraphicImage) {\n+            return (String) component.getAttributes().get(\"alt\");\n+        }\n+        else if (component instanceof OverlayPanel) {\n+            return Constants.EMPTY_STRING;\n+        }\n+        else {\n+            //This would get the plain texts on UIInstructions when using Facelets\n+            String value = component.toString();\n+\n+            if (value != null) {\n+                return value.trim();\n+            }\n+            else {\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+    }\n+\n+    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rows = table.getRows();\n+        if (rows == 0) {\n+            rows = table.getRowCount();\n+        }\n+\n+        int rowsToExport = first + rows;\n+\n+        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n+            exportRow(table, document, rowIndex);\n+        }\n+    }\n+\n+    protected void exportAll(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rowCount = table.getRowCount();\n+        int rows = table.getRows();\n+        boolean lazy = table.isLazy();\n+\n+        if (lazy) {\n+            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n+            List<?> wrappedData = lazyDataModel.getWrappedData();\n+\n+            if (rowCount > 0) {\n+                table.setFirst(0);\n+                table.setRows(rowCount);\n+                table.clearLazyCache();\n+                table.loadLazyData();\n+            }\n+\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+            table.setRows(rows);\n+            table.setRowIndex(-1);\n+            table.clearLazyCache();\n+            lazyDataModel.setWrappedData(wrappedData);\n+            lazyDataModel.setPageSize(rows);\n+            lazyDataModel.setRowIndex(-1);\n+        }\n+        else {\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+        }\n+    }\n+\n+    protected void exportRow(DataTable table, Object document, int rowIndex) {\n+        table.setRowIndex(rowIndex);\n+        if (!table.isRowAvailable()) {\n+            return;\n+        }\n+\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportRow(DataTable table, Object document) {\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n+        Object selection = table.getSelection();\n+        String var = table.getVar();\n+\n+        if (selection != null) {\n+            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n+\n+            if (selection.getClass().isArray()) {\n+                int size = Array.getLength(selection);\n+\n+                for (int i = 0; i < size; i++) {\n+                    requestMap.put(var, Array.get(selection, i));\n+                    exportRow(table, document);\n+                }\n+            }\n+            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n+                for (Object obj : (Collection) selection) {\n+                    requestMap.put(var, obj);\n+                    exportRow(table, document);\n+                }\n+            }\n+            else {\n+                requestMap.put(var, selection);\n+                exportCells(table, document);\n+            }\n+        }\n+    }\n+\n+    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void preRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected void postRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected abstract void exportCells(DataTable table, Object document);\n+\n+    @Override\n+    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n+        preExport(context,  config);\n+\n+        int index = 0;\n+        for (DataTable table : tables) {\n+            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n+            int nbTables = visitCallback.invoke(context);\n+            index += nbTables;\n+        }\n+\n+        postExport(context, config);\n+    }\n+\n+    /**\n+     * Export datatable\n+     * @param facesContext faces context\n+     * @param table datatable to export\n+     * @param config export configuration\n+     * @param index datatable current index during export process\n+     * @throws IOException\n+     */\n+    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n+\n+    private class DataTableVisitCallBack implements VisitCallback {\n+\n+        private ExportConfiguration config;\n+\n+        private DataTable target;\n+\n+        private int index = 0;\n+\n+        private int counter = 0;\n+\n+        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n+            this.target = target;\n+            this.config = config;\n+            this.index = index;\n+        }\n+\n+        @Override\n+        public VisitResult visit(VisitContext context, UIComponent component) {\n+            if (target == component) {\n+                try {\n+                    doExport(context.getFacesContext(), target, config, index);\n+                    index++;\n+                    counter++;\n+                }\n+                catch (IOException e) {\n+                    throw new FacesException(e);\n+                }\n+            }\n+            return VisitResult.ACCEPT;\n+        }\n+\n+        /**\n+         * Returns number of tables exported\n+         * @param context faces context\n+         * @return number of tables exported\n+         */\n+        public int invoke(FacesContext context) {\n+            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n+                VisitContext visitContext = VisitContext.createVisitContext(context);\n+                p.visitTree(visitContext, this);\n+            }, true);\n+\n+            return counter;\n+        }\n+    }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(FacesContext context) {\n+        ExternalContext externalContext = context.getExternalContext();\n+        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n+        Map<String, Object> map = null;\n+        if (secure) {\n+            map = new HashMap<>(2);\n+            map.put(\"secure\", secure);\n+            map.put(\"sameSite\", \"Strict\");\n+        }\n+        else {\n+            map = Collections.<String, Object>emptyMap();\n+        }\n+        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+    }\n+\n+}\n", "next_change": {"commit": "b53ea05f6645d36b8d82e9bcc4e828a2dffcc484", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex 7089ec13b..b54f008f6 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -1,410 +1,410 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2009-2020 PrimeTek\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.primefaces.component.datatable.export;\n-\n-import org.primefaces.component.celleditor.CellEditor;\n-import org.primefaces.component.datatable.DataTable;\n-import org.primefaces.component.export.ExportConfiguration;\n-import org.primefaces.component.export.Exporter;\n-import org.primefaces.component.overlaypanel.OverlayPanel;\n-import org.primefaces.context.PrimeRequestContext;\n-import org.primefaces.model.LazyDataModel;\n-import org.primefaces.util.ComponentUtils;\n-import org.primefaces.util.Constants;\n-\n-import javax.el.MethodExpression;\n-import javax.faces.FacesException;\n-import javax.faces.component.*;\n-import javax.faces.component.html.HtmlCommandLink;\n-import javax.faces.component.html.HtmlGraphicImage;\n-import javax.faces.component.visit.VisitCallback;\n-import javax.faces.component.visit.VisitContext;\n-import javax.faces.component.visit.VisitResult;\n-import javax.faces.context.ExternalContext;\n-import javax.faces.context.FacesContext;\n-import javax.faces.convert.Converter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public abstract class DataTableExporter implements Exporter<DataTable> {\n-\n-    protected enum ColumnType {\n-        HEADER(\"header\"),\n-        FOOTER(\"footer\");\n-\n-        private final String facet;\n-\n-        ColumnType(String facet) {\n-            this.facet = facet;\n-        }\n-\n-        public String facet() {\n-            return facet;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return facet;\n-        }\n-    }\n-\n-    protected List<UIColumn> getColumnsToExport(UIData table) {\n-        return table.getChildren().stream()\n-                .filter(UIColumn.class::isInstance)\n-                .map(UIColumn.class::cast)\n-                .collect(Collectors.toList());\n-    }\n-\n-    protected boolean hasColumnFooter(List<UIColumn> columns) {\n-        return columns.stream().anyMatch(c -> c.getFooter() != null);\n-    }\n-\n-    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n-        MethodExpression exportFunction = column.getExportFunction();\n-\n-        if (exportFunction != null) {\n-            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n-        }\n-\n-        return Constants.EMPTY_STRING;\n-    }\n-\n-    public String exportValue(FacesContext context, UIComponent component) {\n-\n-        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n-            HtmlCommandLink link = (HtmlCommandLink) component;\n-            Object value = link.getValue();\n-\n-            if (value != null) {\n-                return String.valueOf(value);\n-            }\n-            else {\n-                //export first value holder\n-                for (UIComponent child : link.getChildren()) {\n-                    if (child instanceof ValueHolder) {\n-                        return exportValue(context, child);\n-                    }\n-                }\n-\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-        else if (component instanceof ValueHolder) {\n-            if (component instanceof EditableValueHolder) {\n-                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n-                if (submittedValue != null) {\n-                    return submittedValue.toString();\n-                }\n-            }\n-\n-            ValueHolder valueHolder = (ValueHolder) component;\n-            Object value = valueHolder.getValue();\n-            if (value == null) {\n-                return Constants.EMPTY_STRING;\n-            }\n-\n-            Converter converter = valueHolder.getConverter();\n-            if (converter == null) {\n-                Class valueType = value.getClass();\n-                converter = context.getApplication().createConverter(valueType);\n-            }\n-\n-            if (converter != null) {\n-                if (component instanceof UISelectMany) {\n-                    StringBuilder builder = new StringBuilder();\n-                    List collection = null;\n-\n-                    if (value instanceof List) {\n-                        collection = (List) value;\n-                    }\n-                    else if (value.getClass().isArray()) {\n-                        collection = Arrays.asList(value);\n-                    }\n-                    else {\n-                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n-                    }\n-\n-                    int collectionSize = collection.size();\n-                    for (int i = 0; i < collectionSize; i++) {\n-                        Object object = collection.get(i);\n-                        builder.append(converter.getAsString(context, component, object));\n-\n-                        if (i < (collectionSize - 1)) {\n-                            builder.append(\",\");\n-                        }\n-                    }\n-\n-                    String valuesAsString = builder.toString();\n-                    builder.setLength(0);\n-\n-                    return valuesAsString;\n-                }\n-                else {\n-                    return converter.getAsString(context, component, value);\n-                }\n-            }\n-            else {\n-                return value.toString();\n-            }\n-        }\n-        else if (component instanceof CellEditor) {\n-            return exportValue(context, component.getFacet(\"output\"));\n-        }\n-        else if (component instanceof HtmlGraphicImage) {\n-            return (String) component.getAttributes().get(\"alt\");\n-        }\n-        else if (component instanceof OverlayPanel) {\n-            return Constants.EMPTY_STRING;\n-        }\n-        else {\n-            //This would get the plain texts on UIInstructions when using Facelets\n-            String value = component.toString();\n-\n-            if (value != null) {\n-                return value.trim();\n-            }\n-            else {\n-                return Constants.EMPTY_STRING;\n-            }\n-        }\n-    }\n-\n-    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rows = table.getRows();\n-        if (rows == 0) {\n-            rows = table.getRowCount();\n-        }\n-\n-        int rowsToExport = first + rows;\n-\n-        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n-            exportRow(table, document, rowIndex);\n-        }\n-    }\n-\n-    protected void exportAll(FacesContext context, DataTable table, Object document) {\n-        int first = table.getFirst();\n-        int rowCount = table.getRowCount();\n-        int rows = table.getRows();\n-        boolean lazy = table.isLazy();\n-\n-        if (lazy) {\n-            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n-            List<?> wrappedData = lazyDataModel.getWrappedData();\n-\n-            if (rowCount > 0) {\n-                table.setFirst(0);\n-                table.setRows(rowCount);\n-                table.clearLazyCache();\n-                table.loadLazyData();\n-            }\n-\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-            table.setRows(rows);\n-            table.setRowIndex(-1);\n-            table.clearLazyCache();\n-            lazyDataModel.setWrappedData(wrappedData);\n-            lazyDataModel.setPageSize(rows);\n-            lazyDataModel.setRowIndex(-1);\n-        }\n-        else {\n-            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n-                exportRow(table, document, rowIndex);\n-            }\n-\n-            //restore\n-            table.setFirst(first);\n-        }\n-    }\n-\n-    protected void exportRow(DataTable table, Object document, int rowIndex) {\n-        table.setRowIndex(rowIndex);\n-        if (!table.isRowAvailable()) {\n-            return;\n-        }\n-\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportRow(DataTable table, Object document) {\n-        preRowExport(table, document);\n-        exportCells(table, document);\n-        postRowExport(table, document);\n-    }\n-\n-    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n-        Object selection = table.getSelection();\n-        String var = table.getVar();\n-\n-        if (selection != null) {\n-            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-\n-            if (selection.getClass().isArray()) {\n-                int size = Array.getLength(selection);\n-\n-                for (int i = 0; i < size; i++) {\n-                    requestMap.put(var, Array.get(selection, i));\n-                    exportRow(table, document);\n-                }\n-            }\n-            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n-                for (Object obj : (Collection) selection) {\n-                    requestMap.put(var, obj);\n-                    exportRow(table, document);\n-                }\n-            }\n-            else {\n-                requestMap.put(var, selection);\n-                exportCells(table, document);\n-            }\n-        }\n-    }\n-\n-    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n-        // NOOP\n-    }\n-\n-    protected void preRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected void postRowExport(DataTable table, Object document) {\n-        // NOOP\n-    }\n-\n-    protected abstract void exportCells(DataTable table, Object document);\n-\n-    @Override\n-    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n-        preExport(context,  config);\n-\n-        int index = 0;\n-        for (DataTable table : tables) {\n-            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n-            int nbTables = visitCallback.invoke(context);\n-            index += nbTables;\n-        }\n-\n-        postExport(context, config);\n-    }\n-\n-    /**\n-     * Export datatable\n-     * @param facesContext faces context\n-     * @param table datatable to export\n-     * @param config export configuration\n-     * @param index datatable current index during export process\n-     * @throws IOException\n-     */\n-    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n-\n-    private class DataTableVisitCallBack implements VisitCallback {\n-\n-        private ExportConfiguration config;\n-\n-        private DataTable target;\n-\n-        private int index = 0;\n-\n-        private int counter = 0;\n-\n-        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n-            this.target = target;\n-            this.config = config;\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public VisitResult visit(VisitContext context, UIComponent component) {\n-            if (target == component) {\n-                try {\n-                    doExport(context.getFacesContext(), target, config, index);\n-                    index++;\n-                    counter++;\n-                }\n-                catch (IOException e) {\n-                    throw new FacesException(e);\n-                }\n-            }\n-            return VisitResult.ACCEPT;\n-        }\n-\n-        /**\n-         * Returns number of tables exported\n-         * @param context faces context\n-         * @return number of tables exported\n-         */\n-        public int invoke(FacesContext context) {\n-            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n-                VisitContext visitContext = VisitContext.createVisitContext(context);\n-                p.visitTree(visitContext, this);\n-            }, true);\n-\n-            return counter;\n-        }\n-    }\n-\n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(FacesContext context) {\n-        ExternalContext externalContext = context.getExternalContext();\n-        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<>(2);\n-            map.put(\"secure\", secure);\n-            map.put(\"sameSite\", \"Strict\");\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n-    }\n-\n-}\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.datatable.export;\n+\n+import org.primefaces.component.celleditor.CellEditor;\n+import org.primefaces.component.datatable.DataTable;\n+import org.primefaces.component.export.ExportConfiguration;\n+import org.primefaces.component.export.Exporter;\n+import org.primefaces.component.overlaypanel.OverlayPanel;\n+import org.primefaces.context.PrimeRequestContext;\n+import org.primefaces.model.LazyDataModel;\n+import org.primefaces.util.ComponentUtils;\n+import org.primefaces.util.Constants;\n+\n+import javax.el.MethodExpression;\n+import javax.faces.FacesException;\n+import javax.faces.component.*;\n+import javax.faces.component.html.HtmlCommandLink;\n+import javax.faces.component.html.HtmlGraphicImage;\n+import javax.faces.component.visit.VisitCallback;\n+import javax.faces.component.visit.VisitContext;\n+import javax.faces.component.visit.VisitResult;\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import javax.faces.convert.Converter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public abstract class DataTableExporter implements Exporter<DataTable> {\n+\n+    protected enum ColumnType {\n+        HEADER(\"header\"),\n+        FOOTER(\"footer\");\n+\n+        private final String facet;\n+\n+        ColumnType(String facet) {\n+            this.facet = facet;\n+        }\n+\n+        public String facet() {\n+            return facet;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return facet;\n+        }\n+    }\n+\n+    protected List<UIColumn> getColumnsToExport(UIData table) {\n+        return table.getChildren().stream()\n+                .filter(UIColumn.class::isInstance)\n+                .map(UIColumn.class::cast)\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected boolean hasColumnFooter(List<UIColumn> columns) {\n+        return columns.stream().anyMatch(c -> c.getFooter() != null);\n+    }\n+\n+    protected String exportColumnByFunction(FacesContext context, org.primefaces.component.api.UIColumn column) {\n+        MethodExpression exportFunction = column.getExportFunction();\n+\n+        if (exportFunction != null) {\n+            return (String) exportFunction.invoke(context.getELContext(), new Object[]{column});\n+        }\n+\n+        return Constants.EMPTY_STRING;\n+    }\n+\n+    public String exportValue(FacesContext context, UIComponent component) {\n+\n+        if (component instanceof HtmlCommandLink) {  //support for PrimeFaces and standard HtmlCommandLink\n+            HtmlCommandLink link = (HtmlCommandLink) component;\n+            Object value = link.getValue();\n+\n+            if (value != null) {\n+                return String.valueOf(value);\n+            }\n+            else {\n+                //export first value holder\n+                for (UIComponent child : link.getChildren()) {\n+                    if (child instanceof ValueHolder) {\n+                        return exportValue(context, child);\n+                    }\n+                }\n+\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+        else if (component instanceof ValueHolder) {\n+            if (component instanceof EditableValueHolder) {\n+                Object submittedValue = ((EditableValueHolder) component).getSubmittedValue();\n+                if (submittedValue != null) {\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            ValueHolder valueHolder = (ValueHolder) component;\n+            Object value = valueHolder.getValue();\n+            if (value == null) {\n+                return Constants.EMPTY_STRING;\n+            }\n+\n+            Converter converter = valueHolder.getConverter();\n+            if (converter == null) {\n+                Class valueType = value.getClass();\n+                converter = context.getApplication().createConverter(valueType);\n+            }\n+\n+            if (converter != null) {\n+                if (component instanceof UISelectMany) {\n+                    StringBuilder builder = new StringBuilder();\n+                    List collection = null;\n+\n+                    if (value instanceof List) {\n+                        collection = (List) value;\n+                    }\n+                    else if (value.getClass().isArray()) {\n+                        collection = Arrays.asList(value);\n+                    }\n+                    else {\n+                        throw new FacesException(\"Value of \" + component.getClientId(context) + \" must be a List or an Array.\");\n+                    }\n+\n+                    int collectionSize = collection.size();\n+                    for (int i = 0; i < collectionSize; i++) {\n+                        Object object = collection.get(i);\n+                        builder.append(converter.getAsString(context, component, object));\n+\n+                        if (i < (collectionSize - 1)) {\n+                            builder.append(\",\");\n+                        }\n+                    }\n+\n+                    String valuesAsString = builder.toString();\n+                    builder.setLength(0);\n+\n+                    return valuesAsString;\n+                }\n+                else {\n+                    return converter.getAsString(context, component, value);\n+                }\n+            }\n+            else {\n+                return value.toString();\n+            }\n+        }\n+        else if (component instanceof CellEditor) {\n+            return exportValue(context, component.getFacet(\"output\"));\n+        }\n+        else if (component instanceof HtmlGraphicImage) {\n+            return (String) component.getAttributes().get(\"alt\");\n+        }\n+        else if (component instanceof OverlayPanel) {\n+            return Constants.EMPTY_STRING;\n+        }\n+        else {\n+            //This would get the plain texts on UIInstructions when using Facelets\n+            String value = component.toString();\n+\n+            if (value != null) {\n+                return value.trim();\n+            }\n+            else {\n+                return Constants.EMPTY_STRING;\n+            }\n+        }\n+    }\n+\n+    protected void exportPageOnly(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rows = table.getRows();\n+        if (rows == 0) {\n+            rows = table.getRowCount();\n+        }\n+\n+        int rowsToExport = first + rows;\n+\n+        for (int rowIndex = first; rowIndex < rowsToExport; rowIndex++) {\n+            exportRow(table, document, rowIndex);\n+        }\n+    }\n+\n+    protected void exportAll(FacesContext context, DataTable table, Object document) {\n+        int first = table.getFirst();\n+        int rowCount = table.getRowCount();\n+        int rows = table.getRows();\n+        boolean lazy = table.isLazy();\n+\n+        if (lazy) {\n+            LazyDataModel<?> lazyDataModel = (LazyDataModel<?>) table.getValue();\n+            List<?> wrappedData = lazyDataModel.getWrappedData();\n+\n+            if (rowCount > 0) {\n+                table.setFirst(0);\n+                table.setRows(rowCount);\n+                table.clearLazyCache();\n+                table.loadLazyData();\n+            }\n+\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+            table.setRows(rows);\n+            table.setRowIndex(-1);\n+            table.clearLazyCache();\n+            lazyDataModel.setWrappedData(wrappedData);\n+            lazyDataModel.setPageSize(rows);\n+            lazyDataModel.setRowIndex(-1);\n+        }\n+        else {\n+            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n+                exportRow(table, document, rowIndex);\n+            }\n+\n+            //restore\n+            table.setFirst(first);\n+        }\n+    }\n+\n+    protected void exportRow(DataTable table, Object document, int rowIndex) {\n+        table.setRowIndex(rowIndex);\n+        if (!table.isRowAvailable()) {\n+            return;\n+        }\n+\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportRow(DataTable table, Object document) {\n+        preRowExport(table, document);\n+        exportCells(table, document);\n+        postRowExport(table, document);\n+    }\n+\n+    protected void exportSelectionOnly(FacesContext context, DataTable table, Object document) {\n+        Object selection = table.getSelection();\n+        String var = table.getVar();\n+\n+        if (selection != null) {\n+            Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n+\n+            if (selection.getClass().isArray()) {\n+                int size = Array.getLength(selection);\n+\n+                for (int i = 0; i < size; i++) {\n+                    requestMap.put(var, Array.get(selection, i));\n+                    exportRow(table, document);\n+                }\n+            }\n+            else if (Collection.class.isAssignableFrom(selection.getClass())) {\n+                for (Object obj : (Collection) selection) {\n+                    requestMap.put(var, obj);\n+                    exportRow(table, document);\n+                }\n+            }\n+            else {\n+                requestMap.put(var, selection);\n+                exportCells(table, document);\n+            }\n+        }\n+    }\n+\n+    protected void preExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void postExport(FacesContext context, ExportConfiguration config) throws IOException {\n+        // NOOP\n+    }\n+\n+    protected void preRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected void postRowExport(DataTable table, Object document) {\n+        // NOOP\n+    }\n+\n+    protected abstract void exportCells(DataTable table, Object document);\n+\n+    @Override\n+    public void export(FacesContext context, List<DataTable> tables, ExportConfiguration config) throws IOException {\n+        preExport(context,  config);\n+\n+        int index = 0;\n+        for (DataTable table : tables) {\n+            DataTableVisitCallBack visitCallback = new DataTableVisitCallBack(table, config, index);\n+            int nbTables = visitCallback.invoke(context);\n+            index += nbTables;\n+        }\n+\n+        postExport(context, config);\n+    }\n+\n+    /**\n+     * Export datatable\n+     * @param facesContext faces context\n+     * @param table datatable to export\n+     * @param config export configuration\n+     * @param index datatable current index during export process\n+     * @throws IOException\n+     */\n+    protected abstract void doExport(FacesContext facesContext, DataTable table, ExportConfiguration config, int index) throws IOException;\n+\n+    private class DataTableVisitCallBack implements VisitCallback {\n+\n+        private ExportConfiguration config;\n+\n+        private DataTable target;\n+\n+        private int index = 0;\n+\n+        private int counter = 0;\n+\n+        public DataTableVisitCallBack(DataTable target, ExportConfiguration config, int index) {\n+            this.target = target;\n+            this.config = config;\n+            this.index = index;\n+        }\n+\n+        @Override\n+        public VisitResult visit(VisitContext context, UIComponent component) {\n+            if (target == component) {\n+                try {\n+                    doExport(context.getFacesContext(), target, config, index);\n+                    index++;\n+                    counter++;\n+                }\n+                catch (IOException e) {\n+                    throw new FacesException(e);\n+                }\n+            }\n+            return VisitResult.ACCEPT;\n+        }\n+\n+        /**\n+         * Returns number of tables exported\n+         * @param context faces context\n+         * @return number of tables exported\n+         */\n+        public int invoke(FacesContext context) {\n+            ComponentUtils.invokeOnClosestIteratorParent(target, p -> {\n+                VisitContext visitContext = VisitContext.createVisitContext(context);\n+                p.visitTree(visitContext, this);\n+            }, true);\n+\n+            return counter;\n+        }\n+    }\n+\n+    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n+        externalContext.setResponseHeader(\"Expires\", \"0\");\n+        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n+        externalContext.setResponseHeader(\"Pragma\", \"public\");\n+        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n+    }\n+\n+    protected void addResponseCookie(FacesContext context) {\n+        ExternalContext externalContext = context.getExternalContext();\n+        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n+        Map<String, Object> map = null;\n+        if (secure) {\n+            map = new HashMap<>(2);\n+            map.put(\"secure\", secure);\n+            map.put(\"sameSite\", \"Strict\");\n+        }\n+        else {\n+            map = Collections.<String, Object>emptyMap();\n+        }\n+        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+    }\n+\n+}\n", "next_change": {"commit": "54046f7fc16829c04348ac5f2e7db494e0cdf4d3", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex b54f008f6..dd4c11b0c 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -393,18 +391,7 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n     }\n \n     protected void addResponseCookie(FacesContext context) {\n-        ExternalContext externalContext = context.getExternalContext();\n-        final boolean secure = PrimeRequestContext.getCurrentInstance(context).isSecure();\n-        Map<String, Object> map = null;\n-        if (secure) {\n-            map = new HashMap<>(2);\n-            map.put(\"secure\", secure);\n-            map.put(\"sameSite\", \"Strict\");\n-        }\n-        else {\n-            map = Collections.<String, Object>emptyMap();\n-        }\n-        externalContext.addResponseCookie(Constants.DOWNLOAD_COOKIE, \"true\", map);\n+        ResourceUtils.addResponseCookie(context, Constants.DOWNLOAD_COOKIE, \"true\", null);\n     }\n \n }\n", "next_change": {"commit": "252a4d8228b37daeb4a05644bf29d9ca82325127", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\nindex dd4c11b0c..000b3b15f 100644\n--- a/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n+++ b/src/main/java/org/primefaces/component/datatable/export/DataTableExporter.java\n", "chunk": "@@ -383,15 +385,8 @@ public abstract class DataTableExporter implements Exporter<DataTable> {\n         }\n     }\n \n-    protected void setResponseHeader(ExternalContext externalContext , String contentDisposition) {\n-        externalContext.setResponseHeader(\"Expires\", \"0\");\n-        externalContext.setResponseHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\n-        externalContext.setResponseHeader(\"Pragma\", \"public\");\n-        externalContext.setResponseHeader(\"Content-disposition\", contentDisposition);\n-    }\n-\n-    protected void addResponseCookie(FacesContext context) {\n-        ResourceUtils.addResponseCookie(context, Constants.DOWNLOAD_COOKIE, \"true\", null);\n+    protected OutputStream getOutputStream() {\n+        return outputStream;\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "2aa97314b2522345c2047f3263c45b2836cf7f9f", "url": "https://github.com/primefaces/primefaces/commit/2aa97314b2522345c2047f3263c45b2836cf7f9f", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T13:26:29Z", "type": "commit"}, {"oid": "d9a7cbd37ee5ee4ba4c97e4cf354bec15af44f04", "url": "https://github.com/primefaces/primefaces/commit/d9a7cbd37ee5ee4ba4c97e4cf354bec15af44f04", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T14:42:39Z", "type": "commit"}, {"oid": "777241bf8c6519c7ec7b37baa62528bab3317ee7", "url": "https://github.com/primefaces/primefaces/commit/777241bf8c6519c7ec7b37baa62528bab3317ee7", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040\n\ncache the result in PrimeRequestContext#isSecure", "committedDate": "2020-06-17T14:54:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMDU4Nw==", "url": "https://github.com/primefaces/primefaces/pull/6041#discussion_r441620587", "body": "This comment is no longer true now you are caching it after the first result.  @tandraschko I think this is OK because i doubt any site has a mix of HTTP and HTTPS.  At least they should not!", "bodyText": "This comment is no longer true now you are caching it after the first result.  @tandraschko I think this is OK because i doubt any site has a mix of HTTP and HTTPS.  At least they should not!", "bodyHTML": "<p dir=\"auto\">This comment is no longer true now you are caching it after the first result.  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/tandraschko/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tandraschko\">@tandraschko</a> I think this is OK because i doubt any site has a mix of HTTP and HTTPS.  At least they should not!</p>", "author": "melloware", "createdAt": "2020-06-17T15:09:04Z", "path": "src/main/java/org/primefaces/context/PrimeRequestContext.java", "diffHunk": "@@ -207,22 +208,25 @@ public void release() {\n      * @return if secure or not.\n      */\n     public boolean isSecure() {\n-        // currently called once per request - later we might cache the result per request\n-        // and even the method lookup\n-        Object request = context.getExternalContext().getRequest();\n+        // currently called once per request", "originalCommit": "777241bf8c6519c7ec7b37baa62528bab3317ee7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67d47e24c994050d1b82a8180f88af7938eef0e6", "changed_code": [{"header": "diff --git a/src/main/java/org/primefaces/context/PrimeRequestContext.java b/src/main/java/org/primefaces/context/PrimeRequestContext.java\nindex d6d5ab966..e908eb93a 100644\n--- a/src/main/java/org/primefaces/context/PrimeRequestContext.java\n+++ b/src/main/java/org/primefaces/context/PrimeRequestContext.java\n", "chunk": "@@ -208,7 +208,6 @@ public class PrimeRequestContext {\n      * @return if secure or not.\n      */\n     public boolean isSecure() {\n-        // currently called once per request\n         if (secure == null) {\n             Object request = context.getExternalContext().getRequest();\n \n", "next_change": null}]}}, {"oid": "67d47e24c994050d1b82a8180f88af7938eef0e6", "url": "https://github.com/primefaces/primefaces/commit/67d47e24c994050d1b82a8180f88af7938eef0e6", "message": "Missing Secure Attribute in Encrypted Session (SSL) Cookie #6040", "committedDate": "2020-06-17T15:19:19Z", "type": "commit"}]}