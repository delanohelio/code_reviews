{"pr_number": 216, "pr_title": "Fix #195: Added MigrateMojo for migrating projects from FMP", "pr_author": "rohanKanojia", "pr_createdAt": "2020-06-01T07:15:24Z", "pr_url": "https://github.com/eclipse/jkube/pull/216", "timeline": [{"oid": "3a60b0311da24e9f064e408dacf4b5b8958d92a1", "url": "https://github.com/eclipse/jkube/commit/3a60b0311da24e9f064e408dacf4b5b8958d92a1", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-01T07:46:27Z", "type": "forcePushed"}, {"oid": "dc3a078bddc61cff70597908dc23fcb28c520661", "url": "https://github.com/eclipse/jkube/commit/dc3a078bddc61cff70597908dc23fcb28c520661", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-01T08:50:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTA4NQ==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433195085", "body": "Service shouldn't be instantiated it should be provided by the JKubeServiceHub", "bodyText": "Service shouldn't be instantiated it should be provided by the JKubeServiceHub", "bodyHTML": "<p dir=\"auto\">Service shouldn't be instantiated it should be provided by the JKubeServiceHub</p>", "author": "manusa", "createdAt": "2020-06-01T12:04:20Z", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.maven.plugin.mojo;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.eclipse.jkube.kit.common.service.MigrateService;\n+import org.eclipse.jkube.kit.common.util.MavenUtil;\n+import org.eclipse.jkube.maven.plugin.mojo.build.AbstractJKubeMojo;\n+\n+import java.io.File;\n+\n+@Mojo(name = \"migrate\", requiresDependencyResolution = ResolutionScope.RUNTIME, defaultPhase = LifecyclePhase.INSTALL)\n+public class MigrateMojo extends AbstractJKubeMojo {\n+    private static final String PLUGIN_ARTIFACT_ID = \"kubernetes-maven-plugin\";\n+    private static final String PLUGIN_GROUP_ID = \"org.eclipse.jkube\";\n+\n+    @Override\n+    public void executeInternal() throws MojoExecutionException {\n+        log = createLogger(null);\n+        File projectBasedir = project.getBasedir();\n+        try {\n+            MigrateService migrateService = new MigrateService(projectBasedir, PLUGIN_GROUP_ID, getPluginArtifactId(), MavenUtil.getVersion(PLUGIN_GROUP_ID, getPluginArtifactId()), log);", "originalCommit": "dc3a078bddc61cff70597908dc23fcb28c520661", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java b/kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java\nindex c3506e48..316cecc8 100644\n--- a/kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java\n+++ b/kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java\n", "chunk": "@@ -31,10 +28,8 @@ public class MigrateMojo extends AbstractJKubeMojo {\n     @Override\n     public void executeInternal() throws MojoExecutionException {\n         log = createLogger(null);\n-        File projectBasedir = project.getBasedir();\n         try {\n-            MigrateService migrateService = new MigrateService(projectBasedir, PLUGIN_GROUP_ID, getPluginArtifactId(), MavenUtil.getVersion(PLUGIN_GROUP_ID, getPluginArtifactId()), log);\n-            migrateService.migrate();\n+            jkubeServiceHub.getMigrateService().migrate(PLUGIN_GROUP_ID, getPluginArtifactId(), MavenUtil.getVersion(PLUGIN_GROUP_ID, getPluginArtifactId()));\n         } catch (Exception exception) {\n             throw new MojoExecutionException(\"Unable to migrate project to Eclipse JKube: \", exception);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTQyMg==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433195422", "body": "Add at least a verification to make sure that the unmarshaled document actually matches with the content of the document", "bodyText": "Add at least a verification to make sure that the unmarshaled document actually matches with the content of the document", "bodyHTML": "<p dir=\"auto\">Add at least a verification to make sure that the unmarshaled document actually matches with the content of the document</p>", "author": "manusa", "createdAt": "2020-06-01T12:05:17Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class XMLUtilTest {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Test\n+    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException {\n+        // Given\n+        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n+\n+        // When\n+        Document document = XMLUtil.readXML(sampleXML);\n+\n+        // Then\n+        assertNotNull(document);", "originalCommit": "dc3a078bddc61cff70597908dc23fcb28c520661", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex 9f121884..fbb63f64 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -38,7 +38,7 @@ public class XMLUtilTest {\n     public TemporaryFolder folder = new TemporaryFolder();\n \n     @Test\n-    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException {\n+    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         // Given\n         File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n \n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex fbb63f64..a1464b82 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -38,16 +38,14 @@ public class XMLUtilTest {\n     public TemporaryFolder folder = new TemporaryFolder();\n \n     @Test\n-    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n+    public void testReadXML() throws Exception {\n         // Given\n-        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n-\n+        File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         // When\n         Document document = XMLUtil.readXML(sampleXML);\n-\n         // Then\n         assertNotNull(document);\n-        assertEquals(\"random-generator\", XMLUtil.getNodeValueFromDocument(document, \"/project/name\"));\n+        assertEquals(1, document.getElementsByTagName(\"root\").getLength());\n     }\n \n     @Test\n", "next_change": {"commit": "dd105def19fc641a920d3af4b75779caa01212be", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex a1464b82..fc4cd1e0 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -20,38 +20,33 @@ import java.nio.file.Files;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerException;\n \n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.eclipse.jkube.kit.common.util.XMLUtil.stream;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n-public class XMLUtilTest {\n-    @Rule\n-    public TemporaryFolder folder = new TemporaryFolder();\n+class XMLUtilTest {\n \n     @Test\n-    public void testReadXML() throws Exception {\n+    void testReadXML() throws Exception {\n         // Given\n         File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         // When\n         Document document = XMLUtil.readXML(sampleXML);\n         // Then\n-        assertNotNull(document);\n-        assertEquals(1, document.getElementsByTagName(\"root\").getLength());\n+        assertThat(document).isNotNull();\n+        assertThat(document.getElementsByTagName(\"root\").getLength()).isEqualTo(1);\n     }\n \n     @Test\n-    public void testXMLWrite() throws IOException, ParserConfigurationException, TransformerException {\n+    void testXMLWrite(@TempDir File folder) throws IOException, ParserConfigurationException, TransformerException {\n         // Given\n-        File cloneXML = folder.newFile(\"pom-clone.xml\");\n+        File cloneXML = new File(folder, \"pom-clone.xml\");\n         Document dom = XMLUtil.createNewDocument();\n         Element rootElement = dom.createElement(\"project\");\n         rootElement.appendChild(createSimpleTextNode(dom, \"groupId\", \"org.eclipse.jkube\"));\n", "next_change": null}]}}]}}, {"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex 9f121884..fbb63f64 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -47,26 +47,26 @@ public class XMLUtilTest {\n \n         // Then\n         assertNotNull(document);\n+        assertEquals(\"random-generator\", XMLUtil.getNodeValueFromDocument(document, \"/project/name\"));\n     }\n \n     @Test\n-    public void testXMLWrite() throws URISyntaxException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n+    public void testXMLWrite() throws IOException, ParserConfigurationException, TransformerException {\n         // Given\n-        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n         File cloneXML = folder.newFile(\"pom-clone.xml\");\n+        Document dom = XMLUtil.createNewDocument();\n+        Element rootElement = dom.createElement(\"project\");\n+        rootElement.appendChild(createSimpleTextNode(dom, \"groupId\", \"org.eclipse.jkube\"));\n+        rootElement.appendChild(createSimpleTextNode(dom, \"artifactId\", \"jkube-kit\"));\n+        rootElement.appendChild(createSimpleTextNode(dom, \"version\", \"1.0.0\"));\n+        dom.appendChild(rootElement);\n \n         // When\n-        Document dom = XMLUtil.readXML(sampleXML);\n         XMLUtil.writeXML(dom, cloneXML);\n-        Document writtenDom = XMLUtil.readXML(cloneXML);\n \n         // Then\n         assertTrue(cloneXML.exists());\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/modelVersion\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/modelVersion\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/artifactId\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/artifactId\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/version\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/version\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/packaging\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/packaging\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/name\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/name\"));\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\", new String(Files.readAllBytes(cloneXML.toPath())));\n     }\n \n     @Test\n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex fbb63f64..a1464b82 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -70,18 +68,26 @@ public class XMLUtilTest {\n     }\n \n     @Test\n-    public void testGetNodeFromDocument() throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, URISyntaxException {\n+    public void testEvaluateExpressionForItem() throws Exception {\n         // Given\n-        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n-\n-        // When\n+        File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         Document document = XMLUtil.readXML(sampleXML);\n-        Node node = XMLUtil.getNodeFromDocument(document, \"/project/build\");\n-\n+        // When\n+        final NodeList result = XMLUtil.evaluateExpressionForItem(document, \"/root\");\n         // Then\n         assertNotNull(document);\n-        assertEquals(\"build\", node.getNodeName());\n-        assertEquals(3, node.getChildNodes().getLength());\n+        assertEquals(1, result.getLength());\n+        assertEquals(\"root\", result.item(0).getNodeName());\n+    }\n+\n+    @Test\n+    public void testStream() throws Exception {\n+        // Given\n+        final Document document = XMLUtil.readXML(new File(getClass().getResource(\"/util/xml-util.xml\").toURI()));\n+        // When\n+        final boolean result = stream(document.getChildNodes()).anyMatch(node -> node.getNodeName().equals(\"root\"));\n+        // Then\n+        assertTrue(result);\n     }\n \n     private Node createSimpleTextNode(Document doc, String name, String value) {\n", "next_change": {"commit": "dd105def19fc641a920d3af4b75779caa01212be", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex a1464b82..fc4cd1e0 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -63,31 +58,32 @@ public class XMLUtilTest {\n         XMLUtil.writeXML(dom, cloneXML);\n \n         // Then\n-        assertTrue(cloneXML.exists());\n-        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\", new String(Files.readAllBytes(cloneXML.toPath())));\n+        assertThat(cloneXML).exists();\n+        assertThat(new String(Files.readAllBytes(cloneXML.toPath()))).isEqualTo(\n+                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\");\n     }\n \n     @Test\n-    public void testEvaluateExpressionForItem() throws Exception {\n+    void testEvaluateExpressionForItem() throws Exception {\n         // Given\n         File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         Document document = XMLUtil.readXML(sampleXML);\n         // When\n         final NodeList result = XMLUtil.evaluateExpressionForItem(document, \"/root\");\n         // Then\n-        assertNotNull(document);\n-        assertEquals(1, result.getLength());\n-        assertEquals(\"root\", result.item(0).getNodeName());\n+        assertThat(document).isNotNull();\n+        assertThat(result.getLength()).isEqualTo(1);\n+        assertThat(result.item(0).getNodeName()).isEqualTo(\"root\");\n     }\n \n     @Test\n-    public void testStream() throws Exception {\n+    void testStream() throws Exception {\n         // Given\n         final Document document = XMLUtil.readXML(new File(getClass().getResource(\"/util/xml-util.xml\").toURI()));\n         // When\n         final boolean result = stream(document.getChildNodes()).anyMatch(node -> node.getNodeName().equals(\"root\"));\n         // Then\n-        assertTrue(result);\n+        assertThat(result).isTrue();\n     }\n \n     private Node createSimpleTextNode(Document doc, String name, String value) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NjgzNQ==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433196835", "body": "// GIven\r\nThis test should start by creating a Document with code only\r\n// When\r\nWrite the document to a file (single statement)\r\n// Then\r\nCompare the written file to a an expected file", "bodyText": "// GIven\nThis test should start by creating a Document with code only\n// When\nWrite the document to a file (single statement)\n// Then\nCompare the written file to a an expected file", "bodyHTML": "<p dir=\"auto\">// GIven<br>\nThis test should start by creating a Document with code only<br>\n// When<br>\nWrite the document to a file (single statement)<br>\n// Then<br>\nCompare the written file to a an expected file</p>", "author": "manusa", "createdAt": "2020-06-01T12:08:53Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class XMLUtilTest {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Test\n+    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException {\n+        // Given\n+        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n+\n+        // When\n+        Document document = XMLUtil.readXML(sampleXML);\n+\n+        // Then\n+        assertNotNull(document);\n+    }\n+\n+    @Test\n+    public void testXMLWrite() throws URISyntaxException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {", "originalCommit": "dc3a078bddc61cff70597908dc23fcb28c520661", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex 9f121884..fbb63f64 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -47,26 +47,26 @@ public class XMLUtilTest {\n \n         // Then\n         assertNotNull(document);\n+        assertEquals(\"random-generator\", XMLUtil.getNodeValueFromDocument(document, \"/project/name\"));\n     }\n \n     @Test\n-    public void testXMLWrite() throws URISyntaxException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n+    public void testXMLWrite() throws IOException, ParserConfigurationException, TransformerException {\n         // Given\n-        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n         File cloneXML = folder.newFile(\"pom-clone.xml\");\n+        Document dom = XMLUtil.createNewDocument();\n+        Element rootElement = dom.createElement(\"project\");\n+        rootElement.appendChild(createSimpleTextNode(dom, \"groupId\", \"org.eclipse.jkube\"));\n+        rootElement.appendChild(createSimpleTextNode(dom, \"artifactId\", \"jkube-kit\"));\n+        rootElement.appendChild(createSimpleTextNode(dom, \"version\", \"1.0.0\"));\n+        dom.appendChild(rootElement);\n \n         // When\n-        Document dom = XMLUtil.readXML(sampleXML);\n         XMLUtil.writeXML(dom, cloneXML);\n-        Document writtenDom = XMLUtil.readXML(cloneXML);\n \n         // Then\n         assertTrue(cloneXML.exists());\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/modelVersion\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/modelVersion\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/artifactId\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/artifactId\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/version\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/version\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/packaging\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/packaging\"));\n-        assertEquals(XMLUtil.getNodeValueFromDocument(dom, \"/project/name\"), XMLUtil.getNodeValueFromDocument(writtenDom, \"/project/name\"));\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\", new String(Files.readAllBytes(cloneXML.toPath())));\n     }\n \n     @Test\n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex fbb63f64..a1464b82 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -70,18 +68,26 @@ public class XMLUtilTest {\n     }\n \n     @Test\n-    public void testGetNodeFromDocument() throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, URISyntaxException {\n+    public void testEvaluateExpressionForItem() throws Exception {\n         // Given\n-        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n-\n-        // When\n+        File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         Document document = XMLUtil.readXML(sampleXML);\n-        Node node = XMLUtil.getNodeFromDocument(document, \"/project/build\");\n-\n+        // When\n+        final NodeList result = XMLUtil.evaluateExpressionForItem(document, \"/root\");\n         // Then\n         assertNotNull(document);\n-        assertEquals(\"build\", node.getNodeName());\n-        assertEquals(3, node.getChildNodes().getLength());\n+        assertEquals(1, result.getLength());\n+        assertEquals(\"root\", result.item(0).getNodeName());\n+    }\n+\n+    @Test\n+    public void testStream() throws Exception {\n+        // Given\n+        final Document document = XMLUtil.readXML(new File(getClass().getResource(\"/util/xml-util.xml\").toURI()));\n+        // When\n+        final boolean result = stream(document.getChildNodes()).anyMatch(node -> node.getNodeName().equals(\"root\"));\n+        // Then\n+        assertTrue(result);\n     }\n \n     private Node createSimpleTextNode(Document doc, String name, String value) {\n", "next_change": {"commit": "dd105def19fc641a920d3af4b75779caa01212be", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\nindex a1464b82..fc4cd1e0 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java\n", "chunk": "@@ -63,31 +58,32 @@ public class XMLUtilTest {\n         XMLUtil.writeXML(dom, cloneXML);\n \n         // Then\n-        assertTrue(cloneXML.exists());\n-        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\", new String(Files.readAllBytes(cloneXML.toPath())));\n+        assertThat(cloneXML).exists();\n+        assertThat(new String(Files.readAllBytes(cloneXML.toPath()))).isEqualTo(\n+                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><project><groupId>org.eclipse.jkube</groupId><artifactId>jkube-kit</artifactId><version>1.0.0</version></project>\");\n     }\n \n     @Test\n-    public void testEvaluateExpressionForItem() throws Exception {\n+    void testEvaluateExpressionForItem() throws Exception {\n         // Given\n         File sampleXML = new File(getClass().getResource(\"/util/xml-util.xml\").toURI());\n         Document document = XMLUtil.readXML(sampleXML);\n         // When\n         final NodeList result = XMLUtil.evaluateExpressionForItem(document, \"/root\");\n         // Then\n-        assertNotNull(document);\n-        assertEquals(1, result.getLength());\n-        assertEquals(\"root\", result.item(0).getNodeName());\n+        assertThat(document).isNotNull();\n+        assertThat(result.getLength()).isEqualTo(1);\n+        assertThat(result.item(0).getNodeName()).isEqualTo(\"root\");\n     }\n \n     @Test\n-    public void testStream() throws Exception {\n+    void testStream() throws Exception {\n         // Given\n         final Document document = XMLUtil.readXML(new File(getClass().getResource(\"/util/xml-util.xml\").toURI()));\n         // When\n         final boolean result = stream(document.getChildNodes()).anyMatch(node -> node.getNodeName().equals(\"root\"));\n         // Then\n-        assertTrue(result);\n+        assertThat(result).isTrue();\n     }\n \n     private Node createSimpleTextNode(Document doc, String name, String value) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NzQ5Ng==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433197496", "body": "You can use XPath queries to do this for you\r\n\r\nhttps://www.w3schools.com/xml/xpath_syntax.asp\r\n\r\nhttps://stackoverflow.com/questions/32959791/filtering-xml-document-using-xpath-in-java\r\n", "bodyText": "You can use XPath queries to do this for you\nhttps://www.w3schools.com/xml/xpath_syntax.asp\nhttps://stackoverflow.com/questions/32959791/filtering-xml-document-using-xpath-in-java", "bodyHTML": "<p dir=\"auto\">You can use XPath queries to do this for you</p>\n<p dir=\"auto\"><a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\" rel=\"nofollow\">https://www.w3schools.com/xml/xpath_syntax.asp</a></p>\n<p dir=\"auto\"><a href=\"https://stackoverflow.com/questions/32959791/filtering-xml-document-using-xpath-in-java\" rel=\"nofollow\">https://stackoverflow.com/questions/32959791/filtering-xml-document-using-xpath-in-java</a></p>", "author": "manusa", "createdAt": "2020-06-01T12:10:33Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class XMLUtil {\n+    private XMLUtil() { }\n+\n+    public static Document readXML(File xmlFile) throws ParserConfigurationException, IOException, SAXException {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", false);\n+        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+        documentBuilderFactory.setXIncludeAware(false);\n+        documentBuilderFactory.setExpandEntityReferences(false);\n+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n+\n+        return documentBuilder.parse(xmlFile);\n+    }\n+\n+    public static void writeXML(Document document, File xmlFile) throws TransformerException {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+        Transformer transformer = transformerFactory.newTransformer();\n+        document.setXmlStandalone(true);\n+        DOMSource source = new DOMSource(document);\n+        StreamResult result = new StreamResult(xmlFile);\n+        transformer.transform(source, result);\n+    }\n+\n+    public static Node getNodeFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (Node) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.NODE);\n+    }\n+\n+    public static String getNodeValueFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (String) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.STRING);\n+    }\n+\n+    public static int findNodeInList(NodeList nodeList, String nodeName, String desiredValue) {", "originalCommit": "dc3a078bddc61cff70597908dc23fcb28c520661", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\nindex 762a7822..0ce255f9 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n", "chunk": "@@ -78,16 +79,16 @@ public class XMLUtil {\n         return (String) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.STRING);\n     }\n \n-    public static int findNodeInList(NodeList nodeList, String nodeName, String desiredValue) {\n-        for (int i = 0; i < nodeList.getLength(); i++) {\n-            Node node = nodeList.item(i);\n-            if (node.getNodeType() == Node.ELEMENT_NODE) {\n-                Element elem = (Element) node;\n-                if (elem.getElementsByTagName(nodeName).item(0).getTextContent().equals(desiredValue)) {\n-                    return i;\n-                }\n-            }\n+    private static DocumentBuilderFactory getDocumentBuilderFactory() throws ParserConfigurationException {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        for (String feature : featuresToDisable) {\n+            documentBuilderFactory.setFeature(feature, false);\n         }\n-        return -1;\n+        documentBuilderFactory.setXIncludeAware(false);\n+        documentBuilderFactory.setExpandEntityReferences(false);\n+        return documentBuilderFactory;\n     }\n }\n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\nindex 0ce255f9..a5cbbd6c 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n", "chunk": "@@ -84,7 +92,7 @@ public class XMLUtil {\n         documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n-        for (String feature : featuresToDisable) {\n+        for (String feature : DISABLED_FEATURES) {\n             documentBuilderFactory.setFeature(feature, false);\n         }\n         documentBuilderFactory.setXIncludeAware(false);\n", "next_change": null}]}}]}}, {"oid": "57f704b31f1249be7d7a646b9d17c163f1e9937f", "url": "https://github.com/eclipse/jkube/commit/57f704b31f1249be7d7a646b9d17c163f1e9937f", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-02T10:49:50Z", "type": "forcePushed"}, {"oid": "d320ad3d018e78385bc0f75b393758052353810b", "url": "https://github.com/eclipse/jkube/commit/d320ad3d018e78385bc0f75b393758052353810b", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-02T11:05:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTcxNQ==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433839715", "body": "`\"/project/properties\"` can also be converted into a constant string.", "bodyText": "\"/project/properties\" can also be converted into a constant string.", "bodyHTML": "<p dir=\"auto\"><code>\"/project/properties\"</code> can also be converted into a constant string.</p>", "author": "dev-gaur", "createdAt": "2020-06-02T12:33:44Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.service;\n+\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.common.util.XMLUtil;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+public class MigrateService {\n+    private File projectBasedir;\n+    private static final String POM_XML = \"pom.xml\";\n+    private static final String FABRIC8 = \"fabric8\";\n+    private static final String JKUBE = \"jkube\";\n+    private static final String DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + FABRIC8;\n+    private static final String DEFAULT_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + JKUBE;\n+    private static final String ARTIFACT_ID = \"artifactId\";\n+    private static final String GROUP_ID = \"groupId\";\n+    private static final String VERSION = \"version\";\n+    private static final String FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID = FABRIC8 + \"-maven-plugin\";\n+    private KitLogger logger;\n+\n+    public MigrateService(File projectBaseDirectory, KitLogger logger) {\n+        this.projectBasedir = projectBaseDirectory;\n+        this.logger = logger;\n+    }\n+\n+    public void migrate(String pluginGroupId, String pluginArtifactId, String pluginVersion) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n+        File pomFile = getPomFile();\n+        String pomContent = new String(Files.readAllBytes(pomFile.toPath()), StandardCharsets.UTF_8);\n+        String modifiedPomContent = searchAndReplaceEnricherRefsInPomToJKube(pomContent);\n+        Files.write(pomFile.toPath(), modifiedPomContent.getBytes(StandardCharsets.UTF_8));\n+        if (pomContainsFMP(pomContent)) {\n+            Document dom = XMLUtil.readXML(pomFile);\n+\n+            // Check Whether plugin is present in project.build.plugins\n+            modifyFMPPluginSectionInsideBuild(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n+            // Check Whether plugin is present in project.profiles.build.plugins\n+            modifyFMPSectionInsideProfile(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n+            // Rename all Fabric8 related properties to JKube\n+            modifyFMPPropertiesInsidePom(dom);\n+\n+            XMLUtil.writeXML(dom, pomFile);\n+            renameResourceFragmentDirectoryToJKube();\n+        } else {\n+            logger.warn(\"Unable to find Fabric8 Maven Plugin inside pom\");\n+        }\n+    }\n+\n+    private String searchAndReplaceEnricherRefsInPomToJKube(String pomContent) {\n+        pomContent = pomContent.replace(\"fmp-\", JKUBE + \"-\");\n+        pomContent = pomContent.replace(\"f8-\", JKUBE + \"-\");\n+\n+        return pomContent;\n+    }\n+\n+    private boolean pomContainsFMP(String pomContent) {\n+        return pomContent.contains(FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID);\n+    }\n+\n+    private File getPomFile() {\n+        return new File(projectBasedir, POM_XML);\n+    }\n+\n+    private File getResourceFragmentDirectory(File projectBasedir) {\n+        return new File(projectBasedir, DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY);\n+    }\n+\n+    private void modifyFMPPluginSectionInsideBuild(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n+        convertFMPNodeToJKube(dom,  pluginGroupId, pluginArtifactId, pluginVersion, \"/project/build/plugins\");\n+    }\n+\n+    private void modifyFMPSectionInsideProfile(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n+        Node profilesNode = XMLUtil.getNodeFromDocument(dom, \"/project/profiles\");\n+        if (profilesNode != null) {\n+            NodeList nodeList = profilesNode.getChildNodes();\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                convertFMPNodeToJKube(dom, pluginGroupId, pluginArtifactId, pluginVersion, \"/project/profiles/profile[\" + i + \"]/build/plugins\");\n+            }\n+        }\n+    }\n+\n+    private void convertFMPNodeToJKube(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion, String parentXPathExpression) throws XPathExpressionException {\n+        Node fmpNode = XMLUtil.getNodeFromDocument(dom, parentXPathExpression + \"/plugin[artifactId='\" + FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID + \"']\");\n+        if (fmpNode != null) {\n+            Element fmpNodeElem = (Element) fmpNode;\n+            Node artifactNode = fmpNodeElem.getElementsByTagName(ARTIFACT_ID).item(0);\n+            Node groupNode = fmpNodeElem.getElementsByTagName(GROUP_ID).item(0);\n+            Node versionNode = fmpNodeElem.getElementsByTagName(VERSION).item(0);\n+            logger.info(\"Found Fabric8 Maven Plugin in pom with version \" + versionNode.getTextContent());\n+            groupNode.setTextContent(pluginGroupId);\n+            artifactNode.setTextContent(pluginArtifactId);\n+            versionNode.setTextContent(pluginVersion);\n+        }\n+    }\n+\n+    private void renameResourceFragmentDirectoryToJKube() {\n+        File resourceFragmentDir = getResourceFragmentDirectory(projectBasedir);\n+        if (resourceFragmentDir.exists()) {\n+            File jkubeResourceDir = new File(projectBasedir, DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+            boolean isRenamed = resourceFragmentDir.renameTo(jkubeResourceDir);\n+            if (!isRenamed) {\n+                logger.warn(\"Unable to rename resource fragment directory in project\");\n+            } else {\n+                logger.info(\"Renamed \" + DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY + \" to \" + DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+            }\n+        }\n+    }\n+\n+    private void modifyFMPPropertiesInsidePom(Document dom) throws XPathExpressionException {\n+        Node propertiesNode = XMLUtil.getNodeFromDocument(dom, \"/project/properties\");", "originalCommit": "d320ad3d018e78385bc0f75b393758052353810b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\nindex 020d8729..7772c8b6 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\n", "chunk": "@@ -130,7 +135,7 @@ public class MigrateService {\n     }\n \n     private void modifyFMPPropertiesInsidePom(Document dom) throws XPathExpressionException {\n-        Node propertiesNode = XMLUtil.getNodeFromDocument(dom, \"/project/properties\");\n+        Node propertiesNode = XMLUtil.getNodeFromDocument(dom, POM_PROJECT_PATH + POM_PROPERTIES_PATH);\n         if (propertiesNode != null) {\n             NodeList nodeList = propertiesNode.getChildNodes();\n             for (int i = 0; i < nodeList.getLength(); i++) {\n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\nindex 7772c8b6..75d35c49 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java\n", "chunk": "@@ -13,140 +13,154 @@\n  */\n package org.eclipse.jkube.kit.common.service;\n \n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.function.BiConsumer;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+\n+import org.apache.commons.io.FileUtils;\n import org.eclipse.jkube.kit.common.KitLogger;\n import org.eclipse.jkube.kit.common.util.XMLUtil;\n+\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n import org.xml.sax.SAXException;\n \n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.xpath.XPathExpressionException;\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n+import static org.eclipse.jkube.kit.common.util.XMLUtil.stream;\n \n public class MigrateService {\n-    private File projectBasedir;\n-    private static final String POM_XML = \"pom.xml\";\n-    private static final String FABRIC8 = \"fabric8\";\n-    private static final String JKUBE = \"jkube\";\n-    private static final String DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + FABRIC8;\n-    private static final String DEFAULT_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + JKUBE;\n-    private static final String ARTIFACT_ID = \"artifactId\";\n-    private static final String GROUP_ID = \"groupId\";\n-    private static final String VERSION = \"version\";\n-    private static final String FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID = FABRIC8 + \"-maven-plugin\";\n-    private static final String POM_PROJECT_PATH = \"/project\";\n-    private static final String POM_PROFILES_PATH = POM_PROJECT_PATH + \"/profiles\";\n-    private static final String POM_PLUGINS_PATH = \"/build/plugins\";\n-    private static final String POM_PROPERTIES_PATH = \"/properties\";\n-    private static final String POM_PLUGIN_PATH = \"/plugin\";\n-    private KitLogger logger;\n-\n-    public MigrateService(File projectBaseDirectory, KitLogger logger) {\n-        this.projectBasedir = projectBaseDirectory;\n-        this.logger = logger;\n-    }\n-\n-    public void migrate(String pluginGroupId, String pluginArtifactId, String pluginVersion) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n-        File pomFile = getPomFile();\n-        String pomContent = new String(Files.readAllBytes(pomFile.toPath()), StandardCharsets.UTF_8);\n-        String modifiedPomContent = searchAndReplaceEnricherRefsInPomToJKube(pomContent);\n-        Files.write(pomFile.toPath(), modifiedPomContent.getBytes(StandardCharsets.UTF_8));\n-        if (pomContainsFMP(pomContent)) {\n-            Document dom = XMLUtil.readXML(pomFile);\n-\n-            // Check Whether plugin is present in project.build.plugins\n-            modifyFMPPluginSectionInsideBuild(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n-            // Check Whether plugin is present in project.profiles.build.plugins\n-            modifyFMPSectionInsideProfile(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n-            // Rename all Fabric8 related properties to JKube\n-            modifyFMPPropertiesInsidePom(dom);\n-\n-            XMLUtil.writeXML(dom, pomFile);\n-            renameResourceFragmentDirectoryToJKube();\n-        } else {\n-            logger.warn(\"Unable to find Fabric8 Maven Plugin inside pom\");\n-        }\n-    }\n-\n-    private String searchAndReplaceEnricherRefsInPomToJKube(String pomContent) {\n-        pomContent = pomContent.replace(\"fmp-\", JKUBE + \"-\");\n-        pomContent = pomContent.replace(\"f8-\", JKUBE + \"-\");\n-\n-        return pomContent;\n-    }\n-\n-    private boolean pomContainsFMP(String pomContent) {\n-        return pomContent.contains(FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID);\n-    }\n-\n-    private File getPomFile() {\n-        return new File(projectBasedir, POM_XML);\n+  private static final String POM_XML = \"pom.xml\";\n+  private static final String JKUBE = \"jkube\";\n+  private static final String FABRIC8 = \"fabric8\";\n+  private static final String PREFIX_FMP = \"fmp-\";\n+  private static final String PREFIX_F8 = \"f8-\";\n+  private static final String PREFIX_JKUBE = \"jkube-\";\n+  private static final String DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/fabric8\";\n+  private static final String DEFAULT_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/jkube\";\n+  private static final String ARTIFACT_ID = \"artifactId\";\n+  private static final String GROUP_ID = \"groupId\";\n+  private static final String VERSION = \"version\";\n+  private static final String FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID = \"fabric8-maven-plugin\";\n+  private File projectBasedir;\n+  private KitLogger logger;\n+\n+  public MigrateService(File projectBaseDirectory, KitLogger logger) {\n+    this.projectBasedir = projectBaseDirectory;\n+    this.logger = logger;\n+  }\n+\n+  public void migrate(String pluginGroupId, String pluginArtifactId, String pluginVersion) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n+    final File pomFile = findPomFile();\n+    final Document pom = XMLUtil.readXML(pomFile);\n+    if (pomContainsFMP(pom)) {\n+      replaceFabric8Properties(pom);\n+      replaceFabric8Plugin(pom, pluginGroupId, pluginArtifactId, pluginVersion);\n+      XMLUtil.writeXML(pom, pomFile);\n+      renameResourceFragmentDirectoryToJKube();\n+    } else {\n+      logger.warn(\"Unable to find Fabric8 Maven Plugin inside pom.xml ({})\", pomFile.getAbsolutePath());\n     }\n+  }\n \n-    private File getResourceFragmentDirectory(File projectBasedir) {\n-        return new File(projectBasedir, DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY);\n-    }\n+  private boolean pomContainsFMP(Document document) throws XPathExpressionException {\n+    return XMLUtil.evaluateExpressionForItem(document,\n+        String.format(\"//plugins/plugin[artifactId='%s']\", FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID)).getLength() > 0;\n+  }\n \n-    private void modifyFMPPluginSectionInsideBuild(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n-        convertFMPNodeToJKube(dom,  pluginGroupId, pluginArtifactId, pluginVersion, POM_PROJECT_PATH + POM_PLUGINS_PATH);\n+  private File findPomFile() throws FileNotFoundException {\n+    final File pomFile = new File(projectBasedir, POM_XML);\n+    if (pomFile.exists() && pomFile.isFile()){\n+      return pomFile;\n     }\n-\n-    private void modifyFMPSectionInsideProfile(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n-        Node profilesNode = XMLUtil.getNodeFromDocument(dom, POM_PROFILES_PATH);\n-        if (profilesNode != null) {\n-            NodeList nodeList = profilesNode.getChildNodes();\n-            for (int i = 0; i < nodeList.getLength(); i++) {\n-                convertFMPNodeToJKube(dom, pluginGroupId, pluginArtifactId, pluginVersion, POM_PROFILES_PATH + \"/profile[\" + i + \"]\" + POM_PLUGINS_PATH);\n-            }\n-        }\n+    throw new FileNotFoundException(\"Project pom.xml was not found, check a pom.xml file exists in your project root\");\n+  }\n+\n+  private File getFabric8ResourceFragmentDirectory(File projectBasedir) {\n+    return new File(projectBasedir, DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY);\n+  }\n+\n+  @SuppressWarnings(\"squid:S3864\")\n+  private void replaceFabric8Plugin(\n+      Document document, String groupId, String artifactId, String version) throws XPathExpressionException {\n+\n+    final NodeList nodeList = XMLUtil.evaluateExpressionForItem(document,\n+        String.format(\"/project//build//plugins/plugin[artifactId='%s']\", FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID));\n+    stream(nodeList)\n+        .map(Element.class::cast)\n+        .peek(e -> stream(e.getElementsByTagName(VERSION))\n+            .forEach(v -> logger.info(\"Found Fabric8 Maven Plugin in pom with version %s\", v.getTextContent())))\n+        .peek(this::replaceConfigurationTagNames)\n+        .peek(this::replaceConfigurationIncludesExcludes)\n+        .map(MigrateService::replaceChildNodeValues)\n+        .forEach(bc -> {\n+          bc.accept(GROUP_ID, groupId);\n+          bc.accept(ARTIFACT_ID, artifactId);\n+          bc.accept(VERSION, version);\n+        });\n+  }\n+\n+  private void replaceFabric8Properties(Document document) throws XPathExpressionException {\n+    final NodeList nodeList = XMLUtil.evaluateExpressionForItem(document,\n+        \"(/project/properties|/project/profiles/profile/properties)\");\n+    stream(nodeList).map(Node::getChildNodes).flatMap(XMLUtil::stream)\n+        .filter(n -> Element.class.isAssignableFrom(n.getClass()))\n+        .map(Element.class::cast)\n+        .filter(e -> e.getTagName().startsWith(FABRIC8 + \".\"))\n+        .forEach(e -> document.renameNode(e, null, e.getNodeName()\n+            .replace(FABRIC8, JKUBE)\n+            .replace(PREFIX_FMP, PREFIX_JKUBE)\n+            .replace(PREFIX_F8, PREFIX_JKUBE)));\n+  }\n+\n+  private void replaceConfigurationTagNames(Element pluginNode) {\n+    try {\n+      final NodeList nodeList = XMLUtil.evaluateExpressionForItem(pluginNode, \"configuration//child::*\");\n+      stream(nodeList).map(Element.class::cast)\n+          .filter(e -> e.getTagName().startsWith(PREFIX_F8) || e.getTagName().startsWith(PREFIX_FMP))\n+          .forEach(e -> e.getOwnerDocument().renameNode(e, null, e.getNodeName()\n+              .replaceFirst(PREFIX_FMP, PREFIX_JKUBE)\n+              .replaceFirst(PREFIX_F8, PREFIX_JKUBE)));\n+    } catch (XPathExpressionException e) {\n+      logger.error(\"Could not replace configuration for plugin (%s)\", e.getMessage());\n     }\n-\n-    private void convertFMPNodeToJKube(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion, String parentXPathExpression) throws XPathExpressionException {\n-        Node fmpNode = XMLUtil.getNodeFromDocument(dom, parentXPathExpression + POM_PLUGIN_PATH + \"[artifactId='\" + FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID + \"']\");\n-        if (fmpNode != null) {\n-            Element fmpNodeElem = (Element) fmpNode;\n-            Node artifactNode = fmpNodeElem.getElementsByTagName(ARTIFACT_ID).item(0);\n-            Node groupNode = fmpNodeElem.getElementsByTagName(GROUP_ID).item(0);\n-            Node versionNode = fmpNodeElem.getElementsByTagName(VERSION).item(0);\n-            logger.info(\"Found Fabric8 Maven Plugin in pom with version \" + versionNode.getTextContent());\n-            groupNode.setTextContent(pluginGroupId);\n-            artifactNode.setTextContent(pluginArtifactId);\n-            versionNode.setTextContent(pluginVersion);\n-        }\n+  }\n+\n+  private void replaceConfigurationIncludesExcludes(Element pluginNode) {\n+    try {\n+    final NodeList nodeList = XMLUtil.evaluateExpressionForItem(pluginNode, \"(configuration//exclude|configuration//include)\");\n+    stream(nodeList).map(Element.class::cast)\n+        .filter(e -> e.getTextContent().startsWith(PREFIX_FMP) || e.getTextContent().startsWith(PREFIX_F8))\n+        .forEach(e -> e.setTextContent(e.getTextContent()\n+            .replaceFirst(PREFIX_FMP, PREFIX_JKUBE)\n+            .replaceFirst(PREFIX_F8, PREFIX_JKUBE)\n+        ));\n+    } catch (XPathExpressionException e) {\n+      logger.error(\"Could not replace configuration includes/excludes for plugin (%s)\", e.getMessage());\n     }\n-\n-    private void renameResourceFragmentDirectoryToJKube() {\n-        File resourceFragmentDir = getResourceFragmentDirectory(projectBasedir);\n-        if (resourceFragmentDir.exists()) {\n-            File jkubeResourceDir = new File(projectBasedir, DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n-            boolean isRenamed = resourceFragmentDir.renameTo(jkubeResourceDir);\n-            if (!isRenamed) {\n-                logger.warn(\"Unable to rename resource fragment directory in project\");\n-            } else {\n-                logger.info(\"Renamed \" + DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY + \" to \" + DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n-            }\n-        }\n-    }\n-\n-    private void modifyFMPPropertiesInsidePom(Document dom) throws XPathExpressionException {\n-        Node propertiesNode = XMLUtil.getNodeFromDocument(dom, POM_PROJECT_PATH + POM_PROPERTIES_PATH);\n-        if (propertiesNode != null) {\n-            NodeList nodeList = propertiesNode.getChildNodes();\n-            for (int i = 0; i < nodeList.getLength(); i++) {\n-                Node property = nodeList.item(i);\n-                if (property.getNodeName().contains(FABRIC8)) {\n-                    String nodeName = property.getNodeName();\n-                    nodeName = nodeName.replace(FABRIC8, JKUBE);\n-                    dom.renameNode(property, null, nodeName);\n-                }\n-            }\n-        }\n+  }\n+\n+  private static BiConsumer<String, String> replaceChildNodeValues(Element element) {\n+    return (tagName, newValue) -> stream(element.getElementsByTagName(tagName)).forEach(n -> n.setTextContent(newValue));\n+  }\n+\n+  private void renameResourceFragmentDirectoryToJKube() {\n+    File fabric8FragmentDirectory = getFabric8ResourceFragmentDirectory(projectBasedir);\n+    if (fabric8FragmentDirectory.exists()) {\n+      File jkubeResourceDir = new File(projectBasedir, DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+      try {\n+        FileUtils.copyDirectory(fabric8FragmentDirectory, jkubeResourceDir);\n+        FileUtils.deleteDirectory(fabric8FragmentDirectory);\n+        logger.info(\"Renamed \" + DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY + \" to \" + DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+      } catch(IOException ex) {\n+        logger.warn(\"Unable to rename resource fragment directory in project: %s\", ex.getMessage());\n+      }\n     }\n+  }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MDU0MQ==", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433840541", "body": "These urls can be converted into an array of strings and then we can use a loop for setting them here..\r\n\r\nbetter than hardcoding", "bodyText": "These urls can be converted into an array of strings and then we can use a loop for setting them here..\nbetter than hardcoding", "bodyHTML": "<p dir=\"auto\">These urls can be converted into an array of strings and then we can use a loop for setting them here..</p>\n<p dir=\"auto\">better than hardcoding</p>", "author": "dev-gaur", "createdAt": "2020-06-02T12:35:16Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class XMLUtil {\n+    private XMLUtil() { }\n+\n+    public static Document createNewDocument() throws ParserConfigurationException {\n+        DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n+        return documentBuilderFactory.newDocumentBuilder().newDocument();\n+    }\n+\n+    public static Document readXML(File xmlFile) throws ParserConfigurationException, IOException, SAXException {\n+        DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n+\n+        return documentBuilder.parse(xmlFile);\n+    }\n+\n+    public static void writeXML(Document document, File xmlFile) throws TransformerException {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+        Transformer transformer = transformerFactory.newTransformer();\n+        document.setXmlStandalone(true);\n+        DOMSource source = new DOMSource(document);\n+        StreamResult result = new StreamResult(xmlFile);\n+        transformer.transform(source, result);\n+    }\n+\n+    public static Node getNodeFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (Node) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.NODE);\n+    }\n+\n+    public static String getNodeValueFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (String) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.STRING);\n+    }\n+\n+    private static DocumentBuilderFactory getDocumentBuilderFactory() throws ParserConfigurationException {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);", "originalCommit": "d320ad3d018e78385bc0f75b393758052353810b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c916f9e76566e8d2bc0721156742bd04bf5161a", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\nindex 11f40362..0ce255f9 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n", "chunk": "@@ -77,10 +84,9 @@ public class XMLUtil {\n         documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n-        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n-        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", false);\n-        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n-        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+        for (String feature : featuresToDisable) {\n+            documentBuilderFactory.setFeature(feature, false);\n+        }\n         documentBuilderFactory.setXIncludeAware(false);\n         documentBuilderFactory.setExpandEntityReferences(false);\n         return documentBuilderFactory;\n", "next_change": {"commit": "fe0a1d88ce6ac5f5e8f64d470c8a134f66b9bc60", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\nindex 0ce255f9..a5cbbd6c 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java\n", "chunk": "@@ -84,7 +92,7 @@ public class XMLUtil {\n         documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n         documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n-        for (String feature : featuresToDisable) {\n+        for (String feature : DISABLED_FEATURES) {\n             documentBuilderFactory.setFeature(feature, false);\n         }\n         documentBuilderFactory.setXIncludeAware(false);\n", "next_change": null}]}}]}}, {"oid": "319b89034c27d0d3d44ae5a1b15a202aad2df58a", "url": "https://github.com/eclipse/jkube/commit/319b89034c27d0d3d44ae5a1b15a202aad2df58a", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-02T14:01:06Z", "type": "forcePushed"}, {"oid": "81d5c86c12fb6593135e104c1c4745c6a5707f75", "url": "https://github.com/eclipse/jkube/commit/81d5c86c12fb6593135e104c1c4745c6a5707f75", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-17T08:23:34Z", "type": "forcePushed"}, {"oid": "ad7b9c81f1e3413ce5145d2a8ad683844dba9dc2", "url": "https://github.com/eclipse/jkube/commit/ad7b9c81f1e3413ce5145d2a8ad683844dba9dc2", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-19T06:13:58Z", "type": "forcePushed"}, {"oid": "eac829b99f58efa234d631c00b1c6e3c3517683b", "url": "https://github.com/eclipse/jkube/commit/eac829b99f58efa234d631c00b1c6e3c3517683b", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-19T13:41:47Z", "type": "commit"}, {"oid": "eac829b99f58efa234d631c00b1c6e3c3517683b", "url": "https://github.com/eclipse/jkube/commit/eac829b99f58efa234d631c00b1c6e3c3517683b", "message": "Fix #195: Added MigrateMojo for migrating projects from FMP", "committedDate": "2020-06-19T13:41:47Z", "type": "forcePushed"}]}