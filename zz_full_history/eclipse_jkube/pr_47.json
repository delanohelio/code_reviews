{"pr_number": 47, "pr_title": "Refactor Jkube-kit in order to be independent from maven", "pr_author": "rohanKanojia", "pr_createdAt": "2020-01-23T14:02:44Z", "pr_url": "https://github.com/eclipse/jkube/pull/47", "timeline": [{"oid": "a6e8f43f3fc8614fc92f19bc713a9539ac2a2341", "url": "https://github.com/eclipse/jkube/commit/a6e8f43f3fc8614fc92f19bc713a9539ac2a2341", "message": "Added tests and license headers to new files", "committedDate": "2020-01-24T10:34:51Z", "type": "forcePushed"}, {"oid": "d32406d1c4e9e99db67ceed718058009d59679cf", "url": "https://github.com/eclipse/jkube/commit/d32406d1c4e9e99db67ceed718058009d59679cf", "message": "Added tests and license headers to new files", "committedDate": "2020-01-24T10:55:10Z", "type": "forcePushed"}, {"oid": "5f298b8ca7d28f37feeb5a0e94f3e3587e54e3ec", "url": "https://github.com/eclipse/jkube/commit/5f298b8ca7d28f37feeb5a0e94f3e3587e54e3ec", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-28T16:31:59Z", "type": "forcePushed"}, {"oid": "775ff6fe877c1c411c2a4f7894a25615c08ce8b5", "url": "https://github.com/eclipse/jkube/commit/775ff6fe877c1c411c2a4f7894a25615c08ce8b5", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T08:36:40Z", "type": "forcePushed"}, {"oid": "907c70c47a998bf0d2eb7f842d6d6baf5c1e0575", "url": "https://github.com/eclipse/jkube/commit/907c70c47a998bf0d2eb7f842d6d6baf5c1e0575", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T09:01:21Z", "type": "forcePushed"}, {"oid": "af3f98d62daa922652fb8f8e32d22a37f2fe0f5b", "url": "https://github.com/eclipse/jkube/commit/af3f98d62daa922652fb8f8e32d22a37f2fe0f5b", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T13:36:16Z", "type": "forcePushed"}, {"oid": "8b85de7f4dd79183f251dc761a0ede936f21a01a", "url": "https://github.com/eclipse/jkube/commit/8b85de7f4dd79183f251dc761a0ede936f21a01a", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T13:46:02Z", "type": "forcePushed"}, {"oid": "8075f70d8dc65552321943a76a19a16241f2a9cf", "url": "https://github.com/eclipse/jkube/commit/8075f70d8dc65552321943a76a19a16241f2a9cf", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T14:28:52Z", "type": "forcePushed"}, {"oid": "4e1964a6a932292ca10532421efa554dee4df063", "url": "https://github.com/eclipse/jkube/commit/4e1964a6a932292ca10532421efa554dee4df063", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T15:00:38Z", "type": "forcePushed"}, {"oid": "5e7d7f9b79840c232f64a14d2e356872a54ecdbe", "url": "https://github.com/eclipse/jkube/commit/5e7d7f9b79840c232f64a14d2e356872a54ecdbe", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-01-29T16:18:59Z", "type": "forcePushed"}, {"oid": "c2917a7cd0bb744a2975fe6aaed317efe9b64bb1", "url": "https://github.com/eclipse/jkube/commit/c2917a7cd0bb744a2975fe6aaed317efe9b64bb1", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-05T16:28:34Z", "type": "forcePushed"}, {"oid": "77df4eb0d5ac67990c2d3cca2198448fa64a0bec", "url": "https://github.com/eclipse/jkube/commit/77df4eb0d5ac67990c2d3cca2198448fa64a0bec", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-05T16:53:23Z", "type": "forcePushed"}, {"oid": "2bac133c12ab1f9ff58f8eb67f11b2a9cae630ec", "url": "https://github.com/eclipse/jkube/commit/2bac133c12ab1f9ff58f8eb67f11b2a9cae630ec", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-06T06:36:20Z", "type": "forcePushed"}, {"oid": "333e8cd3b063bf1e31bd239cb30fa69e1ed75022", "url": "https://github.com/eclipse/jkube/commit/333e8cd3b063bf1e31bd239cb30fa69e1ed75022", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-06T06:53:27Z", "type": "forcePushed"}, {"oid": "9d671adab235f782554a7218c29a1dd56b163ebb", "url": "https://github.com/eclipse/jkube/commit/9d671adab235f782554a7218c29a1dd56b163ebb", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-06T15:03:07Z", "type": "forcePushed"}, {"oid": "4dc9817840aea5aa51a04e219177e325ad8a4f63", "url": "https://github.com/eclipse/jkube/commit/4dc9817840aea5aa51a04e219177e325ad8a4f63", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-06T16:54:17Z", "type": "forcePushed"}, {"oid": "d7971b2bd439f81060f8bb3292ea5b70ed670587", "url": "https://github.com/eclipse/jkube/commit/d7971b2bd439f81060f8bb3292ea5b70ed670587", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-07T08:37:27Z", "type": "forcePushed"}, {"oid": "c89d2a81b1afd6d022dc8b41b32d12a290cb4a56", "url": "https://github.com/eclipse/jkube/commit/c89d2a81b1afd6d022dc8b41b32d12a290cb4a56", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-08T08:10:14Z", "type": "forcePushed"}, {"oid": "9515ecf990e43b97c0012fc5d768e88272d7655b", "url": "https://github.com/eclipse/jkube/commit/9515ecf990e43b97c0012fc5d768e88272d7655b", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-08T09:50:49Z", "type": "forcePushed"}, {"oid": "b561cc155d6f570c5a4f3a551e8d4bba6efd05aa", "url": "https://github.com/eclipse/jkube/commit/b561cc155d6f570c5a4f3a551e8d4bba6efd05aa", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-09T08:57:40Z", "type": "forcePushed"}, {"oid": "7e367f1063a4765f4c92a04b4e8ff6077075f758", "url": "https://github.com/eclipse/jkube/commit/7e367f1063a4765f4c92a04b4e8ff6077075f758", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-09T09:12:23Z", "type": "forcePushed"}, {"oid": "585f7c1573b08d22af20cf5c37c704b9f9ed8f09", "url": "https://github.com/eclipse/jkube/commit/585f7c1573b08d22af20cf5c37c704b9f9ed8f09", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-10T06:10:01Z", "type": "forcePushed"}, {"oid": "a410ae3e58ffb509255f70dbc4bd72daa2468549", "url": "https://github.com/eclipse/jkube/commit/a410ae3e58ffb509255f70dbc4bd72daa2468549", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-10T09:11:00Z", "type": "forcePushed"}, {"oid": "53c6b9f0345885ab603921d903a13557a5ef1567", "url": "https://github.com/eclipse/jkube/commit/53c6b9f0345885ab603921d903a13557a5ef1567", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-10T15:36:55Z", "type": "forcePushed"}, {"oid": "dfbc8d7033331f00e8bf074fdfdc8fd8ddcc33d3", "url": "https://github.com/eclipse/jkube/commit/dfbc8d7033331f00e8bf074fdfdc8fd8ddcc33d3", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-12T08:55:30Z", "type": "forcePushed"}, {"oid": "879263f306a5dbf708285ceb63f9cb130a81a052", "url": "https://github.com/eclipse/jkube/commit/879263f306a5dbf708285ceb63f9cb130a81a052", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-12T14:56:45Z", "type": "forcePushed"}, {"oid": "3949f5254cdefc09036c8cb4c68c50ce1e510668", "url": "https://github.com/eclipse/jkube/commit/3949f5254cdefc09036c8cb4c68c50ce1e510668", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-12T17:27:54Z", "type": "forcePushed"}, {"oid": "fc2d1e431ec590d9710e60986493dab5e1be87b1", "url": "https://github.com/eclipse/jkube/commit/fc2d1e431ec590d9710e60986493dab5e1be87b1", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-13T06:39:35Z", "type": "forcePushed"}, {"oid": "261d7fd226bef512a87c936706c2b473df7518fb", "url": "https://github.com/eclipse/jkube/commit/261d7fd226bef512a87c936706c2b473df7518fb", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-13T07:05:30Z", "type": "forcePushed"}, {"oid": "39850fcbbc123d4c5cd93de9002b40538841cd7d", "url": "https://github.com/eclipse/jkube/commit/39850fcbbc123d4c5cd93de9002b40538841cd7d", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-14T08:55:51Z", "type": "forcePushed"}, {"oid": "7433ec037e8fd57d2d63c058d2fdc07b35398b2e", "url": "https://github.com/eclipse/jkube/commit/7433ec037e8fd57d2d63c058d2fdc07b35398b2e", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-15T06:22:09Z", "type": "forcePushed"}, {"oid": "afcde517bad8b09538f8f93bf28cfcd5f95949a9", "url": "https://github.com/eclipse/jkube/commit/afcde517bad8b09538f8f93bf28cfcd5f95949a9", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-15T06:38:21Z", "type": "forcePushed"}, {"oid": "749a4e2b44c69a73fad0da2c74a49822f495e640", "url": "https://github.com/eclipse/jkube/commit/749a4e2b44c69a73fad0da2c74a49822f495e640", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-15T09:56:55Z", "type": "forcePushed"}, {"oid": "5cec28de21bf92ce697c4af68a63a253410202c1", "url": "https://github.com/eclipse/jkube/commit/5cec28de21bf92ce697c4af68a63a253410202c1", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-15T10:02:05Z", "type": "forcePushed"}, {"oid": "c60343fae7ed7fe84890537c11d0f77412fb0d6c", "url": "https://github.com/eclipse/jkube/commit/c60343fae7ed7fe84890537c11d0f77412fb0d6c", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-18T07:05:04Z", "type": "forcePushed"}, {"oid": "bcd808a52e2faf0d7d90d66f7c5266166e2c6dea", "url": "https://github.com/eclipse/jkube/commit/bcd808a52e2faf0d7d90d66f7c5266166e2c6dea", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-20T11:58:01Z", "type": "forcePushed"}, {"oid": "94f32674c605569459c8fda0ea16ff078b584cf0", "url": "https://github.com/eclipse/jkube/commit/94f32674c605569459c8fda0ea16ff078b584cf0", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-20T12:17:52Z", "type": "forcePushed"}, {"oid": "85eb9574bbcabede7b467f0b0c90a4ace12c9fc4", "url": "https://github.com/eclipse/jkube/commit/85eb9574bbcabede7b467f0b0c90a4ace12c9fc4", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-20T12:50:25Z", "type": "forcePushed"}, {"oid": "6e186a5d7c7e0f49d76f5477b48909916e2b4600", "url": "https://github.com/eclipse/jkube/commit/6e186a5d7c7e0f49d76f5477b48909916e2b4600", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-20T13:58:31Z", "type": "forcePushed"}, {"oid": "8daa3f3d3e07bb115cddf367808c69e53f8d9057", "url": "https://github.com/eclipse/jkube/commit/8daa3f3d3e07bb115cddf367808c69e53f8d9057", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-21T17:03:29Z", "type": "forcePushed"}, {"oid": "9b62653548ee1370a6bcf64384df27a57784aa6e", "url": "https://github.com/eclipse/jkube/commit/9b62653548ee1370a6bcf64384df27a57784aa6e", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-24T08:43:08Z", "type": "forcePushed"}, {"oid": "c5ac9ab75c8dae9c7a948bc92c76ec8d57f38eec", "url": "https://github.com/eclipse/jkube/commit/c5ac9ab75c8dae9c7a948bc92c76ec8d57f38eec", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-24T09:55:42Z", "type": "forcePushed"}, {"oid": "72a9f099e1e788bbd52608f6d120e35894d10ca5", "url": "https://github.com/eclipse/jkube/commit/72a9f099e1e788bbd52608f6d120e35894d10ca5", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-24T11:03:00Z", "type": "forcePushed"}, {"oid": "98aadd7a21746a6f5f1946b7d312b78241069168", "url": "https://github.com/eclipse/jkube/commit/98aadd7a21746a6f5f1946b7d312b78241069168", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-24T17:24:22Z", "type": "forcePushed"}, {"oid": "2bcbdd1425ae5977b188877a5e56d86ac316ef6c", "url": "https://github.com/eclipse/jkube/commit/2bcbdd1425ae5977b188877a5e56d86ac316ef6c", "message": "Decouple Docker build service from Maven\n\nThis is related to #30", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "1b751bad36cdffe58320ffe1c4fd5779e48f7978", "url": "https://github.com/eclipse/jkube/commit/1b751bad36cdffe58320ffe1c4fd5779e48f7978", "message": "Replace MavenProject with generic JkubeProject", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "5e20567178771c563e4f9d8373be71ee307cd9cb", "url": "https://github.com/eclipse/jkube/commit/5e20567178771c563e4f9d8373be71ee307cd9cb", "message": "Deleting unused classes in maven", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "5793c109dda08b6a876cdcc77c0adc0dc698927a", "url": "https://github.com/eclipse/jkube/commit/5793c109dda08b6a876cdcc77c0adc0dc698927a", "message": "Added tests and license headers to new files", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "25ceec1651d01a8be40c29fe3fc6dcf85f0e4644", "url": "https://github.com/eclipse/jkube/commit/25ceec1651d01a8be40c29fe3fc6dcf85f0e4644", "message": "Merged maven/ module inside service/", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "13fc431fdb4f2be201680943ef614ebe1d0140a4", "url": "https://github.com/eclipse/jkube/commit/13fc431fdb4f2be201680943ef614ebe1d0140a4", "message": "Removed Maven dependency from build api/ and service/", "committedDate": "2020-02-25T07:22:51Z", "type": "commit"}, {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "url": "https://github.com/eclipse/jkube/commit/ea7a738d493e96953c2f6ec07727a198ac3aa707", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-25T10:13:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxOTMxMA==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383919310", "body": "Add a private constructor so that we enforce the use of the singleton.", "bodyText": "Add a private constructor so that we enforce the use of the singleton.", "bodyHTML": "<p dir=\"auto\">Add a private constructor so that we enforce the use of the singleton.</p>", "author": "manusa", "createdAt": "2020-02-25T14:40:13Z", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java", "diffHunk": "@@ -76,17 +62,12 @@\n     public static final String DOCKER_INCLUDE = \".maven-dockerinclude\";\n     public static final String DOCKERFILE_NAME = \"Dockerfile\";\n \n-    @Requirement\n-    private AssemblyArchiver assemblyArchiver;\n-\n-    @Requirement\n-    private AssemblyReader assemblyReader;\n-\n-    @Requirement\n-    private ArchiverManager archiverManager;\n-\n-    @Requirement(hint = \"track\")\n-    private Archiver trackArchiver;\n+    public static DockerAssemblyManager getInstance() {\n+        if (dockerAssemblyManager == null) {\n+            dockerAssemblyManager = new DockerAssemblyManager();\n+        }\n+        return dockerAssemblyManager;\n+    }\n ", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08921b140bbdbfeab280704adcc9f4637ea0124c", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\nindex d290c99b..ec657e5d 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n", "chunk": "@@ -62,12 +75,17 @@ public class DockerAssemblyManager {\n     public static final String DOCKER_INCLUDE = \".maven-dockerinclude\";\n     public static final String DOCKERFILE_NAME = \"Dockerfile\";\n \n-    public static DockerAssemblyManager getInstance() {\n-        if (dockerAssemblyManager == null) {\n-            dockerAssemblyManager = new DockerAssemblyManager();\n-        }\n-        return dockerAssemblyManager;\n-    }\n+    @Requirement\n+    private AssemblyArchiver assemblyArchiver;\n+\n+    @Requirement\n+    private AssemblyReader assemblyReader;\n+\n+    @Requirement\n+    private ArchiverManager archiverManager;\n+\n+    @Requirement(hint = \"track\")\n+    private Archiver trackArchiver;\n \n     /**\n      * Create an docker tar archive from the given configuration which can be send to the Docker host for\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\nindex ec657e5d..1381f028 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n", "chunk": "@@ -75,17 +62,14 @@ public class DockerAssemblyManager {\n     public static final String DOCKER_INCLUDE = \".maven-dockerinclude\";\n     public static final String DOCKERFILE_NAME = \"Dockerfile\";\n \n-    @Requirement\n-    private AssemblyArchiver assemblyArchiver;\n+    private DockerAssemblyManager() { }\n \n-    @Requirement\n-    private AssemblyReader assemblyReader;\n-\n-    @Requirement\n-    private ArchiverManager archiverManager;\n-\n-    @Requirement(hint = \"track\")\n-    private Archiver trackArchiver;\n+    public static DockerAssemblyManager getInstance() {\n+        if (dockerAssemblyManager == null) {\n+            dockerAssemblyManager = new DockerAssemblyManager();\n+        }\n+        return dockerAssemblyManager;\n+    }\n \n     /**\n      * Create an docker tar archive from the given configuration which can be send to the Docker host for\n", "next_change": {"commit": "565739c3ba6310bd8b7d0a10e9cf3a6cac6aec3f", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\nindex 1381f028..d462e962 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n", "chunk": "@@ -76,25 +82,7 @@ public class DockerAssemblyManager {\n      * creating the image.\n      *\n      * @param imageName Name of the image to create (used for creating build directories)\n-     * @param params Mojos parameters (used for finding the directories)\n-     * @param buildConfig configuration for how to build the image\n-     * @param log KitLogger used to display warning if permissions are to be normalized\n-     * @return file holding the path to the created assembly tar file\n-     * @throws IOException IO exception\n-     */\n-    public File createDockerTarArchive(\n-            String imageName, JkubeBuildContext params, JkubeBuildConfiguration buildConfig, KitLogger log)\n-            throws IOException {\n-\n-        return createDockerTarArchive(imageName, params, buildConfig, log, null);\n-    }\n-\n-    /**\n-     * Create an docker tar archive from the given configuration which can be send to the Docker host for\n-     * creating the image.\n-     *\n-     * @param imageName Name of the image to create (used for creating build directories)\n-     * @param params Mojos parameters (used for finding the directories)\n+     * @param configuration Mojos parameters (used for finding the directories)\n      * @param buildConfig configuration for how to build the image\n      * @param log KitLogger used to display warning if permissions are to be normalized\n      * @param finalCustomizer finalCustomizer to be applied to the tar archive\n", "next_change": {"commit": "053e63e095222c26994984f73a4a4603f5489ef7", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java b/jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/assembly/AssemblyManager.java\nsimilarity index 82%\nrename from jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\nrename to jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/assembly/AssemblyManager.java\nindex d462e962..538dcf17 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java\n+++ b/jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/assembly/AssemblyManager.java\n", "chunk": "@@ -90,8 +84,8 @@ public class DockerAssemblyManager {\n      * @throws IOException IO exception\n      */\n     public File createDockerTarArchive(\n-        String imageName, final JKubeConfiguration configuration, final BuildConfiguration buildConfig, KitLogger log,\n-        ArchiverCustomizer finalCustomizer) throws IOException {\n+            String imageName, final JKubeConfiguration configuration, final BuildConfiguration buildConfig, KitLogger log,\n+            ArchiverCustomizer finalCustomizer) throws IOException {\n \n         final BuildDirs buildDirs = createBuildDirs(imageName, configuration);\n         final List<ArchiverCustomizer> archiveCustomizers = new ArrayList<>();\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNDE0Mw==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383924143", "body": "This looks really messy.\r\nI guess this is like this for deserialization?\r\nIn any case it would be good to have a proper POJO to represent this \"settings\" structure.", "bodyText": "This looks really messy.\nI guess this is like this for deserialization?\nIn any case it would be good to have a proper POJO to represent this \"settings\" structure.", "bodyHTML": "<p dir=\"auto\">This looks really messy.<br>\nI guess this is like this for deserialization?<br>\nIn any case it would be good to have a proper POJO to represent this \"settings\" structure.</p>", "author": "manusa", "createdAt": "2020-02-25T14:47:29Z", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java", "diffHunk": "@@ -210,8 +219,8 @@ public Builder registry(String registry) {\n                 return this;\n             }\n \n-            public Builder settings(Settings settings) {\n-                context.settings = settings;\n+            public Builder settings(Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> registryServerSettingsAsMap) {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99c53dcc012641bb7e99a3da30d9b1331b6d548e", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\nindex 293b5457..15b42caa 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n", "chunk": "@@ -219,7 +212,7 @@ public class RegistryService {\n                 return this;\n             }\n \n-            public Builder settings(Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> registryServerSettingsAsMap) {\n+            public Builder settings(Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Object>> registryServerSettingsAsMap) {\n                 context.settings = RegistryServerConfiguration.fetchListFromMap(registryServerSettingsAsMap);\n                 return this;\n             }\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\nindex 15b42caa..3a204e47 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n", "chunk": "@@ -212,8 +218,8 @@ public class RegistryService {\n                 return this;\n             }\n \n-            public Builder settings(Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Object>> registryServerSettingsAsMap) {\n-                context.settings = RegistryServerConfiguration.fetchListFromMap(registryServerSettingsAsMap);\n+            public Builder settings(List<RegistryServerConfiguration> registryServerConfigurations) {\n+                context.settings = registryServerConfigurations;\n                 return this;\n             }\n \n", "next_change": {"commit": "2c2d5da4a7ac43cb36094b57f9855ebf9f341d3d", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\nindex 3a204e47..31a6fc68 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n", "chunk": "@@ -150,103 +144,11 @@ public class RegistryService {\n     }\n \n     private AuthConfig createAuthConfig(boolean isPush, String user, String registry, RegistryConfig config)\n-            throws Exception {\n+            throws IOException {\n \n         return config.getAuthConfigFactory().createAuthConfig(\n             isPush, config.isSkipExtendedAuth(), config.getAuthConfig(),\n             config.getSettings(), user, registry, config.getPasswordDecryptionMethod());\n     }\n \n-    // ===========================================\n-\n-\n-    public static class RegistryConfig implements Serializable {\n-\n-        private String registry;\n-\n-        private List<RegistryServerConfiguration> settings;\n-\n-        private AuthConfigFactory authConfigFactory;\n-\n-        private boolean skipExtendedAuth;\n-\n-        private Map authConfig;\n-\n-        private transient UnaryOperator<String> passwordDecryptionMethod;\n-\n-        public RegistryConfig() {\n-        }\n-\n-        public String getRegistry() {\n-            return registry;\n-        }\n-\n-        public List<RegistryServerConfiguration> getSettings() {\n-            return settings;\n-        }\n-\n-        public AuthConfigFactory getAuthConfigFactory() {\n-            return authConfigFactory;\n-        }\n-\n-        public boolean isSkipExtendedAuth() {\n-            return skipExtendedAuth;\n-        }\n-\n-        public Map getAuthConfig() {\n-            return authConfig;\n-        }\n-\n-        public UnaryOperator<String> getPasswordDecryptionMethod() {\n-            return passwordDecryptionMethod;\n-        }\n-\n-        public static class Builder {\n-\n-            private RegistryConfig context = new RegistryConfig();\n-\n-            public Builder() {\n-                this.context = new RegistryConfig();\n-            }\n-\n-            public Builder(RegistryConfig context) {\n-                this.context = context;\n-            }\n-\n-            public Builder registry(String registry) {\n-                context.registry = registry;\n-                return this;\n-            }\n-\n-            public Builder settings(List<RegistryServerConfiguration> registryServerConfigurations) {\n-                context.settings = registryServerConfigurations;\n-                return this;\n-            }\n-\n-            public Builder authConfigFactory(AuthConfigFactory authConfigFactory) {\n-                context.authConfigFactory = authConfigFactory;\n-                return this;\n-            }\n-\n-            public Builder skipExtendedAuth(boolean skipExtendedAuth) {\n-                context.skipExtendedAuth = skipExtendedAuth;\n-                return this;\n-            }\n-\n-            public Builder authConfig(Map authConfig) {\n-                context.authConfig = authConfig;\n-                return this;\n-            }\n-\n-            public Builder passwordDecryptionMethod(UnaryOperator<String> passwordDecrypt) {\n-                context.passwordDecryptionMethod =passwordDecrypt;\n-                return this;\n-            }\n-\n-            public RegistryConfig build() {\n-                return context;\n-            }\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "053e63e095222c26994984f73a4a4603f5489ef7", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\nindex 31a6fc68..2fc5121a 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java\n", "chunk": "@@ -146,7 +149,7 @@ public class RegistryService {\n     private AuthConfig createAuthConfig(boolean isPush, String user, String registry, RegistryConfig config)\n             throws IOException {\n \n-        return config.getAuthConfigFactory().createAuthConfig(\n+        return new AuthConfigFactory(log).createAuthConfig(\n             isPush, config.isSkipExtendedAuth(), config.getAuthConfig(),\n             config.getSettings(), user, registry, config.getPasswordDecryptionMethod());\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTk2Mg==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383925962", "body": "No need to add `throws IllegalStateException` it's a RuntimeException > remove from method signature.", "bodyText": "No need to add throws IllegalStateException it's a RuntimeException > remove from method signature.", "bodyHTML": "<p dir=\"auto\">No need to add <code>throws IllegalStateException</code> it's a RuntimeException &gt; remove from method signature.</p>", "author": "manusa", "createdAt": "2020-02-25T14:50:14Z", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "diffHunk": "@@ -328,15 +315,15 @@ private AuthConfig getAuthConfigFromSystemProperties(LookupMode lookupMode) thro\n                 throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n             }\n             return new AuthConfig(props.getProperty(userKey),\n-                                  decrypt(props.getProperty(passwordKey)),\n+                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         } else {\n             return null;\n         }\n     }\n \n-    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) throws MojoExecutionException {\n+    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) throws IllegalStateException {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99c53dcc012641bb7e99a3da30d9b1331b6d548e", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex d4773268..a8c37337 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -315,7 +324,7 @@ public class AuthConfigFactory {\n                 throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n             }\n             return new AuthConfig(props.getProperty(userKey),\n-                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n+                                  decrypt(props.getProperty(passwordKey)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         } else {\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex a8c37337..625197f0 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -324,7 +315,7 @@ public class AuthConfigFactory {\n                 throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n             }\n             return new AuthConfig(props.getProperty(userKey),\n-                                  decrypt(props.getProperty(passwordKey)),\n+                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         } else {\n", "next_change": {"commit": "053e63e095222c26994984f73a4a4603f5489ef7", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex 625197f0..b07f21e4 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -323,12 +316,12 @@ public class AuthConfigFactory {\n         }\n     }\n \n-    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n+    protected static AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n         Properties props = System.getProperties();\n         String useOpenAuthModeProp = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n         // Check for system property\n         if (props.containsKey(useOpenAuthModeProp)) {\n-            boolean useOpenShift = Boolean.valueOf(props.getProperty(useOpenAuthModeProp));\n+            boolean useOpenShift = Boolean.parseBoolean(props.getProperty(useOpenAuthModeProp));\n             if (useOpenShift) {\n                 return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeProp);\n             } else {\n", "next_change": {"commit": "682cc6f25ccf3e95e20832d1396fa3890f3a4e26", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex b07f21e4..8d0c5a24 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -300,30 +304,28 @@ public class AuthConfigFactory {\n     }\n \n     protected static AuthConfig getAuthConfigFromSystemProperties(LookupMode lookupMode, UnaryOperator<String> passwordDecryptionMethod) throws IOException {\n-        Properties props = System.getProperties();\n-        String userKey = lookupMode.asSysProperty(AUTH_USERNAME);\n-        String passwordKey = lookupMode.asSysProperty(AUTH_PASSWORD);\n-        if (props.containsKey(userKey)) {\n-            if (!props.containsKey(passwordKey)) {\n-                throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n-            }\n-            return new AuthConfig(props.getProperty(userKey),\n-                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n-                                  props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n-                                  props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n-        } else {\n-            return null;\n+        final String passwordKey = lookupMode.asSysProperty(AUTH_PASSWORD);\n+        final String username = System.getProperty(lookupMode.asSysProperty(AUTH_USERNAME));\n+        final String password = System.getProperty(passwordKey);\n+        if (StringUtils.isNotBlank(username) && StringUtils.isBlank(password)) {\n+            throw new IOException(\"No \" + passwordKey + \" provided for username \" + username);\n+        } else if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n+            return new AuthConfig(username,\n+                passwordDecryptionMethod.apply(password),\n+                System.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n+                System.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         }\n+        return null;\n     }\n \n     protected static AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n-        Properties props = System.getProperties();\n-        String useOpenAuthModeProp = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n+        final String useOpenAuthModeKey = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n+        final String useOpenAuthMode = System.getProperty(useOpenAuthModeKey);\n         // Check for system property\n-        if (props.containsKey(useOpenAuthModeProp)) {\n-            boolean useOpenShift = Boolean.parseBoolean(props.getProperty(useOpenAuthModeProp));\n+        if (StringUtils.isNotBlank(useOpenAuthMode)) {\n+            boolean useOpenShift = Boolean.parseBoolean(useOpenAuthMode);\n             if (useOpenShift) {\n-                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeProp);\n+                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeKey);\n             } else {\n                 return null;\n             }\n", "next_change": {"commit": "17ada413b53017ce446da3326ef1a5ff31d48e43", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex 8d0c5a24..c61cdb15 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -325,7 +358,7 @@ public class AuthConfigFactory {\n         if (StringUtils.isNotBlank(useOpenAuthMode)) {\n             boolean useOpenShift = Boolean.parseBoolean(useOpenAuthMode);\n             if (useOpenShift) {\n-                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeKey);\n+                return validateMandatoryOpenShiftLogin(readKubeConfigAuth(), useOpenAuthModeKey);\n             } else {\n                 return null;\n             }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex a8c37337..625197f0 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -332,7 +323,7 @@ public class AuthConfigFactory {\n         }\n     }\n \n-    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) throws IllegalStateException {\n+    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n         Properties props = System.getProperties();\n         String useOpenAuthModeProp = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n         // Check for system property\n", "next_change": {"commit": "053e63e095222c26994984f73a4a4603f5489ef7", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex 625197f0..b07f21e4 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -323,12 +316,12 @@ public class AuthConfigFactory {\n         }\n     }\n \n-    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n+    protected static AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n         Properties props = System.getProperties();\n         String useOpenAuthModeProp = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n         // Check for system property\n         if (props.containsKey(useOpenAuthModeProp)) {\n-            boolean useOpenShift = Boolean.valueOf(props.getProperty(useOpenAuthModeProp));\n+            boolean useOpenShift = Boolean.parseBoolean(props.getProperty(useOpenAuthModeProp));\n             if (useOpenShift) {\n                 return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeProp);\n             } else {\n", "next_change": {"commit": "682cc6f25ccf3e95e20832d1396fa3890f3a4e26", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex b07f21e4..8d0c5a24 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -300,30 +304,28 @@ public class AuthConfigFactory {\n     }\n \n     protected static AuthConfig getAuthConfigFromSystemProperties(LookupMode lookupMode, UnaryOperator<String> passwordDecryptionMethod) throws IOException {\n-        Properties props = System.getProperties();\n-        String userKey = lookupMode.asSysProperty(AUTH_USERNAME);\n-        String passwordKey = lookupMode.asSysProperty(AUTH_PASSWORD);\n-        if (props.containsKey(userKey)) {\n-            if (!props.containsKey(passwordKey)) {\n-                throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n-            }\n-            return new AuthConfig(props.getProperty(userKey),\n-                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n-                                  props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n-                                  props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n-        } else {\n-            return null;\n+        final String passwordKey = lookupMode.asSysProperty(AUTH_PASSWORD);\n+        final String username = System.getProperty(lookupMode.asSysProperty(AUTH_USERNAME));\n+        final String password = System.getProperty(passwordKey);\n+        if (StringUtils.isNotBlank(username) && StringUtils.isBlank(password)) {\n+            throw new IOException(\"No \" + passwordKey + \" provided for username \" + username);\n+        } else if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n+            return new AuthConfig(username,\n+                passwordDecryptionMethod.apply(password),\n+                System.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n+                System.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         }\n+        return null;\n     }\n \n     protected static AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) {\n-        Properties props = System.getProperties();\n-        String useOpenAuthModeProp = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n+        final String useOpenAuthModeKey = lookupMode.asSysProperty(AUTH_USE_OPENSHIFT_AUTH);\n+        final String useOpenAuthMode = System.getProperty(useOpenAuthModeKey);\n         // Check for system property\n-        if (props.containsKey(useOpenAuthModeProp)) {\n-            boolean useOpenShift = Boolean.parseBoolean(props.getProperty(useOpenAuthModeProp));\n+        if (StringUtils.isNotBlank(useOpenAuthMode)) {\n+            boolean useOpenShift = Boolean.parseBoolean(useOpenAuthMode);\n             if (useOpenShift) {\n-                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeProp);\n+                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeKey);\n             } else {\n                 return null;\n             }\n", "next_change": {"commit": "17ada413b53017ce446da3326ef1a5ff31d48e43", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex 8d0c5a24..c61cdb15 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -325,7 +358,7 @@ public class AuthConfigFactory {\n         if (StringUtils.isNotBlank(useOpenAuthMode)) {\n             boolean useOpenShift = Boolean.parseBoolean(useOpenAuthMode);\n             if (useOpenShift) {\n-                return validateMandatoryOpenShiftLogin(parseOpenShiftConfig(), useOpenAuthModeKey);\n+                return validateMandatoryOpenShiftLogin(readKubeConfigAuth(), useOpenAuthModeKey);\n             } else {\n                 return null;\n             }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNjM3OQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383926379", "body": "Remove `IllegalStateException`from method signature", "bodyText": "Remove IllegalStateExceptionfrom method signature", "bodyHTML": "<p dir=\"auto\">Remove <code>IllegalStateException</code>from method signature</p>", "author": "manusa", "createdAt": "2020-02-25T14:50:54Z", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "diffHunk": "@@ -520,21 +507,21 @@ private AuthConfig parseUser(String userName, Map user) {\n                               token, null, null);\n     }\n \n-    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) throws MojoExecutionException {\n+    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) throws IllegalStateException {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex d4773268..625197f0 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -507,7 +507,7 @@ public class AuthConfigFactory {\n                               token, null, null);\n     }\n \n-    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) throws IllegalStateException {\n+    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) {\n         if (openShiftAuthConfig != null) {\n             return openShiftAuthConfig;\n         }\n", "next_change": {"commit": "053e63e095222c26994984f73a4a4603f5489ef7", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex 625197f0..b07f21e4 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -507,7 +502,7 @@ public class AuthConfigFactory {\n                               token, null, null);\n     }\n \n-    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) {\n+    private static AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) {\n         if (openShiftAuthConfig != null) {\n             return openShiftAuthConfig;\n         }\n", "next_change": {"commit": "17ada413b53017ce446da3326ef1a5ff31d48e43", "changed_code": [{"header": "diff --git a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\nindex b07f21e4..c61cdb15 100644\n--- a/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n+++ b/jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java\n", "chunk": "@@ -431,75 +466,119 @@ public class AuthConfigFactory {\n         return null;\n     }\n \n-    // =======================================================================================================\n-\n-    private static Map<String, String> getAuthConfigMapToCheck(LookupMode lookupMode, Map<?, ?> authConfigMap) {\n-        String configMapKey = lookupMode.getConfigMapKey();\n-        if (configMapKey == null) {\n-            return (Map<String, String>)authConfigMap;\n+    // if the local credentials don't contain user and password & is not a EC2 instance,\n+    // use ECS|Fargate Task instance role credentials\n+    private static AuthConfig getAuthConfigFromTaskRole(AwsSdkHelper awsSdkHelper, KitLogger log) throws IOException {\n+        log.debug(\"No user and password set for ECR, checking ECS Task role\");\n+        URI uri = getMetadataEndpointForCredentials(awsSdkHelper, log);\n+        if (uri == null) {\n+            return null;\n         }\n-        if (authConfigMap != null) {\n-            return (Map<String, String>)authConfigMap.get(configMapKey);\n+        // get temporary credentials\n+        log.debug(\"Getting temporary security credentials from: %s\", uri);\n+        try (CloseableHttpClient client = HttpClients.custom().useSystemProperties().build()) {\n+            RequestConfig conf =\n+                    RequestConfig.custom().setConnectionRequestTimeout(1000).setConnectTimeout(1000)\n+                            .setSocketTimeout(1000).build();\n+            HttpGet request = new HttpGet(uri);\n+            request.setConfig(conf);\n+            return readAwsCredentials(client, request, log);\n         }\n-        return null;\n     }\n \n-    // Parse OpenShift config to get credentials, but return null if not found\n-    private static AuthConfig parseOpenShiftConfig() {\n-        Map kubeConfig = DockerFileUtil.readKubeConfig();\n-        if (kubeConfig == null) {\n-            return null;\n-        }\n \n-        String currentContextName = (String) kubeConfig.get(\"current-context\");\n-        if (currentContextName == null) {\n-            return null;\n-        }\n+    private static AuthConfig readAwsCredentials(CloseableHttpClient client, HttpGet request, KitLogger log) throws IOException {\n+        try (CloseableHttpResponse response = client.execute(request)) {\n+            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n+                log.debug(\"No security credential found, return code was %d\",\n+                        response.getStatusLine().getStatusCode());\n+                // no instance role found\n+                return null;\n+            }\n \n-        for (Map contextMap : (List<Map>) kubeConfig.get(\"contexts\")) {\n-            if (currentContextName.equals(contextMap.get(\"name\"))) {\n-                return parseContext(kubeConfig, (Map) contextMap.get(\"context\"));\n+            // read instance role\n+            try (Reader r = new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)) {\n+                JsonObject securityCredentials = new Gson().fromJson(r, JsonObject.class);\n+\n+                String user = securityCredentials.getAsJsonPrimitive(\"AccessKeyId\").getAsString();\n+                String password = securityCredentials.getAsJsonPrimitive(\"SecretAccessKey\").getAsString();\n+                String token = securityCredentials.getAsJsonPrimitive(\"Token\").getAsString();\n+\n+                log.debug(\"Received temporary access key %s...\", user.substring(0, 8));\n+                return AuthConfig.builder()\n+                        .username(user)\n+                        .password(password)\n+                        .email(\"none\")\n+                        .auth(token)\n+                        .build();\n             }\n         }\n-\n-        return null;\n     }\n \n-    private static AuthConfig parseContext(Map kubeConfig, Map context) {\n-        if (context == null) {\n+    private static URI getMetadataEndpointForCredentials(AwsSdkHelper awsSdkHelper, KitLogger log) {\n+        // get ECS task role - if available\n+        String awsContainerCredentialsUri = awsSdkHelper.getAwsContainerCredentialsRelativeUri();\n+        if (awsContainerCredentialsUri == null) {\n+            log.debug(\"System environment not set for variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, no task role found\");\n             return null;\n         }\n-        String userName = (String) context.get(\"user\");\n-        if (userName == null) {\n-            return null;\n+        if (awsContainerCredentialsUri.charAt(0) != '/') {\n+            awsContainerCredentialsUri = \"/\" + awsContainerCredentialsUri;\n         }\n \n-        List<Map> users = (List<Map>) kubeConfig.get(\"users\");\n-        if (users == null) {\n+        try {\n+            return new URI(awsSdkHelper.getEcsMetadataEndpoint() + awsContainerCredentialsUri);\n+        } catch (URISyntaxException e) {\n+            log.warn(\"Failed to construct path to ECS metadata endpoint for credentials\", e);\n             return null;\n         }\n+    }\n \n-        for (Map userMap : users) {\n-            if (userName.equals(userMap.get(\"name\"))) {\n-                return parseUser(userName, (Map) userMap.get(\"user\"));\n-            }\n+    private static AuthConfig getAuthConfigViaAwsSdk(AwsSdkHelper awsSdkHelper, KitLogger log) {\n+        boolean credProviderPresent = awsSdkHelper.isDefaultAWSCredentialsProviderChainPresentInClassPath();\n+        if (!credProviderPresent) {\n+            log.info(\"It appears that you're using AWS ECR.\" +\n+                    \" Consider integrating the AWS SDK in order to make use of common AWS authentication mechanisms,\" +\n+                    \" see https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#extended-authentication\");\n+            return null;\n         }\n-        return null;\n+        return new AwsSdkAuthConfigFactory(log, awsSdkHelper).createAuthConfig();\n     }\n \n-    private static AuthConfig parseUser(String userName, Map user) {\n-        if (user == null) {\n+    /**\n+     * Try using the AWS credentials provided via ENV variables.\n+     * See https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html\n+     */\n+    private static AuthConfig getAuthConfigFromAwsEnvironmentVariables(AwsSdkHelper awsSdkHelper, KitLogger log) {\n+        String accessKeyId = awsSdkHelper.getAwsAccessKeyIdEnvVar();\n+        if (accessKeyId == null) {\n+            log.debug(\"System environment not set for variable AWS_ACCESS_KEY_ID, no AWS credentials found\");\n             return null;\n         }\n-        String token = (String) user.get(\"token\");\n-        if (token == null) {\n+        String secretAccessKey = awsSdkHelper.getAwsSecretAccessKeyEnvVar();\n+        if (secretAccessKey == null) {\n+            log.warn(\"System environment set for variable AWS_ACCESS_KEY_ID, but NOT for variable AWS_SECRET_ACCESS_KEY!\");\n             return null;\n         }\n+        return AuthConfig.builder()\n+                .username(accessKeyId)\n+                .password(secretAccessKey)\n+                .email(\"none\")\n+                .auth(awsSdkHelper.getAwsSessionTokenEnvVar())\n+                .build();\n+    }\n \n-        // Strip off stuff after username\n-        Matcher matcher = Pattern.compile(\"^([^/]+).*$\").matcher(userName);\n-        return new AuthConfig(matcher.matches() ? matcher.group(1) : userName,\n-                              token, null, null);\n+    // =======================================================================================================\n+\n+    private static Map<String, String> getAuthConfigMapToCheck(LookupMode lookupMode, Map<?, ?> authConfigMap) {\n+        String configMapKey = lookupMode.getConfigMapKey();\n+        if (configMapKey == null) {\n+            return (Map<String, String>)authConfigMap;\n+        }\n+        if (authConfigMap != null) {\n+            return (Map<String, String>)authConfigMap.get(configMapKey);\n+        }\n+        return null;\n     }\n \n     private static AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjUyMw==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383936523", "body": "Please, name static constants in Uppercase.\r\n\r\n[These](https://www.oracle.com/technetwork/java/codeconventions-135099.html) the most basic language coding conventions used across any Java code-base. It's very important to name things following this foundation guidelines as when we Java coders read code with certain letter-case we assume the named entity is a class, package, instance, constant, etc.", "bodyText": "Please, name static constants in Uppercase.\nThese the most basic language coding conventions used across any Java code-base. It's very important to name things following this foundation guidelines as when we Java coders read code with certain letter-case we assume the named entity is a class, package, instance, constant, etc.", "bodyHTML": "<p dir=\"auto\">Please, name static constants in Uppercase.</p>\n<p dir=\"auto\"><a href=\"https://www.oracle.com/technetwork/java/codeconventions-135099.html\" rel=\"nofollow\">These</a> the most basic language coding conventions used across any Java code-base. It's very important to name things following this foundation guidelines as when we Java coders read code with certain letter-case we assume the named entity is a class, package, instance, constant, etc.</p>", "author": "manusa", "createdAt": "2020-02-25T15:05:33Z", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java", "diffHunk": "@@ -49,15 +49,13 @@\n     private List<LogVerboseCategory> verboseModes = null;\n \n     // ANSI escapes for various colors (or empty strings if no coloring is used)\n-    static Ansi.Color\n-            COLOR_ERROR = RED,\n-            COLOR_INFO = GREEN,\n-            COLOR_WARNING = YELLOW,\n-            COLOR_PROGRESS_ID = YELLOW,\n-            COLOR_PROGRESS_STATUS = GREEN,\n-            COLOR_PROGRESS_BAR = CYAN,\n-            COLOR_EMPHASIS = BLUE;\n-\n+    static Ansi.Color error = RED;", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\nindex 33e8b97e..2895fbda 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n", "chunk": "@@ -49,13 +49,15 @@ public class AnsiLogger implements KitLogger {\n     private List<LogVerboseCategory> verboseModes = null;\n \n     // ANSI escapes for various colors (or empty strings if no coloring is used)\n-    static Ansi.Color error = RED;\n-    static Ansi.Color info = GREEN;\n-    static Ansi.Color warning = YELLOW;\n-    static Ansi.Color progressId = YELLOW;\n-    static Ansi.Color progressStatus = GREEN;\n-    static Ansi.Color progressBar = CYAN;\n-    static Ansi.Color emphasis = BLUE;\n+    static Ansi.Color\n+            COLOR_ERROR = RED,\n+            COLOR_INFO = GREEN,\n+            COLOR_WARNING = YELLOW,\n+            COLOR_PROGRESS_ID = YELLOW,\n+            COLOR_PROGRESS_STATUS = GREEN,\n+            COLOR_PROGRESS_BAR = CYAN,\n+            COLOR_EMPHASIS = BLUE;\n+\n \n     // Map remembering lines\n     private ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n", "next_change": {"commit": "3fb81820548fa0491a90ccc649adbecacd8c5fd3", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\nindex 2895fbda..ed3cf4ec 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n", "chunk": "@@ -49,15 +49,13 @@ public class AnsiLogger implements KitLogger {\n     private List<LogVerboseCategory> verboseModes = null;\n \n     // ANSI escapes for various colors (or empty strings if no coloring is used)\n-    static Ansi.Color\n-            COLOR_ERROR = RED,\n-            COLOR_INFO = GREEN,\n-            COLOR_WARNING = YELLOW,\n-            COLOR_PROGRESS_ID = YELLOW,\n-            COLOR_PROGRESS_STATUS = GREEN,\n-            COLOR_PROGRESS_BAR = CYAN,\n-            COLOR_EMPHASIS = BLUE;\n-\n+    static Ansi.Color ERROR = RED;\n+    static Ansi.Color INFO = GREEN;\n+    static Ansi.Color WARNING = YELLOW;\n+    static Ansi.Color PROGRESS_ID = YELLOW;\n+    static Ansi.Color PROGRESS_STATUS = GREEN;\n+    static Ansi.Color PROGRESS_BAR = CYAN;\n+    static Ansi.Color EMPHASIS = BLUE;\n \n     // Map remembering lines\n     private ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n", "next_change": {"commit": "d3f2c7ca10d4bd9d148c3e221a9f2666f7a16001", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\nindex ed3cf4ec..f84726d1 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n", "chunk": "@@ -48,18 +56,9 @@ public class AnsiLogger implements KitLogger {\n     private boolean isVerbose = false;\n     private List<LogVerboseCategory> verboseModes = null;\n \n-    // ANSI escapes for various colors (or empty strings if no coloring is used)\n-    static Ansi.Color ERROR = RED;\n-    static Ansi.Color INFO = GREEN;\n-    static Ansi.Color WARNING = YELLOW;\n-    static Ansi.Color PROGRESS_ID = YELLOW;\n-    static Ansi.Color PROGRESS_STATUS = GREEN;\n-    static Ansi.Color PROGRESS_BAR = CYAN;\n-    static Ansi.Color EMPHASIS = BLUE;\n-\n     // Map remembering lines\n-    private ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n-    private ThreadLocal<AtomicInteger> updateCount = new ThreadLocal<>();\n+    private final ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n+    private final ThreadLocal<AtomicInteger> updateCount = new ThreadLocal<>();\n \n     // Whether to use ANSI codes\n     private boolean useAnsi;\n", "next_change": {"commit": "637102697a2fcef129008406583d6e53f3d41e8c", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\nindex f84726d1..92232e67 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java\n", "chunk": "@@ -45,226 +45,260 @@ import static org.fusesource.jansi.Ansi.Color.BLACK;\n  * @since 31.03.14\n  */\n public class AnsiLogger implements KitLogger {\n-    // prefix used for console output\n-    public static final String DEFAULT_LOG_PREFIX = \"DOCKER> \";\n-    private static final int NON_ANSI_UPDATE_PERIOD = 80;\n-\n-    private final Log log;\n-    private final String prefix;\n-    private final boolean batchMode;\n-\n-    private boolean isVerbose = false;\n-    private List<LogVerboseCategory> verboseModes = null;\n-\n-    // Map remembering lines\n-    private final ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n-    private final ThreadLocal<AtomicInteger> updateCount = new ThreadLocal<>();\n-\n-    // Whether to use ANSI codes\n-    private boolean useAnsi;\n-\n-\n-    public AnsiLogger(Log log, boolean useColor, String verbose) {\n-        this(log, useColor, verbose, false);\n+  // prefix used for console output\n+  public static final String DEFAULT_LOG_PREFIX = \"DOCKER> \";\n+  private static final int NON_ANSI_UPDATE_PERIOD = 80;\n+\n+  private final Log log;\n+  private final String prefix;\n+  private final boolean batchMode;\n+\n+  private final KitLogger fallbackLogger;\n+\n+  private boolean isVerbose = false;\n+  private List<LogVerboseCategory> verboseModes = null;\n+\n+  // Map remembering lines\n+  private final ThreadLocal<Map<String, Integer>> imageLines = new ThreadLocal<>();\n+  private final ThreadLocal<AtomicInteger> updateCount = new ThreadLocal<>();\n+\n+  // Whether to use ANSI codes\n+  private boolean useAnsi;\n+\n+\n+  public AnsiLogger(Log log, boolean useColor, String verbose) {\n+    this(log, useColor, verbose, false);\n+  }\n+\n+  public AnsiLogger(Log log, boolean useColor, String verbose, boolean batchMode) {\n+    this(log, useColor, verbose, batchMode, DEFAULT_LOG_PREFIX);\n+  }\n+\n+  public AnsiLogger(Log log, boolean useColor, String verbose, boolean batchMode, String prefix) {\n+    this.log = log;\n+    this.prefix = prefix;\n+    this.batchMode = batchMode;\n+    this.fallbackLogger = new StdoutLogger();\n+    checkVerboseLoggingEnabled(verbose);\n+    initializeColor(useColor);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void debug(String message, Object ... params) {\n+    if (isDebugEnabled()) {\n+      withFallback(\n+        () -> log.debug(prefix + format(message, params)),\n+        () -> fallbackLogger.debug(message, params));\n     }\n-\n-    public AnsiLogger(Log log, boolean useColor, String verbose, boolean batchMode) {\n-        this(log, useColor, verbose, batchMode, DEFAULT_LOG_PREFIX);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void info(String message, Object ... params) {\n+    withFallback(\n+      () -> log.info(colored(message, INFO, params)),\n+      () -> fallbackLogger.info(message, params));\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void verbose(LogVerboseCategory logVerboseCategory, String message, Object ... params) {\n+    if (isVerbose && verboseModes != null && verboseModes.contains(logVerboseCategory)) {\n+      withFallback(\n+        () -> log.info(ansi().fgBright(BLACK).a(prefix).a(format(message, params)).reset().toString()),\n+        () -> fallbackLogger.info(message, params));\n     }\n-\n-    public AnsiLogger(Log log, boolean useColor, String verbose, boolean batchMode, String prefix) {\n-        this.log = log;\n-        this.prefix = prefix;\n-        this.batchMode = batchMode;\n-        checkVerboseLoggingEnabled(verbose);\n-        initializeColor(useColor);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void warn(String format, Object ... params) {\n+    withFallback(\n+      () -> log.warn(colored(format, WARNING, params)),\n+      () -> fallbackLogger.warn(format, params));\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void error(String message, Object ... params) {\n+    withFallback(\n+      () -> log.error(colored(message, ERROR, params)),\n+      () -> fallbackLogger.error(message, params));\n+  }\n+\n+  /**\n+   * Whether debugging is enabled.\n+   */\n+  public boolean isDebugEnabled() {\n+    return log.isDebugEnabled();\n+  }\n+\n+  @Override\n+  public boolean isVerboseEnabled() {\n+    return isVerbose;\n+  }\n+\n+  /**\n+   * Start a progress bar\n+   */\n+  @Override\n+  public void progressStart() {\n+    // A progress indicator is always written out to standard out if a tty is enabled.\n+    if (!batchMode && log.isInfoEnabled()) {\n+      imageLines.remove();\n+      updateCount.remove();\n+      imageLines.set(new HashMap<>());\n+      updateCount.set(new AtomicInteger());\n     }\n-\n-    /** {@inheritDoc} */\n-    public void debug(String message, Object ... params) {\n-        if (isDebugEnabled()) {\n-            log.debug(prefix + format(message, params));\n-        }\n+  }\n+\n+  /**\n+   * Update the progress\n+   */\n+  @Override\n+  public void progressUpdate(String layerId, String status, String progressMessage) {\n+    if (!batchMode && log.isInfoEnabled() && StringUtils.isNotEmpty(layerId)) {\n+      if (useAnsi && isAnsiConsoleInstalled()) {\n+        updateAnsiProgress(layerId, status, progressMessage);\n+      } else {\n+        updateNonAnsiProgress();\n+      }\n+      flush();\n     }\n-\n-    /** {@inheritDoc} */\n-    public void info(String message, Object ... params) {\n-      log.info(colored(message, INFO, params));\n+  }\n+\n+  private void updateAnsiProgress(String imageId, String status, String progressMessage) {\n+    Map<String,Integer> imgLineMap = imageLines.get();\n+    Integer line = imgLineMap.get(imageId);\n+\n+    int diff = 0;\n+    if (line == null) {\n+      line = imgLineMap.size();\n+      imgLineMap.put(imageId, line);\n+    } else {\n+      diff = imgLineMap.size() - line;\n     }\n \n-    /** {@inheritDoc} */\n-    public void verbose(LogVerboseCategory logVerboseCategory, String message, Object ... params) {\n-        if (isVerbose && verboseModes != null && verboseModes.contains(logVerboseCategory)) {\n-            log.info(ansi().fgBright(BLACK).a(prefix).a(format(message, params)).reset().toString());\n-        }\n+    if (diff > 0) {\n+      print(ansi().cursorUp(diff).eraseLine(Ansi.Erase.ALL).toString());\n     }\n \n-    /** {@inheritDoc} */\n-    public void warn(String format, Object ... params) {\n-      log.warn(colored(format, WARNING, params));\n+    // Status with progress bars: (max length = 11, hence pad to 11)\n+    // Extracting\n+    // Downloading\n+    String progress = progressMessage != null ? progressMessage : \"\";\n+    String msg =\n+      ansi()\n+        .fg(PROGRESS_ID.ansiColor).a(imageId).reset().a(\": \")\n+        .fg(PROGRESS_STATUS.ansiColor).a(StringUtils.rightPad(status, 11) + \" \")\n+        .fg(PROGRESS_BAR.ansiColor).a(progress).toString();\n+    println(msg);\n+\n+    if (diff > 0) {\n+      // move cursor back down to bottom\n+      print(ansi().cursorDown(diff - 1).toString());\n     }\n+  }\n \n-    /** {@inheritDoc} */\n-    public void error(String message, Object ... params) {\n-      log.error(colored(message, ERROR, params));\n+  private void updateNonAnsiProgress() {\n+    AtomicInteger count = updateCount.get();\n+    int nr = count.getAndIncrement();\n+    if (nr % NON_ANSI_UPDATE_PERIOD == 0) {\n+      print(\"#\");\n     }\n-\n-    /**\n-     * Whether debugging is enabled.\n-     */\n-    public boolean isDebugEnabled() {\n-        return log.isDebugEnabled();\n+    if (nr > 0 && nr % (80 * NON_ANSI_UPDATE_PERIOD) == 0) {\n+      print(\"\\n\");\n     }\n-\n-    @Override\n-    public boolean isVerboseEnabled() {\n-        return isVerbose;\n+  }\n+\n+  /**\n+   * Finis progress meter. Must be always called if {@link #progressStart()} has been used.\n+   */\n+  @Override\n+  public void progressFinished() {\n+    if (!batchMode && log.isInfoEnabled()) {\n+      imageLines.remove();\n+      print(ansi().reset().toString());\n+      if (!useAnsi) {\n+        println(\"\");\n+      }\n     }\n+  }\n \n-    /**\n-     * Start a progress bar\n-     */\n-    @Override\n-    public void progressStart() {\n-        // A progress indicator is always written out to standard out if a tty is enabled.\n-        if (!batchMode && log.isInfoEnabled()) {\n-            imageLines.remove();\n-            updateCount.remove();\n-            imageLines.set(new HashMap<>());\n-            updateCount.set(new AtomicInteger());\n-        }\n-    }\n+  private void flush() {\n+    System.out.flush();\n+  }\n \n-    /**\n-     * Update the progress\n-     */\n-    @Override\n-    public void progressUpdate(String layerId, String status, String progressMessage) {\n-        if (!batchMode && log.isInfoEnabled() && StringUtils.isNotEmpty(layerId)) {\n-            if (useAnsi) {\n-                updateAnsiProgress(layerId, status, progressMessage);\n-            } else {\n-                updateNonAnsiProgress();\n-            }\n-            flush();\n-        }\n+  private void initializeColor(boolean useColor) {\n+    this.useAnsi = useColor && !log.isDebugEnabled();\n+    if (useAnsi) {\n+      AnsiConsole.systemInstall();\n+      Ansi.setEnabled(true);\n     }\n-\n-    private void updateAnsiProgress(String imageId, String status, String progressMessage) {\n-        Map<String,Integer> imgLineMap = imageLines.get();\n-        Integer line = imgLineMap.get(imageId);\n-\n-        int diff = 0;\n-        if (line == null) {\n-            line = imgLineMap.size();\n-            imgLineMap.put(imageId, line);\n-        } else {\n-            diff = imgLineMap.size() - line;\n-        }\n-\n-        if (diff > 0) {\n-            print(ansi().cursorUp(diff).eraseLine(Ansi.Erase.ALL).toString());\n-        }\n-\n-        // Status with progress bars: (max length = 11, hence pad to 11)\n-        // Extracting\n-        // Downloading\n-        String progress = progressMessage != null ? progressMessage : \"\";\n-        String msg =\n-                ansi()\n-                .fg(PROGRESS_ID.ansiColor).a(imageId).reset().a(\": \")\n-                .fg(PROGRESS_STATUS.ansiColor).a(StringUtils.rightPad(status, 11) + \" \")\n-                .fg(PROGRESS_BAR.ansiColor).a(progress).toString();\n-        println(msg);\n-\n-        if (diff > 0) {\n-            // move cursor back down to bottom\n-            print(ansi().cursorDown(diff - 1).toString());\n-        }\n+    else {\n+      Ansi.setEnabled(false);\n     }\n+  }\n \n-    private void updateNonAnsiProgress() {\n-        AtomicInteger count = updateCount.get();\n-        int nr = count.getAndIncrement();\n-        if (nr % NON_ANSI_UPDATE_PERIOD == 0) {\n-            print(\"#\");\n-        }\n-        if (nr > 0 && nr % (80 * NON_ANSI_UPDATE_PERIOD) == 0) {\n-            print(\"\\n\");\n-        }\n-    }\n+  private void println(String txt) {\n+    System.out.println(txt);\n+  }\n \n-    /**\n-     * Finis progress meter. Must be always called if {@link #progressStart()} has been used.\n-     */\n-    @Override\n-    public void progressFinished() {\n-        if (!batchMode && log.isInfoEnabled()) {\n-            imageLines.remove();\n-            print(ansi().reset().toString());\n-            if (!useAnsi) {\n-                println(\"\");\n-            }\n-        }\n-    }\n+  private void print(String txt) {\n+    System.out.print(txt);\n+  }\n \n-    private void flush() {\n-        System.out.flush();\n-    }\n+  private String colored(String message, AnsiUtil.Color color, Object... params) {\n+    return AnsiUtil.colored(prefix + message, color, params);\n+  }\n \n-    private void initializeColor(boolean useColor) {\n-        this.useAnsi = useColor && !log.isDebugEnabled();\n-        if (useAnsi) {\n-            AnsiConsole.systemInstall();\n-            Ansi.setEnabled(true);\n-        }\n-        else {\n-            Ansi.setEnabled(false);\n-        }\n-    }\n \n-    private void println(String txt) {\n-        System.out.println(txt);\n+  private void checkVerboseLoggingEnabled(String verbose) {\n+    if (verbose == null || verbose.equalsIgnoreCase(\"false\")) {\n+      this.isVerbose = false;\n+      return;\n     }\n-\n-    private void print(String txt) {\n-        System.out.print(txt);\n+    if (verbose.equalsIgnoreCase(\"all\")) {\n+      this.isVerbose = true;\n+      this.verboseModes = Arrays.asList(LogVerboseCategory.values());\n+      return;\n     }\n-\n-    private String colored(String message, AnsiUtil.Color color, Object... params) {\n-      return AnsiUtil.colored(prefix + message, color, params);\n+    if (verbose.isEmpty() || verbose.equalsIgnoreCase(\"true\")) {\n+      this.isVerbose = true;\n+      this.verboseModes = Collections.singletonList(LogVerboseCategory.BUILD);\n+      return;\n     }\n \n-\n-    private void checkVerboseLoggingEnabled(String verbose) {\n-        if (verbose == null || verbose.equalsIgnoreCase(\"false\")) {\n-            this.isVerbose = false;\n-            return;\n-        }\n-        if (verbose.equalsIgnoreCase(\"all\")) {\n-            this.isVerbose = true;\n-            this.verboseModes = Arrays.asList(LogVerboseCategory.values());\n-            return;\n-        }\n-        if (verbose.isEmpty() || verbose.equalsIgnoreCase(\"true\")) {\n-            this.isVerbose = true;\n-            this.verboseModes = Collections.singletonList(LogVerboseCategory.BUILD);\n-            return;\n-        }\n-\n-        this.verboseModes = getVerboseModesFromString(verbose);\n-        this.isVerbose = true;\n+    this.verboseModes = getVerboseModesFromString(verbose);\n+    this.isVerbose = true;\n+  }\n+\n+  private List<LogVerboseCategory> getVerboseModesFromString(String groups) {\n+    List<LogVerboseCategory> ret = new ArrayList<>();\n+    for (String group : groups.split(\",\")) {\n+      try {\n+        ret.add(LogVerboseCategory.valueOf(group.toUpperCase()));\n+      } catch (Exception exp) {\n+        log.info(\"log: Unknown verbosity group \" + groups + \". Ignoring...\");\n+      }\n     }\n-\n-    private List<LogVerboseCategory> getVerboseModesFromString(String groups) {\n-        List<LogVerboseCategory> ret = new ArrayList<>();\n-        for (String group : groups.split(\",\")) {\n-            try {\n-                ret.add(LogVerboseCategory.valueOf(group.toUpperCase()));\n-            } catch (Exception exp) {\n-                log.info(\"log: Unknown verbosity group \" + groups + \". Ignoring...\");\n-            }\n-        }\n-        return ret;\n+    return ret;\n+  }\n+\n+  private static void withFallback(Runnable ansiFunc, Runnable fallbackFunc) {\n+    try {\n+      if (isAnsiConsoleInstalled()) {\n+        ansiFunc.run();\n+        return;\n+      }\n+    } catch (Exception ignore) {}\n+    fallbackFunc.run();\n+  }\n+\n+  private static boolean isAnsiConsoleInstalled() {\n+    // Maven 3.6.3 uses jansi 1.17 which doesn't include this method\n+    try {\n+      AnsiConsole.class.getMethod(\"isInstalled\");\n+      return AnsiConsole.isInstalled();\n+    } catch (NoSuchMethodException ex) {\n+      // Assume AnsiConsole is always installed in case the method doesn't exist\n+      return true;\n     }\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MDI2NA==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383940264", "body": "Better to use a specific POJO to represent the Plugins object.\r\n\r\nJavadoc description looks outdated and inaccurate.", "bodyText": "Better to use a specific POJO to represent the Plugins object.\nJavadoc description looks outdated and inaccurate.", "bodyHTML": "<p dir=\"auto\">Better to use a specific POJO to represent the Plugins object.</p>\n<p dir=\"auto\">Javadoc description looks outdated and inaccurate.</p>", "author": "manusa", "createdAt": "2020-02-25T15:11:23Z", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -180,6 +149,55 @@ public static Plugin getPluginOfAnyGroupId(MavenProject project, String pluginAr\n         return getPlugin(project, null, pluginArtifact);\n     }\n \n+    /**\n+     * Returns a comma separated string with dependency list in format\n+     *  groupId,artifactId,version,configuration,execution1|execution2|execution3\n+     *\n+     * @param project Maven project\n+     * @return list of dependencies in comma separated strings\n+     */\n+    public static List<AbstractMap.SimpleEntry<String, Map<String, Object>>> getPluginsAsString(MavenProject project) {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99c53dcc012641bb7e99a3da30d9b1331b6d548e", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex fe964361..efdb272b 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -149,55 +178,6 @@ public class MavenUtil {\n         return getPlugin(project, null, pluginArtifact);\n     }\n \n-    /**\n-     * Returns a comma separated string with dependency list in format\n-     *  groupId,artifactId,version,configuration,execution1|execution2|execution3\n-     *\n-     * @param project Maven project\n-     * @return list of dependencies in comma separated strings\n-     */\n-    public static List<AbstractMap.SimpleEntry<String, Map<String, Object>>> getPluginsAsString(MavenProject project) {\n-        List<AbstractMap.SimpleEntry<String, Map<String, Object>>> pluginsAsString = new ArrayList<>();\n-        for (Plugin plugin : project.getBuildPlugins()) {\n-            String pluginAsString = plugin.getGroupId() + \",\" + plugin.getArtifactId() + \",\"\n-                    + plugin.getVersion();\n-            if (plugin.getExecutions() != null && !plugin.getExecutions().isEmpty()) {\n-                pluginAsString +=  (\",\" + String.join(\"|\", getPluginExecutionsAsList(plugin)));\n-            }\n-\n-            pluginsAsString.add(new AbstractMap.SimpleEntry<>(pluginAsString, MavenConfigurationExtractor.extract((Xpp3Dom)plugin.getConfiguration())));\n-        }\n-        return pluginsAsString;\n-    }\n-\n-    public static List<String> getPluginExecutionsAsList(Plugin plugin) {\n-        List<String> pluginExecutions = new ArrayList<>();\n-        for (PluginExecution pluginExecution : plugin.getExecutions()) {\n-            pluginExecutions.addAll(pluginExecution.getGoals());\n-        }\n-        return pluginExecutions;\n-    }\n-\n-    public static List<String> getDependenciesAsString(MavenProject project, boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-                project.getArtifacts() : project.getDependencyArtifacts();\n-        final List<String> jkubeProjectDependenciesAsStr = new ArrayList<>();\n-\n-        if (artifacts != null) {\n-            for (Artifact artifact : artifacts) {\n-                jkubeProjectDependenciesAsStr.add(\n-                        artifact.getGroupId() + \",\" +\n-                                artifact.getArtifactId() + \",\" +\n-                                artifact.getVersion() + \",\" +\n-                                artifact.getType() + \",\" +\n-                                artifact.getScope() + \",\" +\n-                                (artifact.getFile() != null ? artifact.getFile().getAbsolutePath() : \"\"));\n-            }\n-        }\n-\n-        return jkubeProjectDependenciesAsStr;\n-    }\n-\n     /**\n      * Returns the plugin with the given groupId (if present) and artifactId.\n      *\n", "next_change": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex efdb272b..de287dba 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -178,6 +149,43 @@ public class MavenUtil {\n         return getPlugin(project, null, pluginArtifact);\n     }\n \n+    /**\n+     * Returns a comma separated string with dependency list in format\n+     *  groupId,artifactId,version,configuration,execution1|execution2|execution3\n+     *\n+     * @param project Maven project\n+     * @return list of dependencies in comma separated strings\n+     */\n+    public static List<String> getPluginsAsString(MavenProject project) {\n+        List<String> pluginsAsString = new ArrayList<>();\n+        for (Plugin plugin : project.getBuildPlugins()) {\n+            String pluginAsString = plugin.getGroupId() + \",\" + plugin.getArtifactId() + \",\"\n+                    + plugin.getVersion() + \",\" + plugin.getConfiguration();\n+            if (plugin.getExecutions() != null && !plugin.getExecutions().isEmpty()) {\n+                pluginAsString +=  (\",\" + String.join(\"|\", getPluginExecutionsAsList(plugin)));\n+            }\n+\n+            pluginsAsString.add(pluginAsString);\n+        }\n+        return pluginsAsString;\n+    }\n+\n+    public static List<String> getPluginExecutionsAsList(Plugin plugin) {\n+        List<String> pluginExecutions = new ArrayList<>();\n+        for (PluginExecution pluginExecution : plugin.getExecutions()) {\n+            pluginExecutions.addAll(pluginExecution.getGoals());\n+        }\n+        return pluginExecutions;\n+    }\n+\n+    public static List<String> getDependenciesAsString(MavenProject project) {\n+        List<String> dependenciesAsString = new ArrayList<>();\n+        for (Dependency dependency : project.getDependencies()) {\n+            dependenciesAsString.add(dependency.getGroupId() + \",\" + dependency.getArtifactId() + \",\" + dependency.getVersion());\n+        }\n+        return dependenciesAsString;\n+    }\n+\n     /**\n      * Returns the plugin with the given groupId (if present) and artifactId.\n      *\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex de287dba..0d8e4285 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -178,12 +185,24 @@ public class MavenUtil {\n         return pluginExecutions;\n     }\n \n-    public static List<String> getDependenciesAsString(MavenProject project) {\n-        List<String> dependenciesAsString = new ArrayList<>();\n-        for (Dependency dependency : project.getDependencies()) {\n-            dependenciesAsString.add(dependency.getGroupId() + \",\" + dependency.getArtifactId() + \",\" + dependency.getVersion());\n+    public static List<String> getDependenciesAsString(MavenProject project, boolean transitive) {\n+        final Set<Artifact> artifacts = transitive ?\n+                project.getArtifacts() : project.getDependencyArtifacts();\n+        final List<String> jkubeProjectDependenciesAsStr = new ArrayList<>();\n+\n+        if (artifacts != null) {\n+            for (Artifact artifact : artifacts) {\n+                jkubeProjectDependenciesAsStr.add(\n+                        artifact.getGroupId() + \",\" +\n+                                artifact.getArtifactId() + \",\" +\n+                                artifact.getVersion() + \",\" +\n+                                artifact.getType() + \",\" +\n+                                artifact.getScope() + \",\" +\n+                                (artifact.getFile() != null ? artifact.getFile().getAbsolutePath() : \"\"));\n+            }\n         }\n-        return dependenciesAsString;\n+\n+        return jkubeProjectDependenciesAsStr;\n     }\n \n     /**\n", "next_change": {"commit": "cb17d380b468d8bd6084f1789e5494907e867bb8", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 0d8e4285..c3b8888e 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -185,25 +170,21 @@ public class MavenUtil {\n         return pluginExecutions;\n     }\n \n-    public static List<String> getDependenciesAsString(MavenProject project, boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-                project.getArtifacts() : project.getDependencyArtifacts();\n-        final List<String> jkubeProjectDependenciesAsStr = new ArrayList<>();\n-\n-        if (artifacts != null) {\n-            for (Artifact artifact : artifacts) {\n-                jkubeProjectDependenciesAsStr.add(\n-                        artifact.getGroupId() + \",\" +\n-                                artifact.getArtifactId() + \",\" +\n-                                artifact.getVersion() + \",\" +\n-                                artifact.getType() + \",\" +\n-                                artifact.getScope() + \",\" +\n-                                (artifact.getFile() != null ? artifact.getFile().getAbsolutePath() : \"\"));\n-            }\n-        }\n-\n-        return jkubeProjectDependenciesAsStr;\n-    }\n+  public static List<JKubeProjectDependency> getTransitiveDependencies(MavenProject project) {\n+    return project.getArtifacts().stream()\n+        .map(a -> JKubeProjectDependency.builder()\n+            .groupId(a.getGroupId()).artifactId(a.getArtifactId()).version(a.getVersion()).type(a.getType())\n+            .scope(a.getScope()).file(a.getFile()).build())\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<JKubeProjectDependency> getDependencies(MavenProject project) {\n+    return project.getDependencies().stream()\n+        .map(d -> JKubeProjectDependency.builder()\n+            .groupId(d.getGroupId()).artifactId(d.getArtifactId()).version(d.getVersion()).type(d.getType())\n+            .scope(d.getScope()).build())\n+        .collect(Collectors.toList());\n+  }\n \n     /**\n      * Returns the plugin with the given groupId (if present) and artifactId.\n", "next_change": {"commit": "2c2d5da4a7ac43cb36094b57f9855ebf9f341d3d", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex c3b8888e..fd994989 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -170,17 +169,17 @@ public class MavenUtil {\n         return pluginExecutions;\n     }\n \n-  public static List<JKubeProjectDependency> getTransitiveDependencies(MavenProject project) {\n+  public static List<Dependency> getTransitiveDependencies(MavenProject project) {\n     return project.getArtifacts().stream()\n-        .map(a -> JKubeProjectDependency.builder()\n+        .map(a -> Dependency.builder()\n             .groupId(a.getGroupId()).artifactId(a.getArtifactId()).version(a.getVersion()).type(a.getType())\n             .scope(a.getScope()).file(a.getFile()).build())\n         .collect(Collectors.toList());\n   }\n \n-  public static List<JKubeProjectDependency> getDependencies(MavenProject project) {\n+  public static List<Dependency> getDependencies(MavenProject project) {\n     return project.getDependencies().stream()\n-        .map(d -> JKubeProjectDependency.builder()\n+        .map(d -> Dependency.builder()\n             .groupId(d.getGroupId()).artifactId(d.getArtifactId()).version(d.getVersion()).type(d.getType())\n             .scope(d.getScope()).build())\n         .collect(Collectors.toList());\n", "next_change": {"commit": "92d63571bc3b72f55c1391f477a42d439f918451", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex fd994989..21be0bd0 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -181,7 +174,7 @@ public class MavenUtil {\n     return project.getDependencies().stream()\n         .map(d -> Dependency.builder()\n             .groupId(d.getGroupId()).artifactId(d.getArtifactId()).version(d.getVersion()).type(d.getType())\n-            .scope(d.getScope()).build())\n+            .scope(d.getScope()).file(getArtifactFileFromArtifactMap(project, d)).build())\n         .collect(Collectors.toList());\n   }\n \n", "next_change": {"commit": "2ff316890006a31fd0d32f1c76c23bf602f2e568", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 21be0bd0..16aff547 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -178,56 +100,6 @@ public class MavenUtil {\n         .collect(Collectors.toList());\n   }\n \n-    /**\n-     * Returns the plugin with the given groupId (if present) and artifactId.\n-     *\n-     * @param project MavenProject of project\n-     * @param groupId group id\n-     * @param artifactId artifact id\n-     * @return return Plugin object for the specific plugin\n-     */\n-    public static org.apache.maven.model.Plugin getPlugin(MavenProject project, String groupId, String artifactId) {\n-        if (artifactId == null) {\n-            throw new IllegalArgumentException(\"artifactId cannot be null\");\n-        }\n-\n-        List<org.apache.maven.model.Plugin> plugins = project.getBuildPlugins();\n-        if (plugins != null) {\n-            for (org.apache.maven.model.Plugin plugin : plugins) {\n-                boolean matchesArtifactId = artifactId.equals(plugin.getArtifactId());\n-                boolean matchesGroupId = groupId == null || groupId.equals(plugin.getGroupId());\n-\n-                if (matchesGroupId && matchesArtifactId) {\n-                    return plugin;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static void createArchive(File sourceDir, File destinationFile, TarArchiver archiver) throws IOException {\n-        try {\n-            archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n-            archiver.setLongfile(TarLongFileMode.posix);\n-            archiver.addDirectory(sourceDir);\n-            archiver.setDestFile(destinationFile);\n-            archiver.createArchive();\n-        } catch (IOException e) {\n-            throw new IOException(\"Failed to create archive \" + destinationFile + \": \" + e, e);\n-        }\n-    }\n-\n-\n-    public static void createArchive(File sourceDir, File destinationFile, ZipArchiver archiver) throws IOException {\n-        try {\n-            archiver.addDirectory(sourceDir);\n-            archiver.setDestFile(destinationFile);\n-            archiver.createArchive();\n-        } catch (IOException e) {\n-            throw new IOException(\"Failed to create archive \" + destinationFile + \": \" + e, e);\n-        }\n-    }\n-\n     /**\n      * Returns the version from the list of pre-configured versions of common groupId/artifact pairs\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzY3NQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383943675", "body": "As in previous comment, better to use a specific typed POJO to represent this structure.\r\n\r\nThis is tightly related to the comment in `RegistryService.Builder#settings` where you are eventually converting what we return here to `List<RegistryServerConfiguration>`", "bodyText": "As in previous comment, better to use a specific typed POJO to represent this structure.\nThis is tightly related to the comment in RegistryService.Builder#settings where you are eventually converting what we return here to List<RegistryServerConfiguration>", "bodyHTML": "<p dir=\"auto\">As in previous comment, better to use a specific typed POJO to represent this structure.</p>\n<p dir=\"auto\">This is tightly related to the comment in <code>RegistryService.Builder#settings</code> where you are eventually converting what we return here to <code>List&lt;RegistryServerConfiguration&gt;</code></p>", "author": "manusa", "createdAt": "2020-02-25T15:16:38Z", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -331,5 +349,81 @@ public static String getDocumentationUrl (MavenProject project) {\n             throw new IOException(\"Cannot extract compile class path elements\", e);\n         }\n     }\n+\n+    public static Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> getRegistryServerFromMavenSettings(Settings settings) {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99c53dcc012641bb7e99a3da30d9b1331b6d548e", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex fe964361..efdb272b 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -350,80 +330,17 @@ public class MavenUtil {\n         }\n     }\n \n-    public static Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> getRegistryServerFromMavenSettings(Settings settings) {\n+    public static Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Object>> getRegistryServerFromMavenSettings(Settings settings) {\n         // For each server it would hold map as\n         // id -> ((username, password), config)\n-        Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> registryServersMap = new HashMap<>();\n+        Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Object>> registryServersMap = new HashMap<>();\n         for (Server server : settings.getServers()) {\n             if (server.getUsername() != null) {\n                 registryServersMap.put(server.getId(), new AbstractMap.SimpleEntry(\n-                        new AbstractMap.SimpleEntry(server.getUsername(), server.getPassword()), MavenConfigurationExtractor.extract((Xpp3Dom) server.getConfiguration())));\n+                        new AbstractMap.SimpleEntry(server.getUsername(), server.getPassword()), server.getConfiguration()));\n             }\n         }\n         return registryServersMap;\n     }\n-\n-    public static JkubeProject convertMavenProjectToJkubeProject(MavenProject mavenProject, MavenSession mavenSession) throws DependencyResolutionRequiredException {\n-        JkubeProject.Builder builder = new JkubeProject.Builder();\n-\n-        Properties properties = new Properties();\n-        String localRepositoryBaseDir = null;\n-\n-        if (mavenProject.getProperties() != null) {\n-            properties.putAll(mavenProject.getProperties());\n-        }\n-        if (mavenSession != null) {\n-            if (mavenSession.getLocalRepository().getBasedir() != null) {\n-                localRepositoryBaseDir = mavenSession.getLocalRepository().getBasedir();\n-            }\n-            if (mavenSession.getUserProperties() != null) {\n-                properties.putAll(mavenSession.getUserProperties());\n-            }\n-            if (mavenSession.getSystemProperties() != null) {\n-                properties.putAll(mavenSession.getSystemProperties());\n-            }\n-            if (mavenSession.getExecutionProperties() != null) {\n-                properties.putAll(mavenSession.getExecutionProperties());\n-            }\n-        }\n-\n-        builder.name(mavenProject.getName())\n-                .description(mavenProject.getDescription())\n-                .groupId(mavenProject.getGroupId())\n-                .artifactId(mavenProject.getArtifactId())\n-                .version(mavenProject.getVersion())\n-                .baseDirectory(mavenProject.getBasedir())\n-                .documentationUrl(getDocumentationUrl(mavenProject))\n-                .compileClassPathElements(mavenProject.getCompileClasspathElements())\n-                .properties(properties)\n-                .packaging(mavenProject.getPackaging())\n-                .dependencies(MavenUtil.getDependenciesAsString(mavenProject, false))\n-                .dependenciesWithTransitive(MavenUtil.getDependenciesAsString(mavenProject, true))\n-                .localRepositoryBaseDirectory(localRepositoryBaseDir)\n-                .plugins(MavenUtil.getPluginsAsString(mavenProject));\n-\n-        if (mavenProject.getOrganization() != null) {\n-            builder.site(mavenProject.getOrganization().getUrl())\n-                    .organization(mavenProject.getOrganization().getName());\n-        }\n-\n-        if (mavenProject.getBuild() != null) {\n-            builder.outputDirectory(mavenProject.getBuild().getOutputDirectory())\n-                    .buildFinalName(mavenProject.getBuild().getFinalName())\n-                    .buildDirectory(mavenProject.getBuild().getDirectory());\n-        }\n-\n-        if (mavenProject.getIssueManagement() != null) {\n-            builder.issueManagementSystem(mavenProject.getIssueManagement().getSystem());\n-            builder.issueManagementUrl(mavenProject.getIssueManagement().getUrl());\n-        }\n-\n-        if (mavenProject.getScm() != null) {\n-            builder.scmTag(mavenProject.getScm().getTag());\n-            builder.scmUrl(mavenProject.getScm().getUrl());\n-        }\n-\n-        return builder.build();\n-    }\n }\n \n", "next_change": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex efdb272b..de287dba 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -342,5 +350,32 @@ public class MavenUtil {\n         }\n         return registryServersMap;\n     }\n+\n+    public static JkubeProject convertMavenProjectToJkubeProject(MavenProject mavenProject) throws DependencyResolutionRequiredException {\n+        JkubeProject.Builder builder = new JkubeProject.Builder();\n+\n+        builder.name(mavenProject.getName())\n+                .description(mavenProject.getDescription())\n+                .groupId(mavenProject.getGroupId())\n+                .artifactId(mavenProject.getArtifactId())\n+                .version(mavenProject.getVersion())\n+                .baseDirectory(mavenProject.getBasedir())\n+                .documentationUrl(getDocumentationUrl(mavenProject))\n+                .compileClassPathElements(mavenProject.getCompileClasspathElements())\n+                .properties(mavenProject.getProperties())\n+                .dependencies(MavenUtil.getDependenciesAsString(mavenProject))\n+                .plugins(MavenUtil.getPluginsAsString(mavenProject));\n+        if (mavenProject.getOrganization() != null) {\n+            builder.site(mavenProject.getOrganization().getUrl())\n+                    .organization(mavenProject.getOrganization().getName());\n+        }\n+\n+        if (mavenProject.getBuildPlugins() != null) {\n+            builder.outputDirectory(mavenProject.getBuild().getOutputDirectory())\n+                    .buildDirectory(mavenProject.getBuild().getDirectory());\n+        }\n+\n+        return builder.build();\n+    }\n }\n \n", "next_change": {"commit": "3fb81820548fa0491a90ccc649adbecacd8c5fd3", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex de287dba..0bbe4247 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -362,16 +381,20 @@ public class MavenUtil {\n                 .baseDirectory(mavenProject.getBasedir())\n                 .documentationUrl(getDocumentationUrl(mavenProject))\n                 .compileClassPathElements(mavenProject.getCompileClasspathElements())\n-                .properties(mavenProject.getProperties())\n+                .properties(properties)\n+                .packaging(mavenProject.getPackaging())\n                 .dependencies(MavenUtil.getDependenciesAsString(mavenProject))\n+                .localRepositoryBaseDirectory(localRepositoryBaseDir)\n                 .plugins(MavenUtil.getPluginsAsString(mavenProject));\n+\n         if (mavenProject.getOrganization() != null) {\n             builder.site(mavenProject.getOrganization().getUrl())\n                     .organization(mavenProject.getOrganization().getName());\n         }\n \n-        if (mavenProject.getBuildPlugins() != null) {\n+        if (mavenProject.getBuild() != null) {\n             builder.outputDirectory(mavenProject.getBuild().getOutputDirectory())\n+                    .buildFinalName(mavenProject.getBuild().getFinalName())\n                     .buildDirectory(mavenProject.getBuild().getDirectory());\n         }\n \n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 0bbe4247..0d8e4285 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -398,6 +422,16 @@ public class MavenUtil {\n                     .buildDirectory(mavenProject.getBuild().getDirectory());\n         }\n \n+        if (mavenProject.getIssueManagement() != null) {\n+            builder.issueManagementSystem(mavenProject.getIssueManagement().getSystem());\n+            builder.issueManagementUrl(mavenProject.getIssueManagement().getUrl());\n+        }\n+\n+        if (mavenProject.getScm() != null) {\n+            builder.scmTag(mavenProject.getScm().getTag());\n+            builder.scmUrl(mavenProject.getScm().getUrl());\n+        }\n+\n         return builder.build();\n     }\n }\n", "next_change": {"commit": "c1b37586a9d6d978bd6a83c21a91d02112e78a7e", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 0d8e4285..6eefb56c 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -432,6 +425,10 @@ public class MavenUtil {\n             builder.scmUrl(mavenProject.getScm().getUrl());\n         }\n \n+        if (mavenProject.getArtifact() != null) {\n+            builder.artifact(mavenProject.getArtifact().getFile());\n+        }\n+\n         return builder.build();\n     }\n }\n", "next_change": {"commit": "f8cdf5f842afe0e25bfed5f4ea6ac5a125eec758", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 6eefb56c..49dc0571 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -431,5 +419,14 @@ public class MavenUtil {\n \n         return builder.build();\n     }\n+\n+    public static boolean callMavenPluginWithGoal(MavenProject project, MavenSession session, BuildPluginManager pluginManager, String mavenPluginGoal) {\n+        if (mavenPluginGoal != null) {\n+            MojoExecutionService mojoExecutionService = new MojoExecutionService(project, session, pluginManager);\n+            mojoExecutionService.callPluginGoal(mavenPluginGoal);\n+            return true;\n+        }\n+        return false;\n+    }\n }\n \n", "next_change": {"commit": "3005d570c2ff22f348bf835a081cee1badbe9ad1", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 49dc0571..42ee3310 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -420,13 +421,14 @@ public class MavenUtil {\n         return builder.build();\n     }\n \n-    public static boolean callMavenPluginWithGoal(MavenProject project, MavenSession session, BuildPluginManager pluginManager, String mavenPluginGoal) {\n+    public static void callMavenPluginWithGoal(\n+        MavenProject project, MavenSession session, BuildPluginManager pluginManager, String mavenPluginGoal, KitLogger log) {\n+\n         if (mavenPluginGoal != null) {\n+            log.info(\"Calling %s Maven Goal\", mavenPluginGoal);\n             MojoExecutionService mojoExecutionService = new MojoExecutionService(project, session, pluginManager);\n             mojoExecutionService.callPluginGoal(mavenPluginGoal);\n-            return true;\n         }\n-        return false;\n     }\n }\n \n", "next_change": {"commit": "8201c81ce4ca19a5b93c3ef39cd703729cb2587a", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 42ee3310..afe2903f 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -430,5 +430,20 @@ public class MavenUtil {\n             mojoExecutionService.callPluginGoal(mavenPluginGoal);\n         }\n     }\n+\n+    /**\n+     * Returns the root project folder\n+     */\n+    public static File getRootProjectFolder(MavenProject project) {\n+        File answer = null;\n+        while (project != null) {\n+            File basedir = project.getBasedir();\n+            if (basedir != null) {\n+                answer = basedir;\n+            }\n+            project = project.getParent();\n+        }\n+        return answer;\n+    }\n }\n \n", "next_change": {"commit": "92d63571bc3b72f55c1391f477a42d439f918451", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex afe2903f..21be0bd0 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -445,5 +418,13 @@ public class MavenUtil {\n         }\n         return answer;\n     }\n+\n+    private static File getArtifactFileFromArtifactMap(MavenProject mavenProject, org.apache.maven.model.Dependency dependency) {\n+        Artifact artifact = mavenProject.getArtifactMap().get(dependency.getGroupId() + \":\" + dependency.getArtifactId());\n+        if (artifact != null) {\n+            return artifact.getFile();\n+        }\n+        return null;\n+    }\n }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1MjgyMw==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383952823", "body": "[What is 63?](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants)\r\nDeclare a constant with a descriptive name please.", "bodyText": "What is 63?\nDeclare a constant with a descriptive name please.", "bodyHTML": "<p dir=\"auto\"><a href=\"https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants\" rel=\"nofollow\">What is 63?</a><br>\nDeclare a constant with a descriptive name please.</p>", "author": "manusa", "createdAt": "2020-02-25T15:30:32Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.eclipse.jkube.kit.common.JkubeProject;\n+import org.eclipse.jkube.kit.common.JkubeProjectDependency;\n+import org.eclipse.jkube.kit.common.JkubeProjectPlugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URLClassLoader;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+\n+public class JkubeProjectUtil {\n+    private JkubeProjectUtil() { }\n+\n+    public static <T> Optional<T> iterateOverListWithCondition(List<T> dependencyList, Predicate<? super T> condition) {\n+        return dependencyList.stream().filter(condition).findFirst();\n+    }\n+\n+    public static String getAnyDependencyVersionWithGroupId(JkubeProject jkubeProject, String groupId) {\n+        Optional<JkubeProjectDependency> value = iterateOverListWithCondition(jkubeProject.getDependencies(),\n+                dependency -> dependency.getGroupId().equals(groupId));\n+\n+        return value.map(JkubeProjectDependency::getVersion).orElse(null);\n+    }\n+\n+    public static JkubeProjectPlugin getPlugin(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        Optional<JkubeProjectPlugin> value = iterateOverListWithCondition(jkubeProject.getPlugins(),\n+                plugin -> plugin.getGroupId().equals(groupId) && plugin.getArtifactId().equals(artifactId));\n+        return value.orElse(null);\n+    }\n+\n+    public static JkubeProjectPlugin getPlugin(JkubeProject jkubeProject, String artifactId) {\n+        Optional<JkubeProjectPlugin> value = iterateOverListWithCondition(jkubeProject.getPlugins(),\n+                plugin -> plugin.getArtifactId().equals(artifactId));\n+        return value.orElse(null);\n+    }\n+\n+    public static boolean hasPlugin(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        return getPlugin(jkubeProject, groupId, artifactId) != null;\n+    }\n+\n+    public static boolean hasPluginOfAnyArtifactId(JkubeProject jkubeProject, String artifactId) {\n+        return getPlugin(jkubeProject, artifactId) != null;\n+    }\n+\n+    public static boolean hasDependency(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        return getDependency(jkubeProject, groupId, artifactId) != null;\n+    }\n+\n+    public static JkubeProjectDependency getDependency(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        List<JkubeProjectDependency> dependencyList = jkubeProject.getDependencies();\n+        if (dependencyList != null) {\n+            Optional<JkubeProjectDependency> value = iterateOverListWithCondition(dependencyList,\n+                    dependency -> dependency.getGroupId().equals(groupId) && dependency.getArtifactId().equals(artifactId));\n+\n+            return value.orElse(null);\n+        }\n+        return null;\n+    }\n+\n+    public static boolean hasResource(JkubeProject project, String... paths) throws IOException {\n+        try (URLClassLoader compileClassLoader = ClassUtil.createClassLoader(project.getCompileClassPathElements(), project.getOutputDirectory())) {\n+            for (String path : paths) {\n+                try {\n+                    if (compileClassLoader.getResource(path) != null) {\n+                        return true;\n+                    }\n+                } catch (Exception e) {\n+                    throw new IOException(e);\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static Properties getPropertiesWithSystemOverrides(JkubeProject project) {\n+        Properties properties = new Properties(project.getProperties());\n+        properties.putAll(System.getProperties());\n+        return properties;\n+    }\n+\n+    public static File getFinalOutputArtifact(JkubeProject jkubeProject) {\n+        String nameOfFinalArtifact;\n+        if (jkubeProject.getBuildFinalName() == null) {\n+            nameOfFinalArtifact = jkubeProject.getArtifactId() + \"-\"\n+                    + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n+        } else {\n+            nameOfFinalArtifact = jkubeProject.getBuildFinalName() + \".\" + jkubeProject.getPackaging();\n+        }\n+        File outputDirectory = new File(jkubeProject.getBuildDirectory());\n+        File finalArtifact = new File(outputDirectory, nameOfFinalArtifact);\n+        return finalArtifact.exists() ? finalArtifact : null;\n+    }\n+\n+    public static String createDefaultResourceName(String artifactId, String ... suffixes) {\n+        String suffix = StringUtils.join(suffixes, \"-\");\n+        String ret = artifactId + (suffix.length() > 0 ? \"-\" + suffix : \"\");\n+        if (ret.length() > 63) {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\nindex a66c2f46..ba49cbec 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n", "chunk": "@@ -95,26 +82,4 @@ public class JkubeProjectUtil {\n         properties.putAll(System.getProperties());\n         return properties;\n     }\n-\n-    public static File getFinalOutputArtifact(JkubeProject jkubeProject) {\n-        String nameOfFinalArtifact;\n-        if (jkubeProject.getBuildFinalName() == null) {\n-            nameOfFinalArtifact = jkubeProject.getArtifactId() + \"-\"\n-                    + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n-        } else {\n-            nameOfFinalArtifact = jkubeProject.getBuildFinalName() + \".\" + jkubeProject.getPackaging();\n-        }\n-        File outputDirectory = new File(jkubeProject.getBuildDirectory());\n-        File finalArtifact = new File(outputDirectory, nameOfFinalArtifact);\n-        return finalArtifact.exists() ? finalArtifact : null;\n-    }\n-\n-    public static String createDefaultResourceName(String artifactId, String ... suffixes) {\n-        String suffix = StringUtils.join(suffixes, \"-\");\n-        String ret = artifactId + (suffix.length() > 0 ? \"-\" + suffix : \"\");\n-        if (ret.length() > 63) {\n-            ret = ret.substring(0,63);\n-        }\n-        return ret.toLowerCase();\n-    }\n }\n", "next_change": {"commit": "3fb81820548fa0491a90ccc649adbecacd8c5fd3", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\nindex ba49cbec..dae3abb6 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n", "chunk": "@@ -82,4 +98,12 @@ public class JkubeProjectUtil {\n         properties.putAll(System.getProperties());\n         return properties;\n     }\n+\n+    public static File getFinalOutputArtifact(JkubeProject jkubeProject) {\n+        String nameOfFinalArtifact = jkubeProject.getName() + \"-\"\n+                + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n+        File outputDirectory = new File(jkubeProject.getBuildDirectory());\n+        File finalArtifact = new File(outputDirectory, nameOfFinalArtifact);\n+        return finalArtifact.exists() ? finalArtifact : null;\n+    }\n }\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\nindex dae3abb6..e99dd945 100644\n--- a/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n+++ b/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java\n", "chunk": "@@ -100,10 +100,24 @@ public class JkubeProjectUtil {\n     }\n \n     public static File getFinalOutputArtifact(JkubeProject jkubeProject) {\n-        String nameOfFinalArtifact = jkubeProject.getName() + \"-\"\n-                + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n+        String nameOfFinalArtifact;\n+        if (jkubeProject.getBuildFinalName() == null) {\n+            nameOfFinalArtifact = jkubeProject.getArtifactId() + \"-\"\n+                    + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n+        } else {\n+            nameOfFinalArtifact = jkubeProject.getBuildFinalName() + \".\" + jkubeProject.getPackaging();\n+        }\n         File outputDirectory = new File(jkubeProject.getBuildDirectory());\n         File finalArtifact = new File(outputDirectory, nameOfFinalArtifact);\n         return finalArtifact.exists() ? finalArtifact : null;\n     }\n+\n+    public static String createDefaultResourceName(String artifactId, String ... suffixes) {\n+        String suffix = StringUtils.join(suffixes, \"-\");\n+        String ret = artifactId + (suffix.length() > 0 ? \"-\" + suffix : \"\");\n+        if (ret.length() > MAX_RESOURCE_NAME_LENGTH) {\n+            ret = ret.substring(0, MAX_RESOURCE_NAME_LENGTH);\n+        }\n+        return ret.toLowerCase();\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383958021", "body": "Is this OK?\r\n[getArtifacts](https://maven.apache.org/ref/3.5.2/apidocs/org/apache/maven/project/MavenProject.html#getArtifacts--) returns **all** dependencies in the project.\r\nJust to be sure, does `getDependenciesWithTransitive` return **all** dependencies too?", "bodyText": "Is this OK?\ngetArtifacts returns all dependencies in the project.\nJust to be sure, does getDependenciesWithTransitive return all dependencies too?", "bodyHTML": "<p dir=\"auto\">Is this OK?<br>\n<a href=\"https://maven.apache.org/ref/3.5.2/apidocs/org/apache/maven/project/MavenProject.html#getArtifacts--\" rel=\"nofollow\">getArtifacts</a> returns <strong>all</strong> dependencies in the project.<br>\nJust to be sure, does <code>getDependenciesWithTransitive</code> return <strong>all</strong> dependencies too?</p>", "author": "manusa", "createdAt": "2020-02-25T15:38:09Z", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MzkzNg==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384953936", "bodyText": "Umm, getDependencyArtifacts() returns direct dependencies", "author": "rohanKanojia", "createdAt": "2020-02-27T07:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NjM3Nw==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384956377", "bodyText": "I am using two objects which are set using getArtifacts() and getDependencyArtifacts(): \n  \n    \n      jkube/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n    \n    \n         Line 188\n      in\n      75cc07b\n    \n    \n    \n    \n\n        \n          \n           public static List<String> getDependenciesAsString(MavenProject project, boolean transitive) {", "author": "rohanKanojia", "createdAt": "2020-02-27T07:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5Njg2OQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384996869", "bodyText": "I'm asking about the first case (transitive == true), and just to make sure.\nThe question is:  does getDependenciesWithTransitive return all dependencies too?\nI don't understand your answer, you mean that this call gets delegated to > getArtifacts()?", "author": "manusa", "createdAt": "2020-02-27T09:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMDg5Mg==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r385000892", "bodyText": "getDepenenciesWithTransitive() delegates to getArtifacts() (returns all dependencies)\ngetDependencies() delegates to getDependencyArtifacts() (returns direct dependencies)", "author": "rohanKanojia", "createdAt": "2020-02-27T09:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNjY1NA==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r385006654", "bodyText": "\ud83d\udc4d", "author": "manusa", "createdAt": "2020-02-27T09:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JKubeEnricherContext.java\nsimilarity index 86%\nrename from jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java\nrename to jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JKubeEnricherContext.java\nindex dcbda3c3..e688b75d 100644\n--- a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java\n+++ b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JKubeEnricherContext.java\n", "chunk": "@@ -97,16 +97,16 @@ public class JkubeEnricherContext implements EnricherContext {\n     }\n \n     @Override\n-    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+    public List<JKubeProjectDependency> getDependencies(boolean transitive) {\n         return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();\n     }\n \n     @Override\n     public boolean hasPlugin(String groupId, String artifactId) {\n         if (groupId != null) {\n-            return JkubeProjectUtil.hasPlugin(getProject(), groupId, artifactId);\n+            return JKubeProjectUtil.hasPlugin(getProject(), groupId, artifactId);\n         } else {\n-            return JkubeProjectUtil.getPlugin(getProject(), artifactId) != null;\n+            return JKubeProjectUtil.getPlugin(getProject(), artifactId) != null;\n         }\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDMyNQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384294325", "body": "Inconsistent with the code-style in the rest of the code base, check IDE settings.", "bodyText": "Inconsistent with the code-style in the rest of the code base, check IDE settings.", "bodyHTML": "<p dir=\"auto\">Inconsistent with the code-style in the rest of the code base, check IDE settings.</p>", "author": "manusa", "createdAt": "2020-02-26T06:23:14Z", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -17,33 +17,39 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import java.lang.reflect.Method;\n import java.net.URLClassLoader;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Properties;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99c53dcc012641bb7e99a3da30d9b1331b6d548e", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex fe964361..efdb272b 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -17,39 +17,31 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.*;\n import java.util.jar.JarEntry;\n import java.util.jar.JarInputStream;\n \n-import com.fasterxml.jackson.databind.annotation.JsonAppend;\n import com.google.common.base.Objects;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.DependencyResolutionRequiredException;\n import org.apache.maven.execution.MavenSession;\n-import org.apache.maven.model.Dependency;\n import org.apache.maven.model.DistributionManagement;\n import org.apache.maven.model.Plugin;\n-import org.apache.maven.model.PluginExecution;\n import org.apache.maven.model.Site;\n import org.apache.maven.project.MavenProject;\n import org.apache.maven.settings.Server;\n import org.apache.maven.settings.Settings;\n-import org.codehaus.plexus.PlexusContainer;\n import org.codehaus.plexus.archiver.tar.TarArchiver;\n import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.jkube.kit.common.JkubeProject;\n-import org.eclipse.jkube.kit.common.JkubeProjectDependency;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.sonatype.plexus.components.sec.dispatcher.SecDispatcher;\n \n-import static org.eclipse.jkube.kit.common.util.ClassUtil.createClassLoader;\n import static org.eclipse.jkube.kit.common.util.EnvUtil.greaterOrEqualsVersion;\n \n /**\n", "next_change": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex efdb272b..de287dba 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -38,10 +38,11 @@ import org.apache.maven.settings.Settings;\n import org.codehaus.plexus.archiver.tar.TarArchiver;\n import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n+import org.eclipse.jkube.kit.common.JkubeProject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.eclipse.jkube.kit.common.util.ClassUtil.createClassLoader;\n import static org.eclipse.jkube.kit.common.util.EnvUtil.greaterOrEqualsVersion;\n \n /**\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex de287dba..0d8e4285 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -38,7 +44,10 @@ import org.apache.maven.settings.Settings;\n import org.codehaus.plexus.archiver.tar.TarArchiver;\n import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n+import org.codehaus.plexus.util.xml.Xpp3Dom;\n import org.eclipse.jkube.kit.common.JkubeProject;\n+import org.eclipse.jkube.kit.common.JkubeProjectPlugin;\n+import org.eclipse.jkube.kit.common.RegistryServerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 0d8e4285..59d80eb4 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -45,8 +45,8 @@ import org.codehaus.plexus.archiver.tar.TarArchiver;\n import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.jkube.kit.common.JkubeProject;\n-import org.eclipse.jkube.kit.common.JkubeProjectPlugin;\n+import org.eclipse.jkube.kit.common.JKubeProject;\n+import org.eclipse.jkube.kit.common.JKubeProjectPlugin;\n import org.eclipse.jkube.kit.common.RegistryServerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n", "next_change": {"commit": "717a50d5d1de69c22c0b302c9ca5709dfda1822a", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 59d80eb4..d771bccb 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -45,11 +46,6 @@ import org.codehaus.plexus.archiver.tar.TarArchiver;\n import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.jkube.kit.common.JKubeProject;\n-import org.eclipse.jkube.kit.common.JKubeProjectPlugin;\n-import org.eclipse.jkube.kit.common.RegistryServerConfiguration;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import static org.eclipse.jkube.kit.common.util.ClassUtil.createClassLoader;\n import static org.eclipse.jkube.kit.common.util.EnvUtil.greaterOrEqualsVersion;\n", "next_change": {"commit": "57a0a414b96ca74dbefe608aadc5c4a3dcfaf81b", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex d771bccb..15277e6b 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -47,7 +49,6 @@ import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n import org.codehaus.plexus.archiver.zip.ZipArchiver;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n \n-import static org.eclipse.jkube.kit.common.util.ClassUtil.createClassLoader;\n import static org.eclipse.jkube.kit.common.util.EnvUtil.greaterOrEqualsVersion;\n \n /**\n", "next_change": {"commit": "2ff316890006a31fd0d32f1c76c23bf602f2e568", "changed_code": [{"header": "diff --git a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\nindex 15277e6b..16aff547 100644\n--- a/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n+++ b/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n", "chunk": "@@ -44,89 +41,16 @@ import org.apache.maven.model.Site;\n import org.apache.maven.project.MavenProject;\n import org.apache.maven.settings.Server;\n import org.apache.maven.settings.Settings;\n-import org.codehaus.plexus.archiver.tar.TarArchiver;\n-import org.codehaus.plexus.archiver.tar.TarLongFileMode;\n-import org.codehaus.plexus.archiver.zip.ZipArchiver;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n \n import static org.eclipse.jkube.kit.common.util.EnvUtil.greaterOrEqualsVersion;\n \n /**\n  * @author roland\n- * @since 31/03/16\n  */\n public class MavenUtil {\n-\n-    private static final String DEFAULT_CONFIG_FILE_NAME = \"kubernetes.json\";\n-\n     private MavenUtil() {}\n \n-    public static boolean isKubernetesJsonArtifact(String classifier, String type) {\n-        return \"json\".equals(type) && \"kubernetes\".equals(classifier);\n-    }\n-\n-    public static boolean hasKubernetesJson(File f) throws IOException {\n-        try (FileInputStream fis = new FileInputStream(f); JarInputStream jis = new JarInputStream(fis)) {\n-            for (JarEntry entry = jis.getNextJarEntry(); entry != null; entry = jis.getNextJarEntry()) {\n-                if (entry.getName().equals(DEFAULT_CONFIG_FILE_NAME)) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Returns true if the maven project has a dependency with the given groupId and artifactId (if not null)\n-     *\n-     * @param project MavenProject object for project\n-     * @param groupId group id of project\n-     * @param artifactId artifact id of project\n-     * @return boolean value indicating whether dependency is there or not\n-     */\n-    public static boolean hasDependency(MavenProject project, String groupId, String artifactId) {\n-        return getDependencyVersion(project, groupId, artifactId) != null;\n-    }\n-\n-    /**\n-     * Returns the version associated to the dependency with the given groupId and artifactId (if present)\n-     *\n-     * @param project MavenProject object for project\n-     * @param groupId group id\n-     * @param artifactId artifact id\n-     * @return version associated to dependency\n-     */\n-    public static String getDependencyVersion(MavenProject project, String groupId, String artifactId) {\n-        Set<Artifact> artifacts = project.getArtifacts();\n-        if (artifacts != null) {\n-            for (Artifact artifact : artifacts) {\n-                String scope = artifact.getScope();\n-                if (Objects.equal(\"test\", scope)) {\n-                    continue;\n-                }\n-                if (artifactId != null && !Objects.equal(artifactId, artifact.getArtifactId())) {\n-                    continue;\n-                }\n-                if (Objects.equal(groupId, artifact.getGroupId())) {\n-                    return artifact.getVersion();\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static boolean hasPlugin(MavenProject project, String groupId, String artifactId) {\n-        return project.getPlugin(groupId + \":\" + artifactId) != null;\n-    }\n-\n-    public static boolean hasPluginOfAnyGroupId(MavenProject project, String pluginArtifact) {\n-        return getPluginOfAnyGroupId(project, pluginArtifact) != null;\n-    }\n-\n-    public static org.apache.maven.model.Plugin getPluginOfAnyGroupId(MavenProject project, String pluginArtifact) {\n-        return getPlugin(project, null, pluginArtifact);\n-    }\n-\n     /**\n      * Returns a list of {@link Plugin}\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTU0NA==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384295544", "body": "No need to add throws `IllegalStateException`  it's a RuntimeException > remove from method signature.", "bodyText": "No need to add throws IllegalStateException  it's a RuntimeException > remove from method signature.", "bodyHTML": "<p dir=\"auto\">No need to add throws <code>IllegalStateException</code>  it's a RuntimeException &gt; remove from method signature.</p>", "author": "manusa", "createdAt": "2020-02-26T06:27:54Z", "path": "jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java", "diffHunk": "@@ -36,7 +34,7 @@\n         this.directory = new File(dir);\n     }\n \n-    Result scan() throws MojoExecutionException {\n+    Result scan() throws IllegalStateException {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java b/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\nindex 702b1121..b1d6975f 100644\n--- a/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\n+++ b/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\n", "chunk": "@@ -34,7 +34,7 @@ public class FatJarDetector {\n         this.directory = new File(dir);\n     }\n \n-    Result scan() throws IllegalStateException {\n+    Result scan() {\n         // Scanning is lazy ...\n         if (result == null) {\n             if (!directory.exists()) {\n", "next_change": {"commit": "cb17d380b468d8bd6084f1789e5494907e867bb8", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java b/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\nindex b1d6975f..ff969343 100644\n--- a/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\n+++ b/jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java\n", "chunk": "@@ -15,68 +15,77 @@ package org.eclipse.jkube.generator.javaexec;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.jar.Attributes;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * Class for finding out the fat jar of a directory and provide\n  * some insights into the fat jar\n  * @author roland\n- * @since 10/11/16\n  */\n public class FatJarDetector {\n \n-    private File directory;\n+    private final File directory;\n     private Result result;\n \n-    FatJarDetector(String dir) {\n-        this.directory = new File(dir);\n+    FatJarDetector(File directory) {\n+        this.directory = directory;\n     }\n \n-    Result scan() {\n+    public Result scan() {\n+        if (!directory.exists()) {\n+            return null;\n+        }\n         // Scanning is lazy ...\n         if (result == null) {\n-            if (!directory.exists()) {\n-                // No directory to check found so we return null here ...\n-                return null;\n-            }\n-            String[] jarOrWars = directory.list((dir, name) -> name.endsWith(\".war\") || name.endsWith(\".jar\"));\n-            if (jarOrWars == null || jarOrWars.length == 0) {\n-                return null;\n-            }\n-            long maxSize = 0;\n-            for (String jarOrWar : jarOrWars) {\n-                File archiveFile = new File(directory, jarOrWar);\n-                try (JarFile archive = new JarFile(archiveFile)){\n-                    Manifest mf = archive.getManifest();\n-                    Attributes mainAttributes = mf.getMainAttributes();\n-                    if (mainAttributes != null) {\n-                        String mainClass = mainAttributes.getValue(\"Main-Class\");\n-                        if (mainClass != null) {\n-                            long size = archiveFile.length();\n-                            // Take the largest jar / war file found\n-                            if (size > maxSize) {\n-                                maxSize = size;\n-                                result = new Result(archiveFile, mainClass, mainAttributes);\n-                            }\n+            result = scanDirectory();\n+        }\n+        return result;\n+    }\n+\n+    private Result scanDirectory() {\n+        final List<File> jarOrWars = Optional.ofNullable(\n+            directory.list((dir, name) -> name.endsWith(\".war\") || name.endsWith(\".jar\")))\n+            .map(files -> Stream.of(files).filter(Objects::nonNull).map(f -> new File(directory, f)).collect(Collectors.toList()))\n+            .orElse(Collections.emptyList());\n+        Result selectedJar = null;\n+        long maxSize = 0;\n+        for (File jarOrWar : jarOrWars) {\n+            try (JarFile archive = new JarFile(jarOrWar)){\n+                final Manifest mf = archive.getManifest();\n+                if (mf != null && mf.getMainAttributes() != null) {\n+                    final Attributes mainAttributes = mf.getMainAttributes();\n+                    String mainClass = mainAttributes.getValue(\"Main-Class\");\n+                    if (mainClass != null) {\n+                        long size = jarOrWar.length();\n+                        // Take the largest jar / war file found\n+                        if (size > maxSize) {\n+                            maxSize = size;\n+                            selectedJar = new Result(jarOrWar, mainClass, mainAttributes);\n                         }\n                     }\n-                } catch (IOException e) {\n-                    throw new IllegalStateException(\"Cannot examine file \" + archiveFile + \" for the manifest\");\n                 }\n+            } catch (IOException e) {\n+                throw new IllegalStateException(\"Cannot examine file \" + jarOrWar.getName() + \" for the manifest\");\n             }\n         }\n-        return result;\n+        return selectedJar;\n     }\n \n-    public class Result {\n+    public static final class Result {\n \n         private final File archiveFile;\n         private final String mainClass;\n         private final Attributes attributes;\n \n-        public Result(File archiveFile, String mainClass, Attributes attributes) {\n+        private Result(File archiveFile, String mainClass, Attributes attributes) {\n             this.archiveFile = archiveFile;\n             this.mainClass = mainClass;\n             this.attributes = attributes;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NjI5MQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384296291", "body": "Try to **always** use `Collections.emptyList()` (typed) instead of Collections.EMPTY_LIST (raw type)", "bodyText": "Try to always use Collections.emptyList() (typed) instead of Collections.EMPTY_LIST (raw type)", "bodyHTML": "<p dir=\"auto\">Try to <strong>always</strong> use <code>Collections.emptyList()</code> (typed) instead of Collections.EMPTY_LIST (raw type)</p>", "author": "manusa", "createdAt": "2020-02-26T06:30:57Z", "path": "jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java", "diffHunk": "@@ -63,25 +60,23 @@\n     @Before\n     public void setUp() throws Exception{\n         new Expectations() {{\n-            mavenProject.getBuild();\n-            result = build;\n-            mavenProject.getPlugin(anyString);\n-            result = null;\n-            mavenProject.getVersion();\n+            jkubeProject.getPlugins();\n+            result = Collections.EMPTY_LIST;", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex 2ef5b2af..4d060fbe 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -61,7 +61,7 @@ public class JavaExecGeneratorMainClassDeterminationTest {\n     public void setUp() throws Exception{\n         new Expectations() {{\n             jkubeProject.getPlugins();\n-            result = Collections.EMPTY_LIST;\n+            result = Collections.emptyList();\n             jkubeProject.getVersion();\n             result = \"1.33.7-SNAPSHOT\";\n             jkubeProject.getBuildDirectory();\n", "next_change": {"commit": "2c2d5da4a7ac43cb36094b57f9855ebf9f341d3d", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex 4d060fbe..7aa1d0ec 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -60,13 +60,13 @@ public class JavaExecGeneratorMainClassDeterminationTest {\n     @Before\n     public void setUp() throws Exception{\n         new Expectations() {{\n-            jkubeProject.getPlugins();\n+            project.getPlugins();\n             result = Collections.emptyList();\n-            jkubeProject.getVersion();\n+            project.getVersion();\n             result = \"1.33.7-SNAPSHOT\";\n-            jkubeProject.getBuildDirectory();\n+            project.getBuildDirectory();\n             result = \"/the/directory\";\n-            jkubeProject.getOutputDirectory();\n+            project.getOutputDirectory();\n             result = \"/the/output/directory\";\n         }};\n     }\n", "next_change": {"commit": "682cc6f25ccf3e95e20832d1396fa3890f3a4e26", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex 7aa1d0ec..0f288fe6 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -49,26 +50,23 @@ public class JavaExecGeneratorMainClassDeterminationTest {\n     @Mocked\n     private JavaProject project;\n     @Mocked\n-    private ProcessorConfig processorConfig;\n-    @Mocked\n     private FatJarDetector fatJarDetector;\n     @Mocked\n     private FatJarDetector.Result fatJarDetectorResult;\n     @Mocked\n     private MainClassDetector mainClassDetector;\n+    private ProcessorConfig processorConfig;\n \n     @Before\n-    public void setUp() throws Exception{\n+    public void setUp() {\n+        processorConfig = new ProcessorConfig();\n+        // @formatter:off\n         new Expectations() {{\n-            project.getPlugins();\n-            result = Collections.emptyList();\n-            project.getVersion();\n-            result = \"1.33.7-SNAPSHOT\";\n-            project.getBuildDirectory();\n-            result = \"/the/directory\";\n-            project.getOutputDirectory();\n-            result = \"/the/output/directory\";\n+            project.getVersion(); result = \"1.33.7-SNAPSHOT\";\n+            project.getBuildDirectory(); result = \"/the/directory\";\n+            project.getOutputDirectory(); result = \"/the/output/directory\";\n         }};\n+        // @formatter:on\n     }\n \n     /**\n", "next_change": {"commit": "85f507ef25ed5c3b9284db893032eaec0c963451", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex 0f288fe6..6e8c9d01 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -63,7 +63,6 @@ public class JavaExecGeneratorMainClassDeterminationTest {\n         // @formatter:off\n         new Expectations() {{\n             project.getVersion(); result = \"1.33.7-SNAPSHOT\";\n-            project.getBuildDirectory(); result = \"/the/directory\";\n             project.getOutputDirectory(); result = \"/the/output/directory\";\n         }};\n         // @formatter:on\n", "next_change": {"commit": "7f3144955b33b2ee99719cc023f040f2fff9acd7", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex 6e8c9d01..c230f3de 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -57,8 +60,8 @@ public class JavaExecGeneratorMainClassDeterminationTest {\n     private MainClassDetector mainClassDetector;\n     private ProcessorConfig processorConfig;\n \n-    @Before\n-    public void setUp() {\n+    @BeforeEach\n+    void setUp() {\n         processorConfig = new ProcessorConfig();\n         // @formatter:off\n         new Expectations() {{\n", "next_change": {"commit": "40011a66e79bff50df790e3d749d75a6a643bb0d", "changed_code": [{"header": "diff --git a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\nindex c230f3de..7968f937 100644\n--- a/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n+++ b/jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java\n", "chunk": "@@ -44,33 +47,24 @@ import static org.assertj.core.api.Assertions.assertThat;\n  *\n  * @author Oliver Weise\n  */\n-\n-@SuppressWarnings({\"ResultOfMethodCallIgnored\", \"unused\"})\n class JavaExecGeneratorMainClassDeterminationTest {\n-\n-    @Mocked\n     private KitLogger log;\n-    @Mocked\n     private JavaProject project;\n-    @Mocked\n     private FatJarDetector fatJarDetector;\n-    @Mocked\n     private FatJarDetector.Result fatJarDetectorResult;\n-    @Mocked\n-    private MainClassDetector mainClassDetector;\n     private ProcessorConfig processorConfig;\n-\n     @BeforeEach\n-    void setUp() {\n+    public void setUp() {\n+        log = mock(KitLogger.class);\n+        project = mock(JavaProject.class);\n+        fatJarDetector = mock(FatJarDetector.class);\n+        fatJarDetectorResult = mock(FatJarDetector.Result.class);\n         processorConfig = new ProcessorConfig();\n-        // @formatter:off\n-        new Expectations() {{\n-            project.getVersion(); result = \"1.33.7-SNAPSHOT\";\n-            project.getOutputDirectory(); result = \"/the/output/directory\";\n-        }};\n-        // @formatter:on\n+        when(project.getVersion()).thenReturn(\"1.33.7-SNAPSHOT\");\n+        when(project.getOutputDirectory()).thenReturn(new File(\"/the/output/directory\"));\n     }\n \n+\n     /**\n      * The main class is determined via config in a non-fat-jar deployment\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNzIzMQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384337231", "body": "Constant, please use correct letter-case: `JKUBE_PLUGINS`", "bodyText": "Constant, please use correct letter-case: JKUBE_PLUGINS", "bodyHTML": "<p dir=\"auto\">Constant, please use correct letter-case: <code>JKUBE_PLUGINS</code></p>", "author": "manusa", "createdAt": "2020-02-26T08:32:23Z", "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java", "diffHunk": "@@ -63,11 +63,11 @@ public String apply(@Nullable String input) {\n             return input == null ? null : input.trim();\n         }\n     };\n-    protected static final String[] jkubePlugins = {\"org.eclipse.jkube:k8s-maven-plugin\", \"org.eclipse.jkube:oc-maven-plugin\"};\n+    protected static final String[] jkubePlugins = {\"k8s-maven-plugin\", \"oc-maven-plugin\"};", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\nindex b922ad23..ccd1698d 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n", "chunk": "@@ -63,7 +63,7 @@ public class VertxHealthCheckEnricher extends AbstractHealthCheckEnricher {\n             return input == null ? null : input.trim();\n         }\n     };\n-    protected static final String[] jkubePlugins = {\"k8s-maven-plugin\", \"oc-maven-plugin\"};\n+    protected static final String[] JKUBE_PLUGINS = {\"k8s-maven-plugin\", \"oc-maven-plugin\"};\n \n     public static final String ERROR_MESSAGE = \"Location of %s should return a String but found %s with value %s\";\n \n", "next_change": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\nindex ccd1698d..62039608 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n", "chunk": "@@ -67,7 +67,7 @@ public class VertxHealthCheckEnricher extends AbstractHealthCheckEnricher {\n \n     public static final String ERROR_MESSAGE = \"Location of %s should return a String but found %s with value %s\";\n \n-    public VertxHealthCheckEnricher(JkubeEnricherContext buildContext) {\n+    public VertxHealthCheckEnricher(JKubeEnricherContext buildContext) {\n         super(buildContext, \"jkube-healthcheck-vertx\");\n     }\n \n", "next_change": {"commit": "0d02f1ebc003586d10a8a6ba52861218dfca1411", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\nindex 62039608..2336f1b4 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n", "chunk": "@@ -63,7 +63,7 @@ public class VertxHealthCheckEnricher extends AbstractHealthCheckEnricher {\n             return input == null ? null : input.trim();\n         }\n     };\n-    protected static final String[] JKUBE_PLUGINS = {\"k8s-maven-plugin\", \"oc-maven-plugin\"};\n+    protected static final String[] JKUBE_PLUGINS = {\"kubernetes-maven-plugin\", \"openshift-maven-plugin\"};\n \n     public static final String ERROR_MESSAGE = \"Location of %s should return a String but found %s with value %s\";\n \n", "next_change": {"commit": "717a50d5d1de69c22c0b302c9ca5709dfda1822a", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\nindex 2336f1b4..653798f7 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n", "chunk": "@@ -56,13 +55,7 @@ public class VertxHealthCheckEnricher extends AbstractHealthCheckEnricher {\n     private static final String SCHEME_HTTP = \"HTTP\";\n \n     private static final String VERTX_HEALTH = \"vertx.health.\";\n-    private static final Function<? super String, String> TRIM = new Function<String, String>() {\n-        @Nullable\n-        @Override\n-        public String apply(@Nullable String input) {\n-            return input == null ? null : input.trim();\n-        }\n-    };\n+    private static final Function<? super String, String> TRIM = input -> input == null ? null : input.trim();\n     protected static final String[] JKUBE_PLUGINS = {\"kubernetes-maven-plugin\", \"openshift-maven-plugin\"};\n \n     public static final String ERROR_MESSAGE = \"Location of %s should return a String but found %s with value %s\";\n", "next_change": {"commit": "682cc6f25ccf3e95e20832d1396fa3890f3a4e26", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\nindex 653798f7..4dcab4ff 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java\n", "chunk": "@@ -61,7 +66,27 @@ public class VertxHealthCheckEnricher extends AbstractHealthCheckEnricher {\n     public static final String ERROR_MESSAGE = \"Location of %s should return a String but found %s with value %s\";\n \n     public VertxHealthCheckEnricher(JKubeEnricherContext buildContext) {\n-        super(buildContext, \"jkube-healthcheck-vertx\");\n+        super(buildContext, ENRICHER_NAME);\n+    }\n+\n+    @AllArgsConstructor\n+    private enum Config implements Configs.Config {\n+\n+        TYPE(\"type\"),\n+        PORT(\"port\"),\n+        PORT_NAME(\"port-name\"),\n+        PATH(\"path\"),\n+        SCHEME(\"scheme\"),\n+        INITIAL_DELAY(\"initial-delay\"),\n+        PERIOD(\"period\"),\n+        TIMEOUT(\"timeout\"),\n+        SUCCESS_THRESHOLD(\"success-threshold\"),\n+        FAILURE_THRESHOLD(\"failure-threshold\"),\n+        COMMAND(\"command\"),\n+        HEADERS(\"headers\");\n+\n+        @Getter\n+        protected String key;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzODY3OQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384338679", "body": "Please, see other comments regarding specific POJOS for configuration entities and their deserialization.\r\n\r\nDeserializing something into a Map and then accessing keys through String will eventually end up in a very difficult to detect BUG.", "bodyText": "Please, see other comments regarding specific POJOS for configuration entities and their deserialization.\nDeserializing something into a Map and then accessing keys through String will eventually end up in a very difficult to detect BUG.", "bodyHTML": "<p dir=\"auto\">Please, see other comments regarding specific POJOS for configuration entities and their deserialization.</p>\n<p dir=\"auto\">Deserializing something into a Map and then accessing keys through String will eventually end up in a very difficult to detect BUG.</p>", "author": "manusa", "createdAt": "2020-02-26T08:35:30Z", "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java", "diffHunk": "@@ -32,17 +34,21 @@ public String getConfigPathPropertyName() {\n     }\n \n     @Override\n-    public String getConfigPathFromProject(MavenProject project) {\n-        Plugin plugin = project.getPlugin(Constants.VERTX_MAVEN_PLUGIN_GROUP + \":\" + Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n-        if (plugin == null) {\n-            return null;\n-        }\n+    public String getConfigPathFromProject(JkubeProject project) {\n+        JkubeProjectPlugin plugin = JkubeProjectUtil.getPlugin(project, Constants.VERTX_MAVEN_PLUGIN_GROUP, Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n \n-        Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();\n-        if (configuration == null) {\n-            return null;\n+        if (plugin != null) {\n+            Map<String, Object> pluginConfiguration = plugin.getConfiguration();", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6838afd09efd175941a441746138fc9b8223f23d", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\nindex 15d8ea42..30678a14 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\n", "chunk": "@@ -38,16 +44,17 @@ public class VertxPortsExtractor extends AbstractPortsExtractor {\n         JkubeProjectPlugin plugin = JkubeProjectUtil.getPlugin(project, Constants.VERTX_MAVEN_PLUGIN_GROUP, Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n \n         if (plugin != null) {\n-            Map<String, Object> pluginConfiguration = plugin.getConfiguration();\n-            /*\n-             * During deserialization into JkubeProjectPlugin null configuration gets converted to null string hence\n-             * this check.\n-             */\n-            if (pluginConfiguration == null) {\n-                return null;\n+            try {\n+                Object pluginConfiguration = plugin.getConfiguration();\n+                Xpp3Dom configuration = Xpp3DomBuilder.build(new StringReader(pluginConfiguration.toString()));\n+                if (configuration == null) {\n+                    return null;\n+                }\n+                Xpp3Dom config = configuration.getChild(\"config\");\n+                return config != null ? config.getValue() : null;\n+            } catch (IOException | XmlPullParserException exception) {\n+                log.warn(\"Error in parsing plugin configuration: \", exception);\n             }\n-            Map<String, Object> config = (Map<String, Object>)pluginConfiguration.get(\"config\");\n-            return config != null ? config.get(\"vertxConfig\").toString() : null;\n         }\n         return null;\n     }\n", "next_change": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\nindex 30678a14..15d8ea42 100644\n--- a/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\n+++ b/jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java\n", "chunk": "@@ -44,17 +38,16 @@ public class VertxPortsExtractor extends AbstractPortsExtractor {\n         JkubeProjectPlugin plugin = JkubeProjectUtil.getPlugin(project, Constants.VERTX_MAVEN_PLUGIN_GROUP, Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n \n         if (plugin != null) {\n-            try {\n-                Object pluginConfiguration = plugin.getConfiguration();\n-                Xpp3Dom configuration = Xpp3DomBuilder.build(new StringReader(pluginConfiguration.toString()));\n-                if (configuration == null) {\n-                    return null;\n-                }\n-                Xpp3Dom config = configuration.getChild(\"config\");\n-                return config != null ? config.getValue() : null;\n-            } catch (IOException | XmlPullParserException exception) {\n-                log.warn(\"Error in parsing plugin configuration: \", exception);\n+            Map<String, Object> pluginConfiguration = plugin.getConfiguration();\n+            /*\n+             * During deserialization into JkubeProjectPlugin null configuration gets converted to null string hence\n+             * this check.\n+             */\n+            if (pluginConfiguration == null) {\n+                return null;\n             }\n+            Map<String, Object> config = (Map<String, Object>)pluginConfiguration.get(\"config\");\n+            return config != null ? config.get(\"vertxConfig\").toString() : null;\n         }\n         return null;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTc2Nw==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384341767", "body": "Rename this variable", "bodyText": "Rename this variable", "bodyHTML": "<p dir=\"auto\">Rename this variable</p>", "author": "manusa", "createdAt": "2020-02-26T08:42:06Z", "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "diffHunk": "@@ -48,9 +47,7 @@\n \n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n-    private RepositorySystem repositorySystem;\n-\n-    private MavenProject mavenProject;\n+    private JkubeProject mavenProject;", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\nindex ede2d3c4..080563c1 100644\n--- a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n+++ b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n", "chunk": "@@ -47,7 +47,7 @@ public class JkubeServiceHub {\n \n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n-    private JkubeProject mavenProject;\n+    private JkubeProject jkubeProject;\n \n     /**\n      /*\n", "next_change": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\nsimilarity index 93%\nrename from jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\nrename to jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\nindex 080563c1..e87c15c1 100644\n--- a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n+++ b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\n", "chunk": "@@ -47,7 +47,7 @@ public class JkubeServiceHub {\n \n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n-    private JkubeProject jkubeProject;\n+    private JKubeProject jkubeProject;\n \n     /**\n      /*\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTg3MA==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384341870", "body": "Rename this variable too", "bodyText": "Rename this variable too", "bodyHTML": "<p dir=\"auto\">Rename this variable too</p>", "author": "manusa", "createdAt": "2020-02-26T08:42:20Z", "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "diffHunk": "@@ -154,12 +150,7 @@ public Builder buildServiceConfig(BuildService.BuildServiceConfig buildServiceCo\n             return this;\n         }\n \n-        public Builder repositorySystem(RepositorySystem repositorySystem) {\n-            hub.repositorySystem = repositorySystem;\n-            return this;\n-        }\n-\n-        public Builder mavenProject(MavenProject mavenProject) {\n+        public Builder jkubeProject(JkubeProject mavenProject) {", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\nindex ede2d3c4..080563c1 100644\n--- a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n+++ b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n", "chunk": "@@ -150,8 +150,8 @@ public class JkubeServiceHub {\n             return this;\n         }\n \n-        public Builder jkubeProject(JkubeProject mavenProject) {\n-            hub.mavenProject = mavenProject;\n+        public Builder jkubeProject(JkubeProject jkubeProject) {\n+            hub.jkubeProject = jkubeProject;\n             return this;\n         }\n \n", "next_change": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\nsimilarity index 93%\nrename from jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\nrename to jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\nindex 080563c1..e87c15c1 100644\n--- a/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java\n+++ b/jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JKubeServiceHub.java\n", "chunk": "@@ -150,12 +150,12 @@ public class JkubeServiceHub {\n             return this;\n         }\n \n-        public Builder jkubeProject(JkubeProject jkubeProject) {\n+        public Builder jkubeProject(JKubeProject jkubeProject) {\n             hub.jkubeProject = jkubeProject;\n             return this;\n         }\n \n-        public JkubeServiceHub build() {\n+        public JKubeServiceHub build() {\n             hub.init();\n             return hub;\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MzMzNQ==", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384343335", "body": "Rename variable", "bodyText": "Rename variable", "bodyHTML": "<p dir=\"auto\">Rename variable</p>", "author": "manusa", "createdAt": "2020-02-26T08:45:12Z", "path": "jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java", "diffHunk": "@@ -48,10 +47,7 @@\n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n     @Mocked\n-    private MavenProject mavenProject;\n-\n-    @Mocked\n-    private RepositorySystem repositorySystem;\n+    private JkubeProject mavenProject;", "originalCommit": "ea7a738d493e96953c2f6ec07727a198ac3aa707", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d06f9a575e5e662e38af1eccfe96e355c80570", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java b/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java\nindex 6de34900..889a98ff 100644\n--- a/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java\n+++ b/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java\n", "chunk": "@@ -47,7 +47,7 @@ public class JkubeServiceHubTest {\n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n     @Mocked\n-    private JkubeProject mavenProject;\n+    private JkubeProject jkubeProject;\n \n     @Before\n     public void init() throws Exception {\n", "next_change": {"commit": "24b3e7eeec5845c0bfc0ff7b34ee2cc8cca4477b", "changed_code": [{"header": "diff --git a/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java b/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JKubeServiceHubTest.java\nsimilarity index 90%\nrename from jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java\nrename to jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JKubeServiceHubTest.java\nindex 889a98ff..405de99c 100644\n--- a/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java\n+++ b/jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JKubeServiceHubTest.java\n", "chunk": "@@ -47,7 +47,7 @@ public class JkubeServiceHubTest {\n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n     @Mocked\n-    private JkubeProject jkubeProject;\n+    private JKubeProject jkubeProject;\n \n     @Before\n     public void init() throws Exception {\n", "next_change": null}]}}]}}, {"oid": "75cc07b3a796f7e60011e534be94429c84b0cb30", "url": "https://github.com/eclipse/jkube/commit/75cc07b3a796f7e60011e534be94429c84b0cb30", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-27T07:35:41Z", "type": "forcePushed"}, {"oid": "9264da6540cb15c6e4c09d9912a7432b083ea5af", "url": "https://github.com/eclipse/jkube/commit/9264da6540cb15c6e4c09d9912a7432b083ea5af", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-27T07:45:04Z", "type": "forcePushed"}, {"oid": "f3849e48473625b9ba00aedfd2ed4d7990346b75", "url": "https://github.com/eclipse/jkube/commit/f3849e48473625b9ba00aedfd2ed4d7990346b75", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-27T10:30:43Z", "type": "commit"}, {"oid": "f3849e48473625b9ba00aedfd2ed4d7990346b75", "url": "https://github.com/eclipse/jkube/commit/f3849e48473625b9ba00aedfd2ed4d7990346b75", "message": "Removed common-maven/ from build/ module\n\n+ Got rid of plexus dependency", "committedDate": "2020-02-27T10:30:43Z", "type": "forcePushed"}]}