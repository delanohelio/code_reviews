{"pr_number": 26976, "pr_title": "Implement find all references API ", "pr_author": "pubudu91", "pr_createdAt": "2020-11-17T09:29:15Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976", "timeline": [{"oid": "342a47a2f33aeb7f5c15fe4e172f69135d5a5f9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/342a47a2f33aeb7f5c15fe4e172f69135d5a5f9e", "message": "Make project root path system-independent", "committedDate": "2020-11-17T14:18:03Z", "type": "forcePushed"}, {"oid": "65dbad7389cacf594955971bbd02e2b9b2857655", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65dbad7389cacf594955971bbd02e2b9b2857655", "message": "Make project root path system-independent", "committedDate": "2020-11-17T15:04:27Z", "type": "forcePushed"}, {"oid": "8acd13358cf2566f6915db57b9edc272a82a81c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8acd13358cf2566f6915db57b9edc272a82a81c5", "message": "Make project root path system-independent", "committedDate": "2020-11-17T18:22:45Z", "type": "forcePushed"}, {"oid": "ed48b8497468f7b8280396f45555374d935091b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed48b8497468f7b8280396f45555374d935091b5", "message": "Make project root path system-independent", "committedDate": "2020-11-17T18:49:22Z", "type": "forcePushed"}, {"oid": "23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "message": "Make project root path system-independent", "committedDate": "2020-11-17T19:41:38Z", "type": "forcePushed"}, {"oid": "6df933a636ff707ffb6195d6331964f4bc04e150", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6df933a636ff707ffb6195d6331964f4bc04e150", "message": "Use a different module for module prefix test", "committedDate": "2020-11-18T05:28:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3NDM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r525774362", "body": "shall we rename the API to `references` ?", "bodyText": "shall we rename the API to references ?", "bodyHTML": "<p dir=\"auto\">shall we rename the API to <code>references</code> ?</p>", "author": "nadeeshaan", "createdAt": "2020-11-18T04:12:46Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(String fileName, LinePosition position);", "originalCommit": "23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a99a41f00b29b891875938e359661e56316024", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 9326f4f7f3d..6f37e91f788 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -59,16 +58,6 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n-    /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n-     *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n-     * @return A {@link List} of line ranges of all the references\n-     */\n-    List<Location> allReferences(String fileName, LinePosition position);\n-\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 6f37e91f788..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -58,6 +59,14 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the module.\n+     *\n+     * @param symbol Symbol for which the references are looked up\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(Symbol symbol);\n+\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "2784b614e073ebbedda51480a46abe71daf8f769", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c16f7cb8704..b14db7c77de 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -73,11 +97,10 @@ public interface SemanticModel {\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> type(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex b14db7c77de..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceDocument The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526685043", "body": "Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query `references()` through a Symbol as input?", "bodyText": "Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query references() through a Symbol as input?", "bodyHTML": "<p dir=\"auto\">Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query <code>references()</code> through a Symbol as input?</p>", "author": "rasika", "createdAt": "2020-11-19T08:44:58Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "originalCommit": "87a60f97177101ae991bca821ba1bc3edf222839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MDg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526770894", "bodyText": "I think @rasika 's concern is a valid requirement. There is a catch though, which is the performance. With the symbol being an input then we query the symbol API and then again query the references API.", "author": "nadeeshaan", "createdAt": "2020-11-19T10:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxOTM4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526819380", "bodyText": "This is what we talked about having an integration layer between the project API and the semantic API for right? Can definitely add another API which accepts a symbol as the input. In fact, I tried that approach first, and then reverted to position. From a performance POV, I don't think it'll be an issue since we don't need to query the symbol API again.", "author": "pubudu91", "createdAt": "2020-11-19T12:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NjEwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528496104", "bodyText": "Since now we allow Symbol as input, i think rest of the query can be possible with the introduction of the integration layer.", "author": "rasika", "createdAt": "2020-11-23T06:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b1a99a41f00b29b891875938e359661e56316024", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..5bf0376d9d1 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -155,26 +153,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n      * {@inheritDoc}\n      */\n     @Override\n-    public List<Location> references(String fileName, LinePosition position) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n-        SymbolFinder symbolFinder = new SymbolFinder();\n-        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n-\n-        if (symbolAtCursor == null) {\n-            return Collections.unmodifiableList(new ArrayList<>());\n-        }\n-\n-        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n-\n-        ReferenceFinder refFinder = new ReferenceFinder();\n-        return refFinder.findReferences(node, symbolAtCursor);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public Optional<TypeSymbol> getType(String fileName, LineRange range) {\n+    public Optional<TypeSymbol> type(String fileName, LineRange range) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n         NodeFinder nodeFinder = new NodeFinder();\n         BLangNode node = nodeFinder.lookup(compilationUnit, range);\n", "next_change": {"commit": "fb84c7ba8c675950d83ec6996419d6296defc8da", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 5bf0376d9d1..dedcffb3d9a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -153,8 +164,45 @@ public class BallerinaSemanticModel implements SemanticModel {\n      * {@inheritDoc}\n      */\n     @Override\n-    public Optional<TypeSymbol> type(String fileName, LineRange range) {\n+    public List<Location> references(Symbol symbol) {\n+        Location symbolLocation = symbol.location();\n+\n+        // Assumption is that the location will be null for regular type symbols\n+        if (symbolLocation == null) {\n+            return Collections.unmodifiableList(new ArrayList<>());\n+        }\n+\n+        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolLocation.lineRange());\n+\n+        ReferenceFinder refFinder = new ReferenceFinder();\n+        return refFinder.findReferences(node, getInternalSymbol(symbol));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n+\n+        if (symbolAtCursor == null) {\n+            return Collections.unmodifiableList(new ArrayList<>());\n+        }\n+\n+        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n+\n+        ReferenceFinder refFinder = new ReferenceFinder();\n+        return refFinder.findReferences(node, symbolAtCursor);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Optional<TypeSymbol> type(LineRange range) {\n+        BLangCompilationUnit compilationUnit = getCompilationUnit(range.filePath());\n         NodeFinder nodeFinder = new NodeFinder();\n         BLangNode node = nodeFinder.lookup(compilationUnit, range);\n \n", "next_change": {"commit": "0c7e425f53961488e4a9edb8256f0151a23aa7bb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex dedcffb3d9a..4dd9ba87656 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -210,7 +225,21 @@ public class BallerinaSemanticModel implements SemanticModel {\n             return Optional.empty();\n         }\n \n-        return Optional.ofNullable(typesFactory.getTypeDescriptor(node.type));\n+        return Optional.ofNullable(typesFactory.getTypeDescriptor(node.getBType()));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Optional<TypeSymbol> type(Node node) {\n+        Optional<Location> nodeIdentifierLocation = node.apply(new SyntaxNodeToLocationMapper());\n+\n+        if (nodeIdentifierLocation.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        return type(node.location().lineRange());\n     }\n \n     /**\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 4dd9ba87656..7240782b5a6 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -242,6 +259,17 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return type(node.location().lineRange());\n     }\n \n+    @Override\n+    public Optional<TypeSymbol> typeOf(Node node) {\n+        Optional<Location> nodeIdentifierLocation = node.apply(new SyntaxNodeToLocationMapper());\n+\n+        if (nodeIdentifierLocation.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        return typeOf(node.location().lineRange());\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n", "next_change": null}]}}]}}]}}]}}, {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/089cbfe097f2b6c634be23a0627e650227db01ef", "message": "Add new API to get the semantic model of the specified module", "committedDate": "2020-11-19T20:36:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTQzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391434", "body": "We could use symTag to check for `BPackageSymbol` and `BAnnotationSymbol`", "bodyText": "We could use symTag to check for BPackageSymbol and BAnnotationSymbol", "bodyHTML": "<p dir=\"auto\">We could use symTag to check for <code>BPackageSymbol</code> and <code>BAnnotationSymbol</code></p>", "author": "SupunS", "createdAt": "2020-11-20T04:32:26Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -235,7 +256,8 @@ private BLangCompilationUnit getCompilationUnit(String srcFile) {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n+                && !(symbol instanceof BAnnotationSymbol);", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a99a41f00b29b891875938e359661e56316024", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..5bf0376d9d1 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -256,8 +235,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n-                && !(symbol instanceof BAnnotationSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 5bf0376d9d1..da96b49e1e9 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -235,7 +257,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n+                && !(symbol instanceof BAnnotationSymbol);\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "76f3510f7247cde2edf8bdda550f8bfad112f403", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex da96b49e1e9..ccdb35698e7 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -257,8 +277,16 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n-                && !(symbol instanceof BAnnotationSymbol);\n+        return symbol instanceof BTypeSymbol && !Symbols.isTagOn(symbol, PACKAGE)\n+                && !Symbols.isTagOn(symbol, ANNOTATION);\n+    }\n+\n+    private BSymbol getInternalSymbol(Symbol symbol) {\n+        if (symbol.kind() == TYPE) {\n+            return ((AbstractTypeSymbol) symbol).getBType().tsymbol;\n+        }\n+\n+        return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "ba5aeb3c277e5d2e875e5ccd580ecdfe20a2de21", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex ccdb35698e7..0e1bd8cbf92 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -289,6 +299,11 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n+    private BPackageSymbol getModuleSymbol(BLangCompilationUnit compilationUnit) {\n+        return compilationUnit.getSourceKind() == REGULAR_SOURCE ? bLangPackage.symbol :\n+                bLangPackage.getTestablePkg().symbol;\n+    }\n+\n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n         int startLine = range.startLine().line();\n         int startOffset = range.startLine().offset();\n", "next_change": {"commit": "8b4f343cb20d66f5e5787480b3a0fc1094f4516a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 0e1bd8cbf92..80fd54fd1e0 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -307,13 +458,74 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n         int startLine = range.startLine().line();\n         int startOffset = range.startLine().offset();\n+        int endLine = range.endLine().line();\n+        int endOffset = range.endLine().offset();\n \n         int specifiedStartLine = specifiedRange.startLine().line();\n         int specifiedEndLine = specifiedRange.endLine().line();\n         int specifiedStartOffset = specifiedRange.startLine().offset();\n         int specifiedEndOffset = specifiedRange.endLine().offset();\n \n-        return startLine >= specifiedStartLine && startLine <= specifiedEndLine &&\n-                startOffset >= specifiedStartOffset && startOffset <= specifiedEndOffset;\n+        return (startLine == specifiedStartLine && startOffset >= specifiedStartOffset\n+                || startLine > specifiedStartLine)\n+                && (endLine == specifiedEndLine && endOffset <= specifiedEndOffset || endLine < specifiedEndLine);\n+    }\n+\n+    private void addToCompiledSymbols(Set<Symbol> compiledSymbols, Scope.ScopeEntry scopeEntry, Location cursorPos,\n+                                      Name name, BSymbol symbolEnvScopeOwner, Set<DiagnosticState> states) {\n+        if (scopeEntry == null || scopeEntry.symbol == null || isFilteredVarSymbol(scopeEntry.symbol, states)) {\n+            return;\n+        }\n+\n+        BSymbol symbol = scopeEntry.symbol;\n+        if ((hasCursorPosPassedSymbolPos(symbol, cursorPos) || isImportedSymbol(symbol))\n+                && !isServiceDeclSymbol(symbol)) {\n+            Symbol compiledSymbol;\n+            // TODO: Fix #31808 and remove this if-check\n+            if (symbol.getKind() == SymbolKind.PACKAGE) {\n+                compiledSymbol = symbolFactory.getBCompiledSymbol(symbol, name.getValue());\n+            } else {\n+                compiledSymbol = symbolFactory.getBCompiledSymbol(symbol, symbol.getOriginalName().getValue());\n+            }\n+\n+            if (compiledSymbol == null || compiledSymbols.contains(compiledSymbol)) {\n+                return;\n+            }\n+\n+            if (isFieldSymbol(compiledSymbol)) {\n+                BSymbol scopeEntryOwner = scopeEntry.symbol.owner;\n+                // If the current scope entry symbol is a child symbol of the enclosing node, and if the compiled\n+                // symbol is a field symbol, it can be determined that the cursor is within the field context.\n+                if (symbolEnvScopeOwner.getName().equals(scopeEntryOwner.getName())\n+                        && symbolEnvScopeOwner.pkgID.equals(scopeEntryOwner.pkgID)\n+                        && symbolEnvScopeOwner.getPosition().equals(scopeEntryOwner.getPosition())) {\n+                    return;\n+                }\n+            }\n+\n+            compiledSymbols.add(compiledSymbol);\n+        }\n+        addToCompiledSymbols(compiledSymbols, scopeEntry.next, cursorPos, name, symbolEnvScopeOwner, states);\n+    }\n+\n+    private boolean isFieldSymbol(Symbol symbol) {\n+        return symbol.kind() == CLASS_FIELD || symbol.kind() == OBJECT_FIELD || symbol.kind() == RECORD_FIELD;\n+    }\n+\n+    private boolean isServiceDeclSymbol(BSymbol symbol) {\n+        return symbol.kind == SymbolKind.SERVICE;\n+    }\n+\n+    private boolean isFilteredVarSymbol(BSymbol symbol, Set<DiagnosticState> states) {\n+        return symbol instanceof BVarSymbol && !states.contains(((BVarSymbol) symbol).state);\n+    }\n+\n+    private boolean isObjectConstructorExpr(BLangNode node) {\n+        return node instanceof BLangClassDefinition && ((BLangClassDefinition) node).flagSet.contains(Flag.OBJECT_CTOR);\n+    }\n+\n+    private boolean isAnonFunctionExpr(BLangNode node) {\n+        return (node instanceof BLangFunction && ((BLangFunction) node).flagSet.contains(Flag.LAMBDA))\n+                || node instanceof BLangArrowFunction;\n     }\n }\n", "next_change": {"commit": "fd243d6f107d94b27afc02ae297a4f0c7fe43271", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 80fd54fd1e0..1c032b6fea2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -528,4 +573,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return (node instanceof BLangFunction && ((BLangFunction) node).flagSet.contains(Flag.LAMBDA))\n                 || node instanceof BLangArrowFunction;\n     }\n+\n+    private boolean isNonNamedArgExprNode(BLangNode node) {\n+        return node instanceof BLangExpression && !(node instanceof BLangNamedArgsExpression);\n+    }\n }\n", "next_change": {"commit": "d8eb4575dea7694bdf4f2e865f02200b4eb24938", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 1c032b6fea2..395fc22c3e6 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -577,4 +580,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean isNonNamedArgExprNode(BLangNode node) {\n         return node instanceof BLangExpression && !(node instanceof BLangNamedArgsExpression);\n     }\n+\n+    private boolean isPackageImportedOnTheCompUnit(BSymbol symbol, String compUnit) {\n+        return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n+    }\n }\n", "next_change": {"commit": "a61d5a607bb1f9411ba8fed49c6967100232e72e", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 395fc22c3e6..9cce7646f77 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -584,4 +631,12 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean isPackageImportedOnTheCompUnit(BSymbol symbol, String compUnit) {\n         return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n     }\n+\n+    private static NonTerminalNode findNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n+        TextDocument textDocument = syntaxTree.textDocument();\n+        int start = textDocument.textPositionFrom(linePosition);\n+        int end = textDocument.textPositionFrom(linePosition);\n+        return ((ModulePartNode) syntaxTree.rootNode()).findNode(TextRange.from(start, end - start), true);\n+    }\n+\n }\n", "next_change": {"commit": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 9cce7646f77..9703167f473 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -632,7 +651,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n     }\n \n-    private static NonTerminalNode findNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n+    private static NonTerminalNode findInnerMostNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n         TextDocument textDocument = syntaxTree.textDocument();\n         int start = textDocument.textPositionFrom(linePosition);\n         int end = textDocument.textPositionFrom(linePosition);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391971", "body": "I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..\r\nThen it reads as \"give me the references of this symbol\"", "bodyText": "I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..\nThen it reads as \"give me the references of this symbol\"", "bodyHTML": "<p dir=\"auto\">I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..<br>\nThen it reads as \"give me the references of this symbol\"</p>", "author": "SupunS", "createdAt": "2020-11-20T04:34:51Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, LinePosition position);", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740470", "bodyText": "Added an overloaded version of this which takes a Symbol.", "author": "pubudu91", "createdAt": "2020-11-20T14:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1a99a41f00b29b891875938e359661e56316024", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex a09007b8c6f..6f37e91f788 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -59,16 +58,6 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n-    /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n-     *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n-     * @return A {@link List} of line ranges of all the references\n-     */\n-    List<Location> references(String fileName, LinePosition position);\n-\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 6f37e91f788..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -58,6 +59,14 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the module.\n+     *\n+     * @param symbol Symbol for which the references are looked up\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(Symbol symbol);\n+\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "2784b614e073ebbedda51480a46abe71daf8f769", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c16f7cb8704..b14db7c77de 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -73,11 +97,10 @@ public interface SemanticModel {\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> type(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex b14db7c77de..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceDocument The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527392668", "body": "unused method?", "bodyText": "unused method?", "bodyHTML": "<p dir=\"auto\">unused method?</p>", "author": "SupunS", "createdAt": "2020-11-20T04:37:32Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java", "diffHunk": "@@ -108,6 +110,10 @@ public boolean isLangLib() {\n         return isLangLib;\n     }\n \n+    public BSymbol getInternalSymbol() {", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDcxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740716", "bodyText": "In use, after the addition of the above mentioned API.", "author": "pubudu91", "createdAt": "2020-11-20T14:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "76f3510f7247cde2edf8bdda550f8bfad112f403", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 5dd034d85ea..05d9dac4b16 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,15 +101,6 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n-    /**\n-     * Whether the symbol is a langlib symbol.\n-     *\n-     * @return {@link Boolean} whether langlib or not\n-     */\n-    public boolean isLangLib() {\n-        return isLangLib;\n-    }\n-\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": {"commit": "2e8c0495150bdfd3c4cac483cb6dc00ced8ac5cb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 05d9dac4b16..7b3ada948d3 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,6 +99,29 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof Symbol)) {\n+            return false;\n+        }\n+\n+        Symbol symbol = (Symbol) obj;\n+\n+        return this.name().equals(symbol.name())\n+                && this.moduleID().equals(symbol.moduleID())\n+                && this.kind().equals(symbol.kind())\n+                && this.location().lineRange().equals(symbol.location().lineRange());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(this.name(), this.moduleID(), this.kind(), this.location().lineRange());\n+    }\n+\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": {"commit": "b18d32f2634692d46e42437c1291039108ddc7eb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 7b3ada948d3..b5ad0144160 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -126,7 +124,7 @@ public class BallerinaSymbol implements Symbol {\n         return this.internalSymbol;\n     }\n \n-    private Documentation getDocAttachment(BSymbol symbol) {\n+    Documentation getDocAttachment(BSymbol symbol) {\n         return symbol == null ? null : new BallerinaDocumentation(symbol.markdownDocumentation);\n     }\n \n", "next_change": {"commit": "87961db67682bc697bd25c6e257015a463648ec7", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex b5ad0144160..84296853e39 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -128,6 +128,22 @@ public class BallerinaSymbol implements Symbol {\n         return symbol == null ? null : new BallerinaDocumentation(symbol.markdownDocumentation);\n     }\n \n+    private boolean isSameName(Optional<String> name1, Optional<String> name2) {\n+        if (name1.isEmpty() || name2.isEmpty()) {\n+            return false;\n+        }\n+\n+        return name1.get().equals(name2.get());\n+    }\n+\n+    private boolean isSameModule(Optional<ModuleSymbol> mod1, Optional<ModuleSymbol> mod2) {\n+        if (mod1.isEmpty() || mod2.isEmpty()) {\n+            return false;\n+        }\n+\n+        return mod1.get().id().equals(mod2.get().id());\n+    }\n+\n     /**\n      * Represents Ballerina Symbol Builder.\n      *\n", "next_change": {"commit": "f76ad2e60f14e28ced90abfb8a89c306c33e8031", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 84296853e39..240310025c0 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -152,23 +165,23 @@ public class BallerinaSymbol implements Symbol {\n     protected abstract static class SymbolBuilder<T extends SymbolBuilder<T>> {\n \n         protected String name;\n-        protected PackageID moduleID;\n         protected SymbolKind ballerinaSymbolKind;\n         protected BSymbol bSymbol;\n+        protected CompilerContext context;\n \n         /**\n          * Symbol Builder Constructor.\n          *\n          * @param name       Symbol Name\n-         * @param moduleID   module ID of the symbol\n          * @param symbolKind symbol kind\n          * @param bSymbol    symbol to evaluate\n+         * @param context    context of the compilation\n          */\n-        public SymbolBuilder(String name, PackageID moduleID, SymbolKind symbolKind, BSymbol bSymbol) {\n+        public SymbolBuilder(String name, SymbolKind symbolKind, BSymbol bSymbol, CompilerContext context) {\n             this.name = name;\n-            this.moduleID = moduleID;\n             this.ballerinaSymbolKind = symbolKind;\n             this.bSymbol = bSymbol;\n+            this.context = context;\n         }\n \n         /**\n", "next_change": {"commit": "9575e1e886bd02c9094f547a78b5e4d6a5d985bc", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 240310025c0..c6fda3a04aa 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -190,5 +228,13 @@ public class BallerinaSymbol implements Symbol {\n          * @return {@link BallerinaSymbol} built\n          */\n         public abstract BallerinaSymbol build();\n+\n+        /**\n+         * Build the Ballerina Symbol.\n+         *\n+         * @param  replaceOriginalName     whether to replace the original name or not\n+         * @return {@link BallerinaSymbol} built\n+         */\n+//        public abstract BallerinaSymbol build(boolean replaceOriginalName);\n     }\n }\n", "next_change": {"commit": "570758691c3f2e8df9d6b70c8947ebf0ce2549ed", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex c6fda3a04aa..34d6c862250 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -228,13 +212,5 @@ public class BallerinaSymbol implements Symbol {\n          * @return {@link BallerinaSymbol} built\n          */\n         public abstract BallerinaSymbol build();\n-\n-        /**\n-         * Build the Ballerina Symbol.\n-         *\n-         * @param  replaceOriginalName     whether to replace the original name or not\n-         * @return {@link BallerinaSymbol} built\n-         */\n-//        public abstract BallerinaSymbol build(boolean replaceOriginalName);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "c97b10ce0fc61cd12c7da686d75a00a177ac3579", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c97b10ce0fc61cd12c7da686d75a00a177ac3579", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-20T14:43:12Z", "type": "forcePushed"}, {"oid": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-20T15:48:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528473899", "body": "Do we need the file name here?", "bodyText": "Do we need the file name here?", "bodyHTML": "<p dir=\"auto\">Do we need the file name here?</p>", "author": "SupunS", "createdAt": "2020-11-23T05:07:10Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,25 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param symbol   a {@link Symbol} insance\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, Symbol symbol);", "originalCommit": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4MDQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528480448", "bodyText": "Don't need it. Removed with 345a9e0", "author": "pubudu91", "createdAt": "2020-11-23T05:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1a99a41f00b29b891875938e359661e56316024", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 5ef492bc428..6f37e91f788 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -59,25 +58,6 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n-    /**\n-     * Finds all the references of the specified symbol within the relevant scope.\n-     *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param symbol   a {@link Symbol} insance\n-     * @return A {@link List} of line ranges of all the references\n-     */\n-    List<Location> references(String fileName, Symbol symbol);\n-\n-    /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n-     *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n-     * @return A {@link List} of line ranges of all the references\n-     */\n-    List<Location> references(String fileName, LinePosition position);\n-\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 6f37e91f788..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -58,6 +59,14 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the module.\n+     *\n+     * @param symbol Symbol for which the references are looked up\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(Symbol symbol);\n+\n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "2784b614e073ebbedda51480a46abe71daf8f769", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c16f7cb8704..b14db7c77de 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -73,11 +97,10 @@ public interface SemanticModel {\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> type(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex b14db7c77de..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceDocument The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "345a9e03f53b08bc234664e72bd5b79f27c073e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/345a9e03f53b08bc234664e72bd5b79f27c073e7", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T05:39:42Z", "type": "forcePushed"}, {"oid": "25f59338929a407156633bd7586fe209c3577fc7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25f59338929a407156633bd7586fe209c3577fc7", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T06:03:20Z", "type": "forcePushed"}, {"oid": "72e73ca2e2913b811199782e923367195c0dedf5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72e73ca2e2913b811199782e923367195c0dedf5", "message": "Add API for getting all references of a symbol", "committedDate": "2020-11-23T09:07:57Z", "type": "commit"}, {"oid": "2133f175a25aeda2fc8db97557b49c2a2292b226", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2133f175a25aeda2fc8db97557b49c2a2292b226", "message": "Add initial impl of reference finding visitor", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "38bb3ed07f61b545be3fe6cc5c674ed16fb13d86", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38bb3ed07f61b545be3fe6cc5c674ed16fb13d86", "message": "Add an API to NodeFinder to lookup the scoping AST node", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e63ff2aaff28a504867e8bf44a6c982b24608e6a", "message": "Implement allReferences()", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "37e4d7cffca5c7edd001c66cbd49f43e5d89a9f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37e4d7cffca5c7edd001c66cbd49f43e5d89a9f3", "message": "Move the find all ref test to a separate package", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "097f59d984045a502592f1593fea5645a17128df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/097f59d984045a502592f1593fea5645a17128df", "message": "Separate the find ref test and separate the tests by data provider", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "47ae9a6ddbf5478c91dfb42aaa289deeb5ee1994", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47ae9a6ddbf5478c91dfb42aaa289deeb5ee1994", "message": "Fix issues in module prefix searching and add tests", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "7a58089a81402387ba1e69682a49544f45624d47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a58089a81402387ba1e69682a49544f45624d47", "message": "Fix issue in module prefix finding logic", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "6b50d98d0c7ac61cff38ca258374ea8143538f53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b50d98d0c7ac61cff38ca258374ea8143538f53", "message": "Add tests for function and action calls", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "22cb97bab292a438d805937a9343b48c789cd6c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22cb97bab292a438d805937a9343b48c789cd6c8", "message": "Fix issue in lang lib invocations and add more tests for exprs", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "5eb0c1bba57397a31417e102d16fe9b6f02a1943", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5eb0c1bba57397a31417e102d16fe9b6f02a1943", "message": "Fix position issues in anon functions", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "535133f1da875e5c97f604e60e28246b756e8bec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/535133f1da875e5c97f604e60e28246b756e8bec", "message": "Add tests for find all refs with lambda functions", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "e9bc7b3d2b9b3cd27091423b80dd9aaeec91dc86", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9bc7b3d2b9b3cd27091423b80dd9aaeec91dc86", "message": "Fix issues in worker actions and add tests for worker related ref lookup", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "2a7da183fb3743891f0c2214ad6644cc8cc81745", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a7da183fb3743891f0c2214ad6644cc8cc81745", "message": "Fix issues in XML related ref lookup and add tests", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "a2bbec83916896186981dabe5585cb8460ccccea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bbec83916896186981dabe5585cb8460ccccea", "message": "Fix symbol issue in NS-prefixed field access", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "43efb3b254c00d3d406f0038950b5bc107aaedea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43efb3b254c00d3d406f0038950b5bc107aaedea", "message": "Update spotbugs exclude", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "609f8051ba15635c6a9772e42d68761341ec26a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/609f8051ba15635c6a9772e42d68761341ec26a5", "message": "Fix issues in annot attachments and add tests", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "message": "Fix issue in looking up symbols from annot tag references", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "ebac00c0e1c042251637bf751f8c57fe823c6f03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebac00c0e1c042251637bf751f8c57fe823c6f03", "message": "Use a different module for module prefix test", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "d9d6b64d64c66ea32bac177d79e09631ebe5a126", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d6b64d64c66ea32bac177d79e09631ebe5a126", "message": "Modify references API to support looking up across files", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "352f4cc28ed28a225cf2639abcb38b6d4f5f5d02", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/352f4cc28ed28a225cf2639abcb38b6d4f5f5d02", "message": "Add test cases for looking up references across files", "committedDate": "2020-11-23T09:08:08Z", "type": "commit"}, {"oid": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/506838cacc92dc2bd9ba045b0cc3b177855e07c5", "message": "Rename allReferences() -> references()", "committedDate": "2020-11-23T09:08:08Z", "type": "commit"}, {"oid": "7b3a9a6a1410b0f1d3389e989ff5a3662294b495", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b3a9a6a1410b0f1d3389e989ff5a3662294b495", "message": "Update the project structure of the test project", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "44d50124a0b74d855af8221649ce4a77da1aeb0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44d50124a0b74d855af8221649ce4a77da1aeb0c", "message": "Update Ballerina.toml of the test project", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "d9f9ecc7a5f7e6b0ae433b616e94b0a82b63fe5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9f9ecc7a5f7e6b0ae433b616e94b0a82b63fe5a", "message": "Update the find ref test setup logic to use the project API", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "fb14252f8da29390ff823244687b581bf4d1a22b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb14252f8da29390ff823244687b581bf4d1a22b", "message": "Add new API to get the semantic model of the specified module", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "76f3510f7247cde2edf8bdda550f8bfad112f403", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76f3510f7247cde2edf8bdda550f8bfad112f403", "message": "Add an API to find all references given a symbol", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "e0d0c54892e08808476f5505910925dd9cf4c4a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0d0c54892e08808476f5505910925dd9cf4c4a4", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "07eb8cc540ab38a52fb48687097e2d85791d3fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07eb8cc540ab38a52fb48687097e2d85791d3fa8", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "07eb8cc540ab38a52fb48687097e2d85791d3fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07eb8cc540ab38a52fb48687097e2d85791d3fa8", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T09:08:10Z", "type": "forcePushed"}]}