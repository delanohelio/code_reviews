{"pr_number": 26976, "pr_title": "Implement find all references API ", "pr_author": "pubudu91", "pr_createdAt": "2020-11-17T09:29:15Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976", "merge_commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "timeline": [{"oid": "342a47a2f33aeb7f5c15fe4e172f69135d5a5f9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/342a47a2f33aeb7f5c15fe4e172f69135d5a5f9e", "message": "Make project root path system-independent", "committedDate": "2020-11-17T14:18:03Z", "type": "forcePushed"}, {"oid": "65dbad7389cacf594955971bbd02e2b9b2857655", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65dbad7389cacf594955971bbd02e2b9b2857655", "message": "Make project root path system-independent", "committedDate": "2020-11-17T15:04:27Z", "type": "forcePushed"}, {"oid": "8acd13358cf2566f6915db57b9edc272a82a81c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8acd13358cf2566f6915db57b9edc272a82a81c5", "message": "Make project root path system-independent", "committedDate": "2020-11-17T18:22:45Z", "type": "forcePushed"}, {"oid": "ed48b8497468f7b8280396f45555374d935091b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed48b8497468f7b8280396f45555374d935091b5", "message": "Make project root path system-independent", "committedDate": "2020-11-17T18:49:22Z", "type": "forcePushed"}, {"oid": "23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "message": "Make project root path system-independent", "committedDate": "2020-11-17T19:41:38Z", "type": "forcePushed"}, {"oid": "6df933a636ff707ffb6195d6331964f4bc04e150", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6df933a636ff707ffb6195d6331964f4bc04e150", "message": "Use a different module for module prefix test", "committedDate": "2020-11-18T05:28:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3NDM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r525774362", "body": "shall we rename the API to `references` ?", "bodyText": "shall we rename the API to references ?", "bodyHTML": "<p dir=\"auto\">shall we rename the API to <code>references</code> ?</p>", "author": "nadeeshaan", "createdAt": "2020-11-18T04:12:46Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(String fileName, LinePosition position);", "originalCommit": "23ae2c18c3b45b1f6f5c76528d0f5e50a970211e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "089cbfe097f2b6c634be23a0627e650227db01ef", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 9326f4f7f3d..a09007b8c6f 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex a09007b8c6f..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,14 +60,12 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n+     * Finds all the references of the specified symbol within the module.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param symbol Symbol for which the references are looked up\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> allReferences(Symbol symbol);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 9326f4f7f3d..c143d170ddc 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +75,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "2784b614e073ebbedda51480a46abe71daf8f769", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c143d170ddc..b14db7c77de 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -81,11 +97,10 @@ public interface SemanticModel {\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> type(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex b14db7c77de..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceDocument The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "8a49c192f24baf2526ab694a6462e7b31181a809", "committedDate": "2020-12-14 17:22:36 +0530", "message": "Remove typeQualifiers() from object type symbol"}, {"oid": "3ed98c42d08b393ec0f8e4508b54076a0a5144dc", "committedDate": "2021-01-11 23:46:11 +0530", "message": "Add an overloaded symbol() method which accepts a syntax tree node"}, {"oid": "b551c7c778007d84c3277c4ec0bbd66e320e5ad5", "committedDate": "2021-01-12 12:46:11 +0530", "message": "Address review suggestions"}, {"oid": "66d649ef705e65ac13fb1f0ed37adff6c49aeb12", "committedDate": "2021-01-15 16:43:58 +0530", "message": "Change symbol() to accept Document instead of file name"}, {"oid": "2784b614e073ebbedda51480a46abe71daf8f769", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor visibleSymbols() to accept a Document instead of a string file name"}, {"oid": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor references() to use Document arg"}, {"oid": "dd3a46c509a2c0d47eef541906754915e50c00a9", "committedDate": "2021-01-15 16:44:02 +0530", "message": "Address review suggestions"}, {"oid": "53659e16257984303ca5fd12c0744776043b546a", "committedDate": "2021-01-19 18:13:59 +0530", "message": "Rename moduleLevelSymbols() to moduleSymbols()"}, {"oid": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "committedDate": "2021-02-01 10:31:23 +0530", "message": "Add an API to retrieve the expr type given a syntax tree node"}, {"oid": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "committedDate": "2021-04-23 12:47:44 +0530", "message": "Add new methods for getting references without the definition location"}, {"oid": "9ed2fc1ca6aa25d6b905a98f51c414ca746730d7", "committedDate": "2021-06-09 20:40:24 +0530", "message": "Add overloaded version of visibleSymbols()"}, {"oid": "087bc9a110b0f358e257514b0efcabd368f13069", "committedDate": "2021-06-15 11:23:38 +0530", "message": "Deprecate type() and introduce typeOf()"}, {"oid": "9d53f27fa3d2c87605a7257c12a9e97a8fb46ece", "committedDate": "2021-08-19 15:10:07 +0530", "message": "Add APIs to find references within the given document"}, {"oid": "18ab30bf5dac5bc39970bbdba11100ac4c9d77ba", "committedDate": "2022-03-04 15:22:04 +0530", "message": "Implement  method in Types API"}, {"oid": "673ab3d5d5ed30fb905d41958a4ef2d6e18430e5", "committedDate": "2022-03-08 11:52:20 +0530", "message": "Reformat code and fix checkstyle failing issues"}, {"oid": "18f94ec40be0d9babbde1e230923c302a04c8580", "committedDate": "2022-03-21 14:58:46 +0530", "message": "Reformat code"}, {"oid": "023698cb34805191a9dfcc03e169b349b52eaf2c", "committedDate": "2022-03-28 12:07:34 +0530", "message": "Address review comments"}, {"oid": "0ea6fcda72c8ed717322aae66bc22723a1fb9305", "committedDate": "2022-03-29 15:46:48 +0530", "message": "Move Types API to types package"}, {"oid": "7f4aa9d747b878641083196e57451d32c45f8c2a", "committedDate": "2022-03-31 13:26:07 +0530", "message": "Reformat code of Types API"}, {"oid": "530f980ae54b259f03f977f9232ae3be389aedd0", "committedDate": "2022-04-06 10:37:39 +0530", "message": "Seperate the Types API interface and implementation"}, {"oid": "50c583f56d62e00ccfab5fc05b472e46a593e917", "committedDate": "2022-09-30 13:14:15 +0530", "message": "Add expectedType"}, {"oid": "dbee33ae4e611474c84c164f233849a3dd5a95a4", "committedDate": "2022-09-30 13:14:26 +0530", "message": "Update expectedType parameters"}, {"oid": "430255d84ccb2a17b23167333c1db71c827c1809", "committedDate": "2022-09-30 13:15:02 +0530", "message": "Refactor code"}, {"oid": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "committedDate": "2023-01-25 11:53:17 +0530", "message": "Address review suggestions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526685043", "body": "Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query `references()` through a Symbol as input?", "bodyText": "Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query references() through a Symbol as input?", "bodyHTML": "<p dir=\"auto\">Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query <code>references()</code> through a Symbol as input?</p>", "author": "rasika", "createdAt": "2020-11-19T08:44:58Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "originalCommit": "87a60f97177101ae991bca821ba1bc3edf222839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MDg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526770894", "bodyText": "I think @rasika 's concern is a valid requirement. There is a catch though, which is the performance. With the symbol being an input then we query the symbol API and then again query the references API.", "author": "nadeeshaan", "createdAt": "2020-11-19T10:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxOTM4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526819380", "bodyText": "This is what we talked about having an integration layer between the project API and the semantic API for right? Can definitely add another API which accepts a symbol as the input. In fact, I tried that approach first, and then reverted to position. From a performance POV, I don't think it'll be an issue since we don't need to query the symbol API again.", "author": "pubudu91", "createdAt": "2020-11-19T12:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NjEwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528496104", "bodyText": "Since now we allow Symbol as input, i think rest of the query can be possible with the introduction of the integration layer.", "author": "rasika", "createdAt": "2020-11-23T06:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c97b10ce0fc61cd12c7da686d75a00a177ac3579", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..0e9d688f02e 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -151,6 +154,24 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, Symbol symbol) {\n+        Location symbolLocation = symbol.location();\n+\n+        // Assumption is that the location will be null for regular type symbols\n+        if (symbolLocation == null) {\n+            return Collections.unmodifiableList(new ArrayList<>());\n+        }\n+\n+        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolLocation.lineRange());\n+\n+        ReferenceFinder refFinder = new ReferenceFinder();\n+        return refFinder.findReferences(node, getInternalSymbol(symbol));\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 0e9d688f02e..537215b3c70 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -158,44 +153,15 @@ public class BallerinaSemanticModel implements SemanticModel {\n      * {@inheritDoc}\n      */\n     @Override\n-    public List<Location> references(String fileName, Symbol symbol) {\n-        Location symbolLocation = symbol.location();\n-\n-        // Assumption is that the location will be null for regular type symbols\n-        if (symbolLocation == null) {\n-            return Collections.unmodifiableList(new ArrayList<>());\n-        }\n-\n-        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolLocation.lineRange());\n-\n-        ReferenceFinder refFinder = new ReferenceFinder();\n-        return refFinder.findReferences(node, getInternalSymbol(symbol));\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public List<Location> references(String fileName, LinePosition position) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n-        SymbolFinder symbolFinder = new SymbolFinder();\n-        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n-\n-        if (symbolAtCursor == null) {\n-            return Collections.unmodifiableList(new ArrayList<>());\n-        }\n-\n-        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n-\n-        ReferenceFinder refFinder = new ReferenceFinder();\n-        return refFinder.findReferences(node, symbolAtCursor);\n+    public List<Location> allReferences(Symbol symbol) {\n+        return new ArrayList<>();\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Optional<TypeSymbol> getType(String fileName, LineRange range) {\n+    public Optional<TypeSymbol> type(String fileName, LineRange range) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n         NodeFinder nodeFinder = new NodeFinder();\n         BLangNode node = nodeFinder.lookup(compilationUnit, range);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..c58c428344b 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -151,6 +154,24 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(Symbol symbol) {\n+        Location symbolLocation = symbol.location();\n+\n+        // Assumption is that the location will be null for regular type symbols\n+        if (symbolLocation == null) {\n+            return Collections.unmodifiableList(new ArrayList<>());\n+        }\n+\n+        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolLocation.lineRange());\n+\n+        ReferenceFinder refFinder = new ReferenceFinder();\n+        return refFinder.findReferences(node, getInternalSymbol(symbol));\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n", "next_change": {"commit": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex c58c428344b..c0aa8fd5663 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -176,8 +182,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n      * {@inheritDoc}\n      */\n     @Override\n-    public List<Location> references(String fileName, LinePosition position) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(fileName);\n+    public List<Location> references(Document sourceFile, LinePosition position) {\n+        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceFile);\n         SymbolFinder symbolFinder = new SymbolFinder();\n         BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n \n", "next_change": {"commit": "dd3a46c509a2c0d47eef541906754915e50c00a9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex c0aa8fd5663..f3c1abcdd11 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -182,8 +182,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n      * {@inheritDoc}\n      */\n     @Override\n-    public List<Location> references(Document sourceFile, LinePosition position) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceFile);\n+    public List<Location> references(Document sourceDocument, LinePosition position) {\n+        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceDocument);\n         SymbolFinder symbolFinder = new SymbolFinder();\n         BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n \n", "next_change": {"commit": "5e5e848745a93ccddaf1e62eca0b7b789d451ef2", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex f3c1abcdd11..f1ec9631e6d 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -188,7 +188,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n         BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n \n         if (symbolAtCursor == null) {\n-            return Collections.unmodifiableList(new ArrayList<>());\n+            return Collections.emptyList();\n         }\n \n         BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n", "next_change": {"commit": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex f1ec9631e6d..15544188e0b 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -193,7 +201,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n \n         BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n \n-        ReferenceFinder refFinder = new ReferenceFinder();\n+        ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n         return refFinder.findReferences(node, symbolAtCursor);\n     }\n \n", "next_change": {"commit": "1f0b05f569efe47623a2ecfce9d704b36ef32933", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 15544188e0b..baa9c85fb41 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -199,7 +212,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n             return Collections.emptyList();\n         }\n \n-        BLangNode node = new NodeFinder().lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n+        BLangNode node = new NodeFinder(false)\n+                .lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n \n         ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n         return refFinder.findReferences(node, symbolAtCursor);\n", "next_change": {"commit": "77358eeb8fefa6a4ed43c9a41013b57a869fab14", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex baa9c85fb41..eeb153d8594 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -183,37 +183,78 @@ public class BallerinaSemanticModel implements SemanticModel {\n      */\n     @Override\n     public List<Location> references(Document sourceDocument, LinePosition position) {\n-        return references(sourceDocument, position, true);\n+        return getReferences(sourceDocument, null, position, true);\n     }\n \n     @Override\n     public List<Location> references(Symbol symbol, boolean withDefinition) {\n-        Optional<Location> symbolLocation = symbol.getLocation();\n-\n-        // Assumption is that the location will be null for regular type symbols\n-        if (symbolLocation.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n+        return getReferences(symbol, null, withDefinition);\n+    }\n \n-        BLangNode node = new NodeFinder(false)\n-                .lookupEnclosingContainer(this.bLangPackage, symbolLocation.get().lineRange());\n+    @Override\n+    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n+        return getReferences(sourceDocument, null, position, withDefinition);\n+    }\n \n-        ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n-        return refFinder.findReferences(node, getInternalSymbol(symbol));\n+    @Override\n+    public List<Location> references(Symbol symbol, Document targetDocument, boolean withDefinition) {\n+        return getReferences(symbol, targetDocument, withDefinition);\n     }\n \n     @Override\n-    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceDocument);\n-        SymbolFinder symbolFinder = new SymbolFinder();\n-        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n+    public List<Location> references(Document sourceDocument,\n+                                     Document targetDocument,\n+                                     LinePosition position,\n+                                     boolean withDefinition) {\n+        return getReferences(sourceDocument, targetDocument, position, withDefinition);\n+    }\n+\n+    private List<Location> getReferences(Symbol symbol, Document targetDocument, boolean withDefinition) {\n+        return getReferences(null, targetDocument, symbol, null, withDefinition);\n+    }\n+\n+    private List<Location> getReferences(Document sourceDocument,\n+                                         Document targetDocument,\n+                                         LinePosition position,\n+                                         boolean withDefinition) {\n+        return getReferences(sourceDocument, targetDocument, null, position, withDefinition);\n+    }\n \n-        if (symbolAtCursor == null) {\n+    private List<Location> getReferences(Document sourceDocument,\n+                                         Document targetDocument,\n+                                         Symbol symbol,\n+                                         LinePosition position,\n+                                         boolean withDefinition) {\n+\n+        Optional<Location> symbolLocation;\n+        BSymbol symbolAtCursor;\n+\n+        if (symbol != null) {\n+            symbolLocation = symbol.getLocation();\n+            symbolAtCursor = getInternalSymbol(symbol);\n+        } else {\n+            BLangCompilationUnit sourceCompilationUnit = getCompilationUnit(sourceDocument);\n+            SymbolFinder symbolFinder = new SymbolFinder();\n+            symbolAtCursor = symbolFinder.lookup(sourceCompilationUnit, position);\n+            if (symbolAtCursor == null) {\n+                return Collections.emptyList();\n+            }\n+            symbolLocation = Optional.of(symbolAtCursor.getPosition());\n+        }\n+\n+        // Assumption is that the location will be null for regular type symbols\n+        if (symbolLocation.isEmpty() || symbolAtCursor == null) {\n             return Collections.emptyList();\n         }\n \n-        BLangNode node = new NodeFinder(false)\n-                .lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n+        BLangNode node;\n+        if (targetDocument != null) {\n+            node = new NodeFinder(false)\n+                    .lookupEnclosingContainer(getCompilationUnit(targetDocument), symbolLocation.get().lineRange());\n+        } else {\n+            node = new NodeFinder(false)\n+                    .lookupEnclosingContainer(this.bLangPackage, symbolLocation.get().lineRange());\n+        }\n \n         ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n         return refFinder.findReferences(node, symbolAtCursor);\n", "next_change": {"commit": "65d6be786e65d2645acfaeb3b7248aab05c461dd", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex eeb153d8594..57253c95814 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -183,78 +184,37 @@ public class BallerinaSemanticModel implements SemanticModel {\n      */\n     @Override\n     public List<Location> references(Document sourceDocument, LinePosition position) {\n-        return getReferences(sourceDocument, null, position, true);\n+        return references(sourceDocument, position, true);\n     }\n \n     @Override\n     public List<Location> references(Symbol symbol, boolean withDefinition) {\n-        return getReferences(symbol, null, withDefinition);\n-    }\n+        Optional<Location> symbolLocation = symbol.getLocation();\n \n-    @Override\n-    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n-        return getReferences(sourceDocument, null, position, withDefinition);\n-    }\n-\n-    @Override\n-    public List<Location> references(Symbol symbol, Document targetDocument, boolean withDefinition) {\n-        return getReferences(symbol, targetDocument, withDefinition);\n-    }\n+        // Assumption is that the location will be null for regular type symbols\n+        if (symbolLocation.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n \n-    @Override\n-    public List<Location> references(Document sourceDocument,\n-                                     Document targetDocument,\n-                                     LinePosition position,\n-                                     boolean withDefinition) {\n-        return getReferences(sourceDocument, targetDocument, position, withDefinition);\n-    }\n+        BLangNode node = new NodeFinder(false)\n+                .lookupEnclosingContainer(this.bLangPackage, symbolLocation.get().lineRange());\n \n-    private List<Location> getReferences(Symbol symbol, Document targetDocument, boolean withDefinition) {\n-        return getReferences(null, targetDocument, symbol, null, withDefinition);\n-    }\n-\n-    private List<Location> getReferences(Document sourceDocument,\n-                                         Document targetDocument,\n-                                         LinePosition position,\n-                                         boolean withDefinition) {\n-        return getReferences(sourceDocument, targetDocument, null, position, withDefinition);\n+        ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n+        return refFinder.findReferences(node, getInternalSymbol(symbol));\n     }\n \n-    private List<Location> getReferences(Document sourceDocument,\n-                                         Document targetDocument,\n-                                         Symbol symbol,\n-                                         LinePosition position,\n-                                         boolean withDefinition) {\n-\n-        Optional<Location> symbolLocation;\n-        BSymbol symbolAtCursor;\n-\n-        if (symbol != null) {\n-            symbolLocation = symbol.getLocation();\n-            symbolAtCursor = getInternalSymbol(symbol);\n-        } else {\n-            BLangCompilationUnit sourceCompilationUnit = getCompilationUnit(sourceDocument);\n-            SymbolFinder symbolFinder = new SymbolFinder();\n-            symbolAtCursor = symbolFinder.lookup(sourceCompilationUnit, position);\n-            if (symbolAtCursor == null) {\n-                return Collections.emptyList();\n-            }\n-            symbolLocation = Optional.of(symbolAtCursor.getPosition());\n-        }\n+    @Override\n+    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n+        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceDocument);\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n \n-        // Assumption is that the location will be null for regular type symbols\n-        if (symbolLocation.isEmpty() || symbolAtCursor == null) {\n+        if (symbolAtCursor == null) {\n             return Collections.emptyList();\n         }\n \n-        BLangNode node;\n-        if (targetDocument != null) {\n-            node = new NodeFinder(false)\n-                    .lookupEnclosingContainer(getCompilationUnit(targetDocument), symbolLocation.get().lineRange());\n-        } else {\n-            node = new NodeFinder(false)\n-                    .lookupEnclosingContainer(this.bLangPackage, symbolLocation.get().lineRange());\n-        }\n+        BLangNode node = new NodeFinder(false)\n+                .lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n \n         ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n         return refFinder.findReferences(node, symbolAtCursor);\n", "next_change": {"commit": "22bee6e386e4c9af3fced67c406e1a318f21bb99", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 57253c95814..fe1f8fc8a9a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -184,40 +183,84 @@ public class BallerinaSemanticModel implements SemanticModel {\n      */\n     @Override\n     public List<Location> references(Document sourceDocument, LinePosition position) {\n-        return references(sourceDocument, position, true);\n+        BSymbol symbolAtCursor = findSymbolAtCursorPosition(sourceDocument, position);\n+        if (symbolAtCursor == null) {\n+            return Collections.emptyList();\n+        }\n+        Location symbolLocation = symbolAtCursor.getPosition();\n+        BLangNode node = findEnclosingContainerNode(symbolLocation.lineRange(), null);\n+        return getReferences(symbolAtCursor, node, true);\n     }\n \n     @Override\n     public List<Location> references(Symbol symbol, boolean withDefinition) {\n+        BSymbol symbolAtCursor = getInternalSymbol(symbol);\n         Optional<Location> symbolLocation = symbol.getLocation();\n+        if (symbolAtCursor == null || symbolLocation.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        BLangNode node = findEnclosingContainerNode(symbolLocation.get().lineRange(), null);\n+\n+        return getReferences(symbolAtCursor, node, withDefinition);\n+    }\n \n-        // Assumption is that the location will be null for regular type symbols\n-        if (symbolLocation.isEmpty()) {\n+    @Override\n+    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n+        BSymbol symbolAtCursor = findSymbolAtCursorPosition(sourceDocument, position);\n+        if (symbolAtCursor == null) {\n             return Collections.emptyList();\n         }\n+        Location symbolLocation = symbolAtCursor.getPosition();\n+        BLangNode node = findEnclosingContainerNode(symbolLocation.lineRange(), null);\n \n-        BLangNode node = new NodeFinder(false)\n-                .lookupEnclosingContainer(this.bLangPackage, symbolLocation.get().lineRange());\n+        return getReferences(symbolAtCursor, node, withDefinition);\n+    }\n \n-        ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n-        return refFinder.findReferences(node, getInternalSymbol(symbol));\n+    @Override\n+    public List<Location> references(Symbol symbol, Document targetDocument, boolean withDefinition) {\n+        BSymbol symbolAtCursor = getInternalSymbol(symbol);\n+        Optional<Location> symbolLocation = symbol.getLocation();\n+        if (symbolAtCursor == null || symbolLocation.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        BLangNode node = findEnclosingContainerNode(symbolLocation.get().lineRange(), targetDocument);\n+\n+        return getReferences(symbolAtCursor, node, withDefinition);\n     }\n \n     @Override\n-    public List<Location> references(Document sourceDocument, LinePosition position, boolean withDefinition) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(sourceDocument);\n-        SymbolFinder symbolFinder = new SymbolFinder();\n-        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);\n+    public List<Location> references(Document sourceDocument,\n+                                     Document targetDocument,\n+                                     LinePosition position,\n+                                     boolean withDefinition) {\n \n+        BSymbol symbolAtCursor = findSymbolAtCursorPosition(sourceDocument, position);\n         if (symbolAtCursor == null) {\n             return Collections.emptyList();\n         }\n+        Location symbolLocation = symbolAtCursor.getPosition();\n+        BLangNode node = findEnclosingContainerNode(symbolLocation.lineRange(), targetDocument);\n \n-        BLangNode node = new NodeFinder(false)\n-                .lookupEnclosingContainer(this.bLangPackage, symbolAtCursor.pos.lineRange());\n+        return getReferences(symbolAtCursor, node, withDefinition);\n+    }\n+\n+    private BSymbol findSymbolAtCursorPosition(Document sourceDocument, LinePosition linePosition) {\n+        BLangCompilationUnit sourceCompilationUnit = getCompilationUnit(sourceDocument);\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        return symbolFinder.lookup(sourceCompilationUnit, linePosition);\n+    }\n \n+    private BLangNode findEnclosingContainerNode(LineRange lineRange, Document targetDocument) {\n+        return targetDocument == null ?\n+                new NodeFinder(false)\n+                        .lookupEnclosingContainer(this.bLangPackage, lineRange) :\n+                new NodeFinder(false)\n+                        .lookupEnclosingContainer(getCompilationUnit(targetDocument), lineRange);\n+    }\n+\n+    private List<Location> getReferences(BSymbol symbol, BLangNode node, boolean withDefinition) {\n         ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n-        return refFinder.findReferences(node, symbolAtCursor);\n+        return refFinder.findReferences(node, symbol);\n     }\n \n     /**\n", "next_change": {"commit": "73aab836808ea0a444ed6ea4854c8b31d41f975c", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex fe1f8fc8a9a..fae8bbe44ee 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -250,14 +254,6 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return symbolFinder.lookup(sourceCompilationUnit, linePosition);\n     }\n \n-    private BLangNode findEnclosingContainerNode(LineRange lineRange, Document targetDocument) {\n-        return targetDocument == null ?\n-                new NodeFinder(false)\n-                        .lookupEnclosingContainer(this.bLangPackage, lineRange) :\n-                new NodeFinder(false)\n-                        .lookupEnclosingContainer(getCompilationUnit(targetDocument), lineRange);\n-    }\n-\n     private List<Location> getReferences(BSymbol symbol, BLangNode node, boolean withDefinition) {\n         ReferenceFinder refFinder = new ReferenceFinder(withDefinition);\n         return refFinder.findReferences(node, symbol);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "ccf847e61aa7a884a08afcff4fb49f697b01a6d3", "committedDate": "2020-12-14 10:13:48 +0530", "message": "Consider test files when looking up the compilation unit"}, {"oid": "ba5aeb3c277e5d2e875e5ccd580ecdfe20a2de21", "committedDate": "2020-12-14 10:13:49 +0530", "message": "Add support for looking up in tests for visibleSymbols()"}, {"oid": "3ed98c42d08b393ec0f8e4508b54076a0a5144dc", "committedDate": "2021-01-11 23:46:11 +0530", "message": "Add an overloaded symbol() method which accepts a syntax tree node"}, {"oid": "227fbacfa2fdf2262de85df2e3143c1c967c1e47", "committedDate": "2021-01-11 23:46:13 +0530", "message": "Add tests for method and remote method calls"}, {"oid": "2f420777e810481085e3fc147e3d6cb7f22964e2", "committedDate": "2021-01-12 02:11:41 +0530", "message": "Rename SyntaxNodeLocationMapper -> SyntaxNodeToLocationMapper"}, {"oid": "b551c7c778007d84c3277c4ec0bbd66e320e5ad5", "committedDate": "2021-01-12 12:46:11 +0530", "message": "Address review suggestions"}, {"oid": "66d649ef705e65ac13fb1f0ed37adff6c49aeb12", "committedDate": "2021-01-15 16:43:58 +0530", "message": "Change symbol() to accept Document instead of file name"}, {"oid": "fb84c7ba8c675950d83ec6996419d6296defc8da", "committedDate": "2021-01-15 16:43:59 +0530", "message": "Refactor symbol() implementations"}, {"oid": "2784b614e073ebbedda51480a46abe71daf8f769", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor visibleSymbols() to accept a Document instead of a string file name"}, {"oid": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor references() to use Document arg"}, {"oid": "dd3a46c509a2c0d47eef541906754915e50c00a9", "committedDate": "2021-01-15 16:44:02 +0530", "message": "Address review suggestions"}, {"oid": "e427052f205f7b6a1d00b742cb5b8a36ec42a993", "committedDate": "2021-01-15 18:30:33 +0530", "message": "Fix issue in creating type ref symbols"}, {"oid": "53659e16257984303ca5fd12c0744776043b546a", "committedDate": "2021-01-19 18:13:59 +0530", "message": "Rename moduleLevelSymbols() to moduleSymbols()"}, {"oid": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "committedDate": "2021-02-01 10:31:23 +0530", "message": "Add an API to retrieve the expr type given a syntax tree node"}, {"oid": "43e87fe3fe04f664c8b205878f4d590d10033635", "committedDate": "2021-02-01 10:31:25 +0530", "message": "Reuse old type() in new type() method"}, {"oid": "d06030ff34ef7a436d11be96ef7f2add5bffe33e", "committedDate": "2021-02-10 18:08:04 +0530", "message": "Remove usages of location()"}, {"oid": "5e5e848745a93ccddaf1e62eca0b7b789d451ef2", "committedDate": "2021-02-10 18:08:06 +0530", "message": "Address review suggestions"}, {"oid": "1c9ae3206ed51e6beed7e8d80bd4945cf479190e", "committedDate": "2021-02-15 09:31:17 +0530", "message": "Enable adding the next element of the scope-entries to visible symbols"}, {"oid": "3c3543b178e8f79606b354200c04893627b5ae92", "committedDate": "2021-03-10 13:10:57 +0530", "message": "Add support for creating service decl symbols"}, {"oid": "7c06b2440a0cd21d0c008c3d2a562b54f5f487fb", "committedDate": "2021-03-10 13:10:59 +0530", "message": "Add service decl to BIR spec"}, {"oid": "d2cfd268eaea6a3cdfaa46f659316d38d9b8cd04", "committedDate": "2021-03-26 21:47:39 +0530", "message": "Handle the missing errorneous fields at semantic API side"}, {"oid": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "committedDate": "2021-04-23 12:47:44 +0530", "message": "Add new methods for getting references without the definition location"}, {"oid": "8653afc0fde0151ac8acdb099b21beeccd446765", "committedDate": "2021-05-12 16:15:22 +0530", "message": "Fix symbol() to return the relevant typedesc for symbol lookups of types"}, {"oid": "aa12e976c063308468fc9b8f641b3358f5e1e15f", "committedDate": "2021-05-12 16:15:22 +0530", "message": "Revert the instanceof check back to BTypeSymbol"}, {"oid": "725e50b2c5683ea8814ff2bb90ad893fc57f5f0c", "committedDate": "2021-06-09 19:57:32 +0530", "message": "Skip redeclared symbols from visible symbols"}, {"oid": "9ed2fc1ca6aa25d6b905a98f51c414ca746730d7", "committedDate": "2021-06-09 20:40:24 +0530", "message": "Add overloaded version of visibleSymbols()"}, {"oid": "0c7e425f53961488e4a9edb8256f0151a23aa7bb", "committedDate": "2021-06-11 17:27:51 +0530", "message": "Encapsulate type field in BLangNode"}, {"oid": "087bc9a110b0f358e257514b0efcabd368f13069", "committedDate": "2021-06-15 11:23:38 +0530", "message": "Deprecate type() and introduce typeOf()"}, {"oid": "1f0b05f569efe47623a2ecfce9d704b36ef32933", "committedDate": "2021-06-15 11:23:39 +0530", "message": "Preserve previous behaviour for expr stmts in NodeFinder for deprecated type()"}, {"oid": "484f1515da64a0c4e940d41b9f8efc6522d34769", "committedDate": "2021-07-21 09:29:35 +0530", "message": "Remove `replaceOriginalName` and refactor"}, {"oid": "9d53f27fa3d2c87605a7257c12a9e97a8fb46ece", "committedDate": "2021-08-19 15:10:07 +0530", "message": "Add APIs to find references within the given document"}, {"oid": "cd583e7610420c4d72944a9a7745cb5efaecc5fa", "committedDate": "2021-08-27 00:30:50 +0530", "message": "Update semantic api with type def sym & ref type"}, {"oid": "77358eeb8fefa6a4ed43c9a41013b57a869fab14", "committedDate": "2021-08-30 08:11:48 +0530", "message": "Refactor API implementation"}, {"oid": "65d6be786e65d2645acfaeb3b7248aab05c461dd", "committedDate": "2021-08-30 10:28:29 +0530", "message": "Fix checkstyle failures"}, {"oid": "a32e1fec3e1458b3b41d36cd80d2fc21c2dc31d0", "committedDate": "2021-08-30 19:02:11 +0530", "message": "Return singleton type symbol for symbol() when used on singleton types"}, {"oid": "22bee6e386e4c9af3fced67c406e1a318f21bb99", "committedDate": "2021-09-02 13:17:09 +0530", "message": "Refactor code"}, {"oid": "73aab836808ea0a444ed6ea4854c8b31d41f975c", "committedDate": "2021-09-02 15:56:29 +0530", "message": "Refactor according to the review comments"}, {"oid": "acb052cd02ba4100cd47ae769bc9c0fb7cc15e70", "committedDate": "2021-09-06 15:40:53 +0530", "message": "Merge pull request #32237 from dulajdilshan/fix-32136"}, {"oid": "8e2316f44a6880781a86d8ff9e9bc7a908ad788c", "committedDate": "2021-09-07 11:41:31 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into type_ref_type_impl_upstream"}, {"oid": "e9c4409c5d62229863050241c495f6cfeaffdea3", "committedDate": "2021-09-07 16:06:56 +0530", "message": "Fix merge conflicts"}, {"oid": "d34606750532c68b4a7f1b9deca6d6b765f52922", "committedDate": "2021-09-23 06:27:00 +0530", "message": "Filter field symbols in field context when retrieving visible symbols"}, {"oid": "e105975ece0e931fc2ab53f17840535746a93c94", "committedDate": "2021-09-23 11:59:12 +0530", "message": "Escape filtering non-child field symbols of visible symbols"}, {"oid": "e3301c848886196906ae0c10edc279b9e006c246", "committedDate": "2021-09-30 12:42:49 +0530", "message": "Refactor check used to determine if a field symbol"}, {"oid": "34068e18e501107904db4399b9b4dc6443f70217", "committedDate": "2021-10-04 19:15:41 +0530", "message": "Update reference types to use type def name"}, {"oid": "0e90a070f17ff20cc0cf4dc1a79d8e983c5203ad", "committedDate": "2021-10-06 13:37:18 +0530", "message": "Remove redundant check on type definition"}, {"oid": "edcc2109830c1c331b4909cb600ba1b59ea0fa3d", "committedDate": "2021-10-07 09:35:22 +0530", "message": "Replace switch statement with equivalence check in BallerinaSemanticModel"}, {"oid": "761262f41dd37edba7b6dc55699e8ad47db640e6", "committedDate": "2021-10-12 13:13:42 +0530", "message": "Perform the child node check only for field symbols"}, {"oid": "8d7230ad8d5847d4d17c5e8bb7fa33467f00a767", "committedDate": "2021-10-13 23:38:33 +0530", "message": "Fix reference finding by symbol issue for"}, {"oid": "08f09d04536e6f3f8a599c13e64573a07dc2541c", "committedDate": "2021-10-27 13:08:16 +0530", "message": "Merge pull request #33218 from sanjana/semantic-api-fixes"}, {"oid": "37c5d63c2f2e3a810c66309885f15622ec7cabd3", "committedDate": "2021-10-27 18:06:52 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into type_ref_type_impl"}, {"oid": "39ad5016ed48de4431414ba9bd81ce97509dee66", "committedDate": "2021-10-29 09:31:10 +0530", "message": "Reuse get ref type util method"}, {"oid": "5769c867181efc4f76da03dd1d6e3c3f05045a68", "committedDate": "2021-11-12 16:11:32 +0530", "message": "Use symbol kind instead of checking insteadof"}, {"oid": "819ff3f700423500a0a9a5e68c792f87e5ebfa57", "committedDate": "2021-11-17 12:38:42 +0530", "message": "Fix the build conflicts"}, {"oid": "451925ce10490fc2641cf1708a67f07da998b482", "committedDate": "2021-11-17 14:09:42 +0530", "message": "Fix error type, type_def differentiation"}, {"oid": "d1432a89f21cdc5b934c25d8c08e2230bb560283", "committedDate": "2021-11-23 15:31:48 +0530", "message": "Remove unwanted comments"}, {"oid": "fb930b1538f747c50b69e863f7226160339034a1", "committedDate": "2021-11-23 15:34:17 +0530", "message": "Refactor anonymous error type detection logic"}, {"oid": "aa9567adc0b6ca6a7797b65eb5ee9efd05f4f217", "committedDate": "2021-11-24 21:30:42 +0530", "message": "Filter the same worker being visible within its declaration body"}, {"oid": "e8ac6f16039ea934fd2df960a8146812aed0ebcf", "committedDate": "2021-11-25 11:17:03 +0530", "message": "Update isWithinCurrentWorker() method in Semantic API"}, {"oid": "4909d4ff55e61b82e6eb28079e38a664d57b7c99", "committedDate": "2021-11-25 11:27:42 +0530", "message": "Fix failing checkstyle issue"}, {"oid": "834231bea78936c20c1798b886284cc5e96ca80e", "committedDate": "2021-11-27 20:38:17 +0530", "message": "Merge branch 'master' into VisitorRewamp_master"}, {"oid": "8b4f343cb20d66f5e5787480b3a0fc1094f4516a", "committedDate": "2021-11-30 12:04:58 +0530", "message": "Update withinRange() logic in Semantic API"}, {"oid": "49ef5ccde0496e1e9bbf890e341996457fee2c70", "committedDate": "2021-12-01 15:09:09 +0530", "message": "Get the determined types of start action invocation nodes"}, {"oid": "5bfca418b867c05da6a31a73dcf7412950945ba2", "committedDate": "2021-12-07 12:56:03 +0530", "message": "Move the withinRange method from BallerinaSemanticModel to PositionUtil"}, {"oid": "e54264b2790860ea18da172c65c56257e9730e08", "committedDate": "2021-12-08 09:04:39 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into simple-fixes"}, {"oid": "5af235391088274a8b8f1b504658a5a87af8c5a9", "committedDate": "2021-12-10 07:37:41 +0530", "message": "Merge pull request #34053 from sanjana/simple-fixes"}, {"oid": "41d6c243f3231f9376be592b5279a9e8c7cf5bac", "committedDate": "2021-12-14 18:44:37 +0530", "message": "Fix issues in identifying type refs"}, {"oid": "fd243d6f107d94b27afc02ae297a4f0c7fe43271", "committedDate": "2021-12-20 11:16:36 +0530", "message": "Add named-arg expression check for typeOf()"}, {"oid": "326b45c0bcbe1b3b815004855fc9ce5c2ad6ddcd", "committedDate": "2022-01-22 08:23:00 +0530", "message": "Ignore package symbols that are not imported to the current file"}, {"oid": "d8eb4575dea7694bdf4f2e865f02200b4eb24938", "committedDate": "2022-01-24 10:08:38 +0530", "message": "Address review comments"}, {"oid": "6c069a477d7369e1877d69a66f0e99883b6ad7d9", "committedDate": "2022-02-08 12:46:45 +0530", "message": "Fix not showing non-init methods in visibleSymbols()"}, {"oid": "1a193e71ebbe9d185687d357caf2ce570e365510", "committedDate": "2022-02-17 14:21:35 +0530", "message": "Ignore resource-functions in visible-symbols"}, {"oid": "84b5caf9c03100f813f665125706754504ad3389", "committedDate": "2022-02-17 14:22:53 +0530", "message": "Ignore class-methods as visible-symbols when cursor is at class-field definition"}, {"oid": "3886753f6cd56d3430f0848acbd609b2a0f4a64b", "committedDate": "2022-02-18 10:56:02 +0530", "message": "Add closure support for visible-symbols"}, {"oid": "d75a54358a5de4ecfd24e0bae8519d15ccd758c2", "committedDate": "2022-02-22 10:06:52 +0530", "message": "Fix CCE in Ballerina Semantic Model"}, {"oid": "ec6db5939cee599da9e1ad58e95845b1fcd69490", "committedDate": "2022-02-23 12:38:03 +0530", "message": "Merge pull request #34287 from dulajdilshan/fix-33492"}, {"oid": "d12db834337b4a883c5bf2014075ec06dae8fc21", "committedDate": "2022-03-03 16:27:38 +0530", "message": "Create basic Skeleton of the Types API"}, {"oid": "18ab30bf5dac5bc39970bbdba11100ac4c9d77ba", "committedDate": "2022-03-04 15:22:04 +0530", "message": "Implement  method in Types API"}, {"oid": "0ea6fcda72c8ed717322aae66bc22723a1fb9305", "committedDate": "2022-03-29 15:46:48 +0530", "message": "Move Types API to types package"}, {"oid": "530f980ae54b259f03f977f9232ae3be389aedd0", "committedDate": "2022-04-06 10:37:39 +0530", "message": "Seperate the Types API interface and implementation"}, {"oid": "50c583f56d62e00ccfab5fc05b472e46a593e917", "committedDate": "2022-09-30 13:14:15 +0530", "message": "Add expectedType"}, {"oid": "a61d5a607bb1f9411ba8fed49c6967100232e72e", "committedDate": "2022-09-30 13:14:24 +0530", "message": "Add ExpectedTypeFinder"}, {"oid": "dbee33ae4e611474c84c164f233849a3dd5a95a4", "committedDate": "2022-09-30 13:14:26 +0530", "message": "Update expectedType parameters"}, {"oid": "493f032ad704e7c0f1941173efba04fc07d6a2bf", "committedDate": "2022-09-30 13:14:37 +0530", "message": "Refactor imports"}, {"oid": "ea09e602b106e994663efe07a5e161d38b994d9f", "committedDate": "2022-09-30 13:14:56 +0530", "message": "Refactor code"}, {"oid": "430255d84ccb2a17b23167333c1db71c827c1809", "committedDate": "2022-09-30 13:15:02 +0530", "message": "Refactor code"}, {"oid": "1b8d4ccdae670234638d6c7a7b3e49e1ab5086ea", "committedDate": "2022-09-30 13:16:23 +0530", "message": "Refactor code"}, {"oid": "c0db070bff83f06055d45e1992c09ede5632836a", "committedDate": "2022-10-14 09:53:42 +0530", "message": "Add error handling"}, {"oid": "caaa43e0c648649062914192e62b097fac9bc696", "committedDate": "2022-11-04 15:22:04 +0530", "message": "Address review suggestions"}, {"oid": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "committedDate": "2023-01-25 11:53:17 +0530", "message": "Address review suggestions"}, {"oid": "365768cb02a25f32d6d3bd17da0e234214d215ac", "committedDate": "2023-01-25 12:36:49 +0530", "message": "Refactor code"}, {"oid": "12560f8af64009fb2e01ccc1fd4f776b48bc43bd", "committedDate": "2023-02-16 11:01:13 +0530", "message": "Introduce fileName() and deprecate filePath()"}]}, {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/089cbfe097f2b6c634be23a0627e650227db01ef", "message": "Add new API to get the semantic model of the specified module", "committedDate": "2020-11-19T20:36:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTQzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391434", "body": "We could use symTag to check for `BPackageSymbol` and `BAnnotationSymbol`", "bodyText": "We could use symTag to check for BPackageSymbol and BAnnotationSymbol", "bodyHTML": "<p dir=\"auto\">We could use symTag to check for <code>BPackageSymbol</code> and <code>BAnnotationSymbol</code></p>", "author": "SupunS", "createdAt": "2020-11-20T04:32:26Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -235,7 +256,8 @@ private BLangCompilationUnit getCompilationUnit(String srcFile) {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n+                && !(symbol instanceof BAnnotationSymbol);", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c97b10ce0fc61cd12c7da686d75a00a177ac3579", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..0e9d688f02e 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -256,8 +277,16 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n-                && !(symbol instanceof BAnnotationSymbol);\n+        return symbol instanceof BTypeSymbol && !Symbols.isTagOn(symbol, PACKAGE)\n+                && !Symbols.isTagOn(symbol, ANNOTATION);\n+    }\n+\n+    private BSymbol getInternalSymbol(Symbol symbol) {\n+        if (symbol.kind() == TYPE) {\n+            return ((AbstractTypeSymbol) symbol).getBType().tsymbol;\n+        }\n+\n+        return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 0e9d688f02e..537215b3c70 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -277,16 +243,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !Symbols.isTagOn(symbol, PACKAGE)\n-                && !Symbols.isTagOn(symbol, ANNOTATION);\n-    }\n-\n-    private BSymbol getInternalSymbol(Symbol symbol) {\n-        if (symbol.kind() == TYPE) {\n-            return ((AbstractTypeSymbol) symbol).getBType().tsymbol;\n-        }\n-\n-        return ((BallerinaSymbol) symbol).getInternalSymbol();\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 537215b3c70..da96b49e1e9 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -243,7 +257,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n+                && !(symbol instanceof BAnnotationSymbol);\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "76f3510f7247cde2edf8bdda550f8bfad112f403", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex da96b49e1e9..ccdb35698e7 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -257,8 +277,16 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n-                && !(symbol instanceof BAnnotationSymbol);\n+        return symbol instanceof BTypeSymbol && !Symbols.isTagOn(symbol, PACKAGE)\n+                && !Symbols.isTagOn(symbol, ANNOTATION);\n+    }\n+\n+    private BSymbol getInternalSymbol(Symbol symbol) {\n+        if (symbol.kind() == TYPE) {\n+            return ((AbstractTypeSymbol) symbol).getBType().tsymbol;\n+        }\n+\n+        return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 8f0afe438a6..c58c428344b 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -256,8 +277,16 @@ public class BallerinaSemanticModel implements SemanticModel {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n-                && !(symbol instanceof BAnnotationSymbol);\n+        return symbol instanceof BTypeSymbol && !Symbols.isTagOn(symbol, PACKAGE)\n+                && !Symbols.isTagOn(symbol, ANNOTATION);\n+    }\n+\n+    private BSymbol getInternalSymbol(Symbol symbol) {\n+        if (symbol.kind() == TYPE) {\n+            return ((AbstractTypeSymbol) symbol).getBType().tsymbol;\n+        }\n+\n+        return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n", "next_change": {"commit": "ba5aeb3c277e5d2e875e5ccd580ecdfe20a2de21", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex c58c428344b..0e1bd8cbf92 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -289,6 +299,11 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return ((BallerinaSymbol) symbol).getInternalSymbol();\n     }\n \n+    private BPackageSymbol getModuleSymbol(BLangCompilationUnit compilationUnit) {\n+        return compilationUnit.getSourceKind() == REGULAR_SOURCE ? bLangPackage.symbol :\n+                bLangPackage.getTestablePkg().symbol;\n+    }\n+\n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n         int startLine = range.startLine().line();\n         int startOffset = range.startLine().offset();\n", "next_change": {"commit": "8b4f343cb20d66f5e5787480b3a0fc1094f4516a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 0e1bd8cbf92..80fd54fd1e0 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -307,13 +458,74 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean withinRange(LineRange range, LineRange specifiedRange) {\n         int startLine = range.startLine().line();\n         int startOffset = range.startLine().offset();\n+        int endLine = range.endLine().line();\n+        int endOffset = range.endLine().offset();\n \n         int specifiedStartLine = specifiedRange.startLine().line();\n         int specifiedEndLine = specifiedRange.endLine().line();\n         int specifiedStartOffset = specifiedRange.startLine().offset();\n         int specifiedEndOffset = specifiedRange.endLine().offset();\n \n-        return startLine >= specifiedStartLine && startLine <= specifiedEndLine &&\n-                startOffset >= specifiedStartOffset && startOffset <= specifiedEndOffset;\n+        return (startLine == specifiedStartLine && startOffset >= specifiedStartOffset\n+                || startLine > specifiedStartLine)\n+                && (endLine == specifiedEndLine && endOffset <= specifiedEndOffset || endLine < specifiedEndLine);\n+    }\n+\n+    private void addToCompiledSymbols(Set<Symbol> compiledSymbols, Scope.ScopeEntry scopeEntry, Location cursorPos,\n+                                      Name name, BSymbol symbolEnvScopeOwner, Set<DiagnosticState> states) {\n+        if (scopeEntry == null || scopeEntry.symbol == null || isFilteredVarSymbol(scopeEntry.symbol, states)) {\n+            return;\n+        }\n+\n+        BSymbol symbol = scopeEntry.symbol;\n+        if ((hasCursorPosPassedSymbolPos(symbol, cursorPos) || isImportedSymbol(symbol))\n+                && !isServiceDeclSymbol(symbol)) {\n+            Symbol compiledSymbol;\n+            // TODO: Fix #31808 and remove this if-check\n+            if (symbol.getKind() == SymbolKind.PACKAGE) {\n+                compiledSymbol = symbolFactory.getBCompiledSymbol(symbol, name.getValue());\n+            } else {\n+                compiledSymbol = symbolFactory.getBCompiledSymbol(symbol, symbol.getOriginalName().getValue());\n+            }\n+\n+            if (compiledSymbol == null || compiledSymbols.contains(compiledSymbol)) {\n+                return;\n+            }\n+\n+            if (isFieldSymbol(compiledSymbol)) {\n+                BSymbol scopeEntryOwner = scopeEntry.symbol.owner;\n+                // If the current scope entry symbol is a child symbol of the enclosing node, and if the compiled\n+                // symbol is a field symbol, it can be determined that the cursor is within the field context.\n+                if (symbolEnvScopeOwner.getName().equals(scopeEntryOwner.getName())\n+                        && symbolEnvScopeOwner.pkgID.equals(scopeEntryOwner.pkgID)\n+                        && symbolEnvScopeOwner.getPosition().equals(scopeEntryOwner.getPosition())) {\n+                    return;\n+                }\n+            }\n+\n+            compiledSymbols.add(compiledSymbol);\n+        }\n+        addToCompiledSymbols(compiledSymbols, scopeEntry.next, cursorPos, name, symbolEnvScopeOwner, states);\n+    }\n+\n+    private boolean isFieldSymbol(Symbol symbol) {\n+        return symbol.kind() == CLASS_FIELD || symbol.kind() == OBJECT_FIELD || symbol.kind() == RECORD_FIELD;\n+    }\n+\n+    private boolean isServiceDeclSymbol(BSymbol symbol) {\n+        return symbol.kind == SymbolKind.SERVICE;\n+    }\n+\n+    private boolean isFilteredVarSymbol(BSymbol symbol, Set<DiagnosticState> states) {\n+        return symbol instanceof BVarSymbol && !states.contains(((BVarSymbol) symbol).state);\n+    }\n+\n+    private boolean isObjectConstructorExpr(BLangNode node) {\n+        return node instanceof BLangClassDefinition && ((BLangClassDefinition) node).flagSet.contains(Flag.OBJECT_CTOR);\n+    }\n+\n+    private boolean isAnonFunctionExpr(BLangNode node) {\n+        return (node instanceof BLangFunction && ((BLangFunction) node).flagSet.contains(Flag.LAMBDA))\n+                || node instanceof BLangArrowFunction;\n     }\n }\n", "next_change": {"commit": "fd243d6f107d94b27afc02ae297a4f0c7fe43271", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 80fd54fd1e0..1c032b6fea2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -528,4 +573,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return (node instanceof BLangFunction && ((BLangFunction) node).flagSet.contains(Flag.LAMBDA))\n                 || node instanceof BLangArrowFunction;\n     }\n+\n+    private boolean isNonNamedArgExprNode(BLangNode node) {\n+        return node instanceof BLangExpression && !(node instanceof BLangNamedArgsExpression);\n+    }\n }\n", "next_change": {"commit": "d8eb4575dea7694bdf4f2e865f02200b4eb24938", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 1c032b6fea2..395fc22c3e6 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -577,4 +580,8 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean isNonNamedArgExprNode(BLangNode node) {\n         return node instanceof BLangExpression && !(node instanceof BLangNamedArgsExpression);\n     }\n+\n+    private boolean isPackageImportedOnTheCompUnit(BSymbol symbol, String compUnit) {\n+        return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n+    }\n }\n", "next_change": {"commit": "a61d5a607bb1f9411ba8fed49c6967100232e72e", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 395fc22c3e6..9cce7646f77 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -584,4 +631,12 @@ public class BallerinaSemanticModel implements SemanticModel {\n     private boolean isPackageImportedOnTheCompUnit(BSymbol symbol, String compUnit) {\n         return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n     }\n+\n+    private static NonTerminalNode findNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n+        TextDocument textDocument = syntaxTree.textDocument();\n+        int start = textDocument.textPositionFrom(linePosition);\n+        int end = textDocument.textPositionFrom(linePosition);\n+        return ((ModulePartNode) syntaxTree.rootNode()).findNode(TextRange.from(start, end - start), true);\n+    }\n+\n }\n", "next_change": {"commit": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\nindex 9cce7646f77..9703167f473 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java\n", "chunk": "@@ -632,7 +651,7 @@ public class BallerinaSemanticModel implements SemanticModel {\n         return symbol.getKind() == SymbolKind.PACKAGE && ((BPackageSymbol) symbol).compUnit.getValue().equals(compUnit);\n     }\n \n-    private static NonTerminalNode findNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n+    private static NonTerminalNode findInnerMostNode(LinePosition linePosition, SyntaxTree syntaxTree) {\n         TextDocument textDocument = syntaxTree.textDocument();\n         int start = textDocument.textPositionFrom(linePosition);\n         int end = textDocument.textPositionFrom(linePosition);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "ccf847e61aa7a884a08afcff4fb49f697b01a6d3", "committedDate": "2020-12-14 10:13:48 +0530", "message": "Consider test files when looking up the compilation unit"}, {"oid": "ba5aeb3c277e5d2e875e5ccd580ecdfe20a2de21", "committedDate": "2020-12-14 10:13:49 +0530", "message": "Add support for looking up in tests for visibleSymbols()"}, {"oid": "3ed98c42d08b393ec0f8e4508b54076a0a5144dc", "committedDate": "2021-01-11 23:46:11 +0530", "message": "Add an overloaded symbol() method which accepts a syntax tree node"}, {"oid": "227fbacfa2fdf2262de85df2e3143c1c967c1e47", "committedDate": "2021-01-11 23:46:13 +0530", "message": "Add tests for method and remote method calls"}, {"oid": "2f420777e810481085e3fc147e3d6cb7f22964e2", "committedDate": "2021-01-12 02:11:41 +0530", "message": "Rename SyntaxNodeLocationMapper -> SyntaxNodeToLocationMapper"}, {"oid": "b551c7c778007d84c3277c4ec0bbd66e320e5ad5", "committedDate": "2021-01-12 12:46:11 +0530", "message": "Address review suggestions"}, {"oid": "66d649ef705e65ac13fb1f0ed37adff6c49aeb12", "committedDate": "2021-01-15 16:43:58 +0530", "message": "Change symbol() to accept Document instead of file name"}, {"oid": "fb84c7ba8c675950d83ec6996419d6296defc8da", "committedDate": "2021-01-15 16:43:59 +0530", "message": "Refactor symbol() implementations"}, {"oid": "2784b614e073ebbedda51480a46abe71daf8f769", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor visibleSymbols() to accept a Document instead of a string file name"}, {"oid": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor references() to use Document arg"}, {"oid": "dd3a46c509a2c0d47eef541906754915e50c00a9", "committedDate": "2021-01-15 16:44:02 +0530", "message": "Address review suggestions"}, {"oid": "e427052f205f7b6a1d00b742cb5b8a36ec42a993", "committedDate": "2021-01-15 18:30:33 +0530", "message": "Fix issue in creating type ref symbols"}, {"oid": "53659e16257984303ca5fd12c0744776043b546a", "committedDate": "2021-01-19 18:13:59 +0530", "message": "Rename moduleLevelSymbols() to moduleSymbols()"}, {"oid": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "committedDate": "2021-02-01 10:31:23 +0530", "message": "Add an API to retrieve the expr type given a syntax tree node"}, {"oid": "43e87fe3fe04f664c8b205878f4d590d10033635", "committedDate": "2021-02-01 10:31:25 +0530", "message": "Reuse old type() in new type() method"}, {"oid": "d06030ff34ef7a436d11be96ef7f2add5bffe33e", "committedDate": "2021-02-10 18:08:04 +0530", "message": "Remove usages of location()"}, {"oid": "5e5e848745a93ccddaf1e62eca0b7b789d451ef2", "committedDate": "2021-02-10 18:08:06 +0530", "message": "Address review suggestions"}, {"oid": "1c9ae3206ed51e6beed7e8d80bd4945cf479190e", "committedDate": "2021-02-15 09:31:17 +0530", "message": "Enable adding the next element of the scope-entries to visible symbols"}, {"oid": "3c3543b178e8f79606b354200c04893627b5ae92", "committedDate": "2021-03-10 13:10:57 +0530", "message": "Add support for creating service decl symbols"}, {"oid": "7c06b2440a0cd21d0c008c3d2a562b54f5f487fb", "committedDate": "2021-03-10 13:10:59 +0530", "message": "Add service decl to BIR spec"}, {"oid": "d2cfd268eaea6a3cdfaa46f659316d38d9b8cd04", "committedDate": "2021-03-26 21:47:39 +0530", "message": "Handle the missing errorneous fields at semantic API side"}, {"oid": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "committedDate": "2021-04-23 12:47:44 +0530", "message": "Add new methods for getting references without the definition location"}, {"oid": "8653afc0fde0151ac8acdb099b21beeccd446765", "committedDate": "2021-05-12 16:15:22 +0530", "message": "Fix symbol() to return the relevant typedesc for symbol lookups of types"}, {"oid": "aa12e976c063308468fc9b8f641b3358f5e1e15f", "committedDate": "2021-05-12 16:15:22 +0530", "message": "Revert the instanceof check back to BTypeSymbol"}, {"oid": "725e50b2c5683ea8814ff2bb90ad893fc57f5f0c", "committedDate": "2021-06-09 19:57:32 +0530", "message": "Skip redeclared symbols from visible symbols"}, {"oid": "9ed2fc1ca6aa25d6b905a98f51c414ca746730d7", "committedDate": "2021-06-09 20:40:24 +0530", "message": "Add overloaded version of visibleSymbols()"}, {"oid": "0c7e425f53961488e4a9edb8256f0151a23aa7bb", "committedDate": "2021-06-11 17:27:51 +0530", "message": "Encapsulate type field in BLangNode"}, {"oid": "087bc9a110b0f358e257514b0efcabd368f13069", "committedDate": "2021-06-15 11:23:38 +0530", "message": "Deprecate type() and introduce typeOf()"}, {"oid": "1f0b05f569efe47623a2ecfce9d704b36ef32933", "committedDate": "2021-06-15 11:23:39 +0530", "message": "Preserve previous behaviour for expr stmts in NodeFinder for deprecated type()"}, {"oid": "484f1515da64a0c4e940d41b9f8efc6522d34769", "committedDate": "2021-07-21 09:29:35 +0530", "message": "Remove `replaceOriginalName` and refactor"}, {"oid": "9d53f27fa3d2c87605a7257c12a9e97a8fb46ece", "committedDate": "2021-08-19 15:10:07 +0530", "message": "Add APIs to find references within the given document"}, {"oid": "cd583e7610420c4d72944a9a7745cb5efaecc5fa", "committedDate": "2021-08-27 00:30:50 +0530", "message": "Update semantic api with type def sym & ref type"}, {"oid": "77358eeb8fefa6a4ed43c9a41013b57a869fab14", "committedDate": "2021-08-30 08:11:48 +0530", "message": "Refactor API implementation"}, {"oid": "65d6be786e65d2645acfaeb3b7248aab05c461dd", "committedDate": "2021-08-30 10:28:29 +0530", "message": "Fix checkstyle failures"}, {"oid": "a32e1fec3e1458b3b41d36cd80d2fc21c2dc31d0", "committedDate": "2021-08-30 19:02:11 +0530", "message": "Return singleton type symbol for symbol() when used on singleton types"}, {"oid": "22bee6e386e4c9af3fced67c406e1a318f21bb99", "committedDate": "2021-09-02 13:17:09 +0530", "message": "Refactor code"}, {"oid": "73aab836808ea0a444ed6ea4854c8b31d41f975c", "committedDate": "2021-09-02 15:56:29 +0530", "message": "Refactor according to the review comments"}, {"oid": "acb052cd02ba4100cd47ae769bc9c0fb7cc15e70", "committedDate": "2021-09-06 15:40:53 +0530", "message": "Merge pull request #32237 from dulajdilshan/fix-32136"}, {"oid": "8e2316f44a6880781a86d8ff9e9bc7a908ad788c", "committedDate": "2021-09-07 11:41:31 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into type_ref_type_impl_upstream"}, {"oid": "e9c4409c5d62229863050241c495f6cfeaffdea3", "committedDate": "2021-09-07 16:06:56 +0530", "message": "Fix merge conflicts"}, {"oid": "d34606750532c68b4a7f1b9deca6d6b765f52922", "committedDate": "2021-09-23 06:27:00 +0530", "message": "Filter field symbols in field context when retrieving visible symbols"}, {"oid": "e105975ece0e931fc2ab53f17840535746a93c94", "committedDate": "2021-09-23 11:59:12 +0530", "message": "Escape filtering non-child field symbols of visible symbols"}, {"oid": "e3301c848886196906ae0c10edc279b9e006c246", "committedDate": "2021-09-30 12:42:49 +0530", "message": "Refactor check used to determine if a field symbol"}, {"oid": "34068e18e501107904db4399b9b4dc6443f70217", "committedDate": "2021-10-04 19:15:41 +0530", "message": "Update reference types to use type def name"}, {"oid": "0e90a070f17ff20cc0cf4dc1a79d8e983c5203ad", "committedDate": "2021-10-06 13:37:18 +0530", "message": "Remove redundant check on type definition"}, {"oid": "edcc2109830c1c331b4909cb600ba1b59ea0fa3d", "committedDate": "2021-10-07 09:35:22 +0530", "message": "Replace switch statement with equivalence check in BallerinaSemanticModel"}, {"oid": "761262f41dd37edba7b6dc55699e8ad47db640e6", "committedDate": "2021-10-12 13:13:42 +0530", "message": "Perform the child node check only for field symbols"}, {"oid": "8d7230ad8d5847d4d17c5e8bb7fa33467f00a767", "committedDate": "2021-10-13 23:38:33 +0530", "message": "Fix reference finding by symbol issue for"}, {"oid": "08f09d04536e6f3f8a599c13e64573a07dc2541c", "committedDate": "2021-10-27 13:08:16 +0530", "message": "Merge pull request #33218 from sanjana/semantic-api-fixes"}, {"oid": "37c5d63c2f2e3a810c66309885f15622ec7cabd3", "committedDate": "2021-10-27 18:06:52 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into type_ref_type_impl"}, {"oid": "39ad5016ed48de4431414ba9bd81ce97509dee66", "committedDate": "2021-10-29 09:31:10 +0530", "message": "Reuse get ref type util method"}, {"oid": "5769c867181efc4f76da03dd1d6e3c3f05045a68", "committedDate": "2021-11-12 16:11:32 +0530", "message": "Use symbol kind instead of checking insteadof"}, {"oid": "819ff3f700423500a0a9a5e68c792f87e5ebfa57", "committedDate": "2021-11-17 12:38:42 +0530", "message": "Fix the build conflicts"}, {"oid": "451925ce10490fc2641cf1708a67f07da998b482", "committedDate": "2021-11-17 14:09:42 +0530", "message": "Fix error type, type_def differentiation"}, {"oid": "d1432a89f21cdc5b934c25d8c08e2230bb560283", "committedDate": "2021-11-23 15:31:48 +0530", "message": "Remove unwanted comments"}, {"oid": "fb930b1538f747c50b69e863f7226160339034a1", "committedDate": "2021-11-23 15:34:17 +0530", "message": "Refactor anonymous error type detection logic"}, {"oid": "aa9567adc0b6ca6a7797b65eb5ee9efd05f4f217", "committedDate": "2021-11-24 21:30:42 +0530", "message": "Filter the same worker being visible within its declaration body"}, {"oid": "e8ac6f16039ea934fd2df960a8146812aed0ebcf", "committedDate": "2021-11-25 11:17:03 +0530", "message": "Update isWithinCurrentWorker() method in Semantic API"}, {"oid": "4909d4ff55e61b82e6eb28079e38a664d57b7c99", "committedDate": "2021-11-25 11:27:42 +0530", "message": "Fix failing checkstyle issue"}, {"oid": "834231bea78936c20c1798b886284cc5e96ca80e", "committedDate": "2021-11-27 20:38:17 +0530", "message": "Merge branch 'master' into VisitorRewamp_master"}, {"oid": "8b4f343cb20d66f5e5787480b3a0fc1094f4516a", "committedDate": "2021-11-30 12:04:58 +0530", "message": "Update withinRange() logic in Semantic API"}, {"oid": "49ef5ccde0496e1e9bbf890e341996457fee2c70", "committedDate": "2021-12-01 15:09:09 +0530", "message": "Get the determined types of start action invocation nodes"}, {"oid": "5bfca418b867c05da6a31a73dcf7412950945ba2", "committedDate": "2021-12-07 12:56:03 +0530", "message": "Move the withinRange method from BallerinaSemanticModel to PositionUtil"}, {"oid": "e54264b2790860ea18da172c65c56257e9730e08", "committedDate": "2021-12-08 09:04:39 +0530", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into simple-fixes"}, {"oid": "5af235391088274a8b8f1b504658a5a87af8c5a9", "committedDate": "2021-12-10 07:37:41 +0530", "message": "Merge pull request #34053 from sanjana/simple-fixes"}, {"oid": "41d6c243f3231f9376be592b5279a9e8c7cf5bac", "committedDate": "2021-12-14 18:44:37 +0530", "message": "Fix issues in identifying type refs"}, {"oid": "fd243d6f107d94b27afc02ae297a4f0c7fe43271", "committedDate": "2021-12-20 11:16:36 +0530", "message": "Add named-arg expression check for typeOf()"}, {"oid": "326b45c0bcbe1b3b815004855fc9ce5c2ad6ddcd", "committedDate": "2022-01-22 08:23:00 +0530", "message": "Ignore package symbols that are not imported to the current file"}, {"oid": "d8eb4575dea7694bdf4f2e865f02200b4eb24938", "committedDate": "2022-01-24 10:08:38 +0530", "message": "Address review comments"}, {"oid": "6c069a477d7369e1877d69a66f0e99883b6ad7d9", "committedDate": "2022-02-08 12:46:45 +0530", "message": "Fix not showing non-init methods in visibleSymbols()"}, {"oid": "1a193e71ebbe9d185687d357caf2ce570e365510", "committedDate": "2022-02-17 14:21:35 +0530", "message": "Ignore resource-functions in visible-symbols"}, {"oid": "84b5caf9c03100f813f665125706754504ad3389", "committedDate": "2022-02-17 14:22:53 +0530", "message": "Ignore class-methods as visible-symbols when cursor is at class-field definition"}, {"oid": "3886753f6cd56d3430f0848acbd609b2a0f4a64b", "committedDate": "2022-02-18 10:56:02 +0530", "message": "Add closure support for visible-symbols"}, {"oid": "d75a54358a5de4ecfd24e0bae8519d15ccd758c2", "committedDate": "2022-02-22 10:06:52 +0530", "message": "Fix CCE in Ballerina Semantic Model"}, {"oid": "ec6db5939cee599da9e1ad58e95845b1fcd69490", "committedDate": "2022-02-23 12:38:03 +0530", "message": "Merge pull request #34287 from dulajdilshan/fix-33492"}, {"oid": "d12db834337b4a883c5bf2014075ec06dae8fc21", "committedDate": "2022-03-03 16:27:38 +0530", "message": "Create basic Skeleton of the Types API"}, {"oid": "18ab30bf5dac5bc39970bbdba11100ac4c9d77ba", "committedDate": "2022-03-04 15:22:04 +0530", "message": "Implement  method in Types API"}, {"oid": "0ea6fcda72c8ed717322aae66bc22723a1fb9305", "committedDate": "2022-03-29 15:46:48 +0530", "message": "Move Types API to types package"}, {"oid": "530f980ae54b259f03f977f9232ae3be389aedd0", "committedDate": "2022-04-06 10:37:39 +0530", "message": "Seperate the Types API interface and implementation"}, {"oid": "50c583f56d62e00ccfab5fc05b472e46a593e917", "committedDate": "2022-09-30 13:14:15 +0530", "message": "Add expectedType"}, {"oid": "a61d5a607bb1f9411ba8fed49c6967100232e72e", "committedDate": "2022-09-30 13:14:24 +0530", "message": "Add ExpectedTypeFinder"}, {"oid": "dbee33ae4e611474c84c164f233849a3dd5a95a4", "committedDate": "2022-09-30 13:14:26 +0530", "message": "Update expectedType parameters"}, {"oid": "493f032ad704e7c0f1941173efba04fc07d6a2bf", "committedDate": "2022-09-30 13:14:37 +0530", "message": "Refactor imports"}, {"oid": "ea09e602b106e994663efe07a5e161d38b994d9f", "committedDate": "2022-09-30 13:14:56 +0530", "message": "Refactor code"}, {"oid": "430255d84ccb2a17b23167333c1db71c827c1809", "committedDate": "2022-09-30 13:15:02 +0530", "message": "Refactor code"}, {"oid": "1b8d4ccdae670234638d6c7a7b3e49e1ab5086ea", "committedDate": "2022-09-30 13:16:23 +0530", "message": "Refactor code"}, {"oid": "c0db070bff83f06055d45e1992c09ede5632836a", "committedDate": "2022-10-14 09:53:42 +0530", "message": "Add error handling"}, {"oid": "caaa43e0c648649062914192e62b097fac9bc696", "committedDate": "2022-11-04 15:22:04 +0530", "message": "Address review suggestions"}, {"oid": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "committedDate": "2023-01-25 11:53:17 +0530", "message": "Address review suggestions"}, {"oid": "365768cb02a25f32d6d3bd17da0e234214d215ac", "committedDate": "2023-01-25 12:36:49 +0530", "message": "Refactor code"}, {"oid": "12560f8af64009fb2e01ccc1fd4f776b48bc43bd", "committedDate": "2023-02-16 11:01:13 +0530", "message": "Introduce fileName() and deprecate filePath()"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391971", "body": "I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..\r\nThen it reads as \"give me the references of this symbol\"", "bodyText": "I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..\nThen it reads as \"give me the references of this symbol\"", "bodyHTML": "<p dir=\"auto\">I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..<br>\nThen it reads as \"give me the references of this symbol\"</p>", "author": "SupunS", "createdAt": "2020-11-20T04:34:51Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, LinePosition position);", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740470", "bodyText": "Added an overloaded version of this which takes a Symbol.", "author": "pubudu91", "createdAt": "2020-11-20T14:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex a09007b8c6f..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,14 +60,12 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n+     * Finds all the references of the specified symbol within the module.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param symbol Symbol for which the references are looked up\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> allReferences(Symbol symbol);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex a09007b8c6f..576a73c4aa4 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -59,25 +75,32 @@ public interface SemanticModel {\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the relevant scope.\n+     *\n+     * @param symbol a {@link Symbol} insance\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(Symbol symbol);\n+\n     /**\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceFile The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceFile, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> getType(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 576a73c4aa4..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param sourceFile The source file document in which to look up the position\n+     * @param sourceDocument The source file document in which to look up the position\n      * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(Document sourceFile, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "8a49c192f24baf2526ab694a6462e7b31181a809", "committedDate": "2020-12-14 17:22:36 +0530", "message": "Remove typeQualifiers() from object type symbol"}, {"oid": "3ed98c42d08b393ec0f8e4508b54076a0a5144dc", "committedDate": "2021-01-11 23:46:11 +0530", "message": "Add an overloaded symbol() method which accepts a syntax tree node"}, {"oid": "b551c7c778007d84c3277c4ec0bbd66e320e5ad5", "committedDate": "2021-01-12 12:46:11 +0530", "message": "Address review suggestions"}, {"oid": "66d649ef705e65ac13fb1f0ed37adff6c49aeb12", "committedDate": "2021-01-15 16:43:58 +0530", "message": "Change symbol() to accept Document instead of file name"}, {"oid": "2784b614e073ebbedda51480a46abe71daf8f769", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor visibleSymbols() to accept a Document instead of a string file name"}, {"oid": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor references() to use Document arg"}, {"oid": "dd3a46c509a2c0d47eef541906754915e50c00a9", "committedDate": "2021-01-15 16:44:02 +0530", "message": "Address review suggestions"}, {"oid": "53659e16257984303ca5fd12c0744776043b546a", "committedDate": "2021-01-19 18:13:59 +0530", "message": "Rename moduleLevelSymbols() to moduleSymbols()"}, {"oid": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "committedDate": "2021-02-01 10:31:23 +0530", "message": "Add an API to retrieve the expr type given a syntax tree node"}, {"oid": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "committedDate": "2021-04-23 12:47:44 +0530", "message": "Add new methods for getting references without the definition location"}, {"oid": "9ed2fc1ca6aa25d6b905a98f51c414ca746730d7", "committedDate": "2021-06-09 20:40:24 +0530", "message": "Add overloaded version of visibleSymbols()"}, {"oid": "087bc9a110b0f358e257514b0efcabd368f13069", "committedDate": "2021-06-15 11:23:38 +0530", "message": "Deprecate type() and introduce typeOf()"}, {"oid": "9d53f27fa3d2c87605a7257c12a9e97a8fb46ece", "committedDate": "2021-08-19 15:10:07 +0530", "message": "Add APIs to find references within the given document"}, {"oid": "18ab30bf5dac5bc39970bbdba11100ac4c9d77ba", "committedDate": "2022-03-04 15:22:04 +0530", "message": "Implement  method in Types API"}, {"oid": "673ab3d5d5ed30fb905d41958a4ef2d6e18430e5", "committedDate": "2022-03-08 11:52:20 +0530", "message": "Reformat code and fix checkstyle failing issues"}, {"oid": "18f94ec40be0d9babbde1e230923c302a04c8580", "committedDate": "2022-03-21 14:58:46 +0530", "message": "Reformat code"}, {"oid": "023698cb34805191a9dfcc03e169b349b52eaf2c", "committedDate": "2022-03-28 12:07:34 +0530", "message": "Address review comments"}, {"oid": "0ea6fcda72c8ed717322aae66bc22723a1fb9305", "committedDate": "2022-03-29 15:46:48 +0530", "message": "Move Types API to types package"}, {"oid": "7f4aa9d747b878641083196e57451d32c45f8c2a", "committedDate": "2022-03-31 13:26:07 +0530", "message": "Reformat code of Types API"}, {"oid": "530f980ae54b259f03f977f9232ae3be389aedd0", "committedDate": "2022-04-06 10:37:39 +0530", "message": "Seperate the Types API interface and implementation"}, {"oid": "50c583f56d62e00ccfab5fc05b472e46a593e917", "committedDate": "2022-09-30 13:14:15 +0530", "message": "Add expectedType"}, {"oid": "dbee33ae4e611474c84c164f233849a3dd5a95a4", "committedDate": "2022-09-30 13:14:26 +0530", "message": "Update expectedType parameters"}, {"oid": "430255d84ccb2a17b23167333c1db71c827c1809", "committedDate": "2022-09-30 13:15:02 +0530", "message": "Refactor code"}, {"oid": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "committedDate": "2023-01-25 11:53:17 +0530", "message": "Address review suggestions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527392668", "body": "unused method?", "bodyText": "unused method?", "bodyHTML": "<p dir=\"auto\">unused method?</p>", "author": "SupunS", "createdAt": "2020-11-20T04:37:32Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java", "diffHunk": "@@ -108,6 +110,10 @@ public boolean isLangLib() {\n         return isLangLib;\n     }\n \n+    public BSymbol getInternalSymbol() {", "originalCommit": "089cbfe097f2b6c634be23a0627e650227db01ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDcxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740716", "bodyText": "In use, after the addition of the above mentioned API.", "author": "pubudu91", "createdAt": "2020-11-20T14:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "c97b10ce0fc61cd12c7da686d75a00a177ac3579", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 5dd034d85ea..05d9dac4b16 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,15 +101,6 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n-    /**\n-     * Whether the symbol is a langlib symbol.\n-     *\n-     * @return {@link Boolean} whether langlib or not\n-     */\n-    public boolean isLangLib() {\n-        return isLangLib;\n-    }\n-\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 05d9dac4b16..c5f820c5173 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,8 +99,13 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n-    public BSymbol getInternalSymbol() {\n-        return this.internalSymbol;\n+    /**\n+     * Whether the symbol is a langlib symbol.\n+     *\n+     * @return {@link Boolean} whether langlib or not\n+     */\n+    public boolean isLangLib() {\n+        return isLangLib;\n     }\n \n     private Documentation getDocAttachment(BSymbol symbol) {\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex c5f820c5173..5dd034d85ea 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -108,6 +110,10 @@ public class BallerinaSymbol implements Symbol {\n         return isLangLib;\n     }\n \n+    public BSymbol getInternalSymbol() {\n+        return this.internalSymbol;\n+    }\n+\n     private Documentation getDocAttachment(BSymbol symbol) {\n         return symbol == null ? null : new BallerinaDocumentation(symbol.markdownDocumentation);\n     }\n", "next_change": {"commit": "76f3510f7247cde2edf8bdda550f8bfad112f403", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 5dd034d85ea..05d9dac4b16 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,15 +101,6 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n-    /**\n-     * Whether the symbol is a langlib symbol.\n-     *\n-     * @return {@link Boolean} whether langlib or not\n-     */\n-    public boolean isLangLib() {\n-        return isLangLib;\n-    }\n-\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 5dd034d85ea..89ea4bc4d32 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -101,15 +98,6 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n-    /**\n-     * Whether the symbol is a langlib symbol.\n-     *\n-     * @return {@link Boolean} whether langlib or not\n-     */\n-    public boolean isLangLib() {\n-        return isLangLib;\n-    }\n-\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": {"commit": "2e8c0495150bdfd3c4cac483cb6dc00ced8ac5cb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 89ea4bc4d32..7b3ada948d3 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -98,6 +99,29 @@ public class BallerinaSymbol implements Symbol {\n         return this.position;\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof Symbol)) {\n+            return false;\n+        }\n+\n+        Symbol symbol = (Symbol) obj;\n+\n+        return this.name().equals(symbol.name())\n+                && this.moduleID().equals(symbol.moduleID())\n+                && this.kind().equals(symbol.kind())\n+                && this.location().lineRange().equals(symbol.location().lineRange());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(this.name(), this.moduleID(), this.kind(), this.location().lineRange());\n+    }\n+\n     public BSymbol getInternalSymbol() {\n         return this.internalSymbol;\n     }\n", "next_change": {"commit": "b18d32f2634692d46e42437c1291039108ddc7eb", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 7b3ada948d3..b5ad0144160 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -126,7 +124,7 @@ public class BallerinaSymbol implements Symbol {\n         return this.internalSymbol;\n     }\n \n-    private Documentation getDocAttachment(BSymbol symbol) {\n+    Documentation getDocAttachment(BSymbol symbol) {\n         return symbol == null ? null : new BallerinaDocumentation(symbol.markdownDocumentation);\n     }\n \n", "next_change": {"commit": "87961db67682bc697bd25c6e257015a463648ec7", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex b5ad0144160..84296853e39 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -128,6 +128,22 @@ public class BallerinaSymbol implements Symbol {\n         return symbol == null ? null : new BallerinaDocumentation(symbol.markdownDocumentation);\n     }\n \n+    private boolean isSameName(Optional<String> name1, Optional<String> name2) {\n+        if (name1.isEmpty() || name2.isEmpty()) {\n+            return false;\n+        }\n+\n+        return name1.get().equals(name2.get());\n+    }\n+\n+    private boolean isSameModule(Optional<ModuleSymbol> mod1, Optional<ModuleSymbol> mod2) {\n+        if (mod1.isEmpty() || mod2.isEmpty()) {\n+            return false;\n+        }\n+\n+        return mod1.get().id().equals(mod2.get().id());\n+    }\n+\n     /**\n      * Represents Ballerina Symbol Builder.\n      *\n", "next_change": {"commit": "f76ad2e60f14e28ced90abfb8a89c306c33e8031", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 84296853e39..240310025c0 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -152,23 +165,23 @@ public class BallerinaSymbol implements Symbol {\n     protected abstract static class SymbolBuilder<T extends SymbolBuilder<T>> {\n \n         protected String name;\n-        protected PackageID moduleID;\n         protected SymbolKind ballerinaSymbolKind;\n         protected BSymbol bSymbol;\n+        protected CompilerContext context;\n \n         /**\n          * Symbol Builder Constructor.\n          *\n          * @param name       Symbol Name\n-         * @param moduleID   module ID of the symbol\n          * @param symbolKind symbol kind\n          * @param bSymbol    symbol to evaluate\n+         * @param context    context of the compilation\n          */\n-        public SymbolBuilder(String name, PackageID moduleID, SymbolKind symbolKind, BSymbol bSymbol) {\n+        public SymbolBuilder(String name, SymbolKind symbolKind, BSymbol bSymbol, CompilerContext context) {\n             this.name = name;\n-            this.moduleID = moduleID;\n             this.ballerinaSymbolKind = symbolKind;\n             this.bSymbol = bSymbol;\n+            this.context = context;\n         }\n \n         /**\n", "next_change": {"commit": "9575e1e886bd02c9094f547a78b5e4d6a5d985bc", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex 240310025c0..c6fda3a04aa 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -190,5 +228,13 @@ public class BallerinaSymbol implements Symbol {\n          * @return {@link BallerinaSymbol} built\n          */\n         public abstract BallerinaSymbol build();\n+\n+        /**\n+         * Build the Ballerina Symbol.\n+         *\n+         * @param  replaceOriginalName     whether to replace the original name or not\n+         * @return {@link BallerinaSymbol} built\n+         */\n+//        public abstract BallerinaSymbol build(boolean replaceOriginalName);\n     }\n }\n", "next_change": {"commit": "570758691c3f2e8df9d6b70c8947ebf0ce2549ed", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\nindex c6fda3a04aa..34d6c862250 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java\n", "chunk": "@@ -228,13 +212,5 @@ public class BallerinaSymbol implements Symbol {\n          * @return {@link BallerinaSymbol} built\n          */\n         public abstract BallerinaSymbol build();\n-\n-        /**\n-         * Build the Ballerina Symbol.\n-         *\n-         * @param  replaceOriginalName     whether to replace the original name or not\n-         * @return {@link BallerinaSymbol} built\n-         */\n-//        public abstract BallerinaSymbol build(boolean replaceOriginalName);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "2e8c0495150bdfd3c4cac483cb6dc00ced8ac5cb", "committedDate": "2021-01-04 13:24:18 +0530", "message": "Add base equals() and hashCode() implementations to symbols and type symbols"}, {"oid": "b18d32f2634692d46e42437c1291039108ddc7eb", "committedDate": "2021-01-15 02:01:11 +0530", "message": "Implement Documentable for documentable symbols"}, {"oid": "19476832fb36c438f860532f8cefeda31d888538", "committedDate": "2021-01-15 02:01:12 +0530", "message": "Remove docAttachment() method"}, {"oid": "8026b9ea82b097ceb2e2eca6a9f47a4d1680a15f", "committedDate": "2021-02-10 18:08:00 +0530", "message": "Introduce new methods for name(), moduleID() and location()"}, {"oid": "e0e6ea15502ee38ac195d72be3bd5a285b277182", "committedDate": "2021-02-10 18:08:00 +0530", "message": "Replace name() usages with getName() in compiler"}, {"oid": "cfdefcd01d8d254cb381e88fe2077818df501b7c", "committedDate": "2021-02-10 18:08:02 +0530", "message": "Remove name() method"}, {"oid": "87961db67682bc697bd25c6e257015a463648ec7", "committedDate": "2021-02-10 18:08:02 +0530", "message": "Replace moduleID() usages with getModule().get().id()"}, {"oid": "c197d749a120c30724aa6544bef83a516fa667ea", "committedDate": "2021-02-10 18:08:03 +0530", "message": "Remove moduleID() method from Symbol"}, {"oid": "4c3cc04e86516fe37822987a7cf6e1338604fd51", "committedDate": "2021-02-10 18:08:04 +0530", "message": "Implement getModule() for symbols"}, {"oid": "f76ad2e60f14e28ced90abfb8a89c306c33e8031", "committedDate": "2021-02-10 18:08:04 +0530", "message": "Remove use of package ID in symbols"}, {"oid": "d06030ff34ef7a436d11be96ef7f2add5bffe33e", "committedDate": "2021-02-10 18:08:04 +0530", "message": "Remove usages of location()"}, {"oid": "ed12a51c0cd400f4e3f574aba5adb6e299f98efb", "committedDate": "2021-04-27 15:28:51 +0530", "message": "Change approach by modifying the getName() method in BallerinaSymbol"}, {"oid": "056faa8f67136516da4b73b09b0e9f22268d0e50", "committedDate": "2021-04-28 10:39:03 +0530", "message": "Remove check in getName() method"}, {"oid": "66bcddba99d446505d7a4a78cdb9b0c67bc332cd", "committedDate": "2021-04-30 12:22:18 +0530", "message": "Correct getName() to not escape reserved keywords in the langlib context"}, {"oid": "74ba080b73f90e7d8f0fcd9bd0823c561736f1b6", "committedDate": "2021-04-30 12:44:57 +0530", "message": "Optimize imports in BallerinaSymbol"}, {"oid": "7e5bae2db28aa3b318fd3df8d003092182478ea5", "committedDate": "2021-05-03 21:25:57 +0530", "message": "Refactor and simplify changes"}, {"oid": "94958f8d94bfa698f467ff406b39e636fd65edb8", "committedDate": "2021-05-03 22:04:05 +0530", "message": "Fix review suggestions"}, {"oid": "5135b7ee5015618583b380c67dca3cabd7edb41b", "committedDate": "2021-05-03 22:27:37 +0530", "message": "Cache the escaped name values in Ballerina Symbol"}, {"oid": "3a6ec5c0bca7723d7834d3304ab528c16f344346", "committedDate": "2021-05-03 22:44:22 +0530", "message": "Remove the null check of moduleID"}, {"oid": "a422f8c370661f43357145b665e6bfeaa3d58a81", "committedDate": "2021-06-25 04:36:12 +0530", "message": "Assign original-name to escapedName in BallerinaSymbol"}, {"oid": "88420357ed8f0a60f5b49c8e10b08ead6fd1f6c2", "committedDate": "2021-06-29 10:46:58 +0530", "message": "Remove duplicated constructor"}, {"oid": "9575e1e886bd02c9094f547a78b5e4d6a5d985bc", "committedDate": "2021-07-08 09:14:36 +0530", "message": "Introduce replace-original-name param when creating compiler-api symbols"}, {"oid": "3cc79fec881e56cc0789a4d198d8df2566d75a33", "committedDate": "2021-07-08 09:43:27 +0530", "message": "Return the name if it is not a reserved keyword nor langlib method name"}, {"oid": "484f1515da64a0c4e940d41b9f8efc6522d34769", "committedDate": "2021-07-21 09:29:35 +0530", "message": "Remove `replaceOriginalName` and refactor"}, {"oid": "570758691c3f2e8df9d6b70c8947ebf0ce2549ed", "committedDate": "2021-07-21 10:38:12 +0530", "message": "Fix spotbugs checks"}, {"oid": "f1c58a6daf5ce65efc08b3b5edf0542dbbb5a396", "committedDate": "2021-07-21 12:55:09 +0530", "message": "Introduce getOriginalName() to symbol in compiler API"}, {"oid": "24f25e09855e352f62bc6294880014b510d87b98", "committedDate": "2021-07-21 13:47:57 +0530", "message": "Skip un-escaping for 'join()"}, {"oid": "e1d9072f99649400eb0b017f00f7e4601532e265", "committedDate": "2021-07-28 08:46:58 +0530", "message": "Introduce nameEquals() method for symbols"}, {"oid": "9fa4960a1bbd4e227ec76bdbe0ecaef5efb0a95b", "committedDate": "2021-07-30 17:42:06 +0530", "message": "Address review comments"}, {"oid": "3a010fb0d1028e78af38fe9eb4c0cd4960be4795", "committedDate": "2021-08-03 10:11:36 +0530", "message": "Improve checking equality of symbol-name"}, {"oid": "0a00cb4fc4405e7ca5aac9d152fe17d4ca5835f5", "committedDate": "2021-08-17 09:40:37 +0530", "message": "Add review suggestion"}, {"oid": "c22477d9cfbf7f115c843c61d47255ccb6461372", "committedDate": "2021-08-25 12:34:15 +0530", "message": "Override hashCode method for ballerina service-declaration symbol"}, {"oid": "5dc8b1fd792486d073fee71abc9e3de9e92e2085", "committedDate": "2021-12-02 12:49:21 +0530", "message": "Move IdentifierUtils class to new module"}, {"oid": "46bf0b8946f4854480380cc7df70eb270f0e9f1c", "committedDate": "2021-12-02 12:49:21 +0530", "message": "Change package name"}, {"oid": "bfc1cf92167e3b7bf88bf7c6d161acfa9ce5637b", "committedDate": "2022-01-06 01:39:08 +0530", "message": "Remove special case handling for keywords used in lang lib"}, {"oid": "147e4a242878ed3196bc20d80cfb11151fa205b9", "committedDate": "2022-03-07 11:18:29 +0530", "message": "Extract unescapedUnicode() method into a util class"}, {"oid": "2282b5e7d4a0f834a3fb0945c9c68d6a333f39bb", "committedDate": "2022-03-18 12:06:57 +0530", "message": "Implement accept() and apply() methods in symbol impls"}, {"oid": "12560f8af64009fb2e01ccc1fd4f776b48bc43bd", "committedDate": "2023-02-16 11:01:13 +0530", "message": "Introduce fileName() and deprecate filePath()"}]}, {"oid": "c97b10ce0fc61cd12c7da686d75a00a177ac3579", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c97b10ce0fc61cd12c7da686d75a00a177ac3579", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-20T14:43:12Z", "type": "forcePushed"}, {"oid": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-20T15:48:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528473899", "body": "Do we need the file name here?", "bodyText": "Do we need the file name here?", "bodyHTML": "<p dir=\"auto\">Do we need the file name here?</p>", "author": "SupunS", "createdAt": "2020-11-23T05:07:10Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,25 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param symbol   a {@link Symbol} insance\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, Symbol symbol);", "originalCommit": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4MDQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528480448", "bodyText": "Don't need it. Removed with 345a9e0", "author": "pubudu91", "createdAt": "2020-11-23T05:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "345a9e03f53b08bc234664e72bd5b79f27c073e7", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 5ef492bc428..9043e1cf9e1 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -62,11 +62,10 @@ public interface SemanticModel {\n     /**\n      * Finds all the references of the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param symbol   a {@link Symbol} insance\n+     * @param symbol a {@link Symbol} insance\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, Symbol symbol);\n+    List<Location> references(Symbol symbol);\n \n     /**\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n", "next_change": {"commit": "72e73ca2e2913b811199782e923367195c0dedf5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 9043e1cf9e1..50d93782ca2 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,22 +60,12 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the relevant scope.\n+     * Finds all the references of the specified symbol within the module.\n      *\n-     * @param symbol a {@link Symbol} insance\n+     * @param symbol Symbol for which the references are looked up\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(Symbol symbol);\n-\n-    /**\n-     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n-     * the specified symbol within the relevant scope.\n-     *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n-     * @return A {@link List} of line ranges of all the references\n-     */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> allReferences(Symbol symbol);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 50d93782ca2..c18f88b3bc8 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -60,12 +60,14 @@ public interface SemanticModel {\n     List<Symbol> moduleLevelSymbols();\n \n     /**\n-     * Finds all the references of the specified symbol within the module.\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n      *\n-     * @param symbol Symbol for which the references are looked up\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(Symbol symbol);\n+    List<Location> allReferences(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": {"commit": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c18f88b3bc8..c16f7cb8704 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -67,7 +67,7 @@ public interface SemanticModel {\n      * @param position a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> allReferences(String fileName, LinePosition position);\n+    List<Location> references(String fileName, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 5ef492bc428..c143d170ddc 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -62,11 +62,10 @@ public interface SemanticModel {\n     /**\n      * Finds all the references of the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param symbol   a {@link Symbol} insance\n+     * @param symbol a {@link Symbol} insance\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, Symbol symbol);\n+    List<Location> references(Symbol symbol);\n \n     /**\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n", "next_change": {"commit": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex c143d170ddc..576a73c4aa4 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -71,21 +87,20 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param fileName name of the file in which to look up the specified position\n-     * @param position a cursor position in the source\n+     * @param sourceFile The source file document in which to look up the position\n+     * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(String fileName, LinePosition position);\n+    List<Location> references(Document sourceFile, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param fileName path for the file with the expression\n      * @param range    the text range of the expression\n      * @return the type of the expression\n      */\n-    Optional<TypeSymbol> type(String fileName, LineRange range);\n+    Optional<TypeSymbol> type(LineRange range);\n \n     /**\n      * Get the diagnostics within the given text Span.\n", "next_change": {"commit": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 576a73c4aa4..91d1a15693a 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -87,21 +86,30 @@ public interface SemanticModel {\n      * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n      * the specified symbol within the relevant scope.\n      *\n-     * @param sourceFile The source file document in which to look up the position\n+     * @param sourceDocument The source file document in which to look up the position\n      * @param position   a cursor position in the source\n      * @return A {@link List} of line ranges of all the references\n      */\n-    List<Location> references(Document sourceFile, LinePosition position);\n+    List<Location> references(Document sourceDocument, LinePosition position);\n \n     /**\n      * Retrieves the type of the expression in the specified text range. If it's not a valid expression, returns an\n      * empty {@link Optional} value!.\n      *\n-     * @param range    the text range of the expression\n+     * @param range the text range of the expression\n      * @return the type of the expression\n      */\n     Optional<TypeSymbol> type(LineRange range);\n \n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> type(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": {"commit": "087bc9a110b0f358e257514b0efcabd368f13069", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\nindex 91d1a15693a..d634e48e860 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java\n", "chunk": "@@ -107,9 +142,29 @@ public interface SemanticModel {\n      *\n      * @param node The expression node of which the type is needed\n      * @return The type if it's a valid expression node, if not, returns empty\n+     * @deprecated Deprecated since this returns type for non-expression nodes as well. Use typeOf() instead.\n      */\n+    @Deprecated\n     Optional<TypeSymbol> type(Node node);\n \n+    /**\n+     * Retrieves the type of the node in the specified text range. The node matching the specified range should be an\n+     * expression. For any other kind of node, this will return empty.\n+     *\n+     * @param range the text range of the expression\n+     * @return the type of the expression\n+     */\n+    Optional<TypeSymbol> typeOf(LineRange range);\n+\n+    /**\n+     * Given a syntax tree node, returns the type of that node, if it is an expression node. For any other node, this\n+     * will return empty.\n+     *\n+     * @param node The expression node of which the type is needed\n+     * @return The type if it's a valid expression node, if not, returns empty\n+     */\n+    Optional<TypeSymbol> typeOf(Node node);\n+\n     /**\n      * Get the diagnostics within the given text Span.\n      *\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cd21b37ffcd5a2836c7aba5311bf4766ab97775", "message": "Merge commit", "committedDate": null}, {"oid": "8a49c192f24baf2526ab694a6462e7b31181a809", "committedDate": "2020-12-14 17:22:36 +0530", "message": "Remove typeQualifiers() from object type symbol"}, {"oid": "3ed98c42d08b393ec0f8e4508b54076a0a5144dc", "committedDate": "2021-01-11 23:46:11 +0530", "message": "Add an overloaded symbol() method which accepts a syntax tree node"}, {"oid": "b551c7c778007d84c3277c4ec0bbd66e320e5ad5", "committedDate": "2021-01-12 12:46:11 +0530", "message": "Address review suggestions"}, {"oid": "66d649ef705e65ac13fb1f0ed37adff6c49aeb12", "committedDate": "2021-01-15 16:43:58 +0530", "message": "Change symbol() to accept Document instead of file name"}, {"oid": "2784b614e073ebbedda51480a46abe71daf8f769", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor visibleSymbols() to accept a Document instead of a string file name"}, {"oid": "4dfc28d4c7fb4c187747eeff97a379a659bda538", "committedDate": "2021-01-15 16:44:01 +0530", "message": "Refactor references() to use Document arg"}, {"oid": "dd3a46c509a2c0d47eef541906754915e50c00a9", "committedDate": "2021-01-15 16:44:02 +0530", "message": "Address review suggestions"}, {"oid": "53659e16257984303ca5fd12c0744776043b546a", "committedDate": "2021-01-19 18:13:59 +0530", "message": "Rename moduleLevelSymbols() to moduleSymbols()"}, {"oid": "93a6b31db6e4bbc50864c7e02a97de46b5b4f283", "committedDate": "2021-02-01 10:31:23 +0530", "message": "Add an API to retrieve the expr type given a syntax tree node"}, {"oid": "a7ce1f70406ad91f1b53e6531541d1d9ef5a8c2d", "committedDate": "2021-04-23 12:47:44 +0530", "message": "Add new methods for getting references without the definition location"}, {"oid": "9ed2fc1ca6aa25d6b905a98f51c414ca746730d7", "committedDate": "2021-06-09 20:40:24 +0530", "message": "Add overloaded version of visibleSymbols()"}, {"oid": "087bc9a110b0f358e257514b0efcabd368f13069", "committedDate": "2021-06-15 11:23:38 +0530", "message": "Deprecate type() and introduce typeOf()"}, {"oid": "9d53f27fa3d2c87605a7257c12a9e97a8fb46ece", "committedDate": "2021-08-19 15:10:07 +0530", "message": "Add APIs to find references within the given document"}, {"oid": "18ab30bf5dac5bc39970bbdba11100ac4c9d77ba", "committedDate": "2022-03-04 15:22:04 +0530", "message": "Implement  method in Types API"}, {"oid": "673ab3d5d5ed30fb905d41958a4ef2d6e18430e5", "committedDate": "2022-03-08 11:52:20 +0530", "message": "Reformat code and fix checkstyle failing issues"}, {"oid": "18f94ec40be0d9babbde1e230923c302a04c8580", "committedDate": "2022-03-21 14:58:46 +0530", "message": "Reformat code"}, {"oid": "023698cb34805191a9dfcc03e169b349b52eaf2c", "committedDate": "2022-03-28 12:07:34 +0530", "message": "Address review comments"}, {"oid": "0ea6fcda72c8ed717322aae66bc22723a1fb9305", "committedDate": "2022-03-29 15:46:48 +0530", "message": "Move Types API to types package"}, {"oid": "7f4aa9d747b878641083196e57451d32c45f8c2a", "committedDate": "2022-03-31 13:26:07 +0530", "message": "Reformat code of Types API"}, {"oid": "530f980ae54b259f03f977f9232ae3be389aedd0", "committedDate": "2022-04-06 10:37:39 +0530", "message": "Seperate the Types API interface and implementation"}, {"oid": "50c583f56d62e00ccfab5fc05b472e46a593e917", "committedDate": "2022-09-30 13:14:15 +0530", "message": "Add expectedType"}, {"oid": "dbee33ae4e611474c84c164f233849a3dd5a95a4", "committedDate": "2022-09-30 13:14:26 +0530", "message": "Update expectedType parameters"}, {"oid": "430255d84ccb2a17b23167333c1db71c827c1809", "committedDate": "2022-09-30 13:15:02 +0530", "message": "Refactor code"}, {"oid": "412f7ec8c187cacaadc4cab8784f28eb032fc3bb", "committedDate": "2023-01-25 11:53:17 +0530", "message": "Address review suggestions"}]}, {"oid": "345a9e03f53b08bc234664e72bd5b79f27c073e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/345a9e03f53b08bc234664e72bd5b79f27c073e7", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T05:39:42Z", "type": "forcePushed"}, {"oid": "25f59338929a407156633bd7586fe209c3577fc7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25f59338929a407156633bd7586fe209c3577fc7", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T06:03:20Z", "type": "forcePushed"}, {"oid": "72e73ca2e2913b811199782e923367195c0dedf5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72e73ca2e2913b811199782e923367195c0dedf5", "message": "Add API for getting all references of a symbol", "committedDate": "2020-11-23T09:07:57Z", "type": "commit"}, {"oid": "2133f175a25aeda2fc8db97557b49c2a2292b226", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2133f175a25aeda2fc8db97557b49c2a2292b226", "message": "Add initial impl of reference finding visitor", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "38bb3ed07f61b545be3fe6cc5c674ed16fb13d86", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38bb3ed07f61b545be3fe6cc5c674ed16fb13d86", "message": "Add an API to NodeFinder to lookup the scoping AST node", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "e63ff2aaff28a504867e8bf44a6c982b24608e6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e63ff2aaff28a504867e8bf44a6c982b24608e6a", "message": "Implement allReferences()", "committedDate": "2020-11-23T09:08:02Z", "type": "commit"}, {"oid": "37e4d7cffca5c7edd001c66cbd49f43e5d89a9f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37e4d7cffca5c7edd001c66cbd49f43e5d89a9f3", "message": "Move the find all ref test to a separate package", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "097f59d984045a502592f1593fea5645a17128df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/097f59d984045a502592f1593fea5645a17128df", "message": "Separate the find ref test and separate the tests by data provider", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "47ae9a6ddbf5478c91dfb42aaa289deeb5ee1994", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47ae9a6ddbf5478c91dfb42aaa289deeb5ee1994", "message": "Fix issues in module prefix searching and add tests", "committedDate": "2020-11-23T09:08:03Z", "type": "commit"}, {"oid": "7a58089a81402387ba1e69682a49544f45624d47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a58089a81402387ba1e69682a49544f45624d47", "message": "Fix issue in module prefix finding logic", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "6b50d98d0c7ac61cff38ca258374ea8143538f53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b50d98d0c7ac61cff38ca258374ea8143538f53", "message": "Add tests for function and action calls", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "22cb97bab292a438d805937a9343b48c789cd6c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22cb97bab292a438d805937a9343b48c789cd6c8", "message": "Fix issue in lang lib invocations and add more tests for exprs", "committedDate": "2020-11-23T09:08:04Z", "type": "commit"}, {"oid": "5eb0c1bba57397a31417e102d16fe9b6f02a1943", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5eb0c1bba57397a31417e102d16fe9b6f02a1943", "message": "Fix position issues in anon functions", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "535133f1da875e5c97f604e60e28246b756e8bec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/535133f1da875e5c97f604e60e28246b756e8bec", "message": "Add tests for find all refs with lambda functions", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "e9bc7b3d2b9b3cd27091423b80dd9aaeec91dc86", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9bc7b3d2b9b3cd27091423b80dd9aaeec91dc86", "message": "Fix issues in worker actions and add tests for worker related ref lookup", "committedDate": "2020-11-23T09:08:05Z", "type": "commit"}, {"oid": "2a7da183fb3743891f0c2214ad6644cc8cc81745", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a7da183fb3743891f0c2214ad6644cc8cc81745", "message": "Fix issues in XML related ref lookup and add tests", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "a2bbec83916896186981dabe5585cb8460ccccea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bbec83916896186981dabe5585cb8460ccccea", "message": "Fix symbol issue in NS-prefixed field access", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "43efb3b254c00d3d406f0038950b5bc107aaedea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43efb3b254c00d3d406f0038950b5bc107aaedea", "message": "Update spotbugs exclude", "committedDate": "2020-11-23T09:08:06Z", "type": "commit"}, {"oid": "609f8051ba15635c6a9772e42d68761341ec26a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/609f8051ba15635c6a9772e42d68761341ec26a5", "message": "Fix issues in annot attachments and add tests", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9bc092793f9f3126a636f0c02af1cf0f3d17d1d", "message": "Fix issue in looking up symbols from annot tag references", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "ebac00c0e1c042251637bf751f8c57fe823c6f03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebac00c0e1c042251637bf751f8c57fe823c6f03", "message": "Use a different module for module prefix test", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "d9d6b64d64c66ea32bac177d79e09631ebe5a126", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d6b64d64c66ea32bac177d79e09631ebe5a126", "message": "Modify references API to support looking up across files", "committedDate": "2020-11-23T09:08:07Z", "type": "commit"}, {"oid": "352f4cc28ed28a225cf2639abcb38b6d4f5f5d02", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/352f4cc28ed28a225cf2639abcb38b6d4f5f5d02", "message": "Add test cases for looking up references across files", "committedDate": "2020-11-23T09:08:08Z", "type": "commit"}, {"oid": "506838cacc92dc2bd9ba045b0cc3b177855e07c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/506838cacc92dc2bd9ba045b0cc3b177855e07c5", "message": "Rename allReferences() -> references()", "committedDate": "2020-11-23T09:08:08Z", "type": "commit"}, {"oid": "7b3a9a6a1410b0f1d3389e989ff5a3662294b495", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b3a9a6a1410b0f1d3389e989ff5a3662294b495", "message": "Update the project structure of the test project", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "44d50124a0b74d855af8221649ce4a77da1aeb0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44d50124a0b74d855af8221649ce4a77da1aeb0c", "message": "Update Ballerina.toml of the test project", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "d9f9ecc7a5f7e6b0ae433b616e94b0a82b63fe5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9f9ecc7a5f7e6b0ae433b616e94b0a82b63fe5a", "message": "Update the find ref test setup logic to use the project API", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "fb14252f8da29390ff823244687b581bf4d1a22b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb14252f8da29390ff823244687b581bf4d1a22b", "message": "Add new API to get the semantic model of the specified module", "committedDate": "2020-11-23T09:08:09Z", "type": "commit"}, {"oid": "76f3510f7247cde2edf8bdda550f8bfad112f403", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76f3510f7247cde2edf8bdda550f8bfad112f403", "message": "Add an API to find all references given a symbol", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "e0d0c54892e08808476f5505910925dd9cf4c4a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0d0c54892e08808476f5505910925dd9cf4c4a4", "message": "Run the same test suite for the references() API which takes a symbol", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "07eb8cc540ab38a52fb48687097e2d85791d3fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07eb8cc540ab38a52fb48687097e2d85791d3fa8", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T09:08:10Z", "type": "commit"}, {"oid": "07eb8cc540ab38a52fb48687097e2d85791d3fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07eb8cc540ab38a52fb48687097e2d85791d3fa8", "message": "Remove unnecessary param from the references() API", "committedDate": "2020-11-23T09:08:10Z", "type": "forcePushed"}]}