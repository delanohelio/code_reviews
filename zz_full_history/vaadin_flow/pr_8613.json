{"pr_number": 8613, "pr_title": "Merge feature/dataprovider to master", "pr_author": "mshabarov", "pr_createdAt": "2020-06-24T10:04:05Z", "pr_url": "https://github.com/vaadin/flow/pull/8613", "merge_commit": "b41705be452331ce2a81473c074f31427d32fd60", "timeline": [{"oid": "e2ce07cfa61065a78bd85fd1654e3a7f4bc2192d", "url": "https://github.com/vaadin/flow/commit/e2ce07cfa61065a78bd85fd1654e3a7f4bc2192d", "message": "Add grid submodule", "committedDate": "2020-04-03T07:36:52Z", "type": "commit"}, {"oid": "c8435025127a61e9a3740bbb8541620dbcb71065", "url": "https://github.com/vaadin/flow/commit/c8435025127a61e9a3740bbb8541620dbcb71065", "message": "Adjust Grid code to work with Flow 3.1", "committedDate": "2020-04-03T10:02:41Z", "type": "commit"}, {"oid": "48573e5e6fa7c42fc08d49b0a26402547c4337ec", "url": "https://github.com/vaadin/flow/commit/48573e5e6fa7c42fc08d49b0a26402547c4337ec", "message": "Add combo-box submodule\n\nAdds the combo-box dataprovider\nfeature branch as a submodule.", "committedDate": "2020-04-03T10:48:37Z", "type": "commit"}, {"oid": "18e61ff51be8a4a7c07ccd23c64c5a621bcbf25f", "url": "https://github.com/vaadin/flow/commit/18e61ff51be8a4a7c07ccd23c64c5a621bcbf25f", "message": "Update combobox for flow 3.1", "committedDate": "2020-04-06T04:39:38Z", "type": "commit"}, {"oid": "600ae4407fca2132cb322913a577b0111697c86e", "url": "https://github.com/vaadin/flow/commit/600ae4407fca2132cb322913a577b0111697c86e", "message": "Update grid dep", "committedDate": "2020-04-06T07:52:39Z", "type": "commit"}, {"oid": "b8adf0cbb85577c8a56e1725e0d63405b21a0946", "url": "https://github.com/vaadin/flow/commit/b8adf0cbb85577c8a56e1725e0d63405b21a0946", "message": "Merge branch 'feature/dataprovider' of github.com:vaadin/flow into feature/dataprovider", "committedDate": "2020-04-06T07:53:29Z", "type": "commit"}, {"oid": "4a216b1e23306eb19cf3e253aa6f0fc6da6be77c", "url": "https://github.com/vaadin/flow/commit/4a216b1e23306eb19cf3e253aa6f0fc6da6be77c", "message": "Add component (maven) submodules", "committedDate": "2020-04-06T09:53:37Z", "type": "commit"}, {"oid": "f2b5b82b4b963a828f4df6ea7f252ba5869e1b20", "url": "https://github.com/vaadin/flow/commit/f2b5b82b4b963a828f4df6ea7f252ba5869e1b20", "message": "Add grid submodule", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "3ebf2cd3766d040505e85981b1053d6129727f71", "url": "https://github.com/vaadin/flow/commit/3ebf2cd3766d040505e85981b1053d6129727f71", "message": "Adjust Grid code to work with Flow 3.1", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "64e73d89e41622640a825976de34da14d3b14aae", "url": "https://github.com/vaadin/flow/commit/64e73d89e41622640a825976de34da14d3b14aae", "message": "Update grid dep", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "b89d615d064bb6f2e459d0d1be42b9b3cb209d2e", "url": "https://github.com/vaadin/flow/commit/b89d615d064bb6f2e459d0d1be42b9b3cb209d2e", "message": "Add combo-box submodule\n\nAdds the combo-box dataprovider\nfeature branch as a submodule.", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "03824b0c4afacb930a973b0739fa7be1a6d32766", "url": "https://github.com/vaadin/flow/commit/03824b0c4afacb930a973b0739fa7be1a6d32766", "message": "Update combobox for flow 3.1", "committedDate": "2020-04-17T12:26:04Z", "type": "commit"}, {"oid": "b3dca381896ff75e8fea8e6bfd60500a774fb956", "url": "https://github.com/vaadin/flow/commit/b3dca381896ff75e8fea8e6bfd60500a774fb956", "message": "Add component (maven) submodules", "committedDate": "2020-04-17T12:26:04Z", "type": "commit"}, {"oid": "e8d412a0ee93906b5fc91285ddb34dc55c3c6225", "url": "https://github.com/vaadin/flow/commit/e8d412a0ee93906b5fc91285ddb34dc55c3c6225", "message": "Merge branch 'feature/dataprovider' of https://github.com/vaadin/flow into feature/dataprovider", "committedDate": "2020-04-17T12:34:01Z", "type": "commit"}, {"oid": "429ac6b4c012178e09475640c790a40e9da2a305", "url": "https://github.com/vaadin/flow/commit/429ac6b4c012178e09475640c790a40e9da2a305", "message": "Merge branch 'master' into feature/dataprovider", "committedDate": "2020-05-07T08:18:54Z", "type": "commit"}, {"oid": "af015bec798adef528993406682e215d3c71d24c", "url": "https://github.com/vaadin/flow/commit/af015bec798adef528993406682e215d3c71d24c", "message": "Add new interfaces (#8276)\n\n* Add new interfaces\r\n\r\nAdd new DataView interfaces\r\nand their mixin interfaces.\r\n\r\nFix sub-modules for 3.2\r\n\r\nFixes #8267\r\n\r\n* Add missing new line", "committedDate": "2020-05-08T09:40:24Z", "type": "commit"}, {"oid": "97da10b21de9065c2ac6f7b2489c4f5063fe2606", "url": "https://github.com/vaadin/flow/commit/97da10b21de9065c2ac6f7b2489c4f5063fe2606", "message": "Take DataView concept into use #141 (#8303)\n\nCloses #8303", "committedDate": "2020-05-18T07:27:00Z", "type": "commit"}, {"oid": "1d7cdb40727e9a7b8685051c64f32022ef964c13", "url": "https://github.com/vaadin/flow/commit/1d7cdb40727e9a7b8685051c64f32022ef964c13", "message": "Adds unit test for AbstractListDataView\n\nRelated to vaadin/vaadin-checkbox-group#141", "committedDate": "2020-05-19T09:10:04Z", "type": "commit"}, {"oid": "461b97ec0dcb9cef71407d43ef98b034f1b4cbb6", "url": "https://github.com/vaadin/flow/commit/461b97ec0dcb9cef71407d43ef98b034f1b4cbb6", "message": "Grid support methods (#8369)\n\n* GridListDataView support additions\r\n\r\n* Update Grid module target\r\n\r\n* Move component under feature profile.\r\n\r\n* Change to Query", "committedDate": "2020-05-19T10:00:12Z", "type": "commit"}, {"oid": "340f23fb8757b076fc0a62a8e80eb1e033e24f24", "url": "https://github.com/vaadin/flow/commit/340f23fb8757b076fc0a62a8e80eb1e033e24f24", "message": "Update grid and checkbox submodules", "committedDate": "2020-05-20T04:42:44Z", "type": "commit"}, {"oid": "40199e5e8113129d2d755a37606c21d2fb41d766", "url": "https://github.com/vaadin/flow/commit/40199e5e8113129d2d755a37606c21d2fb41d766", "message": "implement AbstractNavigationStateRenderer to handle server->client forwarding (#8170)\n\n* Handle unknown forward route in client side UI\n* Remove TransactionOutcome and unused private methods\n* Clean urlPathShouldBeDisplayed.", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "e92899aca2e1bd27f61d61395e07ceab7c737bb9", "url": "https://github.com/vaadin/flow/commit/e92899aca2e1bd27f61d61395e07ceab7c737bb9", "message": "Live-reload: the ball in the slider takes on another shade of gray when disabled (#8284)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "bba441f1aa5353bf7ac9790c32a769589dbcd089", "url": "https://github.com/vaadin/flow/commit/bba441f1aa5353bf7ac9790c32a769589dbcd089", "message": "Remove JRebel plugin. (#8287)\n\nFixes #8224", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "8f73c796af18755cba818585a6e6c8009fbebd1d", "url": "https://github.com/vaadin/flow/commit/8f73c796af18755cba818585a6e6c8009fbebd1d", "message": "Live-reload: Accept push target parameter `liveReloadPath`. (#8280)\n\nThis handles non-default paths when establishing the push connection (e.g. Vaadin Spring expects `/vaadinServlet`).", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "84065fc9a687610da946b9127a84693b49ca6f96", "url": "https://github.com/vaadin/flow/commit/84065fc9a687610da946b9127a84693b49ca6f96", "message": "Force live-reload ITs to run in sequence using `@NotThreadSafe` rather than locks (#8279)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "c49b6458f9123046734154c9c80eed253bf5f7ae", "url": "https://github.com/vaadin/flow/commit/c49b6458f9123046734154c9c80eed253bf5f7ae", "message": "Store vaadin hash to node_modules (#8282)\n\nTo notice outside changes to package.json\r\nbetter we add the hash to node_modules\r\nso we can cross check the value.\r\n\r\nFixes #8182", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "84e0d4cc150d08637c69aec1a6e7db0e9aea7866", "url": "https://github.com/vaadin/flow/commit/84e0d4cc150d08637c69aec1a6e7db0e9aea7866", "message": "Url parameter template support. (#7608)\n\n* Initial model test with no parameters\n\n* Working on test with eligible parameters disabled.\n\n* Test eligible parameters.\n\n* Starting integration with ConfigureRoutes\n\n* Transform path for HasUrlParameter\n\n* While adding urlParameters to BeforeEvent.\n\n* setParameter invoked with ___url_parameter.\n\n* Fix reroute test\n\n* Create UrlParameters container\n\n* Fix NPE\n\n* Handle varargs.\n\n* Add RouteModel\n\n* Fix RouteModelTest\n\n* Look for target in optional children.\n\n* Handle wildcard transformation from list into UrlParameters\n\n* Remove regex test\n\n* Add @Route and @RoutePrefix test.\n\n* Working on regex tests\n\n* Store parameter patterns segments in insertion order.\n\n* Improving parameter tests.\n\n* Converting to UrlParameters.\n\n* Handle ambigous exceptions.\n\n* Remove lower level exception.\n\n* UrlParameters compatibility and fix more tests\n\n* Fix root bug\n\n* Add getTargetRoute API.\n\n* Working to clone the model.\n\n* Fixing tests\n\n* Remove UriTemplate.\n\n* Add getUrlTemplage. Fix tests.\n\n* Change format to match with path-to-regexp.\n\n* Remove RouteConfigurationException\n\n* Move test url params in RoutePrefix.\n\n* Fix tests.\n\n* Providing RouteTarget in NavigationStatus.\n\n* Use router layouts from RouteTarget when handle a UI request.\n\n* Fix sonar\n\n* Revert BootstrapUtils change.\n\n* Fix sonar\n\n* Fix header\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compile error\n\n* Use only regex for parameter type.\n\n* Fix sonar\n\n* Simplify regex names\n\n* Rename pathTemplate to urlTemplate\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compilation\n\n* Fix test\n\n* Remove FIXME and make RouteFormat internal.\n\n* Fix NavigationState bug.\n\n* Remove urlParameters null check.\n\n* Fix sonar\n\n* Remove primitive type logic.\n\n* Move RouteTarget back to server.startup\n\n* Make NavigationState methods public again.\n\n* Rename to urlTemplate. Change if (routeLayoutTypes == null).\n\n* Use Optional with UrlParameters.\n\n* Fix sonar\n\n* Change parameter type back. Add .\n\n* Add removed method back.\n\n* Add UI.navigate with url params test.\n\n* Add tests.\n\n* Deprecate more methods to make them internal.\n\n* Fix.\n\n* Fix.\n\n* Refactor recursion.\n\n* Fix bug\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Undeprecate RouteTarget and NavigationState.\n\n* Undeprecate NavigationState.\n\n* Fix some of the review comments.\n\n* Fix review comments.\n\n* Fix sonar.\n\n* Document RoutePrefix with parameter templates\n\n* Add tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix getUrl implementation in RouteModel and add more tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Add test for reroute. Working on RouterLink.\n\n* Add UrlParameters to RouterLink.\n\n* Add RouteModel tests\n\n* Add TODOs\n\n* Add RouteModel tests, getRoutes() and RouteParameterData\n\n* Fix sonar\n\n* Remove Serializable from RouteSegmentValue\n\n* Remove UnsupportedOperationException from getParameters in RouteBaseData\n\n* Ignore serializable in RouteSegmentValue\n\n* Fix comments.\n\n* Rename to reroute target and forward target\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix comments\n\n* Fix comments\n\n* Move RouteTarget to router.internal\n\n* Rename UrlParameters to RouteParameters.\n\n* Fix sonar\n\n* Add isPathAvailable\n\n* Rename to just template. Fix route remove with path and class.\n\n* Update javadoc\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix rename mistake of getUrlParameters. Rename getDefinedParameter into getRouteParameters.\n\n* Remove Boolean from RouteParameters\n\n* Make RouteSegmentValue static\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix comments\n\n* Fix comments.\n\n* Revert js renames.\n\n* Fix comments.\n\n* Fix comments.\n\n* Fix comments\n\n* Fix comment\n\n* Fix comments\n\n* Fix comments\n\n* Merge branch 'master' into bu/route-parameters", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "005c5acc8ba4773d9aa4e6abf5b0d739163960ef", "url": "https://github.com/vaadin/flow/commit/005c5acc8ba4773d9aa4e6abf5b0d739163960ef", "message": "Clarify message about blocking with the session locked (#8312)\n\n* Clarify message about blocking with the session locked", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "20a29e1714c0bf87cff8c9a08174c1faec5b8811", "url": "https://github.com/vaadin/flow/commit/20a29e1714c0bf87cff8c9a08174c1faec5b8811", "message": "Live reload show message on error (#8206) (#8304)\n\n* Show Live Reload message on error\r\n\r\n* Show Live Reload message on error\r\n\r\n* Unit Test for Error Messages\r\n\r\n* Change Live Reload Error tests\r\n\r\n* Change error message test messages to 1\r\n\r\n* Change error message to analyze\r\n\r\n* Change expected message id to 1\r\n\r\n* Change test to assert.deepEqual\r\n\r\n* Change error messages of Live Reload\r\n\r\nAdd error messages for JSON parsing\r\nPrint a better message when a WebSocket error occurs\r\n\r\n* Fix wrong arguments on Error handling\r\n\r\n* Change VaadinDevmodeGizmo\r\n\r\nChange onclose listener so it only displays Unavailable Live Reload if theres no error state\r\nReturn function if JSON parsing goes wrong", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "8e83cdb0920cb1e5b8dc9b43814e7463508d2b86", "url": "https://github.com/vaadin/flow/commit/8e83cdb0920cb1e5b8dc9b43814e7463508d2b86", "message": "fix: check for TypeVariable in the ExplicitNullableTypeChecker (#8316)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "b555992fb074a2e98ee25caa919a633ed23b00ca", "url": "https://github.com/vaadin/flow/commit/b555992fb074a2e98ee25caa919a633ed23b00ca", "message": "Extract live reload ITs into separate test module (#8324)\n\nLive reload tests must never execute in parallel with other tests since they will trigger a reload\r\nin all open UIs, interfere with concurrently running tests. Having them in a separate test module makes them more isolated. Also test with non-root context.", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "3f9d8683a5d49c00cd2d44ff35bd2ed12bfe5a26", "url": "https://github.com/vaadin/flow/commit/3f9d8683a5d49c00cd2d44ff35bd2ed12bfe5a26", "message": "Removed unnecessary private method (#8357)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "64988610fe0d5f7242b9181d3806f880b13c538c", "url": "https://github.com/vaadin/flow/commit/64988610fe0d5f7242b9181d3806f880b13c538c", "message": "Properly encoded URIs use %20 (#8271)\n\nfixes #5360", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "abfeaf711e39f4db1f6ab15238c0041686190a8f", "url": "https://github.com/vaadin/flow/commit/abfeaf711e39f4db1f6ab15238c0041686190a8f", "message": "Wait for intermediate page to load completely in @PreserveOnRefresh IT (#8338)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "f19403bd3ff509645097a6e8fbb41a5f9f232a66", "url": "https://github.com/vaadin/flow/commit/f19403bd3ff509645097a6e8fbb41a5f9f232a66", "message": "fix: custom connect client breaks endpoints mapping\n\nPresence of absence of a custom Connect client in `frontend/connect-client.ts` should not affect the URL mapping of the endpoint calls handler on the backend (the way to configure that mapping is to use the `vaadin.endpoint.prefix` application property). There is no need to parse the `connect-client.ts` and try to determine the URL mapping from there.\n\nEarlier, when the support for a custom Connect client was added in https://github.com/vaadin/flow/pull/7944, the code that tried to determine the endpoint handler URL mapping from a custom `connect-client.ts` file had a bug that resulted in an incorrect URL mapping configuration.\n\nThis commit completely removes the link between a custom Connect client and the endpoint handler URL mapping config.\n\nFixes #8364", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "7f0d10595d1e5375a168bbd88dc7603b8f8ac3db", "url": "https://github.com/vaadin/flow/commit/7f0d10595d1e5375a168bbd88dc7603b8f8ac3db", "message": "remove unused import", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "4ccd72893a49ee97231ed84682ebc0414f5660fd", "url": "https://github.com/vaadin/flow/commit/4ccd72893a49ee97231ed84682ebc0414f5660fd", "message": "Add list modification methods (#8394)\n\n* Add list modification methods\r\n\r\nAdded to ListDataView the possibility\r\nto addItem(T) and removeItem(T)\r\n\r\nFixes #8382\r\n\r\n* Variable rename and import cleaning", "committedDate": "2020-05-22T06:11:41Z", "type": "commit"}, {"oid": "9cf2110e2b8cd7cb910a548d89c90c586c4cfad5", "url": "https://github.com/vaadin/flow/commit/9cf2110e2b8cd7cb910a548d89c90c586c4cfad5", "message": "Remove DataController (#8418)\n\nDelete DataController and\r\nadd the functionality to abstracts.\r\nAdd size as componentEvent listener.\r\n\r\nFixes #8344", "committedDate": "2020-05-26T08:34:02Z", "type": "commit"}, {"oid": "71934f9d3d88927dcfc3d89e5a577abfc12bd1b9", "url": "https://github.com/vaadin/flow/commit/71934f9d3d88927dcfc3d89e5a577abfc12bd1b9", "message": "Update submodule references", "committedDate": "2020-05-26T09:27:50Z", "type": "commit"}, {"oid": "bad76f1f272788cb313f28ec206910678c882364", "url": "https://github.com/vaadin/flow/commit/bad76f1f272788cb313f28ec206910678c882364", "message": "Add select submodule (#8422)\n\nMove some reusable code to abstract class.", "committedDate": "2020-05-27T05:59:06Z", "type": "commit"}, {"oid": "ea668cb85d5d22f241173d4f7f59206250b01744", "url": "https://github.com/vaadin/flow/commit/ea668cb85d5d22f241173d4f7f59206250b01744", "message": "Some improvements in DataView classes (#8405)\n\n* Remove getAllItemsAsList from AbstractListDataView\r\n\r\n* Make AbstractDataView.dataController private\r\n\r\n* Fix calling getAllItems twice\r\n\r\n* submodule targets\r\n\r\n* Delete unused imports\r\n\r\n* ignore submodule\r\n\r\nCo-authored-by: Mikael Grankvist <mikael.grankvist@vaadin.com>\r\nCo-authored-by: Mikhail Shabarov <mikhail@vaadin.com>", "committedDate": "2020-05-27T10:03:52Z", "type": "commit"}, {"oid": "4b1e81ac2e48e114cfc803a549117e66ac92bc14", "url": "https://github.com/vaadin/flow/commit/4b1e81ac2e48e114cfc803a549117e66ac92bc14", "message": "Update select submodule", "committedDate": "2020-05-27T10:13:50Z", "type": "commit"}, {"oid": "a7da2876b671c279845f49af4d52d37a3b87c6dd", "url": "https://github.com/vaadin/flow/commit/a7da2876b671c279845f49af4d52d37a3b87c6dd", "message": "update checkbox submodule", "committedDate": "2020-05-27T10:26:00Z", "type": "commit"}, {"oid": "44050bc150e5f833ed9acb2e6fa9961f15f8278a", "url": "https://github.com/vaadin/flow/commit/44050bc150e5f833ed9acb2e6fa9961f15f8278a", "message": "New add item methods (#8429)\n\n* New add item methods\r\n\r\nAdded method to add\r\nitem before or after another item.\r\n\r\n* Minor fixes to exception and javadoc.\r\n\r\n* Update javadoc\r\n\r\nNote that item is added to the\r\nunsorted and unfiltered list.", "committedDate": "2020-05-27T12:58:13Z", "type": "commit"}, {"oid": "4d39d69b8832df8a12d1b09a7f04d1267bd9f121", "url": "https://github.com/vaadin/flow/commit/4d39d69b8832df8a12d1b09a7f04d1267bd9f121", "message": "grid submodule", "committedDate": "2020-05-28T04:29:30Z", "type": "commit"}, {"oid": "b5dfda842fe2b3e2412af3c74b5f73a090fa2495", "url": "https://github.com/vaadin/flow/commit/b5dfda842fe2b3e2412af3c74b5f73a090fa2495", "message": "Update grid submodule", "committedDate": "2020-05-28T11:05:04Z", "type": "commit"}, {"oid": "e231f6becd8f9377f0f15b1c7752142e50032b3a", "url": "https://github.com/vaadin/flow/commit/e231f6becd8f9377f0f15b1c7752142e50032b3a", "message": "Add size event firing (#8450)\n\nDataCommunicator now fires size\r\nchange event for the component when\r\ndata size or dataprovider changes.", "committedDate": "2020-05-29T11:04:47Z", "type": "commit"}, {"oid": "a7d00e64444960ba686e5580af9024cb0b96e382", "url": "https://github.com/vaadin/flow/commit/a7d00e64444960ba686e5580af9024cb0b96e382", "message": "AbstractDataView listener test #8345 (#8453)", "committedDate": "2020-05-29T17:30:59Z", "type": "commit"}, {"oid": "7b28d2e74f0aa4e6f56b73fb56279bbec65c3ab7", "url": "https://github.com/vaadin/flow/commit/7b28d2e74f0aa4e6f56b73fb56279bbec65c3ab7", "message": "Update submodules\n\nUpdate grid and select targets.", "committedDate": "2020-06-01T07:42:13Z", "type": "commit"}, {"oid": "0952581823a9bb34b7737e2ca140227ebc7278d5", "url": "https://github.com/vaadin/flow/commit/0952581823a9bb34b7737e2ca140227ebc7278d5", "message": "Add methods for filtering (#8479)\n\nAdded the addFilter and clearFilters\r\nmethods.\r\n\r\nFixes #8313", "committedDate": "2020-06-02T10:04:50Z", "type": "commit"}, {"oid": "cbcc24aeae36748bc59230058f5b57a2d143a0d2", "url": "https://github.com/vaadin/flow/commit/cbcc24aeae36748bc59230058f5b57a2d143a0d2", "message": "JavaDoc fix", "committedDate": "2020-06-04T06:10:00Z", "type": "commit"}, {"oid": "72e0d840cc8fdf5526653103a1534988be72eb6c", "url": "https://github.com/vaadin/flow/commit/72e0d840cc8fdf5526653103a1534988be72eb6c", "message": "Merge branch 'master' into merge/from_master_DP\n\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUI.java\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/JavaScriptNavigationStateRenderer.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/RouterLink.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/internal/PathUtil.java\n#\tflow-server/src/test/java/com/vaadin/flow/router/RouterLinkTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/router/RouterTest.java", "committedDate": "2020-06-05T05:16:47Z", "type": "commit"}, {"oid": "04202f9b58f66a2fc6e343f5e4c8982a34da9dd0", "url": "https://github.com/vaadin/flow/commit/04202f9b58f66a2fc6e343f5e4c8982a34da9dd0", "message": "New methods for collections (#8509)\n\n* New methods for collections\r\n\r\nEnable add and remove for\r\ncollection.\r\n\r\npart of #8497\r\n\r\n* Update javaDocs\r\n\r\nadd @see links\r\n\r\n* Format abstract.\r\n\r\n* Fix javadoc references", "committedDate": "2020-06-08T08:40:24Z", "type": "commit"}, {"oid": "46d02d52910ac4a16fcfc419056272f0e1ecd9e5", "url": "https://github.com/vaadin/flow/commit/46d02d52910ac4a16fcfc419056272f0e1ecd9e5", "message": "Address DX feedback for data views #8497 (#8510)", "committedDate": "2020-06-08T10:14:11Z", "type": "commit"}, {"oid": "4c1ecab3d20122dc0e8f946fd30f1aee1eb01dd9", "url": "https://github.com/vaadin/flow/commit/4c1ecab3d20122dc0e8f946fd30f1aee1eb01dd9", "message": "Update component references", "committedDate": "2020-06-09T04:31:45Z", "type": "commit"}, {"oid": "0840dc58a1bd4c9c4c5411a3d5352dbb96e38017", "url": "https://github.com/vaadin/flow/commit/0840dc58a1bd4c9c4c5411a3d5352dbb96e38017", "message": "Update grid", "committedDate": "2020-06-09T06:33:48Z", "type": "commit"}, {"oid": "777325624dba235e27f230c3d6edef0df3bbed1d", "url": "https://github.com/vaadin/flow/commit/777325624dba235e27f230c3d6edef0df3bbed1d", "message": "Update checkbox", "committedDate": "2020-06-09T07:19:24Z", "type": "commit"}, {"oid": "0c740f5f420a34ff1de9dc85c73dc6c9deee7491", "url": "https://github.com/vaadin/flow/commit/0c740f5f420a34ff1de9dc85c73dc6c9deee7491", "message": "Update select", "committedDate": "2020-06-09T07:35:00Z", "type": "commit"}, {"oid": "714e318ca90b85642e2740a32a7282d17d80cffc", "url": "https://github.com/vaadin/flow/commit/714e318ca90b85642e2740a32a7282d17d80cffc", "message": "Add updateItem to DataView #8499 (#8528)", "committedDate": "2020-06-10T06:04:29Z", "type": "commit"}, {"oid": "605990dea90a3147a50dedf9122562728b72e24a", "url": "https://github.com/vaadin/flow/commit/605990dea90a3147a50dedf9122562728b72e24a", "message": "Use setDataSource for setting data. (#8546)\n\npart of vaadin/flow#8189", "committedDate": "2020-06-11T17:50:18Z", "type": "commit"}, {"oid": "290eca14a56302cfaa1e337cc270647ff7d56405", "url": "https://github.com/vaadin/flow/commit/290eca14a56302cfaa1e337cc270647ff7d56405", "message": "Add HasDataView interface (#8559)\n\nAdded the HasDataView interface so that for cases that are not handled by ListDataView or LazyDataView there can still be a return type of DataView.\r\n\r\nPart of #8189", "committedDate": "2020-06-12T13:15:28Z", "type": "commit"}, {"oid": "64cbb52a4c4722df1aacbda8dc786afda9ba1797", "url": "https://github.com/vaadin/flow/commit/64cbb52a4c4722df1aacbda8dc786afda9ba1797", "message": "Protect add- methods in ListDataView from adding the duplicated items #8538 (#8550)\n\n* Protect add- methods in ListDataView from adding the duplicated items #8538\r\n\r\n* Invoke data provider getter once, update the javadoc\r\n\r\n* Rearrange backend collection items in add- methods.\r\n\r\n* Update javadoc to emphasize the reordering on items\r\n\r\n* Delete extra overloaded methods\r\n\r\n* Delete unused import\r\n\r\n* Fix the code review comments\r\n\r\n* Delete extra removeIf method, naming improvements\r\n\r\n* Add a comments for specific item collection adding case\r\n\r\n* Simplify collection type verification", "committedDate": "2020-06-16T11:00:44Z", "type": "commit"}, {"oid": "3f66c8fabc80c0c129d173a037ecd04cbd0ab18e", "url": "https://github.com/vaadin/flow/commit/3f66c8fabc80c0c129d173a037ecd04cbd0ab18e", "message": "Require getDataView() (#8565)\n\nRequire components to implement\r\nthe getDataView() method that\r\nreturns at minimum the generic DataView\r\nbut if created a more specific DataView.\r\n\r\nCo-authored-by: Mikhail Shabarov <61410877+mshabarov@users.noreply.github.com>", "committedDate": "2020-06-16T14:58:28Z", "type": "commit"}, {"oid": "c3c95496b1283f70cf29eaec5138921921c06118", "url": "https://github.com/vaadin/flow/commit/c3c95496b1283f70cf29eaec5138921921c06118", "message": "Update JavaDoc to not make promises (#8568)", "committedDate": "2020-06-17T08:08:20Z", "type": "commit"}, {"oid": "bed7b4c503bd593da9321f7f6ff59a2c5816bf6f", "url": "https://github.com/vaadin/flow/commit/bed7b4c503bd593da9321f7f6ff59a2c5816bf6f", "message": "Fix adding existing item (#8585)\n\n* Fix adding existing item\r\n\r\nIf item is moved from before\r\nthe target item the item index\r\nwas wrong as the old item was removed.\r\n\r\n* Use contains.", "committedDate": "2020-06-18T11:14:06Z", "type": "commit"}, {"oid": "19fb8031663864a3798d460e8e45a3510ff02f67", "url": "https://github.com/vaadin/flow/commit/19fb8031663864a3798d460e8e45a3510ff02f67", "message": "Configure identity provider for a components through the Data View (#8581)", "committedDate": "2020-06-22T12:13:18Z", "type": "commit"}, {"oid": "4a9f60bd38ad2231d9bf92ecafd627a433f84eac", "url": "https://github.com/vaadin/flow/commit/4a9f60bd38ad2231d9bf92ecafd627a433f84eac", "message": "Merge remote-tracking branch 'origin/master' into merge-dp-to-master", "committedDate": "2020-06-24T09:36:11Z", "type": "commit"}, {"oid": "963879f8e045d44a36682f63196b6d1f38d7fcc7", "url": "https://github.com/vaadin/flow/commit/963879f8e045d44a36682f63196b6d1f38d7fcc7", "message": "Delete submodules for components", "committedDate": "2020-06-24T09:48:11Z", "type": "commit"}, {"oid": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "url": "https://github.com/vaadin/flow/commit/5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "message": "Delete submodule packages from tests", "committedDate": "2020-06-24T10:06:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0MA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811540", "body": "![MINOR](https://sonarsource.github.io/sonar-github/severity-minor.png 'Severity: MINOR') Cast one of the operands of this subtraction operation to a \"long\". [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2184)\n", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7583166906b97dea085b4c7960eab0e846348ed9ba157a3a6bee5958811d6477/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d696e6f722e706e67\"><img src=\"https://camo.githubusercontent.com/7583166906b97dea085b4c7960eab0e846348ed9ba157a3a6bee5958811d6477/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d696e6f722e706e67\" alt=\"MINOR\" title=\"Severity: MINOR\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-minor.png\" style=\"max-width: 100%;\"></a> Cast one of the operands of this subtraction operation to a \"long\". <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2184\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-06-24T10:55:46Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();\n+    }\n+\n+    @Override\n+    public Optional<T> getPreviousItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index <= 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index - 1).findFirst();", "originalCommit": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 0eb0dcdb51..1758d420f4 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -87,34 +181,61 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> addFilter(SerializablePredicate<T> filter) {\n-        getDataProvider().addFilter(filter);\n-        return this;\n+        Objects.requireNonNull(filter, \"Filter to add cannot be null\");\n+        Optional<SerializablePredicate<T>> originalFilter = getComponentFilter(\n+                component);\n+        SerializablePredicate<T> newFilter = originalFilter.isPresent()\n+                ? item -> originalFilter.get().test(item) && filter.test(item)\n+                : filter;\n+        return setFilter(newFilter);\n     }\n \n     @Override\n     public AbstractListDataView<T> removeFilters() {\n-        getDataProvider().clearFilters();\n-        return this;\n+        return setFilter(null);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setFilter(SerializablePredicate<T> filter) {\n-        return setFilterOrOrder(\n-                dataProvider -> dataProvider.setFilter(filter));\n+        setComponentFilter(component, filter);\n+        fireFilteringOrSortingChangeEvent(filter,\n+                (SerializableComparator<T>) getComponentSortComparator(\n+                        component).orElse(null));\n+        return this;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        return setFilterOrOrder(\n-                dataProvider -> dataProvider.setSortComparator(sortComparator));\n+        setComponentSortComparator(component, sortComparator);\n+        fireFilteringOrSortingChangeEvent(\n+                (SerializablePredicate<T>) getComponentFilter(component)\n+                        .orElse(null),\n+                sortComparator);\n+        return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        return setFilterOrOrder(\n-                dataProvider -> dataProvider.addSortComparator(sortComparator));\n+        Objects.requireNonNull(sortComparator,\n+                \"Comparator to add cannot be null\");\n+        Optional<SerializableComparator<T>> originalComparator = getComponentSortComparator(\n+                component);\n+\n+        if (originalComparator.isPresent()) {\n+            return setSortComparator((a, b) -> {\n+                int result = originalComparator.get().compare(a, b);\n+                if (result == 0) {\n+                    result = sortComparator.compare(a, b);\n+                }\n+                return result;\n+            });\n+        } else {\n+            return setSortComparator(sortComparator);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1758d420f4..965821f0e4 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -181,61 +96,33 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> addFilter(SerializablePredicate<T> filter) {\n-        Objects.requireNonNull(filter, \"Filter to add cannot be null\");\n-        Optional<SerializablePredicate<T>> originalFilter = getComponentFilter(\n-                component);\n-        SerializablePredicate<T> newFilter = originalFilter.isPresent()\n-                ? item -> originalFilter.get().test(item) && filter.test(item)\n-                : filter;\n-        return setFilter(newFilter);\n+        getDataProvider().addFilter(filter);\n+        return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> removeFilters() {\n-        return setFilter(null);\n+        getDataProvider().clearFilters();\n+        return this;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setFilter(SerializablePredicate<T> filter) {\n-        setComponentFilter(component, filter);\n-        fireFilteringOrSortingChangeEvent(filter,\n-                (SerializableComparator<T>) getComponentSortComparator(\n-                        component).orElse(null));\n-        return this;\n+        return setFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        setComponentSortComparator(component, sortComparator);\n-        fireFilteringOrSortingChangeEvent(\n-                (SerializablePredicate<T>) getComponentFilter(component)\n-                        .orElse(null),\n-                sortComparator);\n-        return this;\n+        return setFilterOrOrder(\n+                dataProvider -> dataProvider.setSortComparator(sortComparator));\n     }\n \n     @Override\n     public AbstractListDataView<T> addSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        Objects.requireNonNull(sortComparator,\n-                \"Comparator to add cannot be null\");\n-        Optional<SerializableComparator<T>> originalComparator = getComponentSortComparator(\n-                component);\n-\n-        if (originalComparator.isPresent()) {\n-            return setSortComparator((a, b) -> {\n-                int result = originalComparator.get().compare(a, b);\n-                if (result == 0) {\n-                    result = sortComparator.compare(a, b);\n-                }\n-                return result;\n-            });\n-        } else {\n-            return setSortComparator(sortComparator);\n-        }\n+        return setFilterOrOrder(\n+                dataProvider -> dataProvider.addSortComparator(sortComparator));\n     }\n \n     @Override\n", "next_change": {"commit": "3bc2e60af3600735fc5b188ebb31b48059a13349", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 965821f0e4..04aadf359a 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -96,33 +112,61 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> addFilter(SerializablePredicate<T> filter) {\n-        getDataProvider().addFilter(filter);\n-        return this;\n+        Objects.requireNonNull(filter, \"Filter to add cannot be null\");\n+        Optional<SerializablePredicate<T>> originalFilter = DataViewUtils\n+                .getComponentFilter(component);\n+        SerializablePredicate<T> newFilter = originalFilter.isPresent()\n+                ? item -> originalFilter.get().test(item) && filter.test(item)\n+                : filter;\n+        return setFilter(newFilter);\n     }\n \n     @Override\n     public AbstractListDataView<T> removeFilters() {\n-        getDataProvider().clearFilters();\n-        return this;\n+        return setFilter(null);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setFilter(SerializablePredicate<T> filter) {\n-        return setFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+        DataViewUtils.setComponentFilter(component, filter);\n+        fireFilteringOrSortingChangeEvent(filter,\n+                (SerializableComparator<T>) DataViewUtils\n+                        .getComponentSortComparator(component).orElse(null));\n+        return this;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public AbstractListDataView<T> setSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        return setFilterOrOrder(\n-                dataProvider -> dataProvider.setSortComparator(sortComparator));\n+        DataViewUtils.setComponentSortComparator(component, sortComparator);\n+        fireFilteringOrSortingChangeEvent(\n+                (SerializablePredicate<T>) DataViewUtils\n+                        .getComponentFilter(component).orElse(null),\n+                sortComparator);\n+        return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        return setFilterOrOrder(\n-                dataProvider -> dataProvider.addSortComparator(sortComparator));\n+        Objects.requireNonNull(sortComparator,\n+                \"Comparator to add cannot be null\");\n+        Optional<SerializableComparator<T>> originalComparator = DataViewUtils\n+                .getComponentSortComparator(component);\n+\n+        if (originalComparator.isPresent()) {\n+            return setSortComparator((a, b) -> {\n+                int result = originalComparator.get().compare(a, b);\n+                if (result == 0) {\n+                    result = sortComparator.compare(a, b);\n+                }\n+                return result;\n+            });\n+        } else {\n+            return setSortComparator(sortComparator);\n+        }\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "34b5e943cdd2492447f98d20abc95c0ad93bb630", "committedDate": "2020-06-29 11:32:46 +0300", "message": "Rework AbstractListDataView::updateItem #8608 (#8634)"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "312687dd2b576b86b7c67ebc417e171c0bd54405", "committedDate": "2020-07-30 11:58:40 +0300", "message": "ListDataView: addItemAfter doesn't work with filter (#8794)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "committedDate": "2020-11-12 10:01:31 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "committedDate": "2020-11-12 16:00:17 +0200", "message": "refactor: revert 'Use data view filter and sorting only to that component' (#9390)"}, {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349", "committedDate": "2020-11-16 14:35:45 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0OQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811549", "body": "![MINOR](https://sonarsource.github.io/sonar-github/severity-minor.png 'Severity: MINOR') Cast one of the operands of this addition operation to a \"long\". [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2184)\n", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7583166906b97dea085b4c7960eab0e846348ed9ba157a3a6bee5958811d6477/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d696e6f722e706e67\"><img src=\"https://camo.githubusercontent.com/7583166906b97dea085b4c7960eab0e846348ed9ba157a3a6bee5958811d6477/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d696e6f722e706e67\" alt=\"MINOR\" title=\"Severity: MINOR\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-minor.png\" style=\"max-width: 100%;\"></a> Cast one of the operands of this addition operation to a \"long\". <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2184\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-06-24T10:55:47Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();", "originalCommit": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 0eb0dcdb51..66869dc6d8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -67,6 +67,11 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         super(dataProviderSupplier, component);\n     }\n \n+    @Override\n+    public int getItemCount() {\n+        return getDataProvider().size(new Query<>());\n+    }\n+\n     @Override\n     public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n", "next_change": {"commit": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 66869dc6d8..47bac8e89d 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -72,6 +69,12 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         return getDataProvider().size(new Query<>());\n     }\n \n+    @Override\n+    public T getItem(int index) {\n+        validateItemIndex(index);\n+        return getItems().skip(index).findFirst().orElse(null);\n+    }\n+\n     @Override\n     public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n", "next_change": {"commit": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 47bac8e89d..1758d420f4 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -75,6 +155,12 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         return getItems().skip(index).findFirst().orElse(null);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Stream<T> getItems() {\n+        return getDataProvider().fetch(getQuery(true));\n+    }\n+\n     @Override\n     public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n", "next_change": {"commit": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1758d420f4..965821f0e4 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -155,12 +76,6 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         return getItems().skip(index).findFirst().orElse(null);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public Stream<T> getItems() {\n-        return getDataProvider().fetch(getQuery(true));\n-    }\n-\n     @Override\n     public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n", "next_change": {"commit": "3bc2e60af3600735fc5b188ebb31b48059a13349", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 965821f0e4..04aadf359a 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n", "chunk": "@@ -76,6 +86,12 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         return getItems().skip(index).findFirst().orElse(null);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Stream<T> getItems() {\n+        return getDataProvider().fetch(DataViewUtils.getQuery(component));\n+    }\n+\n     @Override\n     public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "34b5e943cdd2492447f98d20abc95c0ad93bb630", "committedDate": "2020-06-29 11:32:46 +0300", "message": "Rework AbstractListDataView::updateItem #8608 (#8634)"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "312687dd2b576b86b7c67ebc417e171c0bd54405", "committedDate": "2020-07-30 11:58:40 +0300", "message": "ListDataView: addItemAfter doesn't work with filter (#8794)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "committedDate": "2020-11-12 10:01:31 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "committedDate": "2020-11-12 16:00:17 +0200", "message": "refactor: revert 'Use data view filter and sorting only to that component' (#9390)"}, {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349", "committedDate": "2020-11-16 14:35:45 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "url": "https://github.com/vaadin/flow/commit/a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "message": "Fix tests names, few more tests added", "committedDate": "2020-06-24T14:26:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODI1NA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446018254", "body": "```suggestion\r\n     * Data is filtered and sorted the same way as in the component.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Data will use set filters and sorting.\n          \n          \n            \n                 * Data is filtered and sorted the same way as in the component.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Data</span> <span class=\"x x-first x-last\">will use set filters and sorting</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Data</span> <span class=\"x x-first x-last\">is filtered and sorted the same way as in the component</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T07:36:24Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdf79714001ebbfd1731287f766742114580de9", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..57a1e13cff 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -34,7 +34,7 @@ public interface DataView<T> extends Serializable {\n \n     /**\n      * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Data is filtered and sorted the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n", "next_change": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 57a1e13cff..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data is filtered and sorted the same way as in the component.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 05a95f8597..191de48247 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -52,17 +60,15 @@ public interface DataView<T> extends Serializable {\n      * Check if item is in the current data. Item may be filtered out or for\n      * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used for\n-     * identity check. If a custom data provider is used, then the\n-     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n-     * identity can be set up with a\n-     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     * <em>NOTE:</em> when the component is created and not yet added, the item\n+     * might not yet be loaded, but will be loaded during the \"before client\n+     * response\"-phase. To check if the item has been added at that point, after\n+     * setting the data source to the component you need to use\n+     * {@link com.vaadin.flow.component.UI#beforeClientResponse(Component, SerializableConsumer)}.\n      *\n      * @param item\n      *            item to search for\n-     * @return true if item is found in the available data\n-     *\n-     * @see #setIdentifierProvider(IdentifierProvider)\n+     * @return {@code true} if item is found in the available data\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "218d95c0f5ad372445551c8662df306b01e1e4a5", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 191de48247..4b5d16f2c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -68,7 +71,9 @@ public interface DataView<T> extends Serializable {\n      *\n      * @param item\n      *            item to search for\n-     * @return {@code true} if item is found in the available data\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 4b5d16f2c8..d2aa5d5eea 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -78,19 +67,19 @@ public interface DataView<T> extends Serializable {\n     boolean contains(T item);\n \n     /**\n-     * Add a size change listener that is fired when the data set size changes.\n-     * This can happen for instance when filtering the data set.\n+     * Add an item count change listener that is fired when the item\n+     * count changes. This can happen for instance when filtering the data set.\n      * <p>\n-     * Size change listener is bound to the component and will be retained even\n-     * if the data changes by setting of a new items or {@link DataProvider} to\n-     * component.\n+     * Item count change listener is bound to the component and will be\n+     * retained even if the data changes by setting of a new items or\n+     * {@link DataProvider} to component.\n      *\n      * @param listener\n-     *            size change listener to register\n+     *            item count change listener to register\n      * @return registration for removing the listener\n      */\n-    Registration addSizeChangeListener(\n-            ComponentEventListener<SizeChangeEvent<?>> listener);\n+    Registration addItemCountChangeListener(\n+            ComponentEventListener<ItemCountChangeEvent<?>> listener);\n \n     /**\n      * Sets an identifier provider, which returns an identifier for the given\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "committedDate": "2020-06-29 08:45:48 +0300", "message": "Merge branch 'master' into feature/undefined-size"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "2048324b89e4f3e0acba0094def513b17a53c007", "committedDate": "2020-07-03 17:14:55 +0300", "message": "Move contains(T item) to ListDataView (#8687)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07 10:25:43 +0200", "message": "fix: Add missing refreshAll method to data view"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"oid": "4fdf79714001ebbfd1731287f766742114580de9", "url": "https://github.com/vaadin/flow/commit/4fdf79714001ebbfd1731287f766742114580de9", "message": "Improve getItems javadoc\n\nCo-authored-by: Pekka Hyv\u00f6nen <pekka@vaadin.com>", "committedDate": "2020-06-26T07:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzEzMw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023133", "body": "```suggestion\r\n     * Gets the size of the data source with filters applied if any are set.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the full data size with filters if any set.\n          \n          \n            \n                 * Gets the size of the data source with filters applied if any are set.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Get</span> the <span class=\"x x-first x-last\">full </span>data <span class=\"x x-first x-last\">size</span> with filters <span class=\"pl-k\">if</span> any set.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Gets</span> the <span class=\"x x-first x-last\">size of the </span>data <span class=\"x x-first x-last\">source</span> with filters <span class=\"x x-first x-last\">applied </span><span class=\"pl-k\">if</span> any<span class=\"x x-first x-last\"> are</span> set.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T07:47:02Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 05a95f8597..191de48247 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -52,17 +60,15 @@ public interface DataView<T> extends Serializable {\n      * Check if item is in the current data. Item may be filtered out or for\n      * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used for\n-     * identity check. If a custom data provider is used, then the\n-     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n-     * identity can be set up with a\n-     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     * <em>NOTE:</em> when the component is created and not yet added, the item\n+     * might not yet be loaded, but will be loaded during the \"before client\n+     * response\"-phase. To check if the item has been added at that point, after\n+     * setting the data source to the component you need to use\n+     * {@link com.vaadin.flow.component.UI#beforeClientResponse(Component, SerializableConsumer)}.\n      *\n      * @param item\n      *            item to search for\n-     * @return true if item is found in the available data\n-     *\n-     * @see #setIdentifierProvider(IdentifierProvider)\n+     * @return {@code true} if item is found in the available data\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "218d95c0f5ad372445551c8662df306b01e1e4a5", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 191de48247..4b5d16f2c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -68,7 +71,9 @@ public interface DataView<T> extends Serializable {\n      *\n      * @param item\n      *            item to search for\n-     * @return {@code true} if item is found in the available data\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 4b5d16f2c8..d2aa5d5eea 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -78,19 +67,19 @@ public interface DataView<T> extends Serializable {\n     boolean contains(T item);\n \n     /**\n-     * Add a size change listener that is fired when the data set size changes.\n-     * This can happen for instance when filtering the data set.\n+     * Add an item count change listener that is fired when the item\n+     * count changes. This can happen for instance when filtering the data set.\n      * <p>\n-     * Size change listener is bound to the component and will be retained even\n-     * if the data changes by setting of a new items or {@link DataProvider} to\n-     * component.\n+     * Item count change listener is bound to the component and will be\n+     * retained even if the data changes by setting of a new items or\n+     * {@link DataProvider} to component.\n      *\n      * @param listener\n-     *            size change listener to register\n+     *            item count change listener to register\n      * @return registration for removing the listener\n      */\n-    Registration addSizeChangeListener(\n-            ComponentEventListener<SizeChangeEvent<?>> listener);\n+    Registration addItemCountChangeListener(\n+            ComponentEventListener<ItemCountChangeEvent<?>> listener);\n \n     /**\n      * Sets an identifier provider, which returns an identifier for the given\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "committedDate": "2020-06-29 08:45:48 +0300", "message": "Merge branch 'master' into feature/undefined-size"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "2048324b89e4f3e0acba0094def513b17a53c007", "committedDate": "2020-07-03 17:14:55 +0300", "message": "Move contains(T item) to ListDataView (#8687)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07 10:25:43 +0200", "message": "fix: Add missing refreshAll method to data view"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzYwNw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023607", "body": "```suggestion\r\n     * @see #addSizeChangeListener(ComponentEventListener<SizeChangeEvent<?>>)\r\n     */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @see #addSizeChangeListener(ComponentEventListener<SizeChangeEvent<?>>)\n          \n          \n            \n                 */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*<span class=\"x x-first x-last\">/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">@see</span><span class=\"x\"> #addSizeChangeListener(</span><span class=\"pl-k\"><span class=\"x\">ComponentEventListener&lt;</span><span class=\"pl-k x\">SizeChangeEvent&lt;?&gt;</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\">)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"49\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*/</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T07:47:59Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 05a95f8597..191de48247 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -52,17 +60,15 @@ public interface DataView<T> extends Serializable {\n      * Check if item is in the current data. Item may be filtered out or for\n      * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used for\n-     * identity check. If a custom data provider is used, then the\n-     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n-     * identity can be set up with a\n-     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     * <em>NOTE:</em> when the component is created and not yet added, the item\n+     * might not yet be loaded, but will be loaded during the \"before client\n+     * response\"-phase. To check if the item has been added at that point, after\n+     * setting the data source to the component you need to use\n+     * {@link com.vaadin.flow.component.UI#beforeClientResponse(Component, SerializableConsumer)}.\n      *\n      * @param item\n      *            item to search for\n-     * @return true if item is found in the available data\n-     *\n-     * @see #setIdentifierProvider(IdentifierProvider)\n+     * @return {@code true} if item is found in the available data\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "218d95c0f5ad372445551c8662df306b01e1e4a5", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 191de48247..4b5d16f2c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -68,7 +71,9 @@ public interface DataView<T> extends Serializable {\n      *\n      * @param item\n      *            item to search for\n-     * @return {@code true} if item is found in the available data\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n      */\n     boolean contains(T item);\n \n", "next_change": {"commit": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 4b5d16f2c8..d2aa5d5eea 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -78,19 +67,19 @@ public interface DataView<T> extends Serializable {\n     boolean contains(T item);\n \n     /**\n-     * Add a size change listener that is fired when the data set size changes.\n-     * This can happen for instance when filtering the data set.\n+     * Add an item count change listener that is fired when the item\n+     * count changes. This can happen for instance when filtering the data set.\n      * <p>\n-     * Size change listener is bound to the component and will be retained even\n-     * if the data changes by setting of a new items or {@link DataProvider} to\n-     * component.\n+     * Item count change listener is bound to the component and will be\n+     * retained even if the data changes by setting of a new items or\n+     * {@link DataProvider} to component.\n      *\n      * @param listener\n-     *            size change listener to register\n+     *            item count change listener to register\n      * @return registration for removing the listener\n      */\n-    Registration addSizeChangeListener(\n-            ComponentEventListener<SizeChangeEvent<?>> listener);\n+    Registration addItemCountChangeListener(\n+            ComponentEventListener<ItemCountChangeEvent<?>> listener);\n \n     /**\n      * Sets an identifier provider, which returns an identifier for the given\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "committedDate": "2020-06-29 08:45:48 +0300", "message": "Merge branch 'master' into feature/undefined-size"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "2048324b89e4f3e0acba0094def513b17a53c007", "committedDate": "2020-07-03 17:14:55 +0300", "message": "Move contains(T item) to ListDataView (#8687)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07 10:25:43 +0200", "message": "fix: Add missing refreshAll method to data view"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTQxMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025412", "body": "```suggestion\r\n     * Sets an identifier provider, which returns an identifier for the given item.\r\n     * The identified is used for comparing the equality of items. Usage example:\r\n     * {@code dataView.setIdentifiedProvider(Item::getId);}.\r\n     * \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets identity provider to be used for getting item identifier and\n          \n          \n            \n                 * Sets an identifier provider, which returns an identifier for the given item.\n          \n          \n            \n                 * The identified is used for comparing the equality of items. Usage example:\n          \n          \n            \n                 * {@code dataView.setIdentifiedProvider(Item::getId);}.\n          \n          \n            \n                 *", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Sets</span> <span class=\"x x-first x-last\">identity </span>provider<span class=\"x x-first x-last\"> to be used </span><span class=\"pl-k\">for</span> <span class=\"x x-first x-last\">getting item identifier and</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Sets</span> <span class=\"x x-first x-last\">an identifier </span>provider<span class=\"x x-first x-last\">, which returns an identifier </span><span class=\"pl-k\">for</span> <span class=\"x x-first x-last\">the given item.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> identified is used <span class=\"pl-k\">for</span> comparing the equality of items. <span class=\"pl-smi\">Usage</span> example<span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> {<span class=\"pl-k\">@code</span> dataView<span class=\"pl-k\">.</span>setIdentifiedProvider(<span class=\"pl-smi\">Item</span><span class=\"pl-k\">::</span>getId);}<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> </td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T07:51:38Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -75,18 +75,19 @@ public interface DataView<T> extends Serializable {\n      * component.\n      *\n      * @param listener\n-     *         size change listener to register\n+     *            size change listener to register\n      * @return registration for removing the listener\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n \n     /**\n-     * Sets identity provider to be used for getting item identifier and\n-     * compare the items using that identifier.\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identified is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n-     *           function that returns the non-null identifier for a given item\n+     *            function that returns the non-null identifier for a given item\n      */\n     void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "db59ea2000a8ef36461736dea036e0b90352dda2", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 4cba22a53f..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -83,7 +83,7 @@ public interface DataView<T> extends Serializable {\n \n     /**\n      * Sets an identifier provider, which returns an identifier for the given\n-     * item. The identified is used for comparing the equality of items. Usage\n+     * item. The identifier is used for comparing the equality of items. Usage\n      * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -75,18 +75,19 @@ public interface DataView<T> extends Serializable {\n      * component.\n      *\n      * @param listener\n-     *         size change listener to register\n+     *            size change listener to register\n      * @return registration for removing the listener\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n \n     /**\n-     * Sets identity provider to be used for getting item identifier and\n-     * compare the items using that identifier.\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identifier is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n-     *           function that returns the non-null identifier for a given item\n+     *            function that returns the non-null identifier for a given item\n      */\n     void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 05a95f8597..191de48247 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -80,14 +86,4 @@ public interface DataView<T> extends Serializable {\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n-\n-    /**\n-     * Sets an identifier provider, which returns an identifier for the given\n-     * item. The identifier is used for comparing the equality of items. Usage\n-     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n-     *\n-     * @param identifierProvider\n-     *            function that returns the non-null identifier for a given item\n-     */\n-    void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "218d95c0f5ad372445551c8662df306b01e1e4a5", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 191de48247..4b5d16f2c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -86,4 +91,14 @@ public interface DataView<T> extends Serializable {\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identifier is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n+     *\n+     * @param identifierProvider\n+     *            function that returns the non-null identifier for a given item\n+     */\n+    void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "committedDate": "2020-06-29 08:45:48 +0300", "message": "Merge branch 'master' into feature/undefined-size"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "2048324b89e4f3e0acba0094def513b17a53c007", "committedDate": "2020-07-03 17:14:55 +0300", "message": "Move contains(T item) to ListDataView (#8687)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07 10:25:43 +0200", "message": "fix: Add missing refreshAll method to data view"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTgzMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025832", "body": "```suggestion\r\n```\r\nThere is nothing \"compared\" as to me that refers to sorting. ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * compare the items using that identifier.\n          \n      \n    \n    \n  \n\nThere is nothing \"compared\" as to me that refers to sorting.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">     </span><span class=\"pl-k x\">*</span><span class=\"x x-last\"> compare the items using that identifier.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">There is nothing \"compared\" as to me that refers to sorting.</p>", "author": "pleku", "createdAt": "2020-06-26T07:52:25Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and\n+     * compare the items using that identifier.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -75,18 +75,19 @@ public interface DataView<T> extends Serializable {\n      * component.\n      *\n      * @param listener\n-     *         size change listener to register\n+     *            size change listener to register\n      * @return registration for removing the listener\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n \n     /**\n-     * Sets identity provider to be used for getting item identifier and\n-     * compare the items using that identifier.\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identified is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n-     *           function that returns the non-null identifier for a given item\n+     *            function that returns the non-null identifier for a given item\n      */\n     void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "db59ea2000a8ef36461736dea036e0b90352dda2", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 4cba22a53f..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -83,7 +83,7 @@ public interface DataView<T> extends Serializable {\n \n     /**\n      * Sets an identifier provider, which returns an identifier for the given\n-     * item. The identified is used for comparing the equality of items. Usage\n+     * item. The identifier is used for comparing the equality of items. Usage\n      * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..05a95f8597 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -75,18 +75,19 @@ public interface DataView<T> extends Serializable {\n      * component.\n      *\n      * @param listener\n-     *         size change listener to register\n+     *            size change listener to register\n      * @return registration for removing the listener\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n \n     /**\n-     * Sets identity provider to be used for getting item identifier and\n-     * compare the items using that identifier.\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identifier is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n      *\n      * @param identifierProvider\n-     *           function that returns the non-null identifier for a given item\n+     *            function that returns the non-null identifier for a given item\n      */\n     void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 05a95f8597..191de48247 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -80,14 +86,4 @@ public interface DataView<T> extends Serializable {\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n-\n-    /**\n-     * Sets an identifier provider, which returns an identifier for the given\n-     * item. The identifier is used for comparing the equality of items. Usage\n-     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n-     *\n-     * @param identifierProvider\n-     *            function that returns the non-null identifier for a given item\n-     */\n-    void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": {"commit": "218d95c0f5ad372445551c8662df306b01e1e4a5", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 191de48247..4b5d16f2c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n", "chunk": "@@ -86,4 +91,14 @@ public interface DataView<T> extends Serializable {\n      */\n     Registration addSizeChangeListener(\n             ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets an identifier provider, which returns an identifier for the given\n+     * item. The identifier is used for comparing the equality of items. Usage\n+     * example: {@code dataView.setIdentifiedProvider(Item::getId);}.\n+     *\n+     * @param identifierProvider\n+     *            function that returns the non-null identifier for a given item\n+     */\n+    void setIdentifierProvider(IdentifierProvider<T> identifierProvider);\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "committedDate": "2020-06-29 08:45:48 +0300", "message": "Merge branch 'master' into feature/undefined-size"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "2048324b89e4f3e0acba0094def513b17a53c007", "committedDate": "2020-07-03 17:14:55 +0300", "message": "Move contains(T item) to ListDataView (#8687)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "ff19799cdaf63cd8a7abc5135b92dc2da959f47d", "committedDate": "2020-07-06 13:01:28 +0300", "message": "Rename and move updateItem #8653 (#8682)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07 10:25:43 +0200", "message": "fix: Add missing refreshAll method to data view"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTUzOA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029538", "body": "```suggestion\r\n * A mixin interface for components that accept setting a data source\r\n * of the generic types {@link DataProvider} and {@link InMemoryDataProvider}.\r\n * The methods return a {@link DataView} which has the generic API\r\n * for getting information on the data.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Interface that defines methods for setting data.\n          \n          \n            \n             * A mixin interface for components that accept setting a data source\n          \n          \n            \n             * of the generic types {@link DataProvider} and {@link InMemoryDataProvider}.\n          \n          \n            \n             * The methods return a {@link DataView} which has the generic API\n          \n          \n            \n             * for getting information on the data.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first\">Interface</span><span class=\"x x-last\"> that defines methods </span><span class=\"pl-k\">for</span> setting data<span class=\"x x-first x-last\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"x x-first\">A mixin </span><span class=\"pl-k x\">interface</span><span class=\"x x-last\"> </span><span class=\"pl-en\">for</span> <span class=\"x x-first x-last\">components that accept </span>setting <span class=\"x x-first x-last\">a </span>data<span class=\"x x-first x-last\"> source</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> of the generic types {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DataProvider</span>} and {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">InMemoryDataProvider</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> methods <span class=\"pl-k\">return</span> a {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DataView</span>} which has the generic <span class=\"pl-c1\">API</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">for</span> getting information on the data.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:00:15Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTY2Ng==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029666", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This will return a {@link DataView}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-smi x\">This</span><span class=\"x\"> will </span><span class=\"pl-k x\">return</span><span class=\"x\"> a {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi x\">DataView</span><span class=\"x\">}</span><span class=\"pl-c1 x x-last\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:00:29Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMDUxNw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446030517", "body": "```suggestion\r\n     * Set a generic data provider for the component to use and\r\n     * returns the base {@link DataView} that provides API to get\r\n     * information on the data.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set a generic data provider for the component to use.\n          \n          \n            \n                 * Set a generic data provider for the component to use and\n          \n          \n            \n                 * returns the base {@link DataView} that provides API to get\n          \n          \n            \n                 * information on the data.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Set</span> a generic data provider <span class=\"pl-k\">for</span> the component to use<span class=\"x x-first x-last\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Set</span> a generic data provider <span class=\"pl-k\">for</span> the component to use<span class=\"x x-first x-last\"> and</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> returns the base {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DataView</span>} that provides <span class=\"pl-c1\">API</span> to get</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> information on the data.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:02:20Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTM5NQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031395", "body": "```suggestion\r\n     * This method should be used only when the data provider type\r\n     * is not either {@link ListDataProvider} or {@link LBackendDataProvider}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is suggested to use a more specific target from {@link\n          \n          \n            \n                 * This method should be used only when the data provider type\n          \n          \n            \n                 * is not either {@link ListDataProvider} or {@link LBackendDataProvider}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first\">It</span><span class=\"x\"> is suggested to use a more specific target from {</span><span class=\"pl-k x x-last\">@link</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first\">This</span><span class=\"x x-last\"> method should be used only when the data provider type</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> is not either {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">ListDataProvider</span>} or {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">LBackendDataProvider</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:04:18Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTUzNg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031536", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * HasListDataView} or {@link HasLazyDataView}", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">     </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-smi x\">HasListDataView</span><span class=\"x\">} or {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi x\">HasLazyDataView</span><span class=\"x x-last\">}</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:04:35Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQzNg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032436", "body": "```suggestion\r\n     * @return DataView providing information on the data\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-smi\">DataView</span> <span class=\"x x-first x-last\">instance</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-smi\">DataView</span> <span class=\"x x-first x-last\">providing information on the data</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:06:30Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjY3Ng==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032676", "body": "```suggestion\r\n     * @return DataView providing information on the data\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-smi\">DataView</span> <span class=\"x x-first x-last\">instance</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-smi\">DataView</span> <span class=\"x x-first x-last\">providing information on the data</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pleku", "createdAt": "2020-06-26T08:07:01Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance\n+     */\n+    V setDataSource(DataProvider<T, ?> dataProvider);\n+\n+    /**\n+     * Sets an InMemory data provider for the component to use.\n+     * <p>\n+     * Note! Using a {@link ListDataProvider} instead of a {@link\n+     * InMemoryDataProvider} is recommended to get access to {@link\n+     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     *\n+     * @param dataProvider\n+     *         InMemoryDataProvider to use\n+     * @return DataView instance", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex a32e4e8818..1ce8ba7299 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -43,22 +43,22 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      *            DataProvider instance to use\n      * @return DataView providing information on the data\n      */\n-    V setDataSource(DataProvider<T, ?> dataProvider);\n+    V setItems(DataProvider<T, ?> dataProvider);\n \n     /**\n-     * Sets an InMemory data provider for the component to use.\n+     * Sets an in-memory data provider for the component to use.\n      * <p>\n      * Note! Using a {@link ListDataProvider} instead of a\n      * {@link InMemoryDataProvider} is recommended to get access to\n      * {@link ListDataView} API by using\n-     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n      *            InMemoryDataProvider to use\n      * @return DataView providing information on the data\n      */\n-    default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n-        return setDataSource((DataProvider<T, ?>) dataProvider);\n+    default V setItems(InMemoryDataProvider<T> dataProvider) {\n+        return setItems((DataProvider<T, ?>) dataProvider);\n     }\n \n     /**\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 1ce8ba7299..b33603aa9f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n", "chunk": "@@ -54,12 +56,10 @@ public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n      * {@link HasListDataView#setItems(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *            InMemoryDataProvider to use\n+     *            InMemoryDataProvider to use, not <code>null</code>\n      * @return DataView providing information on the data\n      */\n-    default V setItems(InMemoryDataProvider<T> dataProvider) {\n-        return setItems((DataProvider<T, ?>) dataProvider);\n-    }\n+    V setItems(InMemoryDataProvider<T> dataProvider);\n \n     /**\n      * Get the DataView for the component.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "f87b75096b1fe866fc256b986536f0e8a43c1373", "committedDate": "2020-07-02 08:36:25 +0300", "message": "Rename the API for generic data view #8618 (#8663)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0MTE1OA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446041158", "body": "This will make no sense but including it now to not get merge conflicts from the next PR", "bodyText": "This will make no sense but including it now to not get merge conflicts from the next PR", "bodyHTML": "<p dir=\"auto\">This will make no sense but including it now to not get merge conflicts from the next PR</p>", "author": "pleku", "createdAt": "2020-06-26T08:24:19Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting in memory data.\n+ * This will return a {@link LazyDataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasLazyDataView<T, V extends LazyDataView<T>> extends", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\nindex ca4cbed93a..3efecaefbe 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n", "chunk": "@@ -18,61 +18,86 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback. This sets the component to undefined\n+     * size and removes any existing size estimate or callback to provide size.\n+     * <p>\n+     * For using in-memory data, use\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}\n+     * {@link ListDataProvider}\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the back end for\n+     *            a query\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        getDataCommunicator().setDataProvider(\n+                DataProvider.fromCallbacks(fetchCallback, query -> -1), null);\n+        getDataCommunicator().setDefinedSize(false);\n+        return getLazyDataView();\n+    }\n \n     /**\n-     * Supply data through a callback provider with a count callback.\n+     * Supply data lazily with a callbacks. This sets the component to defined size\n+     * - the given count callback is queried for the data size.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n+     *            function that returns a stream of items from the back end for\n+     *            a query\n      * @param countCallback\n-     *         function that return the number of items in the back end for a\n-     *         query\n-     * @return LazyDataView instance\n+     *            function that return the number of items in the back end for a\n+     *            query\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(CallbackDataProvider.FetchCallback<T, Void> fetchCallback,\n-            CallbackDataProvider.CountCallback<T, Void> countCallback);\n-\n-    // Using a more distinct type so that existing data provider API of HasDataProvider::setDataProvider can be overridden\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback,\n+            CallbackDataProvider.CountCallback<T, Void> countCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, countCallback));\n+        return getLazyDataView();\n+    }\n \n     /**\n-     * Supply data through a BackendDataProvider that lazy loads items from a\n-     * back end.\n+     * Supply data with a {@link BackEndDataProvider} that lazy loads items from a\n+     * back end. This sets the component to use defined size, provided by the\n+     * data provider {@link BackEndDataProvider#size(Query)} method.\n      *\n      * @param dataProvider\n-     *         BackendDataProvider instance\n-     * @return LazyDataView instance\n+     *            BackendDataProvider instance\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(BackEndDataProvider<T, Void> dataProvider);\n+    default V setDataSource(BackEndDataProvider<T, Void> dataProvider) {\n+        getDataCommunicator().setDataProvider(dataProvider, null);\n+        return getLazyDataView();\n+    }\n \n     /**\n      * Get the LazyDataView for the component. Throws if the data is not lazy\n-     * and should use another data view type.\n+     * and should use another data view type like {@link ListDataView}.\n      *\n      * @return LazyDataView instance\n      * @throws IllegalStateException\n-     *         when list data view is not applicable\n+     *             when lazy data view is not applicable\n      */\n     V getLazyDataView();\n+\n+    /**\n+     * Gets the data communicator bound to the component. This method is meant\n+     * for the data views and should not be called directly.\n+     * \n+     * @return the data communicator for the data view\n+     */\n+    DataCommunicator<T> getDataCommunicator();\n }\n", "next_change": {"commit": "92ab11744cb1643943985d72c1739b244e9c3d4d", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\nindex 3efecaefbe..34391506d8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n", "chunk": "@@ -92,12 +100,4 @@ public interface HasLazyDataView<T, V extends LazyDataView<T>>\n      *             when lazy data view is not applicable\n      */\n     V getLazyDataView();\n-\n-    /**\n-     * Gets the data communicator bound to the component. This method is meant\n-     * for the data views and should not be called directly.\n-     * \n-     * @return the data communicator for the data view\n-     */\n-    DataCommunicator<T> getDataCommunicator();\n }\n", "next_change": {"commit": "03840b93519e563366fcf7b2ea2b92d7751d08da", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\nindex 34391506d8..bc55c734c8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n", "chunk": "@@ -82,18 +99,25 @@ public interface HasLazyDataView<T, V extends LazyDataView<T>>\n \n     /**\n      * Supply data with a {@link BackEndDataProvider} that lazy loads items from\n-     * a backend. This sets the component to use defined size, provided by the\n-     * data provider {@link BackEndDataProvider#size(Query)} method.\n-     *\n+     * a backend. Note that component will query the data provider for the item\n+     * count. In case that is not desired for performance reasons, use\n+     * {@link #setDataSource(CallbackDataProvider.FetchCallback)} instead.\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n+     * \n      * @param dataProvider\n-     *            BackendDataProvider instance\n+     *            BackEndDataProvider instance\n      * @return LazyDataView instance for further configuration\n      */\n     V setDataSource(BackEndDataProvider<T, Void> dataProvider);\n \n     /**\n-     * Get the LazyDataView for the component. Throws if the data is not lazy\n-     * and should use another data view type like {@link ListDataView}.\n+     * Get the LazyDataView for the component. Throws an exception if the data\n+     * source is not lazy and another data view type should be used, like\n+     * {@link ListDataView}.\n      *\n      * @return LazyDataView instance\n      * @throws IllegalStateException\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\nindex bc55c734c8..ef63884be6 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n", "chunk": "@@ -90,34 +90,34 @@ public interface HasLazyDataView<T, V extends LazyDataView<T>>\n      *            query\n      * @return LazyDataView instance for further configuration\n      */\n-    default V setDataSource(\n+    default V setItems(\n             CallbackDataProvider.FetchCallback<T, Void> fetchCallback,\n             CallbackDataProvider.CountCallback<T, Void> countCallback) {\n-        setDataSource(DataProvider.fromCallbacks(fetchCallback, countCallback));\n+        setItems(DataProvider.fromCallbacks(fetchCallback, countCallback));\n         return getLazyDataView();\n     }\n \n     /**\n-     * Supply data with a {@link BackEndDataProvider} that lazy loads items from\n-     * a backend. Note that component will query the data provider for the item\n-     * count. In case that is not desired for performance reasons, use\n-     * {@link #setDataSource(CallbackDataProvider.FetchCallback)} instead.\n+     * Supply items with a {@link BackEndDataProvider} that lazy loads items\n+     * from a backend. Note that component will query the data provider for the\n+     * item count. In case that is not desired for performance reasons, use\n+     * {@link #setItems(CallbackDataProvider.FetchCallback)} instead.\n      * <p>\n      * The returned data view object can be used for further configuration, or\n      * later on fetched with {@link #getLazyDataView()}. For using in-memory\n      * data, like {@link java.util.Collection}, use\n-     * {@link HasListDataView#setDataSource(Collection)} instead.\n+     * {@link HasListDataView#setItems(Collection)} instead.\n      * \n      * @param dataProvider\n      *            BackEndDataProvider instance\n      * @return LazyDataView instance for further configuration\n      */\n-    V setDataSource(BackEndDataProvider<T, Void> dataProvider);\n+    V setItems(BackEndDataProvider<T, Void> dataProvider);\n \n     /**\n-     * Get the LazyDataView for the component. Throws an exception if the data\n-     * source is not lazy and another data view type should be used, like\n-     * {@link ListDataView}.\n+     * Get the LazyDataView for the component that allows access to the items in\n+     * the component. Throws an exception if the items are not provided lazyly\n+     * and another data view type should be used, like {@link ListDataView}.\n      *\n      * @return LazyDataView instance\n      * @throws IllegalStateException\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\nindex ef63884be6..46277b963e 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java\n", "chunk": "@@ -112,11 +120,11 @@ public interface HasLazyDataView<T, V extends LazyDataView<T>>\n      *            BackEndDataProvider instance\n      * @return LazyDataView instance for further configuration\n      */\n-    V setItems(BackEndDataProvider<T, Void> dataProvider);\n+    V setItems(BackEndDataProvider<T, F> dataProvider);\n \n     /**\n      * Get the LazyDataView for the component that allows access to the items in\n-     * the component. Throws an exception if the items are not provided lazyly\n+     * the component. Throws an exception if the items are not provided lazily\n      * and another data view type should be used, like {@link ListDataView}.\n      *\n      * @return LazyDataView instance\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "committedDate": "2020-06-12 16:26:01 +0300", "message": "Support undefined size for DataCommunicator (#8534)"}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da", "committedDate": "2020-06-27 17:46:58 +0300", "message": "Refactor lazy data view API based on feedback (#8624)"}, {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "committedDate": "2020-06-30 13:58:25 +0300", "message": "Review fixes, remove submodule"}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "77d281cce70085a362d238ea413f99f967c69d60", "committedDate": "2022-03-08 09:15:25 +0200", "message": "chore(deps): bump formatter-maven-plugin from 2.17.1 to 2.18.0 (#13181)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NjU0OQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446046549", "body": "This makes no sense in this PR but keeping it as would get merge conflicts otherwise in the next PR", "bodyText": "This makes no sense in this PR but keeping it as would get merge conflicts otherwise in the next PR", "bodyHTML": "<p dir=\"auto\">This makes no sense in this PR but keeping it as would get merge conflicts otherwise in the next PR</p>", "author": "pleku", "createdAt": "2020-06-26T08:34:38Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * DataView for lazy loaded data.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface LazyDataView<T> extends DataView<T> {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\nindex 3e7ea5a344..5cf4176397 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n", "chunk": "@@ -15,64 +15,106 @@\n  */\n package com.vaadin.flow.data.provider;\n \n-import java.util.Optional;\n-\n /**\n  * DataView for lazy loaded data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface LazyDataView<T> extends DataView<T> {\n \n     /**\n-     * Get the item after the given item if available on the server. Server\n-     * only knows the latest set requested by the client and will be filtered\n-     * and sorted accordingly.\n+     * Sets the component to use defined size with the given callback that\n+     * provides the exact size for the dataset.\n+     * <p>\n+     * When the component has a distinct data provider set with\n+     * {@link com.vaadin.flow.data.binder.HasDataProvider#setDataProvider(DataProvider)},\n+     * the given callback will be queried for getting the dataset size instead\n+     * of the data provider {@link DataProvider#size(Query)} method.\n+     * <p>\n+     * Calling this method will clear any previously set initial size estimate\n+     * {@link #withUndefinedSize(int)} and size estimate callback\n+     * {@link #withUndefinedSize(SizeEstimateCallback)}.\n      *\n-     * @param item\n-     *         item to get next from\n-     * @return optional containing next item if available\n+     * @param callback\n+     *            the callback to use for determining dataset size, not\n+     *            {@code null}\n+     * @see #withDefinedSize()\n      */\n-    Optional<T> getNextItem(T item);\n+    void withDefinedSize(CallbackDataProvider.CountCallback<T, Void> callback);\n \n     /**\n-     * Get the item before the given item if available on the server. Server\n-     * only knows the latest set requested by the client and will be filtered\n-     * and sorted accordingly.\n+     * Sets the component to use undefined size with the given initial size\n+     * estimate of the dataset. The estimated size is used after reset occurs or\n+     * filter changes.\n+     * <p>\n+     * Calling this method will clear any previously set size estimate callback\n+     * {@link #withUndefinedSize(SizeEstimateCallback)} or defined size callback\n+     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)}.\n      *\n-     * @param item\n-     *         item to get previous from\n-     * @return optional containing previous item if available\n+     * @param initialSizeEstimate\n+     *            initial size estimate for the dataset\n      */\n-    Optional<T> getPreviousItem(T item);\n-\n-    // API related supporting undefined size - it makes no sense to have these for in-memory\n+    void withUndefinedSize(int initialSizeEstimate);\n \n     /**\n-     * Add count callback for lazy data with undefined size.\n+     * Sets the component to use undefined size with the given callback for\n+     * estimating the size of the dataset. Calling this method will clear any\n+     * previously set size callback\n+     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)} or initial\n+     * size estimate {@link #withUndefinedSize(int)}.\n+     * <p>\n+     * This callback is triggered:\n+     * <ol>\n+     * <li>initially after setting</li>\n+     * <li>after reset like when the filter has changed</li>\n+     * <li>when the last page of the previous size is being fetched</li>\n+     * </ol>\n+     * <p>\n+     * Once the size is known, because the backend has \"run out of items\", the\n+     * callback is not triggered until a reset occurs or filter changes.\n+     * <p>\n+     * <em>NOTE: The given callback can only return a size estimate that is less\n+     * than the {@link SizeEstimateQuery#getRequestedRangeEnd()} when there has\n+     * been a reset (see {@link SizeEstimateQuery#isReset()},as that would be\n+     * the same as using defined size.</em> An {@link IllegalStateException} is\n+     * thrown instead. For using defined size, use\n+     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)} instead.\n      *\n      * @param callback\n-     *         count callback to use\n+     *            a callback that provides the estimated size of the data\n      */\n-    void withCountCallback(\n-            CallbackDataProvider.CountCallback<T, Void> callback);\n+    void withUndefinedSize(SizeEstimateCallback<T, Void> callback);\n \n     /**\n-     * Set an initial estimate for the item count.\n-     *\n-     * @param initialCountEstimate\n-     *         initial count estimate\n+     * Switches the component to defined size from undefined size.\n+     * <p>\n+     * With defined size, the data provider in the component needs to have\n+     * implemented the {@link DataProvider#size(Query)} method. Another\n+     * alternative is to provide a size callback with the\n+     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)}.\n      */\n-    void withInitialCountEstimate(int initialCountEstimate);\n+    void withDefinedSize();\n \n     /**\n-     * Add a count callback for estimating the remaining size of the data.\n-     *\n-     * @param callback\n-     *         count estimation to use\n+     * Returns whether the component is using defined or undefined size.\n+     * \n+     * @return {@code true} for defined size, {@code false} for undefined size\n+     * @see #withDefinedSize()\n+     * @see #withUndefinedSize()\n+     */\n+    boolean isDefinedSize();\n+\n+    /**\n+     * Switches the component to undefined size from defined size or from\n+     * previous estimate #withInitialCountEstimate or estimate callback\n+     * #withCountEstimateCallback.\n+     * <p>\n+     * The default undefined size depends on the component implementation. For\n+     * controlling the undefined size, use {@link #withUndefinedSize(int)} or\n+     * {@link #withUndefinedSize(SizeEstimateCallback)}. Calling this method\n+     * will clear any previously set initial size estimate or size.\n      */\n-    void withCountEstimateCallback(\n-            CallbackDataProvider.CountCallback<T, Void> callback);\n+    void withUndefinedSize();\n }\n", "next_change": {"commit": "03840b93519e563366fcf7b2ea2b92d7751d08da", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\nindex 5cf4176397..55d5efb176 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n", "chunk": "@@ -25,96 +25,111 @@ package com.vaadin.flow.data.provider;\n public interface LazyDataView<T> extends DataView<T> {\n \n     /**\n-     * Sets the component to use defined size with the given callback that\n-     * provides the exact size for the dataset.\n+     * Sets a callback that the component uses to get the exact rows count\n+     * (items) in the data source. Use this when it is cheap to get the exact\n+     * size of the data source and it is desired that the user sees the \"full\n+     * scrollbar size\".\n      * <p>\n-     * When the component has a distinct data provider set with\n-     * {@link com.vaadin.flow.data.binder.HasDataProvider#setDataProvider(DataProvider)},\n-     * the given callback will be queried for getting the dataset size instead\n-     * of the data provider {@link DataProvider#size(Query)} method.\n-     * <p>\n-     * Calling this method will clear any previously set initial size estimate\n-     * {@link #withUndefinedSize(int)} and size estimate callback\n-     * {@link #withUndefinedSize(SizeEstimateCallback)}.\n+     * The given callback will be queried for the count instead of the data\n+     * provider {@link DataProvider#size(Query)} method when the component has a\n+     * distinct data provider set with\n+     * {@link HasLazyDataView#setDataSource(BackEndDataProvider)}.\n      *\n      * @param callback\n-     *            the callback to use for determining dataset size, not\n-     *            {@code null}\n-     * @see #withDefinedSize()\n+     *            the callback to use for determining row count in the data\n+     *            source, not {@code null}\n+     * @see #setRowCountFromDataProvider()\n+     * @see #setRowCountUnknown()\n      */\n-    void withDefinedSize(CallbackDataProvider.CountCallback<T, Void> callback);\n+    void setRowCountCallback(\n+            CallbackDataProvider.CountCallback<T, Void> callback);\n \n     /**\n-     * Sets the component to use undefined size with the given initial size\n-     * estimate of the dataset. The estimated size is used after reset occurs or\n-     * filter changes.\n+     * Switches the component to get the exact row count from the data\n+     * provider's {@link DataProvider#size(Query)}. Use this when it is cheap to\n+     * get the exact size of the data source and it is desired that the user\n+     * sees the \"full scrollbar size\".\n      * <p>\n-     * Calling this method will clear any previously set size estimate callback\n-     * {@link #withUndefinedSize(SizeEstimateCallback)} or defined size callback\n-     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)}.\n-     *\n-     * @param initialSizeEstimate\n-     *            initial size estimate for the dataset\n+     * Calling this method will clear any previously set count callback with the\n+     * {@link #setRowCountCallback(CallbackDataProvider.CountCallback)} method.\n      */\n-    void withUndefinedSize(int initialSizeEstimate);\n+    void setRowCountFromDataProvider();\n \n     /**\n-     * Sets the component to use undefined size with the given callback for\n-     * estimating the size of the dataset. Calling this method will clear any\n-     * previously set size callback\n-     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)} or initial\n-     * size estimate {@link #withUndefinedSize(int)}.\n-     * <p>\n-     * This callback is triggered:\n-     * <ol>\n-     * <li>initially after setting</li>\n-     * <li>after reset like when the filter has changed</li>\n-     * <li>when the last page of the previous size is being fetched</li>\n-     * </ol>\n+     * Sets the estimated row count for the component. The component will\n+     * automatically fetch more items once the estimate is reached or adjust the\n+     * count if the data source runs out of items before the end. Use this when\n+     * the data source will have a lot more items than shown by default and it\n+     * should be shown to the user.\n      * <p>\n-     * Once the size is known, because the backend has \"run out of items\", the\n-     * callback is not triggered until a reset occurs or filter changes.\n+     * The given estimate is discarded if it is less than the currently shown\n+     * range or if the actual number of rows has been determined. The estimate\n+     * shouldn't be less than two pages (see {@code setPageSize(int)} in the\n+     * component) or it causes unnecessary backend requests.\n      * <p>\n-     * <em>NOTE: The given callback can only return a size estimate that is less\n-     * than the {@link SizeEstimateQuery#getRequestedRangeEnd()} when there has\n-     * been a reset (see {@link SizeEstimateQuery#isReset()},as that would be\n-     * the same as using defined size.</em> An {@link IllegalStateException} is\n-     * thrown instead. For using defined size, use\n-     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)} instead.\n+     * Calling this method will clear any previously set count callback\n+     * {@link #setRowCountCallback(CallbackDataProvider.CountCallback)}.\n      *\n-     * @param callback\n-     *            a callback that provides the estimated size of the data\n+     * @param rowCountEstimate\n+     *            estimated row count of the data source\n+     * @see #setRowCountUnknown()\n+     * @see #setRowCountEstimateIncrease(int)\n      */\n-    void withUndefinedSize(SizeEstimateCallback<T, Void> callback);\n+    void setRowCountEstimate(int rowCountEstimate);\n \n     /**\n-     * Switches the component to defined size from undefined size.\n+     * Gets the row count estimate. The default value depends on the component.\n+     *\n+     * @return row count estimate\n+     * @see #setRowCountEstimate(int)\n+     */\n+    int getRowCountEstimate();\n+\n+    /**\n+     * Sets how much the row count estimate is increased once the previous row\n+     * count estimate has been reached. Use this when the user should be able to\n+     * scroll down faster. The default value depends on the component.\n+     * <p>\n+     * As an example, with an estimate of {@code 1000} and an increase of\n+     * {@code 500}, when scrolling down the row count will be:\n+     * {@code 1000, 1500, 2000, 2500...} until the data source runs out of\n+     * items.\n      * <p>\n-     * With defined size, the data provider in the component needs to have\n-     * implemented the {@link DataProvider#size(Query)} method. Another\n-     * alternative is to provide a size callback with the\n-     * {@link #withDefinedSize(CallbackDataProvider.CountCallback)}.\n+     * <em>NOTE:</em> the given increase should not be less than the\n+     * {@code setPageSize(int)} set in the component, or there will be\n+     * unnecessary backend requests.\n+     *\n+     * @param rowCountEstimateIncrease\n+     *            how much the row count estimate is increased\n+     * @see #setRowCountEstimate(int)\n      */\n-    void withDefinedSize();\n+    void setRowCountEstimateIncrease(int rowCountEstimateIncrease);\n \n     /**\n-     * Returns whether the component is using defined or undefined size.\n+     * Gets the row count estimate increase - how much the row count estimate is\n+     * increased once the previous row count estimate has been reached. The\n+     * default value depends on the component.\n      * \n-     * @return {@code true} for defined size, {@code false} for undefined size\n-     * @see #withDefinedSize()\n-     * @see #withUndefinedSize()\n+     * @return the row count estimate increase\n+     * @see #setRowCountEstimateIncrease(int)\n      */\n-    boolean isDefinedSize();\n+    int getRowCountEstimateIncrease();\n \n     /**\n-     * Switches the component to undefined size from defined size or from\n-     * previous estimate #withInitialCountEstimate or estimate callback\n-     * #withCountEstimateCallback.\n+     * Switches the component to automatically extend the number of rows as the\n+     * previous end is almost reached. The component stops increasing the number\n+     * of rows once the data source has run out of items. Not getting the exact\n+     * size of the data source upfront can improve performance with large sets\n+     * of data.\n+     * <p>\n+     * The default initial row count and how much the row count is increased\n+     * depends on the component. These values can be customized with\n+     * {@link #setRowCountEstimate(int)} and\n+     * {@link #setRowCountEstimateIncrease(int)} when the data source has a lot\n+     * of items and faster scrolling down is desired.\n      * <p>\n-     * The default undefined size depends on the component implementation. For\n-     * controlling the undefined size, use {@link #withUndefinedSize(int)} or\n-     * {@link #withUndefinedSize(SizeEstimateCallback)}. Calling this method\n-     * will clear any previously set initial size estimate or size.\n+     * Calling this method will clear any previously set count callback\n+     * {@link #setRowCountCallback(CallbackDataProvider.CountCallback)}.\n      */\n-    void withUndefinedSize();\n+    void setRowCountUnknown();\n }\n", "next_change": {"commit": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\nindex 55d5efb176..239ef1853b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n", "chunk": "@@ -118,14 +117,14 @@ public interface LazyDataView<T> extends DataView<T> {\n     /**\n      * Switches the component to automatically extend the number of rows as the\n      * previous end is almost reached. The component stops increasing the number\n-     * of rows once the data source has run out of items. Not getting the exact\n-     * size of the data source upfront can improve performance with large sets\n+     * of rows once the backend has run out of items. Not getting the exact\n+     * size of the backend upfront can improve performance with large sets\n      * of data.\n      * <p>\n      * The default initial row count and how much the row count is increased\n      * depends on the component. These values can be customized with\n      * {@link #setRowCountEstimate(int)} and\n-     * {@link #setRowCountEstimateIncrease(int)} when the data source has a lot\n+     * {@link #setRowCountEstimateIncrease(int)} when the backend has a lot\n      * of items and faster scrolling down is desired.\n      * <p>\n      * Calling this method will clear any previously set count callback\n", "next_change": {"commit": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\nindex 239ef1853b..8e7cc57f87 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n", "chunk": "@@ -98,37 +98,37 @@ public interface LazyDataView<T> extends DataView<T> {\n      * {@code setPageSize(int)} set in the component, or there will be\n      * unnecessary backend requests.\n      *\n-     * @param rowCountEstimateIncrease\n-     *            how much the row count estimate is increased\n-     * @see #setRowCountEstimate(int)\n+     * @param itemCountEstimateIncrease\n+     *            how much the item count estimate is increased\n+     * @see #setItemCountEstimate(int)\n      */\n-    void setRowCountEstimateIncrease(int rowCountEstimateIncrease);\n+    void setItemCountEstimateIncrease(int itemCountEstimateIncrease);\n \n     /**\n-     * Gets the row count estimate increase - how much the row count estimate is\n-     * increased once the previous row count estimate has been reached. The\n-     * default value depends on the component.\n+     * Gets the item count estimate increase - how much the item count\n+     * estimate is increased once the previous item count estimate has been\n+     * reached. The default value depends on the component.\n      * \n-     * @return the row count estimate increase\n-     * @see #setRowCountEstimateIncrease(int)\n+     * @return the item count estimate increase\n+     * @see #setItemCountEstimateIncrease(int)\n      */\n-    int getRowCountEstimateIncrease();\n+    int getItemCountEstimateIncrease();\n \n     /**\n-     * Switches the component to automatically extend the number of rows as the\n+     * Switches the component to automatically extend the number of items as the\n      * previous end is almost reached. The component stops increasing the number\n-     * of rows once the backend has run out of items. Not getting the exact\n+     * of items once the backend has run out of items. Not getting the exact\n      * size of the backend upfront can improve performance with large sets\n      * of data.\n      * <p>\n-     * The default initial row count and how much the row count is increased\n+     * The default initial item count and how much the item count is increased\n      * depends on the component. These values can be customized with\n-     * {@link #setRowCountEstimate(int)} and\n-     * {@link #setRowCountEstimateIncrease(int)} when the backend has a lot\n+     * {@link #setItemCountEstimate(int)} and\n+     * {@link #setItemCountEstimateIncrease(int)} when the backend has a lot\n      * of items and faster scrolling down is desired.\n      * <p>\n      * Calling this method will clear any previously set count callback\n-     * {@link #setRowCountCallback(CallbackDataProvider.CountCallback)}.\n+     * {@link #setItemCountCallback(CallbackDataProvider.CountCallback)}.\n      */\n-    void setRowCountUnknown();\n+    void setItemCountUnknown();\n }\n", "next_change": {"commit": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\nindex 8e7cc57f87..a508ca5b78 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java\n", "chunk": "@@ -118,17 +92,14 @@ public interface LazyDataView<T> extends DataView<T> {\n      * Switches the component to automatically extend the number of items as the\n      * previous end is almost reached. The component stops increasing the number\n      * of items once the backend has run out of items. Not getting the exact\n-     * size of the backend upfront can improve performance with large sets\n-     * of data.\n+     * size of the backend upfront can improve performance with large sets of\n+     * data.\n      * <p>\n      * The default initial item count and how much the item count is increased\n      * depends on the component. These values can be customized with\n      * {@link #setItemCountEstimate(int)} and\n-     * {@link #setItemCountEstimateIncrease(int)} when the backend has a lot\n-     * of items and faster scrolling down is desired.\n-     * <p>\n-     * Calling this method will clear any previously set count callback\n-     * {@link #setItemCountCallback(CallbackDataProvider.CountCallback)}.\n+     * {@link #setItemCountEstimateIncrease(int)} when the backend has a lot of\n+     * items and faster scrolling down is desired.\n      */\n     void setItemCountUnknown();\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "committedDate": "2020-06-12 16:26:01 +0300", "message": "Support undefined size for DataCommunicator (#8534)"}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da", "committedDate": "2020-06-27 17:46:58 +0300", "message": "Refactor lazy data view API based on feedback (#8624)"}, {"oid": "5b8f2f6f9baa7a82c3f3ac25537267080c444160", "committedDate": "2020-06-30 18:13:00 +0300", "message": "Use setItems instead of setDataSource (#8660)"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "91c7e183cc0d9be3a6e7879f1d555b7635782521", "committedDate": "2020-08-24 10:32:45 +0300", "message": "Filter type support in HasDataView interfaces (#8874)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "77d281cce70085a362d238ea413f99f967c69d60", "committedDate": "2022-03-08 09:15:25 +0200", "message": "chore(deps): bump formatter-maven-plugin from 2.17.1 to 2.18.0 (#13181)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTkxMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059912", "body": "Not used", "bodyText": "Not used", "bodyHTML": "<p dir=\"auto\">Not used</p>", "author": "pleku", "createdAt": "2020-06-26T09:01:01Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n", "next_change": {"commit": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 67810c89d0..831214dcb1 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,13 +297,31 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {\n+        return Collections.unmodifiableList(activeKeyOrder);\n+    }\n+\n+    /**\n+     * Get the current client item range.\n+     *\n+     * @return range of items on client\n+     */\n+    public Range getRequestedRange() {\n+        return requestedRange;\n+    }\n+\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "committedDate": "2020-06-12 16:26:01 +0300", "message": "Support undefined size for DataCommunicator (#8534)"}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da", "committedDate": "2020-06-27 17:46:58 +0300", "message": "Refactor lazy data view API based on feedback (#8624)"}, {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "committedDate": "2020-06-30 12:53:35 +0300", "message": "Remove unnecessary things for merge to master"}, {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "committedDate": "2020-06-30 13:58:25 +0300", "message": "Review fixes, remove submodule"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "132bcaef1b58fbdb126c3de39b2904ca515b23d3", "committedDate": "2020-07-14 12:13:09 +0300", "message": "Make it easier to use to paged repositories for data provider data (#8715)"}, {"oid": "6a629bc506b99e01c8351f62afec378a39c94cb0", "committedDate": "2020-07-17 15:57:31 +0300", "message": "Introduce an API to data communicator for paged queries disabling (#8726)"}, {"oid": "9ea432433065eee2c1ccd87208615e0c0b403ab6", "committedDate": "2020-07-20 15:53:42 +0300", "message": "Remove overlooked TODO associated with closed 8557 issue (#8738)"}, {"oid": "5cd56f6dac769067e3ce1522370e263f81949860", "committedDate": "2020-08-12 13:38:08 +0300", "message": "Fix integer overflow in Data Provider page number formula (#8834)"}, {"oid": "fa92487554972d02be295aedd878bfc0af722088", "committedDate": "2020-08-19 11:00:49 +0300", "message": "Backend is requested for pages that don't exist (#8850)"}, {"oid": "339ccc8b339701840bc0b469afbacffe4b4914e8", "committedDate": "2020-09-24 08:40:22 +0300", "message": "Force size re-estimate when requested range end equals assumed size (#9033)"}, {"oid": "f374da0beb141961ee428fe4616c868abf4099ed", "committedDate": "2020-09-29 13:50:40 +0300", "message": "Skip data provider verification in AbstractDataView if default one is used (#9052)"}, {"oid": "c4ffe6c5b873346f9b0730bf06dea69a7a6d08b5", "committedDate": "2020-09-30 10:44:41 +0300", "message": "feat: add API for disabling data fetching to DC (#9070)"}, {"oid": "ce0799726a1ce86273481c707367bd444de6f351", "committedDate": "2020-10-02 10:34:43 +0300", "message": "fix: Use a default page size for DataCommunicator (#9081)"}, {"oid": "12d82d549ddebd8a74669c9c735e0fd1c1727a00", "committedDate": "2020-10-02 14:00:30 +0300", "message": "refactor: rename method name to avoid double negation (#9091)"}, {"oid": "262d897310f7827cdf125e341bdaac3fd3abc86d", "committedDate": "2020-10-07 13:20:08 +0300", "message": "refactor: allow components to fire a count change event (#9124)"}, {"oid": "b250bce9dbc5da986ca2281345c4c506eca1f5b2", "committedDate": "2020-10-08 13:46:21 +0300", "message": "refactor: revert 'allow components to fire a count change event' (#9139)"}, {"oid": "6717396ee01be49590b3dba89d6f636279747026", "committedDate": "2020-10-21 14:11:17 +0300", "message": "feat: disposable filter setup API in data communicator (#9198)"}, {"oid": "9ee754f7c2352027dc5fe8b8a569b467ec3a575a", "committedDate": "2020-10-28 17:00:41 +0200", "message": "refactor: expose the items count API to components (#9257)"}, {"oid": "3fd66e0fb14b2fb7e11e92d198cc776f0fb14de5", "committedDate": "2020-11-03 08:36:05 +0200", "message": "chore: fix typo (#9272)"}, {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "committedDate": "2020-11-12 10:01:31 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "committedDate": "2020-11-12 16:00:17 +0200", "message": "refactor: revert 'Use data view filter and sorting only to that component' (#9390)"}, {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349", "committedDate": "2020-11-16 14:35:45 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "f3be09a172b2b63a5e1875ae5a939b708cc1692c", "committedDate": "2020-11-18 18:54:25 +0200", "message": "fix: preserve filter to not lose it between page requests (#9421)"}, {"oid": "ce6dc73d79ef148040fe6717dc629f07bef3edce", "committedDate": "2021-01-18 16:18:10 +0200", "message": "fix: Add empty list handling to DataCommunicator#collectKeysToFlush (#9516)"}, {"oid": "e0949d8efaba01a0ff1b52e82001b643518e321c", "committedDate": "2021-02-15 09:57:56 +0200", "message": "fix: Resolve requested range properly after filtering the lazy backend (#10020)"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "067f63f763827dd4453bea984549d1da6717373c", "committedDate": "2021-08-10 09:44:48 +0300", "message": "fix: register data provider listener only if it has not been registered (#11471)"}, {"oid": "c1a75e6417d2979d39d872b1a9fece09d4a4900c", "committedDate": "2021-08-11 14:11:56 +0200", "message": "Revert \"fix: register data provider listener only if it has not been registered (#11471)\" (#11555)"}, {"oid": "174bd5d8953a0d247cdc36513795b9ceef2e07a6", "committedDate": "2021-08-17 15:56:41 +0300", "message": "fix: Remove old data provider listener on component attach (#11586)"}, {"oid": "e2321969621fb0889e24d4c254bdcc14a75861f3", "committedDate": "2021-10-27 14:54:34 +0300", "message": "chore(deps): bump formatter-maven-plugin from 2.11.0 to 2.16.0 (#11763)"}, {"oid": "0ec90bf144c596214d34a2ef82ca9cf7bc8aa28b", "committedDate": "2021-11-01 14:11:15 +0200", "message": "fix: Limit the requested pages to a given threshold (#12003)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "03efa052b8e8496d0491da865ccb037959f0c091", "committedDate": "2022-01-25 16:08:40 +0200", "message": "feat: Add async mode to flush operation and API to turn it on (#12378)"}, {"oid": "138fc89d9cd51bc65b4af2439fe7c779429cc460", "committedDate": "2022-01-26 12:43:45 +0000", "message": "fix: do not store UI reference in DataCommunicator (#12849)"}, {"oid": "77d281cce70085a362d238ea413f99f967c69d60", "committedDate": "2022-03-08 09:15:25 +0200", "message": "chore(deps): bump formatter-maven-plugin from 2.17.1 to 2.18.0 (#13181)"}, {"oid": "33093a41302cc5656ac5602643531fa0943d5f55", "committedDate": "2022-04-21 06:59:39 +0300", "message": "fix: Not fetch entire page if number of requested items is less (#13580)"}, {"oid": "c55bdcc6dd9dac75be42291b5752d1d86d5a9997", "committedDate": "2022-07-20 16:51:13 +0300", "message": "fix: Let DataCommunicator#flush keep track of which StateTree is supposed to execute its flushRequest (#14068)"}, {"oid": "88d8f06ac01ad28fd81efb6434b1d178af2c4b29", "committedDate": "2022-09-29 16:37:03 +0200", "message": "fix: Cancel previous flush request if new one is forced (#14647)"}, {"oid": "1737d6be6d744516ccabc68db770462fa78b512d", "committedDate": "2022-11-22 10:43:34 +0100", "message": "fix: added MAXIMUM_ALLOWED_ITEMS_LOWER_LIMIT for small pageSizes (#15220)"}, {"oid": "8741a0ad6001a864ae038238af49e489c4a5c687", "committedDate": "2022-12-05 13:09:15 +0200", "message": "fix: do not remove expanded items from key mapper (#15314)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}, {"oid": "8fc289b78fd142bedc8474139639a5e4bf25f9af", "committedDate": "2023-02-22 22:38:37 +0200", "message": "fix: consume parallel streams when fetching paginated data (#15924)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTk2MQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059961", "body": "Not used", "bodyText": "Not used", "bodyHTML": "<p dir=\"auto\">Not used</p>", "author": "pleku", "createdAt": "2020-06-26T09:01:06Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {\n+        return Collections.unmodifiableList(activeKeyOrder);\n+    }\n+\n+    /**\n+     * Get the current client item range.\n+     *\n+     * @return range of items on client\n+     */\n+    public Range getRequestedRange() {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b41705be452331ce2a81473c074f31427d32fd60", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n", "next_change": {"commit": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "changed_code": [{"header": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 67810c89d0..831214dcb1 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n", "chunk": "@@ -279,13 +297,31 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {\n+        return Collections.unmodifiableList(activeKeyOrder);\n+    }\n+\n+    /**\n+     * Get the current client item range.\n+     *\n+     * @return range of items on client\n+     */\n+    public Range getRequestedRange() {\n+        return requestedRange;\n+    }\n+\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b41705be452331ce2a81473c074f31427d32fd60", "message": "Merge commit", "committedDate": null}, {"oid": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "committedDate": "2020-06-12 16:26:01 +0300", "message": "Support undefined size for DataCommunicator (#8534)"}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "committedDate": "2020-06-18 14:13:25 +0300", "message": "Add an AbstractLazyDataView (#8578)"}, {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da", "committedDate": "2020-06-27 17:46:58 +0300", "message": "Refactor lazy data view API based on feedback (#8624)"}, {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "committedDate": "2020-06-30 12:53:35 +0300", "message": "Remove unnecessary things for merge to master"}, {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "committedDate": "2020-06-30 13:58:25 +0300", "message": "Review fixes, remove submodule"}, {"oid": "3c14f824d0fb972a078dfe0a73f2dddf9770c4ba", "committedDate": "2020-07-01 22:07:53 +0300", "message": "Use ItemCount instead of size and RowCount #8651 (#8662)"}, {"oid": "40049327d54cf5aa8c9da54f0fb688495f69f3bb", "committedDate": "2020-07-05 22:23:12 +0300", "message": "Add getItem(int index) to DataView #8652 (#8676)"}, {"oid": "733731055d9467220a786a70fc3bab0e2d7d2ba8", "committedDate": "2020-07-06 15:40:23 +0300", "message": "Fix exact item count resolving if scrolled far (#8692)"}, {"oid": "132bcaef1b58fbdb126c3de39b2904ca515b23d3", "committedDate": "2020-07-14 12:13:09 +0300", "message": "Make it easier to use to paged repositories for data provider data (#8715)"}, {"oid": "6a629bc506b99e01c8351f62afec378a39c94cb0", "committedDate": "2020-07-17 15:57:31 +0300", "message": "Introduce an API to data communicator for paged queries disabling (#8726)"}, {"oid": "9ea432433065eee2c1ccd87208615e0c0b403ab6", "committedDate": "2020-07-20 15:53:42 +0300", "message": "Remove overlooked TODO associated with closed 8557 issue (#8738)"}, {"oid": "5cd56f6dac769067e3ce1522370e263f81949860", "committedDate": "2020-08-12 13:38:08 +0300", "message": "Fix integer overflow in Data Provider page number formula (#8834)"}, {"oid": "fa92487554972d02be295aedd878bfc0af722088", "committedDate": "2020-08-19 11:00:49 +0300", "message": "Backend is requested for pages that don't exist (#8850)"}, {"oid": "339ccc8b339701840bc0b469afbacffe4b4914e8", "committedDate": "2020-09-24 08:40:22 +0300", "message": "Force size re-estimate when requested range end equals assumed size (#9033)"}, {"oid": "f374da0beb141961ee428fe4616c868abf4099ed", "committedDate": "2020-09-29 13:50:40 +0300", "message": "Skip data provider verification in AbstractDataView if default one is used (#9052)"}, {"oid": "c4ffe6c5b873346f9b0730bf06dea69a7a6d08b5", "committedDate": "2020-09-30 10:44:41 +0300", "message": "feat: add API for disabling data fetching to DC (#9070)"}, {"oid": "ce0799726a1ce86273481c707367bd444de6f351", "committedDate": "2020-10-02 10:34:43 +0300", "message": "fix: Use a default page size for DataCommunicator (#9081)"}, {"oid": "12d82d549ddebd8a74669c9c735e0fd1c1727a00", "committedDate": "2020-10-02 14:00:30 +0300", "message": "refactor: rename method name to avoid double negation (#9091)"}, {"oid": "262d897310f7827cdf125e341bdaac3fd3abc86d", "committedDate": "2020-10-07 13:20:08 +0300", "message": "refactor: allow components to fire a count change event (#9124)"}, {"oid": "b250bce9dbc5da986ca2281345c4c506eca1f5b2", "committedDate": "2020-10-08 13:46:21 +0300", "message": "refactor: revert 'allow components to fire a count change event' (#9139)"}, {"oid": "6717396ee01be49590b3dba89d6f636279747026", "committedDate": "2020-10-21 14:11:17 +0300", "message": "feat: disposable filter setup API in data communicator (#9198)"}, {"oid": "9ee754f7c2352027dc5fe8b8a569b467ec3a575a", "committedDate": "2020-10-28 17:00:41 +0200", "message": "refactor: expose the items count API to components (#9257)"}, {"oid": "3fd66e0fb14b2fb7e11e92d198cc776f0fb14de5", "committedDate": "2020-11-03 08:36:05 +0200", "message": "chore: fix typo (#9272)"}, {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "committedDate": "2020-11-12 10:01:31 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "committedDate": "2020-11-12 16:00:17 +0200", "message": "refactor: revert 'Use data view filter and sorting only to that component' (#9390)"}, {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349", "committedDate": "2020-11-16 14:35:45 +0200", "message": "fix!: Use data view filter and sorting only to that component (#9315)"}, {"oid": "f3be09a172b2b63a5e1875ae5a939b708cc1692c", "committedDate": "2020-11-18 18:54:25 +0200", "message": "fix: preserve filter to not lose it between page requests (#9421)"}, {"oid": "ce6dc73d79ef148040fe6717dc629f07bef3edce", "committedDate": "2021-01-18 16:18:10 +0200", "message": "fix: Add empty list handling to DataCommunicator#collectKeysToFlush (#9516)"}, {"oid": "e0949d8efaba01a0ff1b52e82001b643518e321c", "committedDate": "2021-02-15 09:57:56 +0200", "message": "fix: Resolve requested range properly after filtering the lazy backend (#10020)"}, {"oid": "d342b88dbbb3bfc709f69b014a958ef91c98ed65", "committedDate": "2021-03-30 13:33:51 +0300", "message": "chore: format sources w. formatter:format (#10458)"}, {"oid": "30886fd96c0cfdb8cc7d8546972666528126fddb", "committedDate": "2021-05-27 10:33:29 +0300", "message": "chore: update copyright from 2020 to 2021 (#11087)"}, {"oid": "067f63f763827dd4453bea984549d1da6717373c", "committedDate": "2021-08-10 09:44:48 +0300", "message": "fix: register data provider listener only if it has not been registered (#11471)"}, {"oid": "c1a75e6417d2979d39d872b1a9fece09d4a4900c", "committedDate": "2021-08-11 14:11:56 +0200", "message": "Revert \"fix: register data provider listener only if it has not been registered (#11471)\" (#11555)"}, {"oid": "174bd5d8953a0d247cdc36513795b9ceef2e07a6", "committedDate": "2021-08-17 15:56:41 +0300", "message": "fix: Remove old data provider listener on component attach (#11586)"}, {"oid": "e2321969621fb0889e24d4c254bdcc14a75861f3", "committedDate": "2021-10-27 14:54:34 +0300", "message": "chore(deps): bump formatter-maven-plugin from 2.11.0 to 2.16.0 (#11763)"}, {"oid": "0ec90bf144c596214d34a2ef82ca9cf7bc8aa28b", "committedDate": "2021-11-01 14:11:15 +0200", "message": "fix: Limit the requested pages to a given threshold (#12003)"}, {"oid": "fd04f545ee3f13b0cf3cdf2b694c6d9ab215c689", "committedDate": "2021-12-31 19:36:12 +0100", "message": "chore: update copyright year range to 2000-2022 (#12653)"}, {"oid": "03efa052b8e8496d0491da865ccb037959f0c091", "committedDate": "2022-01-25 16:08:40 +0200", "message": "feat: Add async mode to flush operation and API to turn it on (#12378)"}, {"oid": "138fc89d9cd51bc65b4af2439fe7c779429cc460", "committedDate": "2022-01-26 12:43:45 +0000", "message": "fix: do not store UI reference in DataCommunicator (#12849)"}, {"oid": "77d281cce70085a362d238ea413f99f967c69d60", "committedDate": "2022-03-08 09:15:25 +0200", "message": "chore(deps): bump formatter-maven-plugin from 2.17.1 to 2.18.0 (#13181)"}, {"oid": "33093a41302cc5656ac5602643531fa0943d5f55", "committedDate": "2022-04-21 06:59:39 +0300", "message": "fix: Not fetch entire page if number of requested items is less (#13580)"}, {"oid": "c55bdcc6dd9dac75be42291b5752d1d86d5a9997", "committedDate": "2022-07-20 16:51:13 +0300", "message": "fix: Let DataCommunicator#flush keep track of which StateTree is supposed to execute its flushRequest (#14068)"}, {"oid": "88d8f06ac01ad28fd81efb6434b1d178af2c4b29", "committedDate": "2022-09-29 16:37:03 +0200", "message": "fix: Cancel previous flush request if new one is forced (#14647)"}, {"oid": "1737d6be6d744516ccabc68db770462fa78b512d", "committedDate": "2022-11-22 10:43:34 +0100", "message": "fix: added MAXIMUM_ALLOWED_ITEMS_LOWER_LIMIT for small pageSizes (#15220)"}, {"oid": "8741a0ad6001a864ae038238af49e489c4a5c687", "committedDate": "2022-12-05 13:09:15 +0200", "message": "fix: do not remove expanded items from key mapper (#15314)"}, {"oid": "74f3e0c5bf068912f1b68ff516e846e56ae49ac3", "committedDate": "2023-01-27 11:10:26 +0200", "message": "chore: Update copyright year (#15760)"}, {"oid": "8fc289b78fd142bedc8474139639a5e4bf25f9af", "committedDate": "2023-02-22 22:38:37 +0200", "message": "fix: consume parallel streams when fetching paginated data (#15924)"}]}, {"oid": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "url": "https://github.com/vaadin/flow/commit/a31c41d3e38b5f9ca677306c3d56e36efaadf546", "message": "Improving javadocs, removing setDataSource(Stream)\n\nAlso formats a lot of javadocs that were not formatted.", "committedDate": "2020-06-26T09:23:41Z", "type": "commit"}, {"oid": "db59ea2000a8ef36461736dea036e0b90352dda2", "url": "https://github.com/vaadin/flow/commit/db59ea2000a8ef36461736dea036e0b90352dda2", "message": "Fix typo in javadoc", "committedDate": "2020-06-26T11:41:28Z", "type": "commit"}]}