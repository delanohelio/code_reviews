{"pr_number": 1286, "pr_title": "Feature | Added support for authentication to Azure Key Vault using Managed Identity", "pr_author": "lilgreenbird", "pr_createdAt": "2020-03-18T02:11:55Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1286", "merge_commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "timeline": [{"oid": "c97b863c95385bdcd1afc897ef39cbebaf495578", "url": "https://github.com/microsoft/mssql-jdbc/commit/c97b863c95385bdcd1afc897ef39cbebaf495578", "message": "Fix AEv2 tests exclude for reqExternalSetup and cleanup (#1247)", "committedDate": "2020-02-05T19:03:48Z", "type": "commit"}, {"oid": "54b5a194e5d46552419c86e0d1f8c800f42d3de8", "url": "https://github.com/microsoft/mssql-jdbc/commit/54b5a194e5d46552419c86e0d1f8c800f42d3de8", "message": "Fix | Add null check for getObject() with LocalTime and LocalDate (#1250)", "committedDate": "2020-02-08T00:19:05Z", "type": "commit"}, {"oid": "672b7d67caae75250c53f82a760e8d3880e62a37", "url": "https://github.com/microsoft/mssql-jdbc/commit/672b7d67caae75250c53f82a760e8d3880e62a37", "message": "added all AKV tests to use reqExternalSetup tag so they will be skipped by default (#1254)\n\n* skip AKV test properly\r\n\r\n* removed enclave properties string to failed errors as enclave tests could be skipped", "committedDate": "2020-02-10T19:04:22Z", "type": "commit"}, {"oid": "32c21f5fef64d28468647f1fbab21aa767d0605f", "url": "https://github.com/microsoft/mssql-jdbc/commit/32c21f5fef64d28468647f1fbab21aa767d0605f", "message": "msi for akv", "committedDate": "2020-03-04T20:48:15Z", "type": "commit"}, {"oid": "b706fb3f0896a086b18a2c4f9edc517dbcb274d1", "url": "https://github.com/microsoft/mssql-jdbc/commit/b706fb3f0896a086b18a2c4f9edc517dbcb274d1", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-06T04:52:26Z", "type": "commit"}, {"oid": "9e368a578d2dc0c720c5b34c0a0dfbe2a0c0a2d1", "url": "https://github.com/microsoft/mssql-jdbc/commit/9e368a578d2dc0c720c5b34c0a0dfbe2a0c0a2d1", "message": "msi tests", "committedDate": "2020-03-09T23:36:11Z", "type": "commit"}, {"oid": "28bb1ee936deeef9790810f1cd02b57b81940414", "url": "https://github.com/microsoft/mssql-jdbc/commit/28bb1ee936deeef9790810f1cd02b57b81940414", "message": "added new props for AKV with MSI", "committedDate": "2020-03-12T02:51:07Z", "type": "commit"}, {"oid": "b75ebab8265af84257e21bc455a43ef18a42a845", "url": "https://github.com/microsoft/mssql-jdbc/commit/b75ebab8265af84257e21bc455a43ef18a42a845", "message": "fixed formatting", "committedDate": "2020-03-12T02:54:10Z", "type": "commit"}, {"oid": "3ce5ad896c2a8efbb3901e4c82de8d01c7baf4b2", "url": "https://github.com/microsoft/mssql-jdbc/commit/3ce5ad896c2a8efbb3901e4c82de8d01c7baf4b2", "message": "fixed formatting", "committedDate": "2020-03-12T03:02:47Z", "type": "commit"}, {"oid": "3a9db373a5c65488a8f7f8a0586e49a4b863b234", "url": "https://github.com/microsoft/mssql-jdbc/commit/3a9db373a5c65488a8f7f8a0586e49a4b863b234", "message": "fixed formatting", "committedDate": "2020-03-12T03:10:19Z", "type": "commit"}, {"oid": "5ba68814685fa96b13972e4223f6eb70c4aee4a1", "url": "https://github.com/microsoft/mssql-jdbc/commit/5ba68814685fa96b13972e4223f6eb70c4aee4a1", "message": "fixed formatting", "committedDate": "2020-03-12T03:14:10Z", "type": "commit"}, {"oid": "95948c1fb38755cbd652d290fa5b783610afeedb", "url": "https://github.com/microsoft/mssql-jdbc/commit/95948c1fb38755cbd652d290fa5b783610afeedb", "message": "test fixes", "committedDate": "2020-03-12T07:29:50Z", "type": "commit"}, {"oid": "beac701758c535820082a72f23eabda4b21bb35d", "url": "https://github.com/microsoft/mssql-jdbc/commit/beac701758c535820082a72f23eabda4b21bb35d", "message": "update connection property names", "committedDate": "2020-03-13T07:09:38Z", "type": "commit"}, {"oid": "86b14ee41ce14981ee4db2db556f05a27d199c86", "url": "https://github.com/microsoft/mssql-jdbc/commit/86b14ee41ce14981ee4db2db556f05a27d199c86", "message": "updated tests", "committedDate": "2020-03-16T21:23:27Z", "type": "commit"}, {"oid": "48801af43e5fc90fd3be04826be32ef30b58ac89", "url": "https://github.com/microsoft/mssql-jdbc/commit/48801af43e5fc90fd3be04826be32ef30b58ac89", "message": "removed unused", "committedDate": "2020-03-17T00:36:33Z", "type": "commit"}, {"oid": "7cf8a6889ac99106ef6a2b7bb204cc872730a848", "url": "https://github.com/microsoft/mssql-jdbc/commit/7cf8a6889ac99106ef6a2b7bb204cc872730a848", "message": "ks registration", "committedDate": "2020-03-17T00:48:42Z", "type": "commit"}, {"oid": "a64c9954e8d59c7b61662da94f71cda8a70e0f21", "url": "https://github.com/microsoft/mssql-jdbc/commit/a64c9954e8d59c7b61662da94f71cda8a70e0f21", "message": "debug", "committedDate": "2020-03-17T07:06:23Z", "type": "commit"}, {"oid": "7b013e94c41e6083557d9f439c366abdbeeecb35", "url": "https://github.com/microsoft/mssql-jdbc/commit/7b013e94c41e6083557d9f439c366abdbeeecb35", "message": "debug", "committedDate": "2020-03-17T07:12:57Z", "type": "commit"}, {"oid": "395790ff8d8736085eb45030ca772ff09aaaa272", "url": "https://github.com/microsoft/mssql-jdbc/commit/395790ff8d8736085eb45030ca772ff09aaaa272", "message": "debug", "committedDate": "2020-03-17T07:25:39Z", "type": "commit"}, {"oid": "5bb43139c021086eacd425b33f0c1f15015fc699", "url": "https://github.com/microsoft/mssql-jdbc/commit/5bb43139c021086eacd425b33f0c1f15015fc699", "message": "debug", "committedDate": "2020-03-17T07:30:37Z", "type": "commit"}, {"oid": "065a0f00500d0b0d5b7b57d14245a486c9b9cf27", "url": "https://github.com/microsoft/mssql-jdbc/commit/065a0f00500d0b0d5b7b57d14245a486c9b9cf27", "message": "remove debug", "committedDate": "2020-03-17T07:37:45Z", "type": "commit"}, {"oid": "9ed54ef1b02911ac8ef9c479c979d3d13d9694ca", "url": "https://github.com/microsoft/mssql-jdbc/commit/9ed54ef1b02911ac8ef9c479c979d3d13d9694ca", "message": "remove debug", "committedDate": "2020-03-17T07:57:22Z", "type": "commit"}, {"oid": "48369bc86980cc2e334fddbb268c7523d428c039", "url": "https://github.com/microsoft/mssql-jdbc/commit/48369bc86980cc2e334fddbb268c7523d428c039", "message": "AE connectionstring", "committedDate": "2020-03-17T08:03:08Z", "type": "commit"}, {"oid": "7a43bfdf46be6db7d7e438fa2989954286589ad5", "url": "https://github.com/microsoft/mssql-jdbc/commit/7a43bfdf46be6db7d7e438fa2989954286589ad5", "message": "more tests", "committedDate": "2020-03-17T08:23:48Z", "type": "commit"}, {"oid": "c2120a3bb8c7a0168557cc971ae1210446bba021", "url": "https://github.com/microsoft/mssql-jdbc/commit/c2120a3bb8c7a0168557cc971ae1210446bba021", "message": "more tests", "committedDate": "2020-03-17T08:28:11Z", "type": "commit"}, {"oid": "6dad2e47a5a783977e05bda542d03a322e7d205a", "url": "https://github.com/microsoft/mssql-jdbc/commit/6dad2e47a5a783977e05bda542d03a322e7d205a", "message": "more tests", "committedDate": "2020-03-17T08:34:18Z", "type": "commit"}, {"oid": "564350d7971b619c59791292ceaf5eb55e63e0ab", "url": "https://github.com/microsoft/mssql-jdbc/commit/564350d7971b619c59791292ceaf5eb55e63e0ab", "message": "fixed typo", "committedDate": "2020-03-17T08:44:45Z", "type": "commit"}, {"oid": "855b71babeef78a6398afa9779c7b5d3e381df9b", "url": "https://github.com/microsoft/mssql-jdbc/commit/855b71babeef78a6398afa9779c7b5d3e381df9b", "message": "updated tests", "committedDate": "2020-03-18T01:32:36Z", "type": "commit"}, {"oid": "355729ebebd9aa78efeaeea035f0e91c47e8cdab", "url": "https://github.com/microsoft/mssql-jdbc/commit/355729ebebd9aa78efeaeea035f0e91c47e8cdab", "message": "null check", "committedDate": "2020-03-18T01:43:49Z", "type": "commit"}, {"oid": "6ee6aa2f70d2fa089ad7c8f395c86e1b2a660ba4", "url": "https://github.com/microsoft/mssql-jdbc/commit/6ee6aa2f70d2fa089ad7c8f395c86e1b2a660ba4", "message": "javadoc", "committedDate": "2020-03-18T01:59:36Z", "type": "commit"}, {"oid": "ee800b090cabdf974f7c03cb1990f8872075ffc6", "url": "https://github.com/microsoft/mssql-jdbc/commit/ee800b090cabdf974f7c03cb1990f8872075ffc6", "message": "exclude MSI tests by default", "committedDate": "2020-03-18T07:02:52Z", "type": "commit"}, {"oid": "ca1d9d5b3fc82fc70715e33d77bd55d245617f46", "url": "https://github.com/microsoft/mssql-jdbc/commit/ca1d9d5b3fc82fc70715e33d77bd55d245617f46", "message": "formatting", "committedDate": "2020-03-18T07:48:02Z", "type": "commit"}, {"oid": "14b6efc6138ec631d2c237aaeb2b2f463a0c984e", "url": "https://github.com/microsoft/mssql-jdbc/commit/14b6efc6138ec631d2c237aaeb2b2f463a0c984e", "message": "merged conflicts", "committedDate": "2020-03-19T19:59:58Z", "type": "commit"}, {"oid": "604fcc3ff454df209e78657dc5418519f83a7a1e", "url": "https://github.com/microsoft/mssql-jdbc/commit/604fcc3ff454df209e78657dc5418519f83a7a1e", "message": "renamed", "committedDate": "2020-03-23T19:17:29Z", "type": "commit"}, {"oid": "7e69b3572a523405912f0f0e038a3bb10baf1023", "url": "https://github.com/microsoft/mssql-jdbc/commit/7e69b3572a523405912f0f0e038a3bb10baf1023", "message": "unreg all providers", "committedDate": "2020-03-23T20:19:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r396880167", "body": "Why are we wrapping the exception into a RuntimeException here? Shouldn't we wrap the exception into a SQLServerException instead?", "bodyText": "Why are we wrapping the exception into a RuntimeException here? Shouldn't we wrap the exception into a SQLServerException instead?", "bodyHTML": "<p dir=\"auto\">Why are we wrapping the exception into a RuntimeException here? Shouldn't we wrap the exception into a SQLServerException instead?</p>", "author": "peterbae", "createdAt": "2020-03-24T03:15:10Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java", "diffHunk": "@@ -37,11 +55,19 @@\n     }\n \n     public String doAuthenticate(String authorization, String resource, String scope) {\n-        String accessToken;\n+        String accessToken = null;\n         if (null == authenticationCallback) {\n-            AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId,\n-                    clientKey);\n-            accessToken = token.getAccessToken();\n+            if (null != msiCred) {\n+                try {\n+                    accessToken = msiCred.getToken(resource);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);", "originalCommit": "7e69b3572a523405912f0f0e038a3bb10baf1023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1ODQxMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r397358411", "bodyText": "should we? I used RuntimeException to be consistent with what we're currently doing already.  getAccessTokenFromClientCredentials throws RuntimeException which just gets passed up to the caller here", "author": "lilgreenbird", "createdAt": "2020-03-24T18:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3MDAzMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r397370031", "bodyText": "ok, I see that it's being done in the other method as well...but I think we usually wrap any exception into SQLServerException. But I'm ok with following the previous code.", "author": "peterbae", "createdAt": "2020-03-24T18:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a578f1ede3074e1413711f28cdef5a894e49821b", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\nindex de77eb29..352fa0cd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n", "chunk": "@@ -55,14 +65,11 @@ class KeyVaultCredential extends KeyVaultCredentials {\n     }\n \n     public String doAuthenticate(String authorization, String resource, String scope) {\n-        String accessToken = null;\n         if (null == authenticationCallback) {\n-            if (null != msiCred) {\n-                try {\n-                    accessToken = msiCred.getToken(resource);\n-                } catch (IOException e) {\n-                    throw new RuntimeException(e);\n-                }\n+            if (null != miCred) {\n+                miCred.getToken(new TokenRequestContext().addScopes(resource)).subscribe(token -> {\n+                    accessToken = token.getToken();\n+                });\n             } else {\n                 AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId,\n                         clientKey);\n", "next_change": {"commit": "70b6a3c1912a003a22a538f72a3be93070e96e99", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\nindex 352fa0cd..8aef1d38 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n", "chunk": "@@ -65,11 +44,15 @@ class KeyVaultCredential extends KeyVaultCredentials {\n     }\n \n     public String doAuthenticate(String authorization, String resource, String scope) {\n+        String accessToken = null;\n         if (null == authenticationCallback) {\n-            if (null != miCred) {\n-                miCred.getToken(new TokenRequestContext().addScopes(resource)).subscribe(token -> {\n-                    accessToken = token.getToken();\n-                });\n+            if (null == clientKey) {\n+                try {\n+                    SqlFedAuthToken token = SQLServerSecurityUtility.getMSIAuthToken(resource, clientId);\n+                    accessToken = (null != token) ? token.accessToken : null;\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n             } else {\n                 AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId,\n                         clientKey);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\nindex de77eb29..ca4f21f6 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n", "chunk": "@@ -57,10 +45,11 @@ class KeyVaultCredential extends KeyVaultCredentials {\n     public String doAuthenticate(String authorization, String resource, String scope) {\n         String accessToken = null;\n         if (null == authenticationCallback) {\n-            if (null != msiCred) {\n+            if (null == clientKey) {\n                 try {\n-                    accessToken = msiCred.getToken(resource);\n-                } catch (IOException e) {\n+                    SqlFedAuthToken token = SQLServerSecurityUtility.getMSIAuthToken(resource, clientId);\n+                    accessToken = (null != token) ? token.accessToken : null;\n+                } catch (Exception e) {\n                     throw new RuntimeException(e);\n                 }\n             } else {\n", "next_change": {"commit": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java b/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\ndeleted file mode 100644\nindex ca4f21f6..00000000\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java\n+++ /dev/null\n", "chunk": "@@ -1,90 +0,0 @@\n-/*\n- * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n- * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n- */\n-\n-package com.microsoft.sqlserver.jdbc;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-\n-import com.microsoft.aad.adal4j.AuthenticationContext;\n-import com.microsoft.aad.adal4j.AuthenticationResult;\n-import com.microsoft.aad.adal4j.ClientCredential;\n-import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;\n-\n-\n-/**\n- * \n- * An implementation of ServiceClientCredentials that supports automatic bearer token refresh.\n- *\n- */\n-class KeyVaultCredential extends KeyVaultCredentials {\n-\n-    SQLServerKeyVaultAuthenticationCallback authenticationCallback = null;\n-    String clientId = null;\n-    String clientKey = null;\n-    String accessToken = null;\n-\n-    KeyVaultCredential(String clientId) throws SQLServerException {\n-        this.clientId = clientId;\n-    }\n-\n-    KeyVaultCredential() {}\n-\n-    KeyVaultCredential(String clientId, String clientKey) {\n-        this.clientId = clientId;\n-        this.clientKey = clientKey;\n-    }\n-\n-    KeyVaultCredential(SQLServerKeyVaultAuthenticationCallback authenticationCallback) {\n-        this.authenticationCallback = authenticationCallback;\n-    }\n-\n-    public String doAuthenticate(String authorization, String resource, String scope) {\n-        String accessToken = null;\n-        if (null == authenticationCallback) {\n-            if (null == clientKey) {\n-                try {\n-                    SqlFedAuthToken token = SQLServerSecurityUtility.getMSIAuthToken(resource, clientId);\n-                    accessToken = (null != token) ? token.accessToken : null;\n-                } catch (Exception e) {\n-                    throw new RuntimeException(e);\n-                }\n-            } else {\n-                AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId,\n-                        clientKey);\n-                accessToken = token.getAccessToken();\n-            }\n-        } else {\n-            accessToken = authenticationCallback.getAccessToken(authorization, resource, scope);\n-        }\n-        return accessToken;\n-    }\n-\n-    private static AuthenticationResult getAccessTokenFromClientCredentials(String authorization, String resource,\n-            String clientId, String clientKey) {\n-        AuthenticationContext context = null;\n-        AuthenticationResult result = null;\n-        ExecutorService service = null;\n-        try {\n-            service = Executors.newFixedThreadPool(1);\n-            context = new AuthenticationContext(authorization, false, service);\n-            ClientCredential credentials = new ClientCredential(clientId, clientKey);\n-            Future<AuthenticationResult> future = context.acquireToken(resource, credentials, null);\n-            result = future.get();\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (null != service) {\n-                service.shutdown();\n-            }\n-        }\n-\n-        if (null == result) {\n-            throw new RuntimeException(\"authentication result was null\");\n-        }\n-        return result;\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}]}, {"oid": "ab43dd760eafc1cae84d060ccb4206e3798a6c9f", "url": "https://github.com/microsoft/mssql-jdbc/commit/ab43dd760eafc1cae84d060ccb4206e3798a6c9f", "message": "fixed prop names", "committedDate": "2020-03-24T05:38:05Z", "type": "commit"}, {"oid": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "url": "https://github.com/microsoft/mssql-jdbc/commit/7e662fe741ae99b5c629bdcbab04d691f86c03ab", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-25T19:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDg4OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398180889", "body": "Add license header", "bodyText": "Add license header", "bodyHTML": "<p dir=\"auto\">Add license header</p>", "author": "peterbae", "createdAt": "2020-03-25T21:28:01Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54832b81645c811844ff2ea117fbc567c7c417fa", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b354060a..85316d42 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -1,3 +1,7 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.fail;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b354060a..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -1,3 +1,7 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.fail;\n", "next_change": {"commit": "947b537df005666c768ba19ed6fb776b68a490de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..552ef201 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -5,6 +5,7 @@\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n", "next_change": {"commit": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 552ef201..7688b098 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -7,6 +7,7 @@ package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import com.microsoft.aad.msal4j.MsalServiceException;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n", "next_change": {"commit": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 7688b098..306e23e0 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -7,7 +7,6 @@ package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import com.microsoft.aad.msal4j.MsalServiceException;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 306e23e0..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -7,16 +7,25 @@ package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n \n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.runner.RunWith;\n \n+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionAzureKeyVaultProvider;\n+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionKeyStoreProvider;\n import com.microsoft.sqlserver.jdbc.SQLServerConnection;\n import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\n import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDEwNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398224106", "body": "put license header here", "bodyText": "put license header here", "bodyHTML": "<p dir=\"auto\">put license header here</p>", "author": "peterbae", "createdAt": "2020-03-25T23:06:19Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54832b81645c811844ff2ea117fbc567c7c417fa", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\nindex dc704249..8ef5b6aa 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\n", "chunk": "@@ -1,3 +1,7 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\nindex dc704249..8ef5b6aa 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java\n", "chunk": "@@ -1,3 +1,7 @@\n+/*\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\n+ */\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n", "next_change": null}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTg3MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398225871", "body": "needs @Test tag", "bodyText": "needs @test tag", "bodyHTML": "<p dir=\"auto\">needs <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/test/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/test\">@test</a> tag</p>", "author": "peterbae", "createdAt": "2020-03-25T23:11:03Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\r\n+                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_PRINCIPALID,\r\n+                keyStorePrincipalId);\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_SECRET,\r\n+                keyStoreSecret);\r\n+        testCharAkv();\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    public void testCharAkvWithMSI() throws SQLException {\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54832b81645c811844ff2ea117fbc567c7c417fa", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b354060a..85316d42 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -74,6 +78,7 @@ public class MSITest extends AESetup {\n     /*\n      * Test AKV with MSI\n      */\n+    @Test\n     public void testCharAkvWithMSI() throws SQLException {\n         // unregister the custom providers registered in AESetup\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n", "next_change": {"commit": "34784c7625f98e573d680690d2a2ea40939d0063", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 85316d42..421cf787 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -84,9 +82,10 @@ public class MSITest extends AESetup {\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n         // set to use Managed Identity for keystore auth\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\n-                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultManagedIdentity\");\n-        testCharAkv();\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        testCharAkv(connStr);\n     }\n \n     /*\n", "next_change": {"commit": "70b6a3c1912a003a22a538f72a3be93070e96e99", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 421cf787..e60611a6 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -88,6 +90,27 @@ public class MSITest extends AESetup {\n         testCharAkv(connStr);\n     }\n \n+    /*\n+     * Test AKV with with bad credentials\n+     */\n+    @Test\n+    public void testNumericAkvWithBadCred() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        // add credentials to connection string\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, \"bad\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, \"bad\");\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assert (e.getMessage().contains(\"AuthenticationException\"));\n+        }\n+    }\n+\n     /*\n      * Test AKV with with credentials\n      */\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b354060a..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -62,26 +152,63 @@ public class MSITest extends AESetup {\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n         // add credentials to connection string\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\n-                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_PRINCIPALID,\n-                keyStorePrincipalId);\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_SECRET,\n-                keyStoreSecret);\n-        testCharAkv();\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\n+        testCharAkv(connStr);\n     }\n \n     /*\n      * Test AKV with MSI\n      */\n+    @Test\n     public void testCharAkvWithMSI() throws SQLException {\n         // unregister the custom providers registered in AESetup\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n         // set to use Managed Identity for keystore auth\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\n-                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultManagedIdentity\");\n-        testCharAkv();\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        testCharAkv(connStr);\n+    }\n+\n+    /*\n+     * Test AKV with MSI and and principal id\n+     */\n+    @Test\n+    public void testCharAkvWithMSIandPrincipalId() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        // set to use Managed Identity for keystore auth and principal id\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        testCharAkv(connStr);\n+    }\n+\n+    /*\n+     * Test AKV with with bad credentials\n+     */\n+    @Test\n+    public void testNumericAkvWithBadCred() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        // add credentials to connection string\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, \"bad\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, \"bad\");\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assert (e.getMessage().contains(\"AuthenticationException\"));\n+        }\n     }\n \n     /*\n", "next_change": {"commit": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..7688b098 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -207,7 +300,8 @@ public class MSITest extends AESetup {\n             testNumericAKV(connStr);\n             fail(TestResource.getResource(\"R_expectedFailPassed\"));\n         } catch (Exception e) {\n-            assert (e.getMessage().contains(\"AuthenticationException\"));\n+            // https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n+            assertTrue(e.getMessage().contains(\"AADSTS700016\"));\n         }\n     }\n \n", "next_change": {"commit": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 7688b098..306e23e0 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -301,7 +303,7 @@ public class MSITest extends AESetup {\n             fail(TestResource.getResource(\"R_expectedFailPassed\"));\n         } catch (Exception e) {\n             // https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n-            assertTrue(e.getMessage().contains(\"AADSTS700016\"));\n+            assertTrue(e.getMessage().contains(\"AADSTS700016\"), e.getMessage());\n         }\n     }\n \n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 306e23e0..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -312,9 +279,6 @@ public class MSITest extends AESetup {\n      */\n     @Test\n     public void testNumericAkvWithCred() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         // add credentials to connection string\n         String connStr = AETestConnectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"oid": "54832b81645c811844ff2ea117fbc567c7c417fa", "url": "https://github.com/microsoft/mssql-jdbc/commit/54832b81645c811844ff2ea117fbc567c7c417fa", "message": "review updates", "committedDate": "2020-03-26T06:13:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Njk5Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398956996", "body": "I think currently your testing might not be testing the correct inputs from the user. This AETestConnectionString is a static variable that keeps getting added more parameters as individual tests get executed, resulting in latter tests having the same connection property defined multiple times. You should reset this variable to the base connection string at the beginning of each test run.", "bodyText": "I think currently your testing might not be testing the correct inputs from the user. This AETestConnectionString is a static variable that keeps getting added more parameters as individual tests get executed, resulting in latter tests having the same connection property defined multiple times. You should reset this variable to the base connection string at the beginning of each test run.", "bodyHTML": "<p dir=\"auto\">I think currently your testing might not be testing the correct inputs from the user. This AETestConnectionString is a static variable that keeps getting added more parameters as individual tests get executed, resulting in latter tests having the same connection property defined multiple times. You should reset this variable to the base connection string at the beginning of each test run.</p>", "author": "peterbae", "createdAt": "2020-03-26T23:45:29Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\r", "originalCommit": "54832b81645c811844ff2ea117fbc567c7c417fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34784c7625f98e573d680690d2a2ea40939d0063", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 85316d42..421cf787 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -66,13 +66,11 @@ public class MSITest extends AESetup {\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n         // add credentials to connection string\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\n-                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_PRINCIPALID,\n-                keyStorePrincipalId);\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_SECRET,\n-                keyStoreSecret);\n-        testCharAkv();\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\n+        testCharAkv(connStr);\n     }\n \n     /*\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 85316d42..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -66,13 +152,11 @@ public class MSITest extends AESetup {\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n         // add credentials to connection string\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\n-                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_PRINCIPALID,\n-                keyStorePrincipalId);\n-        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_SECRET,\n-                keyStoreSecret);\n-        testCharAkv();\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\n+        testCharAkv(connStr);\n     }\n \n     /*\n", "next_change": {"commit": "947b537df005666c768ba19ed6fb776b68a490de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..552ef201 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -159,6 +160,21 @@ public class MSITest extends AESetup {\n         testCharAkv(connStr);\n     }\n \n+    /*\n+     * Test AKV with with credentials using deprecated properties\n+     */\n+    @Test\n+    public void testCharAkvWithCredDeprecated() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        // add deprecated connection properties\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYVAULTPROVIDER_CLIENTID, keyStorePrincipalId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYVAULTPROVIDER_CLIENTKEY, keyStoreSecret);\n+        testCharAkv(connStr);\n+    }\n+\n     /*\n      * Test AKV with MSI\n      */\n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 552ef201..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -180,9 +168,6 @@ public class MSITest extends AESetup {\n      */\n     @Test\n     public void testCharAkvWithMSI() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         // set to use Managed Identity for keystore auth\n         String connStr = AETestConnectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"oid": "34784c7625f98e573d680690d2a2ea40939d0063", "url": "https://github.com/microsoft/mssql-jdbc/commit/34784c7625f98e573d680690d2a2ea40939d0063", "message": "review update", "committedDate": "2020-03-27T00:46:09Z", "type": "commit"}, {"oid": "a578f1ede3074e1413711f28cdef5a894e49821b", "url": "https://github.com/microsoft/mssql-jdbc/commit/a578f1ede3074e1413711f28cdef5a894e49821b", "message": "migrate to azure-identity", "committedDate": "2020-03-28T04:38:10Z", "type": "commit"}, {"oid": "5392cc358a266e96a12940ef0e41631d4ef1f557", "url": "https://github.com/microsoft/mssql-jdbc/commit/5392cc358a266e96a12940ef0e41631d4ef1f557", "message": "remove debug lines", "committedDate": "2020-03-28T04:48:35Z", "type": "commit"}, {"oid": "942adcc154cc53dcb99a9065d400a28b625add39", "url": "https://github.com/microsoft/mssql-jdbc/commit/942adcc154cc53dcb99a9065d400a28b625add39", "message": "removed unused", "committedDate": "2020-03-28T05:05:35Z", "type": "commit"}, {"oid": "d14f398f955e27214a5665150be2f7b20905609d", "url": "https://github.com/microsoft/mssql-jdbc/commit/d14f398f955e27214a5665150be2f7b20905609d", "message": "merged with client auth", "committedDate": "2020-03-28T05:42:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczMDAxNQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r399730015", "body": "Aren't you adding 2 new connection properties?", "bodyText": "Aren't you adding 2 new connection properties?", "bodyHTML": "<p dir=\"auto\">Aren't you adding 2 new connection properties?</p>", "author": "ulvii", "createdAt": "2020-03-29T01:14:55Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**", "originalCommit": "d14f398f955e27214a5665150be2f7b20905609d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MTIzNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r399941234", "bodyText": "not anymore, latest discussion with Jakub we're aligning with ODBC so using keyStorePrincipalId (new) and keyStoreSecret (existing)", "author": "lilgreenbird", "createdAt": "2020-03-30T05:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczMDAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "49224f57565a52cb69c0e6ed464205019f4df652", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..bee58181 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +822,17 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the Azure Active Directory Application Client ID.\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     * @param keyStorePrincipalId\n+     *        Azure Active Directory Application Client ID.\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..af5d6d23 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +852,21 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex af5d6d23..f6104c6d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -834,161 +804,35 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n-\n-    /**\n-     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n-     * \n-     * @param msiClientId\n-     *        Client ID of User Assigned Managed Identity\n-     */\n-    void setMSIClientId(String msiClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'msiClientId'.\n-     * \n-     * @return msiClientId property value\n-     */\n-    String getMSIClientId();\n-\n-    /**\n-     * Sets the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @param keyStorePrincipalId\n-     * \n-     *        <pre>\n-     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n-     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n-     *        </pre>\n-     */\n-    void setKeyStorePrincipalId(String keyStorePrincipalId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @return keyStorePrincipalId\n-     */\n-    String getKeyStorePrincipalId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientId\n-     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyVaultProviderClientId'.\n-     * \n-     * @return keyVaultProviderClientId\n-     */\n-    String getKeyVaultProviderClientId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientKey\n-     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n-\n-    /**\n-     * Returns the value for the connection property 'domain'.\n-     * \n-     * @return 'domain' property value\n-     */\n-    String getDomain();\n+    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the 'domain' connection property used for NTLM Authentication.\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n      *\n-     * @param domain\n-     *        Windows domain name\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setDomain(String domain);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the current flag value for useFmtOnly.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n      *\n-     * @return 'useFmtOnly' property value.\n+     * @return maximum number of attempts\n      */\n-    boolean getUseFmtOnly();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Specifies the flag to use FMTONLY for parameter metadata queries.\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n      *\n-     * @param useFmtOnly\n-     *        boolean value for 'useFmtOnly'.\n-     */\n-    void setUseFmtOnly(boolean useFmtOnly);\n-\n-    /**\n-     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return enclave attestation URL.\n-     */\n-    String getEnclaveAttestationUrl();\n-\n-    /**\n-     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param url\n-     *        Enclave attestation URL.\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setEnclaveAttestationUrl(String url);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return Enclave attestation protocol.\n-     */\n-    String getEnclaveAttestationProtocol();\n-\n-    /**\n-     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param protocol\n-     *        Enclave attestation protocol.\n-     */\n-    void setEnclaveAttestationProtocol(String protocol);\n-\n-    /**\n-     * Returns client certificate path for client certificate authentication.\n-     * \n-     * @return Client certificate path.\n-     */\n-    String getClientCertificate();\n-\n-    /**\n-     * Sets client certificate path for client certificate authentication.\n-     * \n-     * @param certPath\n-     *        Client certificate path.\n-     */\n-    void setClientCertificate(String certPath);\n-\n-    /**\n-     * Returns Private key file path for client certificate authentication.\n-     * \n-     * @return Private key file path.\n-     */\n-    String getClientKey();\n-\n-    /**\n-     * Sets Private key file path for client certificate authentication.\n-     * \n-     * @param keyPath\n-     *        Private key file path.\n-     */\n-    void setClientKey(String keyPath);\n-\n-    /**\n-     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n-     * \n-     * @param password\n-     *        Private key password.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    void setClientKeyPassword(String password);\n-\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex f6104c6d..6e401075 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -804,35 +834,176 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n+    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the maximum number of attempts to reestablish a broken connection.\n-     *\n-     * @param connectRetryCount\n-     *        maximum number of attempts\n+     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n+     * \n+     * @param msiClientId\n+     *        Client ID of User Assigned Managed Identity\n+     */\n+    void setMSIClientId(String msiClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'msiClientId'.\n+     * \n+     * @return msiClientId property value\n+     */\n+    String getMSIClientId();\n+\n+    /**\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n+     */\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @return keyStorePrincipalId\n+     */\n+    String getKeyStorePrincipalId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientId\n+     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyVaultProviderClientId'.\n+     * \n+     * @return keyVaultProviderClientId\n+     */\n+    String getKeyVaultProviderClientId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientKey\n+     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n+\n+    /**\n+     * Returns the value for the connection property 'domain'.\n+     * \n+     * @return 'domain' property value\n      */\n-    public void setConnectRetryCount(int connectRetryCount);\n+    String getDomain();\n \n     /**\n-     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     * Sets the 'domain' connection property used for NTLM Authentication.\n      *\n-     * @return maximum number of attempts\n+     * @param domain\n+     *        Windows domain name\n      */\n-    public int getConnectRetryCount();\n+    void setDomain(String domain);\n \n     /**\n-     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     * Returns the current flag value for useFmtOnly.\n      *\n-     * @param connectRetryInterval\n-     *        interval in seconds\n+     * @return 'useFmtOnly' property value.\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    boolean getUseFmtOnly();\n \n     /**\n-     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     * Specifies the flag to use FMTONLY for parameter metadata queries.\n      *\n-     * @return interval in seconds\n+     * @param useFmtOnly\n+     *        boolean value for 'useFmtOnly'.\n      */\n-    public int getConnectRetryInterval();\n+    void setUseFmtOnly(boolean useFmtOnly);\n+\n+    /**\n+     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return enclave attestation URL.\n+     */\n+    String getEnclaveAttestationUrl();\n+\n+    /**\n+     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param url\n+     *        Enclave attestation URL.\n+     */\n+    void setEnclaveAttestationUrl(String url);\n+\n+    /**\n+     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return Enclave attestation protocol.\n+     */\n+    String getEnclaveAttestationProtocol();\n+\n+    /**\n+     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param protocol\n+     *        Enclave attestation protocol.\n+     */\n+    void setEnclaveAttestationProtocol(String protocol);\n+\n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+\n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+\n+    /**\n+     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @param password\n+     *        Private key password.\n+     */\n+    void setClientKeyPassword(String password);\n+\n+    /**\n+     * Returns the current flag for value sendTemporalDataTypesAsStringForBulkCopy\n+     * \n+     * @return 'sendTemporalDataTypesAsStringForBulkCopy' property value.\n+     */\n+    boolean getSendTemporalDataTypesAsStringForBulkCopy();\n+\n+    /**\n+     * Specifies the flag to send temporal datatypes as String for Bulk Copy.\n+     * \n+     * @param sendTemporalDataTypesAsStringForBulkCopy\n+     *        boolean value for 'sendTemporalDataTypesAsStringForBulkCopy'.\n+     */\n+    void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n+\n }\n", "next_change": {"commit": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 6e401075..9288d59a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1006,4 +1021,34 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      */\n     void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n \n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalId'.\n+     *\n+     * @return 'AADSecurePrincipalId' property value.\n+     */\n+    String getAADSecurePrincipalId();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalId' connection property used for Active Directory Service Principal authentication.\n+     *\n+     * @param AADSecurePrincipalId\n+     *        Active Directory Service Principal Id.\n+     */\n+    void setAADSecurePrincipalId(String AADSecurePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalSecret'.\n+     *\n+     * @return 'AADSecurePrincipalSecret' property value.\n+     */\n+    String getAADSecurePrincipalSecret();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalSecret' connection property used for Active Directory Service Principal\n+     * authentication.\n+     *\n+     * @param AADSecurePrincipalSecret\n+     *        Active Directory Service Principal secret.\n+     */\n+    void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n }\n", "next_change": {"commit": "d9909748368af7d2944dab4fa382ee513f2b76f4", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 9288d59a..87152862 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1051,4 +1051,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      *        Active Directory Service Principal secret.\n      */\n     void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n+\n+    /**\n+     * Returns value of 'maxResultBuffer' from Connection String.\n+     *\n+     * @return 'maxResultBuffer' property.\n+     */\n+    String getMaxResultBuffer();\n+\n+    /**\n+     * Specifies value for 'maxResultBuffer' property\n+     *\n+     * @param maxResultBuffer\n+     *        String value for 'maxResultBuffer'\n+     */\n+    void setMaxResultBuffer(String maxResultBuffer);\n }\n", "next_change": {"commit": "af679a5f3754611273caa484fba9867a8e3c777c", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 87152862..1308a5cd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1060,10 +1060,42 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMaxResultBuffer();\n \n     /**\n-     * Specifies value for 'maxResultBuffer' property\n+     * Sets the value for 'maxResultBuffer' property\n      *\n      * @param maxResultBuffer\n      *        String value for 'maxResultBuffer'\n      */\n     void setMaxResultBuffer(String maxResultBuffer);\n+\n+    /**\n+     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n+     * failure\n+     * \n+     * @param count\n+     *        the number of reconnection attempts if there is a connection failure\n+     */\n+    void setConnectRetryCount(int count);\n+\n+    /**\n+     * Returns the value of 'connectRetryCount' property\n+     * \n+     * @return 'connectRetryCount' property.\n+     */\n+    int getConnectRetryCount();\n+\n+    /**\n+     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n+     * attempt\n+     * \n+     * @param interval\n+     *        the number of seconds between each connection retry attempt\n+     */\n+    void setConnectRetryInterval(int interval);\n+\n+    /**\n+     * Returns the value of 'connectRetryInterval' property\n+     * \n+     * @return 'connectRetryInterval' property.\n+     */\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 1308a5cd..210bb34b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1068,34 +1099,32 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     void setMaxResultBuffer(String maxResultBuffer);\n \n     /**\n-     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n-     * failure\n-     * \n-     * @param count\n-     *        the number of reconnection attempts if there is a connection failure\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setConnectRetryCount(int count);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the value of 'connectRetryCount' property\n-     * \n-     * @return 'connectRetryCount' property.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     *\n+     * @return maximum number of attempts\n      */\n-    int getConnectRetryCount();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n-     * attempt\n-     * \n-     * @param interval\n-     *        the number of seconds between each connection retry attempt\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setConnectRetryInterval(int interval);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the value of 'connectRetryInterval' property\n-     * \n-     * @return 'connectRetryInterval' property.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    int getConnectRetryInterval();\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "b08500889f68eff2ba740b29c644980398c68003", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 210bb34b..e9f55e9b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1119,12 +1119,12 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param connectRetryInterval\n      *        interval in seconds\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n      * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n      *\n      * @return interval in seconds\n      */\n-    public int getConnectRetryInterval();\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex e9f55e9b..76db4be5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1127,4 +1126,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return interval in seconds\n      */\n     int getConnectRetryInterval();\n+\n+    /**\n+     * Sets the behavior for the prepare method. {@link PrepareMethod}\n+     *\n+     * @param prepareMethod\n+     *        Changes the setting as per description\n+     */\n+    void setPrepareMethod(String prepareMethod);\n+\n+    /**\n+     * Returns the value indicating the prepare method. {@link PrepareMethod}\n+     *\n+     * @return prepare method\n+     */\n+    String getPrepareMethod();\n }\n", "next_change": {"commit": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 76db4be5..c85bbd26 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1141,4 +1206,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return prepare method\n      */\n     String getPrepareMethod();\n+\n+    /**\n+     * Sets time-to-live for the the cached MSI token\n+     *\n+     * @param timeToLive\n+     *        Changes the setting as per description\n+     */\n+    void setMsiTokenCacheTtl(int timeToLive);\n+\n+    /**\n+     * Gets the time-to-live for the the cached MSI token\n+     *\n+     * @return time-to-live for the cached MSI token\n+     */\n+    int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex c85bbd26..19f98695 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1208,17 +1214,16 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getPrepareMethod();\n \n     /**\n-     * Sets time-to-live for the the cached MSI token\n-     *\n-     * @param timeToLive\n-     *        Changes the setting as per description\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method is a no-op for backwards compatibility only.\n      */\n+    @Deprecated\n     void setMsiTokenCacheTtl(int timeToLive);\n \n     /**\n-     * Gets the time-to-live for the the cached MSI token\n-     *\n-     * @return time-to-live for the cached MSI token\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method will always return 0 and is for backwards compatibility only.\n      */\n+    @Deprecated\n     int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 19f98695..a9ba172d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1223,7 +1226,24 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     /**\n      * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n      * This method will always return 0 and is for backwards compatibility only.\n+     *\n+     * @return Method will always return 0.\n      */\n     @Deprecated\n     int getMsiTokenCacheTtl();\n+\n+    /**\n+     * Sets the {@link SQLServerAccessTokenCallback} delegate.\n+     *\n+     * @param accessTokenCallback\n+     *        Access token callback delegate.\n+     */\n+    void setAccessTokenCallback(SQLServerAccessTokenCallback accessTokenCallback);\n+\n+    /**\n+     * Returns a {@link SQLServerAccessTokenCallback}, the access token callback delegate.\n+     *\n+     * @return Access token callback delegate.\n+     */\n+    SQLServerAccessTokenCallback getAccessTokenCallback();\n }\n", "next_change": {"commit": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex a9ba172d..a435666e 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1246,4 +1268,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return Access token callback delegate.\n      */\n     SQLServerAccessTokenCallback getAccessTokenCallback();\n+\n+    /**\n+     * Returns the fully qualified class name of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @return accessTokenCallbackClass\n+     */\n+    String getAccessTokenCallbackClass();\n+\n+    /**\n+     * Sets 'accessTokenCallbackClass' to the fully qualified class name\n+     * of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @param accessTokenCallbackClass\n+     */\n+    void setAccessTokenCallbackClass(String accessTokenCallbackClass);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "af679a5f3754611273caa484fba9867a8e3c777c", "committedDate": "2021-03-26 11:23:38 -0700", "message": "Added connectRetryCount and connectRetryInterval to SQLServerDatasource (#1546)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "fb15da6ed2b8e9c754f23a17d1c7fcd5a4611f2f", "committedDate": "2021-06-04 16:19:00 -0700", "message": "Add optional realm connection string property for Kerberos authentication (#1581)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "21bdb7aad2830f7a1886baae5420ebdc3eea4d3b", "committedDate": "2021-11-03 11:46:28 -0700", "message": "Many code review fixes"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "ecb0ecc06d64118de580aaba2e21a0f09a94c5c1", "committedDate": "2022-05-30 14:34:11 -0700", "message": "fixed typo (#1838)"}, {"oid": "62ac085563aa263415b5ac0db5cf178ba19d2d63", "committedDate": "2022-05-31 00:34:30 -0700", "message": "Fixed javadocs (#1840)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}]}, {"oid": "70b6a3c1912a003a22a538f72a3be93070e96e99", "url": "https://github.com/microsoft/mssql-jdbc/commit/70b6a3c1912a003a22a538f72a3be93070e96e99", "message": "removed azure-identities dependency", "committedDate": "2020-03-31T00:24:38Z", "type": "commit"}, {"oid": "8b7e3a9f01edc2b9995711222f1f5ec5a0f041cb", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b7e3a9f01edc2b9995711222f1f5ec5a0f041cb", "message": "missed 1 file", "committedDate": "2020-03-31T00:28:22Z", "type": "commit"}, {"oid": "8c56ba6185c746fe03e057e1cc631123dd006e7f", "url": "https://github.com/microsoft/mssql-jdbc/commit/8c56ba6185c746fe03e057e1cc631123dd006e7f", "message": "merged conflicts", "committedDate": "2020-03-31T00:30:38Z", "type": "commit"}, {"oid": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "url": "https://github.com/microsoft/mssql-jdbc/commit/ff179c14be160f612d70e3102c4a4ed8e85dd628", "message": "updated", "committedDate": "2020-03-31T00:36:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NjE4Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r400576182", "body": "This is not necessarily AKV user principal ID. Please align the docs with [ODBC connection property documentation.](https://docs.microsoft.com/en-us/sql/connect/odbc/using-always-encrypted-with-the-odbc-driver?view=sql-server-ver15#using-the-azure-key-vault-provider)", "bodyText": "This is not necessarily AKV user principal ID. Please align the docs with ODBC connection property documentation.", "bodyHTML": "<p dir=\"auto\">This is not necessarily AKV user principal ID. Please align the docs with <a href=\"https://docs.microsoft.com/en-us/sql/connect/odbc/using-always-encrypted-with-the-odbc-driver?view=sql-server-ver15#using-the-azure-key-vault-provider\" rel=\"nofollow\">ODBC connection property documentation.</a></p>", "author": "ulvii", "createdAt": "2020-03-31T00:39:46Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider user principal id.", "originalCommit": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49224f57565a52cb69c0e6ed464205019f4df652", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..bee58181 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +822,17 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the Azure Active Directory Application Client ID.\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     * @param keyStorePrincipalId\n+     *        Azure Active Directory Application Client ID.\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..af5d6d23 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +852,21 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex af5d6d23..f6104c6d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -834,161 +804,35 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n-\n-    /**\n-     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n-     * \n-     * @param msiClientId\n-     *        Client ID of User Assigned Managed Identity\n-     */\n-    void setMSIClientId(String msiClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'msiClientId'.\n-     * \n-     * @return msiClientId property value\n-     */\n-    String getMSIClientId();\n-\n-    /**\n-     * Sets the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @param keyStorePrincipalId\n-     * \n-     *        <pre>\n-     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n-     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n-     *        </pre>\n-     */\n-    void setKeyStorePrincipalId(String keyStorePrincipalId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @return keyStorePrincipalId\n-     */\n-    String getKeyStorePrincipalId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientId\n-     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyVaultProviderClientId'.\n-     * \n-     * @return keyVaultProviderClientId\n-     */\n-    String getKeyVaultProviderClientId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientKey\n-     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n-\n-    /**\n-     * Returns the value for the connection property 'domain'.\n-     * \n-     * @return 'domain' property value\n-     */\n-    String getDomain();\n+    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the 'domain' connection property used for NTLM Authentication.\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n      *\n-     * @param domain\n-     *        Windows domain name\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setDomain(String domain);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the current flag value for useFmtOnly.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n      *\n-     * @return 'useFmtOnly' property value.\n+     * @return maximum number of attempts\n      */\n-    boolean getUseFmtOnly();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Specifies the flag to use FMTONLY for parameter metadata queries.\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n      *\n-     * @param useFmtOnly\n-     *        boolean value for 'useFmtOnly'.\n-     */\n-    void setUseFmtOnly(boolean useFmtOnly);\n-\n-    /**\n-     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return enclave attestation URL.\n-     */\n-    String getEnclaveAttestationUrl();\n-\n-    /**\n-     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param url\n-     *        Enclave attestation URL.\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setEnclaveAttestationUrl(String url);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return Enclave attestation protocol.\n-     */\n-    String getEnclaveAttestationProtocol();\n-\n-    /**\n-     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param protocol\n-     *        Enclave attestation protocol.\n-     */\n-    void setEnclaveAttestationProtocol(String protocol);\n-\n-    /**\n-     * Returns client certificate path for client certificate authentication.\n-     * \n-     * @return Client certificate path.\n-     */\n-    String getClientCertificate();\n-\n-    /**\n-     * Sets client certificate path for client certificate authentication.\n-     * \n-     * @param certPath\n-     *        Client certificate path.\n-     */\n-    void setClientCertificate(String certPath);\n-\n-    /**\n-     * Returns Private key file path for client certificate authentication.\n-     * \n-     * @return Private key file path.\n-     */\n-    String getClientKey();\n-\n-    /**\n-     * Sets Private key file path for client certificate authentication.\n-     * \n-     * @param keyPath\n-     *        Private key file path.\n-     */\n-    void setClientKey(String keyPath);\n-\n-    /**\n-     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n-     * \n-     * @param password\n-     *        Private key password.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    void setClientKeyPassword(String password);\n-\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex f6104c6d..6e401075 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -804,35 +834,176 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n+    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the maximum number of attempts to reestablish a broken connection.\n-     *\n-     * @param connectRetryCount\n-     *        maximum number of attempts\n+     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n+     * \n+     * @param msiClientId\n+     *        Client ID of User Assigned Managed Identity\n+     */\n+    void setMSIClientId(String msiClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'msiClientId'.\n+     * \n+     * @return msiClientId property value\n+     */\n+    String getMSIClientId();\n+\n+    /**\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n+     */\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @return keyStorePrincipalId\n+     */\n+    String getKeyStorePrincipalId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientId\n+     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyVaultProviderClientId'.\n+     * \n+     * @return keyVaultProviderClientId\n+     */\n+    String getKeyVaultProviderClientId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientKey\n+     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n+\n+    /**\n+     * Returns the value for the connection property 'domain'.\n+     * \n+     * @return 'domain' property value\n      */\n-    public void setConnectRetryCount(int connectRetryCount);\n+    String getDomain();\n \n     /**\n-     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     * Sets the 'domain' connection property used for NTLM Authentication.\n      *\n-     * @return maximum number of attempts\n+     * @param domain\n+     *        Windows domain name\n      */\n-    public int getConnectRetryCount();\n+    void setDomain(String domain);\n \n     /**\n-     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     * Returns the current flag value for useFmtOnly.\n      *\n-     * @param connectRetryInterval\n-     *        interval in seconds\n+     * @return 'useFmtOnly' property value.\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    boolean getUseFmtOnly();\n \n     /**\n-     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     * Specifies the flag to use FMTONLY for parameter metadata queries.\n      *\n-     * @return interval in seconds\n+     * @param useFmtOnly\n+     *        boolean value for 'useFmtOnly'.\n      */\n-    public int getConnectRetryInterval();\n+    void setUseFmtOnly(boolean useFmtOnly);\n+\n+    /**\n+     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return enclave attestation URL.\n+     */\n+    String getEnclaveAttestationUrl();\n+\n+    /**\n+     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param url\n+     *        Enclave attestation URL.\n+     */\n+    void setEnclaveAttestationUrl(String url);\n+\n+    /**\n+     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return Enclave attestation protocol.\n+     */\n+    String getEnclaveAttestationProtocol();\n+\n+    /**\n+     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param protocol\n+     *        Enclave attestation protocol.\n+     */\n+    void setEnclaveAttestationProtocol(String protocol);\n+\n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+\n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+\n+    /**\n+     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @param password\n+     *        Private key password.\n+     */\n+    void setClientKeyPassword(String password);\n+\n+    /**\n+     * Returns the current flag for value sendTemporalDataTypesAsStringForBulkCopy\n+     * \n+     * @return 'sendTemporalDataTypesAsStringForBulkCopy' property value.\n+     */\n+    boolean getSendTemporalDataTypesAsStringForBulkCopy();\n+\n+    /**\n+     * Specifies the flag to send temporal datatypes as String for Bulk Copy.\n+     * \n+     * @param sendTemporalDataTypesAsStringForBulkCopy\n+     *        boolean value for 'sendTemporalDataTypesAsStringForBulkCopy'.\n+     */\n+    void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n+\n }\n", "next_change": {"commit": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 6e401075..9288d59a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1006,4 +1021,34 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      */\n     void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n \n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalId'.\n+     *\n+     * @return 'AADSecurePrincipalId' property value.\n+     */\n+    String getAADSecurePrincipalId();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalId' connection property used for Active Directory Service Principal authentication.\n+     *\n+     * @param AADSecurePrincipalId\n+     *        Active Directory Service Principal Id.\n+     */\n+    void setAADSecurePrincipalId(String AADSecurePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalSecret'.\n+     *\n+     * @return 'AADSecurePrincipalSecret' property value.\n+     */\n+    String getAADSecurePrincipalSecret();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalSecret' connection property used for Active Directory Service Principal\n+     * authentication.\n+     *\n+     * @param AADSecurePrincipalSecret\n+     *        Active Directory Service Principal secret.\n+     */\n+    void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n }\n", "next_change": {"commit": "d9909748368af7d2944dab4fa382ee513f2b76f4", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 9288d59a..87152862 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1051,4 +1051,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      *        Active Directory Service Principal secret.\n      */\n     void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n+\n+    /**\n+     * Returns value of 'maxResultBuffer' from Connection String.\n+     *\n+     * @return 'maxResultBuffer' property.\n+     */\n+    String getMaxResultBuffer();\n+\n+    /**\n+     * Specifies value for 'maxResultBuffer' property\n+     *\n+     * @param maxResultBuffer\n+     *        String value for 'maxResultBuffer'\n+     */\n+    void setMaxResultBuffer(String maxResultBuffer);\n }\n", "next_change": {"commit": "af679a5f3754611273caa484fba9867a8e3c777c", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 87152862..1308a5cd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1060,10 +1060,42 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMaxResultBuffer();\n \n     /**\n-     * Specifies value for 'maxResultBuffer' property\n+     * Sets the value for 'maxResultBuffer' property\n      *\n      * @param maxResultBuffer\n      *        String value for 'maxResultBuffer'\n      */\n     void setMaxResultBuffer(String maxResultBuffer);\n+\n+    /**\n+     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n+     * failure\n+     * \n+     * @param count\n+     *        the number of reconnection attempts if there is a connection failure\n+     */\n+    void setConnectRetryCount(int count);\n+\n+    /**\n+     * Returns the value of 'connectRetryCount' property\n+     * \n+     * @return 'connectRetryCount' property.\n+     */\n+    int getConnectRetryCount();\n+\n+    /**\n+     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n+     * attempt\n+     * \n+     * @param interval\n+     *        the number of seconds between each connection retry attempt\n+     */\n+    void setConnectRetryInterval(int interval);\n+\n+    /**\n+     * Returns the value of 'connectRetryInterval' property\n+     * \n+     * @return 'connectRetryInterval' property.\n+     */\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 1308a5cd..210bb34b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1068,34 +1099,32 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     void setMaxResultBuffer(String maxResultBuffer);\n \n     /**\n-     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n-     * failure\n-     * \n-     * @param count\n-     *        the number of reconnection attempts if there is a connection failure\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setConnectRetryCount(int count);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the value of 'connectRetryCount' property\n-     * \n-     * @return 'connectRetryCount' property.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     *\n+     * @return maximum number of attempts\n      */\n-    int getConnectRetryCount();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n-     * attempt\n-     * \n-     * @param interval\n-     *        the number of seconds between each connection retry attempt\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setConnectRetryInterval(int interval);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the value of 'connectRetryInterval' property\n-     * \n-     * @return 'connectRetryInterval' property.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    int getConnectRetryInterval();\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "b08500889f68eff2ba740b29c644980398c68003", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 210bb34b..e9f55e9b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1119,12 +1119,12 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param connectRetryInterval\n      *        interval in seconds\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n      * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n      *\n      * @return interval in seconds\n      */\n-    public int getConnectRetryInterval();\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex e9f55e9b..76db4be5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1127,4 +1126,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return interval in seconds\n      */\n     int getConnectRetryInterval();\n+\n+    /**\n+     * Sets the behavior for the prepare method. {@link PrepareMethod}\n+     *\n+     * @param prepareMethod\n+     *        Changes the setting as per description\n+     */\n+    void setPrepareMethod(String prepareMethod);\n+\n+    /**\n+     * Returns the value indicating the prepare method. {@link PrepareMethod}\n+     *\n+     * @return prepare method\n+     */\n+    String getPrepareMethod();\n }\n", "next_change": {"commit": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 76db4be5..c85bbd26 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1141,4 +1206,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return prepare method\n      */\n     String getPrepareMethod();\n+\n+    /**\n+     * Sets time-to-live for the the cached MSI token\n+     *\n+     * @param timeToLive\n+     *        Changes the setting as per description\n+     */\n+    void setMsiTokenCacheTtl(int timeToLive);\n+\n+    /**\n+     * Gets the time-to-live for the the cached MSI token\n+     *\n+     * @return time-to-live for the cached MSI token\n+     */\n+    int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex c85bbd26..19f98695 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1208,17 +1214,16 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getPrepareMethod();\n \n     /**\n-     * Sets time-to-live for the the cached MSI token\n-     *\n-     * @param timeToLive\n-     *        Changes the setting as per description\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method is a no-op for backwards compatibility only.\n      */\n+    @Deprecated\n     void setMsiTokenCacheTtl(int timeToLive);\n \n     /**\n-     * Gets the time-to-live for the the cached MSI token\n-     *\n-     * @return time-to-live for the cached MSI token\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method will always return 0 and is for backwards compatibility only.\n      */\n+    @Deprecated\n     int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 19f98695..a9ba172d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1223,7 +1226,24 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     /**\n      * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n      * This method will always return 0 and is for backwards compatibility only.\n+     *\n+     * @return Method will always return 0.\n      */\n     @Deprecated\n     int getMsiTokenCacheTtl();\n+\n+    /**\n+     * Sets the {@link SQLServerAccessTokenCallback} delegate.\n+     *\n+     * @param accessTokenCallback\n+     *        Access token callback delegate.\n+     */\n+    void setAccessTokenCallback(SQLServerAccessTokenCallback accessTokenCallback);\n+\n+    /**\n+     * Returns a {@link SQLServerAccessTokenCallback}, the access token callback delegate.\n+     *\n+     * @return Access token callback delegate.\n+     */\n+    SQLServerAccessTokenCallback getAccessTokenCallback();\n }\n", "next_change": {"commit": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex a9ba172d..a435666e 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1246,4 +1268,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return Access token callback delegate.\n      */\n     SQLServerAccessTokenCallback getAccessTokenCallback();\n+\n+    /**\n+     * Returns the fully qualified class name of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @return accessTokenCallbackClass\n+     */\n+    String getAccessTokenCallbackClass();\n+\n+    /**\n+     * Sets 'accessTokenCallbackClass' to the fully qualified class name\n+     * of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @param accessTokenCallbackClass\n+     */\n+    void setAccessTokenCallbackClass(String accessTokenCallbackClass);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "af679a5f3754611273caa484fba9867a8e3c777c", "committedDate": "2021-03-26 11:23:38 -0700", "message": "Added connectRetryCount and connectRetryInterval to SQLServerDatasource (#1546)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "fb15da6ed2b8e9c754f23a17d1c7fcd5a4611f2f", "committedDate": "2021-06-04 16:19:00 -0700", "message": "Add optional realm connection string property for Kerberos authentication (#1581)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "21bdb7aad2830f7a1886baae5420ebdc3eea4d3b", "committedDate": "2021-11-03 11:46:28 -0700", "message": "Many code review fixes"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "ecb0ecc06d64118de580aaba2e21a0f09a94c5c1", "committedDate": "2022-05-30 14:34:11 -0700", "message": "fixed typo (#1838)"}, {"oid": "62ac085563aa263415b5ac0db5cf178ba19d2d63", "committedDate": "2022-05-31 00:34:30 -0700", "message": "Fixed javadocs (#1840)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NjIzMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r400576232", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "ulvii", "createdAt": "2020-03-31T00:39:55Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * \n+     * @param keyVaultPrincipalId\n+     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.", "originalCommit": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49224f57565a52cb69c0e6ed464205019f4df652", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..bee58181 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +822,17 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the Azure Active Directory Application Client ID.\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     * @param keyStorePrincipalId\n+     *        Azure Active Directory Application Client ID.\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 49120388..af5d6d23 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,17 +852,21 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n      * \n-     * @param keyVaultPrincipalId\n-     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n      */\n-    void setKeyStorePrincipalId(String keyVaultPrincipalId);\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n     /**\n-     * Returns the value for the connection property 'keyVaultPrincipalId'.\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n      * \n-     * @return keyVaultPrincipalId\n+     * @return keyStorePrincipalId\n      */\n     String getKeyStorePrincipalId();\n \n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex af5d6d23..f6104c6d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -834,161 +804,35 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n-\n-    /**\n-     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n-     * \n-     * @param msiClientId\n-     *        Client ID of User Assigned Managed Identity\n-     */\n-    void setMSIClientId(String msiClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'msiClientId'.\n-     * \n-     * @return msiClientId property value\n-     */\n-    String getMSIClientId();\n-\n-    /**\n-     * Sets the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @param keyStorePrincipalId\n-     * \n-     *        <pre>\n-     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n-     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n-     *        </pre>\n-     */\n-    void setKeyStorePrincipalId(String keyStorePrincipalId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @return keyStorePrincipalId\n-     */\n-    String getKeyStorePrincipalId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientId\n-     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyVaultProviderClientId'.\n-     * \n-     * @return keyVaultProviderClientId\n-     */\n-    String getKeyVaultProviderClientId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientKey\n-     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n-\n-    /**\n-     * Returns the value for the connection property 'domain'.\n-     * \n-     * @return 'domain' property value\n-     */\n-    String getDomain();\n+    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the 'domain' connection property used for NTLM Authentication.\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n      *\n-     * @param domain\n-     *        Windows domain name\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setDomain(String domain);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the current flag value for useFmtOnly.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n      *\n-     * @return 'useFmtOnly' property value.\n+     * @return maximum number of attempts\n      */\n-    boolean getUseFmtOnly();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Specifies the flag to use FMTONLY for parameter metadata queries.\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n      *\n-     * @param useFmtOnly\n-     *        boolean value for 'useFmtOnly'.\n-     */\n-    void setUseFmtOnly(boolean useFmtOnly);\n-\n-    /**\n-     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return enclave attestation URL.\n-     */\n-    String getEnclaveAttestationUrl();\n-\n-    /**\n-     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param url\n-     *        Enclave attestation URL.\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setEnclaveAttestationUrl(String url);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return Enclave attestation protocol.\n-     */\n-    String getEnclaveAttestationProtocol();\n-\n-    /**\n-     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param protocol\n-     *        Enclave attestation protocol.\n-     */\n-    void setEnclaveAttestationProtocol(String protocol);\n-\n-    /**\n-     * Returns client certificate path for client certificate authentication.\n-     * \n-     * @return Client certificate path.\n-     */\n-    String getClientCertificate();\n-\n-    /**\n-     * Sets client certificate path for client certificate authentication.\n-     * \n-     * @param certPath\n-     *        Client certificate path.\n-     */\n-    void setClientCertificate(String certPath);\n-\n-    /**\n-     * Returns Private key file path for client certificate authentication.\n-     * \n-     * @return Private key file path.\n-     */\n-    String getClientKey();\n-\n-    /**\n-     * Sets Private key file path for client certificate authentication.\n-     * \n-     * @param keyPath\n-     *        Private key file path.\n-     */\n-    void setClientKey(String keyPath);\n-\n-    /**\n-     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n-     * \n-     * @param password\n-     *        Private key password.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    void setClientKeyPassword(String password);\n-\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex f6104c6d..6e401075 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -804,35 +834,176 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n+    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the maximum number of attempts to reestablish a broken connection.\n-     *\n-     * @param connectRetryCount\n-     *        maximum number of attempts\n+     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n+     * \n+     * @param msiClientId\n+     *        Client ID of User Assigned Managed Identity\n+     */\n+    void setMSIClientId(String msiClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'msiClientId'.\n+     * \n+     * @return msiClientId property value\n+     */\n+    String getMSIClientId();\n+\n+    /**\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n+     */\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @return keyStorePrincipalId\n+     */\n+    String getKeyStorePrincipalId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientId\n+     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyVaultProviderClientId'.\n+     * \n+     * @return keyVaultProviderClientId\n+     */\n+    String getKeyVaultProviderClientId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientKey\n+     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n+\n+    /**\n+     * Returns the value for the connection property 'domain'.\n+     * \n+     * @return 'domain' property value\n      */\n-    public void setConnectRetryCount(int connectRetryCount);\n+    String getDomain();\n \n     /**\n-     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     * Sets the 'domain' connection property used for NTLM Authentication.\n      *\n-     * @return maximum number of attempts\n+     * @param domain\n+     *        Windows domain name\n      */\n-    public int getConnectRetryCount();\n+    void setDomain(String domain);\n \n     /**\n-     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     * Returns the current flag value for useFmtOnly.\n      *\n-     * @param connectRetryInterval\n-     *        interval in seconds\n+     * @return 'useFmtOnly' property value.\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    boolean getUseFmtOnly();\n \n     /**\n-     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     * Specifies the flag to use FMTONLY for parameter metadata queries.\n      *\n-     * @return interval in seconds\n+     * @param useFmtOnly\n+     *        boolean value for 'useFmtOnly'.\n      */\n-    public int getConnectRetryInterval();\n+    void setUseFmtOnly(boolean useFmtOnly);\n+\n+    /**\n+     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return enclave attestation URL.\n+     */\n+    String getEnclaveAttestationUrl();\n+\n+    /**\n+     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param url\n+     *        Enclave attestation URL.\n+     */\n+    void setEnclaveAttestationUrl(String url);\n+\n+    /**\n+     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return Enclave attestation protocol.\n+     */\n+    String getEnclaveAttestationProtocol();\n+\n+    /**\n+     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param protocol\n+     *        Enclave attestation protocol.\n+     */\n+    void setEnclaveAttestationProtocol(String protocol);\n+\n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+\n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+\n+    /**\n+     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @param password\n+     *        Private key password.\n+     */\n+    void setClientKeyPassword(String password);\n+\n+    /**\n+     * Returns the current flag for value sendTemporalDataTypesAsStringForBulkCopy\n+     * \n+     * @return 'sendTemporalDataTypesAsStringForBulkCopy' property value.\n+     */\n+    boolean getSendTemporalDataTypesAsStringForBulkCopy();\n+\n+    /**\n+     * Specifies the flag to send temporal datatypes as String for Bulk Copy.\n+     * \n+     * @param sendTemporalDataTypesAsStringForBulkCopy\n+     *        boolean value for 'sendTemporalDataTypesAsStringForBulkCopy'.\n+     */\n+    void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n+\n }\n", "next_change": {"commit": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 6e401075..9288d59a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1006,4 +1021,34 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      */\n     void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n \n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalId'.\n+     *\n+     * @return 'AADSecurePrincipalId' property value.\n+     */\n+    String getAADSecurePrincipalId();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalId' connection property used for Active Directory Service Principal authentication.\n+     *\n+     * @param AADSecurePrincipalId\n+     *        Active Directory Service Principal Id.\n+     */\n+    void setAADSecurePrincipalId(String AADSecurePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalSecret'.\n+     *\n+     * @return 'AADSecurePrincipalSecret' property value.\n+     */\n+    String getAADSecurePrincipalSecret();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalSecret' connection property used for Active Directory Service Principal\n+     * authentication.\n+     *\n+     * @param AADSecurePrincipalSecret\n+     *        Active Directory Service Principal secret.\n+     */\n+    void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n }\n", "next_change": {"commit": "d9909748368af7d2944dab4fa382ee513f2b76f4", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 9288d59a..87152862 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1051,4 +1051,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      *        Active Directory Service Principal secret.\n      */\n     void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n+\n+    /**\n+     * Returns value of 'maxResultBuffer' from Connection String.\n+     *\n+     * @return 'maxResultBuffer' property.\n+     */\n+    String getMaxResultBuffer();\n+\n+    /**\n+     * Specifies value for 'maxResultBuffer' property\n+     *\n+     * @param maxResultBuffer\n+     *        String value for 'maxResultBuffer'\n+     */\n+    void setMaxResultBuffer(String maxResultBuffer);\n }\n", "next_change": {"commit": "af679a5f3754611273caa484fba9867a8e3c777c", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 87152862..1308a5cd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1060,10 +1060,42 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMaxResultBuffer();\n \n     /**\n-     * Specifies value for 'maxResultBuffer' property\n+     * Sets the value for 'maxResultBuffer' property\n      *\n      * @param maxResultBuffer\n      *        String value for 'maxResultBuffer'\n      */\n     void setMaxResultBuffer(String maxResultBuffer);\n+\n+    /**\n+     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n+     * failure\n+     * \n+     * @param count\n+     *        the number of reconnection attempts if there is a connection failure\n+     */\n+    void setConnectRetryCount(int count);\n+\n+    /**\n+     * Returns the value of 'connectRetryCount' property\n+     * \n+     * @return 'connectRetryCount' property.\n+     */\n+    int getConnectRetryCount();\n+\n+    /**\n+     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n+     * attempt\n+     * \n+     * @param interval\n+     *        the number of seconds between each connection retry attempt\n+     */\n+    void setConnectRetryInterval(int interval);\n+\n+    /**\n+     * Returns the value of 'connectRetryInterval' property\n+     * \n+     * @return 'connectRetryInterval' property.\n+     */\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 1308a5cd..210bb34b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1068,34 +1099,32 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     void setMaxResultBuffer(String maxResultBuffer);\n \n     /**\n-     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n-     * failure\n-     * \n-     * @param count\n-     *        the number of reconnection attempts if there is a connection failure\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setConnectRetryCount(int count);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the value of 'connectRetryCount' property\n-     * \n-     * @return 'connectRetryCount' property.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     *\n+     * @return maximum number of attempts\n      */\n-    int getConnectRetryCount();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n-     * attempt\n-     * \n-     * @param interval\n-     *        the number of seconds between each connection retry attempt\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setConnectRetryInterval(int interval);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the value of 'connectRetryInterval' property\n-     * \n-     * @return 'connectRetryInterval' property.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    int getConnectRetryInterval();\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "b08500889f68eff2ba740b29c644980398c68003", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 210bb34b..e9f55e9b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1119,12 +1119,12 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param connectRetryInterval\n      *        interval in seconds\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n      * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n      *\n      * @return interval in seconds\n      */\n-    public int getConnectRetryInterval();\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex e9f55e9b..76db4be5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1127,4 +1126,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return interval in seconds\n      */\n     int getConnectRetryInterval();\n+\n+    /**\n+     * Sets the behavior for the prepare method. {@link PrepareMethod}\n+     *\n+     * @param prepareMethod\n+     *        Changes the setting as per description\n+     */\n+    void setPrepareMethod(String prepareMethod);\n+\n+    /**\n+     * Returns the value indicating the prepare method. {@link PrepareMethod}\n+     *\n+     * @return prepare method\n+     */\n+    String getPrepareMethod();\n }\n", "next_change": {"commit": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 76db4be5..c85bbd26 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1141,4 +1206,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return prepare method\n      */\n     String getPrepareMethod();\n+\n+    /**\n+     * Sets time-to-live for the the cached MSI token\n+     *\n+     * @param timeToLive\n+     *        Changes the setting as per description\n+     */\n+    void setMsiTokenCacheTtl(int timeToLive);\n+\n+    /**\n+     * Gets the time-to-live for the the cached MSI token\n+     *\n+     * @return time-to-live for the cached MSI token\n+     */\n+    int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex c85bbd26..19f98695 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1208,17 +1214,16 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getPrepareMethod();\n \n     /**\n-     * Sets time-to-live for the the cached MSI token\n-     *\n-     * @param timeToLive\n-     *        Changes the setting as per description\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method is a no-op for backwards compatibility only.\n      */\n+    @Deprecated\n     void setMsiTokenCacheTtl(int timeToLive);\n \n     /**\n-     * Gets the time-to-live for the the cached MSI token\n-     *\n-     * @return time-to-live for the cached MSI token\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method will always return 0 and is for backwards compatibility only.\n      */\n+    @Deprecated\n     int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 19f98695..a9ba172d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1223,7 +1226,24 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     /**\n      * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n      * This method will always return 0 and is for backwards compatibility only.\n+     *\n+     * @return Method will always return 0.\n      */\n     @Deprecated\n     int getMsiTokenCacheTtl();\n+\n+    /**\n+     * Sets the {@link SQLServerAccessTokenCallback} delegate.\n+     *\n+     * @param accessTokenCallback\n+     *        Access token callback delegate.\n+     */\n+    void setAccessTokenCallback(SQLServerAccessTokenCallback accessTokenCallback);\n+\n+    /**\n+     * Returns a {@link SQLServerAccessTokenCallback}, the access token callback delegate.\n+     *\n+     * @return Access token callback delegate.\n+     */\n+    SQLServerAccessTokenCallback getAccessTokenCallback();\n }\n", "next_change": {"commit": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex a9ba172d..a435666e 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1246,4 +1268,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return Access token callback delegate.\n      */\n     SQLServerAccessTokenCallback getAccessTokenCallback();\n+\n+    /**\n+     * Returns the fully qualified class name of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @return accessTokenCallbackClass\n+     */\n+    String getAccessTokenCallbackClass();\n+\n+    /**\n+     * Sets 'accessTokenCallbackClass' to the fully qualified class name\n+     * of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @param accessTokenCallbackClass\n+     */\n+    void setAccessTokenCallbackClass(String accessTokenCallbackClass);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "af679a5f3754611273caa484fba9867a8e3c777c", "committedDate": "2021-03-26 11:23:38 -0700", "message": "Added connectRetryCount and connectRetryInterval to SQLServerDatasource (#1546)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "fb15da6ed2b8e9c754f23a17d1c7fcd5a4611f2f", "committedDate": "2021-06-04 16:19:00 -0700", "message": "Add optional realm connection string property for Kerberos authentication (#1581)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "21bdb7aad2830f7a1886baae5420ebdc3eea4d3b", "committedDate": "2021-11-03 11:46:28 -0700", "message": "Many code review fixes"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "ecb0ecc06d64118de580aaba2e21a0f09a94c5c1", "committedDate": "2022-05-30 14:34:11 -0700", "message": "fixed typo (#1838)"}, {"oid": "62ac085563aa263415b5ac0db5cf178ba19d2d63", "committedDate": "2022-05-31 00:34:30 -0700", "message": "Fixed javadocs (#1840)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}]}, {"oid": "49224f57565a52cb69c0e6ed464205019f4df652", "url": "https://github.com/microsoft/mssql-jdbc/commit/49224f57565a52cb69c0e6ed464205019f4df652", "message": "comment changes", "committedDate": "2020-03-31T01:20:07Z", "type": "commit"}, {"oid": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "url": "https://github.com/microsoft/mssql-jdbc/commit/2a55d5b70b3dc899ddee573e04564d0ee6647c00", "message": "remove unused", "committedDate": "2020-03-31T01:57:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMjU3Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401032576", "body": "Please do not call class.getName() in logger, it traverses the stack and is extremely costly performance-wise. I also recommend checking the logging level before calling these entering/exiting methods, although I'm not sure if the intent here is to always log. As for the class.getName(), just use a static string, so SQLServerConnection.class.getName() would be \"com.microsoft.sqlserver.jdbc.SQLServerConnection\".", "bodyText": "Please do not call class.getName() in logger, it traverses the stack and is extremely costly performance-wise. I also recommend checking the logging level before calling these entering/exiting methods, although I'm not sure if the intent here is to always log. As for the class.getName(), just use a static string, so SQLServerConnection.class.getName() would be \"com.microsoft.sqlserver.jdbc.SQLServerConnection\".", "bodyHTML": "<p dir=\"auto\">Please do not call class.getName() in logger, it traverses the stack and is extremely costly performance-wise. I also recommend checking the logging level before calling these entering/exiting methods, although I'm not sure if the intent here is to always log. As for the class.getName(), just use a static string, so SQLServerConnection.class.getName() would be \"com.microsoft.sqlserver.jdbc.SQLServerConnection\".</p>", "author": "rene-ye", "createdAt": "2020-03-31T16:03:20Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -720,6 +722,23 @@ public static synchronized void registerColumnEncryptionKeyStoreProviders(\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n+    /**\n+     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     */\n+    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Removing Column Encryption Key Store Provider\");\n+\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+            globalCustomColumnEncryptionKeyStoreProviders.clear();\n+        }\n+\n+        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "795e653ee609c10fc71ed37f08e7174e9b78b87b", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..0c34874a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -717,23 +706,24 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n     /**\n-     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n      */\n     public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n         if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n             globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n                                 .size() : 0));\n", "next_change": {"commit": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 0c34874a..32415ac8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -724,9 +725,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n \n         loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered:\"\n-                        + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n-                                .size() : 0));\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n     synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -717,26 +718,26 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n     /**\n-     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n+     * the map and setting it to null.\n      */\n     public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n         if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n             globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered:\"\n-                        + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n-                                .size() : 0));\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n     synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 3973bfc8..7e6320f2 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -718,37 +659,25 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n-    /**\n-     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n-     * the map and setting it to null.\n-     */\n-    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Removing Column Encryption Key Store Provider\");\n-\n-        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n-            globalCustomColumnEncryptionKeyStoreProviders.clear();\n-            globalCustomColumnEncryptionKeyStoreProviders = null;\n-        }\n-\n-        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered: 0\");\n-    }\n-\n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n+    static synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n             String providerName) {\n-        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        if (null != globalSystemColumnEncryptionKeyStoreProviders\n+                && globalSystemColumnEncryptionKeyStoreProviders.containsKey(providerName)) {\n+            return globalSystemColumnEncryptionKeyStoreProviders.get(providerName);\n+        }\n+        return null;\n     }\n \n-    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n-                .keySet().toString() : null;\n+    static synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders)\n+            return globalCustomColumnEncryptionKeyStoreProviders.keySet().toString();\n+        else\n+            return null;\n     }\n \n     synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n", "next_change": {"commit": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 7e6320f2..e1d12210 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -659,25 +737,37 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n-    static synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        if (null != globalSystemColumnEncryptionKeyStoreProviders\n-                && globalSystemColumnEncryptionKeyStoreProviders.containsKey(providerName)) {\n-            return globalSystemColumnEncryptionKeyStoreProviders.get(providerName);\n+    /**\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n+     * the map and setting it to null.\n+     */\n+    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Removing Column Encryption Key Store Provider\");\n+\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+            globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n-        return null;\n+\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n-    static synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        if (null != globalCustomColumnEncryptionKeyStoreProviders)\n-            return globalCustomColumnEncryptionKeyStoreProviders.keySet().toString();\n-        else\n-            return null;\n+    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n+            String providerName) {\n+        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n+                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    }\n+\n+    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n+                .keySet().toString() : null;\n     }\n \n     synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n", "next_change": {"commit": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..be09b2b4 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -746,80 +992,218 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n      * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n      * the map and setting it to null.\n      */\n-    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+    public static void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(loggingClassNameBase, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n-        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n-            globalCustomColumnEncryptionKeyStoreProviders.clear();\n-            globalCustomColumnEncryptionKeyStoreProviders = null;\n+        LOCK.lock();\n+        try {\n+            if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+                globalCustomColumnEncryptionKeyStoreProviders.clear();\n+                globalCustomColumnEncryptionKeyStoreProviders = null;\n+            }\n+        } finally {\n+            LOCK.unlock();\n         }\n \n-        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassNameBase, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered: 0\");\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders.containsKey(\n+                    providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n-                .keySet().toString() : null;\n+    String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            return (null != globalCustomColumnEncryptionKeyStoreProviders)\n+                    ? globalCustomColumnEncryptionKeyStoreProviders.keySet().toString() : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n-        String keyStores = \"\";\n-        if (0 != systemColumnEncryptionKeyStoreProvider.size())\n-            keyStores = systemColumnEncryptionKeyStoreProvider.keySet().toString();\n-        if (0 != SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.size())\n-            keyStores += \",\" + SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.keySet().toString();\n-        return keyStores;\n+    String getAllSystemColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            String keyStores = \"\";\n+            if (0 != systemColumnEncryptionKeyStoreProvider.size()) {\n+                keyStores = systemColumnEncryptionKeyStoreProvider.keySet().toString();\n+            }\n+            if (0 != SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.size()) {\n+                keyStores += \",\" + SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.keySet()\n+                        .toString();\n+            }\n+            return keyStores;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalCustomColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders && globalCustomColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalCustomColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getGlobalCustomColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != globalCustomColumnEncryptionKeyStoreProviders && globalCustomColumnEncryptionKeyStoreProviders.containsKey(\n+                    providerName)) ? globalCustomColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != systemColumnEncryptionKeyStoreProvider && systemColumnEncryptionKeyStoreProvider\n-                .containsKey(providerName)) ? systemColumnEncryptionKeyStoreProvider.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getSystemColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != systemColumnEncryptionKeyStoreProvider && systemColumnEncryptionKeyStoreProvider.containsKey(\n+                    providerName)) ? systemColumnEncryptionKeyStoreProvider.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getColumnEncryptionKeyStoreProvider(\n+    SQLServerColumnEncryptionKeyStoreProvider getSystemOrGlobalColumnEncryptionKeyStoreProvider(\n             String providerName) throws SQLServerException {\n+        lock.lock();\n+        try {\n+            // check for global system providers\n+            keystoreProvider = getGlobalSystemColumnEncryptionKeyStoreProvider(providerName);\n+\n+            // Check for the connection system provider.\n+            if (null == keystoreProvider) {\n+                keystoreProvider = getSystemColumnEncryptionKeyStoreProvider(providerName);\n+            }\n \n-        // Check for the connection provider first.\n-        keystoreProvider = getSystemColumnEncryptionKeyStoreProvider(providerName);\n+            // There is no global system provider of this name, check for the global custom providers.\n+            if (null == keystoreProvider) {\n+                keystoreProvider = getGlobalCustomColumnEncryptionKeyStoreProvider(providerName);\n+            }\n \n-        // There is no connection provider of this name, check for the global system providers.\n-        if (null == keystoreProvider) {\n-            keystoreProvider = getGlobalSystemColumnEncryptionKeyStoreProvider(providerName);\n+            // No provider was found of this name.\n+            if (null == keystoreProvider) {\n+                String systemProviders = getAllSystemColumnEncryptionKeyStoreProviders();\n+                String customProviders = getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders();\n+                MessageFormat form = new MessageFormat(\n+                        SQLServerException.getErrString(\"R_UnrecognizedKeyStoreProviderName\"));\n+                Object[] msgArgs = {providerName, systemProviders, customProviders};\n+                throw new SQLServerException(form.format(msgArgs), null);\n+            }\n+\n+            return keystoreProvider;\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    boolean hasConnectionColumnEncryptionKeyStoreProvidersRegistered() {\n+        lock.lock();\n+        try {\n+            return null != connectionColumnEncryptionKeyStoreProvider && connectionColumnEncryptionKeyStoreProvider.size() > 0;\n+        } finally {\n+            lock.unlock();\n         }\n+    }\n \n-        // There is no global system provider of this name, check for the global custom providers.\n-        if (null == keystoreProvider) {\n-            keystoreProvider = getGlobalCustomColumnEncryptionKeyStoreProvider(providerName);\n+    String getAllConnectionColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            String keyStores = \"\";\n+            if (0 != connectionColumnEncryptionKeyStoreProvider.size()) {\n+                keyStores = connectionColumnEncryptionKeyStoreProvider.keySet().toString();\n+            }\n+            return keyStores;\n+        } finally {\n+            lock.unlock();\n         }\n+    }\n \n-        // No provider was found of this name.\n-        if (null == keystoreProvider) {\n-            String systemProviders = getAllSystemColumnEncryptionKeyStoreProviders();\n-            String customProviders = getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders();\n-            MessageFormat form = new MessageFormat(\n-                    SQLServerException.getErrString(\"R_UnrecognizedKeyStoreProviderName\"));\n-            Object[] msgArgs = {providerName, systemProviders, customProviders};\n-            throw new SQLServerException(form.format(msgArgs), null);\n+    SQLServerColumnEncryptionKeyStoreProvider getColumnEncryptionKeyStoreProviderOnConnection(\n+            String providerName) throws SQLServerException {\n+        lock.lock();\n+        try {\n+            // Check for a connection-level provider first\n+            if (null != connectionColumnEncryptionKeyStoreProvider\n+                    && connectionColumnEncryptionKeyStoreProvider.size() > 0) {\n+                // If any connection-level providers are registered, we don't fall back to system/global providers\n+                if (connectionColumnEncryptionKeyStoreProvider.containsKey(providerName)) {\n+                    return connectionColumnEncryptionKeyStoreProvider.get(providerName);\n+                } else {\n+                    MessageFormat form = new MessageFormat(\n+                            SQLServerException.getErrString(\"R_UnrecognizedConnectionKeyStoreProviderName\"));\n+                    Object[] msgArgs = {providerName, getAllConnectionColumnEncryptionKeyStoreProviders()};\n+                    throw new SQLServerException(form.format(msgArgs), null);\n+                }\n+            }\n+\n+            // No connection-level providers registered, so return system/global provider\n+            return getSystemOrGlobalColumnEncryptionKeyStoreProvider(providerName);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /** This is a user-defined per-connection store provider. */\n+    Map<String, SQLServerColumnEncryptionKeyStoreProvider> connectionColumnEncryptionKeyStoreProvider = new HashMap<>();\n+\n+    /**\n+     * Registers connection-level key store providers, replacing all existing providers.\n+     *\n+     * @param clientKeyStoreProviders\n+     *         a map containing the store providers information.\n+     * @throws SQLServerException\n+     *         when an error occurs\n+     */\n+    public void registerColumnEncryptionKeyStoreProvidersOnConnection(\n+            Map<String, SQLServerColumnEncryptionKeyStoreProvider> clientKeyStoreProviders) throws SQLServerException {\n+        loggerExternal.entering(loggingClassName, \"registerColumnEncryptionKeyStoreProvidersOnConnection\",\n+                \"Registering Column Encryption Key Store Providers on Connection\");\n+        lock.lock();\n+        try {\n+            if (null == clientKeyStoreProviders) {\n+                throw new SQLServerException(null, SQLServerException.getErrString(\"R_CustomKeyStoreProviderMapNull\"),\n+                        null, 0, false);\n+            }\n+\n+            connectionColumnEncryptionKeyStoreProvider.clear();\n+\n+            for (Map.Entry<String, SQLServerColumnEncryptionKeyStoreProvider> entry : clientKeyStoreProviders.entrySet()) {\n+                String providerName = entry.getKey();\n+                if (null == providerName || 0 == providerName.trim().length()) {\n+                    throw new SQLServerException(null,\n+                            SQLServerException.getErrString(\"R_EmptyCustomKeyStoreProviderName\"), null, 0, false);\n+                }\n+\n+                // MSSQL_CERTIFICATE_STORE not allowed on connection level\n+                if ((providerName.equalsIgnoreCase(WINDOWS_KEY_STORE_NAME))) {\n+                    MessageFormat form = new MessageFormat(\n+                            SQLServerException.getErrString(\"R_InvalidCustomKeyStoreProviderName\"));\n+                    Object[] msgArgs = {providerName, WINDOWS_KEY_STORE_NAME};\n+                    throw new SQLServerException(null, form.format(msgArgs), null, 0, false);\n+                }\n+\n+                if (null == entry.getValue()) {\n+                    throw new SQLServerException(null,\n+                            String.format(SQLServerException.getErrString(\"R_CustomKeyStoreProviderValueNull\"),\n+                                    providerName), null, 0, false);\n+                }\n+\n+                connectionColumnEncryptionKeyStoreProvider.put(entry.getKey(), entry.getValue());\n+            }\n+        } finally {\n+            lock.unlock();\n         }\n \n-        return keystoreProvider;\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProvidersOnConnection\",\n+                \"Number of connection-level Key store providers that are registered: \"\n+                        + connectionColumnEncryptionKeyStoreProvider.size());\n     }\n \n+    /** trusted servername AE */\n     private String trustedServerNameAE = null;\n     private static Map<String, List<String>> columnEncryptionTrustedMasterKeyPaths = new HashMap<>();\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "7e67a2351c64cdb16a1b5faf0ba1feaba0980df7", "committedDate": "2018-10-11 15:12:12 -0700", "message": "Add "}, {"oid": "6618054fad0e2b01efc15bee1686880959cfebbf", "committedDate": "2018-10-12 16:20:12 -0700", "message": "Add "}, {"oid": "98cdc4140f5fce1e0691a386b9f7cb1dc1cacbda", "committedDate": "2018-10-12 16:25:31 -0700", "message": "Fix "}, {"oid": "3e2a2fd8e035b89eae1379f0bac5873e54360045", "committedDate": "2018-10-15 14:35:15 -0700", "message": "Fix "}, {"oid": "5d5f0a66d0d89ede79187d5a062303509b89e986", "committedDate": "2018-10-15 16:56:50 -0700", "message": "Fix "}, {"oid": "a901cbb419731119a12a6729ea38e0fe2c696b89", "committedDate": "2018-10-15 16:57:14 -0700", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "c25833fb18adcbe9bdb180329955784ad6bf35d5", "committedDate": "2018-11-05 10:09:26 -0800", "message": "update from Microsoft/dev"}, {"oid": "70f1fd52b37558a3da52721f765da3bfa7312fca", "committedDate": "2018-11-08 14:16:59 -0800", "message": "add reconnect thread"}, {"oid": "cc192d36986c1c13fda64f1fa9f2e141e822d26d", "committedDate": "2018-11-08 16:33:58 -0800", "message": "reconnect thread and part of the session recovery writing"}, {"oid": "dfb4cadc777b3cd9e9217a5c08721b455dba4442", "committedDate": "2018-11-08 16:43:24 -0800", "message": "Revert \"reconnect thread and part of the session recovery writing\""}, {"oid": "77f83280273ed455cf3e41db560258f217b7ecf8", "committedDate": "2018-11-08 17:02:30 -0800", "message": "removing writeSessionState changes"}, {"oid": "24cedbb36f493f6e44847c16aa2ee24204f9102b", "committedDate": "2018-11-09 10:45:12 -0800", "message": "remove executors and needless synchronizers"}, {"oid": "521cf633ba3330f47c44e335a86d6d4916127c93", "committedDate": "2018-11-09 10:53:51 -0800", "message": "removed unused imports, formatting, clean up, etc"}, {"oid": "f1a7d2dcff85aeade55dce2df52c58a9d523c17b", "committedDate": "2018-11-09 11:50:15 -0800", "message": "comment"}, {"oid": "a73c39bf43f687d042eed3d552b8de45f49d5c11", "committedDate": "2018-11-09 13:12:08 -0800", "message": "removing duplicate code"}, {"oid": "85fdb019927f71b11a4b22e161bb5f0651ece409", "committedDate": "2018-11-09 13:13:36 -0800", "message": "formatting"}, {"oid": "8180cba1c2a818ece1d5c3c7182fb7153e0380e0", "committedDate": "2018-11-09 13:19:13 -0800", "message": "Add "}, {"oid": "88d49f0de7a2b203e0f794f43a74557d2eccf781", "committedDate": "2018-11-09 13:36:11 -0800", "message": "Merge branch 'ICREnableFeature' of https://github.com/ulvii/mssql-jdbc into ICREnableFeatureMergeFix"}, {"oid": "920706e41ed1e47389e1251452fbedc836485d28", "committedDate": "2018-11-09 14:41:39 -0800", "message": "removing isReconnecting"}, {"oid": "559ed08cf7138ce3f33f7a6873a6a7dfb2f2efa6", "committedDate": "2018-11-09 15:34:46 -0800", "message": "removing isReconnecting"}, {"oid": "036d9532b200913c2cbcbfee94c234abf3221df9", "committedDate": "2018-11-09 15:36:57 -0800", "message": "Add "}, {"oid": "503076fe213e018506f690177c32011f8ec22b62", "committedDate": "2018-11-09 15:41:30 -0800", "message": "adding resource"}, {"oid": "18d4bec283ca6daa52229f575c55ee7542ad0515", "committedDate": "2018-11-09 16:04:20 -0800", "message": "removing comment"}, {"oid": "eaf3516af7518d128271a6751e73bd679478c9e6", "committedDate": "2018-11-09 16:13:09 -0800", "message": "renaming rt to reconnectThread"}, {"oid": "a1ab97e3308cbef1345709f93c1ef317b277d016", "committedDate": "2018-11-09 17:23:29 -0800", "message": "moved reconnectThread into session recovery class"}, {"oid": "6e4665b2ce157c402ba8a49384bc79ce7f8cf6c6", "committedDate": "2018-11-09 17:55:52 -0800", "message": "Add "}, {"oid": "0170f891a15e70c7bf10af283f35a4a55e42a874", "committedDate": "2018-11-13 18:17:55 -0800", "message": "Fix "}, {"oid": "baaf32fb0c39be005484faaf45b1c51a63411ba3", "committedDate": "2018-11-14 13:50:11 -0800", "message": "Revert checks before creating session state table for now"}, {"oid": "5be2dfb03ba23afc08398404bd6fc5971e0b8bc7", "committedDate": "2018-11-14 16:56:24 -0800", "message": "Fix "}, {"oid": "5e940e7f48a1059511dbbfa8e5c0f36fff914df1", "committedDate": "2018-11-22 13:41:27 -0800", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "1db13b4bf74544ead81bf1ba25f12d294a4a5335", "committedDate": "2018-11-22 14:10:38 -0800", "message": "Login logic for reconnect"}, {"oid": "efc219317ca921791ec5c1a8e903415f52361997", "committedDate": "2018-11-23 14:53:51 -0800", "message": "Query timeout logic for connection resiliency"}, {"oid": "0ea565d77f782ebd466132c200f5cff63b137d7c", "committedDate": "2018-11-23 15:57:47 -0800", "message": "Fix "}, {"oid": "f9d975f3ccb6a2d68668fa61d99b435aee7e8da1", "committedDate": "2018-11-30 14:08:21 -0800", "message": "fix for not immediately failing if database not found (#16)"}, {"oid": "7bdd7ed447257570f5541a8075c485720fe3701e", "committedDate": "2018-12-05 17:44:34 -0800", "message": "Fix "}, {"oid": "0e430d202c09e647f44fa234c230b7c01828713c", "committedDate": "2018-12-06 10:23:04 -0800", "message": "Tds token error (#17)"}, {"oid": "1ae8e3c4244d7169df1115e9bb864a47bbba83b2", "committedDate": "2018-12-11 10:47:50 -0800", "message": "Add tests (#19)"}, {"oid": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "committedDate": "2020-04-29 16:10:57 -0700", "message": "Append server name from connection string to error message (#1311)"}, {"oid": "639d22c817499e3cf57143a16b82a07faeff317e", "committedDate": "2020-04-30 10:46:31 -0700", "message": "Check tls protocol version and throw warning (#1322)"}, {"oid": "426e5aec87f09307e0705abfdc33b18a7255613c", "committedDate": "2020-05-01 10:44:19 -0700", "message": "Adding Delayed Durability to commit API(#1310)"}, {"oid": "a2fc81ed55767eb7f40227159e001ee6f4868130", "committedDate": "2020-05-07 12:04:27 -0700", "message": "Fix #1325, return correct sql state when connection is closed (#1326)"}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "326a06aea6a561c4d625c7fbb07ca147a5b3acfe", "committedDate": "2020-05-27 17:15:24 -0700", "message": "Release "}, {"oid": "c9846285ec2f9368577101ecb117186844ef3437", "committedDate": "2020-06-24 10:27:48 -0700", "message": "Feature "}, {"oid": "99138fa1fe4b5277d8f758a53f10d197ec41b54b", "committedDate": "2020-06-24 14:26:22 -0700", "message": "Feature "}, {"oid": "423be4a8d58eb350f533c14acf241e0c44d64fb1", "committedDate": "2020-07-20 14:46:09 -0700", "message": "Change "}, {"oid": "a87bccfea1616717fa5ac8cd6d338d9ea7dae6d3", "committedDate": "2020-07-30 11:03:44 -0700", "message": "Release "}, {"oid": "606e722fbee129a4fd0de89423f5a934207522b0", "committedDate": "2020-08-24 12:37:49 -0700", "message": "Fix "}, {"oid": "8ad2371ec899daf135e4bbd35b54bd17311e14d2", "committedDate": "2020-10-09 10:00:43 -0700", "message": "Fix "}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "af76d7af3846801be86f7f94fbc3318b1ed5bc04", "committedDate": "2020-10-14 17:55:14 -0700", "message": "Make adal4j test dependency only (#1447)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "bd776c2b48691897cee900cc6e821d171f18513a", "committedDate": "2020-11-27 17:53:56 -0800", "message": "Added support for ActiveDirectoryInteractive authentication (#1464)"}, {"oid": "57c3fc3794d978e1886df81d1178989703b851ff", "committedDate": "2021-01-12 11:53:14 -0800", "message": "Handle MFA timeouts during ActiveDirectoryInteractive authentication by retrying connection (#1488)"}, {"oid": "428f14764f910ec527ce00ede0cdee74c2a6de13", "committedDate": "2021-01-25 12:19:07 -0800", "message": "Fix "}, {"oid": "567ae6ee992f81e945bead5be05a36ab2c744fe5", "committedDate": "2021-02-22 14:30:55 -0800", "message": "Fix clientSecret is null or empty for ActiveDirectoryServicePrincipal in Azure container (#1519)"}, {"oid": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "committedDate": "2021-03-19 14:20:41 -0700", "message": "Open Connection Retry (#1535)"}, {"oid": "0fc61a7e6d54ed0e0e5559ddec0d635a0d7b0d86", "committedDate": "2021-03-24 12:55:09 -0700", "message": "Added Azure Synapse serverless SQL pool, Azure SQL Edge and also updated name for Azure Synapse Analytics (#1543)"}, {"oid": "66b86319ee7fa04c739f04922a8f4666671e8d68", "committedDate": "2021-03-30 15:47:56 -0700", "message": "Added check for invalid timeout (#1555)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "ae65652f0edaaca44d2eee4a4b3f44d2233d9860", "committedDate": "2021-04-26 15:41:31 -0700", "message": "Fixes trustStorePassword set to null when using applicationIntent=ReadOnly (#1565)"}, {"oid": "40a6a22f6b4bbe2ca4e467efcca2f60651ee1e4c", "committedDate": "2021-04-27 12:24:13 -0700", "message": "Fixed issue when redirected token contains named instance in servername (#1568)"}, {"oid": "0f3e0a10f2f85b5b357811907fdb487d63e49830", "committedDate": "2021-04-27 20:57:33 -0700", "message": "Fixed javadoc warnings (#1570)"}, {"oid": "a5e9ca7678f700fd77eb3d4dd856f4067c11eea0", "committedDate": "2021-05-20 11:31:24 -0700", "message": "Send the driver version to the database during prelogin (#1583)"}, {"oid": "574b1e1aefecd1162bccf064a26c8e76a9a2c5bf", "committedDate": "2021-06-11 15:01:35 -0700", "message": "Send client process ID to server on Java 9+ (#1595)"}, {"oid": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "committedDate": "2021-06-14 13:17:54 -0700", "message": "Fix multiple, successive connections using AKV provider (#1594)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "ad258e21abb401d7bde3073370ad8a7ef16da198", "committedDate": "2021-07-12 13:00:48 -0700", "message": "Fixing test fails"}, {"oid": "8172599fd735a5481b784ed9ef0237b9ab6f7ea2", "committedDate": "2021-07-30 17:23:52 -0700", "message": "Remove Java 9-specific class references from the Java 8 jar (#1626)"}, {"oid": "379a57ce0a3bce03096902474bbfa883959015aa", "committedDate": "2021-08-04 11:48:54 -0700", "message": "Fix memory leak (#1633)"}, {"oid": "a61fbb7cc39a55d66708de929589e165c7e9ccaf", "committedDate": "2021-08-12 10:20:32 -0700", "message": "Catching up to dev, 9.5, fixing merge conflicts"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "0641e315ebd547d407aa844177c05a68e577490d", "committedDate": "2021-08-24 10:19:13 -0700", "message": "fixed feature ack ext"}, {"oid": "09d35bfc2338f1fc7c41a958d1e627fa0d6a2b65", "committedDate": "2021-08-30 11:57:00 -0700", "message": "Add 42108 and 42109 to transient errors list (#1643)"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "1bd85226d25e8b04aed601830fc322c9080811b7", "committedDate": "2021-09-03 14:41:34 -0700", "message": "Fixed a few more tests"}, {"oid": "4693c26b91ba02379f3f11a6eb839ad2e75d3959", "committedDate": "2021-09-07 14:07:27 -0700", "message": "Fixed retryinterval valid"}, {"oid": "0f266c05905874e6f8fb8739d08a7a3e9c9d0256", "committedDate": "2021-09-22 01:16:09 -0700", "message": "Fixed ResiliencyUtil for PooledConnections"}, {"oid": "11990186d8cdcd41d6192702805ece43134eb1ba", "committedDate": "2021-09-22 11:25:29 -0700", "message": "Catching up to dev"}, {"oid": "1d85778906f01fd4835b90b1c2c845d313b3796f", "committedDate": "2021-09-30 10:27:53 -0700", "message": "Reset lang-db-collation"}, {"oid": "47748db76bc86c2e4e237d207f22214eedf05c86", "committedDate": "2021-09-30 12:34:18 -0700", "message": "Missing break"}, {"oid": "54c27e931d2b9d8adbaa983d91c73219861c2d90", "committedDate": "2021-10-13 13:42:56 -0700", "message": "Fixed Polling and Tests for ICR"}, {"oid": "34e3b94ed40ffb12d1062581c687e04a7981d5df", "committedDate": "2021-10-21 11:48:42 -0700", "message": "Checks in case of slow dc vs azuredb"}, {"oid": "890778927388df2139136a5b08c56fa3db64f855", "committedDate": "2021-10-21 14:06:21 -0700", "message": "Reflection instead of public method"}, {"oid": "d3709f3119b668f16577d7a6958b54df253654c8", "committedDate": "2021-10-26 09:58:36 -0700", "message": "Limited runs of tests"}, {"oid": "5715001be63180e0aca9e12543f8c4ef4d368deb", "committedDate": "2021-10-28 02:31:50 -0700", "message": "Addressing code review comments"}, {"oid": "1a5206e06f8313d7d02b81a40559e67a566c35d7", "committedDate": "2021-11-02 17:12:34 -0700", "message": "Catching up to Dev, Addressing review comments"}, {"oid": "3a2a6ab60574035bd33c7f53457e18c66630d57a", "committedDate": "2021-11-04 12:57:28 -0700", "message": "refactored testutils"}, {"oid": "f4ef4f47b7e6d4abc4b6cabf7463d655006aa8cd", "committedDate": "2021-11-04 22:37:22 -0700", "message": "resolving comments"}, {"oid": "8f94517ccbc32ba026084ec605e0e7dcb2227946", "committedDate": "2021-11-05 00:33:50 -0700", "message": "Fixes"}, {"oid": "7cb16845fd7c26b0108bd57e8a7207c39f337b72", "committedDate": "2021-11-23 14:40:40 -0800", "message": "New Exception Message (#1683)"}, {"oid": "6ca48b39945ca12d3350218fefdd806e5e42608f", "committedDate": "2021-11-25 13:17:41 -0800", "message": "Fixed ActiveDirectoryInteractive authentication timeout issue (#1696)"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "901ec95427f8e8333296346c93a69efbd012b366", "committedDate": "2021-12-08 15:41:50 -0800", "message": "Retry randomUUID() to mitigate intermittent java NativeSeedGenerator failure (#1705)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "f0d6259851a514d9dd5a8da72ac060bdc00ead67", "committedDate": "2022-02-17 14:55:19 -0800", "message": "Removed extra call to executeCommand (#1754)"}, {"oid": "f9caf73e698206d94097b917e808333cfbf309e5", "committedDate": "2022-02-22 13:42:42 -0800", "message": "Added Azure Active Directory tests for Azure Data Explorer using user/password/applicationName AND removed deprecated tags to fix build warnings (#1755)"}, {"oid": "8806c175b6da532c3f6859cf97090b6434837f04", "committedDate": "2022-03-03 13:47:43 -0800", "message": "Add check for MSAL library when attempting ActiveDirectoryServicePrincipal auth (#1759)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "17b4799d7596c1053ca073dbb8f06ca509a8f9f2", "committedDate": "2022-03-31 10:25:33 -0700", "message": "Add encrypt utility to obfuscate password strings (#1780)"}, {"oid": "8e66ac0b5364be903d337828f5cec9dd352972e3", "committedDate": "2022-03-31 15:14:51 -0700", "message": "Refactor SQLServerColumnEncryptionAzureKeyVaultProvider usage in SQLServerConnection (#1774)"}, {"oid": "ef08328f33a32572b0f84efda78f87470b09a4f5", "committedDate": "2022-04-01 13:43:10 -0700", "message": "Add option for NONE attestation protocol (#1779)"}, {"oid": "0042429113f117c9b7118e67c13d430e0ba3bcde", "committedDate": "2022-04-12 12:36:10 -0700", "message": "Add ALPN for TDSS connections (#1795)"}, {"oid": "487c355cbaf87a087f310264bdc1cffd7e9223fb", "committedDate": "2022-04-14 13:10:01 -0700", "message": "Refactor Idle Connection Resiliency timeout to use existing SharedTimer (#1794)"}, {"oid": "bec87174b9f6c74f35f36890ac5bd33531479322", "committedDate": "2022-04-19 10:30:01 -0700", "message": "Formatted the check that assigns AE version to correctly assign version to protocol (#1805)"}, {"oid": "17fdf967dcbbcff268c3a6a646287c0c69b5b523", "committedDate": "2022-04-27 11:55:36 -0700", "message": "Avoid String use with secure strings (#1813)"}, {"oid": "fafd6a8d385089e641c7e7d7d0eefeb34558866a", "committedDate": "2022-04-27 15:44:13 -0700", "message": "Fixed TDS 8 to not make double connections (#1817)"}, {"oid": "76941b78626836ed677d9dcce97be432ae8e8b86", "committedDate": "2022-04-29 11:58:49 -0700", "message": "warnings (#1819)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "4b2641eaf53dfb3a701bb489a8247817667b5b77", "committedDate": "2022-07-20 15:29:22 -0700", "message": "Added TDS version 8 for strict mode (#1870)"}, {"oid": "87b092e754556c501f75496f241985725b9c56ba", "committedDate": "2022-07-20 17:08:50 -0700", "message": "Cache parameter metadata secure (#1866)"}, {"oid": "7f9a984170ae607fda61644e18193d0580daa632", "committedDate": "2022-07-28 09:00:43 -0700", "message": "Fix sending TDS8 version during login (#1878)"}, {"oid": "8fbd9edeb3e31fc67de1437691864401bf131ae0", "committedDate": "2022-08-25 11:47:09 -0700", "message": "Removed use of toString on a String, empty statements and double parentheses (#1901)"}, {"oid": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "committedDate": "2022-10-25 12:37:03 -0700", "message": "Loom friendly synchronization. (#1931)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "1797e17df84eb7c45e106577ed4f847178351db6", "committedDate": "2022-11-03 14:14:48 -0700", "message": "Fixed warnings detected by Sonartype (#1950)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "1572bf66580b9fe085f9834c0dc23ec510fa88aa", "committedDate": "2022-11-03 16:23:47 -0700", "message": "Fixed mixing date import (#1954)"}, {"oid": "7f17532250eec3be7eab1e9a538eae49be905564", "committedDate": "2022-11-14 15:25:44 -0800", "message": "Resolved issues reported by SonarQube (#1962)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "b79396d699d9fa76fd704ce084230647facb1018", "committedDate": "2022-11-25 10:20:37 -0800", "message": "More changes to address sonarqube warnings (#1974)"}, {"oid": "fd16cb823bdaa439097f31b1fcab79102ed1ce74", "committedDate": "2022-12-13 11:01:12 -0800", "message": "Fixed Idle Connection recovery so that unprocessedResponseCount isn't over decremented (#1989)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "39561b4a949e72857f3286a2390149f48688fa4c", "committedDate": "2022-12-22 11:03:54 -0800", "message": "cleanup (#2012)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "e487251f14df934f77491e38824abb73d60d52cc", "committedDate": "2023-01-19 13:02:03 -0800", "message": "More minor fixes for SonarQube (#2041)"}, {"oid": "2abc3d1980f8b1354a4bb8790c51dd9cc0e9d100", "committedDate": "2023-01-23 15:20:46 -0800", "message": "More code cleanup (#2048)"}, {"oid": "11929611c369efbcad01a0249ccfded2243154df", "committedDate": "2023-01-24 17:28:15 -0800", "message": "Suppressed deprecated warning for java security api (#2053)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}, {"oid": "242911001e33e1ce242aa2066cf725a7553b885d", "committedDate": "2023-02-09 14:18:15 -0800", "message": "Updated fedauth tests to run on diff test server (#2062)"}, {"oid": "e4bc368034ae5421c4e0215bf82335eb36b2aeac", "committedDate": "2023-02-16 13:06:32 -0800", "message": "Updated supportsTransactions method (#2075)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}, {"oid": "9cbaf1754194c4a6391e192f12fc59df7ad3ee03", "committedDate": "2023-02-23 15:54:13 -0800", "message": "more (#2082)"}, {"oid": "18db69cb8c7372c6bf5ba3fc883278436d48e26a", "committedDate": "2023-03-10 14:01:49 -0800", "message": "Fixed jdbcfx metadata test (#2089)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNDQ5Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401034497", "body": "Feels like a waste to create a hash-map w/ 1 entry just to conform to the existing constructor. Maybe this can be done better?", "bodyText": "Feels like a waste to create a hash-map w/ 1 entry just to conform to the existing constructor. Maybe this can be done better?", "bodyHTML": "<p dir=\"auto\">Feels like a waste to create a hash-map w/ 1 entry just to conform to the existing constructor. Maybe this can be done better?</p>", "author": "rene-ye", "createdAt": "2020-03-31T16:06:07Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -1291,7 +1316,30 @@ private void registerKeyStoreProviderOnConnection(String keyStoreAuth, String ke\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(\n+                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                    } else {\n+                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                                keyStorePrincipalId, keyStoreSecret);\n+                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                        keyStoreMap.put(provider.getName(), provider);\n+                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1320,7 +1317,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     // need a secret use use the secret method\n                     if (null == keyStoreSecret) {\n                         throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n                     } else {\n                         SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n                                 keyStorePrincipalId, keyStoreSecret);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1320,7 +1317,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     // need a secret use use the secret method\n                     if (null == keyStoreSecret) {\n                         throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n                     } else {\n                         SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n                                 keyStorePrincipalId, keyStoreSecret);\n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 3973bfc8..7e6320f2 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1313,30 +1205,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-                case KeyVaultClientSecret:\n-                    // need a secret use use the secret method\n-                    if (null == keyStoreSecret) {\n-                        throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n-                                keyStorePrincipalId, keyStoreSecret);\n-                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n-                        keyStoreMap.put(provider.getName(), provider);\n-                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n-                    }\n-                    break;\n-                case KeyVaultManagedIdentity:\n-                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n-                    if (null != keyStorePrincipalId) {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n-                    } else {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n-                    }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n-                    keyStoreMap.put(provider.getName(), provider);\n-                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n-                    break;\n+\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n                     break;\n", "next_change": {"commit": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 7e6320f2..e1d12210 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1205,7 +1332,29 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n+                    } else {\n+                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                                keyStorePrincipalId, keyStoreSecret);\n+                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                        keyStoreMap.put(provider.getName(), provider);\n+                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    }\n+                    break;\n+                case KeyVaultManagedIdentity:\n+                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n+                    if (null != keyStorePrincipalId) {\n+                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n+                    } else {\n+                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n+                    }\n+                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                    keyStoreMap.put(provider.getName(), provider);\n+                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n                     break;\n", "next_change": {"commit": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..36c0bb8b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1351,7 +1379,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     } else {\n                         provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n                     }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n                     keyStoreMap.put(provider.getName(), provider);\n                     registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n                     break;\n", "next_change": {"commit": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 36c0bb8b..da4731e7 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1379,9 +1604,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     } else {\n                         provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n                     }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n-                    keyStoreMap.put(provider.getName(), provider);\n-                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n", "next_change": {"commit": "8e66ac0b5364be903d337828f5cec9dd352972e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex da4731e7..802e9c12 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1577,34 +1749,13 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             KeyStoreAuthentication keyStoreAuthentication = KeyStoreAuthentication.valueOfString(keyStoreAuth);\n             switch (keyStoreAuthentication) {\n                 case JavaKeyStorePassword:\n-                    // both secret and location must be set for JKS.\n-                    if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n-                        throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n-                                keyStoreLocation, keyStoreSecret.toCharArray());\n-                        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n-                    }\n+                    setKeyStoreSecretAndLocation(keyStoreSecret, keyStoreLocation);\n                     break;\n                 case KeyVaultClientSecret:\n-                    // need a secret to use the secret method\n-                    if (null == keyStoreSecret) {\n-                        throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n-                                keyStorePrincipalId, keyStoreSecret);\n-                        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n-                    }\n+                    this.setKeyVaultProvider(keyStorePrincipalId, keyStoreSecret);\n                     break;\n                 case KeyVaultManagedIdentity:\n-                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n-                    if (null != keyStorePrincipalId) {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n-                    } else {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n-                    }\n-                    systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+                    setKeyVaultProvider(keyStorePrincipalId);\n                     break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n", "next_change": {"commit": "0042429113f117c9b7118e67c13d430e0ba3bcde", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 802e9c12..1d502335 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1764,14 +1765,14 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n-    private void setKeyStoreSecretAndLocation(String keyStoreSecret, String keyStoreLocation) throws SQLServerException {\n+    private void setKeyStoreSecretAndLocation(String keyStoreSecret,\n+            String keyStoreLocation) throws SQLServerException {\n         // both secret and location must be set for JKS.\n         if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n-            throw new SQLServerException(\n-                    SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n         } else {\n             SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n-                     keyStoreLocation, keyStoreSecret.toCharArray());\n+                    keyStoreLocation, keyStoreSecret.toCharArray());\n             systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n         }\n     }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex da4731e7..802e9c12 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1613,6 +1764,39 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n+    private void setKeyStoreSecretAndLocation(String keyStoreSecret, String keyStoreLocation) throws SQLServerException {\n+        // both secret and location must be set for JKS.\n+        if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n+            throw new SQLServerException(\n+                    SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+        } else {\n+            SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n+                     keyStoreLocation, keyStoreSecret.toCharArray());\n+            systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+        }\n+    }\n+\n+    private void setKeyVaultProvider(String keyStorePrincipalId) throws SQLServerException {\n+        SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n+        if (null != keyStorePrincipalId) {\n+            provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n+        } else {\n+            provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n+        }\n+        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+    }\n+\n+    private void setKeyVaultProvider(String keyStorePrincipalId, String keyStoreSecret) throws SQLServerException {\n+        // need a secret to use the secret method\n+        if (null == keyStoreSecret) {\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n+        } else {\n+            SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                    keyStorePrincipalId, keyStoreSecret);\n+            systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+        }\n+    }\n+\n     // Helper to check if timeout value is valid\n     int validateTimeout(SQLServerDriverIntProperty property) throws SQLServerException {\n         int timeout = property.getDefaultValue();\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..36c0bb8b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1362,6 +1390,15 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n+    private void registerKeyVaultProvider(String clientId, String clientKey) throws SQLServerException {\n+        // need a secret to use the secret method\n+        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                clientId, clientKey);\n+        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n+        keyStoreMap.put(provider.getName(), provider);\n+        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+    }\n+\n     /**\n      * Establish a physical database connection based on the user specified connection properties. Logon to the\n      * database.\n", "next_change": {"commit": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 36c0bb8b..851c6569 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1399,6 +1455,29 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n     }\n \n+    // Helper to check if timeout value is valid\n+    int validateTimeout(SQLServerDriverIntProperty property) throws SQLServerException {\n+        int timeout = property.getDefaultValue();\n+        String sPropValue = activeConnectionProperties.getProperty(property.toString());\n+        if (null != sPropValue && sPropValue.length() > 0) {\n+            try {\n+                timeout = Integer.parseInt(sPropValue);\n+                if (!property.isValidValue(timeout)) {\n+                    MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidTimeOut\"));\n+                    Object[] msgArgs = {sPropValue};\n+                    SQLServerException.makeFromDriverError(this, this, form.format(msgArgs), null, false);\n+\n+                }\n+            } catch (NumberFormatException e) {\n+                MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidTimeOut\"));\n+                Object[] msgArgs = {sPropValue};\n+                SQLServerException.makeFromDriverError(this, this, form.format(msgArgs), null, false);\n+\n+            }\n+        }\n+        return timeout;\n+    }\n+\n     /**\n      * Establish a physical database connection based on the user specified connection properties. Logon to the\n      * database.\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "7e67a2351c64cdb16a1b5faf0ba1feaba0980df7", "committedDate": "2018-10-11 15:12:12 -0700", "message": "Add "}, {"oid": "6618054fad0e2b01efc15bee1686880959cfebbf", "committedDate": "2018-10-12 16:20:12 -0700", "message": "Add "}, {"oid": "98cdc4140f5fce1e0691a386b9f7cb1dc1cacbda", "committedDate": "2018-10-12 16:25:31 -0700", "message": "Fix "}, {"oid": "3e2a2fd8e035b89eae1379f0bac5873e54360045", "committedDate": "2018-10-15 14:35:15 -0700", "message": "Fix "}, {"oid": "5d5f0a66d0d89ede79187d5a062303509b89e986", "committedDate": "2018-10-15 16:56:50 -0700", "message": "Fix "}, {"oid": "a901cbb419731119a12a6729ea38e0fe2c696b89", "committedDate": "2018-10-15 16:57:14 -0700", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "c25833fb18adcbe9bdb180329955784ad6bf35d5", "committedDate": "2018-11-05 10:09:26 -0800", "message": "update from Microsoft/dev"}, {"oid": "70f1fd52b37558a3da52721f765da3bfa7312fca", "committedDate": "2018-11-08 14:16:59 -0800", "message": "add reconnect thread"}, {"oid": "cc192d36986c1c13fda64f1fa9f2e141e822d26d", "committedDate": "2018-11-08 16:33:58 -0800", "message": "reconnect thread and part of the session recovery writing"}, {"oid": "dfb4cadc777b3cd9e9217a5c08721b455dba4442", "committedDate": "2018-11-08 16:43:24 -0800", "message": "Revert \"reconnect thread and part of the session recovery writing\""}, {"oid": "77f83280273ed455cf3e41db560258f217b7ecf8", "committedDate": "2018-11-08 17:02:30 -0800", "message": "removing writeSessionState changes"}, {"oid": "24cedbb36f493f6e44847c16aa2ee24204f9102b", "committedDate": "2018-11-09 10:45:12 -0800", "message": "remove executors and needless synchronizers"}, {"oid": "521cf633ba3330f47c44e335a86d6d4916127c93", "committedDate": "2018-11-09 10:53:51 -0800", "message": "removed unused imports, formatting, clean up, etc"}, {"oid": "f1a7d2dcff85aeade55dce2df52c58a9d523c17b", "committedDate": "2018-11-09 11:50:15 -0800", "message": "comment"}, {"oid": "a73c39bf43f687d042eed3d552b8de45f49d5c11", "committedDate": "2018-11-09 13:12:08 -0800", "message": "removing duplicate code"}, {"oid": "85fdb019927f71b11a4b22e161bb5f0651ece409", "committedDate": "2018-11-09 13:13:36 -0800", "message": "formatting"}, {"oid": "8180cba1c2a818ece1d5c3c7182fb7153e0380e0", "committedDate": "2018-11-09 13:19:13 -0800", "message": "Add "}, {"oid": "88d49f0de7a2b203e0f794f43a74557d2eccf781", "committedDate": "2018-11-09 13:36:11 -0800", "message": "Merge branch 'ICREnableFeature' of https://github.com/ulvii/mssql-jdbc into ICREnableFeatureMergeFix"}, {"oid": "920706e41ed1e47389e1251452fbedc836485d28", "committedDate": "2018-11-09 14:41:39 -0800", "message": "removing isReconnecting"}, {"oid": "559ed08cf7138ce3f33f7a6873a6a7dfb2f2efa6", "committedDate": "2018-11-09 15:34:46 -0800", "message": "removing isReconnecting"}, {"oid": "036d9532b200913c2cbcbfee94c234abf3221df9", "committedDate": "2018-11-09 15:36:57 -0800", "message": "Add "}, {"oid": "503076fe213e018506f690177c32011f8ec22b62", "committedDate": "2018-11-09 15:41:30 -0800", "message": "adding resource"}, {"oid": "18d4bec283ca6daa52229f575c55ee7542ad0515", "committedDate": "2018-11-09 16:04:20 -0800", "message": "removing comment"}, {"oid": "eaf3516af7518d128271a6751e73bd679478c9e6", "committedDate": "2018-11-09 16:13:09 -0800", "message": "renaming rt to reconnectThread"}, {"oid": "a1ab97e3308cbef1345709f93c1ef317b277d016", "committedDate": "2018-11-09 17:23:29 -0800", "message": "moved reconnectThread into session recovery class"}, {"oid": "6e4665b2ce157c402ba8a49384bc79ce7f8cf6c6", "committedDate": "2018-11-09 17:55:52 -0800", "message": "Add "}, {"oid": "0170f891a15e70c7bf10af283f35a4a55e42a874", "committedDate": "2018-11-13 18:17:55 -0800", "message": "Fix "}, {"oid": "baaf32fb0c39be005484faaf45b1c51a63411ba3", "committedDate": "2018-11-14 13:50:11 -0800", "message": "Revert checks before creating session state table for now"}, {"oid": "5be2dfb03ba23afc08398404bd6fc5971e0b8bc7", "committedDate": "2018-11-14 16:56:24 -0800", "message": "Fix "}, {"oid": "5e940e7f48a1059511dbbfa8e5c0f36fff914df1", "committedDate": "2018-11-22 13:41:27 -0800", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "1db13b4bf74544ead81bf1ba25f12d294a4a5335", "committedDate": "2018-11-22 14:10:38 -0800", "message": "Login logic for reconnect"}, {"oid": "efc219317ca921791ec5c1a8e903415f52361997", "committedDate": "2018-11-23 14:53:51 -0800", "message": "Query timeout logic for connection resiliency"}, {"oid": "0ea565d77f782ebd466132c200f5cff63b137d7c", "committedDate": "2018-11-23 15:57:47 -0800", "message": "Fix "}, {"oid": "f9d975f3ccb6a2d68668fa61d99b435aee7e8da1", "committedDate": "2018-11-30 14:08:21 -0800", "message": "fix for not immediately failing if database not found (#16)"}, {"oid": "7bdd7ed447257570f5541a8075c485720fe3701e", "committedDate": "2018-12-05 17:44:34 -0800", "message": "Fix "}, {"oid": "0e430d202c09e647f44fa234c230b7c01828713c", "committedDate": "2018-12-06 10:23:04 -0800", "message": "Tds token error (#17)"}, {"oid": "1ae8e3c4244d7169df1115e9bb864a47bbba83b2", "committedDate": "2018-12-11 10:47:50 -0800", "message": "Add tests (#19)"}, {"oid": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "committedDate": "2020-04-29 16:10:57 -0700", "message": "Append server name from connection string to error message (#1311)"}, {"oid": "639d22c817499e3cf57143a16b82a07faeff317e", "committedDate": "2020-04-30 10:46:31 -0700", "message": "Check tls protocol version and throw warning (#1322)"}, {"oid": "426e5aec87f09307e0705abfdc33b18a7255613c", "committedDate": "2020-05-01 10:44:19 -0700", "message": "Adding Delayed Durability to commit API(#1310)"}, {"oid": "a2fc81ed55767eb7f40227159e001ee6f4868130", "committedDate": "2020-05-07 12:04:27 -0700", "message": "Fix #1325, return correct sql state when connection is closed (#1326)"}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "326a06aea6a561c4d625c7fbb07ca147a5b3acfe", "committedDate": "2020-05-27 17:15:24 -0700", "message": "Release "}, {"oid": "c9846285ec2f9368577101ecb117186844ef3437", "committedDate": "2020-06-24 10:27:48 -0700", "message": "Feature "}, {"oid": "99138fa1fe4b5277d8f758a53f10d197ec41b54b", "committedDate": "2020-06-24 14:26:22 -0700", "message": "Feature "}, {"oid": "423be4a8d58eb350f533c14acf241e0c44d64fb1", "committedDate": "2020-07-20 14:46:09 -0700", "message": "Change "}, {"oid": "a87bccfea1616717fa5ac8cd6d338d9ea7dae6d3", "committedDate": "2020-07-30 11:03:44 -0700", "message": "Release "}, {"oid": "606e722fbee129a4fd0de89423f5a934207522b0", "committedDate": "2020-08-24 12:37:49 -0700", "message": "Fix "}, {"oid": "8ad2371ec899daf135e4bbd35b54bd17311e14d2", "committedDate": "2020-10-09 10:00:43 -0700", "message": "Fix "}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "af76d7af3846801be86f7f94fbc3318b1ed5bc04", "committedDate": "2020-10-14 17:55:14 -0700", "message": "Make adal4j test dependency only (#1447)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "bd776c2b48691897cee900cc6e821d171f18513a", "committedDate": "2020-11-27 17:53:56 -0800", "message": "Added support for ActiveDirectoryInteractive authentication (#1464)"}, {"oid": "57c3fc3794d978e1886df81d1178989703b851ff", "committedDate": "2021-01-12 11:53:14 -0800", "message": "Handle MFA timeouts during ActiveDirectoryInteractive authentication by retrying connection (#1488)"}, {"oid": "428f14764f910ec527ce00ede0cdee74c2a6de13", "committedDate": "2021-01-25 12:19:07 -0800", "message": "Fix "}, {"oid": "567ae6ee992f81e945bead5be05a36ab2c744fe5", "committedDate": "2021-02-22 14:30:55 -0800", "message": "Fix clientSecret is null or empty for ActiveDirectoryServicePrincipal in Azure container (#1519)"}, {"oid": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "committedDate": "2021-03-19 14:20:41 -0700", "message": "Open Connection Retry (#1535)"}, {"oid": "0fc61a7e6d54ed0e0e5559ddec0d635a0d7b0d86", "committedDate": "2021-03-24 12:55:09 -0700", "message": "Added Azure Synapse serverless SQL pool, Azure SQL Edge and also updated name for Azure Synapse Analytics (#1543)"}, {"oid": "66b86319ee7fa04c739f04922a8f4666671e8d68", "committedDate": "2021-03-30 15:47:56 -0700", "message": "Added check for invalid timeout (#1555)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "ae65652f0edaaca44d2eee4a4b3f44d2233d9860", "committedDate": "2021-04-26 15:41:31 -0700", "message": "Fixes trustStorePassword set to null when using applicationIntent=ReadOnly (#1565)"}, {"oid": "40a6a22f6b4bbe2ca4e467efcca2f60651ee1e4c", "committedDate": "2021-04-27 12:24:13 -0700", "message": "Fixed issue when redirected token contains named instance in servername (#1568)"}, {"oid": "0f3e0a10f2f85b5b357811907fdb487d63e49830", "committedDate": "2021-04-27 20:57:33 -0700", "message": "Fixed javadoc warnings (#1570)"}, {"oid": "a5e9ca7678f700fd77eb3d4dd856f4067c11eea0", "committedDate": "2021-05-20 11:31:24 -0700", "message": "Send the driver version to the database during prelogin (#1583)"}, {"oid": "574b1e1aefecd1162bccf064a26c8e76a9a2c5bf", "committedDate": "2021-06-11 15:01:35 -0700", "message": "Send client process ID to server on Java 9+ (#1595)"}, {"oid": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "committedDate": "2021-06-14 13:17:54 -0700", "message": "Fix multiple, successive connections using AKV provider (#1594)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "ad258e21abb401d7bde3073370ad8a7ef16da198", "committedDate": "2021-07-12 13:00:48 -0700", "message": "Fixing test fails"}, {"oid": "8172599fd735a5481b784ed9ef0237b9ab6f7ea2", "committedDate": "2021-07-30 17:23:52 -0700", "message": "Remove Java 9-specific class references from the Java 8 jar (#1626)"}, {"oid": "379a57ce0a3bce03096902474bbfa883959015aa", "committedDate": "2021-08-04 11:48:54 -0700", "message": "Fix memory leak (#1633)"}, {"oid": "a61fbb7cc39a55d66708de929589e165c7e9ccaf", "committedDate": "2021-08-12 10:20:32 -0700", "message": "Catching up to dev, 9.5, fixing merge conflicts"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "0641e315ebd547d407aa844177c05a68e577490d", "committedDate": "2021-08-24 10:19:13 -0700", "message": "fixed feature ack ext"}, {"oid": "09d35bfc2338f1fc7c41a958d1e627fa0d6a2b65", "committedDate": "2021-08-30 11:57:00 -0700", "message": "Add 42108 and 42109 to transient errors list (#1643)"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "1bd85226d25e8b04aed601830fc322c9080811b7", "committedDate": "2021-09-03 14:41:34 -0700", "message": "Fixed a few more tests"}, {"oid": "4693c26b91ba02379f3f11a6eb839ad2e75d3959", "committedDate": "2021-09-07 14:07:27 -0700", "message": "Fixed retryinterval valid"}, {"oid": "0f266c05905874e6f8fb8739d08a7a3e9c9d0256", "committedDate": "2021-09-22 01:16:09 -0700", "message": "Fixed ResiliencyUtil for PooledConnections"}, {"oid": "11990186d8cdcd41d6192702805ece43134eb1ba", "committedDate": "2021-09-22 11:25:29 -0700", "message": "Catching up to dev"}, {"oid": "1d85778906f01fd4835b90b1c2c845d313b3796f", "committedDate": "2021-09-30 10:27:53 -0700", "message": "Reset lang-db-collation"}, {"oid": "47748db76bc86c2e4e237d207f22214eedf05c86", "committedDate": "2021-09-30 12:34:18 -0700", "message": "Missing break"}, {"oid": "54c27e931d2b9d8adbaa983d91c73219861c2d90", "committedDate": "2021-10-13 13:42:56 -0700", "message": "Fixed Polling and Tests for ICR"}, {"oid": "34e3b94ed40ffb12d1062581c687e04a7981d5df", "committedDate": "2021-10-21 11:48:42 -0700", "message": "Checks in case of slow dc vs azuredb"}, {"oid": "890778927388df2139136a5b08c56fa3db64f855", "committedDate": "2021-10-21 14:06:21 -0700", "message": "Reflection instead of public method"}, {"oid": "d3709f3119b668f16577d7a6958b54df253654c8", "committedDate": "2021-10-26 09:58:36 -0700", "message": "Limited runs of tests"}, {"oid": "5715001be63180e0aca9e12543f8c4ef4d368deb", "committedDate": "2021-10-28 02:31:50 -0700", "message": "Addressing code review comments"}, {"oid": "1a5206e06f8313d7d02b81a40559e67a566c35d7", "committedDate": "2021-11-02 17:12:34 -0700", "message": "Catching up to Dev, Addressing review comments"}, {"oid": "3a2a6ab60574035bd33c7f53457e18c66630d57a", "committedDate": "2021-11-04 12:57:28 -0700", "message": "refactored testutils"}, {"oid": "f4ef4f47b7e6d4abc4b6cabf7463d655006aa8cd", "committedDate": "2021-11-04 22:37:22 -0700", "message": "resolving comments"}, {"oid": "8f94517ccbc32ba026084ec605e0e7dcb2227946", "committedDate": "2021-11-05 00:33:50 -0700", "message": "Fixes"}, {"oid": "7cb16845fd7c26b0108bd57e8a7207c39f337b72", "committedDate": "2021-11-23 14:40:40 -0800", "message": "New Exception Message (#1683)"}, {"oid": "6ca48b39945ca12d3350218fefdd806e5e42608f", "committedDate": "2021-11-25 13:17:41 -0800", "message": "Fixed ActiveDirectoryInteractive authentication timeout issue (#1696)"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "901ec95427f8e8333296346c93a69efbd012b366", "committedDate": "2021-12-08 15:41:50 -0800", "message": "Retry randomUUID() to mitigate intermittent java NativeSeedGenerator failure (#1705)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "f0d6259851a514d9dd5a8da72ac060bdc00ead67", "committedDate": "2022-02-17 14:55:19 -0800", "message": "Removed extra call to executeCommand (#1754)"}, {"oid": "f9caf73e698206d94097b917e808333cfbf309e5", "committedDate": "2022-02-22 13:42:42 -0800", "message": "Added Azure Active Directory tests for Azure Data Explorer using user/password/applicationName AND removed deprecated tags to fix build warnings (#1755)"}, {"oid": "8806c175b6da532c3f6859cf97090b6434837f04", "committedDate": "2022-03-03 13:47:43 -0800", "message": "Add check for MSAL library when attempting ActiveDirectoryServicePrincipal auth (#1759)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "17b4799d7596c1053ca073dbb8f06ca509a8f9f2", "committedDate": "2022-03-31 10:25:33 -0700", "message": "Add encrypt utility to obfuscate password strings (#1780)"}, {"oid": "8e66ac0b5364be903d337828f5cec9dd352972e3", "committedDate": "2022-03-31 15:14:51 -0700", "message": "Refactor SQLServerColumnEncryptionAzureKeyVaultProvider usage in SQLServerConnection (#1774)"}, {"oid": "ef08328f33a32572b0f84efda78f87470b09a4f5", "committedDate": "2022-04-01 13:43:10 -0700", "message": "Add option for NONE attestation protocol (#1779)"}, {"oid": "0042429113f117c9b7118e67c13d430e0ba3bcde", "committedDate": "2022-04-12 12:36:10 -0700", "message": "Add ALPN for TDSS connections (#1795)"}, {"oid": "487c355cbaf87a087f310264bdc1cffd7e9223fb", "committedDate": "2022-04-14 13:10:01 -0700", "message": "Refactor Idle Connection Resiliency timeout to use existing SharedTimer (#1794)"}, {"oid": "bec87174b9f6c74f35f36890ac5bd33531479322", "committedDate": "2022-04-19 10:30:01 -0700", "message": "Formatted the check that assigns AE version to correctly assign version to protocol (#1805)"}, {"oid": "17fdf967dcbbcff268c3a6a646287c0c69b5b523", "committedDate": "2022-04-27 11:55:36 -0700", "message": "Avoid String use with secure strings (#1813)"}, {"oid": "fafd6a8d385089e641c7e7d7d0eefeb34558866a", "committedDate": "2022-04-27 15:44:13 -0700", "message": "Fixed TDS 8 to not make double connections (#1817)"}, {"oid": "76941b78626836ed677d9dcce97be432ae8e8b86", "committedDate": "2022-04-29 11:58:49 -0700", "message": "warnings (#1819)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "4b2641eaf53dfb3a701bb489a8247817667b5b77", "committedDate": "2022-07-20 15:29:22 -0700", "message": "Added TDS version 8 for strict mode (#1870)"}, {"oid": "87b092e754556c501f75496f241985725b9c56ba", "committedDate": "2022-07-20 17:08:50 -0700", "message": "Cache parameter metadata secure (#1866)"}, {"oid": "7f9a984170ae607fda61644e18193d0580daa632", "committedDate": "2022-07-28 09:00:43 -0700", "message": "Fix sending TDS8 version during login (#1878)"}, {"oid": "8fbd9edeb3e31fc67de1437691864401bf131ae0", "committedDate": "2022-08-25 11:47:09 -0700", "message": "Removed use of toString on a String, empty statements and double parentheses (#1901)"}, {"oid": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "committedDate": "2022-10-25 12:37:03 -0700", "message": "Loom friendly synchronization. (#1931)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "1797e17df84eb7c45e106577ed4f847178351db6", "committedDate": "2022-11-03 14:14:48 -0700", "message": "Fixed warnings detected by Sonartype (#1950)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "1572bf66580b9fe085f9834c0dc23ec510fa88aa", "committedDate": "2022-11-03 16:23:47 -0700", "message": "Fixed mixing date import (#1954)"}, {"oid": "7f17532250eec3be7eab1e9a538eae49be905564", "committedDate": "2022-11-14 15:25:44 -0800", "message": "Resolved issues reported by SonarQube (#1962)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "b79396d699d9fa76fd704ce084230647facb1018", "committedDate": "2022-11-25 10:20:37 -0800", "message": "More changes to address sonarqube warnings (#1974)"}, {"oid": "fd16cb823bdaa439097f31b1fcab79102ed1ce74", "committedDate": "2022-12-13 11:01:12 -0800", "message": "Fixed Idle Connection recovery so that unprocessedResponseCount isn't over decremented (#1989)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "39561b4a949e72857f3286a2390149f48688fa4c", "committedDate": "2022-12-22 11:03:54 -0800", "message": "cleanup (#2012)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "e487251f14df934f77491e38824abb73d60d52cc", "committedDate": "2023-01-19 13:02:03 -0800", "message": "More minor fixes for SonarQube (#2041)"}, {"oid": "2abc3d1980f8b1354a4bb8790c51dd9cc0e9d100", "committedDate": "2023-01-23 15:20:46 -0800", "message": "More code cleanup (#2048)"}, {"oid": "11929611c369efbcad01a0249ccfded2243154df", "committedDate": "2023-01-24 17:28:15 -0800", "message": "Suppressed deprecated warning for java security api (#2053)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}, {"oid": "242911001e33e1ce242aa2066cf725a7553b885d", "committedDate": "2023-02-09 14:18:15 -0800", "message": "Updated fedauth tests to run on diff test server (#2062)"}, {"oid": "e4bc368034ae5421c4e0215bf82335eb36b2aeac", "committedDate": "2023-02-16 13:06:32 -0800", "message": "Updated supportsTransactions method (#2075)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}, {"oid": "9cbaf1754194c4a6391e192f12fc59df7ad3ee03", "committedDate": "2023-02-23 15:54:13 -0800", "message": "more (#2082)"}, {"oid": "18db69cb8c7372c6bf5ba3fc883278436d48e26a", "committedDate": "2023-03-10 14:01:49 -0800", "message": "Fixed jdbcfx metadata test (#2089)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNjI0OA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401036248", "body": "Response codes shouldn't be magic numbers, better to create constants and document a little of their meaning in comments. I think this part of the code is just moved though so please document/create a work item.", "bodyText": "Response codes shouldn't be magic numbers, better to create constants and document a little of their meaning in comments. I think this part of the code is just moved though so please document/create a work item.", "bodyHTML": "<p dir=\"auto\">Response codes shouldn't be magic numbers, better to create constants and document a little of their meaning in comments. I think this part of the code is just moved though so please document/create a work item.</p>", "author": "rene-ye", "createdAt": "2020-03-31T16:08:31Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -215,4 +234,164 @@ static void verifyColumnMasterKeyMetadata(SQLServerConnection connection, String\n             throw new SQLServerException(SQLServerException.getErrString(\"R_VerifySignature\"), null);\r\n         }\r\n     }\r\n+\r\n+    /**\r\n+     * Get Managed Identity Authentication token\r\n+     * \r\n+     * @param resource\r\n+     *        token resource\r\n+     * @param msiClientId\r\n+     *        Managed Identity or User Assigned Managed Identity\r\n+     * @return fedauth token\r\n+     * @throws SQLServerException\r\n+     */\r\n+    static SqlFedAuthToken getMSIAuthToken(String resource, String msiClientId) throws SQLServerException {\r\n+        // IMDS upgrade time can take up to 70s\r\n+        final int imdsUpgradeTimeInMs = 70 * 1000;\r\n+        final List<Integer> retrySlots = new ArrayList<>();\r\n+        final String msiEndpoint = System.getenv(\"MSI_ENDPOINT\");\r\n+        final String msiSecret = System.getenv(\"MSI_SECRET\");\r\n+\r\n+        StringBuilder urlString = new StringBuilder();\r\n+        int retry = 1, maxRetry = 1;\r\n+\r\n+        /*\r\n+         * isAzureFunction is used for identifying if the current client application is running in a Virtual Machine\r\n+         * (without MSI environment variables) or App Service/Function (with MSI environment variables) as the APIs to\r\n+         * be called for acquiring MSI Token are different for both cases.\r\n+         */\r\n+        boolean isAzureFunction = null != msiEndpoint && !msiEndpoint.isEmpty() && null != msiSecret\r\n+                && !msiSecret.isEmpty();\r\n+\r\n+        if (isAzureFunction) {\r\n+            urlString.append(msiEndpoint).append(\"?api-version=2017-09-01&resource=\").append(resource);\r\n+        } else {\r\n+            urlString.append(ActiveDirectoryAuthentication.AZURE_REST_MSI_URL).append(\"&resource=\").append(resource);\r\n+            // Retry acquiring access token upto 20 times due to possible IMDS upgrade (Applies to VM only)\r\n+            maxRetry = 20;\r\n+            // Simplified variant of Exponential BackOff\r\n+            for (int x = 0; x < maxRetry; x++) {\r\n+                retrySlots.add(500 * ((2 << 1) - 1) / 1000);\r\n+            }\r\n+        }\r\n+\r\n+        // Append Client Id if available\r\n+        if (null != msiClientId && !msiClientId.isEmpty()) {\r\n+            if (isAzureFunction) {\r\n+                urlString.append(\"&clientid=\").append(msiClientId);\r\n+            } else {\r\n+                urlString.append(\"&client_id=\").append(msiClientId);\r\n+            }\r\n+        }\r\n+\r\n+        // Loop while maxRetry reaches its limit\r\n+        while (retry <= maxRetry) {\r\n+            HttpURLConnection connection = null;\r\n+\r\n+            try {\r\n+                connection = (HttpURLConnection) new URL(urlString.toString()).openConnection();\r\n+                connection.setRequestMethod(\"GET\");\r\n+\r\n+                if (isAzureFunction) {\r\n+                    connection.setRequestProperty(\"Secret\", msiSecret);\r\n+                    if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                        connectionlogger.finer(\"Using Azure Function/App Service MSI auth: \" + urlString);\r\n+                    }\r\n+                } else {\r\n+                    connection.setRequestProperty(\"Metadata\", \"true\");\r\n+                    if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                        connectionlogger.finer(\"Using Azure MSI auth: \" + urlString);\r\n+                    }\r\n+                }\r\n+\r\n+                connection.connect();\r\n+\r\n+                try (InputStream stream = connection.getInputStream()) {\r\n+\r\n+                    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, UTF_8), 100);\r\n+                    String result = reader.readLine();\r\n+\r\n+                    int startIndex_AT = result.indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER)\r\n+                            + ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER.length();\r\n+\r\n+                    String accessToken = result.substring(startIndex_AT, result.indexOf(\"\\\"\", startIndex_AT + 1));\r\n+\r\n+                    Calendar cal = new Calendar.Builder().setInstant(new Date()).build();\r\n+\r\n+                    if (isAzureFunction) {\r\n+                        // Fetch expires_on\r\n+                        int startIndex_ATX = result\r\n+                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER)\r\n+                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length();\r\n+                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                        if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                            connectionlogger.finer(\"MSI auth token expires on: \" + accessTokenExpiry);\r\n+                        }\r\n+\r\n+                        DateFormat df = new SimpleDateFormat(\r\n+                                ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_DATE_FORMAT);\r\n+                        cal = new Calendar.Builder().setInstant(df.parse(accessTokenExpiry)).build();\r\n+                    } else {\r\n+                        // Fetch expires_in\r\n+                        int startIndex_ATX = result\r\n+                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER)\r\n+                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\r\n+                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                        cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r\n+                    }\r\n+\r\n+                    return new SqlFedAuthToken(accessToken, cal.getTime());\r\n+                }\r\n+            } catch (Exception e) {\r\n+                retry++;\r\n+                // Below code applicable only when !isAzureFunctcion (VM)\r\n+                if (retry > maxRetry) {\r\n+                    // Do not retry if maxRetry limit has been reached.\r\n+                    break;\r\n+                } else {\r\n+                    try {\r\n+                        int responseCode = connection.getResponseCode();\r\n+                        // Check Error Response Code from Connection\r\n+                        if (410 == responseCode || 429 == responseCode || 404 == responseCode\r\n+                                || (500 <= responseCode && 599 >= responseCode)) {\r", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 289ddd7c..5167917d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -354,8 +360,9 @@ class SQLServerSecurityUtility {\n                     try {\n                         int responseCode = connection.getResponseCode();\n                         // Check Error Response Code from Connection\n-                        if (410 == responseCode || 429 == responseCode || 404 == responseCode\n-                                || (500 <= responseCode && 599 >= responseCode)) {\n+                        if (GONE == responseCode || TOO_MANY_RESQUESTS == responseCode || NOT_FOUND == responseCode\n+                                || (INTERNAL_SERVER_ERROR <= responseCode\n+                                        && NETWORK_CONNECT_TIMEOUT_ERROR >= responseCode)) {\n                             try {\n                                 int retryTimeoutInMs = retrySlots.get(ThreadLocalRandom.current().nextInt(retry - 1));\n                                 // Error code 410 indicates IMDS upgrade is in progress, which can take up to 70s\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 289ddd7c..2a91ee1f 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -354,8 +360,9 @@ class SQLServerSecurityUtility {\n                     try {\n                         int responseCode = connection.getResponseCode();\n                         // Check Error Response Code from Connection\n-                        if (410 == responseCode || 429 == responseCode || 404 == responseCode\n-                                || (500 <= responseCode && 599 >= responseCode)) {\n+                        if (GONE == responseCode || TOO_MANY_RESQUESTS == responseCode || NOT_FOUND == responseCode\n+                                || (INTERNAL_SERVER_ERROR <= responseCode\n+                                        && NETWORK_CONNECT_TIMEOUT_ERROR >= responseCode)) {\n                             try {\n                                 int retryTimeoutInMs = retrySlots.get(ThreadLocalRandom.current().nextInt(retry - 1));\n                                 // Error code 410 indicates IMDS upgrade is in progress, which can take up to 70s\n", "next_change": {"commit": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 2a91ee1f..b8110f78 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -371,6 +446,9 @@ class SQLServerSecurityUtility {\n                                                                                    : retryTimeoutInMs;\n                                 Thread.sleep(retryTimeoutInMs);\n                             } catch (InterruptedException ex) {\n+                                // re-interrupt thread\n+                                Thread.currentThread().interrupt();\n+\n                                 // Throw runtime exception as driver must not be interrupted here\n                                 throw new RuntimeException(ex);\n                             }\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex b8110f78..277ddbc6 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -319,164 +319,104 @@ class SQLServerSecurityUtility {\n     }\n \n     /**\n-     * Get Managed Identity Authentication token\n+     * Get Managed Identity Authentication token through a ManagedIdentityCredential\n      * \n      * @param resource\n-     *        token resource\n-     * @param msiClientId\n-     *        Managed Identity or User Assigned Managed Identity\n+     *        Token resource.\n+     * @param managedIdentityClientId\n+     *        Client ID of the user-assigned Managed Identity.\n      * @return fedauth token\n      * @throws SQLServerException\n      */\n-    static SqlFedAuthToken getMSIAuthToken(String resource, String msiClientId) throws SQLServerException {\n-        // IMDS upgrade time can take up to 70s\n-        final int imdsUpgradeTimeInMs = 70 * 1000;\n-        final List<Integer> retrySlots = new ArrayList<>();\n-\n-        StringBuilder urlString = new StringBuilder();\n-        int retry = 1, maxRetry = 1;\n-\n-        // MSI_ENDPOINT and MSI_SECRET can be used instead of IDENTITY_ENDPOINT and IDENTITY_HEADER\n-        String identityEndpoint = System.getenv(\"IDENTITY_ENDPOINT\");\n-        if (null == identityEndpoint || identityEndpoint.trim().isEmpty()) {\n-            identityEndpoint = System.getenv(\"MSI_ENDPOINT\");\n-        }\n+    static SqlFedAuthToken getManagedIdentityCredAuthToken(String resource,\n+            String managedIdentityClientId) throws SQLServerException {\n+        ManagedIdentityCredential mic = null;\n \n-        String identityHeader = System.getenv(\"IDENTITY_HEADER\");\n-        if (null == identityHeader || identityHeader.trim().isEmpty()) {\n-            identityHeader = System.getenv(\"MSI_SECRET\");\n+        if (null != managedIdentityClientId && !managedIdentityClientId.isEmpty()) {\n+            mic = new ManagedIdentityCredentialBuilder().clientId(managedIdentityClientId).build();\n+        } else {\n+            mic = new ManagedIdentityCredentialBuilder().build();\n         }\n \n-        /*\n-         * isAzureFunction is used for identifying if the current client application is running in a Virtual Machine\n-         * (without Managed Identity environment variables) or App Service/Function (with Managed Identity environment\n-         * variables) as the APIs to be called for acquiring MSI Token are different for both cases.\n-         */\n-        boolean isAzureFunction = null != identityEndpoint && !identityEndpoint.isEmpty() && null != identityHeader\n-                && !identityHeader.isEmpty();\n+        TokenRequestContext tokenRequestContext = new TokenRequestContext();\n+        String scope = resource.endsWith(SQLServerMSAL4JUtils.SLASH_DEFAULT) ? resource : resource\n+                + SQLServerMSAL4JUtils.SLASH_DEFAULT;\n+        tokenRequestContext.setScopes(Arrays.asList(scope));\n \n-        if (isAzureFunction) {\n-            urlString.append(identityEndpoint).append(\"?api-version=2019-08-01&resource=\").append(resource);\n+        SqlFedAuthToken sqlFedAuthToken = null;\n+\n+        Optional<AccessToken> accessTokenOptional = mic.getToken(tokenRequestContext).blockOptional();\n+\n+        if (!accessTokenOptional.isPresent()) {\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_ManagedIdentityTokenAcquisitionFail\"),\n+                    null);\n         } else {\n-            urlString.append(ActiveDirectoryAuthentication.AZURE_REST_MSI_URL).append(\"&resource=\").append(resource);\n-            // Retry acquiring access token up to 20 times due to possible IMDS upgrade (Applies to VM only)\n-            maxRetry = 20;\n-            // Simplified variant of Exponential BackOff\n-            for (int x = 0; x < maxRetry; x++) {\n-                retrySlots.add(INTERNAL_SERVER_ERROR * ((2 << 1) - 1) / 1000);\n-            }\n+            AccessToken accessToken = accessTokenOptional.get();\n+            sqlFedAuthToken = new SqlFedAuthToken(accessToken.getToken(), accessToken.getExpiresAt().toEpochSecond());\n         }\n \n-        // Append Client Id if available\n-        if (null != msiClientId && !msiClientId.isEmpty()) {\n-            urlString.append(\"&client_id=\").append(msiClientId);\n-        }\n+        return sqlFedAuthToken;\n+    }\n \n-        // Loop while maxRetry reaches its limit\n-        while (retry <= maxRetry) {\n-            HttpURLConnection connection = null;\n+    /**\n+     * Get Managed Identity Authentication token through the DefaultAzureCredential\n+     *\n+     * @param resource\n+     *        Token resource.\n+     * @param managedIdentityClientId\n+     *        Client ID of the user-assigned Managed Identity.\n+     * @return fedauth token\n+     * @throws SQLServerException\n+     */\n+    static SqlFedAuthToken getDefaultAzureCredAuthToken(String resource,\n+            String managedIdentityClientId) throws SQLServerException {\n+        String intellijKeepassPath = System.getenv(INTELLIJ_KEEPASS_PASS);\n+        String[] additionallyAllowedTenants = getAdditonallyAllowedTenants();\n \n-            try {\n-                connection = (HttpURLConnection) new URL(urlString.toString()).openConnection();\n-                connection.setRequestMethod(\"GET\");\n-\n-                if (isAzureFunction) {\n-                    connection.setRequestProperty(\"X-IDENTITY-HEADER\", identityHeader);\n-                    if (connectionlogger.isLoggable(Level.FINER)) {\n-                        connectionlogger.finer(\"Using Azure Function/App Service Managed Identity auth: \" + urlString);\n-                    }\n-                } else {\n-                    connection.setRequestProperty(\"Metadata\", \"true\");\n-                    if (connectionlogger.isLoggable(Level.FINER)) {\n-                        connectionlogger.finer(\"Using Azure Managed Identity auth: \" + urlString);\n-                    }\n-                }\n+        DefaultAzureCredentialBuilder dacBuilder = new DefaultAzureCredentialBuilder();\n+        DefaultAzureCredential dac = null;\n \n-                connection.connect();\n+        if (null != managedIdentityClientId && !managedIdentityClientId.isEmpty()) {\n+            dacBuilder.managedIdentityClientId(managedIdentityClientId);\n+        }\n \n-                try (InputStream stream = connection.getInputStream()) {\n+        if (null != intellijKeepassPath && !intellijKeepassPath.isEmpty()) {\n+            dacBuilder.intelliJKeePassDatabasePath(intellijKeepassPath);\n+        }\n \n-                    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, UTF_8), 100);\n-                    StringBuilder result = new StringBuilder(reader.readLine());\n+        if (null != additionallyAllowedTenants && additionallyAllowedTenants.length != 0) {\n+            dacBuilder.additionallyAllowedTenants(additionallyAllowedTenants);\n+        }\n \n-                    int startIndex_AT = result.indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER)\n-                            + ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER.length();\n+        dac = dacBuilder.build();\n \n-                    String accessToken = result.substring(startIndex_AT, result.indexOf(\"\\\"\", startIndex_AT + 1));\n+        TokenRequestContext tokenRequestContext = new TokenRequestContext();\n+        String scope = resource.endsWith(SQLServerMSAL4JUtils.SLASH_DEFAULT) ? resource : resource\n+                + SQLServerMSAL4JUtils.SLASH_DEFAULT;\n+        tokenRequestContext.setScopes(Arrays.asList(scope));\n \n-                    Calendar cal = new Calendar.Builder().setInstant(new Date()).build();\n+        SqlFedAuthToken sqlFedAuthToken = null;\n \n-                    int startIndex_ATX;\n+        Optional<AccessToken> accessTokenOptional = dac.getToken(tokenRequestContext).blockOptional();\n \n-                    // Fetch expires_on\n-                    if (isAzureFunction) {\n-                        startIndex_ATX = result\n-                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER)\n-                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length();\n-                    } else {\n-                        startIndex_ATX = result\n-                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER)\n-                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\n-                    }\n+        if (!accessTokenOptional.isPresent()) {\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_ManagedIdentityTokenAcquisitionFail\"),\n+                    null);\n+        } else {\n+            AccessToken accessToken = accessTokenOptional.get();\n+            sqlFedAuthToken = new SqlFedAuthToken(accessToken.getToken(), accessToken.getExpiresAt().toEpochSecond());\n+        }\n \n-                    String accessTokenExpiry = result.substring(startIndex_ATX,\n-                            result.indexOf(\"\\\"\", startIndex_ATX + 1));\n-                    cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\n+        return sqlFedAuthToken;\n+    }\n \n-                    return new SqlFedAuthToken(accessToken, cal.getTime());\n-                }\n-            } catch (Exception e) {\n-                retry++;\n-                // Below code applicable only when !isAzureFunctcion (VM)\n-                if (retry > maxRetry) {\n-                    // Do not retry if maxRetry limit has been reached.\n-                    break;\n-                } else {\n-                    try {\n-                        int responseCode = connection.getResponseCode();\n-                        // Check Error Response Code from Connection\n-                        if (GONE == responseCode || TOO_MANY_RESQUESTS == responseCode || NOT_FOUND == responseCode\n-                                || (INTERNAL_SERVER_ERROR <= responseCode\n-                                        && NETWORK_CONNECT_TIMEOUT_ERROR >= responseCode)) {\n-                            try {\n-                                int retryTimeoutInMs = retrySlots.get(ThreadLocalRandom.current().nextInt(retry - 1));\n-                                // Error code 410 indicates IMDS upgrade is in progress, which can take up to 70s\n-                                retryTimeoutInMs = (responseCode == 410\n-                                        && retryTimeoutInMs < imdsUpgradeTimeInMs) ? imdsUpgradeTimeInMs\n-                                                                                   : retryTimeoutInMs;\n-                                Thread.sleep(retryTimeoutInMs);\n-                            } catch (InterruptedException ex) {\n-                                // re-interrupt thread\n-                                Thread.currentThread().interrupt();\n-\n-                                // Throw runtime exception as driver must not be interrupted here\n-                                throw new RuntimeException(ex);\n-                            }\n-                        } else {\n-                            if (null != msiClientId && !msiClientId.isEmpty()) {\n-                                throw new SQLServerException(\n-                                        SQLServerException.getErrString(\"R_MSITokenFailureImdsClientId\"), null);\n-                            } else {\n-                                throw new SQLServerException(SQLServerException.getErrString(\"R_MSITokenFailureImds\"),\n-                                        null);\n-                            }\n-                        }\n-                    } catch (IOException io) {\n-                        // Throw error as unexpected if response code not available\n-                        throw new SQLServerException(SQLServerException.getErrString(\"R_MSITokenFailureUnexpected\"),\n-                                null);\n-                    }\n-                }\n-            } finally {\n-                if (connection != null) {\n-                    connection.disconnect();\n-                }\n-            }\n-        }\n-        if (retry > maxRetry) {\n-            throw new SQLServerException(SQLServerException\n-                    .getErrString(isAzureFunction ? \"R_MSITokenFailureEndpoint\" : \"R_MSITokenFailureImds\"), null);\n+    private static String[] getAdditonallyAllowedTenants() {\n+        String additonallyAllowedTenants = System.getenv(ADDITIONALLY_ALLOWED_TENANTS);\n+\n+        if (null != additonallyAllowedTenants && !additonallyAllowedTenants.isEmpty()) {\n+            return System.getenv(ADDITIONALLY_ALLOWED_TENANTS).split(\",\");\n         }\n+\n         return null;\n     }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "3b4f0a20623ea57bfaf02deb2117b0cb7daac001", "committedDate": "2020-04-30 11:16:47 -0700", "message": "Fix "}, {"oid": "664c2407773ff27cdfed323fa7aed714f1e492d9", "committedDate": "2020-09-29 21:26:14 -0700", "message": "Updated to latest Azure SDK API (#1418)"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "1e7cdfe7702a6417477fd5d19ed6c0b1aa5e6c93", "committedDate": "2022-03-17 11:02:01 -0700", "message": "fix msi retry interval (#1770)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "c443c7c521676813b6a7da15740d7a8ffc1880d3", "committedDate": "2023-01-23 16:02:32 -0800", "message": "more fixes (#2049)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MTI3Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401081272", "body": "From ODBC docs, keyStorePrincipalId description:\r\n\r\nWhen KeyStoreAuthentication = KeyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.\r\nWhen KeyStoreAuthetication = KeyVaultClientSecret set this value to a valid Azure Active Directory Application Client ID", "bodyText": "From ODBC docs, keyStorePrincipalId description:\nWhen KeyStoreAuthentication = KeyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.\nWhen KeyStoreAuthetication = KeyVaultClientSecret set this value to a valid Azure Active Directory Application Client ID", "bodyHTML": "<p dir=\"auto\">From ODBC docs, keyStorePrincipalId description:</p>\n<p dir=\"auto\">When KeyStoreAuthentication = KeyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.<br>\nWhen KeyStoreAuthetication = KeyVaultClientSecret set this value to a valid Azure Active Directory Application Client ID</p>", "author": "ulvii", "createdAt": "2020-03-31T17:17:03Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Active Directory Application Client ID.", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzYzOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401153639", "bodyText": "Please set Javadoc to this\n    /**\n     * Sets the value for the connection property 'keyStorePrincipalId'.\n     * \n     * @param keyStorePrincipalId\n     * \n     *        <pre>\n     *        When keyStoreAuthentication = keyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.\n     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n     *        </pre>\n     */", "author": "ulvii", "createdAt": "2020-03-31T19:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MTI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex bee58181..c8fcacf2 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -824,6 +824,9 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     /**\n      * Sets the Azure Active Directory Application Client ID.\n      * \n+     * When KeyStoreAuthentication = KeyVaultClientSecret, set this value to a valid Azure Active Directory Application\n+     * Client ID\n+     * \n      * @param keyStorePrincipalId\n      *        Azure Active Directory Application Client ID.\n      */\n", "next_change": {"commit": "91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex c8fcacf2..8f8345d6 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,13 +822,14 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Active Directory Application Client ID.\n-     * \n-     * When KeyStoreAuthentication = KeyVaultClientSecret, set this value to a valid Azure Active Directory Application\n-     * Client ID\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n      * \n      * @param keyStorePrincipalId\n-     *        Azure Active Directory Application Client ID.\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n      */\n     void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex bee58181..af5d6d23 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -822,10 +852,14 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMSIClientId();\n \n     /**\n-     * Sets the Azure Active Directory Application Client ID.\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n      * \n      * @param keyStorePrincipalId\n-     *        Azure Active Directory Application Client ID.\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n      */\n     void setKeyStorePrincipalId(String keyStorePrincipalId);\n \n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex af5d6d23..f6104c6d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -834,161 +804,35 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n-\n-    /**\n-     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n-     * \n-     * @param msiClientId\n-     *        Client ID of User Assigned Managed Identity\n-     */\n-    void setMSIClientId(String msiClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'msiClientId'.\n-     * \n-     * @return msiClientId property value\n-     */\n-    String getMSIClientId();\n-\n-    /**\n-     * Sets the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @param keyStorePrincipalId\n-     * \n-     *        <pre>\n-     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n-     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n-     *        </pre>\n-     */\n-    void setKeyStorePrincipalId(String keyStorePrincipalId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyStorePrincipalId'.\n-     * \n-     * @return keyStorePrincipalId\n-     */\n-    String getKeyStorePrincipalId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientId\n-     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n-\n-    /**\n-     * Returns the value for the connection property 'keyVaultProviderClientId'.\n-     * \n-     * @return keyVaultProviderClientId\n-     */\n-    String getKeyVaultProviderClientId();\n-\n-    /**\n-     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n-     * \n-     * @param keyVaultProviderClientKey\n-     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n-     */\n-    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n-\n-    /**\n-     * Returns the value for the connection property 'domain'.\n-     * \n-     * @return 'domain' property value\n-     */\n-    String getDomain();\n+    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the 'domain' connection property used for NTLM Authentication.\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n      *\n-     * @param domain\n-     *        Windows domain name\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setDomain(String domain);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the current flag value for useFmtOnly.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n      *\n-     * @return 'useFmtOnly' property value.\n+     * @return maximum number of attempts\n      */\n-    boolean getUseFmtOnly();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Specifies the flag to use FMTONLY for parameter metadata queries.\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n      *\n-     * @param useFmtOnly\n-     *        boolean value for 'useFmtOnly'.\n-     */\n-    void setUseFmtOnly(boolean useFmtOnly);\n-\n-    /**\n-     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return enclave attestation URL.\n-     */\n-    String getEnclaveAttestationUrl();\n-\n-    /**\n-     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param url\n-     *        Enclave attestation URL.\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setEnclaveAttestationUrl(String url);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @return Enclave attestation protocol.\n-     */\n-    String getEnclaveAttestationProtocol();\n-\n-    /**\n-     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n-     * \n-     * @param protocol\n-     *        Enclave attestation protocol.\n-     */\n-    void setEnclaveAttestationProtocol(String protocol);\n-\n-    /**\n-     * Returns client certificate path for client certificate authentication.\n-     * \n-     * @return Client certificate path.\n-     */\n-    String getClientCertificate();\n-\n-    /**\n-     * Sets client certificate path for client certificate authentication.\n-     * \n-     * @param certPath\n-     *        Client certificate path.\n-     */\n-    void setClientCertificate(String certPath);\n-\n-    /**\n-     * Returns Private key file path for client certificate authentication.\n-     * \n-     * @return Private key file path.\n-     */\n-    String getClientKey();\n-\n-    /**\n-     * Sets Private key file path for client certificate authentication.\n-     * \n-     * @param keyPath\n-     *        Private key file path.\n-     */\n-    void setClientKey(String keyPath);\n-\n-    /**\n-     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n-     * \n-     * @param password\n-     *        Private key password.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    void setClientKeyPassword(String password);\n-\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex f6104c6d..6e401075 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -804,35 +834,176 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param useBulkCopyForBatchInsert\n      *        indicates whether Bulk Copy API should be used for Batch Insert operations.\n      */\n-    public void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n+    void setUseBulkCopyForBatchInsert(boolean useBulkCopyForBatchInsert);\n \n     /**\n-     * Sets the maximum number of attempts to reestablish a broken connection.\n-     *\n-     * @param connectRetryCount\n-     *        maximum number of attempts\n+     * Sets the client id to be used to retrieve access token from MSI EndPoint.\n+     * \n+     * @param msiClientId\n+     *        Client ID of User Assigned Managed Identity\n+     */\n+    void setMSIClientId(String msiClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'msiClientId'.\n+     * \n+     * @return msiClientId property value\n+     */\n+    String getMSIClientId();\n+\n+    /**\n+     * Sets the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @param keyStorePrincipalId\n+     * \n+     *        <pre>\n+     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n+     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n+     *        </pre>\n+     */\n+    void setKeyStorePrincipalId(String keyStorePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyStorePrincipalId'.\n+     * \n+     * @return keyStorePrincipalId\n+     */\n+    String getKeyStorePrincipalId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Id to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientId\n+     *        Client Id of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientId(String keyVaultProviderClientId);\n+\n+    /**\n+     * Returns the value for the connection property 'keyVaultProviderClientId'.\n+     * \n+     * @return keyVaultProviderClientId\n+     */\n+    String getKeyVaultProviderClientId();\n+\n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider Client Key to provided value to be used for column encryption.\n+     * \n+     * @param keyVaultProviderClientKey\n+     *        Client Key of Azure Key Vault (AKV) Provider to be used for column encryption.\n+     */\n+    void setKeyVaultProviderClientKey(String keyVaultProviderClientKey);\n+\n+    /**\n+     * Returns the value for the connection property 'domain'.\n+     * \n+     * @return 'domain' property value\n      */\n-    public void setConnectRetryCount(int connectRetryCount);\n+    String getDomain();\n \n     /**\n-     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     * Sets the 'domain' connection property used for NTLM Authentication.\n      *\n-     * @return maximum number of attempts\n+     * @param domain\n+     *        Windows domain name\n      */\n-    public int getConnectRetryCount();\n+    void setDomain(String domain);\n \n     /**\n-     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     * Returns the current flag value for useFmtOnly.\n      *\n-     * @param connectRetryInterval\n-     *        interval in seconds\n+     * @return 'useFmtOnly' property value.\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    boolean getUseFmtOnly();\n \n     /**\n-     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     * Specifies the flag to use FMTONLY for parameter metadata queries.\n      *\n-     * @return interval in seconds\n+     * @param useFmtOnly\n+     *        boolean value for 'useFmtOnly'.\n      */\n-    public int getConnectRetryInterval();\n+    void setUseFmtOnly(boolean useFmtOnly);\n+\n+    /**\n+     * Returns the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return enclave attestation URL.\n+     */\n+    String getEnclaveAttestationUrl();\n+\n+    /**\n+     * Sets the enclave attestation URL used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param url\n+     *        Enclave attestation URL.\n+     */\n+    void setEnclaveAttestationUrl(String url);\n+\n+    /**\n+     * Returns the enclave attestation protocol used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @return Enclave attestation protocol.\n+     */\n+    String getEnclaveAttestationProtocol();\n+\n+    /**\n+     * Sets the enclave attestation protocol to be used in Always Encrypted with Secure Enclaves.\n+     * \n+     * @param protocol\n+     *        Enclave attestation protocol.\n+     */\n+    void setEnclaveAttestationProtocol(String protocol);\n+\n+    /**\n+     * Returns client certificate path for client certificate authentication.\n+     * \n+     * @return Client certificate path.\n+     */\n+    String getClientCertificate();\n+\n+    /**\n+     * Sets client certificate path for client certificate authentication.\n+     * \n+     * @param certPath\n+     *        Client certificate path.\n+     */\n+    void setClientCertificate(String certPath);\n+\n+    /**\n+     * Returns Private key file path for client certificate authentication.\n+     * \n+     * @return Private key file path.\n+     */\n+    String getClientKey();\n+\n+    /**\n+     * Sets Private key file path for client certificate authentication.\n+     * \n+     * @param keyPath\n+     *        Private key file path.\n+     */\n+    void setClientKey(String keyPath);\n+\n+    /**\n+     * Sets the password to be used for Private key provided by the user for client certificate authentication.\n+     * \n+     * @param password\n+     *        Private key password.\n+     */\n+    void setClientKeyPassword(String password);\n+\n+    /**\n+     * Returns the current flag for value sendTemporalDataTypesAsStringForBulkCopy\n+     * \n+     * @return 'sendTemporalDataTypesAsStringForBulkCopy' property value.\n+     */\n+    boolean getSendTemporalDataTypesAsStringForBulkCopy();\n+\n+    /**\n+     * Specifies the flag to send temporal datatypes as String for Bulk Copy.\n+     * \n+     * @param sendTemporalDataTypesAsStringForBulkCopy\n+     *        boolean value for 'sendTemporalDataTypesAsStringForBulkCopy'.\n+     */\n+    void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n+\n }\n", "next_change": {"commit": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 6e401075..9288d59a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1006,4 +1021,34 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      */\n     void setSendTemporalDataTypesAsStringForBulkCopy(boolean sendTemporalDataTypesAsStringForBulkCopy);\n \n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalId'.\n+     *\n+     * @return 'AADSecurePrincipalId' property value.\n+     */\n+    String getAADSecurePrincipalId();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalId' connection property used for Active Directory Service Principal authentication.\n+     *\n+     * @param AADSecurePrincipalId\n+     *        Active Directory Service Principal Id.\n+     */\n+    void setAADSecurePrincipalId(String AADSecurePrincipalId);\n+\n+    /**\n+     * Returns the value for the connection property 'AADSecurePrincipalSecret'.\n+     *\n+     * @return 'AADSecurePrincipalSecret' property value.\n+     */\n+    String getAADSecurePrincipalSecret();\n+\n+    /**\n+     * Sets the 'AADSecurePrincipalSecret' connection property used for Active Directory Service Principal\n+     * authentication.\n+     *\n+     * @param AADSecurePrincipalSecret\n+     *        Active Directory Service Principal secret.\n+     */\n+    void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n }\n", "next_change": {"commit": "d9909748368af7d2944dab4fa382ee513f2b76f4", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 9288d59a..87152862 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1051,4 +1051,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      *        Active Directory Service Principal secret.\n      */\n     void setAADSecurePrincipalSecret(String AADSecurePrincipalSecret);\n+\n+    /**\n+     * Returns value of 'maxResultBuffer' from Connection String.\n+     *\n+     * @return 'maxResultBuffer' property.\n+     */\n+    String getMaxResultBuffer();\n+\n+    /**\n+     * Specifies value for 'maxResultBuffer' property\n+     *\n+     * @param maxResultBuffer\n+     *        String value for 'maxResultBuffer'\n+     */\n+    void setMaxResultBuffer(String maxResultBuffer);\n }\n", "next_change": {"commit": "af679a5f3754611273caa484fba9867a8e3c777c", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 87152862..1308a5cd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1060,10 +1060,42 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getMaxResultBuffer();\n \n     /**\n-     * Specifies value for 'maxResultBuffer' property\n+     * Sets the value for 'maxResultBuffer' property\n      *\n      * @param maxResultBuffer\n      *        String value for 'maxResultBuffer'\n      */\n     void setMaxResultBuffer(String maxResultBuffer);\n+\n+    /**\n+     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n+     * failure\n+     * \n+     * @param count\n+     *        the number of reconnection attempts if there is a connection failure\n+     */\n+    void setConnectRetryCount(int count);\n+\n+    /**\n+     * Returns the value of 'connectRetryCount' property\n+     * \n+     * @return 'connectRetryCount' property.\n+     */\n+    int getConnectRetryCount();\n+\n+    /**\n+     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n+     * attempt\n+     * \n+     * @param interval\n+     *        the number of seconds between each connection retry attempt\n+     */\n+    void setConnectRetryInterval(int interval);\n+\n+    /**\n+     * Returns the value of 'connectRetryInterval' property\n+     * \n+     * @return 'connectRetryInterval' property.\n+     */\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 1308a5cd..210bb34b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1068,34 +1099,32 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     void setMaxResultBuffer(String maxResultBuffer);\n \n     /**\n-     * Sets the 'connectRetryCount' property that specifies the number of reconnection attempts if there is a connection\n-     * failure\n-     * \n-     * @param count\n-     *        the number of reconnection attempts if there is a connection failure\n+     * Sets the maximum number of attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryCount\n+     *        maximum number of attempts\n      */\n-    void setConnectRetryCount(int count);\n+    public void setConnectRetryCount(int connectRetryCount);\n \n     /**\n-     * Returns the value of 'connectRetryCount' property\n-     * \n-     * @return 'connectRetryCount' property.\n+     * Returns the maximum number of attempts set to reestablish a broken connection.\n+     *\n+     * @return maximum number of attempts\n      */\n-    int getConnectRetryCount();\n+    public int getConnectRetryCount();\n \n     /**\n-     * Sets the 'connectRetryInterval' property that specifies the number of seconds between each connection retry\n-     * attempt\n-     * \n-     * @param interval\n-     *        the number of seconds between each connection retry attempt\n+     * Sets the interval, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @param connectRetryInterval\n+     *        interval in seconds\n      */\n-    void setConnectRetryInterval(int interval);\n+    public void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n-     * Returns the value of 'connectRetryInterval' property\n-     * \n-     * @return 'connectRetryInterval' property.\n+     * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n+     *\n+     * @return interval in seconds\n      */\n-    int getConnectRetryInterval();\n+    public int getConnectRetryInterval();\n }\n", "next_change": {"commit": "b08500889f68eff2ba740b29c644980398c68003", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 210bb34b..e9f55e9b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1119,12 +1119,12 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @param connectRetryInterval\n      *        interval in seconds\n      */\n-    public void setConnectRetryInterval(int connectRetryInterval);\n+    void setConnectRetryInterval(int connectRetryInterval);\n \n     /**\n      * Returns the interval set, in seconds, between attempts to reestablish a broken connection.\n      *\n      * @return interval in seconds\n      */\n-    public int getConnectRetryInterval();\n+    int getConnectRetryInterval();\n }\n", "next_change": {"commit": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex e9f55e9b..76db4be5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1127,4 +1126,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return interval in seconds\n      */\n     int getConnectRetryInterval();\n+\n+    /**\n+     * Sets the behavior for the prepare method. {@link PrepareMethod}\n+     *\n+     * @param prepareMethod\n+     *        Changes the setting as per description\n+     */\n+    void setPrepareMethod(String prepareMethod);\n+\n+    /**\n+     * Returns the value indicating the prepare method. {@link PrepareMethod}\n+     *\n+     * @return prepare method\n+     */\n+    String getPrepareMethod();\n }\n", "next_change": {"commit": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 76db4be5..c85bbd26 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1141,4 +1206,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return prepare method\n      */\n     String getPrepareMethod();\n+\n+    /**\n+     * Sets time-to-live for the the cached MSI token\n+     *\n+     * @param timeToLive\n+     *        Changes the setting as per description\n+     */\n+    void setMsiTokenCacheTtl(int timeToLive);\n+\n+    /**\n+     * Gets the time-to-live for the the cached MSI token\n+     *\n+     * @return time-to-live for the cached MSI token\n+     */\n+    int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex c85bbd26..19f98695 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1208,17 +1214,16 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     String getPrepareMethod();\n \n     /**\n-     * Sets time-to-live for the the cached MSI token\n-     *\n-     * @param timeToLive\n-     *        Changes the setting as per description\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method is a no-op for backwards compatibility only.\n      */\n+    @Deprecated\n     void setMsiTokenCacheTtl(int timeToLive);\n \n     /**\n-     * Gets the time-to-live for the the cached MSI token\n-     *\n-     * @return time-to-live for the cached MSI token\n+     * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n+     * This method will always return 0 and is for backwards compatibility only.\n      */\n+    @Deprecated\n     int getMsiTokenCacheTtl();\n }\n", "next_change": {"commit": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex 19f98695..a9ba172d 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1223,7 +1226,24 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n     /**\n      * Deprecated. Time-to-live is no longer supported for the cached Managed Identity tokens.\n      * This method will always return 0 and is for backwards compatibility only.\n+     *\n+     * @return Method will always return 0.\n      */\n     @Deprecated\n     int getMsiTokenCacheTtl();\n+\n+    /**\n+     * Sets the {@link SQLServerAccessTokenCallback} delegate.\n+     *\n+     * @param accessTokenCallback\n+     *        Access token callback delegate.\n+     */\n+    void setAccessTokenCallback(SQLServerAccessTokenCallback accessTokenCallback);\n+\n+    /**\n+     * Returns a {@link SQLServerAccessTokenCallback}, the access token callback delegate.\n+     *\n+     * @return Access token callback delegate.\n+     */\n+    SQLServerAccessTokenCallback getAccessTokenCallback();\n }\n", "next_change": {"commit": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\nindex a9ba172d..a435666e 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java\n", "chunk": "@@ -1246,4 +1268,19 @@ public interface ISQLServerDataSource extends javax.sql.CommonDataSource {\n      * @return Access token callback delegate.\n      */\n     SQLServerAccessTokenCallback getAccessTokenCallback();\n+\n+    /**\n+     * Returns the fully qualified class name of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @return accessTokenCallbackClass\n+     */\n+    String getAccessTokenCallbackClass();\n+\n+    /**\n+     * Sets 'accessTokenCallbackClass' to the fully qualified class name\n+     * of the implementing class for {@link SQLServerAccessTokenCallback}.\n+     *\n+     * @param accessTokenCallbackClass\n+     */\n+    void setAccessTokenCallbackClass(String accessTokenCallbackClass);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "af679a5f3754611273caa484fba9867a8e3c777c", "committedDate": "2021-03-26 11:23:38 -0700", "message": "Added connectRetryCount and connectRetryInterval to SQLServerDatasource (#1546)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "fb15da6ed2b8e9c754f23a17d1c7fcd5a4611f2f", "committedDate": "2021-06-04 16:19:00 -0700", "message": "Add optional realm connection string property for Kerberos authentication (#1581)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "21bdb7aad2830f7a1886baae5420ebdc3eea4d3b", "committedDate": "2021-11-03 11:46:28 -0700", "message": "Many code review fixes"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "ecb0ecc06d64118de580aaba2e21a0f09a94c5c1", "committedDate": "2022-05-30 14:34:11 -0700", "message": "fixed typo (#1838)"}, {"oid": "62ac085563aa263415b5ac0db5cf178ba19d2d63", "committedDate": "2022-05-31 00:34:30 -0700", "message": "Fixed javadocs (#1840)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4Nzg5MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401087890", "body": "Please add proper javadoc, this is a public API.", "bodyText": "Please add proper javadoc, this is a public API.", "bodyHTML": "<p dir=\"auto\">Please add proper javadoc, this is a public API.</p>", "author": "ulvii", "createdAt": "2020-03-31T17:27:29Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -720,6 +722,23 @@ public static synchronized void registerColumnEncryptionKeyStoreProviders(\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n+    /**\n+     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "795e653ee609c10fc71ed37f08e7174e9b78b87b", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..0c34874a 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -717,23 +706,24 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n     /**\n-     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n      */\n     public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n         if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n             globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n                                 .size() : 0));\n", "next_change": {"commit": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 0c34874a..32415ac8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -724,9 +725,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n \n         loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered:\"\n-                        + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n-                                .size() : 0));\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n     synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 96ea4030..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -717,26 +718,26 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n     /**\n-     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n+     * the map and setting it to null.\n      */\n     public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n         if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n             globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered:\"\n-                        + (null != globalCustomColumnEncryptionKeyStoreProviders ? globalCustomColumnEncryptionKeyStoreProviders\n-                                .size() : 0));\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n     synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 3973bfc8..7e6320f2 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -718,37 +659,25 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n-    /**\n-     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n-     * the map and setting it to null.\n-     */\n-    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Removing Column Encryption Key Store Provider\");\n-\n-        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n-            globalCustomColumnEncryptionKeyStoreProviders.clear();\n-            globalCustomColumnEncryptionKeyStoreProviders = null;\n-        }\n-\n-        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n-                \"Number of Key store providers that are registered: 0\");\n-    }\n-\n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n+    static synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n             String providerName) {\n-        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        if (null != globalSystemColumnEncryptionKeyStoreProviders\n+                && globalSystemColumnEncryptionKeyStoreProviders.containsKey(providerName)) {\n+            return globalSystemColumnEncryptionKeyStoreProviders.get(providerName);\n+        }\n+        return null;\n     }\n \n-    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n-                .keySet().toString() : null;\n+    static synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders)\n+            return globalCustomColumnEncryptionKeyStoreProviders.keySet().toString();\n+        else\n+            return null;\n     }\n \n     synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n", "next_change": {"commit": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 7e6320f2..e1d12210 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -659,25 +737,37 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             globalCustomColumnEncryptionKeyStoreProviders.put(entry.getKey(), entry.getValue());\n         }\n \n-        loggerExternal.exiting(SQLServerConnection.class.getName(), \"registerColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered:\"\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n-    static synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        if (null != globalSystemColumnEncryptionKeyStoreProviders\n-                && globalSystemColumnEncryptionKeyStoreProviders.containsKey(providerName)) {\n-            return globalSystemColumnEncryptionKeyStoreProviders.get(providerName);\n+    /**\n+     * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n+     * the map and setting it to null.\n+     */\n+    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Removing Column Encryption Key Store Provider\");\n+\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+            globalCustomColumnEncryptionKeyStoreProviders.clear();\n+            globalCustomColumnEncryptionKeyStoreProviders = null;\n         }\n-        return null;\n+\n+        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Number of Key store providers that are registered: 0\");\n     }\n \n-    static synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        if (null != globalCustomColumnEncryptionKeyStoreProviders)\n-            return globalCustomColumnEncryptionKeyStoreProviders.keySet().toString();\n-        else\n-            return null;\n+    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n+            String providerName) {\n+        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n+                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    }\n+\n+    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n+                .keySet().toString() : null;\n     }\n \n     synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n", "next_change": {"commit": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..be09b2b4 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -746,80 +992,218 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n      * Unregisters all the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders by clearing\n      * the map and setting it to null.\n      */\n-    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n-        loggerExternal.entering(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+    public static void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(loggingClassNameBase, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Removing Column Encryption Key Store Provider\");\n \n-        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n-            globalCustomColumnEncryptionKeyStoreProviders.clear();\n-            globalCustomColumnEncryptionKeyStoreProviders = null;\n+        LOCK.lock();\n+        try {\n+            if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+                globalCustomColumnEncryptionKeyStoreProviders.clear();\n+                globalCustomColumnEncryptionKeyStoreProviders = null;\n+            }\n+        } finally {\n+            LOCK.unlock();\n         }\n \n-        loggerExternal.exiting(loggingClassName, \"unregisterColumnEncryptionKeyStoreProviders\",\n+        loggerExternal.exiting(loggingClassNameBase, \"unregisterColumnEncryptionKeyStoreProviders\",\n                 \"Number of Key store providers that are registered: 0\");\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getGlobalSystemColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != globalSystemColumnEncryptionKeyStoreProviders && globalSystemColumnEncryptionKeyStoreProviders.containsKey(\n+                    providerName)) ? globalSystemColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders) ? globalCustomColumnEncryptionKeyStoreProviders\n-                .keySet().toString() : null;\n+    String getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            return (null != globalCustomColumnEncryptionKeyStoreProviders)\n+                    ? globalCustomColumnEncryptionKeyStoreProviders.keySet().toString() : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized String getAllSystemColumnEncryptionKeyStoreProviders() {\n-        String keyStores = \"\";\n-        if (0 != systemColumnEncryptionKeyStoreProvider.size())\n-            keyStores = systemColumnEncryptionKeyStoreProvider.keySet().toString();\n-        if (0 != SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.size())\n-            keyStores += \",\" + SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.keySet().toString();\n-        return keyStores;\n+    String getAllSystemColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            String keyStores = \"\";\n+            if (0 != systemColumnEncryptionKeyStoreProvider.size()) {\n+                keyStores = systemColumnEncryptionKeyStoreProvider.keySet().toString();\n+            }\n+            if (0 != SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.size()) {\n+                keyStores += \",\" + SQLServerConnection.globalSystemColumnEncryptionKeyStoreProviders.keySet()\n+                        .toString();\n+            }\n+            return keyStores;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getGlobalCustomColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != globalCustomColumnEncryptionKeyStoreProviders && globalCustomColumnEncryptionKeyStoreProviders\n-                .containsKey(providerName)) ? globalCustomColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getGlobalCustomColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != globalCustomColumnEncryptionKeyStoreProviders && globalCustomColumnEncryptionKeyStoreProviders.containsKey(\n+                    providerName)) ? globalCustomColumnEncryptionKeyStoreProviders.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getSystemColumnEncryptionKeyStoreProvider(\n-            String providerName) {\n-        return (null != systemColumnEncryptionKeyStoreProvider && systemColumnEncryptionKeyStoreProvider\n-                .containsKey(providerName)) ? systemColumnEncryptionKeyStoreProvider.get(providerName) : null;\n+    SQLServerColumnEncryptionKeyStoreProvider getSystemColumnEncryptionKeyStoreProvider(String providerName) {\n+        lock.lock();\n+        try {\n+            return (null != systemColumnEncryptionKeyStoreProvider && systemColumnEncryptionKeyStoreProvider.containsKey(\n+                    providerName)) ? systemColumnEncryptionKeyStoreProvider.get(providerName) : null;\n+        } finally {\n+            lock.unlock();\n+        }\n     }\n \n-    synchronized SQLServerColumnEncryptionKeyStoreProvider getColumnEncryptionKeyStoreProvider(\n+    SQLServerColumnEncryptionKeyStoreProvider getSystemOrGlobalColumnEncryptionKeyStoreProvider(\n             String providerName) throws SQLServerException {\n+        lock.lock();\n+        try {\n+            // check for global system providers\n+            keystoreProvider = getGlobalSystemColumnEncryptionKeyStoreProvider(providerName);\n+\n+            // Check for the connection system provider.\n+            if (null == keystoreProvider) {\n+                keystoreProvider = getSystemColumnEncryptionKeyStoreProvider(providerName);\n+            }\n \n-        // Check for the connection provider first.\n-        keystoreProvider = getSystemColumnEncryptionKeyStoreProvider(providerName);\n+            // There is no global system provider of this name, check for the global custom providers.\n+            if (null == keystoreProvider) {\n+                keystoreProvider = getGlobalCustomColumnEncryptionKeyStoreProvider(providerName);\n+            }\n \n-        // There is no connection provider of this name, check for the global system providers.\n-        if (null == keystoreProvider) {\n-            keystoreProvider = getGlobalSystemColumnEncryptionKeyStoreProvider(providerName);\n+            // No provider was found of this name.\n+            if (null == keystoreProvider) {\n+                String systemProviders = getAllSystemColumnEncryptionKeyStoreProviders();\n+                String customProviders = getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders();\n+                MessageFormat form = new MessageFormat(\n+                        SQLServerException.getErrString(\"R_UnrecognizedKeyStoreProviderName\"));\n+                Object[] msgArgs = {providerName, systemProviders, customProviders};\n+                throw new SQLServerException(form.format(msgArgs), null);\n+            }\n+\n+            return keystoreProvider;\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    boolean hasConnectionColumnEncryptionKeyStoreProvidersRegistered() {\n+        lock.lock();\n+        try {\n+            return null != connectionColumnEncryptionKeyStoreProvider && connectionColumnEncryptionKeyStoreProvider.size() > 0;\n+        } finally {\n+            lock.unlock();\n         }\n+    }\n \n-        // There is no global system provider of this name, check for the global custom providers.\n-        if (null == keystoreProvider) {\n-            keystoreProvider = getGlobalCustomColumnEncryptionKeyStoreProvider(providerName);\n+    String getAllConnectionColumnEncryptionKeyStoreProviders() {\n+        lock.lock();\n+        try {\n+            String keyStores = \"\";\n+            if (0 != connectionColumnEncryptionKeyStoreProvider.size()) {\n+                keyStores = connectionColumnEncryptionKeyStoreProvider.keySet().toString();\n+            }\n+            return keyStores;\n+        } finally {\n+            lock.unlock();\n         }\n+    }\n \n-        // No provider was found of this name.\n-        if (null == keystoreProvider) {\n-            String systemProviders = getAllSystemColumnEncryptionKeyStoreProviders();\n-            String customProviders = getAllGlobalCustomSystemColumnEncryptionKeyStoreProviders();\n-            MessageFormat form = new MessageFormat(\n-                    SQLServerException.getErrString(\"R_UnrecognizedKeyStoreProviderName\"));\n-            Object[] msgArgs = {providerName, systemProviders, customProviders};\n-            throw new SQLServerException(form.format(msgArgs), null);\n+    SQLServerColumnEncryptionKeyStoreProvider getColumnEncryptionKeyStoreProviderOnConnection(\n+            String providerName) throws SQLServerException {\n+        lock.lock();\n+        try {\n+            // Check for a connection-level provider first\n+            if (null != connectionColumnEncryptionKeyStoreProvider\n+                    && connectionColumnEncryptionKeyStoreProvider.size() > 0) {\n+                // If any connection-level providers are registered, we don't fall back to system/global providers\n+                if (connectionColumnEncryptionKeyStoreProvider.containsKey(providerName)) {\n+                    return connectionColumnEncryptionKeyStoreProvider.get(providerName);\n+                } else {\n+                    MessageFormat form = new MessageFormat(\n+                            SQLServerException.getErrString(\"R_UnrecognizedConnectionKeyStoreProviderName\"));\n+                    Object[] msgArgs = {providerName, getAllConnectionColumnEncryptionKeyStoreProviders()};\n+                    throw new SQLServerException(form.format(msgArgs), null);\n+                }\n+            }\n+\n+            // No connection-level providers registered, so return system/global provider\n+            return getSystemOrGlobalColumnEncryptionKeyStoreProvider(providerName);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /** This is a user-defined per-connection store provider. */\n+    Map<String, SQLServerColumnEncryptionKeyStoreProvider> connectionColumnEncryptionKeyStoreProvider = new HashMap<>();\n+\n+    /**\n+     * Registers connection-level key store providers, replacing all existing providers.\n+     *\n+     * @param clientKeyStoreProviders\n+     *         a map containing the store providers information.\n+     * @throws SQLServerException\n+     *         when an error occurs\n+     */\n+    public void registerColumnEncryptionKeyStoreProvidersOnConnection(\n+            Map<String, SQLServerColumnEncryptionKeyStoreProvider> clientKeyStoreProviders) throws SQLServerException {\n+        loggerExternal.entering(loggingClassName, \"registerColumnEncryptionKeyStoreProvidersOnConnection\",\n+                \"Registering Column Encryption Key Store Providers on Connection\");\n+        lock.lock();\n+        try {\n+            if (null == clientKeyStoreProviders) {\n+                throw new SQLServerException(null, SQLServerException.getErrString(\"R_CustomKeyStoreProviderMapNull\"),\n+                        null, 0, false);\n+            }\n+\n+            connectionColumnEncryptionKeyStoreProvider.clear();\n+\n+            for (Map.Entry<String, SQLServerColumnEncryptionKeyStoreProvider> entry : clientKeyStoreProviders.entrySet()) {\n+                String providerName = entry.getKey();\n+                if (null == providerName || 0 == providerName.trim().length()) {\n+                    throw new SQLServerException(null,\n+                            SQLServerException.getErrString(\"R_EmptyCustomKeyStoreProviderName\"), null, 0, false);\n+                }\n+\n+                // MSSQL_CERTIFICATE_STORE not allowed on connection level\n+                if ((providerName.equalsIgnoreCase(WINDOWS_KEY_STORE_NAME))) {\n+                    MessageFormat form = new MessageFormat(\n+                            SQLServerException.getErrString(\"R_InvalidCustomKeyStoreProviderName\"));\n+                    Object[] msgArgs = {providerName, WINDOWS_KEY_STORE_NAME};\n+                    throw new SQLServerException(null, form.format(msgArgs), null, 0, false);\n+                }\n+\n+                if (null == entry.getValue()) {\n+                    throw new SQLServerException(null,\n+                            String.format(SQLServerException.getErrString(\"R_CustomKeyStoreProviderValueNull\"),\n+                                    providerName), null, 0, false);\n+                }\n+\n+                connectionColumnEncryptionKeyStoreProvider.put(entry.getKey(), entry.getValue());\n+            }\n+        } finally {\n+            lock.unlock();\n         }\n \n-        return keystoreProvider;\n+        loggerExternal.exiting(loggingClassName, \"registerColumnEncryptionKeyStoreProvidersOnConnection\",\n+                \"Number of connection-level Key store providers that are registered: \"\n+                        + connectionColumnEncryptionKeyStoreProvider.size());\n     }\n \n+    /** trusted servername AE */\n     private String trustedServerNameAE = null;\n     private static Map<String, List<String>> columnEncryptionTrustedMasterKeyPaths = new HashMap<>();\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "7e67a2351c64cdb16a1b5faf0ba1feaba0980df7", "committedDate": "2018-10-11 15:12:12 -0700", "message": "Add "}, {"oid": "6618054fad0e2b01efc15bee1686880959cfebbf", "committedDate": "2018-10-12 16:20:12 -0700", "message": "Add "}, {"oid": "98cdc4140f5fce1e0691a386b9f7cb1dc1cacbda", "committedDate": "2018-10-12 16:25:31 -0700", "message": "Fix "}, {"oid": "3e2a2fd8e035b89eae1379f0bac5873e54360045", "committedDate": "2018-10-15 14:35:15 -0700", "message": "Fix "}, {"oid": "5d5f0a66d0d89ede79187d5a062303509b89e986", "committedDate": "2018-10-15 16:56:50 -0700", "message": "Fix "}, {"oid": "a901cbb419731119a12a6729ea38e0fe2c696b89", "committedDate": "2018-10-15 16:57:14 -0700", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "c25833fb18adcbe9bdb180329955784ad6bf35d5", "committedDate": "2018-11-05 10:09:26 -0800", "message": "update from Microsoft/dev"}, {"oid": "70f1fd52b37558a3da52721f765da3bfa7312fca", "committedDate": "2018-11-08 14:16:59 -0800", "message": "add reconnect thread"}, {"oid": "cc192d36986c1c13fda64f1fa9f2e141e822d26d", "committedDate": "2018-11-08 16:33:58 -0800", "message": "reconnect thread and part of the session recovery writing"}, {"oid": "dfb4cadc777b3cd9e9217a5c08721b455dba4442", "committedDate": "2018-11-08 16:43:24 -0800", "message": "Revert \"reconnect thread and part of the session recovery writing\""}, {"oid": "77f83280273ed455cf3e41db560258f217b7ecf8", "committedDate": "2018-11-08 17:02:30 -0800", "message": "removing writeSessionState changes"}, {"oid": "24cedbb36f493f6e44847c16aa2ee24204f9102b", "committedDate": "2018-11-09 10:45:12 -0800", "message": "remove executors and needless synchronizers"}, {"oid": "521cf633ba3330f47c44e335a86d6d4916127c93", "committedDate": "2018-11-09 10:53:51 -0800", "message": "removed unused imports, formatting, clean up, etc"}, {"oid": "f1a7d2dcff85aeade55dce2df52c58a9d523c17b", "committedDate": "2018-11-09 11:50:15 -0800", "message": "comment"}, {"oid": "a73c39bf43f687d042eed3d552b8de45f49d5c11", "committedDate": "2018-11-09 13:12:08 -0800", "message": "removing duplicate code"}, {"oid": "85fdb019927f71b11a4b22e161bb5f0651ece409", "committedDate": "2018-11-09 13:13:36 -0800", "message": "formatting"}, {"oid": "8180cba1c2a818ece1d5c3c7182fb7153e0380e0", "committedDate": "2018-11-09 13:19:13 -0800", "message": "Add "}, {"oid": "88d49f0de7a2b203e0f794f43a74557d2eccf781", "committedDate": "2018-11-09 13:36:11 -0800", "message": "Merge branch 'ICREnableFeature' of https://github.com/ulvii/mssql-jdbc into ICREnableFeatureMergeFix"}, {"oid": "920706e41ed1e47389e1251452fbedc836485d28", "committedDate": "2018-11-09 14:41:39 -0800", "message": "removing isReconnecting"}, {"oid": "559ed08cf7138ce3f33f7a6873a6a7dfb2f2efa6", "committedDate": "2018-11-09 15:34:46 -0800", "message": "removing isReconnecting"}, {"oid": "036d9532b200913c2cbcbfee94c234abf3221df9", "committedDate": "2018-11-09 15:36:57 -0800", "message": "Add "}, {"oid": "503076fe213e018506f690177c32011f8ec22b62", "committedDate": "2018-11-09 15:41:30 -0800", "message": "adding resource"}, {"oid": "18d4bec283ca6daa52229f575c55ee7542ad0515", "committedDate": "2018-11-09 16:04:20 -0800", "message": "removing comment"}, {"oid": "eaf3516af7518d128271a6751e73bd679478c9e6", "committedDate": "2018-11-09 16:13:09 -0800", "message": "renaming rt to reconnectThread"}, {"oid": "a1ab97e3308cbef1345709f93c1ef317b277d016", "committedDate": "2018-11-09 17:23:29 -0800", "message": "moved reconnectThread into session recovery class"}, {"oid": "6e4665b2ce157c402ba8a49384bc79ce7f8cf6c6", "committedDate": "2018-11-09 17:55:52 -0800", "message": "Add "}, {"oid": "0170f891a15e70c7bf10af283f35a4a55e42a874", "committedDate": "2018-11-13 18:17:55 -0800", "message": "Fix "}, {"oid": "baaf32fb0c39be005484faaf45b1c51a63411ba3", "committedDate": "2018-11-14 13:50:11 -0800", "message": "Revert checks before creating session state table for now"}, {"oid": "5be2dfb03ba23afc08398404bd6fc5971e0b8bc7", "committedDate": "2018-11-14 16:56:24 -0800", "message": "Fix "}, {"oid": "5e940e7f48a1059511dbbfa8e5c0f36fff914df1", "committedDate": "2018-11-22 13:41:27 -0800", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "1db13b4bf74544ead81bf1ba25f12d294a4a5335", "committedDate": "2018-11-22 14:10:38 -0800", "message": "Login logic for reconnect"}, {"oid": "efc219317ca921791ec5c1a8e903415f52361997", "committedDate": "2018-11-23 14:53:51 -0800", "message": "Query timeout logic for connection resiliency"}, {"oid": "0ea565d77f782ebd466132c200f5cff63b137d7c", "committedDate": "2018-11-23 15:57:47 -0800", "message": "Fix "}, {"oid": "f9d975f3ccb6a2d68668fa61d99b435aee7e8da1", "committedDate": "2018-11-30 14:08:21 -0800", "message": "fix for not immediately failing if database not found (#16)"}, {"oid": "7bdd7ed447257570f5541a8075c485720fe3701e", "committedDate": "2018-12-05 17:44:34 -0800", "message": "Fix "}, {"oid": "0e430d202c09e647f44fa234c230b7c01828713c", "committedDate": "2018-12-06 10:23:04 -0800", "message": "Tds token error (#17)"}, {"oid": "1ae8e3c4244d7169df1115e9bb864a47bbba83b2", "committedDate": "2018-12-11 10:47:50 -0800", "message": "Add tests (#19)"}, {"oid": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "committedDate": "2020-04-29 16:10:57 -0700", "message": "Append server name from connection string to error message (#1311)"}, {"oid": "639d22c817499e3cf57143a16b82a07faeff317e", "committedDate": "2020-04-30 10:46:31 -0700", "message": "Check tls protocol version and throw warning (#1322)"}, {"oid": "426e5aec87f09307e0705abfdc33b18a7255613c", "committedDate": "2020-05-01 10:44:19 -0700", "message": "Adding Delayed Durability to commit API(#1310)"}, {"oid": "a2fc81ed55767eb7f40227159e001ee6f4868130", "committedDate": "2020-05-07 12:04:27 -0700", "message": "Fix #1325, return correct sql state when connection is closed (#1326)"}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "326a06aea6a561c4d625c7fbb07ca147a5b3acfe", "committedDate": "2020-05-27 17:15:24 -0700", "message": "Release "}, {"oid": "c9846285ec2f9368577101ecb117186844ef3437", "committedDate": "2020-06-24 10:27:48 -0700", "message": "Feature "}, {"oid": "99138fa1fe4b5277d8f758a53f10d197ec41b54b", "committedDate": "2020-06-24 14:26:22 -0700", "message": "Feature "}, {"oid": "423be4a8d58eb350f533c14acf241e0c44d64fb1", "committedDate": "2020-07-20 14:46:09 -0700", "message": "Change "}, {"oid": "a87bccfea1616717fa5ac8cd6d338d9ea7dae6d3", "committedDate": "2020-07-30 11:03:44 -0700", "message": "Release "}, {"oid": "606e722fbee129a4fd0de89423f5a934207522b0", "committedDate": "2020-08-24 12:37:49 -0700", "message": "Fix "}, {"oid": "8ad2371ec899daf135e4bbd35b54bd17311e14d2", "committedDate": "2020-10-09 10:00:43 -0700", "message": "Fix "}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "af76d7af3846801be86f7f94fbc3318b1ed5bc04", "committedDate": "2020-10-14 17:55:14 -0700", "message": "Make adal4j test dependency only (#1447)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "bd776c2b48691897cee900cc6e821d171f18513a", "committedDate": "2020-11-27 17:53:56 -0800", "message": "Added support for ActiveDirectoryInteractive authentication (#1464)"}, {"oid": "57c3fc3794d978e1886df81d1178989703b851ff", "committedDate": "2021-01-12 11:53:14 -0800", "message": "Handle MFA timeouts during ActiveDirectoryInteractive authentication by retrying connection (#1488)"}, {"oid": "428f14764f910ec527ce00ede0cdee74c2a6de13", "committedDate": "2021-01-25 12:19:07 -0800", "message": "Fix "}, {"oid": "567ae6ee992f81e945bead5be05a36ab2c744fe5", "committedDate": "2021-02-22 14:30:55 -0800", "message": "Fix clientSecret is null or empty for ActiveDirectoryServicePrincipal in Azure container (#1519)"}, {"oid": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "committedDate": "2021-03-19 14:20:41 -0700", "message": "Open Connection Retry (#1535)"}, {"oid": "0fc61a7e6d54ed0e0e5559ddec0d635a0d7b0d86", "committedDate": "2021-03-24 12:55:09 -0700", "message": "Added Azure Synapse serverless SQL pool, Azure SQL Edge and also updated name for Azure Synapse Analytics (#1543)"}, {"oid": "66b86319ee7fa04c739f04922a8f4666671e8d68", "committedDate": "2021-03-30 15:47:56 -0700", "message": "Added check for invalid timeout (#1555)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "ae65652f0edaaca44d2eee4a4b3f44d2233d9860", "committedDate": "2021-04-26 15:41:31 -0700", "message": "Fixes trustStorePassword set to null when using applicationIntent=ReadOnly (#1565)"}, {"oid": "40a6a22f6b4bbe2ca4e467efcca2f60651ee1e4c", "committedDate": "2021-04-27 12:24:13 -0700", "message": "Fixed issue when redirected token contains named instance in servername (#1568)"}, {"oid": "0f3e0a10f2f85b5b357811907fdb487d63e49830", "committedDate": "2021-04-27 20:57:33 -0700", "message": "Fixed javadoc warnings (#1570)"}, {"oid": "a5e9ca7678f700fd77eb3d4dd856f4067c11eea0", "committedDate": "2021-05-20 11:31:24 -0700", "message": "Send the driver version to the database during prelogin (#1583)"}, {"oid": "574b1e1aefecd1162bccf064a26c8e76a9a2c5bf", "committedDate": "2021-06-11 15:01:35 -0700", "message": "Send client process ID to server on Java 9+ (#1595)"}, {"oid": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "committedDate": "2021-06-14 13:17:54 -0700", "message": "Fix multiple, successive connections using AKV provider (#1594)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "ad258e21abb401d7bde3073370ad8a7ef16da198", "committedDate": "2021-07-12 13:00:48 -0700", "message": "Fixing test fails"}, {"oid": "8172599fd735a5481b784ed9ef0237b9ab6f7ea2", "committedDate": "2021-07-30 17:23:52 -0700", "message": "Remove Java 9-specific class references from the Java 8 jar (#1626)"}, {"oid": "379a57ce0a3bce03096902474bbfa883959015aa", "committedDate": "2021-08-04 11:48:54 -0700", "message": "Fix memory leak (#1633)"}, {"oid": "a61fbb7cc39a55d66708de929589e165c7e9ccaf", "committedDate": "2021-08-12 10:20:32 -0700", "message": "Catching up to dev, 9.5, fixing merge conflicts"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "0641e315ebd547d407aa844177c05a68e577490d", "committedDate": "2021-08-24 10:19:13 -0700", "message": "fixed feature ack ext"}, {"oid": "09d35bfc2338f1fc7c41a958d1e627fa0d6a2b65", "committedDate": "2021-08-30 11:57:00 -0700", "message": "Add 42108 and 42109 to transient errors list (#1643)"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "1bd85226d25e8b04aed601830fc322c9080811b7", "committedDate": "2021-09-03 14:41:34 -0700", "message": "Fixed a few more tests"}, {"oid": "4693c26b91ba02379f3f11a6eb839ad2e75d3959", "committedDate": "2021-09-07 14:07:27 -0700", "message": "Fixed retryinterval valid"}, {"oid": "0f266c05905874e6f8fb8739d08a7a3e9c9d0256", "committedDate": "2021-09-22 01:16:09 -0700", "message": "Fixed ResiliencyUtil for PooledConnections"}, {"oid": "11990186d8cdcd41d6192702805ece43134eb1ba", "committedDate": "2021-09-22 11:25:29 -0700", "message": "Catching up to dev"}, {"oid": "1d85778906f01fd4835b90b1c2c845d313b3796f", "committedDate": "2021-09-30 10:27:53 -0700", "message": "Reset lang-db-collation"}, {"oid": "47748db76bc86c2e4e237d207f22214eedf05c86", "committedDate": "2021-09-30 12:34:18 -0700", "message": "Missing break"}, {"oid": "54c27e931d2b9d8adbaa983d91c73219861c2d90", "committedDate": "2021-10-13 13:42:56 -0700", "message": "Fixed Polling and Tests for ICR"}, {"oid": "34e3b94ed40ffb12d1062581c687e04a7981d5df", "committedDate": "2021-10-21 11:48:42 -0700", "message": "Checks in case of slow dc vs azuredb"}, {"oid": "890778927388df2139136a5b08c56fa3db64f855", "committedDate": "2021-10-21 14:06:21 -0700", "message": "Reflection instead of public method"}, {"oid": "d3709f3119b668f16577d7a6958b54df253654c8", "committedDate": "2021-10-26 09:58:36 -0700", "message": "Limited runs of tests"}, {"oid": "5715001be63180e0aca9e12543f8c4ef4d368deb", "committedDate": "2021-10-28 02:31:50 -0700", "message": "Addressing code review comments"}, {"oid": "1a5206e06f8313d7d02b81a40559e67a566c35d7", "committedDate": "2021-11-02 17:12:34 -0700", "message": "Catching up to Dev, Addressing review comments"}, {"oid": "3a2a6ab60574035bd33c7f53457e18c66630d57a", "committedDate": "2021-11-04 12:57:28 -0700", "message": "refactored testutils"}, {"oid": "f4ef4f47b7e6d4abc4b6cabf7463d655006aa8cd", "committedDate": "2021-11-04 22:37:22 -0700", "message": "resolving comments"}, {"oid": "8f94517ccbc32ba026084ec605e0e7dcb2227946", "committedDate": "2021-11-05 00:33:50 -0700", "message": "Fixes"}, {"oid": "7cb16845fd7c26b0108bd57e8a7207c39f337b72", "committedDate": "2021-11-23 14:40:40 -0800", "message": "New Exception Message (#1683)"}, {"oid": "6ca48b39945ca12d3350218fefdd806e5e42608f", "committedDate": "2021-11-25 13:17:41 -0800", "message": "Fixed ActiveDirectoryInteractive authentication timeout issue (#1696)"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "901ec95427f8e8333296346c93a69efbd012b366", "committedDate": "2021-12-08 15:41:50 -0800", "message": "Retry randomUUID() to mitigate intermittent java NativeSeedGenerator failure (#1705)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "f0d6259851a514d9dd5a8da72ac060bdc00ead67", "committedDate": "2022-02-17 14:55:19 -0800", "message": "Removed extra call to executeCommand (#1754)"}, {"oid": "f9caf73e698206d94097b917e808333cfbf309e5", "committedDate": "2022-02-22 13:42:42 -0800", "message": "Added Azure Active Directory tests for Azure Data Explorer using user/password/applicationName AND removed deprecated tags to fix build warnings (#1755)"}, {"oid": "8806c175b6da532c3f6859cf97090b6434837f04", "committedDate": "2022-03-03 13:47:43 -0800", "message": "Add check for MSAL library when attempting ActiveDirectoryServicePrincipal auth (#1759)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "17b4799d7596c1053ca073dbb8f06ca509a8f9f2", "committedDate": "2022-03-31 10:25:33 -0700", "message": "Add encrypt utility to obfuscate password strings (#1780)"}, {"oid": "8e66ac0b5364be903d337828f5cec9dd352972e3", "committedDate": "2022-03-31 15:14:51 -0700", "message": "Refactor SQLServerColumnEncryptionAzureKeyVaultProvider usage in SQLServerConnection (#1774)"}, {"oid": "ef08328f33a32572b0f84efda78f87470b09a4f5", "committedDate": "2022-04-01 13:43:10 -0700", "message": "Add option for NONE attestation protocol (#1779)"}, {"oid": "0042429113f117c9b7118e67c13d430e0ba3bcde", "committedDate": "2022-04-12 12:36:10 -0700", "message": "Add ALPN for TDSS connections (#1795)"}, {"oid": "487c355cbaf87a087f310264bdc1cffd7e9223fb", "committedDate": "2022-04-14 13:10:01 -0700", "message": "Refactor Idle Connection Resiliency timeout to use existing SharedTimer (#1794)"}, {"oid": "bec87174b9f6c74f35f36890ac5bd33531479322", "committedDate": "2022-04-19 10:30:01 -0700", "message": "Formatted the check that assigns AE version to correctly assign version to protocol (#1805)"}, {"oid": "17fdf967dcbbcff268c3a6a646287c0c69b5b523", "committedDate": "2022-04-27 11:55:36 -0700", "message": "Avoid String use with secure strings (#1813)"}, {"oid": "fafd6a8d385089e641c7e7d7d0eefeb34558866a", "committedDate": "2022-04-27 15:44:13 -0700", "message": "Fixed TDS 8 to not make double connections (#1817)"}, {"oid": "76941b78626836ed677d9dcce97be432ae8e8b86", "committedDate": "2022-04-29 11:58:49 -0700", "message": "warnings (#1819)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "4b2641eaf53dfb3a701bb489a8247817667b5b77", "committedDate": "2022-07-20 15:29:22 -0700", "message": "Added TDS version 8 for strict mode (#1870)"}, {"oid": "87b092e754556c501f75496f241985725b9c56ba", "committedDate": "2022-07-20 17:08:50 -0700", "message": "Cache parameter metadata secure (#1866)"}, {"oid": "7f9a984170ae607fda61644e18193d0580daa632", "committedDate": "2022-07-28 09:00:43 -0700", "message": "Fix sending TDS8 version during login (#1878)"}, {"oid": "8fbd9edeb3e31fc67de1437691864401bf131ae0", "committedDate": "2022-08-25 11:47:09 -0700", "message": "Removed use of toString on a String, empty statements and double parentheses (#1901)"}, {"oid": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "committedDate": "2022-10-25 12:37:03 -0700", "message": "Loom friendly synchronization. (#1931)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "1797e17df84eb7c45e106577ed4f847178351db6", "committedDate": "2022-11-03 14:14:48 -0700", "message": "Fixed warnings detected by Sonartype (#1950)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "1572bf66580b9fe085f9834c0dc23ec510fa88aa", "committedDate": "2022-11-03 16:23:47 -0700", "message": "Fixed mixing date import (#1954)"}, {"oid": "7f17532250eec3be7eab1e9a538eae49be905564", "committedDate": "2022-11-14 15:25:44 -0800", "message": "Resolved issues reported by SonarQube (#1962)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "b79396d699d9fa76fd704ce084230647facb1018", "committedDate": "2022-11-25 10:20:37 -0800", "message": "More changes to address sonarqube warnings (#1974)"}, {"oid": "fd16cb823bdaa439097f31b1fcab79102ed1ce74", "committedDate": "2022-12-13 11:01:12 -0800", "message": "Fixed Idle Connection recovery so that unprocessedResponseCount isn't over decremented (#1989)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "39561b4a949e72857f3286a2390149f48688fa4c", "committedDate": "2022-12-22 11:03:54 -0800", "message": "cleanup (#2012)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "e487251f14df934f77491e38824abb73d60d52cc", "committedDate": "2023-01-19 13:02:03 -0800", "message": "More minor fixes for SonarQube (#2041)"}, {"oid": "2abc3d1980f8b1354a4bb8790c51dd9cc0e9d100", "committedDate": "2023-01-23 15:20:46 -0800", "message": "More code cleanup (#2048)"}, {"oid": "11929611c369efbcad01a0249ccfded2243154df", "committedDate": "2023-01-24 17:28:15 -0800", "message": "Suppressed deprecated warning for java security api (#2053)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}, {"oid": "242911001e33e1ce242aa2066cf725a7553b885d", "committedDate": "2023-02-09 14:18:15 -0800", "message": "Updated fedauth tests to run on diff test server (#2062)"}, {"oid": "e4bc368034ae5421c4e0215bf82335eb36b2aeac", "committedDate": "2023-02-16 13:06:32 -0800", "message": "Updated supportsTransactions method (#2075)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}, {"oid": "9cbaf1754194c4a6391e192f12fc59df7ad3ee03", "committedDate": "2023-02-23 15:54:13 -0800", "message": "more (#2082)"}, {"oid": "18db69cb8c7372c6bf5ba3fc883278436d48e26a", "committedDate": "2023-03-10 14:01:49 -0800", "message": "Fixed jdbcfx metadata test (#2089)"}]}, {"oid": "795e653ee609c10fc71ed37f08e7174e9b78b87b", "url": "https://github.com/microsoft/mssql-jdbc/commit/795e653ee609c10fc71ed37f08e7174e9b78b87b", "message": "review updates", "committedDate": "2020-03-31T18:08:45Z", "type": "commit"}, {"oid": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "url": "https://github.com/microsoft/mssql-jdbc/commit/88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "message": "more review updates", "committedDate": "2020-03-31T18:45:20Z", "type": "commit"}, {"oid": "91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "url": "https://github.com/microsoft/mssql-jdbc/commit/91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "message": "javadoc update", "committedDate": "2020-03-31T19:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MDg5Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401180897", "body": "`R_keyStoreSecretOrLocationNotSet` message does not make sense for this future.", "bodyText": "R_keyStoreSecretOrLocationNotSet message does not make sense for this future.", "bodyHTML": "<p dir=\"auto\"><code>R_keyStoreSecretOrLocationNotSet</code> message does not make sense for this future.</p>", "author": "ulvii", "createdAt": "2020-03-31T20:04:56Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -1291,7 +1301,30 @@ private void registerKeyStoreProviderOnConnection(String keyStoreAuth, String ke\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(\n+                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);", "originalCommit": "91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 32415ac8..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1305,7 +1317,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     // need a secret use use the secret method\n                     if (null == keyStoreSecret) {\n                         throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n                     } else {\n                         SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n                                 keyStorePrincipalId, keyStoreSecret);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 32415ac8..3973bfc8 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1305,7 +1317,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     // need a secret use use the secret method\n                     if (null == keyStoreSecret) {\n                         throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n                     } else {\n                         SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n                                 keyStorePrincipalId, keyStoreSecret);\n", "next_change": {"commit": "79cef888c070a270ef09411ca2e86b7d2cad1365", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 3973bfc8..7e6320f2 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1313,30 +1205,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-                case KeyVaultClientSecret:\n-                    // need a secret use use the secret method\n-                    if (null == keyStoreSecret) {\n-                        throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n-                                keyStorePrincipalId, keyStoreSecret);\n-                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n-                        keyStoreMap.put(provider.getName(), provider);\n-                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n-                    }\n-                    break;\n-                case KeyVaultManagedIdentity:\n-                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n-                    if (null != keyStorePrincipalId) {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n-                    } else {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n-                    }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n-                    keyStoreMap.put(provider.getName(), provider);\n-                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n-                    break;\n+\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n                     break;\n", "next_change": {"commit": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 7e6320f2..e1d12210 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1205,7 +1332,29 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n+                    } else {\n+                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                                keyStorePrincipalId, keyStoreSecret);\n+                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                        keyStoreMap.put(provider.getName(), provider);\n+                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    }\n+                    break;\n+                case KeyVaultManagedIdentity:\n+                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n+                    if (null != keyStorePrincipalId) {\n+                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n+                    } else {\n+                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n+                    }\n+                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                    keyStoreMap.put(provider.getName(), provider);\n+                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n                     break;\n", "next_change": {"commit": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..36c0bb8b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1351,7 +1379,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     } else {\n                         provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n                     }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n                     keyStoreMap.put(provider.getName(), provider);\n                     registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n                     break;\n", "next_change": {"commit": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 36c0bb8b..da4731e7 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1379,9 +1604,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n                     } else {\n                         provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n                     }\n-                    Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n-                    keyStoreMap.put(provider.getName(), provider);\n-                    registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+                    systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n", "next_change": {"commit": "8e66ac0b5364be903d337828f5cec9dd352972e3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex da4731e7..802e9c12 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1577,34 +1749,13 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n             KeyStoreAuthentication keyStoreAuthentication = KeyStoreAuthentication.valueOfString(keyStoreAuth);\n             switch (keyStoreAuthentication) {\n                 case JavaKeyStorePassword:\n-                    // both secret and location must be set for JKS.\n-                    if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n-                        throw new SQLServerException(\n-                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n-                                keyStoreLocation, keyStoreSecret.toCharArray());\n-                        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n-                    }\n+                    setKeyStoreSecretAndLocation(keyStoreSecret, keyStoreLocation);\n                     break;\n                 case KeyVaultClientSecret:\n-                    // need a secret to use the secret method\n-                    if (null == keyStoreSecret) {\n-                        throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n-                    } else {\n-                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n-                                keyStorePrincipalId, keyStoreSecret);\n-                        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n-                    }\n+                    this.setKeyVaultProvider(keyStorePrincipalId, keyStoreSecret);\n                     break;\n                 case KeyVaultManagedIdentity:\n-                    SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n-                    if (null != keyStorePrincipalId) {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n-                    } else {\n-                        provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n-                    }\n-                    systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+                    setKeyVaultProvider(keyStorePrincipalId);\n                     break;\n                 default:\n                     // valueOfString would throw an exception if the keyStoreAuthentication is not valid.\n", "next_change": {"commit": "0042429113f117c9b7118e67c13d430e0ba3bcde", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 802e9c12..1d502335 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1764,14 +1765,14 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n-    private void setKeyStoreSecretAndLocation(String keyStoreSecret, String keyStoreLocation) throws SQLServerException {\n+    private void setKeyStoreSecretAndLocation(String keyStoreSecret,\n+            String keyStoreLocation) throws SQLServerException {\n         // both secret and location must be set for JKS.\n         if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n-            throw new SQLServerException(\n-                    SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n         } else {\n             SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n-                     keyStoreLocation, keyStoreSecret.toCharArray());\n+                    keyStoreLocation, keyStoreSecret.toCharArray());\n             systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n         }\n     }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex da4731e7..802e9c12 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1613,6 +1764,39 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n+    private void setKeyStoreSecretAndLocation(String keyStoreSecret, String keyStoreLocation) throws SQLServerException {\n+        // both secret and location must be set for JKS.\n+        if ((null == keyStoreSecret) || (null == keyStoreLocation)) {\n+            throw new SQLServerException(\n+                    SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+        } else {\n+            SQLServerColumnEncryptionJavaKeyStoreProvider provider = new SQLServerColumnEncryptionJavaKeyStoreProvider(\n+                     keyStoreLocation, keyStoreSecret.toCharArray());\n+            systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+        }\n+    }\n+\n+    private void setKeyVaultProvider(String keyStorePrincipalId) throws SQLServerException {\n+        SQLServerColumnEncryptionAzureKeyVaultProvider provider;\n+        if (null != keyStorePrincipalId) {\n+            provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(keyStorePrincipalId);\n+        } else {\n+            provider = new SQLServerColumnEncryptionAzureKeyVaultProvider();\n+        }\n+        systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+    }\n+\n+    private void setKeyVaultProvider(String keyStorePrincipalId, String keyStoreSecret) throws SQLServerException {\n+        // need a secret to use the secret method\n+        if (null == keyStoreSecret) {\n+            throw new SQLServerException(SQLServerException.getErrString(\"R_keyStoreSecretNotSet\"), null);\n+        } else {\n+            SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                    keyStorePrincipalId, keyStoreSecret);\n+            systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n+        }\n+    }\n+\n     // Helper to check if timeout value is valid\n     int validateTimeout(SQLServerDriverIntProperty property) throws SQLServerException {\n         int timeout = property.getDefaultValue();\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex e1d12210..36c0bb8b 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1362,6 +1390,15 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         }\n     }\n \n+    private void registerKeyVaultProvider(String clientId, String clientKey) throws SQLServerException {\n+        // need a secret to use the secret method\n+        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                clientId, clientKey);\n+        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<>();\n+        keyStoreMap.put(provider.getName(), provider);\n+        registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n+    }\n+\n     /**\n      * Establish a physical database connection based on the user specified connection properties. Logon to the\n      * database.\n", "next_change": {"commit": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex 36c0bb8b..851c6569 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n", "chunk": "@@ -1399,6 +1455,29 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n         registerColumnEncryptionKeyStoreProviders(keyStoreMap);\n     }\n \n+    // Helper to check if timeout value is valid\n+    int validateTimeout(SQLServerDriverIntProperty property) throws SQLServerException {\n+        int timeout = property.getDefaultValue();\n+        String sPropValue = activeConnectionProperties.getProperty(property.toString());\n+        if (null != sPropValue && sPropValue.length() > 0) {\n+            try {\n+                timeout = Integer.parseInt(sPropValue);\n+                if (!property.isValidValue(timeout)) {\n+                    MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidTimeOut\"));\n+                    Object[] msgArgs = {sPropValue};\n+                    SQLServerException.makeFromDriverError(this, this, form.format(msgArgs), null, false);\n+\n+                }\n+            } catch (NumberFormatException e) {\n+                MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidTimeOut\"));\n+                Object[] msgArgs = {sPropValue};\n+                SQLServerException.makeFromDriverError(this, this, form.format(msgArgs), null, false);\n+\n+            }\n+        }\n+        return timeout;\n+    }\n+\n     /**\n      * Establish a physical database connection based on the user specified connection properties. Logon to the\n      * database.\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "79cef888c070a270ef09411ca2e86b7d2cad1365", "committedDate": "2018-10-05 17:48:08 -0700", "message": "Add "}, {"oid": "7e67a2351c64cdb16a1b5faf0ba1feaba0980df7", "committedDate": "2018-10-11 15:12:12 -0700", "message": "Add "}, {"oid": "6618054fad0e2b01efc15bee1686880959cfebbf", "committedDate": "2018-10-12 16:20:12 -0700", "message": "Add "}, {"oid": "98cdc4140f5fce1e0691a386b9f7cb1dc1cacbda", "committedDate": "2018-10-12 16:25:31 -0700", "message": "Fix "}, {"oid": "3e2a2fd8e035b89eae1379f0bac5873e54360045", "committedDate": "2018-10-15 14:35:15 -0700", "message": "Fix "}, {"oid": "5d5f0a66d0d89ede79187d5a062303509b89e986", "committedDate": "2018-10-15 16:56:50 -0700", "message": "Fix "}, {"oid": "a901cbb419731119a12a6729ea38e0fe2c696b89", "committedDate": "2018-10-15 16:57:14 -0700", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "c25833fb18adcbe9bdb180329955784ad6bf35d5", "committedDate": "2018-11-05 10:09:26 -0800", "message": "update from Microsoft/dev"}, {"oid": "70f1fd52b37558a3da52721f765da3bfa7312fca", "committedDate": "2018-11-08 14:16:59 -0800", "message": "add reconnect thread"}, {"oid": "cc192d36986c1c13fda64f1fa9f2e141e822d26d", "committedDate": "2018-11-08 16:33:58 -0800", "message": "reconnect thread and part of the session recovery writing"}, {"oid": "dfb4cadc777b3cd9e9217a5c08721b455dba4442", "committedDate": "2018-11-08 16:43:24 -0800", "message": "Revert \"reconnect thread and part of the session recovery writing\""}, {"oid": "77f83280273ed455cf3e41db560258f217b7ecf8", "committedDate": "2018-11-08 17:02:30 -0800", "message": "removing writeSessionState changes"}, {"oid": "24cedbb36f493f6e44847c16aa2ee24204f9102b", "committedDate": "2018-11-09 10:45:12 -0800", "message": "remove executors and needless synchronizers"}, {"oid": "521cf633ba3330f47c44e335a86d6d4916127c93", "committedDate": "2018-11-09 10:53:51 -0800", "message": "removed unused imports, formatting, clean up, etc"}, {"oid": "f1a7d2dcff85aeade55dce2df52c58a9d523c17b", "committedDate": "2018-11-09 11:50:15 -0800", "message": "comment"}, {"oid": "a73c39bf43f687d042eed3d552b8de45f49d5c11", "committedDate": "2018-11-09 13:12:08 -0800", "message": "removing duplicate code"}, {"oid": "85fdb019927f71b11a4b22e161bb5f0651ece409", "committedDate": "2018-11-09 13:13:36 -0800", "message": "formatting"}, {"oid": "8180cba1c2a818ece1d5c3c7182fb7153e0380e0", "committedDate": "2018-11-09 13:19:13 -0800", "message": "Add "}, {"oid": "88d49f0de7a2b203e0f794f43a74557d2eccf781", "committedDate": "2018-11-09 13:36:11 -0800", "message": "Merge branch 'ICREnableFeature' of https://github.com/ulvii/mssql-jdbc into ICREnableFeatureMergeFix"}, {"oid": "920706e41ed1e47389e1251452fbedc836485d28", "committedDate": "2018-11-09 14:41:39 -0800", "message": "removing isReconnecting"}, {"oid": "559ed08cf7138ce3f33f7a6873a6a7dfb2f2efa6", "committedDate": "2018-11-09 15:34:46 -0800", "message": "removing isReconnecting"}, {"oid": "036d9532b200913c2cbcbfee94c234abf3221df9", "committedDate": "2018-11-09 15:36:57 -0800", "message": "Add "}, {"oid": "503076fe213e018506f690177c32011f8ec22b62", "committedDate": "2018-11-09 15:41:30 -0800", "message": "adding resource"}, {"oid": "18d4bec283ca6daa52229f575c55ee7542ad0515", "committedDate": "2018-11-09 16:04:20 -0800", "message": "removing comment"}, {"oid": "eaf3516af7518d128271a6751e73bd679478c9e6", "committedDate": "2018-11-09 16:13:09 -0800", "message": "renaming rt to reconnectThread"}, {"oid": "a1ab97e3308cbef1345709f93c1ef317b277d016", "committedDate": "2018-11-09 17:23:29 -0800", "message": "moved reconnectThread into session recovery class"}, {"oid": "6e4665b2ce157c402ba8a49384bc79ce7f8cf6c6", "committedDate": "2018-11-09 17:55:52 -0800", "message": "Add "}, {"oid": "0170f891a15e70c7bf10af283f35a4a55e42a874", "committedDate": "2018-11-13 18:17:55 -0800", "message": "Fix "}, {"oid": "baaf32fb0c39be005484faaf45b1c51a63411ba3", "committedDate": "2018-11-14 13:50:11 -0800", "message": "Revert checks before creating session state table for now"}, {"oid": "5be2dfb03ba23afc08398404bd6fc5971e0b8bc7", "committedDate": "2018-11-14 16:56:24 -0800", "message": "Fix "}, {"oid": "5e940e7f48a1059511dbbfa8e5c0f36fff914df1", "committedDate": "2018-11-22 13:41:27 -0800", "message": "Merge remote-tracking branch 'upstream/dev' into ICREnableFeature"}, {"oid": "1db13b4bf74544ead81bf1ba25f12d294a4a5335", "committedDate": "2018-11-22 14:10:38 -0800", "message": "Login logic for reconnect"}, {"oid": "efc219317ca921791ec5c1a8e903415f52361997", "committedDate": "2018-11-23 14:53:51 -0800", "message": "Query timeout logic for connection resiliency"}, {"oid": "0ea565d77f782ebd466132c200f5cff63b137d7c", "committedDate": "2018-11-23 15:57:47 -0800", "message": "Fix "}, {"oid": "f9d975f3ccb6a2d68668fa61d99b435aee7e8da1", "committedDate": "2018-11-30 14:08:21 -0800", "message": "fix for not immediately failing if database not found (#16)"}, {"oid": "7bdd7ed447257570f5541a8075c485720fe3701e", "committedDate": "2018-12-05 17:44:34 -0800", "message": "Fix "}, {"oid": "0e430d202c09e647f44fa234c230b7c01828713c", "committedDate": "2018-12-06 10:23:04 -0800", "message": "Tds token error (#17)"}, {"oid": "1ae8e3c4244d7169df1115e9bb864a47bbba83b2", "committedDate": "2018-12-11 10:47:50 -0800", "message": "Add tests (#19)"}, {"oid": "76ecacbbca64639afae8c49bf671f8504fc5e7f0", "committedDate": "2020-04-29 16:10:57 -0700", "message": "Append server name from connection string to error message (#1311)"}, {"oid": "639d22c817499e3cf57143a16b82a07faeff317e", "committedDate": "2020-04-30 10:46:31 -0700", "message": "Check tls protocol version and throw warning (#1322)"}, {"oid": "426e5aec87f09307e0705abfdc33b18a7255613c", "committedDate": "2020-05-01 10:44:19 -0700", "message": "Adding Delayed Durability to commit API(#1310)"}, {"oid": "a2fc81ed55767eb7f40227159e001ee6f4868130", "committedDate": "2020-05-07 12:04:27 -0700", "message": "Fix #1325, return correct sql state when connection is closed (#1326)"}, {"oid": "f857e2505aec7b413fbd1f5b722862d915b2b2cf", "committedDate": "2020-05-22 10:13:21 -0700", "message": "Feature "}, {"oid": "54c67488d881f7075c4632967ec0d5a558138c69", "committedDate": "2020-05-26 13:30:02 -0700", "message": "Add delayLoadingLobs (#1336)"}, {"oid": "326a06aea6a561c4d625c7fbb07ca147a5b3acfe", "committedDate": "2020-05-27 17:15:24 -0700", "message": "Release "}, {"oid": "c9846285ec2f9368577101ecb117186844ef3437", "committedDate": "2020-06-24 10:27:48 -0700", "message": "Feature "}, {"oid": "99138fa1fe4b5277d8f758a53f10d197ec41b54b", "committedDate": "2020-06-24 14:26:22 -0700", "message": "Feature "}, {"oid": "423be4a8d58eb350f533c14acf241e0c44d64fb1", "committedDate": "2020-07-20 14:46:09 -0700", "message": "Change "}, {"oid": "a87bccfea1616717fa5ac8cd6d338d9ea7dae6d3", "committedDate": "2020-07-30 11:03:44 -0700", "message": "Release "}, {"oid": "606e722fbee129a4fd0de89423f5a934207522b0", "committedDate": "2020-08-24 12:37:49 -0700", "message": "Fix "}, {"oid": "8ad2371ec899daf135e4bbd35b54bd17311e14d2", "committedDate": "2020-10-09 10:00:43 -0700", "message": "Fix "}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "af76d7af3846801be86f7f94fbc3318b1ed5bc04", "committedDate": "2020-10-14 17:55:14 -0700", "message": "Make adal4j test dependency only (#1447)"}, {"oid": "9f7b5c6445ad0c0e4b73fb5f95cd3cb91a3b9b65", "committedDate": "2020-11-19 12:24:40 -0800", "message": "Feature "}, {"oid": "d9909748368af7d2944dab4fa382ee513f2b76f4", "committedDate": "2020-11-27 14:25:58 -0800", "message": "Add maxResultBuffer property (#1431)"}, {"oid": "bd776c2b48691897cee900cc6e821d171f18513a", "committedDate": "2020-11-27 17:53:56 -0800", "message": "Added support for ActiveDirectoryInteractive authentication (#1464)"}, {"oid": "57c3fc3794d978e1886df81d1178989703b851ff", "committedDate": "2021-01-12 11:53:14 -0800", "message": "Handle MFA timeouts during ActiveDirectoryInteractive authentication by retrying connection (#1488)"}, {"oid": "428f14764f910ec527ce00ede0cdee74c2a6de13", "committedDate": "2021-01-25 12:19:07 -0800", "message": "Fix "}, {"oid": "567ae6ee992f81e945bead5be05a36ab2c744fe5", "committedDate": "2021-02-22 14:30:55 -0800", "message": "Fix clientSecret is null or empty for ActiveDirectoryServicePrincipal in Azure container (#1519)"}, {"oid": "90b9b249cc866d6134e4ba94039e36e80cacfff8", "committedDate": "2021-03-19 14:20:41 -0700", "message": "Open Connection Retry (#1535)"}, {"oid": "0fc61a7e6d54ed0e0e5559ddec0d635a0d7b0d86", "committedDate": "2021-03-24 12:55:09 -0700", "message": "Added Azure Synapse serverless SQL pool, Azure SQL Edge and also updated name for Azure Synapse Analytics (#1543)"}, {"oid": "66b86319ee7fa04c739f04922a8f4666671e8d68", "committedDate": "2021-03-30 15:47:56 -0700", "message": "Added check for invalid timeout (#1555)"}, {"oid": "50b9fdb1f61ad2c53fc73077f6a39873f36158c4", "committedDate": "2021-04-23 17:18:23 -0700", "message": "Adding replication connection option (#1566)"}, {"oid": "ae65652f0edaaca44d2eee4a4b3f44d2233d9860", "committedDate": "2021-04-26 15:41:31 -0700", "message": "Fixes trustStorePassword set to null when using applicationIntent=ReadOnly (#1565)"}, {"oid": "40a6a22f6b4bbe2ca4e467efcca2f60651ee1e4c", "committedDate": "2021-04-27 12:24:13 -0700", "message": "Fixed issue when redirected token contains named instance in servername (#1568)"}, {"oid": "0f3e0a10f2f85b5b357811907fdb487d63e49830", "committedDate": "2021-04-27 20:57:33 -0700", "message": "Fixed javadoc warnings (#1570)"}, {"oid": "a5e9ca7678f700fd77eb3d4dd856f4067c11eea0", "committedDate": "2021-05-20 11:31:24 -0700", "message": "Send the driver version to the database during prelogin (#1583)"}, {"oid": "574b1e1aefecd1162bccf064a26c8e76a9a2c5bf", "committedDate": "2021-06-11 15:01:35 -0700", "message": "Send client process ID to server on Java 9+ (#1595)"}, {"oid": "21b8ec1ac90884ca7c83b7a79a08bf78702b52bb", "committedDate": "2021-06-14 13:17:54 -0700", "message": "Fix multiple, successive connections using AKV provider (#1594)"}, {"oid": "ac78f50479ab2f33a4f3107d2f1608bf9eaf8fed", "committedDate": "2021-07-07 11:22:07 -0700", "message": "Integration of old code"}, {"oid": "ad258e21abb401d7bde3073370ad8a7ef16da198", "committedDate": "2021-07-12 13:00:48 -0700", "message": "Fixing test fails"}, {"oid": "8172599fd735a5481b784ed9ef0237b9ab6f7ea2", "committedDate": "2021-07-30 17:23:52 -0700", "message": "Remove Java 9-specific class references from the Java 8 jar (#1626)"}, {"oid": "379a57ce0a3bce03096902474bbfa883959015aa", "committedDate": "2021-08-04 11:48:54 -0700", "message": "Fix memory leak (#1633)"}, {"oid": "a61fbb7cc39a55d66708de929589e165c7e9ccaf", "committedDate": "2021-08-12 10:20:32 -0700", "message": "Catching up to dev, 9.5, fixing merge conflicts"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "0641e315ebd547d407aa844177c05a68e577490d", "committedDate": "2021-08-24 10:19:13 -0700", "message": "fixed feature ack ext"}, {"oid": "09d35bfc2338f1fc7c41a958d1e627fa0d6a2b65", "committedDate": "2021-08-30 11:57:00 -0700", "message": "Add 42108 and 42109 to transient errors list (#1643)"}, {"oid": "b08500889f68eff2ba740b29c644980398c68003", "committedDate": "2021-09-02 20:12:20 -0700", "message": "Integrated new disconnected docket detection"}, {"oid": "1bd85226d25e8b04aed601830fc322c9080811b7", "committedDate": "2021-09-03 14:41:34 -0700", "message": "Fixed a few more tests"}, {"oid": "4693c26b91ba02379f3f11a6eb839ad2e75d3959", "committedDate": "2021-09-07 14:07:27 -0700", "message": "Fixed retryinterval valid"}, {"oid": "0f266c05905874e6f8fb8739d08a7a3e9c9d0256", "committedDate": "2021-09-22 01:16:09 -0700", "message": "Fixed ResiliencyUtil for PooledConnections"}, {"oid": "11990186d8cdcd41d6192702805ece43134eb1ba", "committedDate": "2021-09-22 11:25:29 -0700", "message": "Catching up to dev"}, {"oid": "1d85778906f01fd4835b90b1c2c845d313b3796f", "committedDate": "2021-09-30 10:27:53 -0700", "message": "Reset lang-db-collation"}, {"oid": "47748db76bc86c2e4e237d207f22214eedf05c86", "committedDate": "2021-09-30 12:34:18 -0700", "message": "Missing break"}, {"oid": "54c27e931d2b9d8adbaa983d91c73219861c2d90", "committedDate": "2021-10-13 13:42:56 -0700", "message": "Fixed Polling and Tests for ICR"}, {"oid": "34e3b94ed40ffb12d1062581c687e04a7981d5df", "committedDate": "2021-10-21 11:48:42 -0700", "message": "Checks in case of slow dc vs azuredb"}, {"oid": "890778927388df2139136a5b08c56fa3db64f855", "committedDate": "2021-10-21 14:06:21 -0700", "message": "Reflection instead of public method"}, {"oid": "d3709f3119b668f16577d7a6958b54df253654c8", "committedDate": "2021-10-26 09:58:36 -0700", "message": "Limited runs of tests"}, {"oid": "5715001be63180e0aca9e12543f8c4ef4d368deb", "committedDate": "2021-10-28 02:31:50 -0700", "message": "Addressing code review comments"}, {"oid": "1a5206e06f8313d7d02b81a40559e67a566c35d7", "committedDate": "2021-11-02 17:12:34 -0700", "message": "Catching up to Dev, Addressing review comments"}, {"oid": "3a2a6ab60574035bd33c7f53457e18c66630d57a", "committedDate": "2021-11-04 12:57:28 -0700", "message": "refactored testutils"}, {"oid": "f4ef4f47b7e6d4abc4b6cabf7463d655006aa8cd", "committedDate": "2021-11-04 22:37:22 -0700", "message": "resolving comments"}, {"oid": "8f94517ccbc32ba026084ec605e0e7dcb2227946", "committedDate": "2021-11-05 00:33:50 -0700", "message": "Fixes"}, {"oid": "7cb16845fd7c26b0108bd57e8a7207c39f337b72", "committedDate": "2021-11-23 14:40:40 -0800", "message": "New Exception Message (#1683)"}, {"oid": "6ca48b39945ca12d3350218fefdd806e5e42608f", "committedDate": "2021-11-25 13:17:41 -0800", "message": "Fixed ActiveDirectoryInteractive authentication timeout issue (#1696)"}, {"oid": "ab6abfab8c54450d6f534004b55a2f105f456982", "committedDate": "2021-12-01 11:21:10 -0800", "message": "Deprecate and Rename Service principal connection properties (#1693)"}, {"oid": "901ec95427f8e8333296346c93a69efbd012b366", "committedDate": "2021-12-08 15:41:50 -0800", "message": "Retry randomUUID() to mitigate intermittent java NativeSeedGenerator failure (#1705)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "f0d6259851a514d9dd5a8da72ac060bdc00ead67", "committedDate": "2022-02-17 14:55:19 -0800", "message": "Removed extra call to executeCommand (#1754)"}, {"oid": "f9caf73e698206d94097b917e808333cfbf309e5", "committedDate": "2022-02-22 13:42:42 -0800", "message": "Added Azure Active Directory tests for Azure Data Explorer using user/password/applicationName AND removed deprecated tags to fix build warnings (#1755)"}, {"oid": "8806c175b6da532c3f6859cf97090b6434837f04", "committedDate": "2022-03-03 13:47:43 -0800", "message": "Add check for MSAL library when attempting ActiveDirectoryServicePrincipal auth (#1759)"}, {"oid": "d3cb66ee833934c1953fb77dc3462bd3f1e8a623", "committedDate": "2022-03-04 09:55:44 -0800", "message": "Added new connection string property prepareMethod to toggle use of sp_prepare (#1719)"}, {"oid": "887cf6f1665b08cdd61df7f3f8c35153ce397011", "committedDate": "2022-03-16 11:59:53 -0700", "message": "TDSS Support (#1757)"}, {"oid": "c25825cdfcb823c36ff99653eb98ffc3f7eff2f5", "committedDate": "2022-03-29 10:52:14 -0700", "message": "Add serverCertificate connection property for encrypt=strict (#1773)"}, {"oid": "4337c5728cc8255dd7fafc2c3cfcd9c75f217801", "committedDate": "2022-03-30 11:42:09 -0700", "message": "Add Configurable IPv6 Support (#1766)"}, {"oid": "17b4799d7596c1053ca073dbb8f06ca509a8f9f2", "committedDate": "2022-03-31 10:25:33 -0700", "message": "Add encrypt utility to obfuscate password strings (#1780)"}, {"oid": "8e66ac0b5364be903d337828f5cec9dd352972e3", "committedDate": "2022-03-31 15:14:51 -0700", "message": "Refactor SQLServerColumnEncryptionAzureKeyVaultProvider usage in SQLServerConnection (#1774)"}, {"oid": "ef08328f33a32572b0f84efda78f87470b09a4f5", "committedDate": "2022-04-01 13:43:10 -0700", "message": "Add option for NONE attestation protocol (#1779)"}, {"oid": "0042429113f117c9b7118e67c13d430e0ba3bcde", "committedDate": "2022-04-12 12:36:10 -0700", "message": "Add ALPN for TDSS connections (#1795)"}, {"oid": "487c355cbaf87a087f310264bdc1cffd7e9223fb", "committedDate": "2022-04-14 13:10:01 -0700", "message": "Refactor Idle Connection Resiliency timeout to use existing SharedTimer (#1794)"}, {"oid": "bec87174b9f6c74f35f36890ac5bd33531479322", "committedDate": "2022-04-19 10:30:01 -0700", "message": "Formatted the check that assigns AE version to correctly assign version to protocol (#1805)"}, {"oid": "17fdf967dcbbcff268c3a6a646287c0c69b5b523", "committedDate": "2022-04-27 11:55:36 -0700", "message": "Avoid String use with secure strings (#1813)"}, {"oid": "fafd6a8d385089e641c7e7d7d0eefeb34558866a", "committedDate": "2022-04-27 15:44:13 -0700", "message": "Fixed TDS 8 to not make double connections (#1817)"}, {"oid": "76941b78626836ed677d9dcce97be432ae8e8b86", "committedDate": "2022-04-29 11:58:49 -0700", "message": "warnings (#1819)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "900fe16ffb7b048d8617d79e5891f3ceb2e314e3", "committedDate": "2022-06-02 18:36:17 -0700", "message": "Added getters and setters for new msiTokenCacheTtl connection prop (#1842)"}, {"oid": "4b2641eaf53dfb3a701bb489a8247817667b5b77", "committedDate": "2022-07-20 15:29:22 -0700", "message": "Added TDS version 8 for strict mode (#1870)"}, {"oid": "87b092e754556c501f75496f241985725b9c56ba", "committedDate": "2022-07-20 17:08:50 -0700", "message": "Cache parameter metadata secure (#1866)"}, {"oid": "7f9a984170ae607fda61644e18193d0580daa632", "committedDate": "2022-07-28 09:00:43 -0700", "message": "Fix sending TDS8 version during login (#1878)"}, {"oid": "8fbd9edeb3e31fc67de1437691864401bf131ae0", "committedDate": "2022-08-25 11:47:09 -0700", "message": "Removed use of toString on a String, empty statements and double parentheses (#1901)"}, {"oid": "bf7adc07ae6e31f96adf2e9ced8fc6603ffec9bf", "committedDate": "2022-10-25 12:37:03 -0700", "message": "Loom friendly synchronization. (#1931)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "1797e17df84eb7c45e106577ed4f847178351db6", "committedDate": "2022-11-03 14:14:48 -0700", "message": "Fixed warnings detected by Sonartype (#1950)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "1572bf66580b9fe085f9834c0dc23ec510fa88aa", "committedDate": "2022-11-03 16:23:47 -0700", "message": "Fixed mixing date import (#1954)"}, {"oid": "7f17532250eec3be7eab1e9a538eae49be905564", "committedDate": "2022-11-14 15:25:44 -0800", "message": "Resolved issues reported by SonarQube (#1962)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "b79396d699d9fa76fd704ce084230647facb1018", "committedDate": "2022-11-25 10:20:37 -0800", "message": "More changes to address sonarqube warnings (#1974)"}, {"oid": "fd16cb823bdaa439097f31b1fcab79102ed1ce74", "committedDate": "2022-12-13 11:01:12 -0800", "message": "Fixed Idle Connection recovery so that unprocessedResponseCount isn't over decremented (#1989)"}, {"oid": "45c606fdfb9c103e093c5ae7424f01e2d5d403f2", "committedDate": "2022-12-21 13:50:32 -0800", "message": "Fixes #1590 - [FEATURE REQUEST] Ability to explicitly specify conversion to datetime or datetime2  (#1687)"}, {"oid": "39561b4a949e72857f3286a2390149f48688fa4c", "committedDate": "2022-12-22 11:03:54 -0800", "message": "cleanup (#2012)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "e487251f14df934f77491e38824abb73d60d52cc", "committedDate": "2023-01-19 13:02:03 -0800", "message": "More minor fixes for SonarQube (#2041)"}, {"oid": "2abc3d1980f8b1354a4bb8790c51dd9cc0e9d100", "committedDate": "2023-01-23 15:20:46 -0800", "message": "More code cleanup (#2048)"}, {"oid": "11929611c369efbcad01a0249ccfded2243154df", "committedDate": "2023-01-24 17:28:15 -0800", "message": "Suppressed deprecated warning for java security api (#2053)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}, {"oid": "242911001e33e1ce242aa2066cf725a7553b885d", "committedDate": "2023-02-09 14:18:15 -0800", "message": "Updated fedauth tests to run on diff test server (#2062)"}, {"oid": "e4bc368034ae5421c4e0215bf82335eb36b2aeac", "committedDate": "2023-02-16 13:06:32 -0800", "message": "Updated supportsTransactions method (#2075)"}, {"oid": "d0ab1a587377dd64d7c45e07e959b4857f39bb77", "committedDate": "2023-02-21 11:36:13 -0800", "message": "Added access token callback class connection string property (#2073)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}, {"oid": "9cbaf1754194c4a6391e192f12fc59df7ad3ee03", "committedDate": "2023-02-23 15:54:13 -0800", "message": "more (#2082)"}, {"oid": "18db69cb8c7372c6bf5ba3fc883278436d48e26a", "committedDate": "2023-03-10 14:01:49 -0800", "message": "Fixed jdbcfx metadata test (#2089)"}]}, {"oid": "7ddd56156e31b863bb36352cc6c5015059e13380", "url": "https://github.com/microsoft/mssql-jdbc/commit/7ddd56156e31b863bb36352cc6c5015059e13380", "message": "updated SQLServerConnection loggingClassName", "committedDate": "2020-03-31T20:07:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDUxMA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401190510", "body": "How is this testing MSI auth? You are using the global connection stirng.", "bodyText": "How is this testing MSI auth? You are using the global connection stirng.", "bodyHTML": "<p dir=\"auto\">How is this testing MSI auth? You are using the global connection stirng.</p>", "author": "ulvii", "createdAt": "2020-03-31T20:21:32Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "906a1111568824fa48dcbc4392d7c9da90f09a56", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..b276e14e 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -34,22 +36,17 @@ import com.microsoft.sqlserver.testframework.PrepUtil;\n @RunWith(JUnitPlatform.class)\n @Tag(Constants.MSI)\n public class MSITest extends AESetup {\n-    /*\n-     * Test basic MSI auth\n-     */\n-    @Test\n-    public void testAuth() throws SQLException {\n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n-    }\n \n     /*\n      * Test MSI auth using datasource\n      */\n     @Test\n     public void testDSAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n         SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setKeyStoreAuthentication(\"KeyVaultManagedIdentity\");\n         AbstractTest.updateDataSource(connectionString, ds);\n \n         try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n", "next_change": {"commit": "19e28a736913cf56e6caee992cce8f3b9de2b090", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b276e14e..eab69d14 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -37,23 +37,61 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n @Tag(Constants.MSI)\n public class MSITest extends AESetup {\n \n+    /*\n+     * Test MSI auth\n+     */\n+    @Test\n+    public void testMSIAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        }\n+    }\n+\n     /*\n      * Test MSI auth using datasource\n      */\n     @Test\n-    public void testDSAuth() throws SQLException {\n+    public void testDSMSIAuth() throws SQLException {\n         // unregister the custom providers registered in AESetup\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setKeyStoreAuthentication(\"KeyVaultManagedIdentity\");\n-        AbstractTest.updateDataSource(connectionString, ds);\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        AbstractTest.updateDataSource(connStr, ds);\n \n         try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n \n+    /*\n+     * Test MSI auth using datasource\n+     */\n+    @Test\n+    public void testDSAkvWithMSI() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        AbstractTest.updateDataSource(connStr, ds);\n+        testCharAkv(connStr);\n+    }\n+\n     /*\n      * Test AKV with with credentials\n      */\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -34,12 +34,46 @@ import com.microsoft.sqlserver.testframework.PrepUtil;\n @RunWith(JUnitPlatform.class)\n @Tag(Constants.MSI)\n public class MSITest extends AESetup {\n+\n     /*\n-     * Test basic MSI auth\n+     * Test MSI auth\n      */\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n     @Test\n-    public void testAuth() throws SQLException {\n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+    public void testMSIAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test MSI auth with msiClientId\n+     */\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testMSIAuthWithMSIClientId() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n+\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n", "next_change": {"commit": "692fe4eacb5c3f183257c69c4a404dc0524df255", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..7eec04b7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -81,14 +87,12 @@ public class MSITest extends AESetup {\n     /*\n      * Test MSI auth using datasource\n      */\n+    @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n     public void testDSMSIAuth() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         String connStr = connectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n", "next_change": {"commit": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 7eec04b7..ce8a562b 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -101,9 +123,7 @@ public class MSITest extends AESetup {\n         ds.setAuthentication(\"ActiveDirectoryMSI\");\n         AbstractTest.updateDataSource(connStr, ds);\n \n-        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n+        testSimpleConnect(connStr);\n     }\n \n     /*\n", "next_change": {"commit": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex ce8a562b..0ea51ed5 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -123,7 +108,12 @@ public class MSITest extends AESetup {\n         ds.setAuthentication(\"ActiveDirectoryMSI\");\n         AbstractTest.updateDataSource(connStr, ds);\n \n-        testSimpleConnect(connStr);\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        AbstractTest.updateDataSource(connStr, ds);\n+\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n     /*\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 0ea51ed5..92d39bb7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -71,74 +72,146 @@ public class MSITest extends AESetup {\n     }\n \n     /*\n-     * Test MSI auth with msiClientId\n+     * Test Managed Identity auth with Managed Identity client ID\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testMSIAuthWithMSIClientId() throws SQLException {\n+    public void testManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        testSimpleConnect(connStr);\n+        // Test with user=<managed-identity-client-id>\n+        try {\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+            // Set msiClientId to incorrect managed identity client ID. Since \"User\" is set with the ID, \"User\" should override msiClientId.\n+            // Otherwise, test should fail with the incorrect \"msiClientId\" property value because \"User\" was not overrided\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID,\n+                    \"incorrect-managed-identity-client-id\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION,\n+                    \"ActiveDirectoryManagedIdentity\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        } catch (CredentialUnavailableException ce) {\n+            fail(\"\\\"User\\\" was overrided by incorrect managed identity client ID set in \\\"msiClientId\\\" property.\");\n+        }\n \n+        // Test with msiClientId=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, managedIdentityClientId);\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n-        testSimpleConnect(connStr);\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n     }\n \n     /*\n-     * Test MSI auth using datasource\n+     * Test Managed Identity auth using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuth() throws SQLException {\n+    public void testDSManagedIdentityAuth() throws SQLException {\n         String connStr = connectionString;\n+\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n         AbstractTest.updateDataSource(connStr, ds);\n \n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n \n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n-        AbstractTest.updateDataSource(connStr, ds);\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n \n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n     /*\n-     * Test MSI auth with msiClientId using datasource\n+     * Test Managed Identity auth with a Managed Identity client ID using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuthWithMSIClientId() throws SQLException {\n+    public void testDSManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+\n+        // Test with user=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n \n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n-        ds.setMSIClientId(msiClientId);\n         AbstractTest.updateDataSource(connStr, ds);\n-\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n \n+        // Test with msiClientId=<managed-identity-client-id>\n+        ds.setUser(\"\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuth() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"DefaultAzureCredential\");\n+\n+        // With Managed Identity client ID\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+\n+        // Without Managed Identity client ID\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuthDS() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setAuthentication(\"DefaultAzureCredential\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         AbstractTest.updateDataSource(connStr, ds);\n \n+        // With msiClientId property\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without msiClientId property\n+        ds.setMSIClientId(\"\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // With user property\n+        ds.setUser(managedIdentityClientId);\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without user property\n+        ds.setUser(\"\");\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDY4NQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401190685", "body": "Same here, how is this testing MSI auth?", "bodyText": "Same here, how is this testing MSI auth?", "bodyHTML": "<p dir=\"auto\">Same here, how is this testing MSI auth?</p>", "author": "ulvii", "createdAt": "2020-03-31T20:21:49Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "906a1111568824fa48dcbc4392d7c9da90f09a56", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..b276e14e 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -34,22 +36,17 @@ import com.microsoft.sqlserver.testframework.PrepUtil;\n @RunWith(JUnitPlatform.class)\n @Tag(Constants.MSI)\n public class MSITest extends AESetup {\n-    /*\n-     * Test basic MSI auth\n-     */\n-    @Test\n-    public void testAuth() throws SQLException {\n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n-    }\n \n     /*\n      * Test MSI auth using datasource\n      */\n     @Test\n     public void testDSAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n         SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setKeyStoreAuthentication(\"KeyVaultManagedIdentity\");\n         AbstractTest.updateDataSource(connectionString, ds);\n \n         try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n", "next_change": {"commit": "19e28a736913cf56e6caee992cce8f3b9de2b090", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex b276e14e..eab69d14 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -37,23 +37,61 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n @Tag(Constants.MSI)\n public class MSITest extends AESetup {\n \n+    /*\n+     * Test MSI auth\n+     */\n+    @Test\n+    public void testMSIAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        }\n+    }\n+\n     /*\n      * Test MSI auth using datasource\n      */\n     @Test\n-    public void testDSAuth() throws SQLException {\n+    public void testDSMSIAuth() throws SQLException {\n         // unregister the custom providers registered in AESetup\n         SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n \n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setKeyStoreAuthentication(\"KeyVaultManagedIdentity\");\n-        AbstractTest.updateDataSource(connectionString, ds);\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        AbstractTest.updateDataSource(connStr, ds);\n \n         try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n \n+    /*\n+     * Test MSI auth using datasource\n+     */\n+    @Test\n+    public void testDSAkvWithMSI() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        AbstractTest.updateDataSource(connStr, ds);\n+        testCharAkv(connStr);\n+    }\n+\n     /*\n      * Test AKV with with credentials\n      */\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -47,16 +81,68 @@ public class MSITest extends AESetup {\n     /*\n      * Test MSI auth using datasource\n      */\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSAuth() throws SQLException {\n+    public void testDSMSIAuth() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        AbstractTest.updateDataSource(connStr, ds);\n+\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test MSI auth with msiClientId using datasource\n+     */\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDSMSIAuthWithMSIClientId() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        AbstractTest.updateDataSource(connectionString, ds);\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        ds.setMSIClientId(msiClientId);\n+        AbstractTest.updateDataSource(connStr, ds);\n \n         try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n \n+    /*\n+     * Test AKV with MSI using datasource\n+     */\n+    @Test\n+    public void testDSAkvWithMSI() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        AbstractTest.updateDataSource(connStr, ds);\n+        testCharAkv(connStr);\n+    }\n+\n     /*\n      * Test AKV with with credentials\n      */\n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -148,9 +143,6 @@ public class MSITest extends AESetup {\n      */\n     @Test\n     public void testCharAkvWithCred() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         // add credentials to connection string\n         String connStr = AETestConnectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NDQyMw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401194423", "body": "Login failed? This catch block implies that, the only exception that can happen inside try block is due to a login failure. Just remove the catch block and let the test throw the original exception.", "bodyText": "Login failed? This catch block implies that, the only exception that can happen inside try block is due to a login failure. Just remove the catch block and let the test throw the original exception.", "bodyHTML": "<p dir=\"auto\">Login failed? This catch block implies that, the only exception that can happen inside try block is due to a login failure. Just remove the catch block and let the test throw the original exception.</p>", "author": "ulvii", "createdAt": "2020-03-31T20:28:17Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with bad credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithBadCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, \"bad\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, \"bad\");\r\n+        try {\r\n+            testNumericAKV(connStr);\r\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\r\n+        } catch (Exception e) {\r\n+            assert (e.getMessage().contains(\"AuthenticationException\"));\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testNumericAKV(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testNumericAKV(connStr);\r\n+    }\r\n+\r\n+    private void testCharAkv(String connStr) throws SQLException {\r\n+        String sql = \"select * from \" + CHAR_TABLE_AE;\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr);\r\n+                SQLServerStatement stmt = (SQLServerStatement) con.createStatement();\r\n+                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\r\n+                        stmtColEncSetting)) {\r\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\r\n+            createTable(CHAR_TABLE_AE, cekAkv, charTable);\r\n+            String[] values = createCharValues(false);\r\n+            populateCharNormalCase(values);\r\n+\r\n+            try (ResultSet rs = (null == stmt) ? pstmt.executeQuery() : stmt.executeQuery(sql)) {\r\n+                int numberOfColumns = rs.getMetaData().getColumnCount();\r\n+                while (rs.next()) {\r\n+                    AECommon.testGetString(rs, numberOfColumns, values);\r\n+                    AECommon.testGetObject(rs, numberOfColumns, values);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private void testNumericAKV(String connStr) throws SQLException {\r\n+        String sql = \"select * from \" + NUMERIC_TABLE_AE;\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr);\r\n+                SQLServerStatement stmt = (SQLServerStatement) con.createStatement();\r\n+                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\r\n+                        stmtColEncSetting)) {\r\n+            TestUtils.dropTableIfExists(NUMERIC_TABLE_AE, stmt);\r\n+            createTable(NUMERIC_TABLE_AE, cekAkv, numericTable);\r\n+            String[] values = createNumericValues(false);\r\n+            populateNumeric(values);\r\n+\r\n+            try (SQLServerResultSet rs = (null == stmt) ? (SQLServerResultSet) pstmt.executeQuery()\r\n+                                                        : (SQLServerResultSet) stmt.executeQuery(sql)) {\r\n+                int numberOfColumns = rs.getMetaData().getColumnCount();\r\n+                while (rs.next()) {\r\n+                    AECommon.testGetString(rs, numberOfColumns, values);\r\n+                    AECommon.testGetObject(rs, numberOfColumns, values);\r\n+                    AECommon.testGetBigDecimal(rs, numberOfColumns, values);\r\n+                    AECommon.testWithSpecifiedtype(rs, numberOfColumns, values);\r\n+                }\r\n+            } catch (Exception e) {\r\n+                fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "906a1111568824fa48dcbc4392d7c9da90f09a56", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..b276e14e 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -181,8 +210,6 @@ public class MSITest extends AESetup {\n                     AECommon.testGetBigDecimal(rs, numberOfColumns, values);\n                     AECommon.testWithSpecifiedtype(rs, numberOfColumns, values);\n                 }\n-            } catch (Exception e) {\n-                fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n             }\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -181,8 +299,6 @@ public class MSITest extends AESetup {\n                     AECommon.testGetBigDecimal(rs, numberOfColumns, values);\n                     AECommon.testWithSpecifiedtype(rs, numberOfColumns, values);\n                 }\n-            } catch (Exception e) {\n-                fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n             }\n         }\n     }\n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -302,4 +356,32 @@ public class MSITest extends AESetup {\n             }\n         }\n     }\n+\n+    @BeforeEach\n+    public void registerAKVProvider() throws Exception {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n+        Map<String, SQLServerColumnEncryptionKeyStoreProvider> map = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+        if (null == akvProvider && null != applicationClientID && null != applicationKey) {\n+            File file = null;\n+            try {\n+                file = new File(Constants.MSSQL_JDBC_PROPERTIES);\n+                try (OutputStream os = new FileOutputStream(file);) {\n+                    Properties props = new Properties();\n+                    // Append to the list of hardcoded endpoints.\n+                    props.setProperty(Constants.AKV_TRUSTED_ENDPOINTS_KEYWORD, \";vault.azure.net\");\n+                    props.store(os, \"\");\n+                }\n+                akvProvider = new SQLServerColumnEncryptionAzureKeyVaultProvider(applicationClientID, applicationKey);\n+                map.put(Constants.AZURE_KEY_VAULT_NAME, akvProvider);\n+            } finally {\n+                if (null != file) {\n+                    file.delete();\n+                }\n+            }\n+        }\n+\n+        SQLServerConnection.registerColumnEncryptionKeyStoreProviders(map);\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMDY3Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401200673", "body": "I would prefer to use `KeyVaultManagedIdentity` here, that is what the feature is about.", "bodyText": "I would prefer to use KeyVaultManagedIdentity here, that is what the feature is about.", "bodyHTML": "<p dir=\"auto\">I would prefer to use <code>KeyVaultManagedIdentity</code> here, that is what the feature is about.</p>", "author": "ulvii", "createdAt": "2020-03-31T20:39:20Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with bad credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithBadCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 76b4de70..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -88,14 +175,91 @@ public class MSITest extends AESetup {\n         testCharAkv(connStr);\n     }\n \n+    /*\n+     * Test AKV with MSI and and principal id\n+     */\n+    @Test\n+    public void testCharAkvWithMSIandPrincipalId() throws SQLException {\n+        // set to use Managed Identity for keystore auth and principal id\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\n+                \"KeyVaultManagedIdentity\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        testCharAkv(connStr);\n+    }\n+\n+    /*\n+     * Test AKV with with missing credentials\n+     */\n+    @Test\n+    public void testNumericAkvMissingCred() throws SQLException {\n+        // set auth type to key vault client secret but do not provide secret\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assertTrue(e.getMessage().matches(TestUtils.formatErrorMsg(\"R_keyStoreSecretNotSet\")), e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test AKV with with keyStoreSecret secret but no keyStoreAuthentication\n+     */\n+    @Test\n+    public void testNumericAkvSecretNoAuth() throws SQLException {\n+        // set key store secret but do not specify authentication type\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assertTrue(e.getMessage().matches(TestUtils.formatErrorMsg(\"R_keyStoreAuthenticationNotSet\")),\n+                    e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test AKV with with keyStorePrincipalId but no keyStoreAuthentication\n+     */\n+    @Test\n+    public void testNumericAkvPrincipalIdNoAuth() throws SQLException {\n+        // set principal id but do not specify authentication type\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assertTrue(e.getMessage().matches(TestUtils.formatErrorMsg(\"R_keyStoreAuthenticationNotSet\")),\n+                    e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test AKV with with keyStoreLocation but no keyStoreAuthentication\n+     */\n+    @Test\n+    public void testNumericAkvLocationNoAuth() throws SQLException {\n+        // set key store location but do not specify authentication type\n+        String connStr = AETestConnectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_LOCATION, \"location\");\n+        try {\n+            testNumericAKV(connStr);\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\n+        } catch (Exception e) {\n+            assertTrue(e.getMessage().matches(TestUtils.formatErrorMsg(\"R_keyStoreAuthenticationNotSet\")),\n+                    e.getMessage());\n+        }\n+    }\n+\n     /*\n      * Test AKV with with bad credentials\n      */\n     @Test\n     public void testNumericAkvWithBadCred() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         // add credentials to connection string\n         String connStr = AETestConnectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n", "next_change": {"commit": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 17814b34..1ee50066 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -260,6 +260,9 @@ public class MSITest extends AESetup {\n      */\n     @Test\n     public void testNumericAkvWithBadCred() throws SQLException {\n+        // unregister the custom providers registered in AESetup\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+\n         // add credentials to connection string\n         String connStr = AETestConnectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"oid": "ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "url": "https://github.com/microsoft/mssql-jdbc/commit/ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "message": "added tests for MSI and principal id only", "committedDate": "2020-03-31T20:57:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNzczNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401227736", "body": "Requests", "bodyText": "Requests", "bodyHTML": "<p dir=\"auto\">Requests</p>", "author": "rene-ye", "createdAt": "2020-03-31T21:31:45Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -5,21 +5,46 @@\n \r\n package com.microsoft.sqlserver.jdbc;\r\n \r\n+import static java.nio.charset.StandardCharsets.UTF_8;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.HttpURLConnection;\r\n+import java.net.URL;\r\n import java.security.InvalidKeyException;\r\n import java.security.NoSuchAlgorithmException;\r\n+import java.text.DateFormat;\r\n import java.text.MessageFormat;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.ArrayList;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import java.util.concurrent.ThreadLocalRandom;\r\n+import java.util.logging.Level;\r\n \r\n import javax.crypto.Mac;\r\n import javax.crypto.spec.SecretKeySpec;\r\n \r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection.ActiveDirectoryAuthentication;\r\n+\r\n \r\n /**\r\n  * Various SQLServer security utilities.\r\n  *\r\n  */\r\n class SQLServerSecurityUtility {\r\n+    static final private java.util.logging.Logger connectionlogger = java.util.logging.Logger\r\n+            .getLogger(\"com.microsoft.sqlserver.jdbc.internals.SQLServerConnection\");\r\n+\r\n+    static final int GONE = 410;\r\n+    static final int TOO_MANY_RESQUESTS = 429;\r", "originalCommit": "ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "7f3af328177744039f76be1d891d1529a387b884", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 5167917d..d0b64a4f 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -46,6 +44,8 @@ class SQLServerSecurityUtility {\n     static final int INTERNAL_SERVER_ERROR = 500;\n     static final int NETWORK_CONNECT_TIMEOUT_ERROR = 599;\n \n+    static final String WINDOWS_KEY_STORE_NAME = \"MSSQL_CERTIFICATE_STORE\";\n+\n     /**\n      * Give the hash of given plain text\n      * \n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex d0b64a4f..277ddbc6 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -46,6 +40,12 @@ class SQLServerSecurityUtility {\n \n     static final String WINDOWS_KEY_STORE_NAME = \"MSSQL_CERTIFICATE_STORE\";\n \n+    // Environment variable for intellij keepass database path\n+    private static final String INTELLIJ_KEEPASS_PASS = \"INTELLIJ_KEEPASS_PATH\";\n+\n+    // Environment variable for additionally allowed tenants. The tenantIds are comma delimited\n+    private static final String ADDITIONALLY_ALLOWED_TENANTS = \"ADDITIONALLY_ALLOWED_TENANTS\";\n+\n     /**\n      * Give the hash of given plain text\n      * \n", "next_change": {"commit": "c443c7c521676813b6a7da15740d7a8ffc1880d3", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 277ddbc6..26df5bb5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -46,6 +46,10 @@ class SQLServerSecurityUtility {\n     // Environment variable for additionally allowed tenants. The tenantIds are comma delimited\n     private static final String ADDITIONALLY_ALLOWED_TENANTS = \"ADDITIONALLY_ALLOWED_TENANTS\";\n \n+    private SQLServerSecurityUtility() {\n+        throw new UnsupportedOperationException(SQLServerException.getErrString(\"R_notSupported\"));\n+    }\n+    \n     /**\n      * Give the hash of given plain text\n      * \n", "next_change": {"commit": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "changed_code": [{"header": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\nindex 26df5bb5..9f8755f9 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java\n", "chunk": "@@ -49,7 +49,7 @@ class SQLServerSecurityUtility {\n     private SQLServerSecurityUtility() {\n         throw new UnsupportedOperationException(SQLServerException.getErrString(\"R_notSupported\"));\n     }\n-    \n+\n     /**\n      * Give the hash of given plain text\n      * \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "3b4f0a20623ea57bfaf02deb2117b0cb7daac001", "committedDate": "2020-04-30 11:16:47 -0700", "message": "Fix "}, {"oid": "664c2407773ff27cdfed323fa7aed714f1e492d9", "committedDate": "2020-09-29 21:26:14 -0700", "message": "Updated to latest Azure SDK API (#1418)"}, {"oid": "7f3af328177744039f76be1d891d1529a387b884", "committedDate": "2021-08-17 17:45:06 -0700", "message": "Add support for multi-user key store providers (#1614)"}, {"oid": "aef84944b1731fd0de40b004bcff7e44b4f31ad8", "committedDate": "2022-01-24 11:15:26 -0800", "message": "Fix issues detected by SonarQube (#1739)"}, {"oid": "1e7cdfe7702a6417477fd5d19ed6c0b1aa5e6c93", "committedDate": "2022-03-17 11:02:01 -0700", "message": "fix msi retry interval (#1770)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "c79db605cb78f8593b658ac506aad0f2f3d533d0", "committedDate": "2022-11-03 15:21:54 -0700", "message": "Access token callback (#1940)"}, {"oid": "8e2c15dbc82cd2d62df125076e31a33c527240f8", "committedDate": "2022-11-22 13:42:57 -0800", "message": "More fixes for SonarQube warnings and coding standards (#1969)"}, {"oid": "8f5f9dacd646385aa08eb9047d56361756cd3a76", "committedDate": "2022-12-22 13:46:18 -0800", "message": "More code clean up to fix SonarQube issues (#1977)"}, {"oid": "c443c7c521676813b6a7da15740d7a8ffc1880d3", "committedDate": "2023-01-23 16:02:32 -0800", "message": "more fixes (#2049)"}, {"oid": "1f67567fee6b0c9a6c4bd9db9fa5fa75d8299ee2", "committedDate": "2023-02-23 14:45:38 -0800", "message": "Fixed issues detected by SonarQube (#2080)"}]}, {"oid": "906a1111568824fa48dcbc4392d7c9da90f09a56", "url": "https://github.com/microsoft/mssql-jdbc/commit/906a1111568824fa48dcbc4392d7c9da90f09a56", "message": "review updates", "committedDate": "2020-03-31T21:44:26Z", "type": "commit"}, {"oid": "19e28a736913cf56e6caee992cce8f3b9de2b090", "url": "https://github.com/microsoft/mssql-jdbc/commit/19e28a736913cf56e6caee992cce8f3b9de2b090", "message": "added more MSI auth tests", "committedDate": "2020-03-31T22:20:59Z", "type": "commit"}, {"oid": "0b0d70d10810320422c1b359acb304ff9cf639fd", "url": "https://github.com/microsoft/mssql-jdbc/commit/0b0d70d10810320422c1b359acb304ff9cf639fd", "message": "tag for testing MSI auth", "committedDate": "2020-03-31T22:35:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NzU2OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401257569", "body": "Please also add similar tests that test ActiveDirectoryMSI along with msiClientId ", "bodyText": "Please also add similar tests that test ActiveDirectoryMSI along with msiClientId", "bodyHTML": "<p dir=\"auto\">Please also add similar tests that test ActiveDirectoryMSI along with msiClientId</p>", "author": "ulvii", "createdAt": "2020-03-31T22:41:56Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+\r\n+    /*\r\n+     * Test MSI auth\r\n+     */\r\n+    @Tag(Constants.xSQLv12)\r\n+    @Tag(Constants.xSQLv14)\r\n+    @Tag(Constants.xSQLv15)\r\n+    @Test\r\n+    public void testMSIAuth() throws SQLException {\r", "originalCommit": "0b0d70d10810320422c1b359acb304ff9cf639fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex db162142..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -45,15 +53,31 @@ public class MSITest extends AESetup {\n     @Tag(Constants.xSQLv15)\n     @Test\n     public void testMSIAuth() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n \n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Test MSI auth with msiClientId\n+     */\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testMSIAuthWithMSIClientId() throws SQLException {\n         String connStr = connectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n", "next_change": {"commit": "692fe4eacb5c3f183257c69c4a404dc0524df255", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 17814b34..7eec04b7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -85,6 +87,7 @@ public class MSITest extends AESetup {\n     /*\n      * Test MSI auth using datasource\n      */\n+    @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 7eec04b7..92d39bb7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -53,80 +52,167 @@ public class MSITest extends AESetup {\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testMSIAuth() throws SQLException {\n+    public void testManagedIdentityAuth() throws SQLException {\n         String connStr = connectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n \n+        testSimpleConnect(connStr);\n+\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryManagedIdentity\");\n+\n+        testSimpleConnect(connStr);\n+    }\n+\n+    private void testSimpleConnect(String connStr) {\n         try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n \n     /*\n-     * Test MSI auth with msiClientId\n+     * Test Managed Identity auth with Managed Identity client ID\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testMSIAuthWithMSIClientId() throws SQLException {\n+    public void testManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n+        // Test with user=<managed-identity-client-id>\n+        try {\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+            // Set msiClientId to incorrect managed identity client ID. Since \"User\" is set with the ID, \"User\" should override msiClientId.\n+            // Otherwise, test should fail with the incorrect \"msiClientId\" property value because \"User\" was not overrided\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID,\n+                    \"incorrect-managed-identity-client-id\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION,\n+                    \"ActiveDirectoryManagedIdentity\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        } catch (CredentialUnavailableException ce) {\n+            fail(\"\\\"User\\\" was overrided by incorrect managed identity client ID set in \\\"msiClientId\\\" property.\");\n         }\n+\n+        // Test with msiClientId=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, managedIdentityClientId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n     }\n \n     /*\n-     * Test MSI auth using datasource\n+     * Test Managed Identity auth using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuth() throws SQLException {\n+    public void testDSManagedIdentityAuth() throws SQLException {\n         String connStr = connectionString;\n+\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n         AbstractTest.updateDataSource(connStr, ds);\n \n-        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n+\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n     /*\n-     * Test MSI auth with msiClientId using datasource\n+     * Test Managed Identity auth with a Managed Identity client ID using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuthWithMSIClientId() throws SQLException {\n+    public void testDSManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+\n+        // Test with user=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n \n         SQLServerDataSource ds = new SQLServerDataSource();\n+        AbstractTest.updateDataSource(connStr, ds);\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Test with msiClientId=<managed-identity-client-id>\n+        ds.setUser(\"\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         ds.setAuthentication(\"ActiveDirectoryMSI\");\n-        ds.setMSIClientId(msiClientId);\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuth() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"DefaultAzureCredential\");\n+\n+        // With Managed Identity client ID\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+\n+        // Without Managed Identity client ID\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuthDS() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setAuthentication(\"DefaultAzureCredential\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         AbstractTest.updateDataSource(connStr, ds);\n \n-        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n+        // With msiClientId property\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without msiClientId property\n+        ds.setMSIClientId(\"\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // With user property\n+        ds.setUser(managedIdentityClientId);\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without user property\n+        ds.setUser(\"\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n     /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"oid": "8b9e6331c22499af4272e50615d3dcd428f6f622", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b9e6331c22499af4272e50615d3dcd428f6f622", "message": "msi auth servers tags", "committedDate": "2020-03-31T22:45:26Z", "type": "commit"}, {"oid": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "url": "https://github.com/microsoft/mssql-jdbc/commit/19a582e1d8750ecc746f334c0a7f43cb66121a6a", "message": "added MSI auth w msiClientId tests", "committedDate": "2020-03-31T22:57:00Z", "type": "commit"}, {"oid": "9497069ad2421e9c7dbe644d7b16cea2c927555c", "url": "https://github.com/microsoft/mssql-jdbc/commit/9497069ad2421e9c7dbe644d7b16cea2c927555c", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-31T23:35:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NjAyNw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401276027", "body": "There are unused imports here", "bodyText": "There are unused imports here", "bodyHTML": "<p dir=\"auto\">There are unused imports here</p>", "author": "ulvii", "createdAt": "2020-03-31T23:39:20Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r", "originalCommit": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33edae9e8170240c486da3c1277e6c18b97de8d6", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 12b5002d..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -16,7 +16,6 @@ import org.junit.jupiter.api.Test;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.runner.RunWith;\n \n-import com.microsoft.aad.adal4j.AuthenticationException;\n import com.microsoft.sqlserver.jdbc.SQLServerConnection;\n import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\n import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 12b5002d..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -16,7 +16,6 @@ import org.junit.jupiter.api.Test;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.runner.RunWith;\n \n-import com.microsoft.aad.adal4j.AuthenticationException;\n import com.microsoft.sqlserver.jdbc.SQLServerConnection;\n import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\n import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\n", "next_change": {"commit": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..17814b34 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -5,17 +5,27 @@\n package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\n \n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n \n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.runner.RunWith;\n \n+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionAzureKeyVaultProvider;\n+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionKeyStoreProvider;\n import com.microsoft.sqlserver.jdbc.SQLServerConnection;\n import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\n import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTMyOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401281329", "body": "aren't you supposed to use connStr ?", "bodyText": "aren't you supposed to use connStr ?", "bodyHTML": "<p dir=\"auto\">aren't you supposed to use connStr ?</p>", "author": "ulvii", "createdAt": "2020-03-31T23:56:29Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+\r\n+    /*\r\n+     * Test MSI auth\r\n+     */\r\n+    @Tag(Constants.xSQLv12)\r\n+    @Tag(Constants.xSQLv14)\r\n+    @Tag(Constants.xSQLv15)\r\n+    @Test\r\n+    public void testMSIAuth() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        String connStr = connectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\r\n+\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r", "originalCommit": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b7f14a1d09263b328ffb9818ae7a8f32bcc7d3", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 12b5002d..d74586fe 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class MSITest extends AESetup {\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n \n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6a483b0a5e83816b79332ca2a772324087f6e4de", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 12b5002d..6c073eaf 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -53,7 +51,7 @@ public class MSITest extends AESetup {\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n \n-        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n             fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n         }\n     }\n", "next_change": {"commit": "692fe4eacb5c3f183257c69c4a404dc0524df255", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 6c073eaf..7eec04b7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -59,14 +67,12 @@ public class MSITest extends AESetup {\n     /*\n      * Test MSI auth with msiClientId\n      */\n+    @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n     public void testMSIAuthWithMSIClientId() throws SQLException {\n-        // unregister the custom providers registered in AESetup\n-        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\n-\n         String connStr = connectionString;\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n", "next_change": {"commit": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 7eec04b7..ce8a562b 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -79,9 +92,18 @@ public class MSITest extends AESetup {\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {} catch (Exception e) {\n-            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\n-        }\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL, \"0\");\n+\n+        testSimpleConnect(connStr);\n+\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL,\n+                Integer.toString(Integer.MAX_VALUE));\n+\n+        testSimpleConnect(connStr);\n+\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL, \"\");\n+\n+        testSimpleConnect(connStr); // This call will use a cached token\n     }\n \n     /*\n", "next_change": {"commit": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex ce8a562b..0ea51ed5 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -92,18 +85,10 @@ public class MSITest extends AESetup {\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL, \"0\");\n-\n         testSimpleConnect(connStr);\n \n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL,\n-                Integer.toString(Integer.MAX_VALUE));\n-\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n         testSimpleConnect(connStr);\n-\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSITOKENCACHETTL, \"\");\n-\n-        testSimpleConnect(connStr); // This call will use a cached token\n     }\n \n     /*\n", "next_change": {"commit": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "changed_code": [{"header": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\nindex 0ea51ed5..92d39bb7 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java\n", "chunk": "@@ -71,74 +72,146 @@ public class MSITest extends AESetup {\n     }\n \n     /*\n-     * Test MSI auth with msiClientId\n+     * Test Managed Identity auth with Managed Identity client ID\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testMSIAuthWithMSIClientId() throws SQLException {\n+    public void testManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, msiClientId);\n \n-        testSimpleConnect(connStr);\n+        // Test with user=<managed-identity-client-id>\n+        try {\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n+\n+            // Set msiClientId to incorrect managed identity client ID. Since \"User\" is set with the ID, \"User\" should override msiClientId.\n+            // Otherwise, test should fail with the incorrect \"msiClientId\" property value because \"User\" was not overrided\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID,\n+                    \"incorrect-managed-identity-client-id\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+            connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION,\n+                    \"ActiveDirectoryManagedIdentity\");\n+            try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        } catch (CredentialUnavailableException ce) {\n+            fail(\"\\\"User\\\" was overrided by incorrect managed identity client ID set in \\\"msiClientId\\\" property.\");\n+        }\n \n+        // Test with msiClientId=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.MSICLIENTID, managedIdentityClientId);\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\n-        testSimpleConnect(connStr);\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr)) {}\n     }\n \n     /*\n-     * Test MSI auth using datasource\n+     * Test Managed Identity auth using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuth() throws SQLException {\n+    public void testDSManagedIdentityAuth() throws SQLException {\n         String connStr = connectionString;\n+\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n-\n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n         AbstractTest.updateDataSource(connStr, ds);\n \n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n \n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n-        AbstractTest.updateDataSource(connStr, ds);\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n \n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n     /*\n-     * Test MSI auth with msiClientId using datasource\n+     * Test Managed Identity auth with a Managed Identity client ID using datasource\n      */\n     @Tag(Constants.xSQLv11)\n     @Tag(Constants.xSQLv12)\n     @Tag(Constants.xSQLv14)\n     @Tag(Constants.xSQLv15)\n     @Test\n-    public void testDSMSIAuthWithMSIClientId() throws SQLException {\n+    public void testDSManagedIdentityAuthWithManagedIdentityClientId() throws SQLException {\n         String connStr = connectionString;\n-        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+\n+        // Test with user=<managed-identity-client-id>\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n         connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n \n         SQLServerDataSource ds = new SQLServerDataSource();\n-        ds.setAuthentication(\"ActiveDirectoryMSI\");\n-        ds.setMSIClientId(msiClientId);\n         AbstractTest.updateDataSource(connStr, ds);\n-\n+        ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n \n+        // Test with msiClientId=<managed-identity-client-id>\n+        ds.setUser(\"\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         ds.setAuthentication(\"ActiveDirectoryMSI\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+        ds.setAuthentication(\"ActiveDirectoryManagedIdentity\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuth() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, managedIdentityClientId);\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"DefaultAzureCredential\");\n+\n+        // With Managed Identity client ID\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+\n+        // Without Managed Identity client ID\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        try (SQLServerConnection con = (SQLServerConnection) PrepUtil.getConnection(connStr)) {}\n+    }\n+\n+    @Tag(Constants.xSQLv11)\n+    @Tag(Constants.xSQLv12)\n+    @Tag(Constants.xSQLv14)\n+    @Tag(Constants.xSQLv15)\n+    @Test\n+    public void testDefaultAzureCredentialAuthDS() throws SQLException {\n+        String connStr = connectionString;\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\n+\n+        SQLServerDataSource ds = new SQLServerDataSource();\n+        ds.setAuthentication(\"DefaultAzureCredential\");\n+        ds.setMSIClientId(managedIdentityClientId);\n         AbstractTest.updateDataSource(connStr, ds);\n \n+        // With msiClientId property\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without msiClientId property\n+        ds.setMSIClientId(\"\");\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // With user property\n+        ds.setUser(managedIdentityClientId);\n+        try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n+\n+        // Without user property\n+        ds.setUser(\"\");\n         try (SQLServerConnection con = (SQLServerConnection) ds.getConnection()) {}\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6a483b0a5e83816b79332ca2a772324087f6e4de", "message": "Merge commit", "committedDate": null}, {"oid": "947b537df005666c768ba19ed6fb776b68a490de", "committedDate": "2020-04-06 15:08:17 -0700", "message": "Add more tests for Managed Identities authentication for AKV to increase code coverage (#1305)"}, {"oid": "6769d4ab4af1ae8fda7bcd1f4c1b30773be4bced", "committedDate": "2020-10-13 22:12:53 -0700", "message": "Upgrading to new Key Vault (and MSAL) libraries (#1413)"}, {"oid": "17569c6aa1347d1c691581055c4f7a98fc0ab813", "committedDate": "2021-05-20 16:48:25 -0700", "message": "Add exception error messages to test failures (#1584)"}, {"oid": "17253cfcdc605ba5d8d17fccea8bdf1094eb1709", "committedDate": "2021-07-16 12:12:57 -0700", "message": "Fix MSI test failures (#1609)"}, {"oid": "4b7c218da1d9113c2e8276f2078b96baf9adb14d", "committedDate": "2021-07-28 18:45:29 -0700", "message": "Fix test failures (#1624)"}, {"oid": "692fe4eacb5c3f183257c69c4a404dc0524df255", "committedDate": "2021-12-14 12:40:29 -0800", "message": "added xSQLv11 tag for tests not compatible with SQL Server 2012 (#1713)"}, {"oid": "7ffc2f0b5c7b88269c7603f5e3faeb1470fd44ea", "committedDate": "2022-05-26 12:09:57 -0700", "message": "Managed Identity token cache (#1825)"}, {"oid": "cee2c54f87bfb75054d5b61720d59ee9a8a73a27", "committedDate": "2022-10-18 14:36:27 -0700", "message": "Fixed Managed Identity tests (#1935)"}, {"oid": "095c7ee28e0a557e06ee2b913ee488daa3a9c64f", "committedDate": "2022-10-26 14:24:24 -0700", "message": "Managed Identity dev experience improvements (#1936)"}, {"oid": "d842883e3e69420a7a798294cb58ac252eead011", "committedDate": "2023-01-26 12:52:12 -0800", "message": "Renamed driver DefaultAzureCredential authentication to ActiveDirectoryDefault (#2055)"}]}, {"oid": "a1b7f14a1d09263b328ffb9818ae7a8f32bcc7d3", "url": "https://github.com/microsoft/mssql-jdbc/commit/a1b7f14a1d09263b328ffb9818ae7a8f32bcc7d3", "message": "fixed connectstr issue", "committedDate": "2020-04-01T00:36:01Z", "type": "commit"}, {"oid": "33edae9e8170240c486da3c1277e6c18b97de8d6", "url": "https://github.com/microsoft/mssql-jdbc/commit/33edae9e8170240c486da3c1277e6c18b97de8d6", "message": "removed unused imports", "committedDate": "2020-04-01T00:43:37Z", "type": "commit"}, {"oid": "b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "url": "https://github.com/microsoft/mssql-jdbc/commit/b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "message": "fixed resource strings", "committedDate": "2020-04-01T01:16:12Z", "type": "commit"}]}