{"pr_number": 301, "pr_title": "create default ack_status node for moduleVersion. update portal view url", "pr_author": "xdavidson", "pr_createdAt": "2020-05-29T16:10:31Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/301", "merge_commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "timeline": [{"oid": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "url": "https://github.com/redhataccess/pantheon/commit/62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "message": "create default ack_status node for moduleVersion. update portal view url", "committedDate": "2020-05-29T16:08:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r432617274", "body": "I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.", "bodyText": "I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.", "bodyHTML": "<p dir=\"auto\">I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.</p>", "author": "carlosmunoz", "createdAt": "2020-05-29T16:59:35Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -300,6 +294,9 @@ private String buildModule(@Nonnull Module base, @Nonnull Locale locale, @Nonnul\n                         .jcrData().get());\n                 html = asciidoctor.convert(content.toString(), ob.get());\n                 cacheContent(moduleVersion, html);\n+\n+                // ack_status\n+                moduleVersion.ackStatus().getOrCreate();", "originalCommit": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMjY3MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434202671", "bodyText": "comment added", "author": "xdavidson", "createdAt": "2020-06-02T22:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "dc5de92d26ed920ef46573905699c0fe3c685059", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\nindex 3ae00ca..7fc0c49 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n", "chunk": "@@ -296,6 +296,7 @@ public class AsciidoctorService {\n                 cacheContent(moduleVersion, html);\n \n                 // ack_status\n+                // TODO: re-evaluate where ack_status node should be created\n                 moduleVersion.ackStatus().getOrCreate();\n             } finally {\n                 asciidoctorPool.returnObject(asciidoctor);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\nindex 3ae00ca..7fc0c49 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n", "chunk": "@@ -296,6 +296,7 @@ public class AsciidoctorService {\n                 cacheContent(moduleVersion, html);\n \n                 // ack_status\n+                // TODO: re-evaluate where ack_status node should be created\n                 moduleVersion.ackStatus().getOrCreate();\n             } finally {\n                 asciidoctorPool.returnObject(asciidoctor);\n", "next_change": {"commit": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\nindex 7fc0c49..b2ec801 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n", "chunk": "@@ -293,11 +300,11 @@ public class AsciidoctorService {\n                         .jcrContent().get()\n                         .jcrData().get());\n                 html = asciidoctor.convert(content.toString(), ob.get());\n-                cacheContent(moduleVersion, html);\n+                cacheContent(documentVersion, html);\n \n                 // ack_status\n                 // TODO: re-evaluate where ack_status node should be created\n-                moduleVersion.ackStatus().getOrCreate();\n+                documentVersion.ackStatus().getOrCreate();\n             } finally {\n                 asciidoctorPool.returnObject(asciidoctor);\n             }\n", "next_change": {"commit": "e1d19c93124561f2c81dff4b785fd85156529531", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\nindex b2ec801..17c9bb5 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n", "chunk": "@@ -310,7 +338,6 @@ public class AsciidoctorService {\n             }\n             log.info(\"Rendering finished in {} ms.\", System.currentTimeMillis() - start);\n             serviceResourceResolver.commit();\n-\n             return html;\n         } catch (PersistenceException pex) {\n             throw new RuntimeException(pex);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "8bd175f57b2cc6479b8cb91c36ddbbfcd25b36b6", "committedDate": "2020-06-11 15:00:28 -0400", "message": "Add web component to module display and improve web dev process (#314)"}, {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "committedDate": "2020-07-20 15:16:43 -0400", "message": "Adding Document classes that Module classes now extend (#335)"}, {"oid": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea", "committedDate": "2020-07-24 14:24:44 -0400", "message": "Adds Assembly classes to our Sling Model for future development work (#351)"}, {"oid": "a3708299e68c7d0b9808303c5520103f046b945a", "committedDate": "2020-08-11 10:47:30 -0400", "message": "Assembly relationships + table of contents (#357)"}, {"oid": "4351e59ea82ce9ff3191965325f96ebfd9c5b744", "committedDate": "2020-08-20 20:45:46 +0530", "message": " (CCS-3550) Publishing or republishing an assembly (#369)"}, {"oid": "86c3cf283e792850dd6ae6b0441902e0f70e9327", "committedDate": "2020-08-21 15:47:09 -0400", "message": "Basic Xref functionality (#371)"}, {"oid": "fb2415613b069f31950cfbb145080ef9889ff31b", "committedDate": "2020-09-04 14:59:33 -0400", "message": "Fixes to leveloffset code (#392)"}, {"oid": "0e10d0c46386fa87e8c30dc7410cda29fd1638c9", "committedDate": "2020-09-17 14:54:54 -0400", "message": "Revert mod variants in toc (#416)"}, {"oid": "d1c35118b798ccbc66890f6440985aa4325fad99", "committedDate": "2020-10-30 16:24:13 -0400", "message": "Adding doctype (#463)"}, {"oid": "8233bc8b4221a1c5522a0f33a7289057a1c20284", "committedDate": "2020-11-18 15:13:04 -0500", "message": "Fix publish/updated dates CCS-3877 CCS-3879 (#467)"}, {"oid": "787b9e14f04feb80d4d490828b6be5911575c497", "committedDate": "2020-11-24 14:54:04 -0500", "message": "customer rendering based off environment variable (#472)"}, {"oid": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "committedDate": "2020-12-04 10:51:04 -0500", "message": "eliminate the ResourceTraversal class (#393)"}, {"oid": "8422857c00bba22a2bd47346cfa83f3b239b87b9", "committedDate": "2021-02-02 16:04:55 -0500", "message": "CCS-3917 End User Docs (#502)"}, {"oid": "e1d19c93124561f2c81dff4b785fd85156529531", "committedDate": "2021-04-05 21:16:16 +0530", "message": " (CCS-4273) Create validation result Node(s) in JCR (#551)"}, {"oid": "433b3f98c3578df909e5560cb057cb5b02a64188", "committedDate": "2021-09-22 15:25:02 +0530", "message": "Ccs 4519 xref validation errors (#626)"}]}, {"oid": "dc5de92d26ed920ef46573905699c0fe3c685059", "url": "https://github.com/redhataccess/pantheon/commit/dc5de92d26ed920ef46573905699c0fe3c685059", "message": "add new variant-based api", "committedDate": "2020-06-02T22:05:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434584617", "body": "I would just get rid of the comment", "bodyText": "I would just get rid of the comment", "bodyHTML": "<p dir=\"auto\">I would just get rid of the comment</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:53:53Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -102,6 +104,7 @@ protected String getQuery(SlingHttpServletRequest request) {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n+//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTQ5MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434799491", "bodyText": "done", "author": "xdavidson", "createdAt": "2020-06-03T19:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -104,7 +100,6 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n-//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")\n                     .append(\")\");\n             queryFilters.add(textFilter);\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -104,7 +100,6 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n-//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")\n                     .append(\")\");\n             queryFilters.add(textFilter);\n         }\n", "next_change": null}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "ba1dcee13fb1686a728e6b28c622e6eb64f1ebc3", "committedDate": "2020-07-08 08:24:50 -0400", "message": "Fixing search variant always being 1st variant which may not be canonical (#331)"}, {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "committedDate": "2020-07-20 15:16:43 -0400", "message": "Adding Document classes that Module classes now extend (#335)"}, {"oid": "bcfbd457f5b0cffa334da8d08bd33bad76d927ff", "committedDate": "2020-07-22 20:18:59 -0400", "message": "add mixin type to help with fast querying of documents (#349)"}, {"oid": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea", "committedDate": "2020-07-24 14:24:44 -0400", "message": "Adds Assembly classes to our Sling Model for future development work (#351)"}, {"oid": "2ca827c34ef99d327a3543bf4e2c56a6f3100e01", "committedDate": "2020-09-10 11:39:41 -0400", "message": "CCS-3743 - update labels on left nav and search results. add Assembly to the filter (#410)"}, {"oid": "a4cf47d2b7370e71129381fe12d6d722b16fd809", "committedDate": "2020-12-03 14:22:26 -0500", "message": "Search Beta  (#465)"}, {"oid": "a64d0a43283ac47e3ca089cb517eacc88bcd84df", "committedDate": "2020-12-04 10:26:58 -0500", "message": "Search Beta fixes2 (#484)"}, {"oid": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "committedDate": "2020-12-04 10:51:04 -0500", "message": "eliminate the ResourceTraversal class (#393)"}, {"oid": "371ec48d9386c95f88f4e0b6bb38719f4f0c8002", "committedDate": "2021-03-24 13:26:01 -0400", "message": "Ccs 4270 bulk edit (#545)"}, {"oid": "af8ca30850bbde8a1332f3fd485ec5005381f41d", "committedDate": "2021-04-05 16:48:31 -0400", "message": "Ccs 4274 validations on UI (#560)"}, {"oid": "82e1776950525223ff5d24a70a1a5520e92c32c7", "committedDate": "2021-04-09 16:41:06 -0400", "message": "update UI display for xref validation to adapt to the recent backend changes (#570)"}, {"oid": "629a67d668c8b96472396797d3e56f5179b9585d", "committedDate": "2021-05-05 10:42:16 -0400", "message": "Frontend changes to dates (#587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587479", "body": "instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.", "bodyText": "instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.", "bodyHTML": "<p dir=\"auto\">instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:57:42Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -183,11 +187,14 @@ protected String getQuery(SlingHttpServletRequest request) {\n     protected Map<String, Object> resourceToMap(Resource resource) {\n         Module module = resource.adaptTo(Module.class);\n \n-        String variantName = module.getWorkspace()\n+        String variantName = DEFAULT_VARIANT_NAME;\n+        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n                 .moduleVariantDefinitions().get()\n-                .getVariants()\n-                .findFirst().get()\n-                .getName();\n+                .getVariants();\n+\n+        if (mvd != null) {", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMjUzNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434812534", "bodyText": "updated.", "author": "xdavidson", "createdAt": "2020-06-03T19:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTYxNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434869614", "bodyText": "\ud83d\udc4d\n(you could keep traversing all the way down to the variant name and avoid that null check \ud83d\ude03 )", "author": "carlosmunoz", "createdAt": "2020-06-03T21:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -188,9 +183,9 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Module module = resource.adaptTo(Module.class);\n \n         String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n-                .moduleVariantDefinitions().get()\n-                .getVariants();\n+        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n+                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n+                        .get().getVariants();\n \n         if (mvd != null) {\n             variantName = mvd.findFirst().get().getName();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -188,9 +183,9 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Module module = resource.adaptTo(Module.class);\n \n         String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n-                .moduleVariantDefinitions().get()\n-                .getVariants();\n+        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n+                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n+                        .get().getVariants();\n \n         if (mvd != null) {\n             variantName = mvd.findFirst().get().getName();\n", "next_change": {"commit": "ba1dcee13fb1686a728e6b28c622e6eb64f1ebc3", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex b1329ca..7199123 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -182,14 +182,7 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n     protected Map<String, Object> resourceToMap(Resource resource) {\n         Module module = resource.adaptTo(Module.class);\n \n-        String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n-                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n-                        .get().getVariants();\n-\n-        if (mvd != null) {\n-            variantName = mvd.findFirst().get().getName();\n-        }\n+        String variantName = module.getWorkspace().getCanonicalVariantName();\n \n         Optional<Metadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<Metadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n", "next_change": {"commit": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 7199123..42b97c5 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -184,11 +183,11 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n \n         String variantName = module.getWorkspace().getCanonicalVariantName();\n \n-        Optional<Metadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n-        Optional<Metadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n+        Optional<ModuleMetadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n+        Optional<ModuleMetadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<HashableFileResource> sourceFile =\n                 traverseFrom(module)\n-                        .toChild(m -> m.moduleLocale(DEFAULT_MODULE_LOCALE))\n+                        .toChild(m -> m.locale(DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n                         .getAsOptional();\n", "next_change": {"commit": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 42b97c5..daaabd5 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -186,11 +232,11 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Optional<ModuleMetadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<ModuleMetadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<HashableFileResource> sourceFile =\n-                traverseFrom(module)\n+                Child.from(module)\n                         .toChild(m -> m.locale(DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n-                        .getAsOptional();\n+                        .asOptional();\n \n         // TODO Need some DTOs to convert to maps\n         Map<String, Object> m = super.resourceToMap(resource);\n", "next_change": {"commit": "af8ca30850bbde8a1332f3fd485ec5005381f41d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex daaabd5..87d9b4f 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -238,6 +240,10 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n                         .asOptional();\n \n+        // get Validations\n+        Optional<Validations> draftValidations = module.getValidations(DEFAULT_MODULE_LOCALE, variantName, \"draft\");\n+        Optional<Validations> releasedValidations = module.getValidations(DEFAULT_MODULE_LOCALE, variantName, \"released\");\n+\n         // TODO Need some DTOs to convert to maps\n         Map<String, Object> m = super.resourceToMap(resource);\n         String resourcePath = resource.getPath();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "ba1dcee13fb1686a728e6b28c622e6eb64f1ebc3", "committedDate": "2020-07-08 08:24:50 -0400", "message": "Fixing search variant always being 1st variant which may not be canonical (#331)"}, {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "committedDate": "2020-07-20 15:16:43 -0400", "message": "Adding Document classes that Module classes now extend (#335)"}, {"oid": "bcfbd457f5b0cffa334da8d08bd33bad76d927ff", "committedDate": "2020-07-22 20:18:59 -0400", "message": "add mixin type to help with fast querying of documents (#349)"}, {"oid": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea", "committedDate": "2020-07-24 14:24:44 -0400", "message": "Adds Assembly classes to our Sling Model for future development work (#351)"}, {"oid": "2ca827c34ef99d327a3543bf4e2c56a6f3100e01", "committedDate": "2020-09-10 11:39:41 -0400", "message": "CCS-3743 - update labels on left nav and search results. add Assembly to the filter (#410)"}, {"oid": "a4cf47d2b7370e71129381fe12d6d722b16fd809", "committedDate": "2020-12-03 14:22:26 -0500", "message": "Search Beta  (#465)"}, {"oid": "a64d0a43283ac47e3ca089cb517eacc88bcd84df", "committedDate": "2020-12-04 10:26:58 -0500", "message": "Search Beta fixes2 (#484)"}, {"oid": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "committedDate": "2020-12-04 10:51:04 -0500", "message": "eliminate the ResourceTraversal class (#393)"}, {"oid": "371ec48d9386c95f88f4e0b6bb38719f4f0c8002", "committedDate": "2021-03-24 13:26:01 -0400", "message": "Ccs 4270 bulk edit (#545)"}, {"oid": "af8ca30850bbde8a1332f3fd485ec5005381f41d", "committedDate": "2021-04-05 16:48:31 -0400", "message": "Ccs 4274 validations on UI (#560)"}, {"oid": "82e1776950525223ff5d24a70a1a5520e92c32c7", "committedDate": "2021-04-09 16:41:06 -0400", "message": "update UI display for xref validation to adapt to the recent backend changes (#570)"}, {"oid": "629a67d668c8b96472396797d3e56f5179b9585d", "committedDate": "2021-05-05 10:42:16 -0400", "message": "Frontend changes to dates (#587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4Nzg1NQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587855", "body": "love this url style! :+1: ", "bodyText": "love this url style! \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\">love this url style! <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:58:14Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.google.common.base.Charsets;\n+import com.ibm.icu.util.ULocale;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.module.Metadata;\n+import com.redhat.pantheon.model.module.ModuleVariant;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.CONTENT_TYPE;\n+import static com.redhat.pantheon.model.api.util.ResourceTraversal.traverseFrom;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module/variant.json/${variantUuid}\";", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "22edf5a7d422d742b7ecc5152e37e3e72b1cbb13", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\nindex d3c867f..055fce0 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\n", "chunk": "@@ -38,22 +39,27 @@ import static javax.servlet.http.HttpServletResponse.SC_OK;\n @SlingServletPaths(value = \"/api/module/variant\")\n public class VariantJsonServlet extends AbstractJsonSingleQueryServlet {\n     public static final String PRODUCT_VERSION = \"product_version\";\n+    public static final String VERSION_URL_FRAGMENT = \"version_url_fragment\";\n     public static final String PRODUCT_NAME = \"product_name\";\n-    public static final String PRODUCT_LINK = \"product_link\";\n+    public static final String PRODUCT_URL_FRAGMENT = \"product_url_fragment\";\n     public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n     public static final String SEARCH_KEYWORDS = \"search_keywords\";\n     public static final String VIEW_URI = \"view_uri\";\n     public static final String PORTAL_URL = \"PORTAL_URL\";\n \n-    private final Logger log = LoggerFactory.getLogger(ModuleJsonServlet.class);\n+    private final Logger log = LoggerFactory.getLogger(VariantJsonServlet.class);\n+\n+    private final SlingPathSuffix suffix = new SlingPathSuffix(\"/{variantUuid}\");\n \n     @Override\n     protected String getQuery(SlingHttpServletRequest request) {\n         // Get the query parameter(s)\n-\n-        String uuid = request.getRequestPathInfo().getSuffix().substring(1);\n+        Map<String, String> parameters = suffix.getParameters(request);\n+        String uuid = parameters.get(\"variantUuid\");\n+        // Hydra fetch calls look like this:\n+        // Calling pantheon2 with url https://<HOST>/api/module/variant.json/b537ef3c-5c7d-4280-91ce-e7e818e6cc11&proxyHost=<SOMEHOST>&proxyPort=8080&throwExceptionOnFailure=false\n         StringBuilder query = new StringBuilder(\"select * from [pant:moduleVariant] as moduleVariant WHERE moduleVariant.[jcr:uuid] = '\")\n-                .append(uuid)\n+                .append(sanitizeSuffix(uuid))\n                 .append(\"'\");\n         return query.toString();\n     }\n", "next_change": {"commit": "cb32899e93faea352b201169389118c648e20d64", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\nindex 055fce0..d041ddc 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java\n", "chunk": "@@ -59,7 +67,7 @@ public class VariantJsonServlet extends AbstractJsonSingleQueryServlet {\n         // Hydra fetch calls look like this:\n         // Calling pantheon2 with url https://<HOST>/api/module/variant.json/b537ef3c-5c7d-4280-91ce-e7e818e6cc11&proxyHost=<SOMEHOST>&proxyPort=8080&throwExceptionOnFailure=false\n         StringBuilder query = new StringBuilder(\"select * from [pant:moduleVariant] as moduleVariant WHERE moduleVariant.[jcr:uuid] = '\")\n-                .append(sanitizeSuffix(uuid))\n+                .append(ServletHelper.sanitizeSuffix(uuid))\n                 .append(\"'\");\n         return query.toString();\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "e4c7195e1e697adc131cfe812ade19b8c5a6f469", "committedDate": "2020-06-04 17:12:11 -0400", "message": "sling servlet suffix utility (#307)"}, {"oid": "ad1d7fba7687468519273dc62ac3496f3e37ea04", "committedDate": "2020-06-11 09:54:10 -0400", "message": "ModuleDisplay releasePath bugfix (#310)"}, {"oid": "085224ca6627483e31700bf267b851367cbd26d4", "committedDate": "2020-07-16 10:31:23 -0400", "message": "changes to the SlingPathSuffix to make it safer (#342)"}, {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "committedDate": "2020-07-20 15:16:43 -0400", "message": "Adding Document classes that Module classes now extend (#335)"}, {"oid": "3957b27f29afdc36aa4bbc284047630da37d78d3", "committedDate": "2020-07-22 11:19:45 -0400", "message": "update term to system:abstract per the Assembly Committee (#345)"}, {"oid": "8490b65d1921650e87bb255a9e146848d0f568c4", "committedDate": "2020-07-22 12:06:20 -0400", "message": "hydra team currently maps module_uuid on their end (#347)"}, {"oid": "fd421c99cd678922f3a423645a1f7bb84958102e", "committedDate": "2020-08-25 15:59:57 -0400", "message": "rename assembly_uuid and module_uuid to uuid (#382)"}, {"oid": "22edf5a7d422d742b7ecc5152e37e3e72b1cbb13", "committedDate": "2020-08-31 08:56:00 -0400", "message": "Ccs 3453 module assembly relationship (#390)"}, {"oid": "dafdd5f5b41a16edcb81e7516b25a0956c33566c", "committedDate": "2020-09-02 20:18:20 +0530", "message": "CCS-3775 Update view_uri to match the ideal URL path (#391)"}, {"oid": "b45f10fa6a5710ba1713ec12a1d1c3e1c87999a5", "committedDate": "2020-09-03 08:56:39 +0530", "message": "CCS-3780: \"Included in guides\" API (#395)"}, {"oid": "b658f2062dbbcc4d1b8e2d5b0f668c1791112b00", "committedDate": "2020-09-03 10:31:01 -0400", "message": "Ccs 3703 schema support (#399)"}, {"oid": "facbb1713f792a89aa622a3667061be907adbc2e", "committedDate": "2020-09-17 09:50:04 -0400", "message": "Ccs 3323 send assembly data (#421)"}, {"oid": "0e10d0c46386fa87e8c30dc7410cda29fd1638c9", "committedDate": "2020-09-17 14:54:54 -0400", "message": "Revert mod variants in toc (#416)"}, {"oid": "cb32899e93faea352b201169389118c648e20d64", "committedDate": "2020-09-22 13:09:20 +0530", "message": " CCS-3480: Show assemblies on module detail page (#423)"}, {"oid": "059b8afabe0e8a0a58f9164b23dcf3175b626714", "committedDate": "2020-09-24 10:03:42 -0400", "message": "Ben pantheon urls resolve merge conflicts (#425)"}, {"oid": "737ec2381d6e1839e16739c5e853d142b3be2079", "committedDate": "2020-10-09 13:52:17 -0400", "message": "Fixing up hydra code, now provides url on unpublish (#431)"}, {"oid": "b431f485973b5b7ef36375c77e7b655e046c760c", "committedDate": "2020-10-21 09:14:02 -0400", "message": "Adding document_uuid to variant json servlet (#445)"}, {"oid": "8233bc8b4221a1c5522a0f33a7289057a1c20284", "committedDate": "2020-11-18 15:13:04 -0500", "message": "Fix publish/updated dates CCS-3877 CCS-3879 (#467)"}, {"oid": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "committedDate": "2020-12-04 10:51:04 -0500", "message": "eliminate the ResourceTraversal class (#393)"}, {"oid": "2ff20597d85a496d647ab8ea7d76d7a8271152dc", "committedDate": "2020-12-07 11:47:31 -0500", "message": "CCS-3908 Rework API so the body is what's inside of the cp-documentation tag (#485)"}, {"oid": "29afe5b80d36679a7fff8066ceab6b46bcae5f84", "committedDate": "2021-05-20 15:12:22 -0400", "message": "CCS-4183  Deliver Pre-Live URLs (#596)"}]}, {"oid": "e452d65fef8afb5c15e49472411311d32e366466", "url": "https://github.com/redhataccess/pantheon/commit/e452d65fef8afb5c15e49472411311d32e366466", "message": "update hydra messages to use the variant api", "committedDate": "2020-06-03T18:08:54Z", "type": "commit"}, {"oid": "1ce99b0b382323511fcad0446dc7bff938f0647d", "url": "https://github.com/redhataccess/pantheon/commit/1ce99b0b382323511fcad0446dc7bff938f0647d", "message": "code review fixes", "committedDate": "2020-06-03T19:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2ODQwNg==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434868406", "body": "Not a blocker, but we should add the uuid field to the `ModuleVariant` model so we can use it.", "bodyText": "Not a blocker, but we should add the uuid field to the ModuleVariant model so we can use it.", "bodyHTML": "<p dir=\"auto\">Not a blocker, but we should add the uuid field to the <code>ModuleVariant</code> model so we can use it.</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T21:29:06Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "diffHunk": "@@ -241,32 +242,26 @@ public void checkServerTrusted(X509Certificate[] certs, String authType) {\n     private String buildModuleVersionUri(ModuleVersion moduleVersion) {\n         StringSubstitutor strSubs = new StringSubstitutor();\n         HashMap values = Maps.newHashMap();\n-        values.put(\"moduleUuid\", moduleVersion.getParent().getParent().getParent().getParent().uuid().get());\n-        values.put(\"localeId\", moduleVersion.getParent().getParent().getParent().getName());\n-        values.put(\"variantName\", moduleVersion.getParent().getName());\n+        values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?", "originalCommit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ad1d7fba7687468519273dc62ac3496f3e37ea04", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\nindex 7a696bd..7b85a14 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n", "chunk": "@@ -240,10 +240,10 @@ public class HydraIntegration implements EventProcessingExtension {\n     }\n \n     private String buildModuleVersionUri(ModuleVersion moduleVersion) {\n-        StringSubstitutor strSubs = new StringSubstitutor();\n         HashMap values = Maps.newHashMap();\n         values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n                 moduleVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n+        StringSubstitutor strSubs = new StringSubstitutor(values);\n \n         String replacedUri = strSubs.replace(PANTHEON_MODULE_VERSION_API_PATH);\n         return this.getPantheonHost() + replacedUri;\n", "next_change": {"commit": "facbb1713f792a89aa622a3667061be907adbc2e", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\nindex 7b85a14..673de68 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n", "chunk": "@@ -239,30 +226,131 @@ public class HydraIntegration implements EventProcessingExtension {\n         return factory;\n     }\n \n-    private String buildModuleVersionUri(ModuleVersion moduleVersion) {\n+    private String buildDocumentVersionUri(DocumentVersion documentVersion) {\n         HashMap values = Maps.newHashMap();\n-        values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n-                moduleVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n+        String replacedUri = \"\";\n+        values.put(\"variantUuid\", documentVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n+                documentVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n         StringSubstitutor strSubs = new StringSubstitutor(values);\n \n-        String replacedUri = strSubs.replace(PANTHEON_MODULE_VERSION_API_PATH);\n+        if (documentVersion.isResourceType(\"pantheon/moduleVersion\")) {\n+            replacedUri = strSubs.replace(PANTHEON_MODULE_VERSION_API_PATH);\n+        } else {\n+            replacedUri = strSubs.replace(PANTHEON_ASSEMBLY_VERSION_API_PATH);\n+        }\n+\n         return this.getPantheonHost() + replacedUri;\n     }\n \n \n-    private String getPortalUri(ModuleVersion moduleVersion) {\n-        final String uriTemplate = System.getenv(PORTAL_URL) + \"/topics/${localeId}/${variantUuid}\";\n+    private String getPortalTopicUri(ModuleVersion moduleVersion) throws RepositoryException {\n+        final String uriTemplate = System.getenv(PORTAL_URL)\n+                    + \"/documentation/${localeId}/topic\"\n+                    + \"/${productUrlFragment}/${versionUrlFragment}\"\n+                    + \"/${variantUuid}\";\n \n         HashMap values = Maps.newHashMap();\n         // TODO Clean this up, lots of locale transformations to make sure this aligns\n+        ProductVersion productVersion = moduleVersion.metadata().get().productVersion().getReference();\n+        String versionUrlFragment = \"\";\n+        String productUrlFragment = \"\";\n+        if (productVersion != null) {\n+            versionUrlFragment = productVersion.getValueMap().containsKey(\"urlFragment\") ? productVersion.urlFragment().get() : \"\";\n+            productUrlFragment = productVersion.getProduct().getValueMap().containsKey(\"urlFragment\") ? productVersion.getProduct().urlFragment().get(): \"\";\n+        }\n         values.put(\"localeId\", toLanguageTag(\n                 ULocale.createCanonical(\n                         moduleVersion.getParent().getParent().getParent().getName())\n                         .toLocale()));\n+        values.put(\"productUrlFragment\", productUrlFragment);\n+        values.put(\"versionUrlFragment\", versionUrlFragment);\n         values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n                 moduleVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n         StringSubstitutor strSubs = new StringSubstitutor(values);\n \n         return strSubs.replace(uriTemplate);\n     }\n+\n+    private String getPortalGuideUri(AssemblyVersion assemblyVersion) throws RepositoryException {\n+        final String uriTemplate = System.getenv(PORTAL_URL)\n+                    + \"/documentation/${localeId}/guide\"\n+                    + \"/${productUrlFragment}/${versionUrlFragment}\"\n+                    + \"/${variantUuid}\";\n+\n+\n+        HashMap values = Maps.newHashMap();\n+        // TODO Clean this up, lots of locale transformations to make sure this aligns\n+        ProductVersion productVersion = assemblyVersion.metadata().get().productVersion().getReference();\n+        String versionUrlFragment = \"\";\n+        String productUrlFragment = \"\";\n+        if (productVersion != null) {\n+            versionUrlFragment = productVersion.getValueMap().containsKey(\"urlFragment\") ? productVersion.urlFragment().get() : \"\";\n+            productUrlFragment = productVersion.getProduct().getValueMap().containsKey(\"urlFragment\") ? productVersion.getProduct().urlFragment().get(): \"\";\n+        }\n+        values.put(\"localeId\", toLanguageTag(\n+                ULocale.createCanonical(\n+                        assemblyVersion.getParent().getParent().getParent().getName())\n+                        .toLocale()));\n+        values.put(\"productUrlFragment\", productUrlFragment);\n+        values.put(\"versionUrlFragment\", versionUrlFragment);\n+        values.put(\"variantUuid\", assemblyVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n+                assemblyVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n+        StringSubstitutor strSubs = new StringSubstitutor(values);\n+\n+        return strSubs.replace(uriTemplate);\n+    }\n+\n+    private String buildEventMessage(Event event) throws RepositoryException {\n+        String msg = \"\";\n+        String eventValue = \"\";\n+        String idValue = \"\";\n+        String uriValue = \"\";\n+        ModuleVersion moduleVersion = null;\n+        AssemblyVersion assemblyVersion = null;\n+\n+        if (ModuleVersionPublishedEvent.class.equals(event.getClass()) ||\n+                ModuleVersionUnpublishedEvent.class.equals(event.getClass())){\n+            ModuleVersionPublishStateEvent publishStateEvent = (ModuleVersionPublishStateEvent) event;\n+            moduleVersion = SlingModels.getModel(serviceResourceResolverProvider.getServiceResourceResolver(),\n+                    publishStateEvent.getModuleVersionPath(), ModuleVersion.class);\n+            eventValue = ModuleVersionPublishedEvent.class.equals(event.getClass()) ? EVENT_PUBLISH_VALUE : EVENT_UNPUBLISH_VALUE;\n+            idValue = ModuleVersionPublishedEvent.class.equals(event.getClass()) ? buildDocumentVersionUri(moduleVersion) : \"\";\n+        } else if(AssemblyVersionPublishedEvent.class.equals(event.getClass()) ||\n+            AssemblyVersionUnpublishedEvent.class.equals(event.getClass())) {\n+            AssemblyVersionPublishStateEvent publishStateEvent = (AssemblyVersionPublishStateEvent) event;\n+            assemblyVersion = SlingModels.getModel(serviceResourceResolverProvider.getServiceResourceResolver(),\n+                    publishStateEvent.getAssemblyVersionPath(), AssemblyVersion.class);\n+            eventValue = AssemblyVersionPublishedEvent.class.equals(event.getClass()) ? EVENT_PUBLISH_VALUE : EVENT_UNPUBLISH_VALUE;\n+            idValue = AssemblyVersionPublishedEvent.class.equals(event.getClass()) ? buildDocumentVersionUri(assemblyVersion) : \"\";\n+        } else {\n+            log.warn(\"[\" + HydraIntegration.class.getSimpleName() + \"] unhandled event type: \" + event.getClass());\n+        }\n+\n+        if (ModuleVersionPublishedEvent.class.equals(event.getClass()) ||\n+                AssemblyVersionPublishedEvent.class.equals(event.getClass())) {\n+            // TODO Use a json generation api for this\n+            msg = \"{\\\"\"\n+                    + ID_KEY + \"\\\":\" + \"\\\"\" + idValue +\"\\\",\"\n+                    + \"\\\"\" + EVENT_KEY + \"\\\":\" + \"\\\"\" + eventValue + \"\\\"}\";\n+        } else if (ModuleVersionUnpublishedEvent.class.equals(event.getClass()) ||\n+                AssemblyVersionUnpublishedEvent.class.equals(event.getClass())){\n+            if (System.getenv(PORTAL_URL) != null) {\n+                if (ModuleVersionUnpublishedEvent.class.equals(event.getClass())) {\n+                    uriValue = getPortalTopicUri(moduleVersion);\n+                } else if (AssemblyVersionUnpublishedEvent.class.equals(event.getClass())) {\n+                    uriValue = getPortalGuideUri(assemblyVersion);\n+                }\n+\n+                // TODO Use a json generation api for this\n+                msg = \"{\\\"\"\n+                        + ID_KEY + \"\\\":\" + \"\\\"\" + idValue +\"\\\",\"\n+                        + \"\\\"\" + EVENT_KEY + \"\\\":\" + \"\\\"\" + eventValue + \"\\\",\"\n+                        + \"\\\"\" + URI_KEY + \"\\\":\" + \"\\\"\" + uriValue + \"\\\"}\";\n+            }\n+            log.info(\"[\" + HydraIntegration.class.getSimpleName() + \"] pantheon message: \" + msg);\n+        } else {\n+            log.warn(\"[\" + HydraIntegration.class.getSimpleName() + \"] unhandled event type: \" + event.getClass());\n+        }\n+        return msg;\n+    }\n }\n", "next_change": {"commit": "737ec2381d6e1839e16739c5e853d142b3be2079", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\nindex 673de68..cbf79eb 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java\n", "chunk": "@@ -242,111 +227,37 @@ public class HydraIntegration implements EventProcessingExtension {\n         return this.getPantheonHost() + replacedUri;\n     }\n \n-\n-    private String getPortalTopicUri(ModuleVersion moduleVersion) throws RepositoryException {\n-        final String uriTemplate = System.getenv(PORTAL_URL)\n-                    + \"/documentation/${localeId}/topic\"\n-                    + \"/${productUrlFragment}/${versionUrlFragment}\"\n-                    + \"/${variantUuid}\";\n-\n-        HashMap values = Maps.newHashMap();\n-        // TODO Clean this up, lots of locale transformations to make sure this aligns\n-        ProductVersion productVersion = moduleVersion.metadata().get().productVersion().getReference();\n-        String versionUrlFragment = \"\";\n-        String productUrlFragment = \"\";\n-        if (productVersion != null) {\n-            versionUrlFragment = productVersion.getValueMap().containsKey(\"urlFragment\") ? productVersion.urlFragment().get() : \"\";\n-            productUrlFragment = productVersion.getProduct().getValueMap().containsKey(\"urlFragment\") ? productVersion.getProduct().urlFragment().get(): \"\";\n-        }\n-        values.put(\"localeId\", toLanguageTag(\n-                ULocale.createCanonical(\n-                        moduleVersion.getParent().getParent().getParent().getName())\n-                        .toLocale()));\n-        values.put(\"productUrlFragment\", productUrlFragment);\n-        values.put(\"versionUrlFragment\", versionUrlFragment);\n-        values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n-                moduleVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n-        StringSubstitutor strSubs = new StringSubstitutor(values);\n-\n-        return strSubs.replace(uriTemplate);\n-    }\n-\n-    private String getPortalGuideUri(AssemblyVersion assemblyVersion) throws RepositoryException {\n-        final String uriTemplate = System.getenv(PORTAL_URL)\n-                    + \"/documentation/${localeId}/guide\"\n-                    + \"/${productUrlFragment}/${versionUrlFragment}\"\n-                    + \"/${variantUuid}\";\n-\n-\n-        HashMap values = Maps.newHashMap();\n-        // TODO Clean this up, lots of locale transformations to make sure this aligns\n-        ProductVersion productVersion = assemblyVersion.metadata().get().productVersion().getReference();\n-        String versionUrlFragment = \"\";\n-        String productUrlFragment = \"\";\n-        if (productVersion != null) {\n-            versionUrlFragment = productVersion.getValueMap().containsKey(\"urlFragment\") ? productVersion.urlFragment().get() : \"\";\n-            productUrlFragment = productVersion.getProduct().getValueMap().containsKey(\"urlFragment\") ? productVersion.getProduct().urlFragment().get(): \"\";\n-        }\n-        values.put(\"localeId\", toLanguageTag(\n-                ULocale.createCanonical(\n-                        assemblyVersion.getParent().getParent().getParent().getName())\n-                        .toLocale()));\n-        values.put(\"productUrlFragment\", productUrlFragment);\n-        values.put(\"versionUrlFragment\", versionUrlFragment);\n-        values.put(\"variantUuid\", assemblyVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?\n-                assemblyVersion.getParent().getValueMap().get(JcrConstants.JCR_UUID) : \"\");\n-        StringSubstitutor strSubs = new StringSubstitutor(values);\n-\n-        return strSubs.replace(uriTemplate);\n-    }\n-\n     private String buildEventMessage(Event event) throws RepositoryException {\n         String msg = \"\";\n         String eventValue = \"\";\n         String idValue = \"\";\n         String uriValue = \"\";\n-        ModuleVersion moduleVersion = null;\n-        AssemblyVersion assemblyVersion = null;\n-\n-        if (ModuleVersionPublishedEvent.class.equals(event.getClass()) ||\n-                ModuleVersionUnpublishedEvent.class.equals(event.getClass())){\n-            ModuleVersionPublishStateEvent publishStateEvent = (ModuleVersionPublishStateEvent) event;\n-            moduleVersion = SlingModels.getModel(serviceResourceResolverProvider.getServiceResourceResolver(),\n-                    publishStateEvent.getModuleVersionPath(), ModuleVersion.class);\n-            eventValue = ModuleVersionPublishedEvent.class.equals(event.getClass()) ? EVENT_PUBLISH_VALUE : EVENT_UNPUBLISH_VALUE;\n-            idValue = ModuleVersionPublishedEvent.class.equals(event.getClass()) ? buildDocumentVersionUri(moduleVersion) : \"\";\n-        } else if(AssemblyVersionPublishedEvent.class.equals(event.getClass()) ||\n-            AssemblyVersionUnpublishedEvent.class.equals(event.getClass())) {\n-            AssemblyVersionPublishStateEvent publishStateEvent = (AssemblyVersionPublishStateEvent) event;\n-            assemblyVersion = SlingModels.getModel(serviceResourceResolverProvider.getServiceResourceResolver(),\n-                    publishStateEvent.getAssemblyVersionPath(), AssemblyVersion.class);\n-            eventValue = AssemblyVersionPublishedEvent.class.equals(event.getClass()) ? EVENT_PUBLISH_VALUE : EVENT_UNPUBLISH_VALUE;\n-            idValue = AssemblyVersionPublishedEvent.class.equals(event.getClass()) ? buildDocumentVersionUri(assemblyVersion) : \"\";\n+        DocumentVersion documentVersion = null;\n+\n+        if (DocumentVersionPublishedEvent.class.equals(event.getClass()) ||\n+                DocumentVersionUnpublishedEvent.class.equals(event.getClass())){\n+            DocumentVersionPublishStateEvent publishStateEvent = (DocumentVersionPublishStateEvent) event;\n+            documentVersion = SlingModels.getModel(serviceResourceResolverProvider.getServiceResourceResolver(),\n+                    publishStateEvent.getDocumentVersionPath(), DocumentVersion.class);\n+            eventValue = DocumentVersionPublishedEvent.class.equals(event.getClass()) ? EVENT_PUBLISH_VALUE : EVENT_UNPUBLISH_VALUE;\n+            idValue = DocumentVersionPublishedEvent.class.equals(event.getClass()) ? buildDocumentVersionUri(documentVersion) : \"\";\n         } else {\n             log.warn(\"[\" + HydraIntegration.class.getSimpleName() + \"] unhandled event type: \" + event.getClass());\n         }\n \n-        if (ModuleVersionPublishedEvent.class.equals(event.getClass()) ||\n-                AssemblyVersionPublishedEvent.class.equals(event.getClass())) {\n+        if (DocumentVersionPublishedEvent.class.equals(event.getClass())) {\n             // TODO Use a json generation api for this\n             msg = \"{\\\"\"\n                     + ID_KEY + \"\\\":\" + \"\\\"\" + idValue +\"\\\",\"\n                     + \"\\\"\" + EVENT_KEY + \"\\\":\" + \"\\\"\" + eventValue + \"\\\"}\";\n-        } else if (ModuleVersionUnpublishedEvent.class.equals(event.getClass()) ||\n-                AssemblyVersionUnpublishedEvent.class.equals(event.getClass())){\n-            if (System.getenv(PORTAL_URL) != null) {\n-                if (ModuleVersionUnpublishedEvent.class.equals(event.getClass())) {\n-                    uriValue = getPortalTopicUri(moduleVersion);\n-                } else if (AssemblyVersionUnpublishedEvent.class.equals(event.getClass())) {\n-                    uriValue = getPortalGuideUri(assemblyVersion);\n-                }\n+        } else if (DocumentVersionUnpublishedEvent.class.equals(event.getClass())) {\n+            uriValue = ((DocumentVersionUnpublishedEvent) event).getPublishedUrl();\n \n-                // TODO Use a json generation api for this\n-                msg = \"{\\\"\"\n-                        + ID_KEY + \"\\\":\" + \"\\\"\" + idValue +\"\\\",\"\n-                        + \"\\\"\" + EVENT_KEY + \"\\\":\" + \"\\\"\" + eventValue + \"\\\",\"\n-                        + \"\\\"\" + URI_KEY + \"\\\":\" + \"\\\"\" + uriValue + \"\\\"}\";\n-            }\n+            // TODO Use a json generation api for this\n+            msg = \"{\\\"\"\n+                    + ID_KEY + \"\\\":\" + \"\\\"\" + idValue +\"\\\",\"\n+                    + \"\\\"\" + EVENT_KEY + \"\\\":\" + \"\\\"\" + eventValue + \"\\\",\"\n+                    + \"\\\"\" + URI_KEY + \"\\\":\" + \"\\\"\" + uriValue + \"\\\"}\";\n             log.info(\"[\" + HydraIntegration.class.getSimpleName() + \"] pantheon message: \" + msg);\n         } else {\n             log.warn(\"[\" + HydraIntegration.class.getSimpleName() + \"] unhandled event type: \" + event.getClass());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "ad1d7fba7687468519273dc62ac3496f3e37ea04", "committedDate": "2020-06-11 09:54:10 -0400", "message": "ModuleDisplay releasePath bugfix (#310)"}, {"oid": "4351e59ea82ce9ff3191965325f96ebfd9c5b744", "committedDate": "2020-08-20 20:45:46 +0530", "message": " (CCS-3550) Publishing or republishing an assembly (#369)"}, {"oid": "facbb1713f792a89aa622a3667061be907adbc2e", "committedDate": "2020-09-17 09:50:04 -0400", "message": "Ccs 3323 send assembly data (#421)"}, {"oid": "059b8afabe0e8a0a58f9164b23dcf3175b626714", "committedDate": "2020-09-24 10:03:42 -0400", "message": "Ben pantheon urls resolve merge conflicts (#425)"}, {"oid": "737ec2381d6e1839e16739c5e853d142b3be2079", "committedDate": "2020-10-09 13:52:17 -0400", "message": "Fixing up hydra code, now provides url on unpublish (#431)"}]}]}