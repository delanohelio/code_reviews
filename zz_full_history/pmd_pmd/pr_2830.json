{"pr_number": 2830, "pr_title": "[apex] Apexlink POC", "pr_author": "nawforce", "pr_createdAt": "2020-10-13T20:06:07Z", "pr_url": "https://github.com/pmd/pmd/pull/2830", "merge_commit": "73f86cefb8316defc73d13687b08585a1b593b26", "timeline": [{"oid": "7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "url": "https://github.com/pmd/pmd/commit/7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "message": "Add apexlink dependency", "committedDate": "2020-09-25T21:57:50Z", "type": "commit"}, {"oid": "c635d5389f597aad7bdae03c6d8f3f0869b3a516", "url": "https://github.com/pmd/pmd/commit/c635d5389f597aad7bdae03c6d8f3f0869b3a516", "message": "Add a configuration for requesting multi-file analysis", "committedDate": "2020-09-26T19:56:10Z", "type": "commit"}, {"oid": "d48c8a71adf640bd43991e9bad6f362819a64a81", "url": "https://github.com/pmd/pmd/commit/d48c8a71adf640bd43991e9bad6f362819a64a81", "message": "Hack in unused method rule", "committedDate": "2020-09-27T21:35:53Z", "type": "commit"}, {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "url": "https://github.com/pmd/pmd/commit/a5fe957b00e42076abd58cbe4faf28f60489ff26", "message": "Code tidy", "committedDate": "2020-10-13T19:47:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505716130", "body": "This descriptor is unused, right?", "bodyText": "This descriptor is unused, right?", "bodyHTML": "<p dir=\"auto\">This descriptor is unused, right?</p>", "author": "oowekyala", "createdAt": "2020-10-15T17:28:15Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MzkyMw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563923", "bodyText": "Yes it was so have removed", "author": "nawforce", "createdAt": "2020-10-25T08:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex b59afb5e1c..30627127da 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -4,53 +4,22 @@\n \n package net.sourceforge.pmd.lang.apex.rule.design;\n \n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n \n-import com.nawforce.common.diagnostics.Issue;\n+import com.nawforce.common.api.UNUSED_CATEGORY$;\n \n public class AvoidUnusedMethodRule extends AbstractApexRule {\n \n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n     @Override\n     public Object visit(ASTMethod node, Object data) {\n+\n         // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n+        node.getRoot().getGlobalIssues().stream()\n+            .filter(issue -> UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category())\n+            .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n+            .filter(issue -> issue.diagnostic().location().endLine() <= node.getBeginLine())\n+            .forEach(issue -> addViolation(data, node));\n         return data;\n     }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\ndeleted file mode 100644\nindex b59afb5e1c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.rule.design;\n-\n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n-import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n-\n-import com.nawforce.common.diagnostics.Issue;\n-\n-public class AvoidUnusedMethodRule extends AbstractApexRule {\n-\n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n-    @Override\n-    public Object visit(ASTMethod node, Object data) {\n-        // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505718537", "body": "There is a single RootNode per tree. You can just write `node.getRoot()`", "bodyText": "There is a single RootNode per tree. You can just write node.getRoot()", "bodyHTML": "<p dir=\"auto\">There is a single RootNode per tree. You can just write <code>node.getRoot()</code></p>", "author": "oowekyala", "createdAt": "2020-10-15T17:32:19Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk0OQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563949", "bodyText": "Changed", "author": "nawforce", "createdAt": "2020-10-25T08:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex b59afb5e1c..f8a6da2fb7 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -48,7 +48,7 @@ public class AvoidUnusedMethodRule extends AbstractApexRule {\n         List<RootNode> parents = node.getParentsOfType(RootNode.class);\n         if (!parents.isEmpty()) {\n             // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n             return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n         }\n         return new Issue[0];\n", "next_change": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex f8a6da2fb7..30627127da 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -4,53 +4,22 @@\n \n package net.sourceforge.pmd.lang.apex.rule.design;\n \n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTApexFile;\n import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n \n-import com.nawforce.common.diagnostics.Issue;\n+import com.nawforce.common.api.UNUSED_CATEGORY$;\n \n public class AvoidUnusedMethodRule extends AbstractApexRule {\n \n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n     @Override\n     public Object visit(ASTMethod node, Object data) {\n+\n         // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n+        node.getRoot().getGlobalIssues().stream()\n+            .filter(issue -> UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category())\n+            .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n+            .filter(issue -> issue.diagnostic().location().endLine() <= node.getBeginLine())\n+            .forEach(issue -> addViolation(data, node));\n         return data;\n     }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\ndeleted file mode 100644\nindex b59afb5e1c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.rule.design;\n-\n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n-import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n-\n-import com.nawforce.common.diagnostics.Issue;\n-\n-public class AvoidUnusedMethodRule extends AbstractApexRule {\n-\n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n-    @Override\n-    public Object visit(ASTMethod node, Object data) {\n-        // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505721006", "body": "I think you should encapsulate that into a method like `root.getGlobalIssues()`", "bodyText": "I think you should encapsulate that into a method like root.getGlobalIssues()", "bodyHTML": "<p dir=\"auto\">I think you should encapsulate that into a method like <code>root.getGlobalIssues()</code></p>", "author": "oowekyala", "createdAt": "2020-10-15T17:36:01Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n+        if (!parents.isEmpty()) {\n+            // This first parent is outermost\n+            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            return root.getMultifileAnalysis().getFileIssues(root.getFileName());", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk3Mw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563973", "bodyText": "Done", "author": "nawforce", "createdAt": "2020-10-25T08:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex b59afb5e1c..f8a6da2fb7 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -48,7 +48,7 @@ public class AvoidUnusedMethodRule extends AbstractApexRule {\n         List<RootNode> parents = node.getParentsOfType(RootNode.class);\n         if (!parents.isEmpty()) {\n             // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n             return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n         }\n         return new Issue[0];\n", "next_change": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex f8a6da2fb7..30627127da 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -4,53 +4,22 @@\n \n package net.sourceforge.pmd.lang.apex.rule.design;\n \n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTApexFile;\n import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n \n-import com.nawforce.common.diagnostics.Issue;\n+import com.nawforce.common.api.UNUSED_CATEGORY$;\n \n public class AvoidUnusedMethodRule extends AbstractApexRule {\n \n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n     @Override\n     public Object visit(ASTMethod node, Object data) {\n+\n         // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n+        node.getRoot().getGlobalIssues().stream()\n+            .filter(issue -> UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category())\n+            .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n+            .filter(issue -> issue.diagnostic().location().endLine() <= node.getBeginLine())\n+            .forEach(issue -> addViolation(data, node));\n         return data;\n     }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\ndeleted file mode 100644\nindex b59afb5e1c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.rule.design;\n-\n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n-import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n-\n-import com.nawforce.common.diagnostics.Issue;\n-\n-public class AvoidUnusedMethodRule extends AbstractApexRule {\n-\n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n-    @Override\n-    public Object visit(ASTMethod node, Object data) {\n-        // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722577", "body": "Please return an unmodifiable `List` here (or even an `Iterable<Issue>`). We rarely use arrays in the codebase. You can write `Collections.unmodifiableList(Arrays.asList(...))`", "bodyText": "Please return an unmodifiable List here (or even an Iterable<Issue>). We rarely use arrays in the codebase. You can write Collections.unmodifiableList(Arrays.asList(...))", "bodyHTML": "<p dir=\"auto\">Please return an unmodifiable <code>List</code> here (or even an <code>Iterable&lt;Issue&gt;</code>). We rarely use arrays in the codebase. You can write <code>Collections.unmodifiableList(Arrays.asList(...))</code></p>", "author": "oowekyala", "createdAt": "2020-10-15T17:38:47Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDExNQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564115", "bodyText": "Done (in ASTApexFile.getGlobalIssues() now)", "author": "nawforce", "createdAt": "2020-10-25T08:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex fe995713b7..029b9f983b 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -23,61 +33,99 @@ import com.nawforce.common.diagnostics.Issue;\n  *\n  * @author Kevin Jones\n  */\n-@SuppressWarnings(\"PMD\")\n+@Experimental\n public final class ApexMultifileAnalysis {\n+\n     private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        ApexMultifileAnalysis instance = instanceMap.get(multiFileAnalysisDirectory);\n-        if (null == instance) {\n-            instance = create(multiFileAnalysisDirectory);\n-            instanceMap.put(multiFileAnalysisDirectory, instance);\n-        }\n-        return instance;\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like AvoidUnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n             LOG.fine(message);\n", "next_change": {"commit": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 029b9f983b..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -128,7 +132,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex fe995713b7..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -23,64 +33,106 @@ import com.nawforce.common.diagnostics.Issue;\n  *\n  * @author Kevin Jones\n  */\n-@SuppressWarnings(\"PMD\")\n+@Experimental\n public final class ApexMultifileAnalysis {\n-    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    // test only\n+    static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n+\n+            // FIXME: Syntax & Semantic errors found during Org loading are not currently being reported. These\n+            // should be routed to the new SemanticErrorReporter but that is not available for use just yet.\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        ApexMultifileAnalysis instance = instanceMap.get(multiFileAnalysisDirectory);\n-        if (null == instance) {\n-            instance = create(multiFileAnalysisDirectory);\n-            instanceMap.put(multiFileAnalysisDirectory, instance);\n-        }\n-        return instance;\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like UnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": {"commit": "744817a38955256f436dde6b3df4ef5ad7fe313c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 7852943575..abee47ba64 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -132,7 +131,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.severe(message);\n+            LOG.error(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}, {"oid": "744817a38955256f436dde6b3df4ef5ad7fe313c", "committedDate": "2022-02-18 16:49:29 +0100", "message": "[apex] Use slf4j"}, {"oid": "10ff8f6f0ecdc513ee70149ce4a7b7918fb5fc68", "committedDate": "2022-07-20 18:18:40 +0200", "message": "Wire in existing langs"}, {"oid": "17040599efc824e7f1f5587a6999c26e56152cba", "committedDate": "2022-07-23 12:43:33 +0200", "message": "Fix global state in apex module"}, {"oid": "872a41b4e9aeb6d30725db52f4836f7cc04e8601", "committedDate": "2023-02-04 20:22:49 +0100", "message": "Make ApexProcessor not implement LVH"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722820", "body": "Is there a constant somewhere we could use instead of this hardcoded string?", "bodyText": "Is there a constant somewhere we could use instead of this hardcoded string?", "bodyHTML": "<p dir=\"auto\">Is there a constant somewhere we could use instead of this hardcoded string?</p>", "author": "oowekyala", "createdAt": "2020-10-15T17:39:12Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY2Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564666", "bodyText": "This is a 'case object' in Scala, I have swapped to use 'UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category()' but it's not very readable, I will introduce a proper Java enum for this in next release.", "author": "nawforce", "createdAt": "2020-10-25T08:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex b59afb5e1c..f8a6da2fb7 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -32,7 +32,7 @@ public class AvoidUnusedMethodRule extends AbstractApexRule {\n     public Object visit(ASTMethod node, Object data) {\n         // Check if any 'Unused' Issues align with this method\n         for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n                 // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n                 if (issue.diagnostic().location().startLine() == node.getBeginLine()\n                         && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n", "next_change": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex f8a6da2fb7..30627127da 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -4,53 +4,22 @@\n \n package net.sourceforge.pmd.lang.apex.rule.design;\n \n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTApexFile;\n import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n \n-import com.nawforce.common.diagnostics.Issue;\n+import com.nawforce.common.api.UNUSED_CATEGORY$;\n \n public class AvoidUnusedMethodRule extends AbstractApexRule {\n \n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n     @Override\n     public Object visit(ASTMethod node, Object data) {\n+\n         // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n+        node.getRoot().getGlobalIssues().stream()\n+            .filter(issue -> UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category())\n+            .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n+            .filter(issue -> issue.diagnostic().location().endLine() <= node.getBeginLine())\n+            .forEach(issue -> addViolation(data, node));\n         return data;\n     }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\ndeleted file mode 100644\nindex b59afb5e1c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.rule.design;\n-\n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n-import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n-\n-import com.nawforce.common.diagnostics.Issue;\n-\n-public class AvoidUnusedMethodRule extends AbstractApexRule {\n-\n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n-    @Override\n-    public Object visit(ASTMethod node, Object data) {\n-        // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505723670", "body": "Please make this class `@Experimental`", "bodyText": "Please make this class @Experimental", "bodyHTML": "<p dir=\"auto\">Please make this class <code>@Experimental</code></p>", "author": "oowekyala", "createdAt": "2020-10-15T17:40:34Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY3Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564676", "bodyText": "Done", "author": "nawforce", "createdAt": "2020-10-25T08:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex fe995713b7..d04b3edc3c 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -23,7 +25,7 @@ import com.nawforce.common.diagnostics.Issue;\n  *\n  * @author Kevin Jones\n  */\n-@SuppressWarnings(\"PMD\")\n+@Experimental\n public final class ApexMultifileAnalysis {\n     private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n", "next_change": {"commit": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex d04b3edc3c..029b9f983b 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -27,59 +35,97 @@ import com.nawforce.common.diagnostics.Issue;\n  */\n @Experimental\n public final class ApexMultifileAnalysis {\n+\n     private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        ApexMultifileAnalysis instance = instanceMap.get(multiFileAnalysisDirectory);\n-        if (null == instance) {\n-            instance = create(multiFileAnalysisDirectory);\n-            instanceMap.put(multiFileAnalysisDirectory, instance);\n-        }\n-        return instance;\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like AvoidUnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n             LOG.fine(message);\n", "next_change": {"commit": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 029b9f983b..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -128,7 +132,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex fe995713b7..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -23,64 +33,106 @@ import com.nawforce.common.diagnostics.Issue;\n  *\n  * @author Kevin Jones\n  */\n-@SuppressWarnings(\"PMD\")\n+@Experimental\n public final class ApexMultifileAnalysis {\n-    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    // test only\n+    static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n+\n+            // FIXME: Syntax & Semantic errors found during Org loading are not currently being reported. These\n+            // should be routed to the new SemanticErrorReporter but that is not available for use just yet.\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        ApexMultifileAnalysis instance = instanceMap.get(multiFileAnalysisDirectory);\n-        if (null == instance) {\n-            instance = create(multiFileAnalysisDirectory);\n-            instanceMap.put(multiFileAnalysisDirectory, instance);\n-        }\n-        return instance;\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like UnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": {"commit": "744817a38955256f436dde6b3df4ef5ad7fe313c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 7852943575..abee47ba64 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -132,7 +131,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.severe(message);\n+            LOG.error(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}, {"oid": "744817a38955256f436dde6b3df4ef5ad7fe313c", "committedDate": "2022-02-18 16:49:29 +0100", "message": "[apex] Use slf4j"}, {"oid": "10ff8f6f0ecdc513ee70149ce4a7b7918fb5fc68", "committedDate": "2022-07-20 18:18:40 +0200", "message": "Wire in existing langs"}, {"oid": "17040599efc824e7f1f5587a6999c26e56152cba", "committedDate": "2022-07-23 12:43:33 +0200", "message": "Fix global state in apex module"}, {"oid": "872a41b4e9aeb6d30725db52f4836f7cc04e8601", "committedDate": "2023-02-04 20:22:49 +0100", "message": "Make ApexProcessor not implement LVH"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506376564", "body": "What were the specific problems you got?", "bodyText": "What were the specific problems you got?", "bodyHTML": "<p dir=\"auto\">What were the specific problems you got?</p>", "author": "adangel", "createdAt": "2020-10-16T12:47:56Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "diffHunk": "@@ -7,16 +7,22 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n import net.sourceforge.pmd.lang.ast.RootNode;\n import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n \n import apex.jorje.semantic.ast.AstNode;\n import apex.jorje.services.Version;\n \n+@SuppressWarnings(\"PMD\")", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTExMw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565113", "bodyText": "I had a few issues getting IDE setup so I could understand why mvn build was failing, this was just left over from that. I have removed.", "author": "nawforce", "createdAt": "2020-10-25T08:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\ndeleted file mode 100644\nindex 3a79b6517c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\n+++ /dev/null\n", "chunk": "@@ -1,70 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.ast;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-\n-import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n-\n-import apex.jorje.semantic.ast.AstNode;\n-import apex.jorje.services.Version;\n-\n-@SuppressWarnings(\"PMD\")\n-public abstract class ApexRootNode<T extends AstNode> extends AbstractApexNode<T> implements RootNode {\n-\n-    private Map<Integer, String> noPmdComments = Collections.emptyMap();\n-\n-    private String fileName;\n-\n-    private ApexMultifileAnalysis multifileAnalysis;\n-\n-    public ApexRootNode(T node) {\n-        super(node);\n-    }\n-\n-    // For top level classes, the end is the end of file.\n-    @Override\n-    void calculateLineNumbers(SourceCodePositioner positioner) {\n-        super.calculateLineNumbers(positioner);\n-        this.endLine = positioner.getLastLine();\n-        this.endColumn = positioner.getLastLineColumn();\n-    }\n-\n-    /**\n-     * Gets the apex version this class has been compiled with.\n-     * Use {@link Version} to compare, e.g.\n-     * {@code node.getApexVersion() >= Version.V176.getExternal()}\n-     * @return the apex version\n-     */\n-    public double getApexVersion() {\n-        return getNode().getDefiningType().getCodeUnitDetails().getVersion().getExternal();\n-    }\n-\n-\n-    @Override\n-    public Map<Integer, String> getNoPmdComments() {\n-        return noPmdComments;\n-    }\n-\n-    void setNoPmdComments(Map<Integer, String> noPmdComments) {\n-        this.noPmdComments = noPmdComments;\n-    }\n-\n-    void setMultifileAnalysis(String fileName, ApexMultifileAnalysis multifileAnalysis) {\n-        this.fileName = fileName;\n-        this.multifileAnalysis = multifileAnalysis;\n-    }\n-\n-    public ApexMultifileAnalysis getMultifileAnalysis() {\n-        return multifileAnalysis;\n-    }\n-\n-    public String getFileName() {\n-        return fileName;\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\ndeleted file mode 100644\nindex 3a79b6517c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\n+++ /dev/null\n", "chunk": "@@ -1,70 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.ast;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-\n-import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n-\n-import apex.jorje.semantic.ast.AstNode;\n-import apex.jorje.services.Version;\n-\n-@SuppressWarnings(\"PMD\")\n-public abstract class ApexRootNode<T extends AstNode> extends AbstractApexNode<T> implements RootNode {\n-\n-    private Map<Integer, String> noPmdComments = Collections.emptyMap();\n-\n-    private String fileName;\n-\n-    private ApexMultifileAnalysis multifileAnalysis;\n-\n-    public ApexRootNode(T node) {\n-        super(node);\n-    }\n-\n-    // For top level classes, the end is the end of file.\n-    @Override\n-    void calculateLineNumbers(SourceCodePositioner positioner) {\n-        super.calculateLineNumbers(positioner);\n-        this.endLine = positioner.getLastLine();\n-        this.endColumn = positioner.getLastLineColumn();\n-    }\n-\n-    /**\n-     * Gets the apex version this class has been compiled with.\n-     * Use {@link Version} to compare, e.g.\n-     * {@code node.getApexVersion() >= Version.V176.getExternal()}\n-     * @return the apex version\n-     */\n-    public double getApexVersion() {\n-        return getNode().getDefiningType().getCodeUnitDetails().getVersion().getExternal();\n-    }\n-\n-\n-    @Override\n-    public Map<Integer, String> getNoPmdComments() {\n-        return noPmdComments;\n-    }\n-\n-    void setNoPmdComments(Map<Integer, String> noPmdComments) {\n-        this.noPmdComments = noPmdComments;\n-    }\n-\n-    void setMultifileAnalysis(String fileName, ApexMultifileAnalysis multifileAnalysis) {\n-        this.fileName = fileName;\n-        this.multifileAnalysis = multifileAnalysis;\n-    }\n-\n-    public ApexMultifileAnalysis getMultifileAnalysis() {\n-        return multifileAnalysis;\n-    }\n-\n-    public String getFileName() {\n-        return fileName;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}, {"oid": "0c84eb0a293d995ac2ee713110da191bb9265d79", "committedDate": "2021-04-16 15:31:49 +0200", "message": "Merge branch 'master' into 7.0.x"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506386946", "body": "We can use in PMD 7 java8 features, e.g.\r\n\r\n```java\r\ngetIssues(node).stream()\r\n    .filter(issue -> \"Unused\".equals(issue.diagnostic().category().value())\r\n    .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\r\n    .filter(issue -> issue.diagnostic().location().endLine() <= node.getEndLine())\r\n    .forEach(issue -> addViolation(data, node));\r\n```\r\n", "bodyText": "We can use in PMD 7 java8 features, e.g.\ngetIssues(node).stream()\n    .filter(issue -> \"Unused\".equals(issue.diagnostic().category().value())\n    .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n    .filter(issue -> issue.diagnostic().location().endLine() <= node.getEndLine())\n    .forEach(issue -> addViolation(data, node));", "bodyHTML": "<p dir=\"auto\">We can use in PMD 7 java8 features, e.g.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"getIssues(node).stream()\n    .filter(issue -&gt; &quot;Unused&quot;.equals(issue.diagnostic().category().value())\n    .filter(issue -&gt; issue.diagnostic().location().startLine() == node.getBeginLine())\n    .filter(issue -&gt; issue.diagnostic().location().endLine() &lt;= node.getEndLine())\n    .forEach(issue -&gt; addViolation(data, node));\"><pre>getIssues(node)<span class=\"pl-k\">.</span>stream()\n    .filter(issue <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unused<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>equals(issue<span class=\"pl-k\">.</span>diagnostic()<span class=\"pl-k\">.</span>category()<span class=\"pl-k\">.</span>value())\n    .filter(issue <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> issue<span class=\"pl-k\">.</span>diagnostic()<span class=\"pl-k\">.</span>location()<span class=\"pl-k\">.</span>startLine() <span class=\"pl-k\">==</span> node<span class=\"pl-k\">.</span>getBeginLine())\n    .filter(issue <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> issue<span class=\"pl-k\">.</span>diagnostic()<span class=\"pl-k\">.</span>location()<span class=\"pl-k\">.</span>endLine() <span class=\"pl-k\">&lt;=</span> node<span class=\"pl-k\">.</span>getEndLine())\n    .forEach(issue <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> addViolation(data, node));</pre></div>", "author": "adangel", "createdAt": "2020-10-16T12:58:22Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTE0NA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565144", "bodyText": "Much nicer, have updated.", "author": "nawforce", "createdAt": "2020-10-25T08:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex b59afb5e1c..f8a6da2fb7 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -32,7 +32,7 @@ public class AvoidUnusedMethodRule extends AbstractApexRule {\n     public Object visit(ASTMethod node, Object data) {\n         // Check if any 'Unused' Issues align with this method\n         for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n                 // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n                 if (issue.diagnostic().location().startLine() == node.getBeginLine()\n                         && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n", "next_change": {"commit": "279c673341335b138d1f31637a6613a0276f9882", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\nindex f8a6da2fb7..30627127da 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n", "chunk": "@@ -4,53 +4,22 @@\n \n package net.sourceforge.pmd.lang.apex.rule.design;\n \n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTApexFile;\n import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n \n-import com.nawforce.common.diagnostics.Issue;\n+import com.nawforce.common.api.UNUSED_CATEGORY$;\n \n public class AvoidUnusedMethodRule extends AbstractApexRule {\n \n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n     @Override\n     public Object visit(ASTMethod node, Object data) {\n+\n         // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (\"Unused\".equals(issue.diagnostic().category().value())) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n+        node.getRoot().getGlobalIssues().stream()\n+            .filter(issue -> UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category())\n+            .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n+            .filter(issue -> issue.diagnostic().location().endLine() <= node.getBeginLine())\n+            .forEach(issue -> addViolation(data, node));\n         return data;\n     }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ASTApexFile root = (ASTApexFile) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\ndeleted file mode 100644\nindex b59afb5e1c..0000000000\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd.lang.apex.rule.design;\n-\n-import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n-\n-import java.util.List;\n-\n-import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n-import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n-import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n-import net.sourceforge.pmd.lang.ast.RootNode;\n-import net.sourceforge.pmd.properties.PropertyDescriptor;\n-import net.sourceforge.pmd.properties.PropertyFactory;\n-\n-import com.nawforce.common.diagnostics.Issue;\n-\n-public class AvoidUnusedMethodRule extends AbstractApexRule {\n-\n-    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n-            = PropertyFactory.intProperty(\"problemDepth\")\n-            .desc(\"The if statement depth reporting threshold\")\n-            .require(positive()).defaultValue(3).build();\n-\n-    public AvoidUnusedMethodRule() {\n-        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n-    }\n-\n-    @Override\n-    public Object visit(ASTMethod node, Object data) {\n-        // Check if any 'Unused' Issues align with this method\n-        for (Issue issue: getIssues(node)) {\n-            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n-                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n-                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n-                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n-                    addViolation(data, node);\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    private Issue[] getIssues(ASTMethod node) {\n-        // Locate multifileAnalysis handler via method root node\n-        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n-        if (!parents.isEmpty()) {\n-            // This first parent is outermost\n-            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n-            return root.getMultifileAnalysis().getFileIssues(root.getFileName());\n-        }\n-        return new Issue[0];\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506883218", "body": "This option is language dependent, I agree with @oowekyala that this would be a fit for language properties.\r\n\r\nSo that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.\r\n\r\nFor me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?\r\n\r\nOk, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\r\n\r\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).\r\n", "bodyText": "This option is language dependent, I agree with @oowekyala that this would be a fit for language properties.\nSo that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.\nFor me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?\nOk, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).", "bodyHTML": "<p dir=\"auto\">This option is language dependent, I agree with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/oowekyala/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/oowekyala\">@oowekyala</a> that this would be a fit for language properties.</p>\n<p dir=\"auto\">So that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.</p>\n<p dir=\"auto\">For me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?</p>\n<p dir=\"auto\">Ok, looking at e.g. <a href=\"https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json\">https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json</a> this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?</p>\n<p dir=\"auto\">I assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (<a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm\" rel=\"nofollow\">https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm</a>) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).</p>", "author": "adangel", "createdAt": "2020-10-17T08:21:46Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "diffHunk": "@@ -75,6 +75,10 @@\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n+    @Parameter(names = \"-multifileanalysisdirectory\",\n+            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NzIwNg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r507057206", "bodyText": "Ok, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\n\nYes, it reads the directories from sfdx-project.json to work out what to include in the analysis. The handling of this used to be built into ApexLink but I recently split into a separate library. There is a bit more to the format than being multiple directories, it's really more like multiple modules with either implicit or explicit dependencies between them. Treating them as modules matters in a multi-file analysis because there are rules around visibility and duplicates etc that you can't handle if you think of them as just the sum of a set of directories. There is also .forceignore which is similar in nature to .gitignore, if present its in the same directory as sfdx-project.json.\nThe sfdx-project.json also contains a namespace for the project. It's critical this is available for multi-file work as it enables the analysis to understand package boundaries. For single file analysis I would imagine a few rules might find it also handy if it could be made available.\n\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).\n\nHaving \"-dir\" understand sfdx-project.json makes sense to me as a general approach but likely you want to delegate resolving \"-dir\" to a set of class files for analysis to a Salesforce specific handler that works alongside the existing handling.\nThe library I have for this might be a bit overweight for what PMD needs as ApexLink is interested in other project files and they can have some quite unusual handling behaviours. The part I have that is probably most valuable to PMD is the forceignore handling which should be straight forward to port to Java from its current Scala implementation if that made sense.", "author": "nawforce", "createdAt": "2020-10-18T09:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "fb359c290eabe8093ad21e317a4c7d9d71d20287", "changed_code": [{"header": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\nindex b0e6dbd16c..c8e4cd7941 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n", "chunk": "@@ -75,10 +83,6 @@ public class PMDParameters {\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n-    @Parameter(names = \"-multifileanalysisdirectory\",\n-            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")\n-    private String multifileanalysisdirectory = \"\";\n-\n     @Parameter(names = { \"-minimumpriority\", \"-min\" },\n             description = \"Rule priority threshold; rules with lower priority than configured here won't be used. \"\n                     + \"Valid values are integers between 1 and 5 (inclusive), with 5 being the lowest priority.\",\n", "next_change": null}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\nindex b0e6dbd16c..c8e4cd7941 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n", "chunk": "@@ -75,10 +83,6 @@ public class PMDParameters {\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n-    @Parameter(names = \"-multifileanalysisdirectory\",\n-            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")\n-    private String multifileanalysisdirectory = \"\";\n-\n     @Parameter(names = { \"-minimumpriority\", \"-min\" },\n             description = \"Rule priority threshold; rules with lower priority than configured here won't be used. \"\n                     + \"Valid values are integers between 1 and 5 (inclusive), with 5 being the lowest priority.\",\n", "next_change": {"commit": "e844dadfb68fa6d097d26d616638594df1f336c0", "changed_code": [{"header": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\nindex c8e4cd7941..1939716eb9 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n", "chunk": "@@ -27,82 +23,91 @@ import com.beust.jcommander.ParameterException;\n import com.beust.jcommander.validators.PositiveInteger;\n \n /**\n- * @deprecated Internal API. Use {@link PMD#run(String[])} or {@link PMD#main(String[])}\n+ * @deprecated Internal API. Use {@link PMD#runPmd(String[])} or {@link PMD#main(String[])}\n  */\n @Deprecated\n @InternalApi\n public class PMDParameters {\n \n-    @Parameter(names = { \"-rulesets\", \"-R\" }, description = \"Comma separated list of ruleset names to use.\",\n+    @Parameter(names = { \"--rulesets\", \"-rulesets\", \"-R\" }, description = \"Comma separated list of ruleset names to use.\",\n             required = true)\n     private String rulesets;\n \n-    @Parameter(names = { \"-uri\", \"-u\" }, description = \"Database URI for sources.\")\n+    @Parameter(names = { \"--uri\", \"-uri\", \"-u\" }, description = \"Database URI for sources.\")\n     private String uri;\n \n-    @Parameter(names = { \"-dir\", \"-d\" }, description = \"Root directory for sources.\")\n+    @Parameter(names = { \"--dir\", \"-dir\", \"-d\" }, description = \"Root directory for sources.\")\n     private String sourceDir;\n \n-    @Parameter(names = \"-filelist\", description = \"Path to a file containing a list of files to analyze.\")\n+    @Parameter(names = { \"--file-list\", \"-filelist\" }, description = \"Path to a file containing a list of files to analyze.\")\n     private String fileListPath;\n \n-    @Parameter(names = \"-ignorelist\", description = \"Path to a file containing a list of files to ignore.\")\n+    @Parameter(names = { \"--ignore-list\", \"-ignorelist\" }, description = \"Path to a file containing a list of files to ignore.\")\n     private String ignoreListPath;\n \n-    @Parameter(names = { \"-format\", \"-f\" }, description = \"Report format type.\")\n+    @Parameter(names = { \"--format\", \"-format\", \"-f\" }, description = \"Report format type.\")\n     private String format = \"text\"; // Enhance to support other usage\n \n-    @Parameter(names = { \"-debug\", \"-verbose\", \"-D\", \"-V\" }, description = \"Debug mode.\")\n+    @Parameter(names = { \"--debug\", \"--verbose\", \"-debug\", \"-verbose\", \"-D\", \"-V\" }, description = \"Debug mode.\")\n     private boolean debug = false;\n \n-    @Parameter(names = { \"-help\", \"-h\", \"-H\" }, description = \"Display help on usage.\", help = true)\n+    @Parameter(names = { \"--help\", \"-help\", \"-h\", \"-H\" }, description = \"Display help on usage.\", help = true)\n     private boolean help = false;\n \n-    @Parameter(names = { \"-encoding\", \"-e\" },\n+    @Parameter(names = { \"--encoding\", \"-encoding\", \"-e\" },\n             description = \"Specifies the character set encoding of the source code files PMD is reading (i.e., UTF-8).\")\n     private String encoding = \"UTF-8\";\n \n-    @Parameter(names = { \"-threads\", \"-t\" }, description = \"Sets the number of threads used by PMD.\",\n+    @Parameter(names = { \"--threads\", \"-threads\", \"-t\" }, description = \"Sets the number of threads used by PMD.\",\n             validateWith = PositiveInteger.class)\n     private int threads = 1;\n \n-    @Parameter(names = { \"-benchmark\", \"-b\" },\n+    @Parameter(names = { \"--benchmark\", \"-benchmark\", \"-b\" },\n             description = \"Benchmark mode - output a benchmark report upon completion; default to System.err.\")\n     private boolean benchmark = false;\n \n-    @Parameter(names = { \"-stress\", \"-S\" }, description = \"Performs a stress test.\")\n+    @Parameter(names = { \"--stress\", \"-stress\", \"-S\" }, description = \"Performs a stress test.\")\n     private boolean stress = false;\n \n-    @Parameter(names = \"-shortnames\", description = \"Prints shortened filenames in the report.\")\n+    @Parameter(names = { \"--short-names\", \"-shortnames\" }, description = \"Prints shortened filenames in the report.\")\n     private boolean shortnames = false;\n \n-    @Parameter(names = \"-showsuppressed\", description = \"Report should show suppressed rule violations.\")\n+    @Parameter(names = { \"--show-suppressed\", \"-shortnames\" }, description = \"Report should show suppressed rule violations.\")\n     private boolean showsuppressed = false;\n \n-    @Parameter(names = \"-suppressmarker\",\n+    @Parameter(names = { \"--suppress-marker\", \"-suppressmarker\" },\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n-    @Parameter(names = { \"-minimumpriority\", \"-min\" },\n+    @Parameter(names = { \"--minimum-priority\", \"-minimumpriority\", \"-min\" },\n             description = \"Rule priority threshold; rules with lower priority than configured here won't be used. \"\n                     + \"Valid values are integers between 1 and 5 (inclusive), with 5 being the lowest priority.\",\n             validateValueWith = RulePriorityValidator.class)\n     private int minimumPriority = RulePriority.LOW.getPriority();\n \n-    @Parameter(names = { \"-property\", \"-P\" }, description = \"{name}={value}: Define a property for the report format.\",\n+    @Parameter(names = { \"--property\", \"-property\", \"-P\" }, description = \"{name}={value}: Define a property for the report format.\",\n             converter = PropertyConverter.class)\n     private List<Properties> properties = new ArrayList<>();\n \n-    @Parameter(names = { \"-reportfile\", \"-r\" }, description = \"Sends report output to a file; default to System.out.\")\n+    @Parameter(names = { \"--report-file\", \"-reportfile\", \"-r\" },\n+               description = \"Path to a file to which report output is written. \"\n+                   + \"The file is created if it does not exist. \"\n+                   + \"If this option is not specified, the report is rendered to standard output.\")\n     private String reportfile = null;\n \n-    @Parameter(names = { \"-version\", \"-v\" }, description = \"Specify version of a language PMD should use.\")\n+    @Parameter(names = { \"--use-version\", \"-version\", \"-v\" }, description = \"Specify version of a language PMD should use.\")\n     private String version = null;\n \n-    @Parameter(names = { \"-language\", \"-l\" }, description = \"Specify a language PMD should use.\")\n+    @Parameter(names = { \"--version\" }, description = \"Display current version of PMD.\")\n+    private boolean currentVersion = false;\n+\n+    @Parameter(names = { \"--language\", \"-language\", \"-l\" }, description = \"Specify a language PMD should use.\")\n     private String language = null;\n \n-    @Parameter(names = \"-auxclasspath\",\n+    @Parameter(names = { \"--force-language\", \"-force-language\" }, description = \"Force a language to be used for all input files, irrespective of filenames.\")\n+    private String forceLanguage = null;\n+\n+    @Parameter(names = { \"--aux-classpath\", \"-auxclasspath\" },\n             description = \"Specifies the classpath for libraries used by the source code. \"\n                     + \"This is used by the type resolution. The platform specific path delimiter \"\n                     + \"(\\\":\\\" on Linux, \\\";\\\" on Windows) is used to separate the entries. \"\n", "next_change": {"commit": "ea057920439555f53fb58ea6cd7927b0bdc1ed64", "changed_code": [{"header": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\nindex 1939716eb9..6377a5ec02 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java\n", "chunk": "@@ -115,7 +115,7 @@ public class PMDParameters {\n                     + \"can be specified.\")\n     private String auxclasspath;\n \n-    @Parameter(names = { \"--fail-on-violation\", \"-failOnViolation\", \"--failOnViolation\"}, arity = 1,\n+    @Parameter(names = { \"--fail-on-violation\", \"--failOnViolation\", \"-failOnViolation\"}, arity = 1,\n             description = \"By default PMD exits with status 4 if violations are found. Disable this option with '-failOnViolation false' to exit with 0 instead and just write the report.\")\n     private boolean failOnViolation = true;\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}, {"oid": "0c84eb0a293d995ac2ee713110da191bb9265d79", "committedDate": "2021-04-16 15:31:49 +0200", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "edf5068019101e3928302103389b8a58e756c81b", "committedDate": "2021-05-06 14:10:08 +0200", "message": "Add StatusCode enum"}, {"oid": "23e101f62a9457bf5d8866d475d6601c625c1c18", "committedDate": "2021-05-14 17:45:09 +0200", "message": "Update docs"}, {"oid": "fce79332081c9b663fd91024a8c0eba7ca3c9d8f", "committedDate": "2021-05-20 14:05:53 +0200", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "7a4b0d210d9e89d264b7dfcd972ec8e1bb152c07", "committedDate": "2021-05-27 09:59:45 +0200", "message": "Merge branch 'master' into pr-3260"}, {"oid": "a46d1940469387d4cb9f0434a60fbdcc45330b08", "committedDate": "2021-05-27 10:59:25 +0200", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "ca52b841ceaf55f5307cd00dddf5098f3be293d4", "committedDate": "2021-07-30 14:42:31 +0100", "message": "Support forcing a specific language from the command-line"}, {"oid": "88547fc14c14da0685ca72a087b5a4994f2cdb61", "committedDate": "2021-07-31 15:56:14 +0200", "message": "[core] Fixups from pull request review"}, {"oid": "aa75b2b5bff6665597ddd19d5be7aacc78d2baa1", "committedDate": "2021-07-31 17:33:53 +0200", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "e844dadfb68fa6d097d26d616638594df1f336c0", "committedDate": "2021-11-03 08:04:49 -0500", "message": "Add long CLI options and 'version' options and keep old ones https://github.com/pmd/pmd/issues/3424, still figuring how to build successfully with existing unit tests"}, {"oid": "f5bd6700621af25d8e75418442fcc03fd88a9aca", "committedDate": "2021-11-03 08:17:31 -0500", "message": "follow code stdyle"}, {"oid": "3a8a9502de43688c8db94f7c500d35ca5fcfd375", "committedDate": "2021-11-03 09:21:25 -0500", "message": "fix one minor issue related to 'version'"}, {"oid": "5778c338c4b429b4c19359fb7fb910afb3ec3674", "committedDate": "2021-11-06 12:59:12 -0500", "message": "Update description of --version"}, {"oid": "206b65770918ad9a154850f72746c266a71c01c3", "committedDate": "2021-11-06 13:20:36 -0500", "message": "seperate  and current work"}, {"oid": "4d52b26faf185b50ce9f61c330eead9bfabc49b8", "committedDate": "2021-11-06 13:51:52 -0500", "message": "remove  and will deprecate it later"}, {"oid": "ea057920439555f53fb58ea6cd7927b0bdc1ed64", "committedDate": "2021-11-10 08:10:04 -0600", "message": "move -- options before - options"}, {"oid": "a9c3c019fe2459094e7137164ecaff24e7a1c406", "committedDate": "2021-11-25 11:50:31 +0100", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "1789daf16dacc39cbc363b6e7cd6659928987cbf", "committedDate": "2022-02-13 18:30:47 +0100", "message": "Figure out better API"}, {"oid": "73940e2672b9117c5e9b719a5ccb6c1415366748", "committedDate": "2022-02-25 10:45:34 +0100", "message": "[doc] Document Ant Task parameter `threads`"}, {"oid": "8eb18114c96881b2e46963208c51b69c60d18520", "committedDate": "2022-02-25 20:23:58 +0100", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "532c81ce7e983abae43e06f4d8cce0cfced4af46", "committedDate": "2022-02-27 18:15:30 +0100", "message": "Merge branch 'master' into pmd6-file-collector"}, {"oid": "b46dcb48aacc732e88db0e4304c1763662697c44", "committedDate": "2022-02-27 18:22:08 +0100", "message": "Remove source incompatibility"}, {"oid": "9d1c1860cb630a713aad0055411a2ae084033039", "committedDate": "2022-03-03 19:55:10 +0100", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "cd7e3a3e0d28b209b858a3a6ca3c444de784e811", "committedDate": "2022-03-21 11:32:12 +0100", "message": "Implement CLI progress bar using me.tongfei.progressbar"}, {"oid": "15674891c234fd299961e8d36baec5c1672c94a4", "committedDate": "2022-03-25 14:46:34 +0100", "message": "Switch progress bar default to activated"}, {"oid": "9ca8176d3e197ffbe28a6eced1820c3616cd2954", "committedDate": "2022-03-25 16:35:49 +0100", "message": "Fix pmd-test with progress bar flag"}, {"oid": "b8efedf9675086bdc556e9ac0d074d6155f8c10f", "committedDate": "2022-04-09 21:44:01 +0200", "message": "Make lang registry non static"}, {"oid": "686e878caf2ccf67e998697cd06193c0fd640083", "committedDate": "2022-05-07 18:42:45 +0200", "message": "Fix #1445 - Allow CLI to take globs as parameters"}, {"oid": "e7229407d4ed061910a84633a09057f4b73f1e01", "committedDate": "2022-05-07 19:29:00 +0200", "message": "Fix tests"}, {"oid": "8d7074dbaa5d2ce5d921788a5cdac401f01e3161", "committedDate": "2022-05-08 15:17:40 +0200", "message": "Improve doc for parameters"}, {"oid": "572ccc302ea5c78417c4981f0e217047413234c2", "committedDate": "2022-05-20 14:49:40 +0200", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "1e99280cab5057c86c6c5403326bc474418ae2bc", "committedDate": "2022-06-04 10:27:57 +0200", "message": "[core] Fix cli when only --file-list is used"}, {"oid": "87bef022a66d0980978fe13148b2164393c30d9f", "committedDate": "2022-06-13 19:06:49 +0200", "message": "Merge branch 'master' into pmd/7.0.x"}, {"oid": "495dbb750fcee05e8d9e9b2cbc4ce57098ca9b55", "committedDate": "2022-07-16 18:48:57 +0200", "message": "Merge branch 'text-utils-simple' into pmd7-lang-registry-non-static"}, {"oid": "cbf2951c1da05527b5ac9724f3219b6637bc06b2", "committedDate": "2022-07-16 19:33:13 +0200", "message": "Fix merge"}, {"oid": "8587844c1c650506140d64c3916e094845ee6883", "committedDate": "2022-07-17 14:03:23 +0200", "message": "Fix build"}, {"oid": "849ed7c10c47438dd6bc04afd326d3b3df3bcbf4", "committedDate": "2022-07-19 14:10:55 +0200", "message": "Cleanups"}, {"oid": "b9737e23b5a71b68a4135257e6bb10797cb16d52", "committedDate": "2022-10-14 23:36:45 -0300", "message": "Backport to PMD6 changes to accomodate PicoCli in PMD7"}, {"oid": "d3e68d795b07d0cbc94e38ac85e708f7d5fef107", "committedDate": "2022-11-13 00:08:35 +0100", "message": "Add --relativize-paths-with"}, {"oid": "99b24b702ff3cad00d6cc0217d8ced0944c5c08f", "committedDate": "2022-11-13 14:36:36 +0100", "message": "Add tests, dedup collected files"}, {"oid": "d540f6fb145265d277c5ef97447c9a1527087b09", "committedDate": "2022-11-16 13:56:01 +0100", "message": "Merge branch 'master' into pr/4194"}, {"oid": "be691c71bf040e0d195ae6a896f95998911e2ca5", "committedDate": "2022-11-16 14:29:27 +0100", "message": "Fix pmd-core"}, {"oid": "b836a35c8c5a9d811b265388311a892ef4ff0bcb", "committedDate": "2022-11-25 15:24:57 -0300", "message": "[cli] Move CLI progressbar rendering to pmd-cli"}, {"oid": "c5784c3f50955124d28a8798d05ce42605a04f55", "committedDate": "2023-01-18 13:30:48 +0100", "message": "Remove PMDParameters.RulePriorityConverter (#881)"}, {"oid": "e9baa5b931ab73d6499da97d863f2fcf2e3df874", "committedDate": "2023-01-24 11:35:55 +0100", "message": "[doc] Update CLI reference for new --relativize-paths-with"}, {"oid": "cf1dd6e902ad2d9b29f47d5c695c1f39db0e58b2", "committedDate": "2023-01-24 16:13:22 +0100", "message": "Small fixes in PMDParameters"}, {"oid": "a93b45c0400a9a30b64e2cd82592b62e80adc775", "committedDate": "2023-01-25 13:02:06 +0100", "message": "[doc] Update doc for --relativize-paths-with regarding absolute paths"}, {"oid": "dd7dedba5b8c700fbfbe622d486a2cc07115cf67", "committedDate": "2023-01-25 14:50:41 +0100", "message": "Merge branch 'pr-4214' into pmd7-pr-4214"}, {"oid": "cc4d83d279aea922f7b148cd1c44d5b3ec5d5442", "committedDate": "2023-01-25 16:40:04 +0100", "message": "Deprecate PMDConfiguration#reportShortNames"}, {"oid": "8fa35ae10d9d0ae4783d49ce2ba31cdbddfb86ec", "committedDate": "2023-01-26 10:10:09 +0100", "message": "Remove old --short-names option (cli + ant)"}, {"oid": "9f04ae8c70f7b6a030edbac5aba82f896ad6b486", "committedDate": "2023-01-26 10:11:48 +0100", "message": "Merge branch 'pr-4214' into pmd7-pr-4214"}]}, {"oid": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "url": "https://github.com/pmd/pmd/commit/eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpmd-apex/pom.xml\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/lang/ParserOptions.java\n#\tpom.xml", "committedDate": "2020-10-22T20:40:44Z", "type": "commit"}, {"oid": "279c673341335b138d1f31637a6613a0276f9882", "url": "https://github.com/pmd/pmd/commit/279c673341335b138d1f31637a6613a0276f9882", "message": "Resolve PR comments", "committedDate": "2020-10-24T20:08:58Z", "type": "commit"}, {"oid": "d98ec556c7281fd04765181ccc8a24a4f99548b0", "url": "https://github.com/pmd/pmd/commit/d98ec556c7281fd04765181ccc8a24a4f99548b0", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-10-24T20:11:49Z", "type": "commit"}, {"oid": "862ee7b236a379d39d7ced5131b90be6bb5e3030", "url": "https://github.com/pmd/pmd/commit/862ee7b236a379d39d7ced5131b90be6bb5e3030", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink", "committedDate": "2020-10-26T20:23:07Z", "type": "commit"}, {"oid": "7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "url": "https://github.com/pmd/pmd/commit/7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "message": "Merge branch '7.0.x' into pr/2830", "committedDate": "2021-02-13T20:02:09Z", "type": "commit"}, {"oid": "fb359c290eabe8093ad21e317a4c7d9d71d20287", "url": "https://github.com/pmd/pmd/commit/fb359c290eabe8093ad21e317a4c7d9d71d20287", "message": "Remove some things from pmd core", "committedDate": "2021-02-13T20:14:43Z", "type": "commit"}, {"oid": "8fb4a082d845e94a590185c331ddb057079e9c51", "url": "https://github.com/pmd/pmd/commit/8fb4a082d845e94a590185c331ddb057079e9c51", "message": "Remove sentinel value", "committedDate": "2021-02-13T20:18:47Z", "type": "commit"}, {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "url": "https://github.com/pmd/pmd/commit/268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "message": "Simplify tests", "committedDate": "2021-02-13T20:28:24Z", "type": "commit"}, {"oid": "e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "url": "https://github.com/pmd/pmd/commit/e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "message": "Update ApexLink to 1.2.2", "committedDate": "2021-02-23T18:24:00Z", "type": "commit"}, {"oid": "b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "url": "https://github.com/pmd/pmd/commit/b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "message": "Update ruledoc for AvoidUnusedMethod (apex)", "committedDate": "2021-02-23T18:25:29Z", "type": "commit"}, {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516", "url": "https://github.com/pmd/pmd/commit/ee6e819ff77e8d2f607f3439d2af32738a389516", "message": "[doc] Update release notes", "committedDate": "2021-02-23T18:29:31Z", "type": "commit"}, {"oid": "ae195a8179609240e408e942540b695266b9e615", "url": "https://github.com/pmd/pmd/commit/ae195a8179609240e408e942540b695266b9e615", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-06T23:01:25Z", "type": "commit"}, {"oid": "c314ba84b27911d5d4c8144dcc423e064bf24bc8", "url": "https://github.com/pmd/pmd/commit/c314ba84b27911d5d4c8144dcc423e064bf24bc8", "message": "Fix APEX_ROOT_DIRECTORY not being set", "committedDate": "2021-04-06T23:04:47Z", "type": "commit"}, {"oid": "77fbc0bb4465eac30f5f4612f179041990f43675", "url": "https://github.com/pmd/pmd/commit/77fbc0bb4465eac30f5f4612f179041990f43675", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-06T23:19:47Z", "type": "commit"}, {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730", "url": "https://github.com/pmd/pmd/commit/862a320b7d5e2b3e8b4df8ce0eabead35810f730", "message": "Add language attribute", "committedDate": "2021-04-06T23:20:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r609983883", "body": "Should this be `LOG.error`?", "bodyText": "Should this be LOG.error?", "bodyHTML": "<p dir=\"auto\">Should this be <code>LOG.error</code>?</p>", "author": "jbartolotta-sfdc", "createdAt": "2021-04-08T18:26:29Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "originalCommit": "862a320b7d5e2b3e8b4df8ce0eabead35810f730", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA1NzQxMg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610057412", "bodyText": "At the moment the error & info levels are unused, there is interesting debug though that can be used to help diagnose. Does not look like there is a LOG.error but perhaps LOG.severe would be appropriate?", "author": "nawforce", "createdAt": "2021-04-08T20:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDU0ODY1NQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610548655", "bodyText": "Yes LOG.severe is used for recoverable errors", "author": "oowekyala", "createdAt": "2021-04-09T11:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxOTA2OQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613619069", "bodyText": "I changed this.", "author": "nawforce", "createdAt": "2021-04-14T22:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 6d3d386732..029b9f983b 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -27,54 +35,97 @@ import com.nawforce.common.diagnostics.Issue;\n  */\n @Experimental\n public final class ApexMultifileAnalysis {\n+\n     private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like AvoidUnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n             LOG.fine(message);\n", "next_change": {"commit": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 029b9f983b..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -128,7 +132,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "73f86cefb8316defc73d13687b08585a1b593b26", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 6d3d386732..7852943575 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -27,57 +35,104 @@ import com.nawforce.common.diagnostics.Issue;\n  */\n @Experimental\n public final class ApexMultifileAnalysis {\n-    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n \n-    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+    // test only\n+    static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    /**\n+     * Instances of the apexlink index and data structures ({@link Org})\n+     * are stored statically for now. TODO make that language-wide (#2518).\n+     */\n+    private static final Map<String, ApexMultifileAnalysis> INSTANCE_MAP = new ConcurrentHashMap<>();\n \n     // An arbitrary large number of errors to report\n     private static final Integer MAX_ERRORS_PER_FILE = 100;\n \n     // Create a new org for each analysis\n-    private Org org = Org.newOrg(true);\n-    private FileIssueOptions options = new FileIssueOptions();\n+    // Null if failed.\n+    private final @Nullable Org org;\n+    private final FileIssueOptions options = makeOptions();\n+\n+    private static final ApexMultifileAnalysis FAILED_INSTANCE = new ApexMultifileAnalysis();\n+\n+    /** Ctor for the failed instance. */\n+    private ApexMultifileAnalysis() {\n+        org = null;\n+    }\n \n     private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n         LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        org = Org.newOrg();\n         if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n-            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n-            options.includeZombies_$eq(true);\n-            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n-\n             // Load the package into the org, this can take some time!\n-            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.newSFDXPackage(multiFileAnalysisDirectory); // this may fail if the config is wrong\n             org.flush();\n+\n+            // FIXME: Syntax & Semantic errors found during Org loading are not currently being reported. These\n+            // should be routed to the new SemanticErrorReporter but that is not available for use just yet.\n         }\n     }\n \n-    public Issue[] getFileIssues(String filename) {\n+    private static FileIssueOptions makeOptions() {\n+        FileIssueOptions options = new FileIssueOptions();\n+        // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+        options.includeZombies_$eq(true);\n+        options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+        return options;\n+    }\n+\n+    /**\n+     * Returns true if this is analysis index is in a failed state.\n+     * This object is then useless. The failed instance is returned\n+     * from {@link #getAnalysisInstance(String)} if loading the org\n+     * failed, maybe because of malformed configuration.\n+     */\n+    public boolean isFailed() {\n+        return org == null;\n+    }\n+\n+    public List<Issue> getFileIssues(String filename) {\n         // Extract issues for a specific metadata file from the org\n-        return org.getFileIssues(filename, options);\n+        return org == null ? Collections.emptyList()\n+                           : Collections.unmodifiableList(Arrays.asList(org.getFileIssues(filename, options)));\n     }\n \n-    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n-        if (instanceMap.isEmpty()) {\n+    /**\n+     * Returns the analysis instance. Returns a {@linkplain #isFailed() failed instance}\n+     * if this fails.\n+     *\n+     * @param multiFileAnalysisDirectory Root directory of the configuration (see {@link ApexParser#MULTIFILE_DIRECTORY}).\n+     */\n+    public static @NonNull ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (INSTANCE_MAP.isEmpty()) {\n             // Default some library wide settings\n             ServerOps.setAutoFlush(false);\n             ServerOps.setLogger(new AnalysisLogger());\n-            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+            ServerOps.setDebugLogging(new String[] { \"ALL\" });\n         }\n \n-        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n-    }\n-\n-    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n-        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+        return INSTANCE_MAP.computeIfAbsent(\n+            multiFileAnalysisDirectory,\n+            dir -> {\n+                try {\n+                    return new ApexMultifileAnalysis(dir);\n+                } catch (Exception e) {\n+                    LOG.severe(\"Exception while initializing Apexlink (\" + e.getMessage() + \")\");\n+                    LOG.severe(ExceptionUtils.getStackTrace(e));\n+                    LOG.severe(\"PMD will not attempt to initialize Apexlink further, this can cause rules like UnusedMethod to be dysfunctional\");\n+                    return FAILED_INSTANCE;\n+                }\n+            });\n     }\n \n     /*\n      * Very simple logger to aid debugging, relays ApexLink logging into PMD\n      */\n-    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+    private static final class AnalysisLogger implements com.nawforce.common.api.Logger {\n+\n         @Override\n         public void error(String message) {\n-            LOG.fine(message);\n+            LOG.severe(message);\n         }\n \n         @Override\n", "next_change": {"commit": "744817a38955256f436dde6b3df4ef5ad7fe313c", "changed_code": [{"header": "diff --git a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\nindex 7852943575..abee47ba64 100644\n--- a/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n+++ b/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java\n", "chunk": "@@ -132,7 +131,7 @@ public final class ApexMultifileAnalysis {\n \n         @Override\n         public void error(String message) {\n-            LOG.severe(message);\n+            LOG.error(message);\n         }\n \n         @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "73f86cefb8316defc73d13687b08585a1b593b26", "message": "Merge commit", "committedDate": null}, {"oid": "744817a38955256f436dde6b3df4ef5ad7fe313c", "committedDate": "2022-02-18 16:49:29 +0100", "message": "[apex] Use slf4j"}, {"oid": "10ff8f6f0ecdc513ee70149ce4a7b7918fb5fc68", "committedDate": "2022-07-20 18:18:40 +0200", "message": "Wire in existing langs"}, {"oid": "17040599efc824e7f1f5587a6999c26e56152cba", "committedDate": "2022-07-23 12:43:33 +0200", "message": "Fix global state in apex module"}, {"oid": "872a41b4e9aeb6d30725db52f4836f7cc04e8601", "committedDate": "2023-02-04 20:22:49 +0100", "message": "Make ApexProcessor not implement LVH"}]}, {"oid": "b2a421fed82f72f55066932c6731ab49d4230222", "url": "https://github.com/pmd/pmd/commit/b2a421fed82f72f55066932c6731ab49d4230222", "message": "Upgrade apex-link version", "committedDate": "2021-04-08T19:38:44Z", "type": "commit"}, {"oid": "97c8c3b365de224e785ee46504944f1e286165da", "url": "https://github.com/pmd/pmd/commit/97c8c3b365de224e785ee46504944f1e286165da", "message": "Extend description on AvoidUnusedMethod", "committedDate": "2021-04-08T20:38:50Z", "type": "commit"}, {"oid": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "url": "https://github.com/pmd/pmd/commit/cf3ed1cd04901034458c9860df3c4b21bcccee0c", "message": "Only attempt loading once", "committedDate": "2021-04-09T12:35:18Z", "type": "commit"}, {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b", "url": "https://github.com/pmd/pmd/commit/1572484bf0d46c049660ecce6b41e9f6e7d7572b", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-09T12:38:21Z", "type": "commit"}, {"oid": "1187b9e4e149582912c5dc649a3872e7d79a7e8c", "url": "https://github.com/pmd/pmd/commit/1187b9e4e149582912c5dc649a3872e7d79a7e8c", "message": "Add tests for logging behavior", "committedDate": "2021-04-09T14:19:57Z", "type": "commit"}, {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "url": "https://github.com/pmd/pmd/commit/8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "message": "Change rule name to UnusedMethod, correct logging and add FIXME", "committedDate": "2021-04-14T21:29:05Z", "type": "commit"}]}