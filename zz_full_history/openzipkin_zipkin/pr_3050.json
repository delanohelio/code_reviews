{"pr_number": 3050, "pr_title": "Dynamic elasticsearch security file", "pr_author": "hanahmily", "pr_createdAt": "2020-04-01T05:44:37Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3050", "timeline": [{"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44", "url": "https://github.com/openzipkin/zipkin/commit/9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44", "message": "Dynamic elasticsearch security file\n\nLoad elasticsearch credentials from a properties file in a fixed\nrate interval. There are two parameters to control it:\n  * security-file-path: An absolute path of file.\n  * security-file-refresh-interval-in-second: Refresh interval in\n    seconds.\n\nNotic: Before the crendentails stored in properties file are loaded\ninto heap, username/password parameters are as the default value.\nIf one of them is a empty string, basic authentication is disable.\nThat means \"Authorization\" header is absent in http request.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-01T04:59:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTA4NA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401379084", "body": "I think maybe spring already has a scheduler bean? if not, define this as a bean so it can shutdown more coherently.", "bodyText": "I think maybe spring already has a scheduler bean? if not, define this as a bean so it can shutdown more coherently.", "bodyHTML": "<p dir=\"auto\">I think maybe spring already has a scheduler bean? if not, define this as a bean so it can shutdown more coherently.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-01T06:18:21Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +145,30 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  Consumer<ClientOptionsBuilder> dynamicElasticsearchAuth(ZipkinElasticsearchStorageProperties es,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    return new Consumer<ClientOptionsBuilder>() {\n+      @Override\n+      public void accept(final ClientOptionsBuilder client) {\n+        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(", "originalCommit": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzYyNw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401583627", "bodyText": "I picked up a scheduler bean.", "author": "hanahmily", "createdAt": "2020-04-01T12:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex 73f24962d..5bf3ac933 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -146,27 +150,28 @@ public class ZipkinElasticsearchStorageConfiguration {\n   }\n \n   @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n-  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n     if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n       return new BasicCredentials();\n     }\n     return new BasicCredentials(es.getUsername(), es.getPassword());\n   }\n \n-  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n-  Consumer<ClientOptionsBuilder> dynamicElasticsearchAuth(ZipkinElasticsearchStorageProperties es,\n-    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n-    return new Consumer<ClientOptionsBuilder>() {\n-      @Override\n-      public void accept(final ClientOptionsBuilder client) {\n-        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n-          new ThreadFactoryBuilder().setDaemon(true)\n-            .setNameFormat(\"RefreshElasticSearchSecurityFile-%d\")\n-            .build());\n-        ses.scheduleAtFixedRate(new DynamicSecurityFileLoader(es.getSecurityFilePath(), basicCredentials),\n-          0, es.getSecurityFileRefreshIntervalInSecond(), TimeUnit.SECONDS);\n-      }\n-    };\n+  @Bean(destroyMethod = \"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    DynamicCredentialsFileLoader credentialsFileLoader =\n+      new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n+    credentialsFileLoader.updateCredentialsFromProperties();\n+    ses.scheduleAtFixedRate(credentialsFileLoader,\n+      0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    return ses;\n   }\n \n   @Bean @Qualifier(QUALIFIER) @ConditionalOnSelfTracing\n", "next_change": {"commit": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex 5bf3ac933..13d66bbb1 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -163,14 +165,13 @@ public class ZipkinElasticsearchStorageConfiguration {\n     @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n     @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n     ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n-      new ThreadFactoryBuilder()\n-        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n-        .build());\n+      new NamedThreadFactory(\"zipkin-load-es-credentials\"));\n     DynamicCredentialsFileLoader credentialsFileLoader =\n       new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n     credentialsFileLoader.updateCredentialsFromProperties();\n-    ses.scheduleAtFixedRate(credentialsFileLoader,\n-      0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    ScheduledFuture<?> future = ses.scheduleAtFixedRate(credentialsFileLoader,\n+        0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    if (future.isDone()) throw new RuntimeException(\"credential refresh thread didn't start\");\n     return ses;\n   }\n \n", "next_change": null}]}}]}}, {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c", "url": "https://github.com/openzipkin/zipkin/commit/251b1ab3e507697633135a88cd8a2a437a51bc5c", "message": "Replace ExecutorService with Spring Schedule\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-01T12:38:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDM3NA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401754374", "body": "Can you make the link `<a href ...`", "bodyText": "Can you make the link <a href ...", "bodyHTML": "<p dir=\"auto\">Can you make the link <code>&lt;a href ...</code></p>", "author": "jorgheymans", "createdAt": "2020-04-01T16:38:35Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,24 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n  * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "originalCommit": "251b1ab3e507697633135a88cd8a2a437a51bc5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NDMzNA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402064334", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-02T05:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\nindex 48faec752..7c6448eb9 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n", "chunk": "@@ -19,10 +19,13 @@ import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Optional;\n+import java.util.Objects;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n  */\n final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTcyNg==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401759726", "body": "`href` same as above", "bodyText": "href same as above", "bodyHTML": "<p dir=\"auto\"><code>href</code> same as above</p>", "author": "jorgheymans", "createdAt": "2020-04-01T16:47:07Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "originalCommit": "251b1ab3e507697633135a88cd8a2a437a51bc5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTY3MA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402065670", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-02T05:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\nindex 802f76d22..55c8e14da 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\n", "chunk": "@@ -15,11 +15,15 @@ package zipkin2.server.internal.elasticsearch;\n \n import java.util.Base64;\n import java.util.Optional;\n+import zipkin2.internal.Nullable;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n /**\n- * Generate Elasticsearch basic user credentials https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n  */\n final class BasicCredentials {\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2ODQ1NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401768455", "body": "maybe an expression `* 1000` here does that bring any extra safety ? Can the user specify `0.5` as value, and if yes what would happen ?", "bodyText": "maybe an expression * 1000 here does that bring any extra safety ? Can the user specify 0.5 as value, and if yes what would happen ?", "bodyHTML": "<p dir=\"auto\">maybe an expression <code>* 1000</code> here does that bring any extra safety ? Can the user specify <code>0.5</code> as value, and if yes what would happen ?</p>", "author": "jorgheymans", "createdAt": "2020-04-01T16:59:37Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicSecurityFileLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from security file.\n+ */\n+class DynamicSecurityFileLoader {\n+  static final String SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.security-file-refresh-interval-in-second\";\n+\n+  private final String securityFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicSecurityFileLoader(BasicCredentials basicCredentials, String securityFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.securityFilePath = securityFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND +\"}000\")", "originalCommit": "251b1ab3e507697633135a88cd8a2a437a51bc5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYwOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402065608", "bodyText": "It will cause a \"NumberFormatException\" because the type of this param is Integer. I have added *1000 to the setter of it.", "author": "hanahmily", "createdAt": "2020-04-02T05:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2ODQ1NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6831799d2a0ddc38a4c3415f2f5be33fd3f27987", "url": "https://github.com/openzipkin/zipkin/commit/6831799d2a0ddc38a4c3415f2f5be33fd3f27987", "message": "Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-02T05:44:28Z", "type": "commit"}, {"oid": "eb945a4980025f43c24de52a4f84950708e52704", "url": "https://github.com/openzipkin/zipkin/commit/eb945a4980025f43c24de52a4f84950708e52704", "message": "Triger CI\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-02T13:29:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402446491", "body": "throwing the `IOException` can get quite spammy if the refresh interval is small. Should we consider logging the stacktrace only once, and then suppressing it for further invocations ?", "bodyText": "throwing the IOException can get quite spammy if the refresh interval is small. Should we consider logging the stacktrace only once, and then suppressing it for further invocations ?", "bodyHTML": "<p dir=\"auto\">throwing the <code>IOException</code> can get quite spammy if the refresh interval is small. Should we consider logging the stacktrace only once, and then suppressing it for further invocations ?</p>", "author": "jorgheymans", "createdAt": "2020-04-02T16:28:10Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+\n+  private final String credentialsFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFilePath = credentialsFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n+  void load() throws IOException {", "originalCommit": "eb945a4980025f43c24de52a4f84950708e52704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDA2Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670067", "bodyText": "agree let's not throw and instead log. log once is ok or rate-limited if want to use something like armeria's rate limited logging (not sure it is a generally available api)", "author": "codefromthecrypt", "createdAt": "2020-04-03T00:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjIyOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402986228", "bodyText": "I opt to guava RateLimiter to log an exception every 10 seconds.", "author": "hanahmily", "createdAt": "2020-04-03T12:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex b9b5a4cee..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,50 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n- * Load username/password from credentials file.\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n-  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n-    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n \n-  private final String credentialsFilePath;\n+  private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n-    String credentialsFilePath) {\n+    String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n-    this.credentialsFilePath = credentialsFilePath;\n+    this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() throws IOException {\n-    Properties properties = new Properties();\n-    File file = Paths.get(credentialsFilePath).toFile();\n-    if (!file.getName().endsWith(\".properties\")) {\n-      throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n+  @Override public void run() {\n+    try {\n+      updateCredentialsFromProperties();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n     }\n-    try (FileInputStream is = new FileInputStream(file)) {\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n       properties.load(is);\n-      if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-        return;\n-      }\n-      basicCredentials.updateCredentials(\n-        properties.getProperty(USERNAME_PROP),\n-        properties.getProperty(PASSWORD_PROP)\n-      );\n     }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n+    }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzYyMA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402457620", "body": "`... to every request per.` incomplete sentence ?", "bodyText": "... to every request per. incomplete sentence ?", "bodyHTML": "<p dir=\"auto\"><code>... to every request per.</code> incomplete sentence ?</p>", "author": "jorgheymans", "createdAt": "2020-04-02T16:44:50Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,28 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request per.", "originalCommit": "eb945a4980025f43c24de52a4f84950708e52704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjUzMA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402986530", "bodyText": "drop \"per\"", "author": "hanahmily", "createdAt": "2020-04-03T12:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\nindex 62ed4f472..7c6448eb9 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n", "chunk": "@@ -19,10 +19,10 @@ import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Optional;\n+import java.util.Objects;\n \n /**\n- * Adds basic auth username and password to every request per.\n+ * Adds basic auth username and password to every request.\n  *\n  * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n  * Elasticsearch security works</a></p>\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTYyOQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402461629", "body": "nit: i would call this method just `basicCredentials` since at this point they are not dynamic per se, they become dynamic when you hook them up to the `DynamicCredentialsFileLoader` ", "bodyText": "nit: i would call this method just basicCredentials since at this point they are not dynamic per se, they become dynamic when you hook them up to the DynamicCredentialsFileLoader", "bodyHTML": "<p dir=\"auto\">nit: i would call this method just <code>basicCredentials</code> since at this point they are not dynamic per se, they become dynamic when you hook them up to the <code>DynamicCredentialsFileLoader</code></p>", "author": "jorgheymans", "createdAt": "2020-04-02T16:50:59Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +144,21 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {", "originalCommit": "eb945a4980025f43c24de52a4f84950708e52704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NzA0Ng==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402987046", "bodyText": "make sense. have updated the method name", "author": "hanahmily", "createdAt": "2020-04-03T12:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex f7d713660..5bf3ac933 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -145,18 +150,28 @@ public class ZipkinElasticsearchStorageConfiguration {\n   }\n \n   @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n-  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n     if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n       return new BasicCredentials();\n     }\n     return new BasicCredentials(es.getUsername(), es.getPassword());\n   }\n \n-  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n-  DynamicCredentialsFileLoader dynamicElasticsearchAuth(\n-    @Value(\"${\" + CREDENTIALS_FILE_PATH_PROP + \"}\") String credentialsFilePath,\n-    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n-    return new DynamicCredentialsFileLoader(basicCredentials, credentialsFilePath);\n+  @Bean(destroyMethod = \"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    DynamicCredentialsFileLoader credentialsFileLoader =\n+      new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n+    credentialsFileLoader.updateCredentialsFromProperties();\n+    ses.scheduleAtFixedRate(credentialsFileLoader,\n+      0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    return ses;\n   }\n \n   @Bean @Qualifier(QUALIFIER) @ConditionalOnSelfTracing\n", "next_change": {"commit": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex 5bf3ac933..13d66bbb1 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -163,14 +165,13 @@ public class ZipkinElasticsearchStorageConfiguration {\n     @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n     @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n     ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n-      new ThreadFactoryBuilder()\n-        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n-        .build());\n+      new NamedThreadFactory(\"zipkin-load-es-credentials\"));\n     DynamicCredentialsFileLoader credentialsFileLoader =\n       new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n     credentialsFileLoader.updateCredentialsFromProperties();\n-    ses.scheduleAtFixedRate(credentialsFileLoader,\n-      0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    ScheduledFuture<?> future = ses.scheduleAtFixedRate(credentialsFileLoader,\n+        0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    if (future.isDone()) throw new RuntimeException(\"credential refresh thread didn't start\");\n     return ses;\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDIxMw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670213", "body": "credentials-file", "bodyText": "credentials-file", "bodyHTML": "<p dir=\"auto\">credentials-file</p>", "author": "codefromthecrypt", "createdAt": "2020-04-03T00:25:29Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -42,18 +42,24 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import zipkin2.elasticsearch.ElasticsearchStorage;\n import zipkin2.server.internal.ConditionalOnSelfTracing;\n import zipkin2.storage.StorageComponent;\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n+@EnableScheduling\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE_PATH_PROP =\n+    \"zipkin.storage.elasticsearch.credentials-file-path\";", "originalCommit": "eb945a4980025f43c24de52a4f84950708e52704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODgyNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402988825", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-03T13:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex f7d713660..5bf3ac933 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -50,16 +54,17 @@ import zipkin2.storage.StorageComponent;\n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n @Configuration(proxyBeanMethods = false)\n-@EnableScheduling\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n-  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n-  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n-  static final String CREDENTIALS_FILE_PATH_PROP =\n-    \"zipkin.storage.elasticsearch.credentials-file-path\";\n+  static final String USERNAME = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE =\n+    \"zipkin.storage.elasticsearch.credentials-file\";\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   // Exposed as a bean so that zipkin-aws can override this as sourced from the AWS endpoints api\n   @Bean @Qualifier(QUALIFIER) @ConditionalOnMissingBean\n", "next_change": null}]}}, {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d", "url": "https://github.com/openzipkin/zipkin/commit/7232548532361fd4d97ee0902bc8e44f907cf42d", "message": "Polish codes and docs\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-03T12:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403238391", "body": "First time guava is used in zipkin-server, i think it's a no-go to use there but we don't have anything enforcing it. @adriancole can you confirm ?", "bodyText": "First time guava is used in zipkin-server, i think it's a no-go to use there but we don't have anything enforcing it. @adriancole can you confirm ?", "bodyHTML": "<p dir=\"auto\">First time guava is used in zipkin-server, i think it's a no-go to use there but we don't have anything enforcing it. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/adriancole/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adriancole\">@adriancole</a> can you confirm ?</p>", "author": "jorgheymans", "createdAt": "2020-04-03T18:45:01Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "originalCommit": "7232548532361fd4d97ee0902bc8e44f907cf42d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5ODkwMw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403398903", "bodyText": "yeah no need for a dependency to do this. If I understand correctly, this is a single-thread that's updating things (same thread). you can implement an interval without any dep or fancy using System.nanoTime and subtraction.\nMyRunnable {\n  final SameThreadRateLimiter logLimiter = new SameThreadRateLimiter(5);\n\n  public void run(){\n    try {\n         // do fancy thing\n    } catch (Throwable e) {\n       Call.propagateIfFatal(e);\n       if (logLimiter.pass()) {\n          // LOG it!\n       }\n    }\n  }\n\nSameThreadRateLimiter {\n  static final long NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);\n  final int intervalSeconds;\n  // pass the first time.\n  // we can't use zero or negative bc nanoTime can be negative\n  // just use now as it is simpler. first time will be at or after now.\n  long nextPass = System.nanoTime();\n\n  SameThreadRateLimiter(int intervalSeconds) {\n    this.intervalSeconds = intervalSeconds;\n  }\n\n  boolean pass() {\n    return shouldPass(System.nanoTime());\n  }\n\n  static long nextPass(long now) {\n    return now + intervalSeconds * NANOS_PER_SECOND;\n  }\n\n  static boolean shouldPass(long now) {\n    long nanosUntilPass = -(now - nextPass); // because nanoTime can be negative\n    if (nanosUntilPass <= 0) {\n      nextPass = nextPass(now);\n      return true;\n    }\n    return false;\n  }\n}\nlogic simplified due to same thread from this\nhttps://github.com/openzipkin/brave/blob/master/brave/src/main/java/brave/sampler/RateLimitingSampler.java\nif you use this, please add unit test on static method, which you can mostly copy paste  from\nhttps://github.com/openzipkin/brave/blob/master/brave/src/test/java/brave/sampler/RateLimitingSamplerTest.java", "author": "codefromthecrypt", "createdAt": "2020-04-04T00:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTE2NA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421164", "bodyText": "Is this to reduce logging if a user sets a really small refresh interval? It seems like overkill especially since most will be in the seconds, how about just logging without the limit?", "author": "anuraaga", "createdAt": "2020-04-04T04:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1ODQwOQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404158409", "bodyText": "I switch to log error without any rate limit.", "author": "hanahmily", "createdAt": "2020-04-06T14:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex 49683b06e..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,63 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n- * Load username/password from credentials file.\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTc5OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403239798", "body": "`CREDENTIALS_REFRESH_INTERVAL` to align with above ?", "bodyText": "CREDENTIALS_REFRESH_INTERVAL to align with above ?", "bodyHTML": "<p dir=\"auto\"><code>CREDENTIALS_REFRESH_INTERVAL</code> to align with above ?</p>", "author": "jorgheymans", "createdAt": "2020-04-03T18:46:42Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "originalCommit": "7232548532361fd4d97ee0902bc8e44f907cf42d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMTMzNw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403811337", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-06T03:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex 49683b06e..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,63 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n- * Load username/password from credentials file.\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTI2Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401267", "body": "```suggestion\r\n * Loads username/password from credentials file.\r\n *\r\n * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\r\n * This means that spans will drop and api failures will occur for any time remaining in the refresh\r\n * interval. A future version can tighten this by also using poll events.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Load username/password from credentials file.\n          \n          \n            \n             * Loads username/password from credentials file.\n          \n          \n            \n             *\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * This means that spans will drop and api failures will occur for any time remaining in the refresh\n          \n          \n            \n             * interval. A future version can tighten this by also using poll events.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Load</span> username<span class=\"pl-k\">/</span>password from credentials file.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Loads</span> username<span class=\"pl-k\">/</span>password from credentials file.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;&lt;</span>em<span class=\"pl-k\">&gt;</span><span class=\"pl-c1\">NOTE</span><span class=\"pl-k\">:</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>em<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">This</span> implementation currently uses blocking <span class=\"pl-smi\">I</span><span class=\"pl-k\">/</span><span class=\"pl-smi\">O</span> loop without poll events.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">This</span> means that spans will drop and api failures will occur <span class=\"pl-k\">for</span> any time remaining in the refresh</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> interval. <span class=\"pl-smi\">A</span> future version can tighten <span class=\"pl-c1\">this</span> by also using poll events.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:02:15Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.", "originalCommit": "7232548532361fd4d97ee0902bc8e44f907cf42d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex 49683b06e..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,63 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n- * Load username/password from credentials file.\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"oid": "111e9d410aba8b7044a5c53e812c896abbc82bf0", "url": "https://github.com/openzipkin/zipkin/commit/111e9d410aba8b7044a5c53e812c896abbc82bf0", "message": "add warning", "committedDate": "2020-04-04T01:02:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQzMg==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401432", "body": "```suggestion\r\n  static final String CREDENTIALS_REFRESH_INTERVAL =\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n          \n          \n            \n              static final String CREDENTIALS_REFRESH_INTERVAL =", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_REFRESH_INTERVAL</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:03:07Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "originalCommit": "111e9d410aba8b7044a5c53e812c896abbc82bf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex d69b82879..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2", "url": "https://github.com/openzipkin/zipkin/commit/0085192a312bb86b50f49819da1cfe09efcbfda2", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "committedDate": "2020-04-04T01:03:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQ5Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401497", "body": "```suggestion\r\n  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">@Scheduled</span>(<span class=\"pl-c1\">fixedRateString</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">@Scheduled</span>(<span class=\"pl-c1\">fixedRateString</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_REFRESH_INTERVAL</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:03:30Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "originalCommit": "0085192a312bb86b50f49819da1cfe09efcbfda2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex ee1ac0c8c..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTU0OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401548", "body": "```suggestion\r\n  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">@Scheduled</span>(<span class=\"pl-c1\">fixedRateString</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">@Scheduled</span>(<span class=\"pl-c1\">fixedRateString</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">CREDENTIALS_REFRESH_INTERVAL</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:03:52Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "originalCommit": "0085192a312bb86b50f49819da1cfe09efcbfda2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex ee1ac0c8c..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "url": "https://github.com/openzipkin/zipkin/commit/18207ead486cdc560a24f9be5e3622b6a93e4dac", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "committedDate": "2020-04-04T01:03:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401908", "body": "I think this is milliseconds.. can you lookup syntax to make this seconds? maybe just adding 's' after", "bodyText": "I think this is milliseconds.. can you lookup syntax to make this seconds? maybe just adding 's' after", "bodyHTML": "<p dir=\"auto\">I think this is milliseconds.. can you lookup syntax to make this seconds? maybe just adding 's' after</p>", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:05:42Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMjM4OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403812388", "bodyText": "From https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html#fixedRateString--, the period is in milliseconds.\nIn my first commit, I append 000 to convert seconds to milliseconds. Does it make sense to you?", "author": "hanahmily", "createdAt": "2020-04-06T03:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MTMzOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404161338", "bodyText": "Appending 000 looks like not clear to me. So I put a *1000 into its setter.", "author": "hanahmily", "createdAt": "2020-04-06T15:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex a4bed31af..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjAzMw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402033", "body": "```suggestion\r\n *   credentials-refresh-interval: 5\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5000\n          \n          \n            \n             *   credentials-refresh-interval: 5", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span>   credentials<span class=\"pl-k\">-</span>refresh<span class=\"pl-k\">-</span>interval<span class=\"pl-k\">:</span> <span class=\"pl-c1 x x-first x-last\">5000</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span>   credentials<span class=\"pl-k\">-</span>refresh<span class=\"pl-k\">-</span>interval<span class=\"pl-k\">:</span> <span class=\"pl-c1 x x-first x-last\">5</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:06:16Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5000", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex b3b14b085..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -36,7 +36,7 @@ import zipkin2.elasticsearch.ElasticsearchStorage.LazyHttpClient;\n  *   username: username\n  *   password: password\n  *   credentials-file: credentialsFile\n- *   credentials-refresh-interval: 5000\n+ *   credentials-refresh-interval: 1\n  *   http-logging: HEADERS\n  *   ssl:\n  *     key-store: keystore.p12\n", "next_change": {"commit": "10c478ba049696e9ef32e8400a3d7209e3f31c5a", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex fc4dd6d49..893b2d1ca 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -33,6 +33,7 @@ import zipkin2.elasticsearch.ElasticsearchStorage.LazyHttpClient;\n  *   date-separator: -\n  *   index-shards: 5\n  *   index-replicas: 1\n+ *   ensure-templates: true\n  *   username: username\n  *   password: password\n  *   credentials-file: credentialsFile\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIwNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402205", "body": "```suggestion\r\n  /** Credentials refresh interval (in seconds) */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Credentials refresh interval(in milliseconds) */\n          \n          \n            \n              /** Credentials refresh interval (in seconds) */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Credentials refresh interval(in <span class=\"x x-first x-last\">milliseconds</span>) <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Credentials refresh interval<span class=\"x x-first x-last\"> </span>(in <span class=\"x x-first x-last\">seconds</span>) <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:06:58Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex b3b14b085..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -173,8 +173,8 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n    * password\n    */\n   private String credentialsFile;\n-  /** Credentials refresh interval(in milliseconds) */\n-  private Integer credentialsRefreshInterval = 5_000;\n+  /** Credentials refresh interval (in seconds) */\n+  private Integer credentialsRefreshInterval = 1;\n   /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n   /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n", "next_change": {"commit": "bc17082781504ed4910d52f44c80b2d22727b4f6", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex fc4dd6d49..588cc91d0 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -175,9 +201,9 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n   private String credentialsFile;\n   /** Credentials refresh interval (in seconds) */\n   private Integer credentialsRefreshInterval = 1;\n-  /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n+  /** When set, controls the volume of HTTP logging of the Elasticsearch API. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n-  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n+  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch API requests. */\n   private Integer timeout = 10_000;\n   /** Overrides ssl configuration relating to the Elasticsearch client connection. */\n   private Ssl ssl = new Ssl();\n", "next_change": {"commit": "346ac51601043b6299e9e856f7a070aae8f4b65e", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 588cc91d0..5685b920b 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -212,6 +213,8 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n+  private Integer templatePriority;\n+\n   public String getPipeline() {\n     return pipeline;\n   }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIyMA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402220", "body": "```suggestion\r\n  private Integer credentialsRefreshInterval = 5;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5_000;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 5;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Integer</span> credentialsRefreshInterval <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5_000</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Integer</span> credentialsRefreshInterval <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:07:12Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */\n+  private Integer credentialsRefreshInterval = 5_000;", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex b3b14b085..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -173,8 +173,8 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n    * password\n    */\n   private String credentialsFile;\n-  /** Credentials refresh interval(in milliseconds) */\n-  private Integer credentialsRefreshInterval = 5_000;\n+  /** Credentials refresh interval (in seconds) */\n+  private Integer credentialsRefreshInterval = 1;\n   /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n   /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n", "next_change": {"commit": "bc17082781504ed4910d52f44c80b2d22727b4f6", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex fc4dd6d49..588cc91d0 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -175,9 +201,9 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n   private String credentialsFile;\n   /** Credentials refresh interval (in seconds) */\n   private Integer credentialsRefreshInterval = 1;\n-  /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n+  /** When set, controls the volume of HTTP logging of the Elasticsearch API. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n-  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n+  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch API requests. */\n   private Integer timeout = 10_000;\n   /** Overrides ssl configuration relating to the Elasticsearch client connection. */\n   private Ssl ssl = new Ssl();\n", "next_change": {"commit": "346ac51601043b6299e9e856f7a070aae8f4b65e", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 588cc91d0..5685b920b 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -212,6 +213,8 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n+  private Integer templatePriority;\n+\n   public String getPipeline() {\n     return pipeline;\n   }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjQzOQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402439", "body": "```suggestion\r\n      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",\n          \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zipkin.storage.elasticsearch.credentials-refresh-interval=<span class=\"x x-first x-last\">3000</span><span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zipkin.storage.elasticsearch.credentials-refresh-interval=<span class=\"x x-first x-last\">3</span><span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:08:07Z", "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server-security\", \".properties\");\n+    Properties props = new Properties();\n+    props.put(USERNAME_PROP, \"foo\");\n+    props.put(PASSWORD_PROP, \"bar\");\n+    try (FileOutputStream os = new FileOutputStream(credentialsFile)) {\n+      props.store(os, \"\");\n+    }\n+    TestPropertyValues.of(\n+      \"spring.config.name=zipkin-server\",\n+      \"zipkin.storage.type:elasticsearch\",\n+      \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n+      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile.getAbsolutePath(),\n+      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\nindex 87546ac55..b68f8a9b1 100644\n--- a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n+++ b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n", "chunk": "@@ -62,22 +56,16 @@ class ITElasticsearchDynamicCredentials {\n \n   AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n   ElasticsearchStorage storage;\n-  File credentialsFile;\n+  String credentialsFile;\n \n   @BeforeEach void init() throws IOException {\n-    credentialsFile = File.createTempFile(\"zipkin-server-security\", \".properties\");\n-    Properties props = new Properties();\n-    props.put(USERNAME_PROP, \"foo\");\n-    props.put(PASSWORD_PROP, \"bar\");\n-    try (FileOutputStream os = new FileOutputStream(credentialsFile)) {\n-      props.store(os, \"\");\n-    }\n+    credentialsFile = pathOfResource(\"es-credentials\");\n     TestPropertyValues.of(\n       \"spring.config.name=zipkin-server\",\n       \"zipkin.storage.type:elasticsearch\",\n       \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n-      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile.getAbsolutePath(),\n-      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",\n+      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile,\n+      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",\n       \"zipkin.storage.elasticsearch.ssl.key-store=classpath:keystore.jks\",\n       \"zipkin.storage.elasticsearch.ssl.key-store-password=password\",\n       \"zipkin.storage.elasticsearch.ssl.trust-store=classpath:keystore.jks\",\n", "next_change": {"commit": "10c478ba049696e9ef32e8400a3d7209e3f31c5a", "changed_code": [{"header": "diff --git a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\nindex b68f8a9b1..0d4b00efe 100644\n--- a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n+++ b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n", "chunk": "@@ -58,12 +56,13 @@ class ITElasticsearchDynamicCredentials {\n   ElasticsearchStorage storage;\n   String credentialsFile;\n \n-  @BeforeEach void init() throws IOException {\n+  @BeforeEach void init() {\n     credentialsFile = pathOfResource(\"es-credentials\");\n     TestPropertyValues.of(\n       \"spring.config.name=zipkin-server\",\n-      \"zipkin.storage.type:elasticsearch\",\n-      \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n+      \"zipkin.storage.type=elasticsearch\",\n+      \"zipkin.storage.elasticsearch.ensure-templates=false\",\n+      \"zipkin.storage.elasticsearch.hosts=https://localhost:\" + server.httpsPort(),\n       \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile,\n       \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",\n       \"zipkin.storage.elasticsearch.ssl.key-store=classpath:keystore.jks\",\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjYxOQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402619", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Convert second to millisecond", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> Convert second to millisecond</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:09:23Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert second to millisecond", "originalCommit": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex b3b14b085..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -276,7 +276,6 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   public void setCredentialsRefreshInterval(\n     Integer credentialsRefreshInterval) {\n-    // Convert second to millisecond\n     this.credentialsRefreshInterval = credentialsRefreshInterval;\n   }\n \n", "next_change": null}]}}, {"oid": "781d24328f448baf8f340680050b7d2d81860eb9", "url": "https://github.com/openzipkin/zipkin/commit/781d24328f448baf8f340680050b7d2d81860eb9", "message": "Fix units", "committedDate": "2020-04-04T01:10:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTQwNw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403405407", "body": "actually if we use a normal single thread scheduled executor and make this type closeable, it should be less error prone on things like this. Spring automatically closes beans on shutdown.\r\n\r\nAlso, this as a bean allows something to synchronously call load auth fail. If we don't do this now, move it to a comment.", "bodyText": "actually if we use a normal single thread scheduled executor and make this type closeable, it should be less error prone on things like this. Spring automatically closes beans on shutdown.\nAlso, this as a bean allows something to synchronously call load auth fail. If we don't do this now, move it to a comment.", "bodyHTML": "<p dir=\"auto\">actually if we use a normal single thread scheduled executor and make this type closeable, it should be less error prone on things like this. Spring automatically closes beans on shutdown.</p>\n<p dir=\"auto\">Also, this as a bean allows something to synchronously call load auth fail. If we don't do this now, move it to a comment.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-04T01:31:49Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "originalCommit": "781d24328f448baf8f340680050b7d2d81860eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjM3NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404272375", "bodyText": "added this note in the type doc", "author": "jorgheymans", "createdAt": "2020-04-06T17:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex a4bed31af..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420790", "body": "Let's just make this `@Nullable` instead of using `Optional`", "bodyText": "Let's just make this @Nullable instead of using Optional", "bodyHTML": "<p dir=\"auto\">Let's just make this <code>@Nullable</code> instead of using <code>Optional</code></p>", "author": "anuraaga", "createdAt": "2020-04-04T03:59:16Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "originalCommit": "781d24328f448baf8f340680050b7d2d81860eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMzU1MA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403813550", "bodyText": "If it's a convention of nullable return value among Zipkin community, I would like to follow it. Replacing Null with Optional is from my personal practice.", "author": "hanahmily", "createdAt": "2020-04-06T03:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxODI3NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403818275", "bodyText": "Yup - we basically only use Optional with bean parameters to support spring but prefer nullable in general.", "author": "anuraaga", "createdAt": "2020-04-06T04:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NDIyOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404164228", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-06T15:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\nindex 6d740cb2d..55c8e14da 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java\n", "chunk": "@@ -41,7 +42,8 @@ final class BasicCredentials {\n     basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n   }\n \n-  Optional<String> getCredentials() {\n-    return Optional.ofNullable(basicCredentials);\n+  @Nullable\n+  String getCredentials() {\n+    return basicCredentials;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420915", "body": "I don't think we need this note. This is using blocking I/O on a separate thread from the server event loop so shouldn't really effect the API.", "bodyText": "I don't think we need this note. This is using blocking I/O on a separate thread from the server event loop so shouldn't really effect the API.", "bodyHTML": "<p dir=\"auto\">I don't think we need this note. This is using blocking I/O on a separate thread from the server event loop so shouldn't really effect the API.</p>", "author": "anuraaga", "createdAt": "2020-04-04T04:01:03Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "originalCommit": "781d24328f448baf8f340680050b7d2d81860eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTQ1MA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425450", "bodyText": "the note is mostly about \"without poll events\" meaning there's no file change notification. I agree the \"blocking I/O\" word should be removed as it confuses.. I meant to say \"not nio\"? like old school file apis.", "author": "codefromthecrypt", "createdAt": "2020-04-04T04:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMTgzMw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403431833", "bodyText": "Ah this is if the creds become invalidated in the middle of an interval, not about event loop. Yeah blocking tricked me. Because this doesn't use FileWatcher is probably clear to any Java developer", "author": "anuraaga", "createdAt": "2020-04-04T06:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex a4bed31af..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421548", "body": "I think we can use `Duration` to support any type of interval like `5s` `1m`", "bodyText": "I think we can use Duration to support any type of interval like 5s 1m", "bodyHTML": "<p dir=\"auto\">I think we can use <code>Duration</code> to support any type of interval like <code>5s</code> <code>1m</code></p>", "author": "anuraaga", "createdAt": "2020-04-04T04:07:14Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "originalCommit": "781d24328f448baf8f340680050b7d2d81860eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTY3Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425677", "bodyText": "lets not. seconds is important. if we allow other units, it will invalidate some things, like what is reasonable (ex millis is not)", "author": "codefromthecrypt", "createdAt": "2020-04-04T04:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTc4MA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425780", "bodyText": "when this switched to not use poll events, a tradeoff to using old school i/o was to not spin, and seconds gives us that. I know there are a lot of comments so easy to get lost in them", "author": "codefromthecrypt", "createdAt": "2020-04-04T04:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMTYzNA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403431634", "bodyText": "Makes sense thanks for the context.", "author": "anuraaga", "createdAt": "2020-04-04T06:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzNDA1NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403434055", "body": "```suggestion\r\n * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;&lt;</span>em<span class=\"pl-k\">&gt;</span><span class=\"pl-c1\">NOTE</span><span class=\"pl-k\">:</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>em<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">This</span> implementation <span class=\"x x-first\">currently uses blocking </span><span class=\"pl-smi x\">I</span><span class=\"pl-k x\">/</span><span class=\"pl-smi x\">O</span><span class=\"x x-last\"> loop without poll events</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;&lt;</span>em<span class=\"pl-k\">&gt;</span><span class=\"pl-c1\">NOTE</span><span class=\"pl-k\">:</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>em<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">This</span> implementation <span class=\"x x-first\">loops instead of using {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi\"><span class=\"x\">java.nio.file</span><span class=\"pl-k x\">.</span><span class=\"x\">WatchService</span></span><span class=\"x x-last\">}</span><span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-04T06:44:02Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "originalCommit": "781d24328f448baf8f340680050b7d2d81860eb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex a4bed31af..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -13,67 +13,63 @@\n  */\n package zipkin2.server.internal.elasticsearch;\n \n-import com.google.common.util.concurrent.RateLimiter;\n-import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.Properties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.scheduling.annotation.Scheduled;\n+import zipkin2.internal.Nullable;\n \n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n-import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME;\n \n /**\n  * Loads username/password from credentials file.\n  *\n- * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n  * This means that spans will drop and api failures will occur for any time remaining in the refresh\n  * interval. A future version can tighten this by also using poll events.\n  */\n-class DynamicCredentialsFileLoader {\n+class DynamicCredentialsFileLoader implements Runnable {\n   static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n-  static final String CREDENTIALS_REFRESH_INTERVAL =\n-    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n \n   private final String credentialsFile;\n \n   private final BasicCredentials basicCredentials;\n \n-  // Log an exception every 10 seconds.\n-  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n-\n   public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n     String credentialsFile) {\n     this.basicCredentials = basicCredentials;\n     this.credentialsFile = credentialsFile;\n   }\n \n-  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")\n-  void load() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.getName().endsWith(\".properties\")) {\n-        throw new FileNotFoundException(\"The file does not exist or not end with '.properties'\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      if (rateLimiter.tryAcquire()) {\n-        LOGGER.error(\"Load credentials file error\", e);\n-      }\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"oid": "828d7890476b118051b4894f7c6711b006a43d53", "url": "https://github.com/openzipkin/zipkin/commit/828d7890476b118051b4894f7c6711b006a43d53", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "committedDate": "2020-04-04T06:44:08Z", "type": "commit"}, {"oid": "85b9dcb421e9b463c990981250450146d398ca01", "url": "https://github.com/openzipkin/zipkin/commit/85b9dcb421e9b463c990981250450146d398ca01", "message": "Drop \".properties\" suffix restriction.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-06T03:06:39Z", "type": "commit"}, {"oid": "6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "url": "https://github.com/openzipkin/zipkin/commit/6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "message": "Update description of ES_CREDENTIALS_FILE\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-06T03:22:49Z", "type": "commit"}, {"oid": "6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "url": "https://github.com/openzipkin/zipkin/commit/6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "message": "Update description of ES_CREDENTIALS_FILE\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-06T03:22:49Z", "type": "forcePushed"}, {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d", "url": "https://github.com/openzipkin/zipkin/commit/9ccce292465f3a3453a88de077c007b60b5a8f3d", "message": "More nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-06T14:55:36Z", "type": "commit"}, {"oid": "d40c1ef56126b8b1d6b6356265b49cfe182f4ce3", "url": "https://github.com/openzipkin/zipkin/commit/d40c1ef56126b8b1d6b6356265b49cfe182f4ce3", "message": "Remove java version plugin\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-06T15:06:40Z", "type": "commit"}, {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38", "url": "https://github.com/openzipkin/zipkin/commit/5f597b496191dea0f0f807c366a6c9db02626f38", "message": "add Adrian's note about maybe switching to a single thread scheduled executor later.", "committedDate": "2020-04-06T17:36:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404546748", "body": "this is a surprising hack. please change the place where it is used instead as it doesn't make sense for a property to be manipulated like this. The scheduled expression might accept seconds expression like `s`.", "bodyText": "this is a surprising hack. please change the place where it is used instead as it doesn't make sense for a property to be manipulated like this. The scheduled expression might accept seconds expression like s.", "bodyHTML": "<p dir=\"auto\">this is a surprising hack. please change the place where it is used instead as it doesn't make sense for a property to be manipulated like this. The scheduled expression might accept seconds expression like <code>s</code>.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-07T05:38:10Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert seconds to milliseconds\n+    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;", "originalCommit": "5f597b496191dea0f0f807c366a6c9db02626f38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0NzIwMQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404547201", "bodyText": "I'm sure someone will very soon undo the use of spring scheduling anyway for a normal executor which is simpler and requires no hacks. I don't like adding tech debt especially when converting to the ideal case only takes a few minutes.", "author": "codefromthecrypt", "createdAt": "2020-04-07T05:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMDgwMQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404810801", "bodyText": "switch to a ScheduledExecutorService which can be shut down by Spring context.", "author": "hanahmily", "createdAt": "2020-04-07T13:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 758a65288..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -276,8 +276,7 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   public void setCredentialsRefreshInterval(\n     Integer credentialsRefreshInterval) {\n-    // Convert seconds to milliseconds\n-    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;\n+    this.credentialsRefreshInterval = credentialsRefreshInterval;\n   }\n \n   public HttpLogging getHttpLogging() {\n", "next_change": null}]}}, {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "url": "https://github.com/openzipkin/zipkin/commit/9e59bed6e9295d412646981dfa1fbee693fcebf9", "message": "Replace Spring @Scheduled with a simple ScheduledExecutorService\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-07T13:28:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDkwMQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405184901", "body": "remove the _PROP suffixes as they are inconsistent.", "bodyText": "remove the _PROP suffixes as they are inconsistent.", "bodyHTML": "<p dir=\"auto\">remove the _PROP suffixes as they are inconsistent.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:09:33Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -48,12 +52,18 @@\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNDczMA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405314730", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-08T07:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex e5a3ec98e..5bf3ac933 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -58,9 +59,9 @@ import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStoragePr\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n-  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n-  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n-  static final String CREDENTIALS_FILE_PROP =\n+  static final String USERNAME = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE =\n     \"zipkin.storage.elasticsearch.credentials-file\";\n   static final String CREDENTIALS_REFRESH_INTERVAL =\n     \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTA2OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405185069", "body": "failing at startup will help people figure out initialization problems. The logic I wrote above should be fine\r\nas if the sophistication of a dynamic file loader is file is used, it would be dumb to have an empty password :) calling `loader.updateCredentialsFromProperties()` once before scheduling will catch\r\nall these things.\r\n\r\n```\r\n      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\r\n       // throw and crashes the server on any setup error.\r\n      credentialsLoader.updateCredentialsFromProperties();\r\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);\r\n```", "bodyText": "failing at startup will help people figure out initialization problems. The logic I wrote above should be fine\nas if the sophistication of a dynamic file loader is file is used, it would be dumb to have an empty password :) calling loader.updateCredentialsFromProperties() once before scheduling will catch\nall these things.\n      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n       // throw and crashes the server on any setup error.\n      credentialsLoader.updateCredentialsFromProperties();\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);", "bodyHTML": "<p dir=\"auto\">failing at startup will help people figure out initialization problems. The logic I wrote above should be fine<br>\nas if the sophistication of a dynamic file loader is file is used, it would be dumb to have an empty password :) calling <code>loader.updateCredentialsFromProperties()</code> once before scheduling will catch<br>\nall these things.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n       // throw and crashes the server on any setup error.\n      credentialsLoader.updateCredentialsFromProperties();\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);\"><pre><code>      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n       // throw and crashes the server on any setup error.\n      credentialsLoader.updateCredentialsFromProperties();\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);\n</code></pre></div>", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:10:04Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +148,28 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean(destroyMethod=\"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE_PROP + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    ses.scheduleAtFixedRate(new DynamicCredentialsFileLoader(basicCredentials, credentialsFile),", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNDg0Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405314847", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-04-08T07:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex e5a3ec98e..5bf3ac933 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -156,16 +157,19 @@ public class ZipkinElasticsearchStorageConfiguration {\n     return new BasicCredentials(es.getUsername(), es.getPassword());\n   }\n \n-  @Bean(destroyMethod=\"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  @Bean(destroyMethod = \"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n   ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n-    @Value(\"${\" + CREDENTIALS_FILE_PROP + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_FILE + \"}\") String credentialsFile,\n     @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n-    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n     ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n       new ThreadFactoryBuilder()\n         .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n         .build());\n-    ses.scheduleAtFixedRate(new DynamicCredentialsFileLoader(basicCredentials, credentialsFile),\n+    DynamicCredentialsFileLoader credentialsFileLoader =\n+      new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n+    credentialsFileLoader.updateCredentialsFromProperties();\n+    ses.scheduleAtFixedRate(credentialsFileLoader,\n       0, credentialsRefreshInterval, TimeUnit.SECONDS);\n     return ses;\n   }\n", "next_change": {"commit": "377a2b305b62453be755f9cb998c6ae4435595b7", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex 5bf3ac933..b3b82c4e4 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -163,9 +163,7 @@ public class ZipkinElasticsearchStorageConfiguration {\n     @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n     @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException {\n     ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n-      new ThreadFactoryBuilder()\n-        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n-        .build());\n+      new NamedThreadFactory(\"zipkin-load-es-credentials\"));\n     DynamicCredentialsFileLoader credentialsFileLoader =\n       new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n     credentialsFileLoader.updateCredentialsFromProperties();\n", "next_change": {"commit": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\nindex b3b82c4e4..13d66bbb1 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java\n", "chunk": "@@ -167,8 +169,9 @@ public class ZipkinElasticsearchStorageConfiguration {\n     DynamicCredentialsFileLoader credentialsFileLoader =\n       new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n     credentialsFileLoader.updateCredentialsFromProperties();\n-    ses.scheduleAtFixedRate(credentialsFileLoader,\n-      0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    ScheduledFuture<?> future = ses.scheduleAtFixedRate(credentialsFileLoader,\n+        0, credentialsRefreshInterval, TimeUnit.SECONDS);\n+    if (future.isDone()) throw new RuntimeException(\"credential refresh thread didn't start\");\n     return ses;\n   }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDczOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405190738", "body": "this is ok, but better to make a src/test/resources file instead as it is not subject to oddness in windows or other container constraints.\r\n\r\nEx. successCase\r\n```java\r\n\"zipkin.storage.elasticsearch.credentials-file=\"+pathOfResource(\"/valid-es-credentials.properties\")\r\n--snip--\r\n\r\nString pathOfResource(String resource) {\r\n  File file = new File(getClass().getClassLoader().getResource(resourceName).getFile());\r\n  return file.getAbsolutePath();\r\n}\r\n```\r\n\r\nTesting bad path is easy as you just use a path that doesnt' exist in ./src/test/resources\r\n\r\nIf you want to test misspelled property names, you only have one more test resource file to make.", "bodyText": "this is ok, but better to make a src/test/resources file instead as it is not subject to oddness in windows or other container constraints.\nEx. successCase\n\"zipkin.storage.elasticsearch.credentials-file=\"+pathOfResource(\"/valid-es-credentials.properties\")\n--snip--\n\nString pathOfResource(String resource) {\n  File file = new File(getClass().getClassLoader().getResource(resourceName).getFile());\n  return file.getAbsolutePath();\n}\nTesting bad path is easy as you just use a path that doesnt' exist in ./src/test/resources\nIf you want to test misspelled property names, you only have one more test resource file to make.", "bodyHTML": "<p dir=\"auto\">this is ok, but better to make a src/test/resources file instead as it is not subject to oddness in windows or other container constraints.</p>\n<p dir=\"auto\">Ex. successCase</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;zipkin.storage.elasticsearch.credentials-file=&quot;+pathOfResource(&quot;/valid-es-credentials.properties&quot;)\n--snip--\n\nString pathOfResource(String resource) {\n  File file = new File(getClass().getClassLoader().getResource(resourceName).getFile());\n  return file.getAbsolutePath();\n}\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zipkin.storage.elasticsearch.credentials-file=<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">+</span>pathOfResource(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/valid-es-credentials.properties<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">--</span>snip<span class=\"pl-k\">--</span>\n\n<span class=\"pl-smi\">String</span> pathOfResource(<span class=\"pl-smi\">String</span> resource) {\n  <span class=\"pl-smi\">File</span> file <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(getClass()<span class=\"pl-k\">.</span>getClassLoader()<span class=\"pl-k\">.</span>getResource(resourceName)<span class=\"pl-k\">.</span>getFile());\n  <span class=\"pl-k\">return</span> file<span class=\"pl-k\">.</span>getAbsolutePath();\n}</pre></div>\n<p dir=\"auto\">Testing bad path is easy as you just use a path that doesnt' exist in ./src/test/resources</p>\n<p dir=\"auto\">If you want to test misspelled property names, you only have one more test resource file to make.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:29:00Z", "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server\", \"credentials\");", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNjY4OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405316688", "bodyText": "I have added two files, es-credentials and es-credentials. They are loaded in ZipkinElasticsearchStorageConfigurationTest and ITElasticsearchDynamicCredentials respectively. We can't share a single file between them because the later one will change the content of the file, which may cause the first test failed.", "author": "hanahmily", "createdAt": "2020-04-08T07:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDczOA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\nindex 7ec8dd4b5..b68f8a9b1 100644\n--- a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n+++ b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n", "chunk": "@@ -62,21 +56,15 @@ class ITElasticsearchDynamicCredentials {\n \n   AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n   ElasticsearchStorage storage;\n-  File credentialsFile;\n+  String credentialsFile;\n \n   @BeforeEach void init() throws IOException {\n-    credentialsFile = File.createTempFile(\"zipkin-server\", \"credentials\");\n-    Properties props = new Properties();\n-    props.put(USERNAME_PROP, \"foo\");\n-    props.put(PASSWORD_PROP, \"bar\");\n-    try (FileOutputStream os = new FileOutputStream(credentialsFile)) {\n-      props.store(os, \"\");\n-    }\n+    credentialsFile = pathOfResource(\"es-credentials\");\n     TestPropertyValues.of(\n       \"spring.config.name=zipkin-server\",\n       \"zipkin.storage.type:elasticsearch\",\n       \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n-      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile.getAbsolutePath(),\n+      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile,\n       \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",\n       \"zipkin.storage.elasticsearch.ssl.key-store=classpath:keystore.jks\",\n       \"zipkin.storage.elasticsearch.ssl.key-store-password=password\",\n", "next_change": {"commit": "10c478ba049696e9ef32e8400a3d7209e3f31c5a", "changed_code": [{"header": "diff --git a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\nindex b68f8a9b1..0d4b00efe 100644\n--- a/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n+++ b/zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java\n", "chunk": "@@ -58,12 +56,13 @@ class ITElasticsearchDynamicCredentials {\n   ElasticsearchStorage storage;\n   String credentialsFile;\n \n-  @BeforeEach void init() throws IOException {\n+  @BeforeEach void init() {\n     credentialsFile = pathOfResource(\"es-credentials\");\n     TestPropertyValues.of(\n       \"spring.config.name=zipkin-server\",\n-      \"zipkin.storage.type:elasticsearch\",\n-      \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n+      \"zipkin.storage.type=elasticsearch\",\n+      \"zipkin.storage.elasticsearch.ensure-templates=false\",\n+      \"zipkin.storage.elasticsearch.hosts=https://localhost:\" + server.httpsPort(),\n       \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile,\n       \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",\n       \"zipkin.storage.elasticsearch.ssl.key-store=classpath:keystore.jks\",\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjkxOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192918", "body": "```suggestion\r\n *   credentials-refresh-interval: 1\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5\n          \n          \n            \n             *   credentials-refresh-interval: 1", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span>   credentials<span class=\"pl-k\">-</span>refresh<span class=\"pl-k\">-</span>interval<span class=\"pl-k\">:</span> <span class=\"pl-c1 x x-first x-last\">5</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span>   credentials<span class=\"pl-k\">-</span>refresh<span class=\"pl-k\">-</span>interval<span class=\"pl-k\">:</span> <span class=\"pl-c1 x x-first x-last\">1</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:37:15Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex a8445fc57..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -36,7 +36,7 @@ import zipkin2.elasticsearch.ElasticsearchStorage.LazyHttpClient;\n  *   username: username\n  *   password: password\n  *   credentials-file: credentialsFile\n- *   credentials-refresh-interval: 5\n+ *   credentials-refresh-interval: 1\n  *   http-logging: HEADERS\n  *   ssl:\n  *     key-store: keystore.p12\n", "next_change": {"commit": "10c478ba049696e9ef32e8400a3d7209e3f31c5a", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex fc4dd6d49..893b2d1ca 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -33,6 +33,7 @@ import zipkin2.elasticsearch.ElasticsearchStorage.LazyHttpClient;\n  *   date-separator: -\n  *   index-shards: 5\n  *   index-replicas: 1\n+ *   ensure-templates: true\n  *   username: username\n  *   password: password\n  *   credentials-file: credentialsFile\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjk2Ng==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192966", "body": "```suggestion\r\n  private Integer credentialsRefreshInterval = 1;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 1;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Integer</span> credentialsRefreshInterval <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Integer</span> credentialsRefreshInterval <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">1</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:37:25Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval (in seconds) */\n+  private Integer credentialsRefreshInterval = 5;", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex a8445fc57..fc4dd6d49 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -174,7 +174,7 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n    */\n   private String credentialsFile;\n   /** Credentials refresh interval (in seconds) */\n-  private Integer credentialsRefreshInterval = 5;\n+  private Integer credentialsRefreshInterval = 1;\n   /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n   /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n", "next_change": {"commit": "bc17082781504ed4910d52f44c80b2d22727b4f6", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex fc4dd6d49..588cc91d0 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -175,9 +201,9 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n   private String credentialsFile;\n   /** Credentials refresh interval (in seconds) */\n   private Integer credentialsRefreshInterval = 1;\n-  /** When set, controls the volume of HTTP logging of the Elasticsearch Api. */\n+  /** When set, controls the volume of HTTP logging of the Elasticsearch API. */\n   private HttpLogging httpLogging = HttpLogging.NONE;\n-  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch Api requests. */\n+  /** Connect, read and write socket timeouts (in milliseconds) for Elasticsearch API requests. */\n   private Integer timeout = 10_000;\n   /** Overrides ssl configuration relating to the Elasticsearch client connection. */\n   private Ssl ssl = new Ssl();\n", "next_change": {"commit": "346ac51601043b6299e9e856f7a070aae8f4b65e", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 588cc91d0..5685b920b 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n", "chunk": "@@ -212,6 +213,8 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n+  private Integer templatePriority;\n+\n   public String getPipeline() {\n     return pipeline;\n   }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405193914", "body": "You've done a ton of feedback work, so I've hopefully saved you some time on some\r\nerror handling. For example, the first startup should identify common problems like\r\nmisspelled property names or non-existence of a file.\r\n\r\nCalling `updateCredentialsFromProperties()` once at startup will do this.\r\n\r\nNote: `FileInputStream` constructor already checks if the file is valid so you don't\r\nneed to redo that, unless I'm missing something...\r\n\r\n```java\r\n  @Override public void run() {\r\n    try {\r\n      updateCredentialsFromProperties();\r\n    } catch (Exception e) {\r\n      LOGGER.error(\"Error loading elasticsearch credentials\", e);\r\n    }\r\n  }\r\n\r\n  void updateCredentialsFromProperties() throws IOException {\r\n    try (FileInputStream is = new FileInputStream(credentialsFile)) {\r\n      properties.load(is);\r\n    }\r\n    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME_PROP);\r\n    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD_PROP);\r\n    basicCredentials.updateCredentials(username, password);\r\n  }\r\n\r\n  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\r\n    String value = properties.getProperty(properties);\r\n    if (value == null) {\r\n      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\r\n    }\r\n    value = value.trim();\r\n    if (\"\".equals(value)) {\r\n      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\r\n    }\r\n    return value;\r\n  }\r\n```", "bodyText": "You've done a ton of feedback work, so I've hopefully saved you some time on some\nerror handling. For example, the first startup should identify common problems like\nmisspelled property names or non-existence of a file.\nCalling updateCredentialsFromProperties() once at startup will do this.\nNote: FileInputStream constructor already checks if the file is valid so you don't\nneed to redo that, unless I'm missing something...\n  @Override public void run() {\n    try {\n      updateCredentialsFromProperties();\n    } catch (Exception e) {\n      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n    }\n  }\n\n  void updateCredentialsFromProperties() throws IOException {\n    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n      properties.load(is);\n    }\n    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME_PROP);\n    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD_PROP);\n    basicCredentials.updateCredentials(username, password);\n  }\n\n  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n    String value = properties.getProperty(properties);\n    if (value == null) {\n      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n    }\n    value = value.trim();\n    if (\"\".equals(value)) {\n      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n    }\n    return value;\n  }", "bodyHTML": "<p dir=\"auto\">You've done a ton of feedback work, so I've hopefully saved you some time on some<br>\nerror handling. For example, the first startup should identify common problems like<br>\nmisspelled property names or non-existence of a file.</p>\n<p dir=\"auto\">Calling <code>updateCredentialsFromProperties()</code> once at startup will do this.</p>\n<p dir=\"auto\">Note: <code>FileInputStream</code> constructor already checks if the file is valid so you don't<br>\nneed to redo that, unless I'm missing something...</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Override public void run() {\n    try {\n      updateCredentialsFromProperties();\n    } catch (Exception e) {\n      LOGGER.error(&quot;Error loading elasticsearch credentials&quot;, e);\n    }\n  }\n\n  void updateCredentialsFromProperties() throws IOException {\n    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n      properties.load(is);\n    }\n    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME_PROP);\n    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD_PROP);\n    basicCredentials.updateCredentials(username, password);\n  }\n\n  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n    String value = properties.getProperty(properties);\n    if (value == null) {\n      throw new IllegalStateException(&quot;no &quot; + name + &quot; property in &quot; + fileName);\n    }\n    value = value.trim();\n    if (&quot;&quot;.equals(value)) {\n      throw new IllegalStateException(&quot;empty &quot; + name + &quot; property in &quot; + fileName);\n    }\n    return value;\n  }\"><pre>  <span class=\"pl-k\">@Override</span> <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> run() {\n    <span class=\"pl-k\">try</span> {\n      updateCredentialsFromProperties();\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> e) {\n      <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error loading elasticsearch credentials<span class=\"pl-pds\">\"</span></span>, e);\n    }\n  }\n\n  <span class=\"pl-k\">void</span> updateCredentialsFromProperties() throws <span class=\"pl-smi\">IOException</span> {\n    <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">FileInputStream</span> is <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FileInputStream</span>(credentialsFile)) {\n      properties<span class=\"pl-k\">.</span>load(is);\n    }\n    <span class=\"pl-smi\">String</span> username <span class=\"pl-k\">=</span> ensureNotEmptyOrNull(properties, credentialsFile, <span class=\"pl-c1\">USERNAME_PROP</span>);\n    <span class=\"pl-smi\">String</span> password <span class=\"pl-k\">=</span> ensureNotEmptyOrNull(properties, credentialsFile, <span class=\"pl-c1\">PASSWORD_PROP</span>);\n    basicCredentials<span class=\"pl-k\">.</span>updateCredentials(username, password);\n  }\n\n  <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">String</span> ensureNotEmptyOrNull(<span class=\"pl-smi\">Properties</span> properties, <span class=\"pl-smi\">String</span> fileName, <span class=\"pl-smi\">String</span> name) {\n    <span class=\"pl-smi\">String</span> value <span class=\"pl-k\">=</span> properties<span class=\"pl-k\">.</span>getProperty(properties);\n    <span class=\"pl-k\">if</span> (value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>no <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> property in <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> fileName);\n    }\n    value <span class=\"pl-k\">=</span> value<span class=\"pl-k\">.</span>trim();\n    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>equals(value)) {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>empty <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> property in <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> fileName);\n    }\n    <span class=\"pl-k\">return</span> value;\n  }</pre></div>", "author": "codefromthecrypt", "createdAt": "2020-04-08T00:40:49Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public void run() {\n+    Properties properties = new Properties();\n+    try {\n+      File file = Paths.get(credentialsFile).toFile();", "originalCommit": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzA1OA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405317058", "bodyText": "Thanks for your sketch, and I applied it to the class.", "author": "hanahmily", "createdAt": "2020-04-08T07:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMzYzOA==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405333638", "bodyText": "no probs!", "author": "codefromthecrypt", "createdAt": "2020-04-08T08:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\nindex 8a067683f..68ddbe52a 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java\n", "chunk": "@@ -45,25 +43,33 @@ class DynamicCredentialsFileLoader implements Runnable {\n     this.credentialsFile = credentialsFile;\n   }\n \n-  public void run() {\n-    Properties properties = new Properties();\n+  @Override public void run() {\n     try {\n-      File file = Paths.get(credentialsFile).toFile();\n-      if (!file.exists()) {\n-        throw new FileNotFoundException(\"The file does not exist\");\n-      }\n-      try (FileInputStream is = new FileInputStream(file)) {\n-        properties.load(is);\n-        if (!properties.containsKey(USERNAME_PROP) || !properties.containsKey(PASSWORD_PROP)) {\n-          return;\n-        }\n-        basicCredentials.updateCredentials(\n-          properties.getProperty(USERNAME_PROP),\n-          properties.getProperty(PASSWORD_PROP)\n-        );\n-      }\n+      updateCredentialsFromProperties();\n     } catch (Exception e) {\n-      LOGGER.error(\"Load credentials file error\", e);\n+      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n+    }\n+  }\n+\n+  void updateCredentialsFromProperties() throws IOException {\n+    Properties properties = new Properties();\n+    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n+      properties.load(is);\n+    }\n+    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME);\n+    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD);\n+    basicCredentials.updateCredentials(username, password);\n+  }\n+\n+  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n+    String value = properties.getProperty(name);\n+    if (value == null) {\n+      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n+    }\n+    value = value.trim();\n+    if (\"\".equals(value)) {\n+      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n     }\n+    return value;\n   }\n }\n", "next_change": null}]}}, {"oid": "8f8d2947af22b35472ed855cfcc74b91ef1c2db6", "url": "https://github.com/openzipkin/zipkin/commit/8f8d2947af22b35472ed855cfcc74b91ef1c2db6", "message": "Some improvements:\n * Load file on bean initailization.\n * Pick up resource files for testing instead of temp files.\n * Some nits.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-08T07:26:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNDMxNw==", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404614317", "body": "```suggestion\r\n    if (credentials != null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Objects.nonNull(credentials)) {\n          \n          \n            \n                if (credentials != null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (<span class=\"pl-smi x x-first\">Objects</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">nonNull(</span>credentials<span class=\"x x-first x-last\">)</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (credentials<span class=\"x x-first\"> </span><span class=\"pl-k x\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "anuraaga", "createdAt": "2020-04-07T08:03:39Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,29 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Objects;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n  */\n final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n \n-  final String basicCredentials;\n+  final BasicCredentials basicCredentials;\n \n-  BasicAuthInterceptor(HttpClient client, String username, String password) {\n+  BasicAuthInterceptor(HttpClient client, BasicCredentials basicCredentials) {\n     super(client);\n-    if (username == null) throw new NullPointerException(\"username == null\");\n-    if (password == null) throw new NullPointerException(\"password == null\");\n-    String token = username + ':' + password;\n-    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+    this.basicCredentials = basicCredentials;\n   }\n \n   @Override\n   public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n-    ctx.addAdditionalRequestHeader(HttpHeaderNames.AUTHORIZATION, basicCredentials);\n+    String credentials = basicCredentials.getCredentials();\n+    if (Objects.nonNull(credentials)) {", "originalCommit": "5f597b496191dea0f0f807c366a6c9db02626f38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\nindex 51aaecace..7c6448eb9 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n", "chunk": "@@ -39,7 +39,7 @@ final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n   @Override\n   public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n     String credentials = basicCredentials.getCredentials();\n-    if (Objects.nonNull(credentials)) {\n+    if (credentials != null) {\n       ctx.addAdditionalRequestHeader(HttpHeaderNames.AUTHORIZATION, credentials);\n     }\n     return delegate().execute(ctx, req);\n", "next_change": {"commit": "1845702272992ec430af6dc23a340186b5c9d285", "changed_code": [{"header": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\nindex 7c6448eb9..81e6bf60c 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n", "chunk": "@@ -42,6 +42,6 @@ final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n     if (credentials != null) {\n       ctx.addAdditionalRequestHeader(HttpHeaderNames.AUTHORIZATION, credentials);\n     }\n-    return delegate().execute(ctx, req);\n+    return unwrap().execute(ctx, req);\n   }\n }\n", "next_change": null}]}}]}}, {"oid": "4a1e69886cf5c8d8cb52216bcaf6940c8c6cce39", "url": "https://github.com/openzipkin/zipkin/commit/4a1e69886cf5c8d8cb52216bcaf6940c8c6cce39", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n\nCo-Authored-By: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-04-08T15:24:39Z", "type": "commit"}, {"oid": "1a0cf73e600604c348004353caf4ab8e4b320d2d", "url": "https://github.com/openzipkin/zipkin/commit/1a0cf73e600604c348004353caf4ab8e4b320d2d", "message": "Update zipkin-server/README.md\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-04-08T15:25:34Z", "type": "commit"}, {"oid": "1560dcaeb961a31efb5e56d5af0ee29d6a3323ae", "url": "https://github.com/openzipkin/zipkin/commit/1560dcaeb961a31efb5e56d5af0ee29d6a3323ae", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-04-08T15:25:59Z", "type": "commit"}, {"oid": "8a572a1ad269af5377829cee305b58d16110b34c", "url": "https://github.com/openzipkin/zipkin/commit/8a572a1ad269af5377829cee305b58d16110b34c", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-04-08T15:26:24Z", "type": "commit"}, {"oid": "4ba3f90a4e282b6f0104946bb51ebeecb7c46a25", "url": "https://github.com/openzipkin/zipkin/commit/4ba3f90a4e282b6f0104946bb51ebeecb7c46a25", "message": "Polish test cases\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-04-11T23:47:10Z", "type": "commit"}]}