{"pr_number": 10718, "pr_title": "Change the default coalescing behavior", "pr_author": "yuzhu", "pr_createdAt": "2020-01-09T19:17:07Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10718", "merge_commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "timeline": [{"oid": "820ed449c0b85517e3974b66632a5ed248b0d023", "url": "https://github.com/Alluxio/alluxio/commit/820ed449c0b85517e3974b66632a5ed248b0d023", "message": "add a test for default transform jobs", "committedDate": "2020-01-08T22:37:35Z", "type": "commit"}, {"oid": "ff86ca08d4459d8a14d1df89380a3aff3f8c60e8", "url": "https://github.com/Alluxio/alluxio/commit/ff86ca08d4459d8a14d1df89380a3aff3f8c60e8", "message": "Add logic to dynamically compute the number of files we should coalesce", "committedDate": "2020-01-09T19:08:47Z", "type": "commit"}, {"oid": "56611af19bd869a36cb6791fcf3c4cd96ebc8ef4", "url": "https://github.com/Alluxio/alluxio/commit/56611af19bd869a36cb6791fcf3c4cd96ebc8ef4", "message": "checkstyle fix", "committedDate": "2020-01-09T19:15:32Z", "type": "commit"}, {"oid": "136794df1f17e7da23d323adf666a84fc0bc6688", "url": "https://github.com/Alluxio/alluxio/commit/136794df1f17e7da23d323adf666a84fc0bc6688", "message": "fix tests", "committedDate": "2020-01-09T19:37:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365241334", "body": "I feel like the file size should also be a config parameter.", "bodyText": "I feel like the file size should also be a config parameter.", "bodyHTML": "<p dir=\"auto\">I feel like the file size should also be a config parameter.</p>", "author": "gpang", "createdAt": "2020-01-10T13:48:56Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +96,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "originalCommit": "136794df1f17e7da23d323adf666a84fc0bc6688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjUyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365362525", "bodyText": "I am not sure which file size you are referring to here? the file size can not be determined until we read the result of listStatus right? that's why it can not be a config parameter?", "author": "yuzhu", "createdAt": "2020-01-10T18:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MDQxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365380411", "bodyText": "What I meant was, when we do something like averageSize < FileUtils.ONE_GB, we should use the file size as a config parameter.", "author": "gpang", "createdAt": "2020-01-10T18:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f388a5363ff8484047468bd698abdd380721662c", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 1f6ed8ed8e..d61cbe5116 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -106,7 +105,7 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int numOfFiles = config.getNumFiles();\n     if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size());\n+      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n     }\n     int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n     // Files to be compacted are grouped into different groups,\n", "next_change": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": {"commit": "7ed270f52294441dc88985dc7efa63223e37edc7", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 2954178e8b..a93dcffaa4 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -122,9 +125,10 @@ public final class CompactDefinition\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file will not exceed the max group size\n+      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n       if (group.isEmpty() || groupIndex == numFiles - 1\n-          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n+          <= Math.abs(currentGroupSize - groupMaxSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "9096f1726980e9df0676deed30c403941e53ffa0", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex a93dcffaa4..41bdffbdfd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -106,29 +89,31 @@ public final class CompactDefinition\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numFiles = config.getNumFiles();\n-    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numFiles = calcNumOfFiles(files.size(), Math.round(totalFileSize / files.size()), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    long groupMaxSize = Math.round(totalFileSize / numFiles);\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    // We keep adding files to the group, until it exceeds the newFileSize.\n+    // We keep adding files to the group, until adding more files makes it too big.\n     ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    int groupIndex = 0; // Number of groups already generated\n+    // Number of groups already generated\n+    int groupIndex = 0;\n     long currentGroupSize = 0;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n-      if (group.isEmpty() || groupIndex == numFiles - 1\n-          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n-          <= Math.abs(currentGroupSize - groupMaxSize))) {\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +105,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 1f6ed8ed8e..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -96,30 +86,52 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"oid": "f388a5363ff8484047468bd698abdd380721662c", "url": "https://github.com/Alluxio/alluxio/commit/f388a5363ff8484047468bd698abdd380721662c", "message": "refactor file size to be an option", "committedDate": "2020-01-14T22:54:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5NjgyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367496820", "body": "Rename this to `hive.file.size`, since this is relevant to the hive write type.", "bodyText": "Rename this to hive.file.size, since this is relevant to the hive write type.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>hive.file.size</code>, since this is relevant to the hive write type.</p>", "author": "gpang", "createdAt": "2020-01-16T15:51:50Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"file.size\";", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 0d9f1bee16..485d501f77 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -28,7 +28,7 @@ import java.util.Map;\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"file.size\";\n+  private static final String FILE_SIZE = \"hive.file.size\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n   private static final int DEFAULT_NUM_FILES = 1;\n \n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..f75396437e 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 0d9f1bee16..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 53%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 3162f716ff..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -18,24 +18,20 @@ import alluxio.table.common.Layout;\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n- * The definition of the write action.\n+ * The definition of the compact action.\n  */\n-public class WriteAction implements TransformAction {\n-  private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+public class CompactAction implements TransformAction {\n+\n+  private static final String NUM_FILES_OPTION = \"file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n-  /**\n-   * Layout type, for example \"hive\".\n-   */\n-  private final String mLayoutType;\n   /**\n    * Expected number of files after compaction.\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5OTc5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367499791", "body": "In the future, we should convert this to a map of parameters.", "bodyText": "In the future, we should convert this to a map of parameters.", "bodyHTML": "<p dir=\"auto\">In the future, we should convert this to a map of parameters.</p>", "author": "gpang", "createdAt": "2020-01-16T15:56:15Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -73,6 +84,6 @@ public JobConfig generateJobConfig(Layout base, Layout transformed) {\n         TransformActionUtils.generatePartitionInfo(base);\n     return new CompactConfig(basePartitionInfo, base.getLocation().toString(),\n         transformed.getLocation().toString(),\n-        mLayoutType, mNumFiles);\n+        mLayoutType, mNumFiles, mFileSize);", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 51%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 0d9f1bee16..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -48,42 +44,54 @@ public class WriteAction implements TransformAction {\n   /**\n    * Factory to create an instance.\n    */\n-  public static class WriteActionFactory implements TransformActionFactory {\n+  public static class CompactActionFactory implements TransformActionFactory {\n+\n+    @Override\n+    public int getOrder() {\n+      return 0;\n+    }\n+\n     @Override\n-    public String getName() {\n-      return NAME;\n+    public TransformAction create(Properties properties) {\n+      final String numFilesString = properties.getProperty(NUM_FILES_OPTION);\n+\n+      final String fileSizeString = properties.getProperty(FILE_SIZE_OPTION);\n+\n+      if (StringUtils.isEmpty(numFilesString) && StringUtils.isEmpty(fileSizeString)) {\n+        return null;\n+      }\n+\n+      int numFiles = DEFAULT_NUM_FILES;\n+      if (!StringUtils.isEmpty(numFilesString)) {\n+        numFiles = Integer.parseInt(numFilesString);\n+      }\n+\n+      long fileSize = DEFAULT_FILE_SIZE;\n+      if (!StringUtils.isEmpty(fileSizeString)) {\n+        fileSize = Long.parseLong(fileSizeString);\n+      }\n+\n+      Preconditions.checkArgument(numFiles > 0,\n+          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES.getMessage());\n+      return new CompactAction(numFiles, fileSize);\n     }\n \n     @Override\n-    public TransformAction create(String definition, List<String> args,\n-        Map<String, String> options) {\n-      Preconditions.checkArgument(args.size() == 1,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-      String type = args.get(0);\n-      int numFiles = options.containsKey(NUM_FILES_OPTION)\n-          ? Integer.parseInt(options.get(NUM_FILES_OPTION))\n-          : DEFAULT_NUM_FILES;\n-      long fileSize = options.containsKey(FILE_SIZE)\n-          ? Long.parseLong(options.get(FILE_SIZE))\n-          : DEFAULT_FILE_SIZE;\n-      Preconditions.checkArgument(numFiles >= 0,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES);\n-      return new WriteAction(type, numFiles, fileSize);\n+    public String toString() {\n+      return \"CompactActionFactory\";\n     }\n   }\n \n-  private WriteAction(String type, int numFiles, long fileSize) {\n-    mLayoutType = type;\n+  private CompactAction(int numFiles, long fileSize) {\n     mNumFiles = numFiles;\n     mFileSize = fileSize;\n   }\n \n   @Override\n-  public JobConfig generateJobConfig(Layout base, Layout transformed) {\n+  public JobConfig generateJobConfig(Layout base, Layout transformed, boolean deleteSrc) {\n     alluxio.job.plan.transform.PartitionInfo basePartitionInfo =\n         TransformActionUtils.generatePartitionInfo(base);\n     return new CompactConfig(basePartitionInfo, base.getLocation().toString(),\n-        transformed.getLocation().toString(),\n-        mLayoutType, mNumFiles, mFileSize);\n+        transformed.getLocation().toString(), mNumFiles, mFileSize);\n   }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMjYxMg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367512612", "body": "Maybe rename to \"EMPTY_DEFINITION\"?", "bodyText": "Maybe rename to \"EMPTY_DEFINITION\"?", "bodyHTML": "<p dir=\"auto\">Maybe rename to \"EMPTY_DEFINITION\"?</p>", "author": "gpang", "createdAt": "2020-01-16T16:17:05Z", "path": "table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java", "diffHunk": "@@ -81,6 +81,7 @@\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n+  private static final String DEFINITION_DEFAULT = \"\";", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\nindex 3118022b36..641882d928 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n", "chunk": "@@ -81,7 +81,7 @@ public class TransformManagerTest {\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n-  private static final String DEFINITION_DEFAULT = \"\";\n+  private static final String EMPTY_DEFINITION = \"\";\n   private static final String DEFINITION1 = \"write(hive).option(hive.num.files, 1)\";\n   private static final String DEFINITION2 = \"write(hive).option(hive.num.files, 2)\";\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\nindex 3118022b36..62420e8426 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n", "chunk": "@@ -81,7 +81,7 @@ public class TransformManagerTest {\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n-  private static final String DEFINITION_DEFAULT = \"\";\n+  private static final String EMPTY_DEFINITION = \"\";\n   private static final String DEFINITION1 = \"write(hive).option(hive.num.files, 1)\";\n   private static final String DEFINITION2 = \"write(hive).option(hive.num.files, 2)\";\n \n", "next_change": {"commit": "7866ccb403d022e7611ab420a47d50cf9672628c", "changed_code": [{"header": "diff --git a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\nindex 62420e8426..b8c6c7dea6 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n", "chunk": "@@ -82,8 +82,8 @@ public class TransformManagerTest {\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n   private static final String EMPTY_DEFINITION = \"\";\n-  private static final String DEFINITION1 = \"write(hive).option(hive.num.files, 1)\";\n-  private static final String DEFINITION2 = \"write(hive).option(hive.num.files, 2)\";\n+  private static final String DEFINITION1 = \"write(hive).option(hive.file.count.max, 1)\";\n+  private static final String DEFINITION2 = \"write(hive).option(hive.file.count.max, 2)\";\n \n   private JournalSystem mJournalSystem;\n   private TableMaster mTableMaster;\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\nindex b8c6c7dea6..f17b388816 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n", "chunk": "@@ -82,8 +82,8 @@ public class TransformManagerTest {\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n   private static final String EMPTY_DEFINITION = \"\";\n-  private static final String DEFINITION1 = \"write(hive).option(hive.file.count.max, 1)\";\n-  private static final String DEFINITION2 = \"write(hive).option(hive.file.count.max, 2)\";\n+  private static final String DEFINITION1 = \"file.count.max=1\";\n+  private static final String DEFINITION2 = \"file.count.max=2\";\n \n   private JournalSystem mJournalSystem;\n   private TableMaster mTableMaster;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7866ccb403d022e7611ab420a47d50cf9672628c", "committedDate": "2020-02-07 09:30:33 -0800", "message": "Update the transformation options in tests"}, {"oid": "c3e5fd23cdfb670e978df6b3037d31a1f9faedb3", "committedDate": "2020-02-12 05:44:13 -0800", "message": "Add integration test for transform journaling"}, {"oid": "e6751bc1600b8a0be0884549071e1da8240eb984", "committedDate": "2020-02-13 08:19:41 -0800", "message": "Improve error handling for attach db and sync"}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}, {"oid": "19369b5bc3d7d09138afa09803afc005c7fa2e35", "committedDate": "2020-08-20 10:11:42 -0700", "message": "Fix flaky table test"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}, {"oid": "3c0275f4b81af80f98c8e0f1043bab8c8803f07c", "committedDate": "2022-01-13 16:47:51 -0800", "message": "Replace deprecated Matchers to ArgumentMatchers"}, {"oid": "615f89d6d79bdca2f3a302dff4f5f962336038ad", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce enum PropertyKey type"}, {"oid": "7c7d49f72332779ce71d3009ec7494c24a9c76c4", "committedDate": "2022-06-02 15:43:14 -0700", "message": "Move all static configuration logic into one place"}, {"oid": "64648e7db5789b6ca58751c34771e651b373fd71", "committedDate": "2022-07-29 14:02:11 -0700", "message": "Enforce import order"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMzM2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367513369", "body": "```suggestion\r\n  public void dynamicNumFiles() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void DynamicNumFiles() {\n          \n          \n            \n              public void dynamicNumFiles() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">DynamicNumFiles</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">dynamicNumFiles</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gpang", "createdAt": "2020-01-16T16:18:21Z", "path": "table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java", "diffHunk": "@@ -51,10 +51,23 @@ public void negativeNumFiles() {\n   }\n \n   @Test\n-  public void zeroNumFiles() {\n-    mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES.toString());\n-    TransformAction.Parser.parse(\"write(hive).option(hive.num.files, 0)\");\n+  public void DynamicNumFiles() {", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 2ea4785938..3ef1552c35 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -51,7 +51,7 @@ public class WriteActionTest {\n   }\n \n   @Test\n-  public void DynamicNumFiles() {\n+  public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n         \"write(hive).option(hive.num.files, 0).option(file.size, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n", "next_change": {"commit": "5a705f516eef76d7773bc8b8407db5dbd7ceb359", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 3ef1552c35..541355be56 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class WriteActionTest {\n   @Test\n   public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.num.files, 0).option(file.size, 1024)\");\n+        \"write(hive).option(hive.num.files, 0).option(hive.file.size, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n     WriteAction writeAction = (WriteAction) action;\n \n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 541355be56..525491ce77 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class WriteActionTest {\n   @Test\n   public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.num.files, 0).option(hive.file.size, 1024)\");\n+        \"write(hive).option(hive.file.maxcount, 1000).option(hive.file.minsize, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n     WriteAction writeAction = (WriteAction) action;\n \n", "next_change": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 525491ce77..64cdb083fb 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class WriteActionTest {\n   @Test\n   public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.file.maxcount, 1000).option(hive.file.minsize, 1024)\");\n+        \"write(hive).option(hive.file.maxcount, 1000).option(hive.file.size.min, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n     WriteAction writeAction = (WriteAction) action;\n \n", "next_change": {"commit": "8bf075178f93490487bc2567fb32ed7babc5ccbc", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 64cdb083fb..290919c289 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class WriteActionTest {\n   @Test\n   public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.file.maxcount, 1000).option(hive.file.size.min, 1024)\");\n+        \"write(hive).option(hive.file.count.max, 1000).option(hive.file.size.min, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n     WriteAction writeAction = (WriteAction) action;\n \n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 2ea4785938..290919c289 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n", "chunk": "@@ -51,9 +51,9 @@ public class WriteActionTest {\n   }\n \n   @Test\n-  public void DynamicNumFiles() {\n+  public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.num.files, 0).option(file.size, 1024)\");\n+        \"write(hive).option(hive.file.count.max, 1000).option(hive.file.size.min, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n     WriteAction writeAction = (WriteAction) action;\n \n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/CompactActionTest.java\nsimilarity index 55%\nrename from table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nrename to table/server/common/src/test/java/alluxio/table/common/transform/action/CompactActionTest.java\nindex 290919c289..178eb9133e 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/CompactActionTest.java\n", "chunk": "@@ -13,57 +13,52 @@ package alluxio.table.common.transform.action;\n \n import static org.junit.Assert.assertEquals;\n \n-import alluxio.exception.ExceptionMessage;\n import alluxio.job.JobConfig;\n import alluxio.job.plan.transform.CompactConfig;\n import alluxio.table.common.TableTestUtils;\n import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.transform.TransformDefinition;\n \n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n-public class WriteActionTest {\n+import java.util.List;\n+\n+public class CompactActionTest {\n   @Rule\n   public ExpectedException mException = ExpectedException.none();\n \n-  @Test\n-  public void noArgs() {\n-    mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-    TransformAction.Parser.parse(\"write()\");\n-  }\n+  public CompactAction parse(String definition) {\n+    TransformDefinition transformDefinition = TransformDefinition.parse(definition);\n \n-  @Test\n-  public void tooManyArgs() {\n-    mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-    TransformAction.Parser.parse(\"write(one,two)\");\n+    final List<TransformAction> actions = transformDefinition.getActions();\n+    assertEquals(1, actions.size());\n+    final TransformAction action = actions.get(0);\n+\n+    assertEquals(CompactAction.class, action.getClass());\n+    return (CompactAction) action;\n   }\n \n   @Test\n-  public void negativeNumFiles() {\n-    String option = \"option(hive.num.files, -1)\";\n-    String definition = \"write(hive).\" + option;\n+  public void invalidNumFiles() {\n+    String definition = \"file.count.max=0\";\n     mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_ACTION_PARSE_FAILED.getMessage(option));\n-    TransformAction.Parser.parse(definition);\n+    mException.expectMessage(\"Write action must have positive number of files\");\n+\n+    parse(definition);\n   }\n \n   @Test\n   public void dynamicNumFiles() {\n-    TransformAction action = TransformAction.Parser.parse(\n-        \"write(hive).option(hive.file.count.max, 1000).option(hive.file.size.min, 1024)\");\n-    assertEquals(WriteAction.class, action.getClass());\n-    WriteAction writeAction = (WriteAction) action;\n+    final CompactAction compactAction = parse(\"file.count.max=1000;file.size.min=1024\");\n \n     HiveLayout from = TableTestUtils.createLayout(\"/from\");\n     HiveLayout to = TableTestUtils.createLayout(\"/to\");\n-    JobConfig job = writeAction.generateJobConfig(from, to);\n+    JobConfig job = compactAction.generateJobConfig(from, to, false);\n     assertEquals(CompactConfig.class, job.getClass());\n \n     CompactConfig compact = (CompactConfig) job;\n-    assertEquals(\"hive\", compact.getDatabaseType());\n     assertEquals(\"/from\", compact.getInput());\n     assertEquals(\"/to\", compact.getOutput());\n     assertEquals(1000, compact.getMaxNumFiles());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7866ccb403d022e7611ab420a47d50cf9672628c", "committedDate": "2020-02-07 09:30:33 -0800", "message": "Update the transformation options in tests"}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNTkyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367515920", "body": "rename to `totalFileSize`?", "bodyText": "rename to totalFileSize?", "bodyHTML": "<p dir=\"auto\">rename to <code>totalFileSize</code>?</p>", "author": "gpang", "createdAt": "2020-01-16T16:22:30Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": {"commit": "7ed270f52294441dc88985dc7efa63223e37edc7", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 2954178e8b..a93dcffaa4 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -122,9 +125,10 @@ public final class CompactDefinition\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file will not exceed the max group size\n+      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n       if (group.isEmpty() || groupIndex == numFiles - 1\n-          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n+          <= Math.abs(currentGroupSize - groupMaxSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "9096f1726980e9df0676deed30c403941e53ffa0", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex a93dcffaa4..41bdffbdfd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -106,29 +89,31 @@ public final class CompactDefinition\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numFiles = config.getNumFiles();\n-    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numFiles = calcNumOfFiles(files.size(), Math.round(totalFileSize / files.size()), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    long groupMaxSize = Math.round(totalFileSize / numFiles);\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    // We keep adding files to the group, until it exceeds the newFileSize.\n+    // We keep adding files to the group, until adding more files makes it too big.\n     ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    int groupIndex = 0; // Number of groups already generated\n+    // Number of groups already generated\n+    int groupIndex = 0;\n     long currentGroupSize = 0;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n-      if (group.isEmpty() || groupIndex == numFiles - 1\n-          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n-          <= Math.abs(currentGroupSize - groupMaxSize))) {\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +105,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +86,52 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzA3OA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517078", "body": "How will this constant group size work when the input file sizes are different? Shouldn't the file size configuration be enforced by considering each input file size?", "bodyText": "How will this constant group size work when the input file sizes are different? Shouldn't the file size configuration be enforced by considering each input file size?", "bodyHTML": "<p dir=\"auto\">How will this constant group size work when the input file sizes are different? Shouldn't the file size configuration be enforced by considering each input file size?</p>", "author": "gpang", "createdAt": "2020-01-16T16:24:25Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();\n+    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    }\n+    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": {"commit": "7ed270f52294441dc88985dc7efa63223e37edc7", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 2954178e8b..a93dcffaa4 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -122,9 +125,10 @@ public final class CompactDefinition\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file will not exceed the max group size\n+      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n       if (group.isEmpty() || groupIndex == numFiles - 1\n-          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n+          <= Math.abs(currentGroupSize - groupMaxSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "9096f1726980e9df0676deed30c403941e53ffa0", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex a93dcffaa4..41bdffbdfd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -106,29 +89,31 @@ public final class CompactDefinition\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numFiles = config.getNumFiles();\n-    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numFiles = calcNumOfFiles(files.size(), Math.round(totalFileSize / files.size()), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    long groupMaxSize = Math.round(totalFileSize / numFiles);\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    // We keep adding files to the group, until it exceeds the newFileSize.\n+    // We keep adding files to the group, until adding more files makes it too big.\n     ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    int groupIndex = 0; // Number of groups already generated\n+    // Number of groups already generated\n+    int groupIndex = 0;\n     long currentGroupSize = 0;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n-      if (group.isEmpty() || groupIndex == numFiles - 1\n-          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n-          <= Math.abs(currentGroupSize - groupMaxSize))) {\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +105,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +86,52 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzQ0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517442", "body": "rename to `numFiles`", "bodyText": "rename to numFiles", "bodyHTML": "<p dir=\"auto\">rename to <code>numFiles</code></p>", "author": "gpang", "createdAt": "2020-01-16T16:25:00Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": {"commit": "7ed270f52294441dc88985dc7efa63223e37edc7", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 2954178e8b..a93dcffaa4 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -122,9 +125,10 @@ public final class CompactDefinition\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file will not exceed the max group size\n+      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n       if (group.isEmpty() || groupIndex == numFiles - 1\n-          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n+          <= Math.abs(currentGroupSize - groupMaxSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "9096f1726980e9df0676deed30c403941e53ffa0", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex a93dcffaa4..41bdffbdfd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -106,29 +89,31 @@ public final class CompactDefinition\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numFiles = config.getNumFiles();\n-    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numFiles = calcNumOfFiles(files.size(), Math.round(totalFileSize / files.size()), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    long groupMaxSize = Math.round(totalFileSize / numFiles);\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    // We keep adding files to the group, until it exceeds the newFileSize.\n+    // We keep adding files to the group, until adding more files makes it too big.\n     ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    int groupIndex = 0; // Number of groups already generated\n+    // Number of groups already generated\n+    int groupIndex = 0;\n     long currentGroupSize = 0;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n-      // 3. group size with the new file is closer to the groupMaxSize than group size without it\n-      if (group.isEmpty() || groupIndex == numFiles - 1\n-          || (Math.abs(currentGroupSize + file.getLength() - groupMaxSize)\n-          <= Math.abs(currentGroupSize - groupMaxSize))) {\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n         currentGroupSize += file.getLength();\n       } else {\n", "next_change": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +105,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -95,30 +86,52 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n+          || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n+          <= Math.abs(currentGroupSize - groupMinSize))) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"oid": "c3de293b7cd343755786e6a606f983d8c708a2cc", "url": "https://github.com/Alluxio/alluxio/commit/c3de293b7cd343755786e6a606f983d8c708a2cc", "message": "address comments, and change the way we group files", "committedDate": "2020-02-03T23:05:38Z", "type": "commit"}, {"oid": "5a705f516eef76d7773bc8b8407db5dbd7ceb359", "url": "https://github.com/Alluxio/alluxio/commit/5a705f516eef76d7773bc8b8407db5dbd7ceb359", "message": "fix test", "committedDate": "2020-02-03T23:23:57Z", "type": "commit"}, {"oid": "7d668db44ada4781d725accb70e7fb7785e21b61", "url": "https://github.com/Alluxio/alluxio/commit/7d668db44ada4781d725accb70e7fb7785e21b61", "message": "Merge branch 'master' into coalesce", "committedDate": "2020-02-03T23:45:57Z", "type": "commit"}, {"oid": "d97235895308c37613f5e30d19befdd87d363cec", "url": "https://github.com/Alluxio/alluxio/commit/d97235895308c37613f5e30d19befdd87d363cec", "message": "Fix test", "committedDate": "2020-02-04T21:37:14Z", "type": "commit"}, {"oid": "7ed270f52294441dc88985dc7efa63223e37edc7", "url": "https://github.com/Alluxio/alluxio/commit/7ed270f52294441dc88985dc7efa63223e37edc7", "message": "better heuristics for including a file in a particular group.", "committedDate": "2020-02-04T21:50:09Z", "type": "commit"}, {"oid": "9096f1726980e9df0676deed30c403941e53ffa0", "url": "https://github.com/Alluxio/alluxio/commit/9096f1726980e9df0676deed30c403941e53ffa0", "message": "change the parameters and the algorithm to fill bucket to include a minimum bucket size.", "committedDate": "2020-02-05T00:05:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ1Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014452", "body": "should these be renamed to reflect \"num files max\", and \"file size min\"?", "bodyText": "should these be renamed to reflect \"num files max\", and \"file size min\"?", "bodyHTML": "<p dir=\"auto\">should these be renamed to reflect \"num files max\", and \"file size min\"?</p>", "author": "gpang", "createdAt": "2020-02-05T01:22:08Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..f75396437e 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 53%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 3162f716ff..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -18,24 +18,20 @@ import alluxio.table.common.Layout;\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n- * The definition of the write action.\n+ * The definition of the compact action.\n  */\n-public class WriteAction implements TransformAction {\n-  private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+public class CompactAction implements TransformAction {\n+\n+  private static final String NUM_FILES_OPTION = \"file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n-  /**\n-   * Layout type, for example \"hive\".\n-   */\n-  private final String mLayoutType;\n   /**\n    * Expected number of files after compaction.\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014481", "body": "This should be 2g?", "bodyText": "This should be 2g?", "bodyHTML": "<p dir=\"auto\">This should be 2g?</p>", "author": "gpang", "createdAt": "2020-02-05T01:22:18Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"hive.file.size\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..f75396437e 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 53%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 3162f716ff..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -18,24 +18,20 @@ import alluxio.table.common.Layout;\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n- * The definition of the write action.\n+ * The definition of the compact action.\n  */\n-public class WriteAction implements TransformAction {\n-  private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+public class CompactAction implements TransformAction {\n+\n+  private static final String NUM_FILES_OPTION = \"file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n-  /**\n-   * Layout type, for example \"hive\".\n-   */\n-  private final String mLayoutType;\n   /**\n    * Expected number of files after compaction.\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDY5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014696", "body": "should the default be setting max files to 100 and min file size to 2g?", "bodyText": "should the default be setting max files to 100 and min file size to 2g?", "bodyHTML": "<p dir=\"auto\">should the default be setting max files to 100 and min file size to 2g?</p>", "author": "gpang", "createdAt": "2020-02-05T01:23:07Z", "path": "table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java", "diffHunk": "@@ -54,7 +54,7 @@\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  private static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 100);\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\nindex e817bda305..298be9d97f 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n", "chunk": "@@ -54,7 +54,7 @@ public class DefaultTableMaster extends CoreMaster\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive)\";\n \n   private final AlluxioCatalog mCatalog;\n   private final TransformManager mTransformManager;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\nindex e817bda305..298be9d97f 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n", "chunk": "@@ -54,7 +54,7 @@ public class DefaultTableMaster extends CoreMaster\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive)\";\n \n   private final AlluxioCatalog mCatalog;\n   private final TransformManager mTransformManager;\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\nindex 298be9d97f..93d9e554d2 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n", "chunk": "@@ -54,7 +56,7 @@ public class DefaultTableMaster extends CoreMaster\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  public static final String DEFAULT_TRANSFORMATION = \"write(hive)\";\n+  public static final String DEFAULT_TRANSFORMATION = \"file.count.max=100\";\n \n   private final AlluxioCatalog mCatalog;\n   private final TransformManager mTransformManager;\n", "next_change": {"commit": "42cb1b7778b1e9d2ba5563f03140e1ef90d8a7c8", "changed_code": [{"header": "diff --git a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\nindex 93d9e554d2..503c8fb943 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n", "chunk": "@@ -52,10 +53,10 @@ import java.util.Set;\n /**\n  * This table master manages catalogs metadata information.\n  */\n-public class DefaultTableMaster extends CoreMaster\n+public class DefaultTableMaster extends AbstractMaster\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n-  private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n+  private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of();\n   public static final String DEFAULT_TRANSFORMATION = \"file.count.max=100\";\n \n   private final AlluxioCatalog mCatalog;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "3f726dbc6c1f8dbb5b6fb04b39529a3556ad4008", "committedDate": "2020-02-07 10:29:28 -0800", "message": "Enable parallel udb sync"}, {"oid": "1120a53d21526678076f215b7fbb3b81d857699e", "committedDate": "2020-02-07 14:00:44 -0800", "message": "Close journal context in table master"}, {"oid": "e6751bc1600b8a0be0884549071e1da8240eb984", "committedDate": "2020-02-13 08:19:41 -0800", "message": "Improve error handling for attach db and sync"}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}, {"oid": "c09f789fac5411749ffb07a22f549f2191ad7ab3", "committedDate": "2020-03-12 14:29:07 -0700", "message": "Make parallel sync threads configurable"}, {"oid": "017078481f57e3499855b423740d3c6f227c47ab", "committedDate": "2022-12-15 06:46:53 -0800", "message": "Support log source ip to rpc debug log"}, {"oid": "42cb1b7778b1e9d2ba5563f03140e1ef90d8a7c8", "committedDate": "2023-01-03 18:58:34 -0800", "message": "Remove TableMaster dependency on FileSystemMaster"}, {"oid": "bd74a890abd3d2fcff18e86983835d51143df712", "committedDate": "2023-01-05 22:01:06 -0800", "message": "Make client send version to server and audit log contain version"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTA1OA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015058", "body": "I think static final variable names have to be all caps?", "bodyText": "I think static final variable names have to be all caps?", "bodyHTML": "<p dir=\"auto\">I think static final variable names have to be all caps?</p>", "author": "gpang", "createdAt": "2020-02-05T01:24:27Z", "path": "job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java", "diffHunk": "@@ -22,17 +22,23 @@\n import alluxio.job.plan.SelectExecutorsTest;\n import alluxio.wire.WorkerInfo;\n \n+import org.apache.commons.io.FileUtils;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.Random;\n import java.util.Set;\n+import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n+  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex 6f747d93cc..af67fc6e2b 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n", "chunk": "@@ -31,14 +31,13 @@ import java.util.List;\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n-import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n-  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n-\n+  private static final PrimitiveIterator.OfLong LONG_STREAM\n+      = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n \n   @Test\n   public void testExecutorsParallel() throws Exception {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex 6f747d93cc..af67fc6e2b 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n", "chunk": "@@ -31,14 +31,13 @@ import java.util.List;\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n-import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n-  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n-\n+  private static final PrimitiveIterator.OfLong LONG_STREAM\n+      = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n \n   @Test\n   public void testExecutorsParallel() throws Exception {\n", "next_change": {"commit": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "changed_code": [{"header": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex af67fc6e2b..de7aac91b2 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n", "chunk": "@@ -45,7 +47,10 @@ public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n     int numCompactedFiles = 100;\n     int totalFiles = 5000;\n \n-    CompactConfig config = new CompactConfig(null, INPUT_DIR, OUTPUT_DIR, \"test\",\n+    PartitionInfo mockPartitionInfo = mock(PartitionInfo.class);\n+    when(mockPartitionInfo.getFormat(any())).thenReturn(Format.CSV);\n+\n+    CompactConfig config = new CompactConfig(mockPartitionInfo, INPUT_DIR, OUTPUT_DIR, \"test\",\n         numCompactedFiles, 2 * FileUtils.ONE_GB);\n \n     List<URIStatus> inputFiles = new ArrayList<>();\n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex de7aac91b2..31e7942e2e 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n", "chunk": "@@ -50,7 +50,7 @@ public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n     PartitionInfo mockPartitionInfo = mock(PartitionInfo.class);\n     when(mockPartitionInfo.getFormat(any())).thenReturn(Format.CSV);\n \n-    CompactConfig config = new CompactConfig(mockPartitionInfo, INPUT_DIR, OUTPUT_DIR, \"test\",\n+    CompactConfig config = new CompactConfig(mockPartitionInfo, INPUT_DIR, OUTPUT_DIR,\n         numCompactedFiles, 2 * FileUtils.ONE_GB);\n \n     List<URIStatus> inputFiles = new ArrayList<>();\n", "next_change": {"commit": "097ce8654c7df9764c6d71807db39f598657db6f", "changed_code": [{"header": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex 31e7942e2e..0d0e459f45 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n", "chunk": "@@ -50,8 +50,8 @@ public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n     PartitionInfo mockPartitionInfo = mock(PartitionInfo.class);\n     when(mockPartitionInfo.getFormat(any())).thenReturn(Format.CSV);\n \n-    CompactConfig config = new CompactConfig(mockPartitionInfo, INPUT_DIR, OUTPUT_DIR,\n-        numCompactedFiles, 2 * FileUtils.ONE_GB);\n+    CompactConfig config = new CompactConfig(mockPartitionInfo, INPUT_DIR, mockPartitionInfo,\n+        OUTPUT_DIR, numCompactedFiles, 2 * FileUtils.ONE_GB);\n \n     List<URIStatus> inputFiles = new ArrayList<>();\n     for (int i = 0; i < totalFiles; i++) {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "3c0275f4b81af80f98c8e0f1043bab8c8803f07c", "committedDate": "2022-01-13 16:47:51 -0800", "message": "Replace deprecated Matchers to ArgumentMatchers"}, {"oid": "5b3a305a271c5c9898079135c70c34f40db08b52", "committedDate": "2022-06-06 10:51:54 -0700", "message": "Replace PowerMock with Mockito in alluxio-job-server"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTY0NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015644", "body": "NIT:\r\n```suggestion\r\n    if (totalFileSize / groupMinSize > maxNumFiles) {\r\n```", "bodyText": "NIT:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n          \n          \n            \n                if (totalFileSize / groupMinSize > maxNumFiles) {", "bodyHTML": "<p dir=\"auto\">NIT:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (totalFileSize <span class=\"pl-k\">/</span> <span class=\"x x-first\">config</span><span class=\"pl-k x\">.</span><span class=\"x\">getMinFileSize() </span><span class=\"pl-k x x-last\">&gt;=</span> maxNumFiles) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (totalFileSize <span class=\"pl-k\">/</span> <span class=\"x x-first\">groupMinSize </span><span class=\"pl-k x x-last\">&gt;</span> maxNumFiles) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gpang", "createdAt": "2020-02-05T01:26:44Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -91,7 +91,7 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n-    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n     // Files to be compacted are grouped into different groups,\n", "next_change": {"commit": "7cc76317fbf6a673089e488120f22cfcd9e4cb79", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex f594056dca..c75783b7c0 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -88,12 +94,20 @@ public final class CompactDefinition\n         totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n     if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n+\n+    if (!files.isEmpty()) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -88,12 +94,20 @@ public final class CompactDefinition\n         totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n-    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": {"commit": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 5d8b2ec447..0e11b2f0cd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -108,6 +103,10 @@ public final class CompactDefinition\n           config.getPartitionInfo().getFormat(files.get(0).getName()));\n     }\n \n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjM0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375016343", "body": "can we pre-compute `groupMinSize / 2` earlier?", "bodyText": "can we pre-compute groupMinSize / 2 earlier?", "bodyHTML": "<p dir=\"auto\">can we pre-compute <code>groupMinSize / 2</code> earlier?</p>", "author": "gpang", "createdAt": "2020-02-05T01:29:39Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +105,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -105,13 +119,14 @@ public final class CompactDefinition\n     // Number of groups already generated\n     int groupIndex = 0;\n     long currentGroupSize = 0;\n+    long halfGroupMinSize = groupMinSize / 2;\n     for (URIStatus file : files) {\n       // add the file to the group if\n       // 1. group is empty\n       // 2. group is the last group\n       // 3. group size with the new file is closer to the groupMinSize than group size without it\n       if (group.isEmpty() || groupIndex == maxNumFiles - 1\n-          || (currentGroupSize + file.getLength()) <= groupMinSize / 2\n+          || (currentGroupSize + file.getLength()) <= halfGroupMinSize\n           || (Math.abs(currentGroupSize + file.getLength() - groupMinSize)\n           <= Math.abs(currentGroupSize - groupMinSize))) {\n         group.add(inputDir.join(file.getName()).toString());\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"oid": "38041470ce7b837b8dfed929175869054991f75b", "url": "https://github.com/Alluxio/alluxio/commit/38041470ce7b837b8dfed929175869054991f75b", "message": "address comment", "committedDate": "2020-02-05T02:05:17Z", "type": "commit"}, {"oid": "da0b50b697b9f477ec6335808eff1c97d047827f", "url": "https://github.com/Alluxio/alluxio/commit/da0b50b697b9f477ec6335808eff1c97d047827f", "message": "fix checkstyle", "committedDate": "2020-02-05T02:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzg4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033887", "body": "I think our convention has been something like:\r\n```suggestion\r\n  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\r\n```", "bodyText": "I think our convention has been something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n          \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.count.max\";", "bodyHTML": "<p dir=\"auto\">I think our convention has been something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">NUM_FILES_OPTION</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hive.file.<span class=\"x x-first x-last\">maxcount</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">NUM_FILES_OPTION</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hive.file.<span class=\"x x-first x-last\">count.max</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gpang", "createdAt": "2020-02-05T02:43:41Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 53%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 3162f716ff..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -18,24 +18,20 @@ import alluxio.table.common.Layout;\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n- * The definition of the write action.\n+ * The definition of the compact action.\n  */\n-public class WriteAction implements TransformAction {\n-  private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+public class CompactAction implements TransformAction {\n+\n+  private static final String NUM_FILES_OPTION = \"file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n-  /**\n-   * Layout type, for example \"hive\".\n-   */\n-  private final String mLayoutType;\n   /**\n    * Expected number of files after compaction.\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzk3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033974", "body": "I think our convention is like:\r\n```suggestion\r\n  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\r\n```", "bodyText": "I think our convention is like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n          \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";", "bodyHTML": "<p dir=\"auto\">I think our convention is like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">FILE_SIZE_OPTION</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hive.file.<span class=\"x x-first x-last\">minsize</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">FILE_SIZE_OPTION</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hive.file.<span class=\"x x-first x-last\">size.min</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gpang", "createdAt": "2020-02-05T02:44:05Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n", "next_change": {"commit": "e808154e58efbed2c0dbeb1a690577fddee52376", "changed_code": [{"header": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nsimilarity index 53%\nrename from table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nrename to table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\nindex 3162f716ff..25e54d7a6d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java\n", "chunk": "@@ -18,24 +18,20 @@ import alluxio.table.common.Layout;\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n- * The definition of the write action.\n+ * The definition of the compact action.\n  */\n-public class WriteAction implements TransformAction {\n-  private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n+public class CompactAction implements TransformAction {\n+\n+  private static final String NUM_FILES_OPTION = \"file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n-  /**\n-   * Layout type, for example \"hive\".\n-   */\n-  private final String mLayoutType;\n   /**\n    * Expected number of files after compaction.\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "e808154e58efbed2c0dbeb1a690577fddee52376", "committedDate": "2020-03-12 11:51:27 -0700", "message": "Turn transform definition into configuration style"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDYxMw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375034613", "body": "I have another higher level question. If there is a file conversion happening, for example, csv to parquet, there will most likely be a reduction in file sizes. This computes the INPUT file sizes, but ideally we should be computing the desired OUTPUT file sizes. Is there a simple way we can perform a heuristic for when we are converting input file types to different output types?", "bodyText": "I have another higher level question. If there is a file conversion happening, for example, csv to parquet, there will most likely be a reduction in file sizes. This computes the INPUT file sizes, but ideally we should be computing the desired OUTPUT file sizes. Is there a simple way we can perform a heuristic for when we are converting input file types to different output types?", "bodyHTML": "<p dir=\"auto\">I have another higher level question. If there is a file conversion happening, for example, csv to parquet, there will most likely be a reduction in file sizes. This computes the INPUT file sizes, but ideally we should be computing the desired OUTPUT file sizes. Is there a simple way we can perform a heuristic for when we are converting input file types to different output types?</p>", "author": "gpang", "createdAt": "2020-02-05T02:47:04Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,44 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7cc76317fbf6a673089e488120f22cfcd9e4cb79", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex f594056dca..c75783b7c0 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -88,12 +94,20 @@ public final class CompactDefinition\n         totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n     if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n+\n+    if (!files.isEmpty()) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex f594056dca..5d8b2ec447 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -88,12 +94,20 @@ public final class CompactDefinition\n         totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n     if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": {"commit": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 5d8b2ec447..0e11b2f0cd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -108,6 +103,10 @@ public final class CompactDefinition\n           config.getPartitionInfo().getFormat(files.get(0).getName()));\n     }\n \n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}, {"oid": "5cdf3d39ee88beb258301adccecb3fe821640b95", "url": "https://github.com/Alluxio/alluxio/commit/5cdf3d39ee88beb258301adccecb3fe821640b95", "message": "address comments", "committedDate": "2020-02-05T23:45:06Z", "type": "commit"}, {"oid": "7cc76317fbf6a673089e488120f22cfcd9e4cb79", "url": "https://github.com/Alluxio/alluxio/commit/7cc76317fbf6a673089e488120f22cfcd9e4cb79", "message": "account for size difference due to compression between src and dest format", "committedDate": "2020-02-06T00:29:31Z", "type": "commit"}, {"oid": "8bf075178f93490487bc2567fb32ed7babc5ccbc", "url": "https://github.com/Alluxio/alluxio/commit/8bf075178f93490487bc2567fb32ed7babc5ccbc", "message": "fix tests", "committedDate": "2020-02-06T00:47:52Z", "type": "commit"}, {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c", "url": "https://github.com/Alluxio/alluxio/commit/f61727d0b3c03e73be50d8473bc9cf91064b015c", "message": "fix test", "committedDate": "2020-02-06T04:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375928176", "body": "what happens if the format is unknown? Maybe for unknown formats, it should just default to 1.0 or 1.5 or something.", "bodyText": "what happens if the format is unknown? Maybe for unknown formats, it should just default to 1.0 or 1.5 or something.", "bodyHTML": "<p dir=\"auto\">what happens if the format is unknown? Maybe for unknown formats, it should just default to 1.0 or 1.5 or something.</p>", "author": "gpang", "createdAt": "2020-02-06T16:07:36Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "originalCommit": "f61727d0b3c03e73be50d8473bc9cf91064b015c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MTkwMg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375941902", "bodyText": "if the format is unknown, we have bigger problems.. we wouldn't even be able to read the file, right?", "author": "yuzhu", "createdAt": "2020-02-06T16:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MjI3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375942274", "bodyText": "in fact if the format is unknown, we throw an exception right now. which seems like the right thing to do", "author": "yuzhu", "createdAt": "2020-02-06T16:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTQ4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375995489", "bodyText": "I see. Does the getFormat already handle the cases where the files don't have nice file extensions?", "author": "gpang", "createdAt": "2020-02-06T18:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 5d8b2ec447..0e11b2f0cd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -98,9 +96,6 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n-    if (totalFileSize / groupMinSize > maxNumFiles) {\n-      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n-    }\n \n     if (!files.isEmpty() && config.getPartitionInfo() != null) {\n       // adjust the group minimum size for source compression ratio\n", "next_change": {"commit": "097ce8654c7df9764c6d71807db39f598657db6f", "changed_code": [{"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 0e11b2f0cd..113f44d2ec 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -97,10 +97,10 @@ public final class CompactDefinition\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n \n-    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+    if (!files.isEmpty() && config.getInputPartitionInfo() != null) {\n       // adjust the group minimum size for source compression ratio\n       groupMinSize *= COMPRESSION_RATIO.get(\n-          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+          config.getInputPartitionInfo().getFormat(files.get(0).getName()));\n     }\n \n     if (totalFileSize / groupMinSize > maxNumFiles) {\n", "next_change": null}]}}, {"header": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 5d8b2ec447..0e11b2f0cd 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n", "chunk": "@@ -108,6 +103,10 @@ public final class CompactDefinition\n           config.getPartitionInfo().getFormat(files.get(0).getName()));\n     }\n \n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n", "next_change": null}]}, "commits_in_main": [{"oid": "54ad9e52e26caa212e0df0dd4aa07477e4f7c8cf", "message": "Merge commit", "committedDate": null}, {"oid": "7dca7ae603058268ef629fda2c4ff8cad2ae82d9", "committedDate": "2020-02-18 15:28:21 -0800", "message": "Close previous stream before opening next one when compacting files"}, {"oid": "edd3781c6fdb5088ea73b80dd7f07131aac18fe8", "committedDate": "2020-02-19 14:42:34 -0800", "message": "Fix coalesce max files behavior"}, {"oid": "097ce8654c7df9764c6d71807db39f598657db6f", "committedDate": "2020-04-01 13:07:09 -0700", "message": "Add Parquet Compression option"}, {"oid": "da0f0eb43ab89b87f6db23859af3b9ab354f77a2", "committedDate": "2020-04-17 09:07:18 -0700", "message": "Add ORC file input support"}, {"oid": "2b40b37e54c93825bb7b23ecfe608c094451e45d", "committedDate": "2020-07-21 17:01:04 -0700", "message": "Upgrade parquet libraries version from 1.10.0 to 1.11.0"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}]}]}