{"pr_number": 245, "pr_title": "FM2-223: Add create, update, and delete methods for ServiceRequest", "pr_author": "gitcliff", "pr_createdAt": "2020-07-03T13:13:17Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NjA3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r453646070", "body": "Typo in MissMatch", "bodyText": "Typo in MissMatch", "bodyHTML": "<p dir=\"auto\">Typo in MissMatch</p>", "author": "varung-31", "createdAt": "2020-07-13T13:24:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -68,4 +86,93 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForIdMissMatch() throws Exception {", "originalCommit": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 0520263e..8c8b03c7 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -87,92 +96,49 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n-\n \t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n-\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\n-\t\tassertThat(response, isCreated());\n-\t}\n-\n-\t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n-\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n-\t\tassertThat(response, isOk());\n-\t}\n-\n-\t@Test\n-\tpublic void updateServiceRequest_shouldErrorForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(SERVICE_REQUEST_UUID));\n \t}\n-\n+\t\n \t@Test\n-\tpublic void updateServiceRequest_shouldErrorForIdMissMatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), dateRangeParamArgumentCaptor.capture());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n \t}\n-\n-\t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(SERVICE_REQUEST_UUID);\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON).go();\n-\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\twhen(service.searchForServiceRequests(any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n }\n", "next_change": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 8c8b03c7..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -141,4 +160,92 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(SERVICE_REQUEST_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n }\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -206,45 +202,45 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n \t\tString jsonServiceRequest;\n \t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n \t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n \t\tOperationOutcome retVal = new OperationOutcome();\n \t\tretVal.setId(SERVICE_REQUEST_UUID);\n \t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n", "next_change": {"commit": "1193da55bc39f558b6133df1cb24a5e409769150", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..8cc8518d 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -244,4 +619,14 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n+\t\n+\t@Test\n+\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n+\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t}\n }\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 8cc8518d..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -518,115 +511,4 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n-\t\n-\t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isCreated());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMismatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldThrowErrorForNonExistentServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenThrow(\n-\t\t    new MethodNotAllowedException(\"ServiceRequest \" + WRONG_SERVICE_REQUEST_UUID + \" does not exist\"));\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isMethodNotAllowed());\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n-\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isNotFound());\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "message": "FM2-223:adding more parameters", "committedDate": "2020-07-14T20:07:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNzgzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455027837", "body": "```suggestion\r\n\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMisMatch() throws Exception {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMisMatch() throws Exception {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">updateServiceRequest_shouldrRaiseExceptionForIdMissMatch</span>() throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">updateServiceRequest_shouldRaiseExceptionForIdMisMatch</span>() throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:53:36Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -216,7 +216,7 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t}\n \n \t@Test\n-\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n \t\tString jsonServiceRequest;\n \t\ttry (InputStream is = this.getClass().getClassLoader()\n \t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -206,45 +202,45 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n \t\tString jsonServiceRequest;\n \t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n \t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n \t\tOperationOutcome retVal = new OperationOutcome();\n \t\tretVal.setId(SERVICE_REQUEST_UUID);\n \t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n", "next_change": {"commit": "1193da55bc39f558b6133df1cb24a5e409769150", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..8cc8518d 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -244,4 +619,14 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n+\t\n+\t@Test\n+\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n+\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t}\n }\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 8cc8518d..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -518,115 +511,4 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n-\t\n-\t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isCreated());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMismatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldThrowErrorForNonExistentServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenThrow(\n-\t\t    new MethodNotAllowedException(\"ServiceRequest \" + WRONG_SERVICE_REQUEST_UUID + \" does not exist\"));\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isMethodNotAllowed());\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n-\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isNotFound());\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODM1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028357", "body": "```suggestion\r\n\t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n          \n          \n            \n            \t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> serviceRequestService<span class=\"pl-k\">.</span>delete(id<span class=\"pl-k\">.</span>getIdPart());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> serviceRequestService<span class=\"pl-k\">.</span>delete(id<span class=\"pl-k\">.</span>getIdPart());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:54:28Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java", "diffHunk": "@@ -55,6 +63,33 @@ public ServiceRequest getServiceRequestById(@IdParam @NotNull IdType id) {\n \t\treturn serviceRequest;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createServiceRequest(@ResourceParam ServiceRequest serviceRequest) {\n+\t\treturn FhirProviderUtils.buildCreate(serviceRequestService.create(serviceRequest));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateServiceRequest(@IdParam IdType id, @ResourceParam ServiceRequest serviceRequest) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tserviceRequest.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(), serviceRequest));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\nindex 9e35d5d6..5d1c24f2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n", "chunk": "@@ -83,7 +83,7 @@ public class ServiceRequestFhirResourceProvider implements IResourceProvider {\n \t@Delete\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n+\t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n \t\tif (serviceRequest == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find serviceRequest to delete with id \" + id.getIdPart());\n \t\t}\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\nindex 5d1c24f2..b8e4f129 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n", "chunk": "@@ -66,20 +66,20 @@ public class ServiceRequestFhirResourceProvider implements IResourceProvider {\n \t@Create\n \tpublic MethodOutcome createServiceRequest(@ResourceParam ServiceRequest serviceRequest) {\n \t\treturn FhirProviderUtils.buildCreate(serviceRequestService.create(serviceRequest));\n-\t} \n-\n+\t}\n+\t\n \t@Update\n \t@SuppressWarnings(\"unused\")\n \tpublic MethodOutcome updateServiceRequest(@IdParam IdType id, @ResourceParam ServiceRequest serviceRequest) {\n \t\tif (id == null || id.getIdPart() == null) {\n \t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n \t\t}\n-\n+\t\t\n \t\tserviceRequest.setId(id.getIdPart());\n-\n+\t\t\n \t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(), serviceRequest));\n \t}\n-\n+\t\n \t@Delete\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\nindex b8e4f129..7963ab91 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n", "chunk": "@@ -80,7 +79,6 @@ public class ServiceRequestFhirResourceProvider implements IResourceProvider {\n \t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(), serviceRequest));\n \t}\n \t\n-\t@Delete\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n \t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n", "next_change": {"commit": "94bab73bb16cd93e2003e0851148450e210f53eb", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\nindex 7963ab91..90db08fd 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ServiceRequestFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@SuppressWarnings(\"unused\")\n-\tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n+\tpublic OperationOutcome deleteServiceRequest(@IdParam @Nonnull IdType id) {\n \t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n \t\tif (serviceRequest == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find serviceRequest to delete with id \" + id.getIdPart());\n", "next_change": {"commit": "860acf1731c1aefa4f83f7f3439a13861af3941f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\nindex 90db08fd..65096110 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java\n", "chunk": "@@ -81,11 +87,8 @@ public class ServiceRequestFhirResourceProvider implements IResourceProvider {\n \t\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deleteServiceRequest(@IdParam @Nonnull IdType id) {\n-\t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n-\t\tif (serviceRequest == null) {\n-\t\t\tthrow new ResourceNotFoundException(\"Could not find serviceRequest to delete with id \" + id.getIdPart());\n-\t\t}\n-\t\treturn FhirProviderUtils.buildDelete(serviceRequest);\n+\t\tserviceRequestService.delete(id.getIdPart());\n+\t\treturn FhirProviderUtils.buildDeleteR4();\n \t}\n \t\n \t@Search\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODU4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028585", "body": "Please remove this.", "bodyText": "Please remove this.", "bodyHTML": "<p dir=\"auto\">Please remove this.</p>", "author": "varung-31", "createdAt": "2020-07-15T12:54:53Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java", "diffHunk": "@@ -106,6 +112,7 @@ public void getServiceRequestByWithWrongId_shouldThrowResourceNotFoundException(\n \t}\n \t\n \t@Test\n+", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\nindex a460d66c..359435fa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n", "chunk": "@@ -112,7 +112,6 @@ public class ServiceRequestFhirResourceProviderTest {\n \t}\n \t\n \t@Test\n-\n \tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestWhenUUIDIsSpecified() {\n \t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(SERVICE_REQUEST_UUID));\n \t\t\n", "next_change": {"commit": "1193da55bc39f558b6133df1cb24a5e409769150", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\nindex 359435fa..df09bd0c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n", "chunk": "@@ -111,73 +123,203 @@ public class ServiceRequestFhirResourceProviderTest {\n \t\tassertThat(resourceProvider.getServiceRequestById(idType), nullValue());\n \t}\n \t\n+\t@Test\n+\tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestsByCode() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tTokenAndListParam code = new TokenAndListParam().addAnd(new TokenParam(CODE));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, code, null, null, null, null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestsWhenPatientParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(patientParam, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestsWhenSubjectParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam subjectParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, subjectParam, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestsByRequesterParam() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam practitionerParam = new ReferenceAndListParam().addAnd(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, null, null, practitionerParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestsByOccurrence() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tDateRangeParam occurrence = new DateRangeParam().setLowerBound(OCCURRENCE).setUpperBound(OCCURRENCE);\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, null, null, null, occurrence, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchServiceRequests_shouldReturnMatchingServiceRequestsByEncounter() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tReferenceAndListParam encounterParam = new ReferenceAndListParam()\n+\t\t        .addAnd(new ReferenceOrListParam().add(new ReferenceParam().setValue(ENCOUNTER_UUID).setChain(null)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, null, encounterParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n \t@Test\n \tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestWhenUUIDIsSpecified() {\n \t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(SERVICE_REQUEST_UUID));\n \t\t\n-\t\twhen(serviceRequestService.searchForServiceRequests(any(), any())).thenReturn(\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n \t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n \t\t\n-\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(uuid, null);\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, null, null, null, null, uuid, null);\n \t\t\n \t\tList<IBaseResource> resources = getResources(results);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(resources, hasSize(Matchers.equalTo(1)));\n-\t\tassertThat(resources.get(0), Matchers.notNullValue());\n-\t\tassertThat(resources.get(0).fhirType(), Matchers.equalTo(FhirConstants.SERVICE_REQUEST));\n-\t\tassertThat(resources.get(0).getIdElement().getIdPart(), Matchers.equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n \t\n \t@Test\n \tpublic void searchServiceRequest_shouldReturnMatchingServiceRequestWhenLastUpdatedIsSpecified() {\n \t\tDateRangeParam lastUpdated = new DateRangeParam().setUpperBound(LAST_UPDATED_DATE).setLowerBound(LAST_UPDATED_DATE);\n \t\t\n-\t\twhen(serviceRequestService.searchForServiceRequests(any(), any())).thenReturn(\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n \t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n \t\t\n-\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, lastUpdated);\n+\t\tIBundleProvider results = resourceProvider.searchForServiceRequests(null, null, null, null, null, null, null,\n+\t\t    lastUpdated);\n \t\t\n \t\tList<IBaseResource> resources = getResources(results);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(resources, hasSize(Matchers.equalTo(1)));\n-\t\tassertThat(resources.get(0), Matchers.notNullValue());\n-\t\tassertThat(resources.get(0).fhirType(), Matchers.equalTo(FhirConstants.SERVICE_REQUEST));\n-\t\tassertThat(resources.get(0).getIdElement().getIdPart(), Matchers.equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n \t\n \t@Test\n \tpublic void updateServiceRequest_shouldUpdateServiceRequest() {\n-\n+\t\t\n \t\twhen(serviceRequestService.update(SERVICE_REQUEST_UUID, serviceRequest)).thenReturn(serviceRequest);\n-\n-\t\tMethodOutcome result = resourceProvider.updateServiceRequest(new IdType().setValue(SERVICE_REQUEST_UUID), serviceRequest);\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getResource(), CoreMatchers.equalTo(serviceRequest));\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateServiceRequest(new IdType().setValue(SERVICE_REQUEST_UUID),\n+\t\t    serviceRequest);\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getResource(), equalTo(serviceRequest));\n \t}\n-\n+\t\n \t@Test(expected = InvalidRequestException.class)\n-\tpublic void updateServiceRequest_shouldThrowInvalidRequestExceptionForWrongServiceRequestUuid() {\n-\t\twhen(serviceRequestService.update(WRONG_SERVICE_REQUEST_UUID, serviceRequest)).thenThrow(InvalidRequestException.class);\n-\n+\tpublic void updateServiceRequest_shouldThrowInvalidRequestExceptionForUuidMismatch() {\n+\t\twhen(serviceRequestService.update(WRONG_SERVICE_REQUEST_UUID, serviceRequest))\n+\t\t        .thenThrow(InvalidRequestException.class);\n+\t\t\n \t\tresourceProvider.updateServiceRequest(new IdType().setValue(WRONG_SERVICE_REQUEST_UUID), serviceRequest);\n \t}\n-\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateServiceRequest_shouldThrowInvalidRequestExceptionForMissingId() {\n+\t\tServiceRequest noIdServiceRequest = new ServiceRequest();\n+\t\t\n+\t\twhen(serviceRequestService.update(SERVICE_REQUEST_UUID, noIdServiceRequest))\n+\t\t        .thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateServiceRequest(new IdType().setValue(SERVICE_REQUEST_UUID), noIdServiceRequest);\n+\t}\n+\t\n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updateServiceRequest_ShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\t\n \t\tserviceRequest.setId(WRONG_SERVICE_REQUEST_UUID);\n-\n-\t\twhen(serviceRequestService.update(WRONG_SERVICE_REQUEST_UUID, serviceRequest)).thenThrow(MethodNotAllowedException.class);\n-\n+\t\t\n+\t\twhen(serviceRequestService.update(WRONG_SERVICE_REQUEST_UUID, serviceRequest))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n \t\tresourceProvider.updateServiceRequest(new IdType().setValue(WRONG_SERVICE_REQUEST_UUID), serviceRequest);\n \t}\n-\n+\t\n \t@Test\n-\tpublic void deleteserviceRequest_shouldDeleteserviceRequest() {\n+\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() {\n \t\twhen(serviceRequestService.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tOperationOutcome result = resourceProvider.deleteServiceRequest(new IdType().setValue(SERVICE_REQUEST_UUID));\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getIssue(), notNullValue());\n", "next_change": {"commit": "860acf1731c1aefa4f83f7f3439a13861af3941f", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\nindex df09bd0c..9499028b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java\n", "chunk": "@@ -318,9 +332,8 @@ public class ServiceRequestFhirResourceProviderTest {\n \t\n \t@Test\n \tpublic void deleteServiceRequest_shouldDeleteServiceRequest() {\n-\t\twhen(serviceRequestService.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\t\t\n \t\tOperationOutcome result = resourceProvider.deleteServiceRequest(new IdType().setValue(SERVICE_REQUEST_UUID));\n+\t\t\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getIssue(), notNullValue());\n \t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTI3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029277", "body": "```suggestion\r\n\t\tServiceRequest serviceRequest = new ServiceRequest();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ServiceRequest</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:55:59Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -169,10 +169,10 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n \n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \n-\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n \n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -168,37 +164,37 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n \t\tassertThat(response, isCreated());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n \t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n \t\tString jsonServiceRequest;\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -112,136 +133,382 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tverify(service).searchForServiceRequests(tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n-\t\t        .getValue(),\n-\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tverify(service).searchForServiceRequests(isNull(), dateRangeParamArgumentCaptor.capture());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n \t}\n \t\n-\tprivate void verifyUri(String uri) throws Exception {\n-\t\twhen(service.searchForServiceRequests(any(), any()))\n-\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tBundle results = readBundleResponse(response);\n-\t\tassertThat(results.getEntry(), notNullValue());\n-\t\tassertThat(results.getEntry(), not(empty()));\n-\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n-\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject=%s\", PATIENT_UUID));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isCreated());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester=%s\", PARTICIPANT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(SERVICE_REQUEST_UUID);\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.name=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.given=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.family=%s\", PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.identifier=%s\", PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByEncounterUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?encounter=%s\", ENCOUNTER_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByCode() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?code=%s\", CODE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), tokenAndListParamArgumentCaptor.capture(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByOccurrence() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?occurrence=eq%s\", OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldHandleComplexQuery() throws Exception {\n+\t\tverifyUri(\n+\t\t    String.format(\"/ServiceRequest?requester.given=%s&occurrence=eq%s\", PARTICIPANT_GIVEN_NAME, OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\twhen(service.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTU1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029550", "body": "```suggestion\r\n\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\twhen(service<span class=\"pl-k\">.</span>create(any(<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span><span class=\"pl-k\">.</span>class)))<span class=\"pl-k\">.</span>thenReturn(serviceRequest);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\twhen(service<span class=\"pl-k\">.</span>create(any(<span class=\"pl-smi\">ServiceRequest</span><span class=\"pl-k\">.</span>class)))<span class=\"pl-k\">.</span>thenReturn(serviceRequest);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:56:23Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -169,10 +169,10 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n \n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \n-\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n \n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -168,37 +164,37 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n \t\tassertThat(response, isCreated());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n \t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n \t\tString jsonServiceRequest;\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -112,136 +133,382 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tverify(service).searchForServiceRequests(tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n-\t\t        .getValue(),\n-\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tverify(service).searchForServiceRequests(isNull(), dateRangeParamArgumentCaptor.capture());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n \t}\n \t\n-\tprivate void verifyUri(String uri) throws Exception {\n-\t\twhen(service.searchForServiceRequests(any(), any()))\n-\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tBundle results = readBundleResponse(response);\n-\t\tassertThat(results.getEntry(), notNullValue());\n-\t\tassertThat(results.getEntry(), not(empty()));\n-\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n-\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject=%s\", PATIENT_UUID));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isCreated());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester=%s\", PARTICIPANT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(SERVICE_REQUEST_UUID);\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.name=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.given=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.family=%s\", PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.identifier=%s\", PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByEncounterUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?encounter=%s\", ENCOUNTER_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByCode() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?code=%s\", CODE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), tokenAndListParamArgumentCaptor.capture(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByOccurrence() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?occurrence=eq%s\", OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldHandleComplexQuery() throws Exception {\n+\t\tverifyUri(\n+\t\t    String.format(\"/ServiceRequest?requester.given=%s&occurrence=eq%s\", PARTICIPANT_GIVEN_NAME, OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\twhen(service.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029697", "body": "```suggestion\r\n\t\tServiceRequest serviceRequest = new ServiceRequest();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ServiceRequest</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:56:39Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -188,10 +188,10 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n \n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \n-\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n \n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n \t\t\t\t.accept(FhirMediaTypes.JSON).go();\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -168,37 +164,37 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n \t\tassertThat(response, isCreated());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n \t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n \t\tString jsonServiceRequest;\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -112,136 +133,382 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tverify(service).searchForServiceRequests(tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n-\t\t        .getValue(),\n-\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tverify(service).searchForServiceRequests(isNull(), dateRangeParamArgumentCaptor.capture());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n \t}\n \t\n-\tprivate void verifyUri(String uri) throws Exception {\n-\t\twhen(service.searchForServiceRequests(any(), any()))\n-\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tBundle results = readBundleResponse(response);\n-\t\tassertThat(results.getEntry(), notNullValue());\n-\t\tassertThat(results.getEntry(), not(empty()));\n-\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n-\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject=%s\", PATIENT_UUID));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isCreated());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester=%s\", PARTICIPANT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(SERVICE_REQUEST_UUID);\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.name=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.given=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.family=%s\", PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.identifier=%s\", PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByEncounterUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?encounter=%s\", ENCOUNTER_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByCode() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?code=%s\", CODE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), tokenAndListParamArgumentCaptor.capture(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByOccurrence() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?occurrence=eq%s\", OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldHandleComplexQuery() throws Exception {\n+\t\tverifyUri(\n+\t\t    String.format(\"/ServiceRequest?requester.given=%s&occurrence=eq%s\", PARTICIPANT_GIVEN_NAME, OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\twhen(service.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTgwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029805", "body": "```suggestion\r\n\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\twhen(service<span class=\"pl-k\">.</span>update(anyString(), any(<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span><span class=\"pl-k\">.</span>class)))<span class=\"pl-k\">.</span>thenReturn(serviceRequest);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\twhen(service<span class=\"pl-k\">.</span>update(anyString(), any(<span class=\"pl-smi\">ServiceRequest</span><span class=\"pl-k\">.</span>class)))<span class=\"pl-k\">.</span>thenReturn(serviceRequest);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:56:48Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -188,10 +188,10 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n \n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \n-\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n \n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n \t\t\t\t.accept(FhirMediaTypes.JSON).go();\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -168,37 +164,37 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n \t\tassertThat(response, isCreated());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n \t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n \t\tString jsonServiceRequest;\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -112,136 +133,382 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tverify(service).searchForServiceRequests(tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n-\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n-\t\t        .getValue(),\n-\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n-\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tverify(service).searchForServiceRequests(isNull(), dateRangeParamArgumentCaptor.capture());\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n-\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n-\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n \t}\n \t\n-\tprivate void verifyUri(String uri) throws Exception {\n-\t\twhen(service.searchForServiceRequests(any(), any()))\n-\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByPatientIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?patient.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tBundle results = readBundleResponse(response);\n-\t\tassertThat(results.getEntry(), notNullValue());\n-\t\tassertThat(results.getEntry(), not(empty()));\n-\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n-\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject=%s\", PATIENT_UUID));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.name=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isCreated());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.given=%s\", PATIENT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.family=%s\", PATIENT_FAMILY_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_FAMILY));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?subject.identifier=%s\", PATIENT_IDENTIFIER));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(referenceAndListParamArgumentCaptor.capture(), isNull(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Patient.SP_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester=%s\", PARTICIPANT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(SERVICE_REQUEST_UUID);\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.name=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n \t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.given=%s\", PARTICIPANT_GIVEN_NAME));\n \t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.family=%s\", PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_FAMILY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?requester.identifier=%s\", PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByEncounterUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?encounter=%s\", ENCOUNTER_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(null));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByCode() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?code=%s\", CODE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), tokenAndListParamArgumentCaptor.capture(), isNull(), isNull(),\n+\t\t    isNull(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByOccurrence() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?occurrence=eq%s\", OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldHandleComplexQuery() throws Exception {\n+\t\tverifyUri(\n+\t\t    String.format(\"/ServiceRequest?requester.given=%s&occurrence=eq%s\", PARTICIPANT_GIVEN_NAME, OCCURRENCE_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), referenceAndListParamArgumentCaptor.capture(),\n+\t\t    dateRangeParamArgumentCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getValue(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\tassertThat(referenceAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens()\n+\t\t        .get(0).getChain(),\n+\t\t    equalTo(Practitioner.SP_GIVEN));\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2010, Calendar.MARCH, 31);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByUUID() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_id=%s\", SERVICE_REQUEST_UUID));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    tokenAndListParamArgumentCaptor.capture(), isNull());\n+\t\t\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue(), notNullValue());\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n+\t\tassertThat(tokenAndListParamArgumentCaptor.getValue().getValuesAsQueryTokens().get(0).getValuesAsQueryTokens().get(0)\n+\t\t        .getValue(),\n+\t\t    equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForServiceRequests_shouldSearchForServiceRequestsByLastUpdatedDate() throws Exception {\n+\t\tverifyUri(String.format(\"/ServiceRequest?_lastUpdated=%s\", LAST_UPDATED_DATE));\n+\t\t\n+\t\tverify(service).searchForServiceRequests(isNull(), isNull(), isNull(), isNull(), isNull(), isNull(),\n+\t\t    dateRangeParamArgumentCaptor.capture());\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(2020, Calendar.SEPTEMBER, 3);\n+\t\t\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeParamArgumentCaptor.getValue().getUpperBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\twhen(service.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMDA5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455030099", "body": "```suggestion\r\n\t\tServiceRequest serviceRequest = new ServiceRequest();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\"><span class=\"x x-first\">org.hl7.fhir.r4.model</span><span class=\"pl-k x x-last\">.</span>ServiceRequest</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">ServiceRequest</span> serviceRequest <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ServiceRequest</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-07-15T12:57:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(SERVICE_REQUEST_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0989d123c67747e75a90aad3ef1166ad0ec3f3d4", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex b414a483..4c188615 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -238,7 +238,7 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tretVal.setId(SERVICE_REQUEST_UUID);\n \t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n \n-\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \n \t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n", "next_change": {"commit": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 4c188615..ae867a9e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -206,45 +202,45 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMissMatch() throws Exception {\n \t\tString jsonServiceRequest;\n \t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n \t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n \t\t}\n-\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n+\t\t\n \t\tassertThat(response, isBadRequest());\n \t\tassertThat(response.getContentAsString(),\n-\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n-\n+\t\n \t@Test\n \tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n \t\tOperationOutcome retVal = new OperationOutcome();\n \t\tretVal.setId(SERVICE_REQUEST_UUID);\n \t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\n+\t\t\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\n+\t\t\n \t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON).go();\n-\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n", "next_change": {"commit": "1193da55bc39f558b6133df1cb24a5e409769150", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex ae867a9e..8cc8518d 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -244,4 +619,14 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(response, isOk());\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t}\n+\t\n+\t@Test\n+\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n+\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t}\n }\n", "next_change": {"commit": "8b580c2c19a4c83f2cdde3b5a640e8e23cef26b2", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\nindex 8cc8518d..3c4ba958 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java\n", "chunk": "@@ -518,115 +511,4 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirR4Resourc\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n-\t\n-\t@Test\n-\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isCreated());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldRaiseExceptionForIdMismatch() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isBadRequest());\n-\t\tassertThat(response.getContentAsString(),\n-\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n-\t}\n-\t\n-\t@Test\n-\tpublic void updateServiceRequest_shouldThrowErrorForNonExistentServiceRequest() throws Exception {\n-\t\tString jsonServiceRequest;\n-\t\ttry (InputStream is = this.getClass().getClassLoader()\n-\t\t        .getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n-\t\t\tObjects.requireNonNull(is);\n-\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n-\t\t}\n-\t\t\n-\t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenThrow(\n-\t\t    new MethodNotAllowedException(\"ServiceRequest \" + WRONG_SERVICE_REQUEST_UUID + \" does not exist\"));\n-\t\t\n-\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .jsonContent(jsonServiceRequest).accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isMethodNotAllowed());\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n-\t\tServiceRequest serviceRequest = new ServiceRequest();\n-\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n-\t\t\n-\t\twhen(service.delete(SERVICE_REQUEST_UUID)).thenReturn(serviceRequest);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).accept(FhirMediaTypes.JSON)\n-\t\t        .go();\n-\t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void deleteServiceRequestByWrongUuid_shouldReturn404() throws Exception {\n-\t\twhen(service.delete(WRONG_SERVICE_REQUEST_UUID)).thenReturn(null);\n-\t\t\n-\t\tMockHttpServletResponse response = delete(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n-\t\t\n-\t\tassertThat(response, isNotFound());\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "9907227a91a036191b19903469b7008980f2a23b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9907227a91a036191b19903469b7008980f2a23b", "message": "FM2-223:Add create,update, and delete methods for ServiceRequest", "committedDate": "2020-07-21T12:36:48Z", "type": "commit"}, {"oid": "4347f1766bc15bf6034aaac4a2d3746416870312", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4347f1766bc15bf6034aaac4a2d3746416870312", "message": "FM2-223:adding more parameters", "committedDate": "2020-07-21T12:36:50Z", "type": "commit"}, {"oid": "47b9b670d08496a8f07637ef3de51c95cba6931d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/47b9b670d08496a8f07637ef3de51c95cba6931d", "message": "FM2-223:Fixing formats", "committedDate": "2020-07-21T13:24:06Z", "type": "commit"}, {"oid": "47b9b670d08496a8f07637ef3de51c95cba6931d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/47b9b670d08496a8f07637ef3de51c95cba6931d", "message": "FM2-223:Fixing formats", "committedDate": "2020-07-21T13:24:06Z", "type": "forcePushed"}]}