{"pr_number": 263, "pr_title": "Patch flaky tests for CI/CD", "pr_author": "raphkim", "pr_createdAt": "2020-02-13T23:35:01Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/263", "merge_commit": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "timeline": [{"oid": "8bfa1b3196932d2b217b024b54f3694d96e20ab5", "url": "https://github.com/aws-amplify/amplify-android/commit/8bfa1b3196932d2b217b024b54f3694d96e20ab5", "message": "Split SQLiteStorageAdapter tests to reduce load", "committedDate": "2020-02-13T22:39:03Z", "type": "commit"}, {"oid": "42207af3ed33b6bf918531ed7d3749467116f98d", "url": "https://github.com/aws-amplify/amplify-android/commit/42207af3ed33b6bf918531ed7d3749467116f98d", "message": "Checkstyle fix", "committedDate": "2020-02-13T22:51:20Z", "type": "commit"}, {"oid": "13b3b7c4ba774194e3c16bec01dbaf66d590e1c2", "url": "https://github.com/aws-amplify/amplify-android/commit/13b3b7c4ba774194e3c16bec01dbaf66d590e1c2", "message": "Extend synchronous API timeout", "committedDate": "2020-02-13T23:29:44Z", "type": "commit"}, {"oid": "d9e84de98204a5a132a90088043b23555c1b2044", "url": "https://github.com/aws-amplify/amplify-android/commit/d9e84de98204a5a132a90088043b23555c1b2044", "message": "Whitespace fix", "committedDate": "2020-02-13T23:40:38Z", "type": "commit"}, {"oid": "1d1b2329c3f4ac8a469f99c2aadd30225c10e0f6", "url": "https://github.com/aws-amplify/amplify-android/commit/1d1b2329c3f4ac8a469f99c2aadd30225c10e0f6", "message": "Extend Sqlite operation timeout duration", "committedDate": "2020-02-13T23:51:19Z", "type": "commit"}, {"oid": "cc2f31027e03d1a496bed2fc674898b7590a020f", "url": "https://github.com/aws-amplify/amplify-android/commit/cc2f31027e03d1a496bed2fc674898b7590a020f", "message": "Extend connection error threshold", "committedDate": "2020-02-14T00:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxOTgwOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379619809", "body": "If they are utility methods, then I recommend to put them into utility classes, not into an abstract base.\r\n\r\nAbstract classes are good candidates for enforcing policy on an interface. But, that\u2019s not really what\u2019s needed here. Here, you\u2019re just trying to re-use some utility code in a few places.", "bodyText": "If they are utility methods, then I recommend to put them into utility classes, not into an abstract base.\nAbstract classes are good candidates for enforcing policy on an interface. But, that\u2019s not really what\u2019s needed here. Here, you\u2019re just trying to re-use some utility code in a few places.", "bodyHTML": "<p dir=\"auto\">If they are utility methods, then I recommend to put them into utility classes, not into an abstract base.</p>\n<p dir=\"auto\">Abstract classes are good candidates for enforcing policy on an interface. But, that\u2019s not really what\u2019s needed here. Here, you\u2019re just trying to re-use some utility code in a few places.</p>", "author": "jamesonwilliams", "createdAt": "2020-02-14T20:02:06Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.StrictMode;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testutils.Await;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test the functionality of {@link SQLiteStorageAdapter} operations.\n+ */\n+@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n+public abstract class StorageAdapterInstrumentedTestBase {", "originalCommit": "cc2f31027e03d1a496bed2fc674898b7590a020f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDAyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379644029", "bodyText": "The biggest reason for using abstract class (it can just be a non-final class to be honest) here was to allow re-initialization of SqliteStorageAdapter per test case without having to copy and paste the same code into each individual test. The \"utility methods\" make a direct reference to this instance, so I can't move them to a static utility class either.", "author": "raphkim", "createdAt": "2020-02-14T21:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxOTgwOQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "58d1e55d47267b74c188ca59eba9590bf7a40682", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\ndeleted file mode 100644\nindex 0c6fe6b6..00000000\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n+++ /dev/null\n", "chunk": "@@ -1,202 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amplifyframework.datastore.storage.sqlite;\n-\n-import android.content.Context;\n-import android.os.StrictMode;\n-import androidx.annotation.NonNull;\n-import androidx.test.core.app.ApplicationProvider;\n-\n-import com.amplifyframework.core.Consumer;\n-import com.amplifyframework.core.model.Model;\n-import com.amplifyframework.core.model.ModelProvider;\n-import com.amplifyframework.core.model.ModelSchema;\n-import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n-import com.amplifyframework.datastore.DataStoreException;\n-import com.amplifyframework.datastore.storage.StorageItemChange;\n-import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n-import com.amplifyframework.testutils.Await;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Test the functionality of {@link SQLiteStorageAdapter} operations.\n- */\n-@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n-public abstract class StorageAdapterInstrumentedTestBase {\n-    private static final long SQLITE_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n-    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n-\n-    private SQLiteStorageAdapter sqliteStorageAdapter;\n-    private Context context;\n-\n-    /**\n-     * Enable strict mode for catching SQLite leaks.\n-     */\n-    @BeforeClass\n-    public static void enableStrictMode() {\n-        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n-            .detectLeakedSqlLiteObjects()\n-            .detectLeakedClosableObjects()\n-            .penaltyLog()\n-            .penaltyDeath()\n-            .build());\n-    }\n-\n-    /**\n-     * Setup the required information for SQLiteStorageHelper construction.\n-     * @throws DataStoreException If initialization of storage adapter fails\n-     */\n-    @Before\n-    public void setUp() throws DataStoreException {\n-        context = ApplicationProvider.getApplicationContext();\n-        context.deleteDatabase(DATABASE_NAME);\n-\n-        ModelProvider modelProvider = AmplifyModelProvider.getInstance();\n-        sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelProvider);\n-        List<ModelSchema> setupResults = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.initialize(context, onResult, onError)\n-        );\n-\n-        List<Class<? extends Model>> expectedModels = new ArrayList<>(modelProvider.models());\n-        expectedModels.add(StorageItemChange.Record.class); // Internal\n-        expectedModels.add(PersistentModelVersion.class); // Internal\n-        assertEquals(expectedModels.size(), setupResults.size());\n-    }\n-\n-    /**\n-     * Drop all tables and database, terminate and delete the database.\n-     * @throws DataStoreException from possible underlying DataStore exceptions\n-     */\n-    @After\n-    public void tearDown() throws DataStoreException {\n-        sqliteStorageAdapter.terminate();\n-        context.deleteDatabase(DATABASE_NAME);\n-    }\n-\n-    <T extends Model> void saveModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        saveModel(model, null);\n-    }\n-\n-    <T extends Model> void saveModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return saveModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(\n-            @NonNull T model, @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> Set<T> queryModel(@NonNull Class<T> modelClass) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        return queryModel(modelClass, null);\n-    }\n-\n-    <T extends Model> Set<T> queryModel(\n-            @NonNull Class<T> modelClass, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Iterator<T> resultIterator = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<Iterator<T>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.query(modelClass, predicate, onResult, onError)\n-        );\n-        final Set<T> resultSet = new HashSet<>();\n-        while (resultIterator.hasNext()) {\n-            resultSet.add(resultIterator.next());\n-        }\n-        return resultSet;\n-    }\n-\n-    <T extends Model> void deleteModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        deleteModel(model, null);\n-    }\n-\n-    <T extends Model> void deleteModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return deleteModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(\n-            @NonNull T model,\n-            @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "message": "Merge commit", "committedDate": null}, {"oid": "58d1e55d47267b74c188ca59eba9590bf7a40682", "committedDate": "2020-02-17 12:23:24 -0500", "message": "[aws-datastore] Synchronous adapter utility for instrumentation tests (#265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxOTkzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379619936", "body": "Change to 2020 in all new files ", "bodyText": "Change to 2020 in all new files", "bodyHTML": "<p dir=\"auto\">Change to 2020 in all new files</p>", "author": "jamesonwilliams", "createdAt": "2020-02-14T20:02:24Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "originalCommit": "cc2f31027e03d1a496bed2fc674898b7590a020f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1MjUyNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379652527", "bodyText": "will do.", "author": "raphkim", "createdAt": "2020-02-14T21:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxOTkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "44f10a27884bfac102bb138e2c09f30f2925ae85", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\nindex edcb1ba9..c5f0c835 100644\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\n+++ b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\").\n  * You may not use this file except in compliance with the License.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\nindex edcb1ba9..c5f0c835 100644\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\n+++ b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterDeleteTest.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\").\n  * You may not use this file except in compliance with the License.\n", "next_change": null}]}, "commits_in_main": [{"oid": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "message": "Merge commit", "committedDate": null}, {"oid": "58d1e55d47267b74c188ca59eba9590bf7a40682", "committedDate": "2020-02-17 12:23:24 -0500", "message": "[aws-datastore] Synchronous adapter utility for instrumentation tests (#265)"}, {"oid": "e2d195db98c6f84fbb7f8c98addcbe3043eff1e4", "committedDate": "2020-02-26 10:01:48 -0800", "message": "Use try-with-resources statement to assure that cursor is closed (#282)"}, {"oid": "c338795dc6519c43bd092330d0cc9151e6ededb5", "committedDate": "2020-04-06 17:22:16 -0500", "message": "[aws-datastore] Single responsibility for SynchronousStorageAdapter"}, {"oid": "4e1653410e1e92456601136d285160cd3fa5be6a", "committedDate": "2020-05-06 11:30:56 -0400", "message": "[aws-datastore] Emit StorageItemChange from LocalStorageAdapter"}, {"oid": "5727db5d40c552a7dbd329a98f233bc0c087fc7d", "committedDate": "2020-05-08 20:42:08 -0400", "message": "Adds some miscellaneous, missing method documentation. (#437)"}, {"oid": "017bacb6e4af1e4eb6164f23339f4d6d559ece5a", "committedDate": "2020-12-08 16:36:55 -0800", "message": "fix(aws-datastore): deleting nonexistent model instance no longer fails (#1033)"}, {"oid": "cf02ebedaa7265315470142dd6d580d5fa8930f8", "committedDate": "2021-01-06 17:16:29 -0800", "message": "fix(aws-datastore): publish each cascading delete (#1059)"}, {"oid": "310002804d4e822d0e962f86df2740508c17c7d0", "committedDate": "2021-01-15 10:21:54 -0800", "message": "datastore(feat): support delete by model type with predicate (#1106)"}, {"oid": "01442928fffc6847506c86d4f3f2cb91f8526003", "committedDate": "2021-02-24 11:11:03 -0800", "message": "fix(datastore): fix crash when deleting model with many children (#1121)"}, {"oid": "5022022b939326fca2abe34b92258ab93ca71fc3", "committedDate": "2022-02-02 11:39:56 -0800", "message": "Adding support for custom primary key across the codebase."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMDY3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379620675", "body": "A final utility class `StrictMode` with a single static `enable` method?", "bodyText": "A final utility class StrictMode with a single static enable method?", "bodyHTML": "<p dir=\"auto\">A final utility class <code>StrictMode</code> with a single static <code>enable</code> method?</p>", "author": "jamesonwilliams", "createdAt": "2020-02-14T20:04:04Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.StrictMode;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testutils.Await;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test the functionality of {@link SQLiteStorageAdapter} operations.\n+ */\n+@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n+public abstract class StorageAdapterInstrumentedTestBase {\n+    private static final long SQLITE_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SQLiteStorageAdapter sqliteStorageAdapter;\n+    private Context context;\n+\n+    /**\n+     * Enable strict mode for catching SQLite leaks.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {", "originalCommit": "cc2f31027e03d1a496bed2fc674898b7590a020f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1MDk5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379650995", "bodyText": "sure thing", "author": "raphkim", "createdAt": "2020-02-14T21:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMDY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "44f10a27884bfac102bb138e2c09f30f2925ae85", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\nindex 0c6fe6b6..61431dac 100644\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n+++ b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n", "chunk": "@@ -59,12 +58,7 @@ public abstract class StorageAdapterInstrumentedTestBase {\n      */\n     @BeforeClass\n     public static void enableStrictMode() {\n-        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n-            .detectLeakedSqlLiteObjects()\n-            .detectLeakedClosableObjects()\n-            .penaltyLog()\n-            .penaltyDeath()\n-            .build());\n+        StrictMode.enable();\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\nindex 0c6fe6b6..61431dac 100644\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n+++ b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n", "chunk": "@@ -59,12 +58,7 @@ public abstract class StorageAdapterInstrumentedTestBase {\n      */\n     @BeforeClass\n     public static void enableStrictMode() {\n-        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n-            .detectLeakedSqlLiteObjects()\n-            .detectLeakedClosableObjects()\n-            .penaltyLog()\n-            .penaltyDeath()\n-            .build());\n+        StrictMode.enable();\n     }\n \n     /**\n", "next_change": {"commit": "58d1e55d47267b74c188ca59eba9590bf7a40682", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\ndeleted file mode 100644\nindex 61431dac..00000000\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n+++ /dev/null\n", "chunk": "@@ -1,196 +0,0 @@\n-/*\n- * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amplifyframework.datastore.storage.sqlite;\n-\n-import android.content.Context;\n-import androidx.annotation.NonNull;\n-import androidx.test.core.app.ApplicationProvider;\n-\n-import com.amplifyframework.core.Consumer;\n-import com.amplifyframework.core.model.Model;\n-import com.amplifyframework.core.model.ModelProvider;\n-import com.amplifyframework.core.model.ModelSchema;\n-import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n-import com.amplifyframework.datastore.DataStoreException;\n-import com.amplifyframework.datastore.storage.StorageItemChange;\n-import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n-import com.amplifyframework.testutils.Await;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Test the functionality of {@link SQLiteStorageAdapter} operations.\n- */\n-@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n-public abstract class StorageAdapterInstrumentedTestBase {\n-    private static final long SQLITE_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n-    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n-\n-    private SQLiteStorageAdapter sqliteStorageAdapter;\n-    private Context context;\n-\n-    /**\n-     * Enable strict mode for catching SQLite leaks.\n-     */\n-    @BeforeClass\n-    public static void enableStrictMode() {\n-        StrictMode.enable();\n-    }\n-\n-    /**\n-     * Setup the required information for SQLiteStorageHelper construction.\n-     * @throws DataStoreException If initialization of storage adapter fails\n-     */\n-    @Before\n-    public void setUp() throws DataStoreException {\n-        context = ApplicationProvider.getApplicationContext();\n-        context.deleteDatabase(DATABASE_NAME);\n-\n-        ModelProvider modelProvider = AmplifyModelProvider.getInstance();\n-        sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelProvider);\n-        List<ModelSchema> setupResults = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.initialize(context, onResult, onError)\n-        );\n-\n-        List<Class<? extends Model>> expectedModels = new ArrayList<>(modelProvider.models());\n-        expectedModels.add(StorageItemChange.Record.class); // Internal\n-        expectedModels.add(PersistentModelVersion.class); // Internal\n-        assertEquals(expectedModels.size(), setupResults.size());\n-    }\n-\n-    /**\n-     * Drop all tables and database, terminate and delete the database.\n-     * @throws DataStoreException from possible underlying DataStore exceptions\n-     */\n-    @After\n-    public void tearDown() throws DataStoreException {\n-        sqliteStorageAdapter.terminate();\n-        context.deleteDatabase(DATABASE_NAME);\n-    }\n-\n-    <T extends Model> void saveModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        saveModel(model, null);\n-    }\n-\n-    <T extends Model> void saveModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return saveModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(\n-            @NonNull T model, @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> Set<T> queryModel(@NonNull Class<T> modelClass) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        return queryModel(modelClass, null);\n-    }\n-\n-    <T extends Model> Set<T> queryModel(\n-            @NonNull Class<T> modelClass, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Iterator<T> resultIterator = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<Iterator<T>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.query(modelClass, predicate, onResult, onError)\n-        );\n-        final Set<T> resultSet = new HashSet<>();\n-        while (resultIterator.hasNext()) {\n-            resultSet.add(resultIterator.next());\n-        }\n-        return resultSet;\n-    }\n-\n-    <T extends Model> void deleteModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        deleteModel(model, null);\n-    }\n-\n-    <T extends Model> void deleteModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return deleteModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(\n-            @NonNull T model,\n-            @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "message": "Merge commit", "committedDate": null}, {"oid": "58d1e55d47267b74c188ca59eba9590bf7a40682", "committedDate": "2020-02-17 12:23:24 -0500", "message": "[aws-datastore] Synchronous adapter utility for instrumentation tests (#265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMjQxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379622411", "body": "These methods should go in a class called `SynchronousStorageAdapter` that lives in the test sources. It would be analogous to the existing `SynchronousApi` and `SynchronousDataStore`, but it would pose a synchronous version of the storage adapter interface.\r\n\r\nIf you do it that way, then any test class may use this functionality, not just those who (must) extend this base class. ", "bodyText": "These methods should go in a class called SynchronousStorageAdapter that lives in the test sources. It would be analogous to the existing SynchronousApi and SynchronousDataStore, but it would pose a synchronous version of the storage adapter interface.\nIf you do it that way, then any test class may use this functionality, not just those who (must) extend this base class.", "bodyHTML": "<p dir=\"auto\">These methods should go in a class called <code>SynchronousStorageAdapter</code> that lives in the test sources. It would be analogous to the existing <code>SynchronousApi</code> and <code>SynchronousDataStore</code>, but it would pose a synchronous version of the storage adapter interface.</p>\n<p dir=\"auto\">If you do it that way, then any test class may use this functionality, not just those who (must) extend this base class.</p>", "author": "jamesonwilliams", "createdAt": "2020-02-14T20:08:10Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.StrictMode;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testutils.Await;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test the functionality of {@link SQLiteStorageAdapter} operations.\n+ */\n+@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n+public abstract class StorageAdapterInstrumentedTestBase {\n+    private static final long SQLITE_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SQLiteStorageAdapter sqliteStorageAdapter;\n+    private Context context;\n+\n+    /**\n+     * Enable strict mode for catching SQLite leaks.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n+            .detectLeakedSqlLiteObjects()\n+            .detectLeakedClosableObjects()\n+            .penaltyLog()\n+            .penaltyDeath()\n+            .build());\n+    }\n+\n+    /**\n+     * Setup the required information for SQLiteStorageHelper construction.\n+     * @throws DataStoreException If initialization of storage adapter fails\n+     */\n+    @Before\n+    public void setUp() throws DataStoreException {\n+        context = ApplicationProvider.getApplicationContext();\n+        context.deleteDatabase(DATABASE_NAME);\n+\n+        ModelProvider modelProvider = AmplifyModelProvider.getInstance();\n+        sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelProvider);\n+        List<ModelSchema> setupResults = Await.result(\n+            SQLITE_OPERATION_TIMEOUT_MS,\n+            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n+                sqliteStorageAdapter.initialize(context, onResult, onError)\n+        );\n+\n+        List<Class<? extends Model>> expectedModels = new ArrayList<>(modelProvider.models());\n+        expectedModels.add(StorageItemChange.Record.class); // Internal\n+        expectedModels.add(PersistentModelVersion.class); // Internal\n+        assertEquals(expectedModels.size(), setupResults.size());\n+    }\n+\n+    /**\n+     * Drop all tables and database, terminate and delete the database.\n+     * @throws DataStoreException from possible underlying DataStore exceptions\n+     */\n+    @After\n+    public void tearDown() throws DataStoreException {\n+        sqliteStorageAdapter.terminate();\n+        context.deleteDatabase(DATABASE_NAME);\n+    }\n+\n+    <T extends Model> void saveModel(@NonNull T model) throws DataStoreException {", "originalCommit": "cc2f31027e03d1a496bed2fc674898b7590a020f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "58d1e55d47267b74c188ca59eba9590bf7a40682", "changed_code": [{"header": "diff --git a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java b/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\ndeleted file mode 100644\nindex 0c6fe6b6..00000000\n--- a/aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/StorageAdapterInstrumentedTestBase.java\n+++ /dev/null\n", "chunk": "@@ -1,202 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amplifyframework.datastore.storage.sqlite;\n-\n-import android.content.Context;\n-import android.os.StrictMode;\n-import androidx.annotation.NonNull;\n-import androidx.test.core.app.ApplicationProvider;\n-\n-import com.amplifyframework.core.Consumer;\n-import com.amplifyframework.core.model.Model;\n-import com.amplifyframework.core.model.ModelProvider;\n-import com.amplifyframework.core.model.ModelSchema;\n-import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n-import com.amplifyframework.datastore.DataStoreException;\n-import com.amplifyframework.datastore.storage.StorageItemChange;\n-import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n-import com.amplifyframework.testutils.Await;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Test the functionality of {@link SQLiteStorageAdapter} operations.\n- */\n-@SuppressWarnings(\"DesignForExtension\") // Utility methods shouldn't be overwritten\n-public abstract class StorageAdapterInstrumentedTestBase {\n-    private static final long SQLITE_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n-    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n-\n-    private SQLiteStorageAdapter sqliteStorageAdapter;\n-    private Context context;\n-\n-    /**\n-     * Enable strict mode for catching SQLite leaks.\n-     */\n-    @BeforeClass\n-    public static void enableStrictMode() {\n-        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n-            .detectLeakedSqlLiteObjects()\n-            .detectLeakedClosableObjects()\n-            .penaltyLog()\n-            .penaltyDeath()\n-            .build());\n-    }\n-\n-    /**\n-     * Setup the required information for SQLiteStorageHelper construction.\n-     * @throws DataStoreException If initialization of storage adapter fails\n-     */\n-    @Before\n-    public void setUp() throws DataStoreException {\n-        context = ApplicationProvider.getApplicationContext();\n-        context.deleteDatabase(DATABASE_NAME);\n-\n-        ModelProvider modelProvider = AmplifyModelProvider.getInstance();\n-        sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelProvider);\n-        List<ModelSchema> setupResults = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.initialize(context, onResult, onError)\n-        );\n-\n-        List<Class<? extends Model>> expectedModels = new ArrayList<>(modelProvider.models());\n-        expectedModels.add(StorageItemChange.Record.class); // Internal\n-        expectedModels.add(PersistentModelVersion.class); // Internal\n-        assertEquals(expectedModels.size(), setupResults.size());\n-    }\n-\n-    /**\n-     * Drop all tables and database, terminate and delete the database.\n-     * @throws DataStoreException from possible underlying DataStore exceptions\n-     */\n-    @After\n-    public void tearDown() throws DataStoreException {\n-        sqliteStorageAdapter.terminate();\n-        context.deleteDatabase(DATABASE_NAME);\n-    }\n-\n-    <T extends Model> void saveModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        saveModel(model, null);\n-    }\n-\n-    <T extends Model> void saveModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return saveModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException saveModelExpectingError(\n-            @NonNull T model, @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.save(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> Set<T> queryModel(@NonNull Class<T> modelClass) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        return queryModel(modelClass, null);\n-    }\n-\n-    <T extends Model> Set<T> queryModel(\n-            @NonNull Class<T> modelClass, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Iterator<T> resultIterator = Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<Iterator<T>> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.query(modelClass, predicate, onResult, onError)\n-        );\n-        final Set<T> resultSet = new HashSet<>();\n-        while (resultIterator.hasNext()) {\n-            resultSet.add(resultIterator.next());\n-        }\n-        return resultSet;\n-    }\n-\n-    <T extends Model> void deleteModel(@NonNull T model) throws DataStoreException {\n-        //noinspection ConstantConditions\n-        deleteModel(model, null);\n-    }\n-\n-    <T extends Model> void deleteModel(\n-            @NonNull T model, @NonNull QueryPredicate predicate) throws DataStoreException {\n-        Await.result(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(@NonNull T model) {\n-        //noinspection ConstantConditions\n-        return deleteModelExpectingError(model, null);\n-    }\n-\n-    <T extends Model> DataStoreException deleteModelExpectingError(\n-            @NonNull T model,\n-            @NonNull QueryPredicate predicate) {\n-        return Await.error(\n-            SQLITE_OPERATION_TIMEOUT_MS,\n-            (Consumer<StorageItemChange.Record> onResult, Consumer<DataStoreException> onError) ->\n-                sqliteStorageAdapter.delete(\n-                    model,\n-                    StorageItemChange.Initiator.DATA_STORE_API,\n-                    predicate,\n-                    onResult,\n-                    onError\n-                )\n-        );\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "message": "Merge commit", "committedDate": null}, {"oid": "58d1e55d47267b74c188ca59eba9590bf7a40682", "committedDate": "2020-02-17 12:23:24 -0500", "message": "[aws-datastore] Synchronous adapter utility for instrumentation tests (#265)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMzE5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379623198", "body": "this seems dubious. If we have >5 second round trips to AppSync, we have bigger problems. I suspect there\u2019s something else going on here aside from the timeout being too short. Did you measure the response time of the actual network call?", "bodyText": "this seems dubious. If we have >5 second round trips to AppSync, we have bigger problems. I suspect there\u2019s something else going on here aside from the timeout being too short. Did you measure the response time of the actual network call?", "bodyHTML": "<p dir=\"auto\">this seems dubious. If we have &gt;5 second round trips to AppSync, we have bigger problems. I suspect there\u2019s something else going on here aside from the timeout being too short. Did you measure the response time of the actual network call?</p>", "author": "jamesonwilliams", "createdAt": "2020-02-14T20:10:10Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/SynchronousApi.java", "diffHunk": "@@ -45,6 +46,10 @@\n  * performing various operations.\n  */\n public final class SynchronousApi {\n+\n+    private static final long EXTENDED_TIMEOUT_IN_MILLISECONDS =\n+            TimeUnit.SECONDS.toMillis(10); // 5 seconds is insufficient", "originalCommit": "cc2f31027e03d1a496bed2fc674898b7590a020f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MDk2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379640960", "bodyText": "Actually, the problem existed mainly for the tests that were authenticated via IAM. I believe the most significant delay stemmed from IAM authentication rather than the AppSync itself. I can isolate the extended timeout just for just those tests if you would prefer it that way?", "author": "raphkim", "createdAt": "2020-02-14T20:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMzE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDQzMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/263#discussion_r379694431", "bodyText": "Ahh okay! Hm, you could. Or at least a comment. A self-documenting approach would be to name the timeout like IAM_PLUS_APPSYNC_TIMEOUT or something", "author": "jamesonwilliams", "createdAt": "2020-02-14T23:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMzE5OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "e2d195db98c6f84fbb7f8c98addcbe3043eff1e4", "changed_code": [{"header": "diff --git a/testutils/src/main/java/com/amplifyframework/testutils/SynchronousApi.java b/testutils/src/main/java/com/amplifyframework/testutils/SynchronousApi.java\nindex 3f28f642..7643c6a1 100644\n--- a/testutils/src/main/java/com/amplifyframework/testutils/SynchronousApi.java\n+++ b/testutils/src/main/java/com/amplifyframework/testutils/SynchronousApi.java\n", "chunk": "@@ -46,10 +46,7 @@ import io.reactivex.disposables.Disposables;\n  * performing various operations.\n  */\n public final class SynchronousApi {\n-\n-    private static final long EXTENDED_TIMEOUT_IN_MILLISECONDS =\n-            TimeUnit.SECONDS.toMillis(10); // 5 seconds is insufficient\n-\n+    private static final long OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(10);\n     private static SynchronousApi singleton = null;\n \n     @SuppressWarnings(\"checkstyle:all\") private SynchronousApi() {}\n", "next_change": null}]}, "commits_in_main": [{"oid": "63532d0eb074f7bb220b41f59f54cd55fc33bb21", "message": "Merge commit", "committedDate": null}, {"oid": "e2d195db98c6f84fbb7f8c98addcbe3043eff1e4", "committedDate": "2020-02-26 10:01:48 -0800", "message": "Use try-with-resources statement to assure that cursor is closed (#282)"}, {"oid": "b86643b5f897c5021a1613488e0490e0d12c3588", "committedDate": "2020-02-28 16:35:15 -0800", "message": "[testutils] Add synchronous storage and mobile client to testutils (#281)"}]}, {"oid": "44f10a27884bfac102bb138e2c09f30f2925ae85", "url": "https://github.com/aws-amplify/amplify-android/commit/44f10a27884bfac102bb138e2c09f30f2925ae85", "message": "Update copyright year", "committedDate": "2020-02-14T21:23:03Z", "type": "commit"}, {"oid": "7fb36a2abb3df74774b9f112ad5950a9381d2e6f", "url": "https://github.com/aws-amplify/amplify-android/commit/7fb36a2abb3df74774b9f112ad5950a9381d2e6f", "message": "Remove time threshold for auth failure since latch takes care of it", "committedDate": "2020-02-14T21:52:27Z", "type": "commit"}]}