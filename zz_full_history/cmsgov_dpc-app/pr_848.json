{"pr_number": 848, "pr_title": "DPC-85 add location and lastupdated (if set) to headers", "pr_author": "MrBilnon", "pr_createdAt": "2020-06-11T14:26:44Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/848", "merge_commit": "5c06c5de7a92877a5c58737f8292664f20ff3258", "timeline": [{"oid": "ae42623d5e058ed85c6b57dbcce38b91b4a5745b", "url": "https://github.com/CMSgov/dpc-app/commit/ae42623d5e058ed85c6b57dbcce38b91b4a5745b", "message": "add location and lastupdated (if set) to headers", "committedDate": "2020-06-11T00:08:26Z", "type": "commit"}, {"oid": "ef0bf0589b3d9225fad39106c2da8b953cee2fbc", "url": "https://github.com/CMSgov/dpc-app/commit/ef0bf0589b3d9225fad39106c2da8b953cee2fbc", "message": "Merge branch 'master' into wh/DPC-85-add-location-and-last-modified-to-resource-creation", "committedDate": "2020-06-11T14:31:05Z", "type": "commit"}, {"oid": "66775fdf3296637ce96af1b10d82c879beea2948", "url": "https://github.com/CMSgov/dpc-app/commit/66775fdf3296637ce96af1b10d82c879beea2948", "message": "Merge branch 'master' into wh/DPC-85-add-location-and-last-modified-to-resource-creation", "committedDate": "2020-06-25T20:00:24Z", "type": "commit"}, {"oid": "0fa6758be80591449d927c33d92f5ae22eb228dc", "url": "https://github.com/CMSgov/dpc-app/commit/0fa6758be80591449d927c33d92f5ae22eb228dc", "message": "missing import after merge", "committedDate": "2020-06-25T20:34:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNzc0OQ==", "url": "https://github.com/CMSgov/dpc-app/pull/848#discussion_r445827749", "body": "```suggestion\r\n    public static Practitioner createPractitionerResource(String npi, String orgID) {\r\n```\r\nWould you be okay with making this and the MBI parameter in `createPatientResource()` lowercase? Might get mistaken for constants if someone is scanning the code quickly.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Practitioner createPractitionerResource(String NPI, String orgID) {\n          \n          \n            \n                public static Practitioner createPractitionerResource(String npi, String orgID) {\n          \n      \n    \n    \n  \n\nWould you be okay with making this and the MBI parameter in createPatientResource() lowercase? Might get mistaken for constants if someone is scanning the code quickly.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Practitioner</span> createPractitionerResource(<span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">NPI</span>, <span class=\"pl-smi\">String</span> orgID) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Practitioner</span> createPractitionerResource(<span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">npi</span>, <span class=\"pl-smi\">String</span> orgID) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Would you be okay with making this and the MBI parameter in <code>createPatientResource()</code> lowercase? Might get mistaken for constants if someone is scanning the code quickly.</p>", "author": "em1", "createdAt": "2020-06-25T20:45:14Z", "path": "dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java", "diffHunk": "@@ -199,4 +198,33 @@ private static Validator provideValidator(InjectingConstraintValidatorFactory fa\n                 .configure().constraintValidatorFactory(factory)\n                 .buildValidatorFactory().getValidator();\n     }\n+\n+    public static Practitioner createPractitionerResource(String NPI, String orgID) {", "originalCommit": "0fa6758be80591449d927c33d92f5ae22eb228dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6227935c2c8f60c746642af5d19c52ef0ef438e0", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\nindex 07f8d459..af341c12 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n", "chunk": "@@ -199,9 +199,9 @@ public class APITestHelpers {\n                 .buildValidatorFactory().getValidator();\n     }\n \n-    public static Practitioner createPractitionerResource(String NPI, String orgID) {\n+    public static Practitioner createPractitionerResource(String npi, String orgID) {\n         final Practitioner practitioner = new Practitioner();\n-        practitioner.addIdentifier().setValue(NPI).setSystem(DPCIdentifierSystem.NPPES.getSystem());\n+        practitioner.addIdentifier().setValue(npi).setSystem(DPCIdentifierSystem.NPPES.getSystem());\n         practitioner.addName()\n                 .setFamily(\"Practitioner\").addGiven(\"Test\");\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5c06c5de7a92877a5c58737f8292664f20ff3258", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\nindex 07f8d459..af341c12 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n", "chunk": "@@ -199,9 +199,9 @@ public class APITestHelpers {\n                 .buildValidatorFactory().getValidator();\n     }\n \n-    public static Practitioner createPractitionerResource(String NPI, String orgID) {\n+    public static Practitioner createPractitionerResource(String npi, String orgID) {\n         final Practitioner practitioner = new Practitioner();\n-        practitioner.addIdentifier().setValue(NPI).setSystem(DPCIdentifierSystem.NPPES.getSystem());\n+        practitioner.addIdentifier().setValue(npi).setSystem(DPCIdentifierSystem.NPPES.getSystem());\n         practitioner.addName()\n                 .setFamily(\"Practitioner\").addGiven(\"Test\");\n \n", "next_change": {"commit": "8268740b628bbe9efd4ff4b7550c2aad7852079b", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\nindex af341c12..b9fa8aa4 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/APITestHelpers.java\n", "chunk": "@@ -200,31 +211,122 @@ public class APITestHelpers {\n     }\n \n     public static Practitioner createPractitionerResource(String npi, String orgID) {\n-        final Practitioner practitioner = new Practitioner();\n-        practitioner.addIdentifier().setValue(npi).setSystem(DPCIdentifierSystem.NPPES.getSystem());\n-        practitioner.addName()\n-                .setFamily(\"Practitioner\").addGiven(\"Test\");\n+        return FHIRPractitionerBuilder.newBuilder()\n+                .withNpi(npi)\n+                .withOrgTag(orgID)\n+                .withName(\"Test\", \"Practitioner\")\n+                .build();\n+    }\n+\n+    public static Patient createPatientResource(String mbi, String organizationID) {\n+        return FHIRPatientBuilder.newBuild()\n+                .withMbi(mbi)\n+                .withBirthDate(\"1990-01-01\")\n+                .withName(\"Test\", \"Patient\")\n+                .withGender(Enumerations.AdministrativeGender.OTHER)\n+                .managedBy(organizationID)\n+                .build();\n+    }\n+\n+    public static Provenance createProvenance(String orgId, String practitionerId, List<String> patientIds){\n+        final Coding reasonCoding = new Coding().setSystem(\"http://hl7.org/fhir/v3/ActReason\").setCode(\"TREAT\");\n+\n+        final Coding roleCode = new Coding()\n+                .setSystem(V3RoleClass.AGNT.getSystem())\n+                .setCode(V3RoleClass.AGNT.toCode());\n+\n+        final CodeableConcept roleConcept = new CodeableConcept().addCoding(roleCode);\n+        final Provenance.ProvenanceAgentComponent component = new Provenance.ProvenanceAgentComponent()\n+                .setRole(Collections.singletonList(roleConcept))\n+                .setWho(new Reference(new IdType(\"Organization\", orgId)))\n+                .setOnBehalfOf(new Reference(practitionerId));\n \n-        // Meta data which includes the Org we're using\n-        final Meta meta = new Meta();\n-        meta.addTag(DPCIdentifierSystem.DPC.getSystem(), orgID, \"OrganizationID\");\n-        practitioner.setMeta(meta);\n+        final Provenance provenance = new Provenance()\n+                .setRecorded(Date.valueOf(Instant.now().atZone(ZoneOffset.UTC).toLocalDate()))\n+                .setReason(Collections.singletonList(reasonCoding))\n+                .addAgent(component);\n \n-        return practitioner;\n+        for(String patientId:patientIds){\n+            provenance.addTarget(new Reference(patientId));\n+        }\n+        return provenance;\n     }\n \n-    public static Patient createPatientResource(String mbi, String organizationID) {\n-        final Patient patient = new Patient();\n-        patient.addIdentifier()\n-                .setSystem(DPCIdentifierSystem.MBI.getSystem())\n-                .setValue(mbi);\n+    public static MethodOutcome createResource(IGenericClient client, IBaseResource resource, Map<String,String> extraHeaders){\n+        ICreateTyped iCreateTyped = client.create()\n+                .resource(resource)\n+                .encodedJson();\n+\n+        extraHeaders.entrySet().forEach(entry -> iCreateTyped.withAdditionalHeader(entry.getKey(),entry.getValue()));\n+        return iCreateTyped.execute();\n+    }\n+\n+    public static MethodOutcome createResource(IGenericClient client, IBaseResource resource){\n+        return createResource(client,resource, Maps.newHashMap());\n+    }\n \n-        patient.addName().setFamily(\"Patient\").addGiven(\"Test\");\n-        patient.setBirthDate(Date.valueOf(\"1990-01-01\"));\n-        patient.setGender(Enumerations.AdministrativeGender.OTHER);\n-        patient.setManagingOrganization(new Reference(new IdType(\"Organization\", organizationID)));\n+    public  static <T extends IBaseResource> T getResourceById(IGenericClient client, Class<T> clazz, String resourceId){\n+       return client.read()\n+                .resource(clazz)\n+                .withId(resourceId).encodedJson().execute();\n+    }\n+\n+    public  static Bundle resourceSearch(IGenericClient client, ResourceType resourceType, Map<String,List<String>> searchParams){\n+        return client\n+                .search()\n+                .forResource(resourceType.name())\n+                .whereMap(searchParams)\n+                .returnBundle(Bundle.class)\n+                .encodedJson()\n+                .execute();\n+    }\n \n-        return patient;\n+    public  static Bundle resourceSearch(IGenericClient client, ResourceType resourceType){\n+        return resourceSearch(client,resourceType, Maps.newHashMap());\n     }\n \n+    public static IBaseOperationOutcome deleteResourceById(IGenericClient client, ResourceType resourceType, String resourceId){\n+        return client.delete()\n+                .resourceById(resourceType.name(), resourceId)\n+                .execute();\n+    }\n+\n+    public static MethodOutcome updateResource(IGenericClient client, String id, IBaseResource resource, Map<String,String> extraHeaders){\n+        IUpdateExecutable executable = client\n+                .update()\n+                .resource(resource)\n+                .withId(id)\n+                .encodedJson();\n+\n+        extraHeaders.entrySet().forEach(entry -> executable.withAdditionalHeader(entry.getKey(),entry.getValue()));\n+       return executable.execute();\n+    }\n+\n+    public static MethodOutcome updateResource(IGenericClient client, String id, IBaseResource resource){\n+       return updateResource(client, id,resource, Maps.newHashMap());\n+    }\n+\n+    public static Bundle getPatientEverything(IGenericClient client,String patientId, String provenance){\n+        return client\n+                .operation()\n+                .onInstance(new IdType(\"Patient\", patientId))\n+                .named(\"$everything\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", provenance)\n+                .execute();\n+    }\n+\n+    public static Bundle doGroupExport(IGenericClient client,String groupId, String provenance){\n+        return client\n+                .operation()\n+                .onInstance(new IdType(\"Group\", groupId))\n+                .named(\"$export\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", provenance)\n+                .execute();\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5c06c5de7a92877a5c58737f8292664f20ff3258", "message": "Merge commit", "committedDate": null}, {"oid": "74698a5be2e71b7e0885114f12670ba267b4f68a", "committedDate": "2020-09-17 11:07:31 -0700", "message": "DPC-573: Allow label creation from web app / Accept token label in body. (#1044)"}, {"oid": "953f35976fb1d0a3306512407dd19613374c2884", "committedDate": "2020-12-13 21:09:52 -0800", "message": "DPC-952 Do not allow an org to view another org's Group (#1139)"}, {"oid": "331da8399abb518db510b6ad2974a2003691713d", "committedDate": "2020-12-18 12:53:31 -0800", "message": "DPC-953 Prohibit orgs from adding another orgs patient to their group. (#1144)"}, {"oid": "8268740b628bbe9efd4ff4b7550c2aad7852079b", "committedDate": "2020-12-21 17:24:19 -0600", "message": "DPC-979 Fix Group & Practitioner resource request body forgery issue. (#1151)"}, {"oid": "832ecfb1b1fe6196e7bbec1d5115786d43f95af3", "committedDate": "2021-02-09 12:10:50 -0500", "message": "DPC-917 Add since parameter to patient/everything endpoint (#1175)"}, {"oid": "248e98e81246e0c43b334622852e6619d8506976", "committedDate": "2021-02-25 14:51:06 -0800", "message": "DPC-1034 honor patient opt outs during exports (#1180)"}, {"oid": "fe5f8d8d6b3b10ffe0a6cf02de3dd7b826ed4fa9", "committedDate": "2021-08-05 14:56:50 -0500", "message": "DPC-1415: Return FHIR R4 for V2 Jobs (#1357)"}]}, {"oid": "6227935c2c8f60c746642af5d19c52ef0ef438e0", "url": "https://github.com/CMSgov/dpc-app/commit/6227935c2c8f60c746642af5d19c52ef0ef438e0", "message": "lower case variables", "committedDate": "2020-06-25T20:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNDI0NQ==", "url": "https://github.com/CMSgov/dpc-app/pull/848#discussion_r445834245", "body": "Do these need to be `Location` and `Last-Modified`? Or is it case insensitive?", "bodyText": "Do these need to be Location and Last-Modified? Or is it case insensitive?", "bodyHTML": "<p dir=\"auto\">Do these need to be <code>Location</code> and <code>Last-Modified</code>? Or is it case insensitive?</p>", "author": "em1", "createdAt": "2020-06-25T20:58:19Z", "path": "dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java", "diffHunk": "@@ -245,4 +244,33 @@ void testCreateInvalidPatient() throws IOException, URISyntaxException {\n \n         conn.disconnect();\n     }\n+\n+    @Test\n+    public void testCreatePatientReturnsAppropriateHeaders() {\n+        IGenericClient client = APIAuthHelpers.buildAuthenticatedClient(ctx, getBaseURL(), ORGANIZATION_TOKEN, PUBLIC_KEY_ID, PRIVATE_KEY);\n+        Patient patient = APITestHelpers.createPatientResource(\"4S41C00AA00\", APITestHelpers.ORGANIZATION_ID);\n+\n+        MethodOutcome methodOutcome = client.create()\n+                .resource(patient)\n+                .encodedJson()\n+                .execute();\n+\n+        String location = methodOutcome.getResponseHeaders().get(\"location\").get(0);\n+        String date = methodOutcome.getResponseHeaders().get(\"last-modified\").get(0);", "originalCommit": "6227935c2c8f60c746642af5d19c52ef0ef438e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0MTU0Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/848#discussion_r445841542", "bodyText": "Do these need to be Location and Last-Modified? Or is it case insensitive?\n\n@EmBh I went with the capitalized version originally but for some reason, the IGenericClient returns lower case from the response headers.", "author": "MrBilnon", "createdAt": "2020-06-25T21:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNDI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0MjgzMA==", "url": "https://github.com/CMSgov/dpc-app/pull/848#discussion_r445842830", "bodyText": "Oh weird! That's good to know. \ud83d\udc4d", "author": "em1", "createdAt": "2020-06-25T21:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNDI0NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c00ba9164b5f59e84f82f02d8240a5f3c096db08", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\nindex 1e5c89de..103e3c55 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n", "chunk": "@@ -246,31 +259,165 @@ class PatientResourceTest extends AbstractSecureApplicationTest {\n     }\n \n     @Test\n-    public void testCreatePatientReturnsAppropriateHeaders() {\n-        IGenericClient client = APIAuthHelpers.buildAuthenticatedClient(ctx, getBaseURL(), ORGANIZATION_TOKEN, PUBLIC_KEY_ID, PRIVATE_KEY);\n-        Patient patient = APITestHelpers.createPatientResource(\"4S41C00AA00\", APITestHelpers.ORGANIZATION_ID);\n+    @Order(6)\n+    void testPatientEverythingWithoutGroupFetchesData() throws IOException, URISyntaxException, GeneralSecurityException {\n+        IGenericClient client = generateClient(ORGANIZATION_ID, ORGANIZATION_NPI, \"patient-everything-key\");\n+        APITestHelpers.setupPractitionerTest(client, parser);\n+\n+        String mbi = MockBlueButtonClient.TEST_PATIENT_MBIS.get(2);\n+        Patient patient = fetchPatient(client, mbi);\n+        Practitioner practitioner = fetchPractitionerByNPI(client, \"1234329724\");\n+        final String patientId = FHIRExtractors.getEntityUUID(patient.getId()).toString();\n+\n+        // Patient without Group should still return data\n+        Bundle result = client\n+                .operation()\n+                .onInstance(new IdType(\"Patient\", patientId))\n+                .named(\"$everything\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", generateProvenance(ORGANIZATION_ID, practitioner.getId()))\n+                .execute();\n \n-        MethodOutcome methodOutcome = client.create()\n-                .resource(patient)\n+        assertEquals(64, result.getTotal(), \"Should have 64 entries in Bundle\");\n+\n+        // Unattributed organization (unauthorized) without Group\n+        client = generateClient(OTHER_ORG_ID, \"1112111111\", \"patient-everything-key-1\");\n+        practitioner = createRandomPractitionerForOrg(client, OTHER_ORG_ID);\n+\n+        String provenance = generateProvenance(OTHER_ORG_ID, practitioner.getId());\n+\n+        IOperationUntypedWithInput<Bundle> everythingOp = client\n+                .operation()\n+                .onInstance(new IdType(\"Patient\", patientId))\n+                .named(\"$everything\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", provenance);\n+\n+        assertThrows(InternalErrorException.class, everythingOp::execute);\n+    }\n+\n+    @Test\n+    @Order(7)\n+    void testPatientEverythingWithGroupFetchesData() throws IOException, URISyntaxException, GeneralSecurityException {\n+        IGenericClient client = generateClient(ORGANIZATION_ID, ORGANIZATION_NPI, \"patient-everything-key-2\");\n+        APITestHelpers.setupPractitionerTest(client, parser);\n+\n+        String mbi = MockBlueButtonClient.TEST_PATIENT_MBIS.get(2);\n+        Patient patient = fetchPatient(client, mbi);\n+        Practitioner practitioner = fetchPractitionerByNPI(client, \"1234329724\");\n+        final String patientId = FHIRExtractors.getEntityUUID(patient.getId()).toString();\n+\n+        // Patient in Group should also return data\n+        Group group = SeedProcessor.createBaseAttributionGroup(FHIRExtractors.getProviderNPI(practitioner), ORGANIZATION_ID);\n+        Reference patientRef = new Reference(\"Patient/\" + patientId);\n+        group.addMember().setEntity(patientRef);\n+\n+        client\n+                .create()\n+                .resource(group)\n+                .withAdditionalHeader(\"X-Provenance\", generateProvenance(ORGANIZATION_ID, practitioner.getId()))\n                 .encodedJson()\n                 .execute();\n \n-        String location = methodOutcome.getResponseHeaders().get(\"location\").get(0);\n-        String date = methodOutcome.getResponseHeaders().get(\"last-modified\").get(0);\n-        assertNotNull(location);\n-        assertNotNull(date);\n+        Bundle result = client\n+                .operation()\n+                .onInstance(new IdType(\"Patient\", patientId))\n+                .named(\"$everything\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", generateProvenance(ORGANIZATION_ID, practitioner.getId()))\n+                .execute();\n \n-        Patient foundPatient = client.read()\n-                .resource(Patient.class)\n-                .withUrl(location)\n+        assertEquals(64, result.getTotal(), \"Should have 64 entries in Bundle\");\n+        for (Bundle.BundleEntryComponent bec : result.getEntry()) {\n+            List<ResourceType> resourceTypes = List.of(ResourceType.Coverage, ResourceType.ExplanationOfBenefit, ResourceType.Patient);\n+            assertTrue(resourceTypes.contains(bec.getResource().getResourceType()), \"Resource type should be Coverage, EOB, or Patient\");\n+        }\n+\n+        // Unattributed organization (unauthorized) with Group\n+        client = generateClient(OTHER_ORG_ID, \"1112111111\", \"patient-everything-key-3\");\n+        practitioner = createRandomPractitionerForOrg(client, OTHER_ORG_ID);\n+\n+        group = SeedProcessor.createBaseAttributionGroup(FHIRExtractors.getProviderNPI(practitioner), OTHER_ORG_ID);\n+        patientRef = new Reference(\"Patient/\" + patientId);\n+        group.addMember().setEntity(patientRef);\n+\n+        String provenance = generateProvenance(OTHER_ORG_ID, practitioner.getId());\n+        client\n+                .create()\n+                .resource(group)\n+                .withAdditionalHeader(\"X-Provenance\", provenance)\n                 .encodedJson()\n                 .execute();\n \n-        assertEquals(patient.getIdentifierFirstRep().getValue(), foundPatient.getIdentifierFirstRep().getValue());\n+        IOperationUntypedWithInput<Bundle> everythingOp = client\n+                .operation()\n+                .onInstance(new IdType(\"Patient\", patientId))\n+                .named(\"$everything\")\n+                .withNoParameters(Parameters.class)\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .withAdditionalHeader(\"X-Provenance\", provenance);\n \n-        client.delete()\n-                .resource(foundPatient)\n+        assertThrows(InternalErrorException.class, everythingOp::execute);\n+    }\n+\n+    private IGenericClient generateClient(String orgID, String orgNPI, String keyLabel) throws IOException, URISyntaxException, GeneralSecurityException {\n+        final String macaroon = FHIRHelpers.registerOrganization(attrClient, parser, orgID, orgNPI, getAdminURL());\n+        final Pair<UUID, PrivateKey> uuidPrivateKeyPair = APIAuthHelpers.generateAndUploadKey(keyLabel, orgID, GOLDEN_MACAROON, getBaseURL());\n+        return APIAuthHelpers.buildAuthenticatedClient(ctx, getBaseURL(), macaroon, uuidPrivateKeyPair.getLeft(), uuidPrivateKeyPair.getRight(), false, true);\n+    }\n+\n+    private String generateProvenance(String orgID, String practitionerID) {\n+        return PROVENANCE_FMT.replaceAll(\"ORGANIZATION_ID\", orgID).replace(\"PRACTITIONER_ID\", practitionerID);\n+    }\n+\n+    private Bundle fetchPatients(IGenericClient client) {\n+        return client\n+                .search()\n+                .forResource(Patient.class)\n+                .encodedJson()\n+                .returnBundle(Bundle.class)\n+                .execute();\n+    }\n+\n+    private Patient fetchPatient(IGenericClient client, String mbi) {\n+        return (Patient) fetchPatientBundleByMBI(client, mbi).getEntry().get(0).getResource();\n+    }\n+\n+    private Bundle fetchPatientBundleByMBI(IGenericClient client, String mbi) {\n+        return client\n+                .search()\n+                .forResource(Patient.class)\n+                .where(Patient.IDENTIFIER.exactly().systemAndCode(DPCIdentifierSystem.MBI.getSystem(), mbi))\n+                .returnBundle(Bundle.class)\n                 .encodedJson()\n                 .execute();\n     }\n+\n+    private Practitioner fetchPractitionerByNPI(IGenericClient client, String npi) {\n+        Bundle practSearch = client\n+                .search()\n+                .forResource(Practitioner.class)\n+                .where(Practitioner.IDENTIFIER.exactly().code(npi))\n+                .returnBundle(Bundle.class)\n+                .encodedJson()\n+                .execute();\n+        return (Practitioner) practSearch.getEntry().get(0).getResource();\n+    }\n+\n+    private Practitioner createRandomPractitionerForOrg(IGenericClient client, String orgId) {\n+        Practitioner practitioner = APITestHelpers.createPractitionerResource(NPIUtil.generateNPI(), orgId);\n+        MethodOutcome methodOutcome = client.create()\n+                .resource(practitioner)\n+                .encodedJson()\n+                .execute();\n+        return (Practitioner) methodOutcome.getResource();\n+    }\n+\n }\n", "next_change": {"commit": "248e98e81246e0c43b334622852e6619d8506976", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\nindex 103e3c55..98f8a7c0 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n", "chunk": "@@ -420,4 +590,32 @@ class PatientResourceTest extends AbstractSecureApplicationTest {\n         return (Practitioner) methodOutcome.getResource();\n     }\n \n+    private void optOutPatient(String mbi){\n+        Consent consent = new Consent();\n+        consent.setStatus(Consent.ConsentState.ACTIVE);\n+\n+        Coding categoryCoding = new Coding(\"http://loinc.org\",\"64292-6\", null);\n+        CodeableConcept category = new CodeableConcept();\n+        category.setCoding(List.of(categoryCoding));\n+        consent.setCategory(List.of(category));\n+\n+        String patientRefPath = \"/Patient?identity=|\"+mbi;\n+        consent.setPatient(new Reference(\"http://api.url\" + patientRefPath));\n+\n+        java.util.Date date = java.util.Date.from(Instant.now());\n+        consent.setDateTime(date);\n+\n+        Reference orgRef = new Reference(\"Organization/\" + UUID.randomUUID().toString());\n+        consent.setOrganization(List.of(orgRef));\n+\n+        String policyUrl = \"http://hl7.org/fhir/ConsentPolicy/opt-out\";\n+        consent.setPolicyRule(policyUrl);\n+\n+       consentClient\n+                .create()\n+                .resource(consent)\n+                .encodedJson()\n+                .execute();\n+    }\n+\n }\n", "next_change": {"commit": "6fda76ed27578bab35b5384aea1986d786a19205", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\nindex 98f8a7c0..ec8e6e41 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n", "chunk": "@@ -611,7 +591,7 @@ class PatientResourceTest extends AbstractSecureApplicationTest {\n         String policyUrl = \"http://hl7.org/fhir/ConsentPolicy/opt-out\";\n         consent.setPolicyRule(policyUrl);\n \n-       consentClient\n+        consentClient\n                 .create()\n                 .resource(consent)\n                 .encodedJson()\n", "next_change": {"commit": "a91421bee2fda747f0338d38a190115ef7f425b7", "changed_code": [{"header": "diff --git a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\nindex ec8e6e41..79ab7ee6 100644\n--- a/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n+++ b/dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/PatientResourceTest.java\n", "chunk": "@@ -591,7 +591,7 @@ class PatientResourceTest extends AbstractSecureApplicationTest {\n         String policyUrl = \"http://hl7.org/fhir/ConsentPolicy/opt-out\";\n         consent.setPolicyRule(policyUrl);\n \n-        consentClient\n+       consentClient\n                 .create()\n                 .resource(consent)\n                 .encodedJson()\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5c06c5de7a92877a5c58737f8292664f20ff3258", "message": "Merge commit", "committedDate": null}, {"oid": "d44688bf923c6d6db98164432f2adf9604d0b9e1", "committedDate": "2020-07-07 18:04:37 -0400", "message": "DPC-56: Patient/$everything (#894)"}, {"oid": "74aa74195ecb72db9fb6facf294cc8ab2376ae71", "committedDate": "2020-07-10 11:28:51 -0400", "message": "Revert Patient/$everything (#901)"}, {"oid": "f0e0fc3c2545770ac07f862d465d84d3dabde78e", "committedDate": "2020-07-23 16:24:42 -0400", "message": "DPC-551: Restore /Patient/$everything (#925)"}, {"oid": "c00ba9164b5f59e84f82f02d8240a5f3c096db08", "committedDate": "2020-12-11 10:49:20 -0600", "message": "DPC-916 fix: Remove requirement for Patient to be in a group for Patient/$everything (#1138)"}, {"oid": "331da8399abb518db510b6ad2974a2003691713d", "committedDate": "2020-12-18 12:53:31 -0800", "message": "DPC-953 Prohibit orgs from adding another orgs patient to their group. (#1144)"}, {"oid": "8268740b628bbe9efd4ff4b7550c2aad7852079b", "committedDate": "2020-12-21 17:24:19 -0600", "message": "DPC-979 Fix Group & Practitioner resource request body forgery issue. (#1151)"}, {"oid": "832ecfb1b1fe6196e7bbec1d5115786d43f95af3", "committedDate": "2021-02-09 12:10:50 -0500", "message": "DPC-917 Add since parameter to patient/everything endpoint (#1175)"}, {"oid": "248e98e81246e0c43b334622852e6619d8506976", "committedDate": "2021-02-25 14:51:06 -0800", "message": "DPC-1034 honor patient opt outs during exports (#1180)"}, {"oid": "6fda76ed27578bab35b5384aea1986d786a19205", "committedDate": "2021-04-28 11:34:05 -0500", "message": "DPC-1326: Add columns to JobQueueBatch to hold org and provider NPIs (#1268)"}, {"oid": "a91421bee2fda747f0338d38a190115ef7f425b7", "committedDate": "2021-04-29 14:50:57 -0500", "message": "DPC-1233: Refactor Aggregation Service to receive org and provider NPIs (#1264)"}, {"oid": "fe5f8d8d6b3b10ffe0a6cf02de3dd7b826ed4fa9", "committedDate": "2021-08-05 14:56:50 -0500", "message": "DPC-1415: Return FHIR R4 for V2 Jobs (#1357)"}]}]}