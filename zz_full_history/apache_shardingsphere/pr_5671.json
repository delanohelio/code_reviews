{"pr_number": 5671, "pr_title": "Initialize basic code structure for shardingsphere-cluster", "pr_author": "menghaoranss", "pr_createdAt": "2020-05-18T09:35:41Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5671", "merge_commit": "f4e945657122d36d751ab2b580a63849d4477bc1", "timeline": [{"oid": "25d230838ea29de12b251477d2a08b03c8223e13", "url": "https://github.com/apache/shardingsphere/commit/25d230838ea29de12b251477d2a08b03c8223e13", "message": "rename module name & configuration design and implement", "committedDate": "2020-05-18T08:23:03Z", "type": "commit"}, {"oid": "6dd29e16cc2f63b031bd0d4639a1214a4d32ef08", "url": "https://github.com/apache/shardingsphere/commit/6dd29e16cc2f63b031bd0d4639a1214a4d32ef08", "message": "add unit tests", "committedDate": "2020-05-18T09:16:22Z", "type": "commit"}, {"oid": "3851d1433760abba8246f837e956eaa77bf0dfa9", "url": "https://github.com/apache/shardingsphere/commit/3851d1433760abba8246f837e956eaa77bf0dfa9", "message": "revise java doc", "committedDate": "2020-05-18T09:25:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3OTU1NQ==", "url": "https://github.com/apache/shardingsphere/pull/5671#discussion_r426979555", "body": "There should be a blank line here.", "bodyText": "There should be a blank line here.", "bodyHTML": "<p dir=\"auto\">There should be a blank line here.</p>", "author": "dongzl", "createdAt": "2020-05-19T01:32:46Z", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.configuration.swapper;\n+\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartBeatConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartBeatConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;\n+\n+/**\n+ * Cluster configuration YAML swapper.\n+ */\n+public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlClusterConfiguration, ClusterConfiguration> {\n+    @Override", "originalCommit": "3851d1433760abba8246f837e956eaa77bf0dfa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4MzEyNg==", "url": "https://github.com/apache/shardingsphere/pull/5671#discussion_r426983126", "bodyText": "thanks, i will fix it.", "author": "menghaoranss", "createdAt": "2020-05-19T01:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3OTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a49c4e3216f627460b9d540866201dd81684523", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 43dfbaf6f2d..c512e00f1a3 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -27,6 +27,7 @@ import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;\n  * Cluster configuration YAML swapper.\n  */\n public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlClusterConfiguration, ClusterConfiguration> {\n+    \n     @Override\n     public YamlClusterConfiguration swap(final ClusterConfiguration clusterConfiguration) {\n         final YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f4e945657122d36d751ab2b580a63849d4477bc1", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 43dfbaf6f2d..c512e00f1a3 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -27,6 +27,7 @@ import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;\n  * Cluster configuration YAML swapper.\n  */\n public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlClusterConfiguration, ClusterConfiguration> {\n+    \n     @Override\n     public YamlClusterConfiguration swap(final ClusterConfiguration clusterConfiguration) {\n         final YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n", "next_change": {"commit": "b1f3c9c66c4d6e329c48e04a33f23657d621e366", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex c512e00f1a3..2cc698de94d 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -36,6 +36,7 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n         yamlHeartBeatConfiguration.setInterval(clusterConfiguration.getHeartBeat().getInterval());\n         yamlHeartBeatConfiguration.setRetryEnable(clusterConfiguration.getHeartBeat().getRetryEnable());\n         yamlHeartBeatConfiguration.setRetryMaximum(clusterConfiguration.getHeartBeat().getRetryMaximum());\n+        yamlHeartBeatConfiguration.setThreadCount(clusterConfiguration.getHeartBeat().getThreadCount());\n         yamlClusterConfiguration.setHeartBeat(yamlHeartBeatConfiguration);\n         return yamlClusterConfiguration;\n     }\n", "next_change": {"commit": "e690ac1166890fdd60c899ebed5d1c3530d9ed96", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 2cc698de94d..72129048bea 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -36,6 +36,7 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n         yamlHeartBeatConfiguration.setInterval(clusterConfiguration.getHeartBeat().getInterval());\n         yamlHeartBeatConfiguration.setRetryEnable(clusterConfiguration.getHeartBeat().getRetryEnable());\n         yamlHeartBeatConfiguration.setRetryMaximum(clusterConfiguration.getHeartBeat().getRetryMaximum());\n+        yamlHeartBeatConfiguration.setRetryInterval(clusterConfiguration.getHeartBeat().getRetryInterval());\n         yamlHeartBeatConfiguration.setThreadCount(clusterConfiguration.getHeartBeat().getThreadCount());\n         yamlClusterConfiguration.setHeartBeat(yamlHeartBeatConfiguration);\n         return yamlClusterConfiguration;\n", "next_change": {"commit": "34d5455097c3d18e7963d58eb6e3a4b2394c645e", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 72129048bea..91596343e7f 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -31,28 +31,28 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n     @Override\n     public YamlClusterConfiguration swap(final ClusterConfiguration clusterConfiguration) {\n         final YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n-        final YamlHeartBeatConfiguration yamlHeartBeatConfiguration = new YamlHeartBeatConfiguration();\n-        yamlHeartBeatConfiguration.setSql(clusterConfiguration.getHeartBeat().getSql());\n-        yamlHeartBeatConfiguration.setInterval(clusterConfiguration.getHeartBeat().getInterval());\n-        yamlHeartBeatConfiguration.setRetryEnable(clusterConfiguration.getHeartBeat().getRetryEnable());\n-        yamlHeartBeatConfiguration.setRetryMaximum(clusterConfiguration.getHeartBeat().getRetryMaximum());\n-        yamlHeartBeatConfiguration.setRetryInterval(clusterConfiguration.getHeartBeat().getRetryInterval());\n-        yamlHeartBeatConfiguration.setThreadCount(clusterConfiguration.getHeartBeat().getThreadCount());\n-        yamlClusterConfiguration.setHeartBeat(yamlHeartBeatConfiguration);\n+        final YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n+        yamlHeartBeatConfiguration.setSql(clusterConfiguration.getHeartbeat().getSql());\n+        yamlHeartBeatConfiguration.setInterval(clusterConfiguration.getHeartbeat().getInterval());\n+        yamlHeartBeatConfiguration.setRetryEnable(clusterConfiguration.getHeartbeat().getRetryEnable());\n+        yamlHeartBeatConfiguration.setRetryMaximum(clusterConfiguration.getHeartbeat().getRetryMaximum());\n+        yamlHeartBeatConfiguration.setRetryInterval(clusterConfiguration.getHeartbeat().getRetryInterval());\n+        yamlHeartBeatConfiguration.setThreadCount(clusterConfiguration.getHeartbeat().getThreadCount());\n+        yamlClusterConfiguration.setHeartbeat(yamlHeartBeatConfiguration);\n         return yamlClusterConfiguration;\n     }\n     \n     @Override\n     public ClusterConfiguration swap(final YamlClusterConfiguration yamlConfiguration) {\n         final ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n-        final HeartBeatConfiguration heartBeatConfiguration = new HeartBeatConfiguration();\n-        heartBeatConfiguration.setSql(yamlConfiguration.getHeartBeat().getSql());\n-        heartBeatConfiguration.setInterval(yamlConfiguration.getHeartBeat().getInterval());\n-        heartBeatConfiguration.setRetryEnable(yamlConfiguration.getHeartBeat().getRetryEnable());\n-        heartBeatConfiguration.setRetryMaximum(yamlConfiguration.getHeartBeat().getRetryMaximum());\n-        heartBeatConfiguration.setRetryInterval(yamlConfiguration.getHeartBeat().getRetryInterval());\n-        heartBeatConfiguration.setThreadCount(yamlConfiguration.getHeartBeat().getThreadCount());\n-        clusterConfiguration.setHeartBeat(heartBeatConfiguration);\n+        final HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n+        heartBeatConfiguration.setSql(yamlConfiguration.getHeartbeat().getSql());\n+        heartBeatConfiguration.setInterval(yamlConfiguration.getHeartbeat().getInterval());\n+        heartBeatConfiguration.setRetryEnable(yamlConfiguration.getHeartbeat().getRetryEnable());\n+        heartBeatConfiguration.setRetryMaximum(yamlConfiguration.getHeartbeat().getRetryMaximum());\n+        heartBeatConfiguration.setRetryInterval(yamlConfiguration.getHeartbeat().getRetryInterval());\n+        heartBeatConfiguration.setThreadCount(yamlConfiguration.getHeartbeat().getThreadCount());\n+        clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n         return clusterConfiguration;\n     }\n }\n", "next_change": {"commit": "80330ef5005985c905640fe8de5ef1b26b219047", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 91596343e7f..42f1a3e2c6a 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -46,12 +47,13 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n     public ClusterConfiguration swap(final YamlClusterConfiguration yamlConfiguration) {\n         final ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n         final HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n-        heartBeatConfiguration.setSql(yamlConfiguration.getHeartbeat().getSql());\n-        heartBeatConfiguration.setInterval(yamlConfiguration.getHeartbeat().getInterval());\n-        heartBeatConfiguration.setRetryEnable(yamlConfiguration.getHeartbeat().getRetryEnable());\n-        heartBeatConfiguration.setRetryMaximum(yamlConfiguration.getHeartbeat().getRetryMaximum());\n-        heartBeatConfiguration.setRetryInterval(yamlConfiguration.getHeartbeat().getRetryInterval());\n-        heartBeatConfiguration.setThreadCount(yamlConfiguration.getHeartbeat().getThreadCount());\n+        YamlHeartbeatConfiguration heartbeat = yamlConfiguration.getHeartbeat();\n+        heartBeatConfiguration.setSql(heartbeat.getSql());\n+        heartBeatConfiguration.setInterval(heartbeat.getInterval());\n+        heartBeatConfiguration.setRetryEnable(heartbeat.getRetryEnable());\n+        heartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n+        heartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n+        heartBeatConfiguration.setThreadCount(null == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n         clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n         return clusterConfiguration;\n     }\n", "next_change": {"commit": "3cd8b2297f0f2d7599e00e7860052f1e96e49faf", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 42f1a3e2c6a..3b9af8f302f 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -44,13 +44,13 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n     }\n     \n     @Override\n-    public ClusterConfiguration swap(final YamlClusterConfiguration yamlConfiguration) {\n+    public ClusterConfiguration swapToObject(final YamlClusterConfiguration yamlConfiguration) {\n         final ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n         final HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n         YamlHeartbeatConfiguration heartbeat = yamlConfiguration.getHeartbeat();\n         heartBeatConfiguration.setSql(heartbeat.getSql());\n         heartBeatConfiguration.setInterval(heartbeat.getInterval());\n-        heartBeatConfiguration.setRetryEnable(heartbeat.getRetryEnable());\n+        heartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n         heartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n         heartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n         heartBeatConfiguration.setThreadCount(null == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n", "next_change": {"commit": "ad43ff34929a2c704248ec1b43ac4b19f2c4076b", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 3b9af8f302f..3e2f79c271b 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -53,7 +53,7 @@ public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlCl\n         heartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n         heartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n         heartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n-        heartBeatConfiguration.setThreadCount(null == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n+        heartBeatConfiguration.setThreadCount(0 == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n         clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n         return clusterConfiguration;\n     }\n", "next_change": {"commit": "bee61c2277da0b81bde4da1956973d6114a0196d", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\nindex 3e2f79c271b..086e3341834 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n", "chunk": "@@ -29,32 +29,32 @@ import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;\n public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlClusterConfiguration, ClusterConfiguration> {\n     \n     @Override\n-    public YamlClusterConfiguration swapToYamlConfiguration(final ClusterConfiguration clusterConfiguration) {\n-        final YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n-        final YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n-        HeartbeatConfiguration heartbeat = clusterConfiguration.getHeartbeat();\n+    public YamlClusterConfiguration swapToYamlConfiguration(final ClusterConfiguration data) {\n+        YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n+        HeartbeatConfiguration heartbeat = data.getHeartbeat();\n         yamlHeartBeatConfiguration.setSql(heartbeat.getSql());\n         yamlHeartBeatConfiguration.setInterval(heartbeat.getInterval());\n         yamlHeartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n         yamlHeartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n         yamlHeartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n         yamlHeartBeatConfiguration.setThreadCount(heartbeat.getThreadCount());\n-        yamlClusterConfiguration.setHeartbeat(yamlHeartBeatConfiguration);\n-        return yamlClusterConfiguration;\n+        YamlClusterConfiguration result = new YamlClusterConfiguration();\n+        result.setHeartbeat(yamlHeartBeatConfiguration);\n+        return result;\n     }\n     \n     @Override\n-    public ClusterConfiguration swapToObject(final YamlClusterConfiguration yamlConfiguration) {\n-        final ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n-        final HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n-        YamlHeartbeatConfiguration heartbeat = yamlConfiguration.getHeartbeat();\n+    public ClusterConfiguration swapToObject(final YamlClusterConfiguration yamlConfig) {\n+        HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n+        YamlHeartbeatConfiguration heartbeat = yamlConfig.getHeartbeat();\n         heartBeatConfiguration.setSql(heartbeat.getSql());\n         heartBeatConfiguration.setInterval(heartbeat.getInterval());\n         heartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n         heartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n         heartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n         heartBeatConfiguration.setThreadCount(0 == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n-        clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n-        return clusterConfiguration;\n+        ClusterConfiguration result = new ClusterConfiguration();\n+        result.setHeartbeat(heartBeatConfiguration);\n+        return result;\n     }\n }\n", "next_change": {"commit": "0fb8bf8e9b751cf355fa092f6fda7119cdfa99fe", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\ndeleted file mode 100644\nindex 086e3341834..00000000000\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/main/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapper.java\n+++ /dev/null\n", "chunk": "@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.cluster.configuration.swapper;\n-\n-import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n-import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;\n-\n-/**\n- * Cluster configuration YAML swapper.\n- */\n-public final class ClusterConfigurationYamlSwapper implements YamlSwapper<YamlClusterConfiguration, ClusterConfiguration> {\n-    \n-    @Override\n-    public YamlClusterConfiguration swapToYamlConfiguration(final ClusterConfiguration data) {\n-        YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n-        HeartbeatConfiguration heartbeat = data.getHeartbeat();\n-        yamlHeartBeatConfiguration.setSql(heartbeat.getSql());\n-        yamlHeartBeatConfiguration.setInterval(heartbeat.getInterval());\n-        yamlHeartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n-        yamlHeartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n-        yamlHeartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n-        yamlHeartBeatConfiguration.setThreadCount(heartbeat.getThreadCount());\n-        YamlClusterConfiguration result = new YamlClusterConfiguration();\n-        result.setHeartbeat(yamlHeartBeatConfiguration);\n-        return result;\n-    }\n-    \n-    @Override\n-    public ClusterConfiguration swapToObject(final YamlClusterConfiguration yamlConfig) {\n-        HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n-        YamlHeartbeatConfiguration heartbeat = yamlConfig.getHeartbeat();\n-        heartBeatConfiguration.setSql(heartbeat.getSql());\n-        heartBeatConfiguration.setInterval(heartbeat.getInterval());\n-        heartBeatConfiguration.setRetryEnable(heartbeat.isRetryEnable());\n-        heartBeatConfiguration.setRetryMaximum(heartbeat.getRetryMaximum());\n-        heartBeatConfiguration.setRetryInterval(heartbeat.getRetryInterval());\n-        heartBeatConfiguration.setThreadCount(0 == heartbeat.getThreadCount() ? Runtime.getRuntime().availableProcessors() << 1 : heartbeat.getThreadCount());\n-        ClusterConfiguration result = new ClusterConfiguration();\n-        result.setHeartbeat(heartBeatConfiguration);\n-        return result;\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f4e945657122d36d751ab2b580a63849d4477bc1", "message": "Merge commit", "committedDate": null}, {"oid": "b1f3c9c66c4d6e329c48e04a33f23657d621e366", "committedDate": "2020-05-21 14:28:41 +0800", "message": "use ScheduledExecutor instead of Timer"}, {"oid": "e690ac1166890fdd60c899ebed5d1c3530d9ed96", "committedDate": "2020-05-25 19:18:47 +0800", "message": "Proxy read heart beat configuration #control-panel-cluster (#5783)"}, {"oid": "34d5455097c3d18e7963d58eb6e3a4b2394c645e", "committedDate": "2020-05-26 00:56:23 +0000", "message": "polish cluster heartbeat (#5792)"}, {"oid": "80330ef5005985c905640fe8de5ef1b26b219047", "committedDate": "2020-05-28 13:46:45 +0800", "message": "optimize cluster Heartbeat. (#5817)"}, {"oid": "d8832f7e8d7506db8d63fd4336e4e3ef7e05d2e7", "committedDate": "2020-06-15 06:21:52 +0800", "message": "Refactor YamlSwapper interface (#6035)"}, {"oid": "3cd8b2297f0f2d7599e00e7860052f1e96e49faf", "committedDate": "2020-07-22 23:42:34 +0800", "message": "update (#6404)"}, {"oid": "ad43ff34929a2c704248ec1b43ac4b19f2c4076b", "committedDate": "2020-07-23 17:57:32 +0800", "message": "polish cluster codes (#6415)"}, {"oid": "e4d983765aab9dc5ce3245cee503dbeafd509164", "committedDate": "2020-07-28 15:28:44 +0800", "message": "Polish orchestration api and common modules (#6485)"}, {"oid": "bee61c2277da0b81bde4da1956973d6114a0196d", "committedDate": "2020-08-06 11:38:32 +0800", "message": "For code inspection (#6651)"}, {"oid": "0fb8bf8e9b751cf355fa092f6fda7119cdfa99fe", "committedDate": "2020-08-26 22:03:51 +0800", "message": "Remove cluster module"}]}, {"oid": "1a49c4e3216f627460b9d540866201dd81684523", "url": "https://github.com/apache/shardingsphere/commit/1a49c4e3216f627460b9d540866201dd81684523", "message": "add necessary empty line", "committedDate": "2020-05-19T02:01:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3OTc5NQ==", "url": "https://github.com/apache/shardingsphere/pull/5671#discussion_r427079795", "body": "remove ; ", "bodyText": "remove ;", "bodyHTML": "<p dir=\"auto\">remove ;</p>", "author": "kimmking", "createdAt": "2020-05-19T07:16:18Z", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.configuration.swapper;\n+\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartBeatConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartBeatConfiguration;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertThat;\n+\n+public final class ClusterConfigurationYamlSwapperTest {\n+    \n+    private static final String SQL = \"select 1;\";", "originalCommit": "1a49c4e3216f627460b9d540866201dd81684523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA4MzM1Mg==", "url": "https://github.com/apache/shardingsphere/pull/5671#discussion_r427083352", "bodyText": "removed.", "author": "menghaoranss", "createdAt": "2020-05-19T07:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3OTc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c13507e8a9e44ab0f96637096443d20b5c41acb6", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex df47b274514..c902764f2f3 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -29,7 +29,7 @@ import static org.junit.Assert.assertThat;\n \n public final class ClusterConfigurationYamlSwapperTest {\n     \n-    private static final String SQL = \"select 1;\";\n+    private static final String SQL = \"select 1\";\n     \n     private static final Integer INTERVAL = 60;\n     \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f4e945657122d36d751ab2b580a63849d4477bc1", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex df47b274514..c902764f2f3 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -29,7 +29,7 @@ import static org.junit.Assert.assertThat;\n \n public final class ClusterConfigurationYamlSwapperTest {\n     \n-    private static final String SQL = \"select 1;\";\n+    private static final String SQL = \"select 1\";\n     \n     private static final Integer INTERVAL = 60;\n     \n", "next_change": {"commit": "34d5455097c3d18e7963d58eb6e3a4b2394c645e", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex c902764f2f3..e0056e912df 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -37,37 +37,37 @@ public final class ClusterConfigurationYamlSwapperTest {\n     \n     @Test\n     public void assertSwapToClusterConfiguration() {\n-        YamlHeartBeatConfiguration yamlHeartBeatConfiguration = new YamlHeartBeatConfiguration();\n+        YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n         yamlHeartBeatConfiguration.setSql(SQL);\n         yamlHeartBeatConfiguration.setInterval(INTERVAL);\n         yamlHeartBeatConfiguration.setRetryEnable(Boolean.TRUE);\n         yamlHeartBeatConfiguration.setRetryMaximum(MAXIMUM);\n     \n         YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n-        yamlClusterConfiguration.setHeartBeat(yamlHeartBeatConfiguration);\n+        yamlClusterConfiguration.setHeartbeat(yamlHeartBeatConfiguration);\n     \n         ClusterConfiguration clusterConfiguration = new ClusterConfigurationYamlSwapper().swap(yamlClusterConfiguration);\n-        assertThat(clusterConfiguration.getHeartBeat().getSql(), is(SQL));\n-        assertThat(clusterConfiguration.getHeartBeat().getInterval(), is(INTERVAL));\n-        assertThat(clusterConfiguration.getHeartBeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(clusterConfiguration.getHeartBeat().getRetryEnable());\n+        assertThat(clusterConfiguration.getHeartbeat().getSql(), is(SQL));\n+        assertThat(clusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n+        assertThat(clusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n+        assertTrue(clusterConfiguration.getHeartbeat().getRetryEnable());\n     }\n     \n     @Test\n     public void assertSwapToYamlClusterConfiguration() {\n-        HeartBeatConfiguration heartBeatConfiguration = new HeartBeatConfiguration();\n+        HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n         heartBeatConfiguration.setSql(SQL);\n         heartBeatConfiguration.setInterval(INTERVAL);\n         heartBeatConfiguration.setRetryEnable(Boolean.TRUE);\n         heartBeatConfiguration.setRetryMaximum(MAXIMUM);\n     \n         ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n-        clusterConfiguration.setHeartBeat(heartBeatConfiguration);\n+        clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n     \n         YamlClusterConfiguration yamlClusterConfiguration = new ClusterConfigurationYamlSwapper().swap(clusterConfiguration);\n-        assertThat(yamlClusterConfiguration.getHeartBeat().getSql(), is(SQL));\n-        assertThat(yamlClusterConfiguration.getHeartBeat().getInterval(), is(INTERVAL));\n-        assertThat(yamlClusterConfiguration.getHeartBeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(yamlClusterConfiguration.getHeartBeat().getRetryEnable());\n+        assertThat(yamlClusterConfiguration.getHeartbeat().getSql(), is(SQL));\n+        assertThat(yamlClusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n+        assertThat(yamlClusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n+        assertTrue(yamlClusterConfiguration.getHeartbeat().getRetryEnable());\n     }\n }\n", "next_change": {"commit": "d8832f7e8d7506db8d63fd4336e4e3ef7e05d2e7", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex e0056e912df..142b224698e 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -60,11 +58,9 @@ public final class ClusterConfigurationYamlSwapperTest {\n         heartBeatConfiguration.setInterval(INTERVAL);\n         heartBeatConfiguration.setRetryEnable(Boolean.TRUE);\n         heartBeatConfiguration.setRetryMaximum(MAXIMUM);\n-    \n         ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n         clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n-    \n-        YamlClusterConfiguration yamlClusterConfiguration = new ClusterConfigurationYamlSwapper().swap(clusterConfiguration);\n+        YamlClusterConfiguration yamlClusterConfiguration = new ClusterConfigurationYamlSwapper().swapToYamlConfiguration(clusterConfiguration);\n         assertThat(yamlClusterConfiguration.getHeartbeat().getSql(), is(SQL));\n         assertThat(yamlClusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n         assertThat(yamlClusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n", "next_change": {"commit": "3cd8b2297f0f2d7599e00e7860052f1e96e49faf", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex 142b224698e..0179896c767 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -56,7 +56,7 @@ public final class ClusterConfigurationYamlSwapperTest {\n         HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n         heartBeatConfiguration.setSql(SQL);\n         heartBeatConfiguration.setInterval(INTERVAL);\n-        heartBeatConfiguration.setRetryEnable(Boolean.TRUE);\n+        heartBeatConfiguration.setRetryEnable(true);\n         heartBeatConfiguration.setRetryMaximum(MAXIMUM);\n         ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n         clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n", "next_change": {"commit": "0fb8bf8e9b751cf355fa092f6fda7119cdfa99fe", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\ndeleted file mode 100644\nindex 0179896c767..00000000000\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ /dev/null\n", "chunk": "@@ -1,69 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.cluster.configuration.swapper;\n-\n-import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n-import org.junit.Test;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertThat;\n-\n-public final class ClusterConfigurationYamlSwapperTest {\n-    \n-    private static final String SQL = \"select 1\";\n-    \n-    private static final Integer INTERVAL = 60;\n-    \n-    private static final Integer MAXIMUM = 3;\n-    \n-    @Test\n-    public void assertSwapToClusterConfiguration() {\n-        YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n-        yamlHeartBeatConfiguration.setSql(SQL);\n-        yamlHeartBeatConfiguration.setInterval(INTERVAL);\n-        yamlHeartBeatConfiguration.setRetryEnable(true);\n-        yamlHeartBeatConfiguration.setRetryMaximum(MAXIMUM);\n-        YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n-        yamlClusterConfiguration.setHeartbeat(yamlHeartBeatConfiguration);\n-        ClusterConfiguration clusterConfiguration = new ClusterConfigurationYamlSwapper().swapToObject(yamlClusterConfiguration);\n-        assertThat(clusterConfiguration.getHeartbeat().getSql(), is(SQL));\n-        assertThat(clusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n-        assertThat(clusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(clusterConfiguration.getHeartbeat().isRetryEnable());\n-    }\n-    \n-    @Test\n-    public void assertSwapToYamlClusterConfiguration() {\n-        HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n-        heartBeatConfiguration.setSql(SQL);\n-        heartBeatConfiguration.setInterval(INTERVAL);\n-        heartBeatConfiguration.setRetryEnable(true);\n-        heartBeatConfiguration.setRetryMaximum(MAXIMUM);\n-        ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n-        clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n-        YamlClusterConfiguration yamlClusterConfiguration = new ClusterConfigurationYamlSwapper().swapToYamlConfiguration(clusterConfiguration);\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getSql(), is(SQL));\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(yamlClusterConfiguration.getHeartbeat().isRetryEnable());\n-    }\n-}\n", "next_change": null}]}}, {"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\nindex 142b224698e..0179896c767 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n", "chunk": "@@ -64,6 +64,6 @@ public final class ClusterConfigurationYamlSwapperTest {\n         assertThat(yamlClusterConfiguration.getHeartbeat().getSql(), is(SQL));\n         assertThat(yamlClusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n         assertThat(yamlClusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(yamlClusterConfiguration.getHeartbeat().getRetryEnable());\n+        assertTrue(yamlClusterConfiguration.getHeartbeat().isRetryEnable());\n     }\n }\n", "next_change": {"commit": "0fb8bf8e9b751cf355fa092f6fda7119cdfa99fe", "changed_code": [{"header": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\ndeleted file mode 100644\nindex 0179896c767..00000000000\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-configuration/src/test/java/org/apache/shardingsphere/cluster/configuration/swapper/ClusterConfigurationYamlSwapperTest.java\n+++ /dev/null\n", "chunk": "@@ -1,69 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.cluster.configuration.swapper;\n-\n-import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n-import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n-import org.junit.Test;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertThat;\n-\n-public final class ClusterConfigurationYamlSwapperTest {\n-    \n-    private static final String SQL = \"select 1\";\n-    \n-    private static final Integer INTERVAL = 60;\n-    \n-    private static final Integer MAXIMUM = 3;\n-    \n-    @Test\n-    public void assertSwapToClusterConfiguration() {\n-        YamlHeartbeatConfiguration yamlHeartBeatConfiguration = new YamlHeartbeatConfiguration();\n-        yamlHeartBeatConfiguration.setSql(SQL);\n-        yamlHeartBeatConfiguration.setInterval(INTERVAL);\n-        yamlHeartBeatConfiguration.setRetryEnable(true);\n-        yamlHeartBeatConfiguration.setRetryMaximum(MAXIMUM);\n-        YamlClusterConfiguration yamlClusterConfiguration = new YamlClusterConfiguration();\n-        yamlClusterConfiguration.setHeartbeat(yamlHeartBeatConfiguration);\n-        ClusterConfiguration clusterConfiguration = new ClusterConfigurationYamlSwapper().swapToObject(yamlClusterConfiguration);\n-        assertThat(clusterConfiguration.getHeartbeat().getSql(), is(SQL));\n-        assertThat(clusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n-        assertThat(clusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(clusterConfiguration.getHeartbeat().isRetryEnable());\n-    }\n-    \n-    @Test\n-    public void assertSwapToYamlClusterConfiguration() {\n-        HeartbeatConfiguration heartBeatConfiguration = new HeartbeatConfiguration();\n-        heartBeatConfiguration.setSql(SQL);\n-        heartBeatConfiguration.setInterval(INTERVAL);\n-        heartBeatConfiguration.setRetryEnable(true);\n-        heartBeatConfiguration.setRetryMaximum(MAXIMUM);\n-        ClusterConfiguration clusterConfiguration = new ClusterConfiguration();\n-        clusterConfiguration.setHeartbeat(heartBeatConfiguration);\n-        YamlClusterConfiguration yamlClusterConfiguration = new ClusterConfigurationYamlSwapper().swapToYamlConfiguration(clusterConfiguration);\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getSql(), is(SQL));\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getInterval(), is(INTERVAL));\n-        assertThat(yamlClusterConfiguration.getHeartbeat().getRetryMaximum(), is(MAXIMUM));\n-        assertTrue(yamlClusterConfiguration.getHeartbeat().isRetryEnable());\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f4e945657122d36d751ab2b580a63849d4477bc1", "message": "Merge commit", "committedDate": null}, {"oid": "34d5455097c3d18e7963d58eb6e3a4b2394c645e", "committedDate": "2020-05-26 00:56:23 +0000", "message": "polish cluster heartbeat (#5792)"}, {"oid": "d8832f7e8d7506db8d63fd4336e4e3ef7e05d2e7", "committedDate": "2020-06-15 06:21:52 +0800", "message": "Refactor YamlSwapper interface (#6035)"}, {"oid": "3cd8b2297f0f2d7599e00e7860052f1e96e49faf", "committedDate": "2020-07-22 23:42:34 +0800", "message": "update (#6404)"}, {"oid": "ad43ff34929a2c704248ec1b43ac4b19f2c4076b", "committedDate": "2020-07-23 17:57:32 +0800", "message": "polish cluster codes (#6415)"}, {"oid": "0fb8bf8e9b751cf355fa092f6fda7119cdfa99fe", "committedDate": "2020-08-26 22:03:51 +0800", "message": "Remove cluster module"}]}, {"oid": "c13507e8a9e44ab0f96637096443d20b5c41acb6", "url": "https://github.com/apache/shardingsphere/commit/c13507e8a9e44ab0f96637096443d20b5c41acb6", "message": "remove ';' of SQL", "committedDate": "2020-05-19T07:22:26Z", "type": "commit"}]}