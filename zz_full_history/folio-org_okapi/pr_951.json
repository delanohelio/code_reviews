{"pr_number": 951, "pr_title": "OKAPI-871 FolioLoggingContext", "pr_author": "MikhailFokanov", "pr_createdAt": "2020-07-08T14:57:57Z", "pr_url": "https://github.com/folio-org/okapi/pull/951", "merge_commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "timeline": [{"oid": "6050ab365d20ee2ff79693bef6add5555ed6d204", "url": "https://github.com/folio-org/okapi/commit/6050ab365d20ee2ff79693bef6add5555ed6d204", "message": "OKAPI-871 FolioLoggingContext", "committedDate": "2020-07-08T13:00:21Z", "type": "commit"}, {"oid": "a254aa2e3881e691350a344a3f65599664b00aaa", "url": "https://github.com/folio-org/okapi/commit/a254aa2e3881e691350a344a3f65599664b00aaa", "message": "OKAPI-871 FolioLoggingContext", "committedDate": "2020-07-09T08:24:33Z", "type": "commit"}, {"oid": "3497c2f142fffce4205c105622d2d083ab7d4a9b", "url": "https://github.com/folio-org/okapi/commit/3497c2f142fffce4205c105622d2d083ab7d4a9b", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-09T10:06:26Z", "type": "commit"}, {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544", "url": "https://github.com/folio-org/okapi/commit/dd3a943cff715588d67d796c12d19bb1d94b3544", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-09T10:39:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452159384", "body": "I don't think that we need to create yet another context map.\r\nVert.x already has a map we can easily access with getLocal and putLocal:\r\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220\r\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312", "bodyText": "I don't think that we need to create yet another context map.\nVert.x already has a map we can easily access with getLocal and putLocal:\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312", "bodyHTML": "<p dir=\"auto\">I don't think that we need to create yet another context map.<br>\nVert.x already has a map we can easily access with getLocal and putLocal:<br>\n<a href=\"https://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220\">https://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220</a><br>\n<a href=\"https://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312\">https://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312</a></p>", "author": "julianladisch", "createdAt": "2020-07-09T11:48:58Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      getContextMap(ctx).put(key, value);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {", "originalCommit": "dd3a943cff715588d67d796c12d19bb1d94b3544", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MDY5NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452760695", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-10T10:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 3c56975e..e4a25bb9 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -48,14 +51,8 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n     if (ctx != null) {\n-      getContextMap(ctx).put(key, value);\n+      ctx.putLocal(key, value);\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {\n-    return (ConcurrentMap<String, String>) ctx.localContextData()\n-        .computeIfAbsent(FolioLoggingContext.class, (k) -> new ConcurrentHashMap<String, String>());\n-  }\n-\n }\n", "next_change": {"commit": "7571208a39cfac565a61288662ada60a132be040", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex e4a25bb9..65e60b51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -49,7 +49,7 @@ public class FolioLoggingContext implements StrLookup {\n   * @param key the name of logging variable (e.g. requestId)\n   */\n   public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       ctx.putLocal(key, value);\n     }\n", "next_change": {"commit": "06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 65e60b51..8bdfd435 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,7 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(key, value);\n+      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n     }\n   }\n \n", "next_change": {"commit": "96f318785a198ef39bfa3c50fd10868b11005893", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 8bdfd435..2c88940c 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,11 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 2c88940c..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,62 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 3c56975e..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,61 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.core.impl.ContextInternal;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  public static final String EMPTY_VALUE = \"\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      getContextMap(ctx).put(key, value);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n-  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {\n-    return (ConcurrentMap<String, String>) ctx.localContextData()\n-        .computeIfAbsent(FolioLoggingContext.class, (k) -> new ConcurrentHashMap<String, String>());\n-  }\n-\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452160769", "body": "If we have traditional (non-JSON) log lines we may need EMPTY_VALUE as placeholder.\r\nFor JSON log lines this is not needed. The key should be completely omitted: https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response", "bodyText": "If we have traditional (non-JSON) log lines we may need EMPTY_VALUE as placeholder.\nFor JSON log lines this is not needed. The key should be completely omitted: https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response", "bodyHTML": "<p dir=\"auto\">If we have traditional (non-JSON) log lines we may need EMPTY_VALUE as placeholder.<br>\nFor JSON log lines this is not needed. The key should be completely omitted: <a href=\"https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response\" rel=\"nofollow\">https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response</a></p>", "author": "julianladisch", "createdAt": "2020-07-09T11:51:52Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";", "originalCommit": "dd3a943cff715588d67d796c12d19bb1d94b3544", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NTM3Ng==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452275376", "bodyText": "There is no easy way to omit empty or null values.\nReturning \"\" or adding a default value like property.requestId = to the log4j2.properties have the same result.", "author": "julianladisch", "createdAt": "2020-07-09T14:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 3c56975e..e4a25bb9 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -15,7 +13,9 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n \n-  public static final String EMPTY_VALUE = \"\";\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n \n   /**\n    * Lookup value by key.\n", "next_change": {"commit": "a5268dac92ba8d22df969242c6645add40584bdc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nsimilarity index 70%\nrename from okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nrename to okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex e4a25bb9..51798e94 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -17,6 +17,14 @@ public class FolioLoggingContext implements StrLookup {\n \n   public static final String LOGGING_VAR_PREFIX = \"folio_\";\n \n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n   /**\n    * Lookup value by key.\n    *\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 3c56975e..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,61 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.core.impl.ContextInternal;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  public static final String EMPTY_VALUE = \"\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      getContextMap(ctx).put(key, value);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n-  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {\n-    return (ConcurrentMap<String, String>) ctx.localContextData()\n-        .computeIfAbsent(FolioLoggingContext.class, (k) -> new ConcurrentHashMap<String, String>());\n-  }\n-\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "url": "https://github.com/folio-org/okapi/commit/21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-10T10:03:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjQ1OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782458", "body": "No casting is needed because getLocal is in Context.", "bodyText": "No casting is needed because getLocal is in Context.", "bodyHTML": "<p dir=\"auto\">No casting is needed because getLocal is in Context.</p>", "author": "julianladisch", "createdAt": "2020-07-10T11:18:17Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7571208a39cfac565a61288662ada60a132be040", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex e4a25bb9..65e60b51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -34,7 +34,7 @@ public class FolioLoggingContext implements StrLookup {\n   * @return value for key or *empty string* if there is no such key\n   */\n   public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n       if (val != null) {\n", "next_change": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 65e60b51..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      ctx.putLocal(key, value);\n-    }\n-  }\n-\n-}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex e4a25bb9..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.core.impl.ContextInternal;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      ctx.putLocal(key, value);\n-    }\n-  }\n-\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjY3OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782678", "body": "No casting is needed because putLocal is in Context.", "bodyText": "No casting is needed because putLocal is in Context.", "bodyHTML": "<p dir=\"auto\">No casting is needed because putLocal is in Context.</p>", "author": "julianladisch", "createdAt": "2020-07-10T11:18:50Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7571208a39cfac565a61288662ada60a132be040", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex e4a25bb9..65e60b51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -49,7 +49,7 @@ public class FolioLoggingContext implements StrLookup {\n   * @param key the name of logging variable (e.g. requestId)\n   */\n   public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       ctx.putLocal(key, value);\n     }\n", "next_change": {"commit": "06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 65e60b51..8bdfd435 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,7 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(key, value);\n+      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n     }\n   }\n \n", "next_change": {"commit": "96f318785a198ef39bfa3c50fd10868b11005893", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 8bdfd435..2c88940c 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,11 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 2c88940c..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,62 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex e4a25bb9..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.core.impl.ContextInternal;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      ctx.putLocal(key, value);\n-    }\n-  }\n-\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452785704", "body": "Do we need to add LOGGING_VAR_PREFIX here or should ProxyService prepend it?", "bodyText": "Do we need to add LOGGING_VAR_PREFIX here or should ProxyService prepend it?", "bodyHTML": "<p dir=\"auto\">Do we need to add LOGGING_VAR_PREFIX here or should ProxyService prepend it?</p>", "author": "julianladisch", "createdAt": "2020-07-10T11:26:28Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      ctx.putLocal(key, value);", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NDQ3MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452794471", "bodyText": "I want to make the usage of the approach as simple, as it can be. If for putting and getting every value there was a need to add a prefix, someone would forget to put it on get or put. So I'd like to stick with the approach of putting it internally.", "author": "MikhailFokanov", "createdAt": "2020-07-10T11:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7571208a39cfac565a61288662ada60a132be040", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex e4a25bb9..65e60b51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -49,7 +49,7 @@ public class FolioLoggingContext implements StrLookup {\n   * @param key the name of logging variable (e.g. requestId)\n   */\n   public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       ctx.putLocal(key, value);\n     }\n", "next_change": {"commit": "06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 65e60b51..8bdfd435 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,7 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(key, value);\n+      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n     }\n   }\n \n", "next_change": {"commit": "96f318785a198ef39bfa3c50fd10868b11005893", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nindex 8bdfd435..2c88940c 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n", "chunk": "@@ -51,7 +51,11 @@ public class FolioLoggingContext implements StrLookup {\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n-      ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 2c88940c..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,62 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex e4a25bb9..00000000\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package org.folio.okapi.logging;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.core.impl.ContextInternal;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable (e.g. requestId)\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable (e.g. requestId)\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  public String lookup(LogEvent event, String key) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n-  */\n-  public static void put(String key, String value) {\n-    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n-    if (ctx != null) {\n-      ctx.putLocal(key, value);\n-    }\n-  }\n-\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"oid": "7571208a39cfac565a61288662ada60a132be040", "url": "https://github.com/folio-org/okapi/commit/7571208a39cfac565a61288662ada60a132be040", "message": "OKAPI-871 Fixes for comments", "committedDate": "2020-07-10T11:51:03Z", "type": "commit"}, {"oid": "06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "url": "https://github.com/folio-org/okapi/commit/06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "message": "OKAPI-871 Fixes for comments", "committedDate": "2020-07-10T11:59:33Z", "type": "commit"}, {"oid": "96f318785a198ef39bfa3c50fd10868b11005893", "url": "https://github.com/folio-org/okapi/commit/96f318785a198ef39bfa3c50fd10868b11005893", "message": "OKAPI-871 Fixes for null values", "committedDate": "2020-07-10T12:16:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452820938", "body": "Redundant checks here.. headers are always present.  Move your stuff below the headers local and have it more readable, please.", "bodyText": "Redundant checks here.. headers are always present.  Move your stuff below the headers local and have it more readable, please.", "bodyHTML": "<p dir=\"auto\">Redundant checks here.. headers are always present.  Move your stuff below the headers local and have it more readable, please.</p>", "author": "adamdickmeiss", "createdAt": "2020-07-10T12:47:26Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -514,6 +515,18 @@ public void proxy(RoutingContext ctx) {\n       return; // Error code already set in ctx\n     }\n \n+    FolioLoggingContext.put(\"tenantId\", tenantId);\n+\n+    if (ctx.request() != null && ctx.request().headers() != null) {\n+\n+      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n+\n+      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n+\n+      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+\n+    }\n+\n     final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NDgwNg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454344806", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a5268dac92ba8d22df969242c6645add40584bdc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex d6c888a7..25a3ac6d 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -515,19 +515,13 @@ public class ProxyService {\n       return; // Error code already set in ctx\n     }\n \n-    FolioLoggingContext.put(\"tenantId\", tenantId);\n-\n-    if (ctx.request() != null && ctx.request().headers() != null) {\n-\n-      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n-\n-      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n-\n-      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+    final MultiMap headers = ctx.request().headers();\n \n-    }\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME, tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.USER_ID));\n \n-    final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "f3f4593e6f4ceb7bfa3ae7c397ae17a7d6082a77", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 25a3ac6d..84f59c3e 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -517,10 +517,14 @@ public class ProxyService {\n \n     final MultiMap headers = ctx.request().headers();\n \n-    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME, tenantId);\n-    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.REQUEST_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.MODULE_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME, headers.get(XOkapiHeaders.USER_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 84f59c3e..8dbe7070 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -516,16 +514,6 @@ public class ProxyService {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n-\n-    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n-        tenantId);\n-    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.REQUEST_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.MODULE_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.USER_ID));\n-\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 8dbe7070..84f59c3e 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -514,6 +516,16 @@ public class ProxyService {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));\n+\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "08efadd3db3f7ba349775199b9986ab7809d9e57", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 84f59c3e..75a2ab8f 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -523,8 +523,6 @@ public class ProxyService {\n         headers.get(XOkapiHeaders.REQUEST_ID));\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.USER_ID));\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "72f8410820987d085c7ae4022421c4a903bbcdd3", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 75a2ab8f..9b123d7a 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -523,6 +536,8 @@ public class ProxyService {\n         headers.get(XOkapiHeaders.REQUEST_ID));\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "d6683bff1742773173f0bd22b101c27920850fb4", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 9b123d7a..86570792 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -537,7 +549,7 @@ public class ProxyService {\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n     FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        pc.getUserId());\n+        pc.getUserIdWithoutValidation());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 86570792..494d3540 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -549,7 +549,7 @@ public class ProxyService {\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n     FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        pc.getUserIdWithoutValidation());\n+        pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex d6c888a7..494d3540 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -509,25 +532,25 @@ public class ProxyService {\n     // It would be nice to pass the request-id to the client, so it knows what\n     // to look for in Okapi logs. But that breaks the schemas, and RMB-based\n     // modules will not accept the response. Maybe later...\n-    String tenantId = tenantHeader(pc);\n-    if (tenantId == null) {\n+    try {\n+      parseTokenAndPopulateContext(pc);\n+    } catch (IllegalArgumentException e) {\n       stream.resume();\n       return; // Error code already set in ctx\n     }\n+    String tenantId = pc.getTenant();\n \n-    FolioLoggingContext.put(\"tenantId\", tenantId);\n-\n-    if (ctx.request() != null && ctx.request().headers() != null) {\n-\n-      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n-\n-      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n-\n-      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+    final MultiMap headers = ctx.request().headers();\n \n-    }\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        pc.getUserId());\n \n-    final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "901b78620e2d54a5de42a691076461703f9e3b7d", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 494d3540..5e2926ae 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -552,17 +543,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId, gres -> {\n+    tenantManager.get(tenantId).onComplete(gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant, mres -> {\n+      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(mres.getType(), mres.cause());\n+          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 5e2926ae..9b79ce51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -543,17 +602,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onComplete(gres -> {\n+    tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n+      moduleManager.getEnabledModules(tenant, mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n+          pc.responseError(mres.getType(), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 9b79ce51..1f90d4ae 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -602,17 +593,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId, gres -> {\n+    tenantManager.get(tenantId).onComplete(gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant, mres -> {\n+      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(mres.getType(), mres.cause());\n+          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "5057791f695f6bffb5799640ab9c6a74269df3a5", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 1f90d4ae..58589132 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -593,27 +544,21 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onComplete(gres -> {\n-      if (gres.failed()) {\n+    tenantManager.get(tenantId).onFailure(cause -> {\n+      stream.resume();\n+      pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n+    }).onSuccess(tenant -> {\n+      tenantManager.getModuleCache(tenant).onFailure(cause -> {\n         stream.resume();\n-        pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n-        return;\n-      }\n-      Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n-        if (mres.failed()) {\n-          stream.resume();\n-          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n-          return;\n-        }\n-        List<ModuleDescriptor> enabledModules = mres.result();\n-\n-        List<ModuleInstance> l = getModulesForRequest(pc, enabledModules);\n+        pc.responseError(OkapiError.getType(cause), cause);\n+      }).onSuccess(cache -> {\n+        final Timer.Sample sample = MetricsHelper.getTimerSample();\n+        List<ModuleInstance> l = getModulesForRequest(pc, cache);\n+        MetricsHelper.recordCodeExecutionTime(sample, \"ProxyService.getModulesForRequest\");\n         if (l == null) {\n           stream.resume();\n           return; // ctx already set up\n         }\n-\n         // check delegate CORS and reroute if necessary\n         if (CorsHelper.checkCorsDelegate(ctx, l)) {\n           // HTTP code 100 is chosen purely as metrics tag placeholder\n", "next_change": {"commit": "85ca680d59ffdbe107e0a1c53e27dce7b2ff6e95", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 58589132..068c285c 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -544,50 +543,55 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onFailure(cause -> {\n-      stream.resume();\n-      pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n-    }).onSuccess(tenant -> {\n-      tenantManager.getModuleCache(tenant).onFailure(cause -> {\n-        stream.resume();\n-        pc.responseError(OkapiError.getType(cause), cause);\n-      }).onSuccess(cache -> {\n-        final Timer.Sample sample = MetricsHelper.getTimerSample();\n-        List<ModuleInstance> l = getModulesForRequest(pc, cache);\n-        MetricsHelper.recordCodeExecutionTime(sample, \"ProxyService.getModulesForRequest\");\n-        if (l == null) {\n-          stream.resume();\n-          return; // ctx already set up\n-        }\n-        // check delegate CORS and reroute if necessary\n-        if (CorsHelper.checkCorsDelegate(ctx, l)) {\n-          // HTTP code 100 is chosen purely as metrics tag placeholder\n-          MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(), 100,\n-              pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n-          stream.resume();\n-          ctx.reroute(ctx.request().path());\n-          return;\n-        }\n-\n-        pc.setModList(l);\n-\n-        pc.logRequest(ctx, tenantId);\n-\n-        headers.set(XOkapiHeaders.URL, okapiUrl);\n-        headers.remove(XOkapiHeaders.MODULE_ID);\n-        headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n-        headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n-        headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n-\n-        resolveUrls(l).onFailure(cause -> {\n+    tenantManager.get(tenantId)\n+        .onFailure(cause -> {\n           stream.resume();\n-          pc.responseError(OkapiError.getType(cause), cause);\n-        }).onSuccess(res -> {\n-          List<HttpClientRequest> clientRequest = new LinkedList<>();\n-          proxyR(l.iterator(), pc, stream, null, clientRequest);\n-        });\n-      });\n-    });\n+          pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n+        })\n+        .onSuccess(tenant ->\n+            tenantManager.getModuleCache(tenant)\n+                .onFailure(cause -> {\n+                  stream.resume();\n+                  pc.responseError(OkapiError.getType(cause), cause);\n+                })\n+                .onSuccess(cache -> {\n+                  final Timer.Sample sample = MetricsHelper.getTimerSample();\n+                  List<ModuleInstance> l = getModulesForRequest(pc, cache);\n+                  MetricsHelper.recordCodeExecutionTime(sample,\n+                      \"ProxyService.getModulesForRequest\");\n+                  if (l == null) {\n+                    stream.resume();\n+                    return; // ctx already set up\n+                  }\n+                  // check delegate CORS and reroute if necessary\n+                  if (CorsHelper.checkCorsDelegate(ctx, l)) {\n+                    // HTTP code 100 is chosen purely as metrics tag placeholder\n+                    MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(),\n+                        100, pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n+                    stream.resume();\n+                    ctx.reroute(ctx.request().path());\n+                    return;\n+                  }\n+\n+                  pc.setModList(l);\n+\n+                  pc.logRequest(ctx, tenantId);\n+\n+                  headers.set(XOkapiHeaders.URL, okapiUrl);\n+                  headers.remove(XOkapiHeaders.MODULE_ID);\n+                  headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n+                  headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n+                  headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n+\n+                  resolveUrls(l).onFailure(cause -> {\n+                    stream.resume();\n+                    pc.responseError(OkapiError.getType(cause), cause);\n+                  }).onSuccess(res -> {\n+                    List<HttpClientRequest> clientRequest = new LinkedList<>();\n+                    proxyR(l.iterator(), pc, stream, null, clientRequest);\n+                  });\n+                })\n+        );\n   }\n \n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n", "next_change": {"commit": "02155cf866346f8561395230d233f3945e9f4e93", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 068c285c..e98a0623 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -548,50 +550,34 @@ public class ProxyService {\n           stream.resume();\n           pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         })\n-        .onSuccess(tenant ->\n-            tenantManager.getModuleCache(tenant)\n-                .onFailure(cause -> {\n-                  stream.resume();\n-                  pc.responseError(OkapiError.getType(cause), cause);\n-                })\n-                .onSuccess(cache -> {\n-                  final Timer.Sample sample = MetricsHelper.getTimerSample();\n-                  List<ModuleInstance> l = getModulesForRequest(pc, cache);\n-                  MetricsHelper.recordCodeExecutionTime(sample,\n-                      \"ProxyService.getModulesForRequest\");\n-                  if (l == null) {\n-                    stream.resume();\n-                    return; // ctx already set up\n-                  }\n-                  // check delegate CORS and reroute if necessary\n-                  if (CorsHelper.checkCorsDelegate(ctx, l)) {\n-                    // HTTP code 100 is chosen purely as metrics tag placeholder\n-                    MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(),\n-                        100, pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n-                    stream.resume();\n-                    ctx.reroute(ctx.request().path());\n-                    return;\n-                  }\n-\n-                  pc.setModList(l);\n-\n-                  pc.logRequest(ctx, tenantId);\n-\n-                  headers.set(XOkapiHeaders.URL, okapiUrl);\n-                  headers.remove(XOkapiHeaders.MODULE_ID);\n-                  headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n-                  headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n-                  headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n-\n-                  resolveUrls(l).onFailure(cause -> {\n-                    stream.resume();\n-                    pc.responseError(OkapiError.getType(cause), cause);\n-                  }).onSuccess(res -> {\n-                    List<HttpClientRequest> clientRequest = new LinkedList<>();\n-                    proxyR(l.iterator(), pc, stream, null, clientRequest);\n-                  });\n-                })\n-        );\n+        .onSuccess(tenant -> {\n+          final Timer.Sample sample = MetricsHelper.getTimerSample();\n+          List<ModuleInstance> l = getModulesForRequest(pc, tenantManager.getModuleCache(tenant));\n+          MetricsHelper.recordCodeExecutionTime(sample,\n+              \"ProxyService.getModulesForRequest\");\n+          if (l == null) {\n+            stream.resume();\n+            return; // ctx already set up\n+          }\n+\n+          pc.setModList(l);\n+\n+          pc.logRequest(ctx, tenantId);\n+\n+          headers.set(XOkapiHeaders.URL, okapiUrl);\n+          headers.remove(XOkapiHeaders.MODULE_ID);\n+          headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n+          headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n+          headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n+\n+          resolveUrls(l).onFailure(cause -> {\n+            stream.resume();\n+            pc.responseError(OkapiError.getType(cause), cause);\n+          }).onSuccess(res -> {\n+            List<HttpClientRequest> clientRequest = new LinkedList<>();\n+            proxyR(l.iterator(), pc, stream, null, clientRequest);\n+          });\n+        });\n   }\n \n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n", "next_change": {"commit": "d05dbd35734176472a2d7c9f6b45dc908a749923", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex e98a0623..3eac1aee 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -580,6 +598,21 @@ public class ProxyService {\n         });\n   }\n \n+  /**\n+   * Throw IllegalArgumentException if s contains ${ to disable MDC lookups\n+   * mitigating any denial of service attack using recursive lookups\n+   * (CVE-2021-45105, https://logging.apache.org/log4j/2.x/index.html ).\n+   * Otherwise put (name, s) into FolioLoggingContext.\n+   */\n+  private static void putAndRejectMdcLookups(ProxyContext pc, String name, String s) {\n+    if (s != null && s.contains(\"${\")) {\n+      var e = new IllegalArgumentException(name + \" must not contain ${\");\n+      pc.responseError(400, e.getMessage());\n+      throw e;\n+    }\n+    FolioLoggingContext.put(name, s);\n+  }\n+\n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n     for (HttpClientRequest r : clientRequestList) {\n       r.end(bcontent);\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 3eac1aee..43b1a9dd 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -598,21 +581,6 @@ public class ProxyService {\n         });\n   }\n \n-  /**\n-   * Throw IllegalArgumentException if s contains ${ to disable MDC lookups\n-   * mitigating any denial of service attack using recursive lookups\n-   * (CVE-2021-45105, https://logging.apache.org/log4j/2.x/index.html ).\n-   * Otherwise put (name, s) into FolioLoggingContext.\n-   */\n-  private static void putAndRejectMdcLookups(ProxyContext pc, String name, String s) {\n-    if (s != null && s.contains(\"${\")) {\n-      var e = new IllegalArgumentException(name + \" must not contain ${\");\n-      pc.responseError(400, e.getMessage());\n-      throw e;\n-    }\n-    FolioLoggingContext.put(name, s);\n-  }\n-\n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n     for (HttpClientRequest r : clientRequestList) {\n       r.end(bcontent);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "66c89b7db8b31434ab43427a1c5786c6578bb66e", "committedDate": "2020-09-14 11:37:25 -0400", "message": "port to Okapi4 and add metrics"}, {"oid": "77e98f0f58a1f844b66e2d6c03b3a9fd1465fc7a", "committedDate": "2020-09-14 16:11:51 -0400", "message": "sonar - again"}, {"oid": "b17184d07cb5d18d4213e2d8a4eb1b7e35b1b7bd", "committedDate": "2020-09-14 16:15:59 -0400", "message": "fixing line length"}, {"oid": "b5a26cf1f02edb92af4e55fb352c2a8240426761", "committedDate": "2020-09-17 20:53:27 +0200", "message": "Update to Vert.x 4.0.0 Beta 2 OKAPI-889 (#971)"}, {"oid": "a0124da75707b57156adc0088ee6d5a92d7e3420", "committedDate": "2020-09-21 13:52:37 +0300", "message": "OKAPI-872 Log level corrections"}, {"oid": "b48bbef331bcc21f3bf51a3f354e7ed1dea68434", "committedDate": "2020-09-23 15:26:45 -0400", "message": "Merge branch 'master' into tokenCache"}, {"oid": "901b78620e2d54a5de42a691076461703f9e3b7d", "committedDate": "2020-09-25 11:09:34 +0200", "message": "Async install and Futurisation OKAPI-845 OKAPI-874 (#963)"}, {"oid": "4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "committedDate": "2020-09-29 12:11:52 -0400", "message": "OKAPI-890: formalize tokenCache PoC"}, {"oid": "a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "committedDate": "2020-09-29 12:23:38 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "76368d0c418f925f1a6bf204318965cdf5023562", "committedDate": "2020-09-29 17:00:09 -0400", "message": "allow token cache args to be specified as system properties"}, {"oid": "516eb2b77f861512714a8c4e8d41310bf21247b8", "committedDate": "2020-10-01 08:59:31 -0400", "message": "log cache messages at debug level"}, {"oid": "624117f5983303709510d89f3d3aea878aa397aa", "committedDate": "2020-10-05 19:01:45 +0200", "message": "Allow module and interface discovery for same tenant OKAPI-863 (#985)"}, {"oid": "b2a1daeeeebcac0fd6938420bfee55a708767f52", "committedDate": "2020-10-06 18:59:59 -0400", "message": "Add metrics for some slow methods"}, {"oid": "ea941baa73ccee20329f302c9a09afa92a44dbbf", "committedDate": "2020-10-08 22:57:41 -0400", "message": "OKAPI-890 remove userId from cache key"}, {"oid": "2a546c9f7f0c8b77e65f90a617dd58b5bdf0a804", "committedDate": "2020-10-08 23:12:14 -0400", "message": "OKAPI-890 work skipAuth into existing loop"}, {"oid": "9179bf50e6a9c1a724b8cb5c629bd77e142ff0f8", "committedDate": "2020-10-08 23:15:39 -0400", "message": "OKAPI-890 rename members for readability"}, {"oid": "3aa221bbc89262d224e8518ac0b6338991a30826", "committedDate": "2020-10-08 23:24:28 -0400", "message": "OKAPI-890 minor tweaks to checkTokenCache method"}, {"oid": "59b39eb8b0cbe978145b040bb6c3a2672268739f", "committedDate": "2020-10-08 23:45:42 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "aebd99fc6c4d3ae95fcdbbddde4fbbc36e1516aa", "committedDate": "2020-10-09 09:29:32 -0400", "message": "Add granual metrics for ProxyService.getModulesForRequest"}, {"oid": "112335a9400dd63bb3ba22d435e584abba2bcf1d", "committedDate": "2020-10-09 12:31:48 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "38c3e89d3c2ad3a5feea0ebf07da1401a21d804d", "committedDate": "2020-10-16 17:23:02 -0400", "message": "OKAPI-921 skip cache if no token"}, {"oid": "dab4739dc57fb4c0eb470d1a84fee8aedd1ff467", "committedDate": "2020-10-16 17:28:23 -0400", "message": "OKAPI-921 fix indentation"}, {"oid": "b6d0083335bb9836ea4ef5eee7c016d1495f039b", "committedDate": "2020-10-19 08:53:05 -0400", "message": "OKAPI-921 remove unneeded null check"}, {"oid": "dcb669c48ec24d7d96f5d21ca694d5d9631cbcc1", "committedDate": "2020-10-27 19:46:08 +0100", "message": "Cleanup ProxyContext logging OKAPI-910 (#1022)"}, {"oid": "5057791f695f6bffb5799640ab9c6a74269df3a5", "committedDate": "2020-11-04 18:57:12 +0100", "message": "module path match path using hash OKAPI-916 (#1025)"}, {"oid": "9fedc817d8f55824c54b2e8d3920395d442e2396", "committedDate": "2020-11-17 12:44:12 +0100", "message": "Forward Content-Encoding header OKAPI-936 (#1046)"}, {"oid": "0b884937b90decb7fd58ae962e68beb169ea7874", "committedDate": "2020-11-17 13:18:07 +0100", "message": "Upgrade okapi module for tenants OKAPI-930 (#1036)"}, {"oid": "8dfca94bcb27e727c8c4de0e293b6bfc81da602d", "committedDate": "2020-11-27 13:58:39 +0100", "message": "Update to Vert.x 4.0.0.CR2 OKAPI-955 (#1049)"}, {"oid": "1c9e23ceaf86649e45a63ecc813bd06007c0451f", "committedDate": "2020-12-09 12:13:11 +0100", "message": "Async tenant init OKAPI-875 (#1053)"}, {"oid": "bf0f67c544103cd79d49e1087d5d629583592092", "committedDate": "2020-12-14 15:15:11 -0500", "message": "Add removed lines back (#1060)"}, {"oid": "f084cbd1e5c81f372983db77ee830b85eb10d2e5", "committedDate": "2021-01-12 22:33:18 +0100", "message": "Extract try-catch into FuturisedHttpClient; reuse"}, {"oid": "85ca680d59ffdbe107e0a1c53e27dce7b2ff6e95", "committedDate": "2021-01-26 17:24:40 +0100", "message": "Refactoring; use GenericCompositeFuture (#1074)"}, {"oid": "114f3acb564ebf9b02e0db2227f5960eade7854b", "committedDate": "2021-02-15 18:08:14 +0100", "message": "Inform mod-permissions when module is disabled OKAPI-982 (#1082)"}, {"oid": "ffbb7f73bcc08f23d1293afc4d70e931a0bfa03f", "committedDate": "2021-03-11 18:40:17 +0100", "message": "OKAPI-998: Extend ProxyService#proxyClientFailure error message"}, {"oid": "2c147c90bc1108e3c9c097223e0f20847f0ecf86", "committedDate": "2021-03-11 22:09:15 +0100", "message": "Replace RequestOptions#toJson() by manual extraction"}, {"oid": "67c59ef22e3c39d8fb2a4520037153ae409f24a7", "committedDate": "2021-04-08 19:32:08 +0200", "message": "Timer management OKAPI-969 (#1110)"}, {"oid": "0e3342c4d66f30b29aa8e8b3d86e1a578dbbd28d", "committedDate": "2021-04-15 17:40:30 -0400", "message": "OKAPI-876 Simplify CORS delegate and support preflight too (#1115)"}, {"oid": "02155cf866346f8561395230d233f3945e9f4e93", "committedDate": "2021-04-19 13:54:43 +0200", "message": "Remove Future from return values"}, {"oid": "075373d3abf79ef79d1f38bd498340fd1aaefabf", "committedDate": "2021-05-21 09:07:09 -0400", "message": "support saml preflight (#1125)"}, {"oid": "51a4b5f9aa865a3d4c2e2879aee3fcf555f9c6dd", "committedDate": "2021-05-21 10:46:47 -0400", "message": "OKAPI-1015 Fix saml login call timeout (#1124)"}, {"oid": "05b19bd6871a73b8e68282a816f7f52a5a539d7b", "committedDate": "2021-08-20 12:50:44 +0200", "message": "Facility to remove obsolete modules OKAPI-1024 (#1135)"}, {"oid": "88d747a5ecf30e1368e8a19421ac20ec15696b07", "committedDate": "2021-10-13 20:19:34 +0200", "message": "Disable X-Okapi-Trace header by default OKAPI-1038 (#1147)"}, {"oid": "3f2d4f9a57d2cb03a0f1130240a4622bfc1e0d6a", "committedDate": "2021-10-19 09:21:09 +0200", "message": "Only put in token in cache if auth returns OK OKAPI-1037 (#1148)"}, {"oid": "d05dbd35734176472a2d7c9f6b45dc908a749923", "committedDate": "2021-12-19 20:24:18 +0100", "message": "OKAPI-1058: Reject MDC lookups mitigating log4j vuln (CVE-2021-45105)"}, {"oid": "0838f2aaa12c74abd58cda7eff7c09d6e09e1cd8", "committedDate": "2022-02-22 13:56:17 +0100", "message": "Parallelise migration OKAPI-939 (#1198)"}, {"oid": "1ae93decd82dce48b8a3cbdcdef3cb046da813ea", "committedDate": "2022-02-23 08:21:00 +0100", "message": "Revert \"Parallelise migration OKAPI-939 (#1198)\""}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "47eb44610851f87b90234e800e6b4d054ae46cbc", "committedDate": "2022-03-02 18:30:19 +0100", "message": "Okapi HTTP server may compress all responses OKAPI-1079 (#1216)"}, {"oid": "86cd4f7e83d209003be8a40c904a4fe22d8f4414", "committedDate": "2022-03-10 21:24:30 +0100", "message": "Property enable_system_auth checked for proxy calls (#1222)"}, {"oid": "83b1551002e159985d89e06c71baa569304a6719", "committedDate": "2022-07-13 12:48:10 +0200", "message": "Fix mod-authtoken tenant init not called OKAPI-1111 (#1250)"}, {"oid": "9bbe8c8e24a9960fe9b33ba1f3efb6fc3e4faefc", "committedDate": "2022-08-02 15:40:08 +0200", "message": "Copy X-Okapi-Permissions properly OKAPI-1111 (#1252)"}, {"oid": "67e301444242f6868d677c5fedc168ed2b5445d6", "committedDate": "2022-08-04 14:50:50 +0200", "message": "Cookie handling OKAPI-1104 (#1251)"}, {"oid": "ae83ecb73de3695a891f7770b3531b67854a28be", "committedDate": "2022-08-05 17:33:16 +0200", "message": "Fix X-Okapi-Token wrongly passed OKAPI-1113 (#1253)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "06f79c04f405be09c018153ac4b8e8840907423e", "committedDate": "2022-12-19 20:23:27 +0100", "message": "Fix various log wait issues OKAPI-1146 (#1290)"}, {"oid": "1a00832805e9534a8399101f00ed1c78a4122912", "committedDate": "2022-12-19 20:36:44 +0100", "message": "Check client close OKAPI-1144 (#1291)"}, {"oid": "981f7d7a11b262218d259cc674054b6124e476c1", "committedDate": "2023-01-18 21:53:31 +0100", "message": "OKAPI-1155: HTTP connection reset before response is sent"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452958451", "body": "The class should be moved from okapi-core to okapi-common that already is a dependency of RMB: https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162", "bodyText": "The class should be moved from okapi-core to okapi-common that already is a dependency of RMB: https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162", "bodyHTML": "<p dir=\"auto\">The class should be moved from okapi-core to okapi-common that already is a dependency of RMB: <a href=\"https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162\">https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162</a></p>", "author": "julianladisch", "createdAt": "2020-07-10T16:50:05Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQwOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454345409", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5268dac92ba8d22df969242c6645add40584bdc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nsimilarity index 83%\nrename from okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nrename to okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 2c88940c..51798e94 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package org.folio.okapi.logging;\n+package org.folio.okapi.common.logging;\n \n import io.vertx.core.Context;\n import io.vertx.core.Vertx;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nsimilarity index 50%\nrename from okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nrename to okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 2c88940c..f8b127dc 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package org.folio.okapi.logging;\n+package org.folio.okapi.common.logging;\n \n import io.vertx.core.Context;\n import io.vertx.core.Vertx;\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452960045", "body": "\"Folio\" can be removed from the class name because \"folio\" is already in the package name: \"org.folio.okapi.logging\" or \"org.folio.okapi.common\"", "bodyText": "\"Folio\" can be removed from the class name because \"folio\" is already in the package name: \"org.folio.okapi.logging\" or \"org.folio.okapi.common\"", "bodyHTML": "<p dir=\"auto\">\"Folio\" can be removed from the class name because \"folio\" is already in the package name: \"org.folio.okapi.logging\" or \"org.folio.okapi.common\"</p>", "author": "julianladisch", "createdAt": "2020-07-10T16:53:26Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2Mzc0Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454363747", "bodyText": "In log4j2.properties the name \"FolioLoggingContext\" used as: $${FolioLoggingContext:userid}. If it is just $${LoggingContext:userid}, the name is not self-explaining and there can be some collisions with some other LoggingContext", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2NDQ0Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454364442", "bodyText": "Having\n@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\npublic class LoggingContext implements StrLookup {\n\nfor me also looks not so good.", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nsimilarity index 80%\nrename from okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nrename to okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 2c88940c..b005614d 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -15,7 +15,15 @@ public class FolioLoggingContext implements StrLookup {\n \n   private static final String EMPTY_VALUE = \"\";\n \n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n \n   /**\n    * Lookup value by key.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nsimilarity index 50%\nrename from okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\nrename to okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 2c88940c..f8b127dc 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -9,20 +9,39 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n /**\n  * This class should be used for storing context variables\n  * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n \n   private static final String EMPTY_VALUE = \"\";\n \n-  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n \n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"oid": "a5268dac92ba8d22df969242c6645add40584bdc", "url": "https://github.com/folio-org/okapi/commit/a5268dac92ba8d22df969242c6645add40584bdc", "message": "OKAPI-871 Move to common", "committedDate": "2020-07-14T13:05:29Z", "type": "commit"}, {"oid": "d7f27962e97e166334f526f6802b833206fea5e2", "url": "https://github.com/folio-org/okapi/commit/d7f27962e97e166334f526f6802b833206fea5e2", "message": "OKAPI-871 Dev log4j configuration", "committedDate": "2020-07-14T13:11:20Z", "type": "commit"}, {"oid": "f3f4593e6f4ceb7bfa3ae7c397ae17a7d6082a77", "url": "https://github.com/folio-org/okapi/commit/f3f4593e6f4ceb7bfa3ae7c397ae17a7d6082a77", "message": "OKAPI-871 Dev log4j configuration", "committedDate": "2020-07-14T13:19:41Z", "type": "commit"}, {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "url": "https://github.com/folio-org/okapi/commit/ff2fe11c0f195f26cfc0ee17f257491c42004166", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-14T14:10:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NjIxNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454496214", "body": "Can you be more specific about the usage of this class? It should mention log4j, Vertx context, Vertx vertx local data.", "bodyText": "Can you be more specific about the usage of this class? It should mention log4j, Vertx context, Vertx vertx local data.", "bodyHTML": "<p dir=\"auto\">Can you be more specific about the usage of this class? It should mention log4j, Vertx context, Vertx vertx local data.</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:46:35Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -9,6 +9,12 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n /**\n  * This class should be used for storing context variables\n  * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "e8a634bd1fdf79569544676507bd7cc79c640c58", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..72e26347 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,8 +13,7 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n+ * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "125eefe1c3fa42ac92684dd5f0a85381e4286713", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 72e26347..796d1a23 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,7 +13,6 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 796d1a23..d9382ddd 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,6 +13,13 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * Usage example in log4j2.properties:\n+ *\n+ * appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ *\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "fe2ae252812765ac8a1af3c4775556298581d839", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex d9382ddd..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -14,12 +14,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * Usage example in log4j2.properties:\n+ * <p>Usage example in log4j2.properties:</p>\n  *\n- * appender.console.layout.requestId.type = KeyValuePair\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n- *\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f8b127dc..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n- * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -9,6 +9,16 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n /**\n  * This class should be used for storing context variables\n  * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -7,18 +7,20 @@ import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.lookup.StrLookup;\n \n /**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n+ * This class should be used for storing context variables and use them in logging events.\n+ *\n+ * <p>The variables are stored in the local vert.x\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * <p>Usage example in log4j2.properties:\n+ * <pre>{@code\n+ * appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ * }\n+ * </pre>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..b253afb3 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -21,6 +21,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n  * }\n  * </pre>\n+ *\n+ * <p>Note this does not work (empty values) when using the\n+ * <a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\">async logger</a>.\n+ *\n+ * <p>The default sync logger works fine.\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NzcwMQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454497701", "body": "Can you add javadoc for value and explain that null is accepted and will remove the entry?", "bodyText": "Can you add javadoc for value and explain that null is accepted and will remove the entry?", "bodyHTML": "<p dir=\"auto\">Can you add javadoc for value and explain that null is accepted and will remove the entry?</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:48:40Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -53,8 +64,10 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of  logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n", "next_change": {"commit": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..dc624eb2 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -66,7 +66,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n+  * @param value the value of logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "e8a634bd1fdf79569544676507bd7cc79c640c58", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex dc624eb2..72e26347 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -66,7 +65,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n+  * @param value the value of  logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "b67f6e621f5d2fecf03610da69878abf42cd70de", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 72e26347..f286193a 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -65,7 +64,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n+  * @param value the value of logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f286193a..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -53,8 +68,10 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Put value by key to the logging context.   *\n-  * @param key the name of logging variable (e.g. requestId)\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -68,11 +70,11 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n+   * Put value by key to the logging context.\n+   * @param key the name of logging variable, {@code null} key isn't allowed.\n+   * @param value the value of logging variable.\n+   *              If {@code null} is passed, entry is removed from context\n+   */\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454498289", "body": "VertxLoggingContext might be a better name.", "bodyText": "VertxLoggingContext might be a better name.", "bodyHTML": "<p dir=\"auto\">VertxLoggingContext might be a better name.</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:49:35Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTkzNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457339934", "bodyText": "I think, that there is a lot of stuff related to Vertx and VertxLoggingContext can be jumble with other Vertx classes. Does that make sense?", "author": "MikhailFokanov", "createdAt": "2020-07-20T12:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -9,6 +9,12 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n /**\n  * This class should be used for storing context variables\n  * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "e8a634bd1fdf79569544676507bd7cc79c640c58", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..72e26347 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,8 +13,7 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n+ * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "125eefe1c3fa42ac92684dd5f0a85381e4286713", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 72e26347..796d1a23 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,7 +13,6 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 796d1a23..d9382ddd 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,6 +13,13 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * Usage example in log4j2.properties:\n+ *\n+ * appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ *\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "fe2ae252812765ac8a1af3c4775556298581d839", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex d9382ddd..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -14,12 +14,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * Usage example in log4j2.properties:\n+ * <p>Usage example in log4j2.properties:</p>\n  *\n- * appender.console.layout.requestId.type = KeyValuePair\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n- *\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f8b127dc..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n- * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -9,6 +9,16 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n /**\n  * This class should be used for storing context variables\n  * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -7,18 +7,20 @@ import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.lookup.StrLookup;\n \n /**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n+ * This class should be used for storing context variables and use them in logging events.\n+ *\n+ * <p>The variables are stored in the local vert.x\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * <p>Usage example in log4j2.properties:\n+ * <pre>{@code\n+ * appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ * }\n+ * </pre>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..b253afb3 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -21,6 +21,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n  * }\n  * </pre>\n+ *\n+ * <p>Note this does not work (empty values) when using the\n+ * <a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\">async logger</a>.\n+ *\n+ * <p>The default sync logger works fine.\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMjMwNw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454502307", "body": "The return value should be asserted.", "bodyText": "The return value should be asserted.", "bodyHTML": "<p dir=\"auto\">The return value should be asserted.</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:55:36Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzE1MA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503150", "body": "This line should be wrapped in yet another vertx.runOnContext to make sure that the entry really is passed on.", "bodyText": "This line should be wrapped in yet another vertx.runOnContext to make sure that the entry really is passed on.", "bodyHTML": "<p dir=\"auto\">This line should be wrapped in yet another vertx.runOnContext to make sure that the entry really is passed on.</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:56:58Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzk3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503979", "body": "Async is required, otherwise the code inside the runOnContext is executed after test completion and therefore cannot report any failures.", "bodyText": "Async is required, otherwise the code inside the runOnContext is executed after test completion and therefore cannot report any failures.", "bodyHTML": "<p dir=\"auto\">Async is required, otherwise the code inside the runOnContext is executed after test completion and therefore cannot report any failures.</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:58:21Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDM3Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454504372", "body": "Async is missing", "bodyText": "Async is missing", "bodyHTML": "<p dir=\"auto\">Async is missing</p>", "author": "julianladisch", "createdAt": "2020-07-14T16:58:58Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454508724", "body": "These should be moved to okapi-core ProxyService, because this logging context is a general purpose library class.", "bodyText": "These should be moved to okapi-core ProxyService, because this logging context is a general purpose library class.", "bodyHTML": "<p dir=\"auto\">These should be moved to okapi-core ProxyService, because this logging context is a general purpose library class.</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:06:11Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NTYzOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r455775639", "bodyText": "These are general platform wide constants, which make sense for every module.", "author": "MikhailFokanov", "createdAt": "2020-07-16T13:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +34,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 29124e9b..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +38,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -47,11 +49,11 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n+   * Lookup value by key. LogEvent isn't used.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n   @Override\n   public String lookup(LogEvent event, String key) {\n     if (key == null) {\n", "next_change": {"commit": "8948d536a819776442e16a64eb20e47098f1c077", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..57b6a3f0 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -56,17 +61,22 @@ public class FolioLoggingContext implements StrLookup {\n    */\n   @Override\n   public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n+    // needs try/catch until fixed: https://github.com/eclipse-vertx/vert.x/issues/4611\n+    try {\n+      if (key == null) {\n+        throw new IllegalArgumentException(\"Key cannot be null\");\n+      }\n+      Context ctx = Vertx.currentContext();\n+      if (ctx != null) {\n+        String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+        if (val != null) {\n+          return val;\n+        }\n       }\n+      return EMPTY_VALUE;\n+    } catch (NullPointerException e) {\n+      return EMPTY_VALUE;\n     }\n-    return EMPTY_VALUE;\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDI1Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510257", "body": "Can you add `@Override`?", "bodyText": "Can you add @Override?", "bodyHTML": "<p dir=\"auto\">Can you add <code>@Override</code>?</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:08:47Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +34,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 29124e9b..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +38,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -47,11 +49,11 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n+   * Lookup value by key. LogEvent isn't used.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n   @Override\n   public String lookup(LogEvent event, String key) {\n     if (key == null) {\n", "next_change": {"commit": "8948d536a819776442e16a64eb20e47098f1c077", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..57b6a3f0 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -56,17 +61,22 @@ public class FolioLoggingContext implements StrLookup {\n    */\n   @Override\n   public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n+    // needs try/catch until fixed: https://github.com/eclipse-vertx/vert.x/issues/4611\n+    try {\n+      if (key == null) {\n+        throw new IllegalArgumentException(\"Key cannot be null\");\n+      }\n+      Context ctx = Vertx.currentContext();\n+      if (ctx != null) {\n+        String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+        if (val != null) {\n+          return val;\n+        }\n       }\n+      return EMPTY_VALUE;\n+    } catch (NullPointerException e) {\n+      return EMPTY_VALUE;\n     }\n-    return EMPTY_VALUE;\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDM5OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510398", "body": "Can you add `@Override`?", "bodyText": "Can you add @Override?", "bodyHTML": "<p dir=\"auto\">Can you add <code>@Override</code>?</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:09:04Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -38,10 +45,14 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Lookup value by key. LogEvent isn't used.\n   *\n-  * @param key the name of logging variable (e.g. requestId)\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n   * @return value for key or *empty string* if there is no such key\n   */\n+  @Override\n   public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 29124e9b..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -38,10 +49,14 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Lookup value by key. LogEvent isn't used.\n   *\n-  * @param key the name of logging variable (e.g. requestId)\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n   * @return value for key or *empty string* if there is no such key\n   */\n+  @Override\n   public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n       String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n", "next_change": {"commit": "8948d536a819776442e16a64eb20e47098f1c077", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..57b6a3f0 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -47,32 +54,37 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n+   * Lookup value by key. LogEvent isn't used.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n   @Override\n   public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n+    // needs try/catch until fixed: https://github.com/eclipse-vertx/vert.x/issues/4611\n+    try {\n+      if (key == null) {\n+        throw new IllegalArgumentException(\"Key cannot be null\");\n+      }\n+      Context ctx = Vertx.currentContext();\n+      if (ctx != null) {\n+        String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+        if (val != null) {\n+          return val;\n+        }\n       }\n+      return EMPTY_VALUE;\n+    } catch (NullPointerException e) {\n+      return EMPTY_VALUE;\n     }\n-    return EMPTY_VALUE;\n   }\n \n   /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n+   * Put value by key to the logging context.\n+   * @param key the name of logging variable, {@code null} key isn't allowed.\n+   * @param value the value of logging variable.\n+   *              If {@code null} is passed, entry is removed from context\n+   */\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDg5OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510899", "body": "The return value should be asserted.", "bodyText": "The return value should be asserted.", "bodyHTML": "<p dir=\"auto\">The return value should be asserted.</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:09:55Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNTI1OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454515258", "body": "null as a key may cause an exception, can you use a proper key?", "bodyText": "null as a key may cause an exception, can you use a proper key?", "bodyHTML": "<p dir=\"auto\">null as a key may cause an exception, can you use a proper key?</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:17:05Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjA0MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454516041", "body": "Can you add whether null key is allowed?\r\nThe same for lookup(LogEvent, String)?", "bodyText": "Can you add whether null key is allowed?\nThe same for lookup(LogEvent, String)?", "bodyHTML": "<p dir=\"auto\">Can you add whether null key is allowed?<br>\nThe same for lookup(LogEvent, String)?</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:18:25Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..29124e9b 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +34,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex 29124e9b..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex b005614d..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -28,9 +38,10 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n    * Lookup value by key.\n    *\n-   * @param key the name of logging variable (e.g. requestId)\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n    * @return value for key or *empty string* if there is no such key\n    */\n+  @Override\n   public String lookup(String key) {\n     return lookup(null, key);\n   }\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -47,11 +49,11 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n+   * Lookup value by key. LogEvent isn't used.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n   @Override\n   public String lookup(LogEvent event, String key) {\n     if (key == null) {\n", "next_change": {"commit": "8948d536a819776442e16a64eb20e47098f1c077", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..57b6a3f0 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -56,17 +61,22 @@ public class FolioLoggingContext implements StrLookup {\n    */\n   @Override\n   public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n+    // needs try/catch until fixed: https://github.com/eclipse-vertx/vert.x/issues/4611\n+    try {\n+      if (key == null) {\n+        throw new IllegalArgumentException(\"Key cannot be null\");\n+      }\n+      Context ctx = Vertx.currentContext();\n+      if (ctx != null) {\n+        String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+        if (val != null) {\n+          return val;\n+        }\n       }\n+      return EMPTY_VALUE;\n+    } catch (NullPointerException e) {\n+      return EMPTY_VALUE;\n     }\n-    return EMPTY_VALUE;\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODM1MA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518350", "body": "You need to swap the order for `context.assertEquals(expected, actual)`.", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "bodyHTML": "<p dir=\"auto\">You need to swap the order for <code>context.assertEquals(expected, actual)</code>.</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:22:10Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);\n+    });\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(loggingContext.lookup(KEY), \"\");", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -59,8 +67,9 @@ public class FolioLoggingContextTest {\n     Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n     vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n           FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(loggingContext.lookup(KEY), \"\");\n+          context.assertEquals(\"\", loggingContext.lookup(KEY));\n           async.complete();\n         }\n     );\n", "next_change": {"commit": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 1fba7033..76a5abe4 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -69,7 +70,7 @@ public class FolioLoggingContextTest {\n     vertx.runOnContext(e -> {\n           FolioLoggingContext.put(KEY, VALUE);\n           FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n           async.complete();\n         }\n     );\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 76a5abe4..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,79 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static final String KEY = \"KEY\";\n-  private static final String VALUE = \"VALUE\";\n-  private static final String EMPTY_STRING = \"\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -59,8 +76,9 @@ public class FolioLoggingContextTest {\n     Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n     vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n           FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(loggingContext.lookup(KEY), \"\");\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n           async.complete();\n         }\n     );\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODU2Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518567", "body": "You need to swap the order for `context.assertEquals(expected, actual)`.", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "bodyHTML": "<p dir=\"auto\">You need to swap the order for <code>context.assertEquals(expected, actual)</code>.</p>", "author": "julianladisch", "createdAt": "2020-07-14T17:22:33Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0ca1de29e993454d22074bd463117a7c315bd02", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1fba7033 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +32,34 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    context.assertEquals(null, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 1fba7033..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static String KEY = \"KEY\";\n-  private static String VALUE = \"VALUE\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(null, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(\"\", loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 729f4d57..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -31,27 +33,42 @@ public class FolioLoggingContextTest {\n   }\n \n   @Test\n-  public void lookupWithoutContextTest() {\n+  public void putWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    loggingContext.lookup(null);\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n   }\n \n \n   @Test\n   public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n     vertx.runOnContext(e -> {\n       FolioLoggingContext loggingContext = new FolioLoggingContext();\n       FolioLoggingContext.put(KEY, VALUE);\n-      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n     });\n   }\n \n   @Test\n   public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-      loggingContext.lookup(null);\n-    });\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n   }\n \n   @Test\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"oid": "a0ca1de29e993454d22074bd463117a7c315bd02", "url": "https://github.com/folio-org/okapi/commit/a0ca1de29e993454d22074bd463117a7c315bd02", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-20T13:25:36Z", "type": "commit"}, {"oid": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "url": "https://github.com/folio-org/okapi/commit/5e3ee1867a8b13ea78349e20874bb70bc39750ae", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-20T13:48:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NDQ5MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457444491", "body": "Can you fix the javadoc? The build fails with a Checkstyle violation.", "bodyText": "Can you fix the javadoc? The build fails with a Checkstyle violation.", "bodyHTML": "<p dir=\"auto\">Can you fix the javadoc? The build fails with a Checkstyle violation.</p>", "author": "julianladisch", "createdAt": "2020-07-20T14:35:19Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */", "originalCommit": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a634bd1fdf79569544676507bd7cc79c640c58", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..72e26347 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,8 +13,7 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * , Vertx vertx local data\n+ * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "125eefe1c3fa42ac92684dd5f0a85381e4286713", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 72e26347..796d1a23 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,7 +13,6 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- * Vertx vertx local data\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 796d1a23..d9382ddd 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,6 +13,13 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * Usage example in log4j2.properties:\n+ *\n+ * appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ *\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "fe2ae252812765ac8a1af3c4775556298581d839", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex d9382ddd..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -14,12 +14,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * Usage example in log4j2.properties:\n+ * <p>Usage example in log4j2.properties:</p>\n  *\n- * appender.console.layout.requestId.type = KeyValuePair\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n- *\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f8b127dc..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n- * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -14,7 +14,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * , Vertx vertx local data\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -7,18 +7,20 @@ import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.lookup.StrLookup;\n \n /**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n+ * This class should be used for storing context variables and use them in logging events.\n+ *\n+ * <p>The variables are stored in the local vert.x\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * <p>Usage example in log4j2.properties:\n+ * <pre>{@code\n+ * appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ * }\n+ * </pre>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..b253afb3 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -21,6 +21,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n  * }\n  * </pre>\n+ *\n+ * <p>Note this does not work (empty values) when using the\n+ * <a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\">async logger</a>.\n+ *\n+ * <p>The default sync logger works fine.\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NTU1Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457445552", "body": "```suggestion\r\n  * @param value the value of logging variable.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * @param value the value of  logging variable.\n          \n          \n            \n              * @param value the value of logging variable.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> value the value of <span class=\"x x-first x-last\"> </span>logging variable.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> value the value of logging variable.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "julianladisch", "createdAt": "2020-07-20T14:36:18Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of  logging variable.", "originalCommit": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..dc624eb2 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -66,7 +66,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n+  * @param value the value of logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "e8a634bd1fdf79569544676507bd7cc79c640c58", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex dc624eb2..72e26347 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -66,7 +65,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n+  * @param value the value of  logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "b67f6e621f5d2fecf03610da69878abf42cd70de", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 72e26347..f286193a 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -65,7 +64,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n+  * @param value the value of logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f286193a..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 29124e9b..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -66,7 +70,7 @@ public class FolioLoggingContext implements StrLookup {\n   /**\n   * Put value by key to the logging context.\n   * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of  logging variable.\n+  * @param value the value of logging variable.\n   *             If {@code null} is passed, entry is removed from context.\n   */\n   public static void put(String key, String value) {\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -68,11 +70,11 @@ public class FolioLoggingContext implements StrLookup {\n   }\n \n   /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n+   * Put value by key to the logging context.\n+   * @param key the name of logging variable, {@code null} key isn't allowed.\n+   * @param value the value of logging variable.\n+   *              If {@code null} is passed, entry is removed from context\n+   */\n   public static void put(String key, String value) {\n     Context ctx = Vertx.currentContext();\n     if (ctx != null) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "url": "https://github.com/folio-org/okapi/commit/41a043d50cea7b1ee45f1f9fb757071a7ca57484", "message": "Update okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n\nCo-authored-by: julianladisch <julianladisch@users.noreply.github.com>", "committedDate": "2020-07-20T14:36:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457469389", "body": "When running `mvn clean install` there isn't a single unit test that logs a user id. Can you extend an existing test by adding XOkapiHeaders.USER_ID? You don't need to assert that it is logged, I can look at the output.", "bodyText": "When running mvn clean install there isn't a single unit test that logs a user id. Can you extend an existing test by adding XOkapiHeaders.USER_ID? You don't need to assert that it is logged, I can look at the output.", "bodyHTML": "<p dir=\"auto\">When running <code>mvn clean install</code> there isn't a single unit test that logs a user id. Can you extend an existing test by adding XOkapiHeaders.USER_ID? You don't need to assert that it is logged, I can look at the output.</p>", "author": "julianladisch", "createdAt": "2020-07-20T15:01:47Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "originalCommit": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTQ2OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841468", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T12:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjYzOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916639", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T14:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1OTY4NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r461559685", "bodyText": "This works if the user id is passed in as X-Okapi-User-Id header.\nHowever, the front-end passes in the user id in the token. Okapi sends the token to mod-authtoken for validation. When Okapi gets the reply from mod-authtoken that the validation was successful we know the user id and can set the user id in the FolioLoggingContext. Details: https://github.com/folio-org/okapi/blob/master/doc/security.md\nCan you find the code where Okapi gets the validation result and add code for setting the user id?", "author": "julianladisch", "createdAt": "2020-07-28T13:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxODQyNQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462218425", "bodyText": "Are we interested in userId, username (login) or both? I searched Okapi code and looks like currently it does not have a central place to extract those info from the token. I am thinking that we can add those methods to https://github.com/folio-org/okapi/blob/master/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java. For example like this https://github.com/folio-org/okapi/compare/username-userid?expand=1", "author": "hjiebsco", "createdAt": "2020-07-29T11:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 84f59c3e..8dbe7070 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -516,16 +514,6 @@ public class ProxyService {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n-\n-    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n-        tenantId);\n-    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.REQUEST_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.MODULE_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.USER_ID));\n-\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 8dbe7070..84f59c3e 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -514,6 +516,16 @@ public class ProxyService {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));\n+\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n", "next_change": {"commit": "08efadd3db3f7ba349775199b9986ab7809d9e57", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 84f59c3e..75a2ab8f 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -523,8 +523,6 @@ public class ProxyService {\n         headers.get(XOkapiHeaders.REQUEST_ID));\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.USER_ID));\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "72f8410820987d085c7ae4022421c4a903bbcdd3", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 75a2ab8f..9b123d7a 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -523,6 +536,8 @@ public class ProxyService {\n         headers.get(XOkapiHeaders.REQUEST_ID));\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "d6683bff1742773173f0bd22b101c27920850fb4", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 9b123d7a..86570792 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -537,7 +549,7 @@ public class ProxyService {\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n     FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        pc.getUserId());\n+        pc.getUserIdWithoutValidation());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 86570792..494d3540 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -549,7 +549,7 @@ public class ProxyService {\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n     FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        pc.getUserIdWithoutValidation());\n+        pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 84f59c3e..494d3540 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -524,7 +549,7 @@ public class ProxyService {\n     FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n         headers.get(XOkapiHeaders.MODULE_ID));\n     FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        headers.get(XOkapiHeaders.USER_ID));\n+        pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {\n", "next_change": {"commit": "901b78620e2d54a5de42a691076461703f9e3b7d", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 494d3540..5e2926ae 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -552,17 +543,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId, gres -> {\n+    tenantManager.get(tenantId).onComplete(gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant, mres -> {\n+      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(mres.getType(), mres.cause());\n+          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 5e2926ae..9b79ce51 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -543,17 +602,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onComplete(gres -> {\n+    tenantManager.get(tenantId, gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n+      moduleManager.getEnabledModules(tenant, mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n+          pc.responseError(mres.getType(), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 9b79ce51..1f90d4ae 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -602,17 +593,17 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId, gres -> {\n+    tenantManager.get(tenantId).onComplete(gres -> {\n       if (gres.failed()) {\n         stream.resume();\n         pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         return;\n       }\n       Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant, mres -> {\n+      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n         if (mres.failed()) {\n           stream.resume();\n-          pc.responseError(mres.getType(), mres.cause());\n+          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n           return;\n         }\n         List<ModuleDescriptor> enabledModules = mres.result();\n", "next_change": {"commit": "5057791f695f6bffb5799640ab9c6a74269df3a5", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 1f90d4ae..58589132 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -593,27 +544,21 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onComplete(gres -> {\n-      if (gres.failed()) {\n+    tenantManager.get(tenantId).onFailure(cause -> {\n+      stream.resume();\n+      pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n+    }).onSuccess(tenant -> {\n+      tenantManager.getModuleCache(tenant).onFailure(cause -> {\n         stream.resume();\n-        pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n-        return;\n-      }\n-      Tenant tenant = gres.result();\n-      moduleManager.getEnabledModules(tenant).onComplete(mres -> {\n-        if (mres.failed()) {\n-          stream.resume();\n-          pc.responseError(OkapiError.getType(mres.cause()), mres.cause());\n-          return;\n-        }\n-        List<ModuleDescriptor> enabledModules = mres.result();\n-\n-        List<ModuleInstance> l = getModulesForRequest(pc, enabledModules);\n+        pc.responseError(OkapiError.getType(cause), cause);\n+      }).onSuccess(cache -> {\n+        final Timer.Sample sample = MetricsHelper.getTimerSample();\n+        List<ModuleInstance> l = getModulesForRequest(pc, cache);\n+        MetricsHelper.recordCodeExecutionTime(sample, \"ProxyService.getModulesForRequest\");\n         if (l == null) {\n           stream.resume();\n           return; // ctx already set up\n         }\n-\n         // check delegate CORS and reroute if necessary\n         if (CorsHelper.checkCorsDelegate(ctx, l)) {\n           // HTTP code 100 is chosen purely as metrics tag placeholder\n", "next_change": {"commit": "85ca680d59ffdbe107e0a1c53e27dce7b2ff6e95", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 58589132..068c285c 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -544,50 +543,55 @@ public class ProxyService {\n         pc.getUserId());\n \n     sanitizeAuthHeaders(headers);\n-    tenantManager.get(tenantId).onFailure(cause -> {\n-      stream.resume();\n-      pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n-    }).onSuccess(tenant -> {\n-      tenantManager.getModuleCache(tenant).onFailure(cause -> {\n-        stream.resume();\n-        pc.responseError(OkapiError.getType(cause), cause);\n-      }).onSuccess(cache -> {\n-        final Timer.Sample sample = MetricsHelper.getTimerSample();\n-        List<ModuleInstance> l = getModulesForRequest(pc, cache);\n-        MetricsHelper.recordCodeExecutionTime(sample, \"ProxyService.getModulesForRequest\");\n-        if (l == null) {\n-          stream.resume();\n-          return; // ctx already set up\n-        }\n-        // check delegate CORS and reroute if necessary\n-        if (CorsHelper.checkCorsDelegate(ctx, l)) {\n-          // HTTP code 100 is chosen purely as metrics tag placeholder\n-          MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(), 100,\n-              pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n-          stream.resume();\n-          ctx.reroute(ctx.request().path());\n-          return;\n-        }\n-\n-        pc.setModList(l);\n-\n-        pc.logRequest(ctx, tenantId);\n-\n-        headers.set(XOkapiHeaders.URL, okapiUrl);\n-        headers.remove(XOkapiHeaders.MODULE_ID);\n-        headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n-        headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n-        headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n-\n-        resolveUrls(l).onFailure(cause -> {\n+    tenantManager.get(tenantId)\n+        .onFailure(cause -> {\n           stream.resume();\n-          pc.responseError(OkapiError.getType(cause), cause);\n-        }).onSuccess(res -> {\n-          List<HttpClientRequest> clientRequest = new LinkedList<>();\n-          proxyR(l.iterator(), pc, stream, null, clientRequest);\n-        });\n-      });\n-    });\n+          pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n+        })\n+        .onSuccess(tenant ->\n+            tenantManager.getModuleCache(tenant)\n+                .onFailure(cause -> {\n+                  stream.resume();\n+                  pc.responseError(OkapiError.getType(cause), cause);\n+                })\n+                .onSuccess(cache -> {\n+                  final Timer.Sample sample = MetricsHelper.getTimerSample();\n+                  List<ModuleInstance> l = getModulesForRequest(pc, cache);\n+                  MetricsHelper.recordCodeExecutionTime(sample,\n+                      \"ProxyService.getModulesForRequest\");\n+                  if (l == null) {\n+                    stream.resume();\n+                    return; // ctx already set up\n+                  }\n+                  // check delegate CORS and reroute if necessary\n+                  if (CorsHelper.checkCorsDelegate(ctx, l)) {\n+                    // HTTP code 100 is chosen purely as metrics tag placeholder\n+                    MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(),\n+                        100, pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n+                    stream.resume();\n+                    ctx.reroute(ctx.request().path());\n+                    return;\n+                  }\n+\n+                  pc.setModList(l);\n+\n+                  pc.logRequest(ctx, tenantId);\n+\n+                  headers.set(XOkapiHeaders.URL, okapiUrl);\n+                  headers.remove(XOkapiHeaders.MODULE_ID);\n+                  headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n+                  headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n+                  headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n+\n+                  resolveUrls(l).onFailure(cause -> {\n+                    stream.resume();\n+                    pc.responseError(OkapiError.getType(cause), cause);\n+                  }).onSuccess(res -> {\n+                    List<HttpClientRequest> clientRequest = new LinkedList<>();\n+                    proxyR(l.iterator(), pc, stream, null, clientRequest);\n+                  });\n+                })\n+        );\n   }\n \n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n", "next_change": {"commit": "02155cf866346f8561395230d233f3945e9f4e93", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 068c285c..e98a0623 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -548,50 +550,34 @@ public class ProxyService {\n           stream.resume();\n           pc.responseError(400, messages.getMessage(\"10106\", tenantId));\n         })\n-        .onSuccess(tenant ->\n-            tenantManager.getModuleCache(tenant)\n-                .onFailure(cause -> {\n-                  stream.resume();\n-                  pc.responseError(OkapiError.getType(cause), cause);\n-                })\n-                .onSuccess(cache -> {\n-                  final Timer.Sample sample = MetricsHelper.getTimerSample();\n-                  List<ModuleInstance> l = getModulesForRequest(pc, cache);\n-                  MetricsHelper.recordCodeExecutionTime(sample,\n-                      \"ProxyService.getModulesForRequest\");\n-                  if (l == null) {\n-                    stream.resume();\n-                    return; // ctx already set up\n-                  }\n-                  // check delegate CORS and reroute if necessary\n-                  if (CorsHelper.checkCorsDelegate(ctx, l)) {\n-                    // HTTP code 100 is chosen purely as metrics tag placeholder\n-                    MetricsHelper.recordHttpServerProcessingTime(pc.getSample(), pc.getTenant(),\n-                        100, pc.getCtx().request().method().name(), pc.getHandlerModuleInstance());\n-                    stream.resume();\n-                    ctx.reroute(ctx.request().path());\n-                    return;\n-                  }\n-\n-                  pc.setModList(l);\n-\n-                  pc.logRequest(ctx, tenantId);\n-\n-                  headers.set(XOkapiHeaders.URL, okapiUrl);\n-                  headers.remove(XOkapiHeaders.MODULE_ID);\n-                  headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n-                  headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n-                  headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n-\n-                  resolveUrls(l).onFailure(cause -> {\n-                    stream.resume();\n-                    pc.responseError(OkapiError.getType(cause), cause);\n-                  }).onSuccess(res -> {\n-                    List<HttpClientRequest> clientRequest = new LinkedList<>();\n-                    proxyR(l.iterator(), pc, stream, null, clientRequest);\n-                  });\n-                })\n-        );\n+        .onSuccess(tenant -> {\n+          final Timer.Sample sample = MetricsHelper.getTimerSample();\n+          List<ModuleInstance> l = getModulesForRequest(pc, tenantManager.getModuleCache(tenant));\n+          MetricsHelper.recordCodeExecutionTime(sample,\n+              \"ProxyService.getModulesForRequest\");\n+          if (l == null) {\n+            stream.resume();\n+            return; // ctx already set up\n+          }\n+\n+          pc.setModList(l);\n+\n+          pc.logRequest(ctx, tenantId);\n+\n+          headers.set(XOkapiHeaders.URL, okapiUrl);\n+          headers.remove(XOkapiHeaders.MODULE_ID);\n+          headers.set(XOkapiHeaders.REQUEST_IP, ctx.request().remoteAddress().host());\n+          headers.set(XOkapiHeaders.REQUEST_TIMESTAMP, \"\" + System.currentTimeMillis());\n+          headers.set(XOkapiHeaders.REQUEST_METHOD, ctx.request().method().name());\n+\n+          resolveUrls(l).onFailure(cause -> {\n+            stream.resume();\n+            pc.responseError(OkapiError.getType(cause), cause);\n+          }).onSuccess(res -> {\n+            List<HttpClientRequest> clientRequest = new LinkedList<>();\n+            proxyR(l.iterator(), pc, stream, null, clientRequest);\n+          });\n+        });\n   }\n \n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n", "next_change": {"commit": "d05dbd35734176472a2d7c9f6b45dc908a749923", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex e98a0623..3eac1aee 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -580,6 +598,21 @@ public class ProxyService {\n         });\n   }\n \n+  /**\n+   * Throw IllegalArgumentException if s contains ${ to disable MDC lookups\n+   * mitigating any denial of service attack using recursive lookups\n+   * (CVE-2021-45105, https://logging.apache.org/log4j/2.x/index.html ).\n+   * Otherwise put (name, s) into FolioLoggingContext.\n+   */\n+  private static void putAndRejectMdcLookups(ProxyContext pc, String name, String s) {\n+    if (s != null && s.contains(\"${\")) {\n+      var e = new IllegalArgumentException(name + \" must not contain ${\");\n+      pc.responseError(400, e.getMessage());\n+      throw e;\n+    }\n+    FolioLoggingContext.put(name, s);\n+  }\n+\n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n     for (HttpClientRequest r : clientRequestList) {\n       r.end(bcontent);\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\nindex 3eac1aee..43b1a9dd 100644\n--- a/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n+++ b/okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java\n", "chunk": "@@ -598,21 +581,6 @@ public class ProxyService {\n         });\n   }\n \n-  /**\n-   * Throw IllegalArgumentException if s contains ${ to disable MDC lookups\n-   * mitigating any denial of service attack using recursive lookups\n-   * (CVE-2021-45105, https://logging.apache.org/log4j/2.x/index.html ).\n-   * Otherwise put (name, s) into FolioLoggingContext.\n-   */\n-  private static void putAndRejectMdcLookups(ProxyContext pc, String name, String s) {\n-    if (s != null && s.contains(\"${\")) {\n-      var e = new IllegalArgumentException(name + \" must not contain ${\");\n-      pc.responseError(400, e.getMessage());\n-      throw e;\n-    }\n-    FolioLoggingContext.put(name, s);\n-  }\n-\n   private static void clientsEnd(Buffer bcontent, List<HttpClientRequest> clientRequestList) {\n     for (HttpClientRequest r : clientRequestList) {\n       r.end(bcontent);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "66c89b7db8b31434ab43427a1c5786c6578bb66e", "committedDate": "2020-09-14 11:37:25 -0400", "message": "port to Okapi4 and add metrics"}, {"oid": "77e98f0f58a1f844b66e2d6c03b3a9fd1465fc7a", "committedDate": "2020-09-14 16:11:51 -0400", "message": "sonar - again"}, {"oid": "b17184d07cb5d18d4213e2d8a4eb1b7e35b1b7bd", "committedDate": "2020-09-14 16:15:59 -0400", "message": "fixing line length"}, {"oid": "b5a26cf1f02edb92af4e55fb352c2a8240426761", "committedDate": "2020-09-17 20:53:27 +0200", "message": "Update to Vert.x 4.0.0 Beta 2 OKAPI-889 (#971)"}, {"oid": "a0124da75707b57156adc0088ee6d5a92d7e3420", "committedDate": "2020-09-21 13:52:37 +0300", "message": "OKAPI-872 Log level corrections"}, {"oid": "b48bbef331bcc21f3bf51a3f354e7ed1dea68434", "committedDate": "2020-09-23 15:26:45 -0400", "message": "Merge branch 'master' into tokenCache"}, {"oid": "901b78620e2d54a5de42a691076461703f9e3b7d", "committedDate": "2020-09-25 11:09:34 +0200", "message": "Async install and Futurisation OKAPI-845 OKAPI-874 (#963)"}, {"oid": "4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "committedDate": "2020-09-29 12:11:52 -0400", "message": "OKAPI-890: formalize tokenCache PoC"}, {"oid": "a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "committedDate": "2020-09-29 12:23:38 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "76368d0c418f925f1a6bf204318965cdf5023562", "committedDate": "2020-09-29 17:00:09 -0400", "message": "allow token cache args to be specified as system properties"}, {"oid": "516eb2b77f861512714a8c4e8d41310bf21247b8", "committedDate": "2020-10-01 08:59:31 -0400", "message": "log cache messages at debug level"}, {"oid": "624117f5983303709510d89f3d3aea878aa397aa", "committedDate": "2020-10-05 19:01:45 +0200", "message": "Allow module and interface discovery for same tenant OKAPI-863 (#985)"}, {"oid": "b2a1daeeeebcac0fd6938420bfee55a708767f52", "committedDate": "2020-10-06 18:59:59 -0400", "message": "Add metrics for some slow methods"}, {"oid": "ea941baa73ccee20329f302c9a09afa92a44dbbf", "committedDate": "2020-10-08 22:57:41 -0400", "message": "OKAPI-890 remove userId from cache key"}, {"oid": "2a546c9f7f0c8b77e65f90a617dd58b5bdf0a804", "committedDate": "2020-10-08 23:12:14 -0400", "message": "OKAPI-890 work skipAuth into existing loop"}, {"oid": "9179bf50e6a9c1a724b8cb5c629bd77e142ff0f8", "committedDate": "2020-10-08 23:15:39 -0400", "message": "OKAPI-890 rename members for readability"}, {"oid": "3aa221bbc89262d224e8518ac0b6338991a30826", "committedDate": "2020-10-08 23:24:28 -0400", "message": "OKAPI-890 minor tweaks to checkTokenCache method"}, {"oid": "59b39eb8b0cbe978145b040bb6c3a2672268739f", "committedDate": "2020-10-08 23:45:42 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "aebd99fc6c4d3ae95fcdbbddde4fbbc36e1516aa", "committedDate": "2020-10-09 09:29:32 -0400", "message": "Add granual metrics for ProxyService.getModulesForRequest"}, {"oid": "112335a9400dd63bb3ba22d435e584abba2bcf1d", "committedDate": "2020-10-09 12:31:48 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "38c3e89d3c2ad3a5feea0ebf07da1401a21d804d", "committedDate": "2020-10-16 17:23:02 -0400", "message": "OKAPI-921 skip cache if no token"}, {"oid": "dab4739dc57fb4c0eb470d1a84fee8aedd1ff467", "committedDate": "2020-10-16 17:28:23 -0400", "message": "OKAPI-921 fix indentation"}, {"oid": "b6d0083335bb9836ea4ef5eee7c016d1495f039b", "committedDate": "2020-10-19 08:53:05 -0400", "message": "OKAPI-921 remove unneeded null check"}, {"oid": "dcb669c48ec24d7d96f5d21ca694d5d9631cbcc1", "committedDate": "2020-10-27 19:46:08 +0100", "message": "Cleanup ProxyContext logging OKAPI-910 (#1022)"}, {"oid": "5057791f695f6bffb5799640ab9c6a74269df3a5", "committedDate": "2020-11-04 18:57:12 +0100", "message": "module path match path using hash OKAPI-916 (#1025)"}, {"oid": "9fedc817d8f55824c54b2e8d3920395d442e2396", "committedDate": "2020-11-17 12:44:12 +0100", "message": "Forward Content-Encoding header OKAPI-936 (#1046)"}, {"oid": "0b884937b90decb7fd58ae962e68beb169ea7874", "committedDate": "2020-11-17 13:18:07 +0100", "message": "Upgrade okapi module for tenants OKAPI-930 (#1036)"}, {"oid": "8dfca94bcb27e727c8c4de0e293b6bfc81da602d", "committedDate": "2020-11-27 13:58:39 +0100", "message": "Update to Vert.x 4.0.0.CR2 OKAPI-955 (#1049)"}, {"oid": "1c9e23ceaf86649e45a63ecc813bd06007c0451f", "committedDate": "2020-12-09 12:13:11 +0100", "message": "Async tenant init OKAPI-875 (#1053)"}, {"oid": "bf0f67c544103cd79d49e1087d5d629583592092", "committedDate": "2020-12-14 15:15:11 -0500", "message": "Add removed lines back (#1060)"}, {"oid": "f084cbd1e5c81f372983db77ee830b85eb10d2e5", "committedDate": "2021-01-12 22:33:18 +0100", "message": "Extract try-catch into FuturisedHttpClient; reuse"}, {"oid": "85ca680d59ffdbe107e0a1c53e27dce7b2ff6e95", "committedDate": "2021-01-26 17:24:40 +0100", "message": "Refactoring; use GenericCompositeFuture (#1074)"}, {"oid": "114f3acb564ebf9b02e0db2227f5960eade7854b", "committedDate": "2021-02-15 18:08:14 +0100", "message": "Inform mod-permissions when module is disabled OKAPI-982 (#1082)"}, {"oid": "ffbb7f73bcc08f23d1293afc4d70e931a0bfa03f", "committedDate": "2021-03-11 18:40:17 +0100", "message": "OKAPI-998: Extend ProxyService#proxyClientFailure error message"}, {"oid": "2c147c90bc1108e3c9c097223e0f20847f0ecf86", "committedDate": "2021-03-11 22:09:15 +0100", "message": "Replace RequestOptions#toJson() by manual extraction"}, {"oid": "67c59ef22e3c39d8fb2a4520037153ae409f24a7", "committedDate": "2021-04-08 19:32:08 +0200", "message": "Timer management OKAPI-969 (#1110)"}, {"oid": "0e3342c4d66f30b29aa8e8b3d86e1a578dbbd28d", "committedDate": "2021-04-15 17:40:30 -0400", "message": "OKAPI-876 Simplify CORS delegate and support preflight too (#1115)"}, {"oid": "02155cf866346f8561395230d233f3945e9f4e93", "committedDate": "2021-04-19 13:54:43 +0200", "message": "Remove Future from return values"}, {"oid": "075373d3abf79ef79d1f38bd498340fd1aaefabf", "committedDate": "2021-05-21 09:07:09 -0400", "message": "support saml preflight (#1125)"}, {"oid": "51a4b5f9aa865a3d4c2e2879aee3fcf555f9c6dd", "committedDate": "2021-05-21 10:46:47 -0400", "message": "OKAPI-1015 Fix saml login call timeout (#1124)"}, {"oid": "05b19bd6871a73b8e68282a816f7f52a5a539d7b", "committedDate": "2021-08-20 12:50:44 +0200", "message": "Facility to remove obsolete modules OKAPI-1024 (#1135)"}, {"oid": "88d747a5ecf30e1368e8a19421ac20ec15696b07", "committedDate": "2021-10-13 20:19:34 +0200", "message": "Disable X-Okapi-Trace header by default OKAPI-1038 (#1147)"}, {"oid": "3f2d4f9a57d2cb03a0f1130240a4622bfc1e0d6a", "committedDate": "2021-10-19 09:21:09 +0200", "message": "Only put in token in cache if auth returns OK OKAPI-1037 (#1148)"}, {"oid": "d05dbd35734176472a2d7c9f6b45dc908a749923", "committedDate": "2021-12-19 20:24:18 +0100", "message": "OKAPI-1058: Reject MDC lookups mitigating log4j vuln (CVE-2021-45105)"}, {"oid": "0838f2aaa12c74abd58cda7eff7c09d6e09e1cd8", "committedDate": "2022-02-22 13:56:17 +0100", "message": "Parallelise migration OKAPI-939 (#1198)"}, {"oid": "1ae93decd82dce48b8a3cbdcdef3cb046da813ea", "committedDate": "2022-02-23 08:21:00 +0100", "message": "Revert \"Parallelise migration OKAPI-939 (#1198)\""}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "47eb44610851f87b90234e800e6b4d054ae46cbc", "committedDate": "2022-03-02 18:30:19 +0100", "message": "Okapi HTTP server may compress all responses OKAPI-1079 (#1216)"}, {"oid": "86cd4f7e83d209003be8a40c904a4fe22d8f4414", "committedDate": "2022-03-10 21:24:30 +0100", "message": "Property enable_system_auth checked for proxy calls (#1222)"}, {"oid": "83b1551002e159985d89e06c71baa569304a6719", "committedDate": "2022-07-13 12:48:10 +0200", "message": "Fix mod-authtoken tenant init not called OKAPI-1111 (#1250)"}, {"oid": "9bbe8c8e24a9960fe9b33ba1f3efb6fc3e4faefc", "committedDate": "2022-08-02 15:40:08 +0200", "message": "Copy X-Okapi-Permissions properly OKAPI-1111 (#1252)"}, {"oid": "67e301444242f6868d677c5fedc168ed2b5445d6", "committedDate": "2022-08-04 14:50:50 +0200", "message": "Cookie handling OKAPI-1104 (#1251)"}, {"oid": "ae83ecb73de3695a891f7770b3531b67854a28be", "committedDate": "2022-08-05 17:33:16 +0200", "message": "Fix X-Okapi-Token wrongly passed OKAPI-1113 (#1253)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "06f79c04f405be09c018153ac4b8e8840907423e", "committedDate": "2022-12-19 20:23:27 +0100", "message": "Fix various log wait issues OKAPI-1146 (#1290)"}, {"oid": "1a00832805e9534a8399101f00ed1c78a4122912", "committedDate": "2022-12-19 20:36:44 +0100", "message": "Check client close OKAPI-1144 (#1291)"}, {"oid": "981f7d7a11b262218d259cc674054b6124e476c1", "committedDate": "2023-01-18 21:53:31 +0100", "message": "OKAPI-1155: HTTP connection reset before response is sent"}]}, {"oid": "e8a634bd1fdf79569544676507bd7cc79c640c58", "url": "https://github.com/folio-org/okapi/commit/e8a634bd1fdf79569544676507bd7cc79c640c58", "message": "OKAPI-871 Fixes", "committedDate": "2020-07-23T15:53:53Z", "type": "commit"}, {"oid": "125eefe1c3fa42ac92684dd5f0a85381e4286713", "url": "https://github.com/folio-org/okapi/commit/125eefe1c3fa42ac92684dd5f0a85381e4286713", "message": "OKAPI-871 Fixes", "committedDate": "2020-07-23T15:54:16Z", "type": "commit"}, {"oid": "b67f6e621f5d2fecf03610da69878abf42cd70de", "url": "https://github.com/folio-org/okapi/commit/b67f6e621f5d2fecf03610da69878abf42cd70de", "message": "Merge remote-tracking branch 'origin/OKAPI-871' into OKAPI-871", "committedDate": "2020-07-23T15:54:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r459587679", "body": "I don't see StrLookup in log4j2.properties. I only see references like `$${FolioLoggingContext:requestid}`. Can you make the usage explanation more instructive?", "bodyText": "I don't see StrLookup in log4j2.properties. I only see references like $${FolioLoggingContext:requestid}. Can you make the usage explanation more instructive?", "bodyHTML": "<p dir=\"auto\">I don't see StrLookup in log4j2.properties. I only see references like <code>$${FolioLoggingContext:requestid}</code>. Can you make the usage explanation more instructive?</p>", "author": "julianladisch", "createdAt": "2020-07-23T16:47:27Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}", "originalCommit": "b67f6e621f5d2fecf03610da69878abf42cd70de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTUwNw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841507", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T12:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjczNg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916736", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T14:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f286193a..d9382ddd 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,6 +13,13 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * Usage example in log4j2.properties:\n+ *\n+ * appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ *\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "fe2ae252812765ac8a1af3c4775556298581d839", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex d9382ddd..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -14,12 +14,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * Usage example in log4j2.properties:\n+ * <p>Usage example in log4j2.properties:</p>\n  *\n- * appender.console.layout.requestId.type = KeyValuePair\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n- *\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\ndeleted file mode 100644\nindex f8b127dc..00000000\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.folio.okapi.common.logging;\n-\n-import io.vertx.core.Context;\n-import io.vertx.core.Vertx;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.lookup.StrLookup;\n-\n-/**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n- * {@link io.vertx.core.Context#putLocal Context}\n- * and can be used in log4j log lines by using\n- * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n- *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n- * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n- */\n-@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n-public class FolioLoggingContext implements StrLookup {\n-\n-  private static final String EMPTY_VALUE = \"\";\n-\n-  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n-\n-  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n-\n-  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n-\n-  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n-\n-  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n-\n-  /**\n-   * Lookup value by key.\n-   *\n-   * @param key the name of logging variable, {@code null} key isn't allowed\n-   * @return value for key or *empty string* if there is no such key\n-   */\n-  @Override\n-  public String lookup(String key) {\n-    return lookup(null, key);\n-  }\n-\n-  /**\n-  * Lookup value by key. LogEvent isn't used.\n-  *\n-  * @param key the name of logging variable, {@code null} key isn't allowed\n-  * @return value for key or *empty string* if there is no such key\n-  */\n-  @Override\n-  public String lookup(LogEvent event, String key) {\n-    if (key == null) {\n-      throw new IllegalArgumentException(\"Key cannot be null\");\n-    }\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n-      if (val != null) {\n-        return val;\n-      }\n-    }\n-    return EMPTY_VALUE;\n-  }\n-\n-  /**\n-  * Put value by key to the logging context.\n-  * @param key the name of logging variable, {@code null} key isn't allowed.\n-  * @param value the value of logging variable.\n-  *             If {@code null} is passed, entry is removed from context.\n-  */\n-  public static void put(String key, String value) {\n-    Context ctx = Vertx.currentContext();\n-    if (ctx != null) {\n-      if (value != null) {\n-        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n-      } else {\n-        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n-      }\n-    }\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nnew file mode 100644\nindex 00000000..f8b127dc\n--- /dev/null\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of logging variable.\n+  *             If {@code null} is passed, entry is removed from context.\n+  */\n+  public static void put(String key, String value) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      if (value != null) {\n+        ctx.putLocal(LOGGING_VAR_PREFIX + key, value);\n+      } else {\n+        ctx.removeLocal(LOGGING_VAR_PREFIX + key);\n+      }\n+    }\n+  }\n+\n+}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f286193a..f8b127dc 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -13,6 +13,12 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * <p>Usage example in log4j2.properties:</p>\n+ *\n+ * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * appender.console.layout.requestId.key = requestId\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "2244eea70c07e38efdb4e4691500bf800df4f273", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex f8b127dc..26b52e2c 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -7,18 +7,20 @@ import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.lookup.StrLookup;\n \n /**\n- * This class should be used for storing context variables\n- * and use them in logging events.\n- * The variables are stored in the local vert.x\n+ * This class should be used for storing context variables and use them in logging events.\n+ *\n+ * <p>The variables are stored in the local vert.x\n  * {@link io.vertx.core.Context#putLocal Context}\n  * and can be used in log4j log lines by using\n  * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n  *\n- * <p>Usage example in log4j2.properties:</p>\n- *\n- * <p>appender.console.layout.requestId.type = KeyValuePair\n+ * <p>Usage example in log4j2.properties:\n+ * <pre>{@code\n+ * appender.console.layout.requestId.type = KeyValuePair\n  * appender.console.layout.requestId.key = requestId\n- * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}</p>\n+ * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n+ * }\n+ * </pre>\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": {"commit": "1cf878437da253e1e09acd00bb42cbe32c275786", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\nindex 26b52e2c..b253afb3 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n", "chunk": "@@ -21,6 +21,11 @@ import org.apache.logging.log4j.core.lookup.StrLookup;\n  * appender.console.layout.requestId.value = $${FolioLoggingContext:requestid}\n  * }\n  * </pre>\n+ *\n+ * <p>Note this does not work (empty values) when using the\n+ * <a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\">async logger</a>.\n+ *\n+ * <p>The default sync logger works fine.\n  */\n @Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n public class FolioLoggingContext implements StrLookup {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "2244eea70c07e38efdb4e4691500bf800df4f273", "committedDate": "2022-02-24 16:11:10 +0100", "message": "Parallel migration of modules OKAPI-939 (#1210)"}, {"oid": "1cf878437da253e1e09acd00bb42cbe32c275786", "committedDate": "2022-08-30 10:02:20 +0200", "message": "Use log4j map lookup; fixes OKAPI-1117 (#1256)"}, {"oid": "8948d536a819776442e16a64eb20e47098f1c077", "committedDate": "2023-02-21 17:16:18 +0100", "message": "Catch NPE in folio logging context OKAPI-1149 (#1312)"}]}, {"oid": "e14ddcb0b44ccb1b0d1c9c5f5927c239159321f9", "url": "https://github.com/folio-org/okapi/commit/e14ddcb0b44ccb1b0d1c9c5f5927c239159321f9", "message": "Merge branch 'master' into OKAPI-871", "committedDate": "2020-07-23T17:04:16Z", "type": "commit"}, {"oid": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "url": "https://github.com/folio-org/okapi/commit/a4c75e868db3be0a12fc188897dedcf1c9050a49", "message": "OKAPI-871 Review fixes", "committedDate": "2020-07-27T12:02:51Z", "type": "commit"}, {"oid": "bbcb10b0cd9c736df93cddb4e8197dabe062aa57", "url": "https://github.com/folio-org/okapi/commit/bbcb10b0cd9c736df93cddb4e8197dabe062aa57", "message": "Merge remote-tracking branch 'origin/OKAPI-871' into OKAPI-871", "committedDate": "2020-07-27T12:03:52Z", "type": "commit"}, {"oid": "fe2ae252812765ac8a1af3c4775556298581d839", "url": "https://github.com/folio-org/okapi/commit/fe2ae252812765ac8a1af3c4775556298581d839", "message": "OKAPI-871 Review fixes", "committedDate": "2020-07-27T12:33:37Z", "type": "commit"}, {"oid": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "url": "https://github.com/folio-org/okapi/commit/3ddb504fc362abfe011a6051abb0f08f2af262fc", "message": "Add methods to extract username and userId", "committedDate": "2020-07-29T11:00:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462223549", "body": "Maybe also add following lines?\r\n```\r\n    FolioLoggingContext.put(KEY, VALUE);\r\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\r\n```", "bodyText": "Maybe also add following lines?\n    FolioLoggingContext.put(KEY, VALUE);\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));", "bodyHTML": "<p dir=\"auto\">Maybe also add following lines?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    FolioLoggingContext.put(KEY, VALUE);\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\"><pre><code>    FolioLoggingContext.put(KEY, VALUE);\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n</code></pre></div>", "author": "hjiebsco", "createdAt": "2020-07-29T11:17:37Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }", "originalCommit": "fe2ae252812765ac8a1af3c4775556298581d839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NTcwNQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462955705", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-30T12:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c361848fdaa858cf9af23d74c7750d42a71e33b", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\ndeleted file mode 100644\nindex 76a5abe4..00000000\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ /dev/null\n", "chunk": "@@ -1,79 +0,0 @@\n-package org.folio.okapi.common;\n-\n-import org.folio.okapi.common.logging.FolioLoggingContext;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.Vertx;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class FolioLoggingContextTest {\n-\n-\n-  private static final String KEY = \"KEY\";\n-  private static final String VALUE = \"VALUE\";\n-  private static final String EMPTY_STRING = \"\";\n-\n-  private Vertx vertx;\n-\n-  @Before\n-  public void setup() {\n-    vertx = Vertx.vertx();\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    vertx.close();\n-  }\n-\n-  @Test\n-  public void lookupWithoutContextTest(TestContext context) {\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n-  }\n-\n-\n-  @Test\n-  public void lookupPutTest(TestContext context) {\n-    Async async = context.async();\n-    vertx.runOnContext(e -> {\n-      FolioLoggingContext loggingContext = new FolioLoggingContext();\n-      FolioLoggingContext.put(KEY, VALUE);\n-      vertx.runOnContext(c -> {\n-            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n-            async.complete();\n-          }\n-      );\n-    });\n-  }\n-\n-  @Test\n-  public void lookupNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(run -> context.verify(block -> {\n-      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n-      async.complete();\n-    }));\n-  }\n-\n-  @Test\n-  public void putNullTest(TestContext context) {\n-    Async async = context.async();\n-    FolioLoggingContext loggingContext = new FolioLoggingContext();\n-    vertx.runOnContext(e -> {\n-          FolioLoggingContext.put(KEY, VALUE);\n-          FolioLoggingContext.put(KEY, null);\n-          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n-          async.complete();\n-        }\n-    );\n-  }\n-\n-}\n", "next_change": {"commit": "5010edb6c691488d479e6b086736b91483500729", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nnew file mode 100644\nindex 00000000..1044a055\n--- /dev/null\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -0,0 +1,87 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    Async async = context.async();\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      vertx.runOnContext(c -> {\n+            context.assertEquals(VALUE, loggingContext.lookup(KEY));\n+            async.complete();\n+          }\n+      );\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(run -> context.verify(block -> {\n+      Assert.assertThrows(IllegalArgumentException.class, () -> loggingContext.lookup(null));\n+      async.complete();\n+    }));\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, VALUE);\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+          async.complete();\n+        }\n+    );\n+  }\n+\n+}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\nindex 76a5abe4..1044a055 100644\n--- a/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n+++ b/okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java\n", "chunk": "@@ -32,6 +32,14 @@ public class FolioLoggingContextTest {\n     vertx.close();\n   }\n \n+  @Test\n+  public void putWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    FolioLoggingContext.put(KEY, VALUE);\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }\n+\n+\n   @Test\n   public void lookupWithoutContextTest(TestContext context) {\n     FolioLoggingContext loggingContext = new FolioLoggingContext();\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}]}, {"oid": "5c361848fdaa858cf9af23d74c7750d42a71e33b", "url": "https://github.com/folio-org/okapi/commit/5c361848fdaa858cf9af23d74c7750d42a71e33b", "message": "Test null token", "committedDate": "2020-07-29T11:26:28Z", "type": "commit"}, {"oid": "5010edb6c691488d479e6b086736b91483500729", "url": "https://github.com/folio-org/okapi/commit/5010edb6c691488d479e6b086736b91483500729", "message": "OKAPI-871 Additional test", "committedDate": "2020-07-30T12:15:51Z", "type": "commit"}, {"oid": "08efadd3db3f7ba349775199b9986ab7809d9e57", "url": "https://github.com/folio-org/okapi/commit/08efadd3db3f7ba349775199b9986ab7809d9e57", "message": "OKAPI-871 Add userId in Auth", "committedDate": "2020-07-30T12:18:48Z", "type": "commit"}, {"oid": "978c3c7e40fcc0e2784eecb86939d5bc436e3109", "url": "https://github.com/folio-org/okapi/commit/978c3c7e40fcc0e2784eecb86939d5bc436e3109", "message": "Merge remote-tracking branch 'origin/username-userid' into OKAPI-871", "committedDate": "2020-07-30T13:34:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMzYxNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r463003614", "body": "As chatted, we do not need to change okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java ", "bodyText": "As chatted, we do not need to change okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "bodyHTML": "<p dir=\"auto\">As chatted, we do not need to change okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java</p>", "author": "hjiebsco", "createdAt": "2020-07-30T13:40:30Z", "path": "okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "diffHunk": "@@ -222,6 +223,8 @@ public void check(RoutingContext ctx) {\n     }\n     // Fake some module tokens\n     String modTok = moduleTokens(ctx);\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        userId);", "originalCommit": "08efadd3db3f7ba349775199b9986ab7809d9e57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72f8410820987d085c7ae4022421c4a903bbcdd3", "changed_code": [{"header": "diff --git a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\nindex 81c71418..b2953037 100644\n--- a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n+++ b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n", "chunk": "@@ -223,8 +222,6 @@ class Auth {\n     }\n     // Fake some module tokens\n     String modTok = moduleTokens(ctx);\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        userId);\n     ctx.response().headers()\n         .add(XOkapiHeaders.TOKEN, tok)\n         .add(XOkapiHeaders.MODULE_TOKENS, modTok)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\nindex 81c71418..ea629dc8 100644\n--- a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n+++ b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n", "chunk": "@@ -223,8 +224,6 @@ class Auth {\n     }\n     // Fake some module tokens\n     String modTok = moduleTokens(ctx);\n-    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n-        userId);\n     ctx.response().headers()\n         .add(XOkapiHeaders.TOKEN, tok)\n         .add(XOkapiHeaders.MODULE_TOKENS, modTok)\n", "next_change": {"commit": "3f2d4f9a57d2cb03a0f1130240a4622bfc1e0d6a", "changed_code": [{"header": "diff --git a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\nindex ea629dc8..9e0a03bc 100644\n--- a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n+++ b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n", "chunk": "@@ -216,14 +226,26 @@ class Auth {\n     if (des != null) {\n       ctx.response().headers().add(XOkapiHeaders.PERMISSIONS, des);\n     }\n+    String modTok = moduleTokens(ctx);\n     if (req != null) {\n       ctx.response().headers().add(\"X-Auth-Permissions-Required\", req);\n+      if (permissions != null) {\n+        String[] reqList = req.split(\",\");\n+        for (String r : reqList) {\n+          if (!permissions.contains(r)) {\n+            // auth should NOT be returning module tokens in case of errors, but mod-authtoken\n+            // does that at the moment MODAT-107\n+            ctx.response().headers().add(XOkapiHeaders.MODULE_TOKENS, modTok);\n+            HttpResponse.responseError(ctx, 403, \"Call requires permission \" + r);\n+            return;\n+          }\n+        }\n+      }\n     }\n     if (des != null) {\n       ctx.response().headers().add(\"X-Auth-Permissions-Desired\", des);\n     }\n     // Fake some module tokens\n-    String modTok = moduleTokens(ctx);\n     ctx.response().headers()\n         .add(XOkapiHeaders.TOKEN, tok)\n         .add(XOkapiHeaders.MODULE_TOKENS, modTok)\n", "next_change": {"commit": "9bbe8c8e24a9960fe9b33ba1f3efb6fc3e4faefc", "changed_code": [{"header": "diff --git a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\nindex 9e0a03bc..766d6b8c 100644\n--- a/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n+++ b/okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java\n", "chunk": "@@ -251,16 +275,7 @@ class Auth {\n         .add(XOkapiHeaders.MODULE_TOKENS, modTok)\n         .add(XOkapiHeaders.USER_ID, userId);\n     HttpResponse.responseText(ctx, 202); // Abusing 202 to say filter OK\n-    if (ctx.request().method() == HttpMethod.HEAD) {\n-      ctx.response().headers().remove(\"Content-Length\");\n-      ctx.response().setChunked(true);\n-      logger.debug(\"test-auth: Head request\");\n-      //ctx.response().end(\"ACCEPTED\"); // Dirty trick??\n-      ctx.response().write(\"Accpted\");\n-      logger.debug(\"test-auth: Done with the HEAD response\");\n-    } else {\n-      echo(ctx);\n-    }\n+    echo(ctx);\n   }\n \n   private void echo(RoutingContext ctx) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "3738e3440f9ab5592a14b554048818e64aeeeb9c", "committedDate": "2020-10-06 11:50:47 +0200", "message": "Better test for OKAPI-863 (#986)"}, {"oid": "42616bfc5810c305f492adc1c15f52ac9837c7c3", "committedDate": "2020-10-08 22:56:18 -0400", "message": "OKAPI-890 Add iat claim to token"}, {"oid": "59b39eb8b0cbe978145b040bb6c3a2672268739f", "committedDate": "2020-10-08 23:45:42 -0400", "message": "Merge branch 'master' into OKAPI-890"}, {"oid": "3f2d4f9a57d2cb03a0f1130240a4622bfc1e0d6a", "committedDate": "2021-10-19 09:21:09 +0200", "message": "Only put in token in cache if auth returns OK OKAPI-1037 (#1148)"}, {"oid": "9bbe8c8e24a9960fe9b33ba1f3efb6fc3e4faefc", "committedDate": "2022-08-02 15:40:08 +0200", "message": "Copy X-Okapi-Permissions properly OKAPI-1111 (#1252)"}]}, {"oid": "72f8410820987d085c7ae4022421c4a903bbcdd3", "url": "https://github.com/folio-org/okapi/commit/72f8410820987d085c7ae4022421c4a903bbcdd3", "message": "OKAPI-871 Add userId in Auth", "committedDate": "2020-07-30T13:47:06Z", "type": "commit"}, {"oid": "de4092d38f0e6913cb7e251f80b2537c21f27466", "url": "https://github.com/folio-org/okapi/commit/de4092d38f0e6913cb7e251f80b2537c21f27466", "message": "Fix broken build", "committedDate": "2020-08-01T11:14:17Z", "type": "commit"}, {"oid": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "url": "https://github.com/folio-org/okapi/commit/3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "message": "Add bin to gitignore", "committedDate": "2020-08-01T11:15:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r468628222", "body": "Taking a value out of a JWT token without validating the token can cause a security issue because anyone can spoof it.\r\nSuch a value must be handled with caution and care.\r\nI suggest to rename the methods to draw developer attention to the missing validation:\r\n* rename `getTenant()` to `getTenantWithoutValidation()`\r\n* rename `getUsername()` to `getUsernameWithoutValidation()`\r\n* rename `getUserId()` to `getUserIdWithoutValidation()`\r\n* rename `getFieldFromToken(String)` to `getFieldFromTokenWithoutValidation(String)`", "bodyText": "Taking a value out of a JWT token without validating the token can cause a security issue because anyone can spoof it.\nSuch a value must be handled with caution and care.\nI suggest to rename the methods to draw developer attention to the missing validation:\n\nrename getTenant() to getTenantWithoutValidation()\nrename getUsername() to getUsernameWithoutValidation()\nrename getUserId() to getUserIdWithoutValidation()\nrename getFieldFromToken(String) to getFieldFromTokenWithoutValidation(String)", "bodyHTML": "<p dir=\"auto\">Taking a value out of a JWT token without validating the token can cause a security issue because anyone can spoof it.<br>\nSuch a value must be handled with caution and care.<br>\nI suggest to rename the methods to draw developer attention to the missing validation:</p>\n<ul dir=\"auto\">\n<li>rename <code>getTenant()</code> to <code>getTenantWithoutValidation()</code></li>\n<li>rename <code>getUsername()</code> to <code>getUsernameWithoutValidation()</code></li>\n<li>rename <code>getUserId()</code> to <code>getUserIdWithoutValidation()</code></li>\n<li>rename <code>getFieldFromToken(String)</code> to <code>getFieldFromTokenWithoutValidation(String)</code></li>\n</ul>", "author": "julianladisch", "createdAt": "2020-08-11T14:32:33Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -41,16 +46,37 @@ private JsonObject getPayloadWithoutValidation() {\n     }\n   }\n \n+  private String getFieldFromToken(String field) {\n+    if (payloadWithoutValidation == null) {\n+      return null;\n+    }\n+    return payloadWithoutValidation.getString(field);\n+  }\n+\n   /**\n    * Get the tenant out from the token.\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n   public String getTenant() {", "originalCommit": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMyMzc3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r473323779", "bodyText": "fixed", "author": "MikhailFokanov", "createdAt": "2020-08-19T21:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "95a46cbbf506c7b8b5a86c1f61cd81a9c3d86e54", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java b/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\nindex 94456f7f..ad8c3274 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\n", "chunk": "@@ -58,8 +58,8 @@ public class OkapiToken {\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n-  public String getTenant() {\n-    return getFieldFromToken(\"tenant\");\n+  public String getTenantWithoutValidation() {\n+    return getFieldFromTokenWithoutValidation(\"tenant\");\n   }\n \n   /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2944651f795ae9286aa61dec6a96ef48d728da1f", "changed_code": [{"header": "diff --git a/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java b/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\nindex 94456f7f..ad8c3274 100644\n--- a/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\n+++ b/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java\n", "chunk": "@@ -58,8 +58,8 @@ public class OkapiToken {\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n-  public String getTenant() {\n-    return getFieldFromToken(\"tenant\");\n+  public String getTenantWithoutValidation() {\n+    return getFieldFromTokenWithoutValidation(\"tenant\");\n   }\n \n   /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "2944651f795ae9286aa61dec6a96ef48d728da1f", "message": "Merge commit", "committedDate": null}, {"oid": "0b646d615b1a20fb22eb862a365c9a66404817ed", "committedDate": "2021-04-08 15:26:55 +0200", "message": "OKAPI-1004: OkapiClient futurisation"}, {"oid": "e70ee27b3c8abaacf4ca4c1fafbe0ac8aa7c8210", "committedDate": "2022-01-03 16:41:59 +0100", "message": "Add getPayloadWithoutValidation OKAPI-1062 (#1179)"}]}, {"oid": "95a46cbbf506c7b8b5a86c1f61cd81a9c3d86e54", "url": "https://github.com/folio-org/okapi/commit/95a46cbbf506c7b8b5a86c1f61cd81a9c3d86e54", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T12:08:32Z", "type": "commit"}, {"oid": "d8134de1a2c3d32da8d902db36604dfd0a271812", "url": "https://github.com/folio-org/okapi/commit/d8134de1a2c3d32da8d902db36604dfd0a271812", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-871\n\n# Conflicts:\n#\t.gitignore\n#\tokapi-core/src/main/java/org/folio/okapi/util/ProxyContext.java", "committedDate": "2020-08-19T12:15:26Z", "type": "commit"}, {"oid": "d6683bff1742773173f0bd22b101c27920850fb4", "url": "https://github.com/folio-org/okapi/commit/d6683bff1742773173f0bd22b101c27920850fb4", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T20:03:42Z", "type": "commit"}, {"oid": "9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "url": "https://github.com/folio-org/okapi/commit/9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T20:11:58Z", "type": "commit"}]}